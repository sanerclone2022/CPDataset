[{"authorTime":"2020-10-10 11:10:15","codes":[{"authorDate":"2020-10-12 19:42:52","commitOrder":6,"curCode":"\tprivate int readSplitAndCheck(\n\t\t\tint start,\n\t\t\tlong seekToRow,\n\t\t\tPath testPath,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tList<Integer> values) throws IOException {\n\t\tParquetColumnarRowSplitReader reader = createReader(testPath, splitStart, splitLength);\n\t\treader.seekToRow(seekToRow);\n\n\t\tint i = start;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\t\t\tInteger v = values.get(i);\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t\treturn i - start;\n\t}\n","date":"2020-10-12 19:42:52","endLine":294,"groupId":"50227","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readSplitAndCheck","params":"(intstart@longseekToRow@PathtestPath@longsplitStart@longsplitLength@List<Integer>values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/90fce24187b33158269ae499d86f0e9c2c9cab.src","preCode":"\tprivate int readSplitAndCheck(\n\t\t\tint start,\n\t\t\tlong seekToRow,\n\t\t\tPath testPath,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tList<Integer> values) throws IOException {\n\t\tParquetColumnarRowSplitReader reader = createReader(testPath, splitStart, splitLength);\n\t\treader.seekToRow(seekToRow);\n\n\t\tint i = start;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\t\t\tInteger v = values.get(i);\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t\treturn i - start;\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"NB"},{"authorDate":"2020-10-10 11:10:15","commitOrder":6,"curCode":"\tprivate int testReadingSplit(\n\t\t\tList<Integer> expected,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tlong seekToRow) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0)};\n\n\t\tParquetColumnarRowInputFormat format = new ParquetColumnarRowInputFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\t\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\",\n\t\t\t\t\t\t\"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\"},\n\t\t\t\tfieldTypes,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\t\r\n\t\ttry {\n\t\t\tInstantiationUtil.clone(format);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\n\t\tBulkFormat.Reader<RowData> reader = format.restoreReader(\n\t\t\t\tEMPTY_CONF,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength,\n\t\t\t\tnew CheckpointedPosition(CheckpointedPosition.NO_OFFSET, seekToRow));\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(reader, row -> {\n\t\t\tInteger v = expected.get(cnt.get());\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\n\t\treturn cnt.get();\n\t}\n","date":"2020-10-13 10:32:07","endLine":404,"groupId":"28737","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadingSplit","params":"(List<Integer>expected@Pathpath@longsplitStart@longsplitLength@longseekToRow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/626d28f0ed6e0958399c21a8d21798bf850415.src","preCode":"\tprivate int testReadingSplit(\n\t\t\tList<Integer> expected,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tlong seekToRow) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0)};\n\n\t\tParquetColumnarRowInputFormat format = new ParquetColumnarRowInputFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\t\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\",\n\t\t\t\t\t\t\"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\"},\n\t\t\t\tfieldTypes,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\t\r\n\t\ttry {\n\t\t\tInstantiationUtil.clone(format);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\n\t\tBulkFormat.Reader<RowData> reader = format.restoreReader(\n\t\t\t\tEMPTY_CONF,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength,\n\t\t\t\tnew CheckpointedPosition(CheckpointedPosition.NO_OFFSET, seekToRow));\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(reader, row -> {\n\t\t\tInteger v = expected.get(cnt.get());\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\n\t\treturn cnt.get();\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"B"}],"commitId":"8da968e8d0b1bb13e79d227236f814db69eb31a7","commitMessage":"@@@[FLINK-19414][parquet] Introduce ParquetColumnarRowInputFormat\n","date":"2020-10-13 10:32:07","modifiedFileCount":"4","status":"M","submitter":"JingsongLi"},{"authorTime":"2020-10-29 15:42:08","codes":[{"authorDate":"2020-10-12 19:42:52","commitOrder":7,"curCode":"\tprivate int readSplitAndCheck(\n\t\t\tint start,\n\t\t\tlong seekToRow,\n\t\t\tPath testPath,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tList<Integer> values) throws IOException {\n\t\tParquetColumnarRowSplitReader reader = createReader(testPath, splitStart, splitLength);\n\t\treader.seekToRow(seekToRow);\n\n\t\tint i = start;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\t\t\tInteger v = values.get(i);\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t\treturn i - start;\n\t}\n","date":"2020-10-12 19:42:52","endLine":294,"groupId":"50227","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readSplitAndCheck","params":"(intstart@longseekToRow@PathtestPath@longsplitStart@longsplitLength@List<Integer>values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/90fce24187b33158269ae499d86f0e9c2c9cab.src","preCode":"\tprivate int readSplitAndCheck(\n\t\t\tint start,\n\t\t\tlong seekToRow,\n\t\t\tPath testPath,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tList<Integer> values) throws IOException {\n\t\tParquetColumnarRowSplitReader reader = createReader(testPath, splitStart, splitLength);\n\t\treader.seekToRow(seekToRow);\n\n\t\tint i = start;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\t\t\tInteger v = values.get(i);\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t\treturn i - start;\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"N"},{"authorDate":"2020-10-29 15:42:08","commitOrder":7,"curCode":"\tprivate int testReadingSplit(\n\t\t\tList<Integer> expected,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tlong seekToRow) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0)};\n\n\t\tParquetColumnarRowInputFormat format = new ParquetColumnarRowInputFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tRowType.of(fieldTypes, new String[] {\n\t\t\t\t\t\t\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\",\n\t\t\t\t\t\t\"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\"}),\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\t\r\n\t\ttry {\n\t\t\tInstantiationUtil.clone(format);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\n\t\tBulkFormat.Reader<RowData> reader = format.restoreReader(\n\t\t\t\tEMPTY_CONF,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength,\n\t\t\t\tnew CheckpointedPosition(CheckpointedPosition.NO_OFFSET, seekToRow));\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(reader, row -> {\n\t\t\tInteger v = expected.get(cnt.get());\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\n\t\treturn cnt.get();\n\t}\n","date":"2020-10-29 15:42:08","endLine":402,"groupId":"28737","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadingSplit","params":"(List<Integer>expected@Pathpath@longsplitStart@longsplitLength@longseekToRow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/fe757f0dcbf571f7e276bf990fec869b1d9ae8.src","preCode":"\tprivate int testReadingSplit(\n\t\t\tList<Integer> expected,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tlong seekToRow) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0)};\n\n\t\tParquetColumnarRowInputFormat format = new ParquetColumnarRowInputFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\t\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\",\n\t\t\t\t\t\t\"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\"},\n\t\t\t\tfieldTypes,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\t\r\n\t\ttry {\n\t\t\tInstantiationUtil.clone(format);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\n\t\tBulkFormat.Reader<RowData> reader = format.restoreReader(\n\t\t\t\tEMPTY_CONF,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength,\n\t\t\t\tnew CheckpointedPosition(CheckpointedPosition.NO_OFFSET, seekToRow));\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(reader, row -> {\n\t\t\tInteger v = expected.get(cnt.get());\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\n\t\treturn cnt.get();\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"68361845c25f85e13526d3634d5437cb37050cfc","commitMessage":"@@@[FLINK-19599][table] Introduce Filesystem format factories to integrate new FileSource to table\n\nThis closes #13605","date":"2020-10-29 15:42:08","modifiedFileCount":"10","status":"M","submitter":"Jingsong Lee"},{"authorTime":"2020-10-26 03:00:26","codes":[{"authorDate":"2020-10-12 19:42:52","commitOrder":8,"curCode":"\tprivate int readSplitAndCheck(\n\t\t\tint start,\n\t\t\tlong seekToRow,\n\t\t\tPath testPath,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tList<Integer> values) throws IOException {\n\t\tParquetColumnarRowSplitReader reader = createReader(testPath, splitStart, splitLength);\n\t\treader.seekToRow(seekToRow);\n\n\t\tint i = start;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\t\t\tInteger v = values.get(i);\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t\treturn i - start;\n\t}\n","date":"2020-10-12 19:42:52","endLine":294,"groupId":"50227","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"readSplitAndCheck","params":"(intstart@longseekToRow@PathtestPath@longsplitStart@longsplitLength@List<Integer>values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/90fce24187b33158269ae499d86f0e9c2c9cab.src","preCode":"\tprivate int readSplitAndCheck(\n\t\t\tint start,\n\t\t\tlong seekToRow,\n\t\t\tPath testPath,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tList<Integer> values) throws IOException {\n\t\tParquetColumnarRowSplitReader reader = createReader(testPath, splitStart, splitLength);\n\t\treader.seekToRow(seekToRow);\n\n\t\tint i = start;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\t\t\tInteger v = values.get(i);\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t\treturn i - start;\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"N"},{"authorDate":"2020-10-26 03:00:26","commitOrder":8,"curCode":"\tprivate int testReadingSplit(\n\t\t\tList<Integer> expected,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tlong seekToRow) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0)};\n\n\t\tParquetColumnarRowInputFormat format = new ParquetColumnarRowInputFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tRowType.of(fieldTypes, new String[] {\n\t\t\t\t\t\t\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\",\n\t\t\t\t\t\t\"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\"}),\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\t\r\n\t\ttry {\n\t\t\tInstantiationUtil.clone(format);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\n\t\tBulkFormat.Reader<RowData> reader = format.restoreReader(\n\t\t\t\tEMPTY_CONF,\n\t\t\t\tnew FileSourceSplit(\n\t\t\t\t\t\t\"id\",\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tsplitStart,\n\t\t\t\t\t\tsplitLength,\n\t\t\t\t\t\tnew String[0],\n\t\t\t\t\t\tnew CheckpointedPosition(CheckpointedPosition.NO_OFFSET, seekToRow)));\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(reader, row -> {\n\t\t\tInteger v = expected.get(cnt.get());\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\n\t\treturn cnt.get();\n\t}\n","date":"2020-11-03 23:33:28","endLine":406,"groupId":"28737","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadingSplit","params":"(List<Integer>expected@Pathpath@longsplitStart@longsplitLength@longseekToRow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/39/86f3fd815d91ed2d8c366f3df6332fc83ef073.src","preCode":"\tprivate int testReadingSplit(\n\t\t\tList<Integer> expected,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tlong seekToRow) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0)};\n\n\t\tParquetColumnarRowInputFormat format = new ParquetColumnarRowInputFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tRowType.of(fieldTypes, new String[] {\n\t\t\t\t\t\t\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\",\n\t\t\t\t\t\t\"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\"}),\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\t\r\n\t\ttry {\n\t\t\tInstantiationUtil.clone(format);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\n\t\tBulkFormat.Reader<RowData> reader = format.restoreReader(\n\t\t\t\tEMPTY_CONF,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength,\n\t\t\t\tnew CheckpointedPosition(CheckpointedPosition.NO_OFFSET, seekToRow));\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(reader, row -> {\n\t\t\tInteger v = expected.get(cnt.get());\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\n\t\treturn cnt.get();\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"}],"commitId":"a2849b327635233d34686a9ab95cf3486ac08ae5","commitMessage":"@@@[FLINK-19802][connector files] Let BulkFormat createReader and restoreReader methods accept Splits directly\n\nThis is a step in supporting File Sources for BulkFormats that need subclasses of FileSourceSplit.\n","date":"2020-11-03 23:33:28","modifiedFileCount":"19","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2021-04-13 15:39:15","codes":[{"authorDate":"2020-10-12 19:42:52","commitOrder":9,"curCode":"\tprivate int readSplitAndCheck(\n\t\t\tint start,\n\t\t\tlong seekToRow,\n\t\t\tPath testPath,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tList<Integer> values) throws IOException {\n\t\tParquetColumnarRowSplitReader reader = createReader(testPath, splitStart, splitLength);\n\t\treader.seekToRow(seekToRow);\n\n\t\tint i = start;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\t\t\tInteger v = values.get(i);\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t\treturn i - start;\n\t}\n","date":"2020-10-12 19:42:52","endLine":294,"groupId":"101981","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"readSplitAndCheck","params":"(intstart@longseekToRow@PathtestPath@longsplitStart@longsplitLength@List<Integer>values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/90fce24187b33158269ae499d86f0e9c2c9cab.src","preCode":"\tprivate int readSplitAndCheck(\n\t\t\tint start,\n\t\t\tlong seekToRow,\n\t\t\tPath testPath,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength,\n\t\t\tList<Integer> values) throws IOException {\n\t\tParquetColumnarRowSplitReader reader = createReader(testPath, splitStart, splitLength);\n\t\treader.seekToRow(seekToRow);\n\n\t\tint i = start;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\t\t\tInteger v = values.get(i);\n\t\t\tif (v == null) {\n\t\t\t\tassertTrue(row.isNullAt(0));\n\t\t\t\tassertTrue(row.isNullAt(1));\n\t\t\t\tassertTrue(row.isNullAt(2));\n\t\t\t\tassertTrue(row.isNullAt(3));\n\t\t\t\tassertTrue(row.isNullAt(4));\n\t\t\t\tassertTrue(row.isNullAt(5));\n\t\t\t\tassertTrue(row.isNullAt(6));\n\t\t\t\tassertTrue(row.isNullAt(7));\n\t\t\t\tassertTrue(row.isNullAt(8));\n\t\t\t\tassertTrue(row.isNullAt(9));\n\t\t\t\tassertTrue(row.isNullAt(10));\n\t\t\t\tassertTrue(row.isNullAt(11));\n\t\t\t\tassertTrue(row.isNullAt(12));\n\t\t\t\tassertTrue(row.isNullAt(13));\n\t\t\t\tassertTrue(row.isNullAt(14));\n\t\t\t} else {\n\t\t\t\tassertEquals(\"\" + v, row.getString(0).toString());\n\t\t\t\tassertEquals(v % 2 == 0, row.getBoolean(1));\n\t\t\t\tassertEquals(v.byteValue(), row.getByte(2));\n\t\t\t\tassertEquals(v.shortValue(), row.getShort(3));\n\t\t\t\tassertEquals(v.intValue(), row.getInt(4));\n\t\t\t\tassertEquals(v.longValue(), row.getLong(5));\n\t\t\t\tassertEquals(v.floatValue(), row.getFloat(6), 0);\n\t\t\t\tassertEquals(v.doubleValue(), row.getDouble(7), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\ttoDateTime(v),\n\t\t\t\t\t\trow.getTimestamp(8, 9).toLocalDateTime());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n\t\t\t\tassertEquals(BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t\treturn i - start;\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"N"},{"authorDate":"2021-04-13 15:39:15","commitOrder":9,"curCode":"    private int testReadingSplit(\n            List<Integer> expected, Path path, long splitStart, long splitLength, long seekToRow)\n            throws IOException {\n        LogicalType[] fieldTypes =\n                new LogicalType[] {\n                    new VarCharType(VarCharType.MAX_LENGTH),\n                    new BooleanType(),\n                    new TinyIntType(),\n                    new SmallIntType(),\n                    new IntType(),\n                    new BigIntType(),\n                    new FloatType(),\n                    new DoubleType(),\n                    new TimestampType(9),\n                    new DecimalType(5, 0),\n                    new DecimalType(15, 0),\n                    new DecimalType(20, 0),\n                    new DecimalType(5, 0),\n                    new DecimalType(15, 0),\n                    new DecimalType(20, 0)\n                };\n\n        ParquetColumnarRowInputFormat format =\n                new ParquetColumnarRowInputFormat(\n                        new Configuration(),\n                        RowType.of(\n                                fieldTypes,\n                                new String[] {\n                                    \"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \"f8\", \"f9\",\n                                    \"f10\", \"f11\", \"f12\", \"f13\", \"f14\"\n                                }),\n                        500,\n                        false,\n                        true);\n\n        \r\n        try {\n            InstantiationUtil.clone(format);\n        } catch (ClassNotFoundException e) {\n            throw new IOException(e);\n        }\n\n        BulkFormat.Reader<RowData> reader =\n                format.restoreReader(\n                        EMPTY_CONF,\n                        new FileSourceSplit(\n                                \"id\",\n                                path,\n                                splitStart,\n                                splitLength,\n                                new String[0],\n                                new CheckpointedPosition(\n                                        CheckpointedPosition.NO_OFFSET, seekToRow)));\n\n        AtomicInteger cnt = new AtomicInteger(0);\n        final AtomicReference<RowData> previousRow = new AtomicReference<>();\n        forEachRemaining(\n                reader,\n                row -> {\n                    if (previousRow.get() == null) {\n                        previousRow.set(row);\n                    } else {\n                        \r\n                        assertSame(previousRow.get(), row);\n                    }\n\n                    Integer v = expected.get(cnt.get());\n                    if (v == null) {\n                        assertTrue(row.isNullAt(0));\n                        assertTrue(row.isNullAt(1));\n                        assertTrue(row.isNullAt(2));\n                        assertTrue(row.isNullAt(3));\n                        assertTrue(row.isNullAt(4));\n                        assertTrue(row.isNullAt(5));\n                        assertTrue(row.isNullAt(6));\n                        assertTrue(row.isNullAt(7));\n                        assertTrue(row.isNullAt(8));\n                        assertTrue(row.isNullAt(9));\n                        assertTrue(row.isNullAt(10));\n                        assertTrue(row.isNullAt(11));\n                        assertTrue(row.isNullAt(12));\n                        assertTrue(row.isNullAt(13));\n                        assertTrue(row.isNullAt(14));\n                    } else {\n                        assertEquals(\"\" + v, row.getString(0).toString());\n                        assertEquals(v % 2 == 0, row.getBoolean(1));\n                        assertEquals(v.byteValue(), row.getByte(2));\n                        assertEquals(v.shortValue(), row.getShort(3));\n                        assertEquals(v.intValue(), row.getInt(4));\n                        assertEquals(v.longValue(), row.getLong(5));\n                        assertEquals(v.floatValue(), row.getFloat(6), 0);\n                        assertEquals(v.doubleValue(), row.getDouble(7), 0);\n                        assertEquals(toDateTime(v), row.getTimestamp(8, 9).toLocalDateTime());\n                        assertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n                    }\n                    cnt.incrementAndGet();\n                });\n\n        return cnt.get();\n    }\n","date":"2021-04-13 15:39:15","endLine":452,"groupId":"101981","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadingSplit","params":"(List<Integer>expected@Pathpath@longsplitStart@longsplitLength@longseekToRow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/f21167ec50075cc30aa1ce3ca76374928026b7.src","preCode":"    private int testReadingSplit(\n            List<Integer> expected, Path path, long splitStart, long splitLength, long seekToRow)\n            throws IOException {\n        LogicalType[] fieldTypes =\n                new LogicalType[] {\n                    new VarCharType(VarCharType.MAX_LENGTH),\n                    new BooleanType(),\n                    new TinyIntType(),\n                    new SmallIntType(),\n                    new IntType(),\n                    new BigIntType(),\n                    new FloatType(),\n                    new DoubleType(),\n                    new TimestampType(9),\n                    new DecimalType(5, 0),\n                    new DecimalType(15, 0),\n                    new DecimalType(20, 0),\n                    new DecimalType(5, 0),\n                    new DecimalType(15, 0),\n                    new DecimalType(20, 0)\n                };\n\n        ParquetColumnarRowInputFormat format =\n                new ParquetColumnarRowInputFormat(\n                        new Configuration(),\n                        RowType.of(\n                                fieldTypes,\n                                new String[] {\n                                    \"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \"f8\", \"f9\",\n                                    \"f10\", \"f11\", \"f12\", \"f13\", \"f14\"\n                                }),\n                        500,\n                        false,\n                        true);\n\n        \r\n        try {\n            InstantiationUtil.clone(format);\n        } catch (ClassNotFoundException e) {\n            throw new IOException(e);\n        }\n\n        BulkFormat.Reader<RowData> reader =\n                format.restoreReader(\n                        EMPTY_CONF,\n                        new FileSourceSplit(\n                                \"id\",\n                                path,\n                                splitStart,\n                                splitLength,\n                                new String[0],\n                                new CheckpointedPosition(\n                                        CheckpointedPosition.NO_OFFSET, seekToRow)));\n\n        AtomicInteger cnt = new AtomicInteger(0);\n        forEachRemaining(\n                reader,\n                row -> {\n                    Integer v = expected.get(cnt.get());\n                    if (v == null) {\n                        assertTrue(row.isNullAt(0));\n                        assertTrue(row.isNullAt(1));\n                        assertTrue(row.isNullAt(2));\n                        assertTrue(row.isNullAt(3));\n                        assertTrue(row.isNullAt(4));\n                        assertTrue(row.isNullAt(5));\n                        assertTrue(row.isNullAt(6));\n                        assertTrue(row.isNullAt(7));\n                        assertTrue(row.isNullAt(8));\n                        assertTrue(row.isNullAt(9));\n                        assertTrue(row.isNullAt(10));\n                        assertTrue(row.isNullAt(11));\n                        assertTrue(row.isNullAt(12));\n                        assertTrue(row.isNullAt(13));\n                        assertTrue(row.isNullAt(14));\n                    } else {\n                        assertEquals(\"\" + v, row.getString(0).toString());\n                        assertEquals(v % 2 == 0, row.getBoolean(1));\n                        assertEquals(v.byteValue(), row.getByte(2));\n                        assertEquals(v.shortValue(), row.getShort(3));\n                        assertEquals(v.intValue(), row.getInt(4));\n                        assertEquals(v.longValue(), row.getLong(5));\n                        assertEquals(v.floatValue(), row.getFloat(6), 0);\n                        assertEquals(v.doubleValue(), row.getDouble(7), 0);\n                        assertEquals(toDateTime(v), row.getTimestamp(8, 9).toLocalDateTime());\n                        assertEquals(BigDecimal.valueOf(v), row.getDecimal(9, 5, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(10, 15, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(11, 20, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(12, 5, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(13, 15, 0).toBigDecimal());\n                        assertEquals(\n                                BigDecimal.valueOf(v), row.getDecimal(14, 20, 0).toBigDecimal());\n                    }\n                    cnt.incrementAndGet();\n                });\n\n        return cnt.get();\n    }\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"}],"commitId":"413ff6ae7e7a1bd6c5fe495a141f02d383165776","commitMessage":"@@@[FLINK-22202][parquet] Thread safety in ParquetColumnarRowInputFormat\n\nThis closes #15572","date":"2021-04-13 15:39:15","modifiedFileCount":"3","status":"M","submitter":"Jingsong Lee"}]
