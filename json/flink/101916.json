[{"authorTime":"2017-08-16 18:17:00","codes":[{"authorDate":"2017-08-16 18:17:00","commitOrder":1,"curCode":"\tpublic void testSplittedIF() throws IOException {\n\t\tConfiguration parameters = new Configuration();\n\n\t\tAvroInputFormat<User> format = new AvroInputFormat<User>(new Path(testFile.getAbsolutePath()), User.class);\n\n\t\tformat.configure(parameters);\n\t\tFileInputSplit[] splits = format.createInputSplits(4);\n\t\tassertEquals(splits.length, 4);\n\t\tint elements = 0;\n\t\tint[] elementsPerSplit = new int[4];\n\t\tfor (int i = 0; i < splits.length; i++) {\n\t\t\tformat.open(splits[i]);\n\t\t\twhile (!format.reachedEnd()) {\n\t\t\t\tUser u = format.nextRecord(null);\n\t\t\t\tAssert.assertTrue(u.getName().toString().startsWith(TEST_NAME));\n\t\t\t\telements++;\n\t\t\t\telementsPerSplit[i]++;\n\t\t\t}\n\t\t\tformat.close();\n\t\t}\n\n\t\tAssert.assertEquals(1539, elementsPerSplit[0]);\n\t\tAssert.assertEquals(1026, elementsPerSplit[1]);\n\t\tAssert.assertEquals(1539, elementsPerSplit[2]);\n\t\tAssert.assertEquals(896, elementsPerSplit[3]);\n\t\tAssert.assertEquals(NUM_RECORDS, elements);\n\t\tformat.close();\n\t}\n","date":"2017-11-03 23:40:34","endLine":191,"groupId":"7030","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSplittedIF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/40/a84f9f04c7c043df9f28db5077a8badab3ce2d.src","preCode":"\tpublic void testSplittedIF() throws IOException {\n\t\tConfiguration parameters = new Configuration();\n\n\t\tAvroInputFormat<User> format = new AvroInputFormat<User>(new Path(testFile.getAbsolutePath()), User.class);\n\n\t\tformat.configure(parameters);\n\t\tFileInputSplit[] splits = format.createInputSplits(4);\n\t\tassertEquals(splits.length, 4);\n\t\tint elements = 0;\n\t\tint[] elementsPerSplit = new int[4];\n\t\tfor (int i = 0; i < splits.length; i++) {\n\t\t\tformat.open(splits[i]);\n\t\t\twhile (!format.reachedEnd()) {\n\t\t\t\tUser u = format.nextRecord(null);\n\t\t\t\tAssert.assertTrue(u.getName().toString().startsWith(TEST_NAME));\n\t\t\t\telements++;\n\t\t\t\telementsPerSplit[i]++;\n\t\t\t}\n\t\t\tformat.close();\n\t\t}\n\n\t\tAssert.assertEquals(1539, elementsPerSplit[0]);\n\t\tAssert.assertEquals(1026, elementsPerSplit[1]);\n\t\tAssert.assertEquals(1539, elementsPerSplit[2]);\n\t\tAssert.assertEquals(896, elementsPerSplit[3]);\n\t\tAssert.assertEquals(NUM_RECORDS, elements);\n\t\tformat.close();\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/AvroSplittableInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"},{"authorDate":"2017-08-16 18:17:00","commitOrder":1,"curCode":"\tpublic void testAvroRecovery() throws Exception {\n\t\tfinal int recordsUntilCheckpoint = 132;\n\n\t\tConfiguration parameters = new Configuration();\n\n\t\tAvroInputFormat<User> format = new AvroInputFormat<User>(new Path(testFile.getAbsolutePath()), User.class);\n\t\tformat.configure(parameters);\n\n\t\tFileInputSplit[] splits = format.createInputSplits(4);\n\t\tassertEquals(splits.length, 4);\n\n\t\tint elements = 0;\n\t\tint[] elementsPerSplit = new int[4];\n\t\tfor (int i = 0; i < splits.length; i++) {\n\t\t\tformat.open(splits[i]);\n\t\t\twhile (!format.reachedEnd()) {\n\t\t\t\tUser u = format.nextRecord(null);\n\t\t\t\tAssert.assertTrue(u.getName().toString().startsWith(TEST_NAME));\n\t\t\t\telements++;\n\n\t\t\t\tif (format.getRecordsReadFromBlock() == recordsUntilCheckpoint) {\n\n\t\t\t\t\t\r\n\t\t\t\t\tTuple2<Long, Long> state = format.getCurrentState();\n\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tformat = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()), User.class);\n\n\t\t\t\t\tformat.reopen(splits[i], state);\n\t\t\t\t\tassertEquals(format.getRecordsReadFromBlock(), recordsUntilCheckpoint);\n\t\t\t\t}\n\t\t\t\telementsPerSplit[i]++;\n\t\t\t}\n\t\t\tformat.close();\n\t\t}\n\n\t\tAssert.assertEquals(1539, elementsPerSplit[0]);\n\t\tAssert.assertEquals(1026, elementsPerSplit[1]);\n\t\tAssert.assertEquals(1539, elementsPerSplit[2]);\n\t\tAssert.assertEquals(896, elementsPerSplit[3]);\n\t\tAssert.assertEquals(NUM_RECORDS, elements);\n\t\tformat.close();\n\t}\n","date":"2017-11-03 23:40:34","endLine":283,"groupId":"16366","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvroRecovery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/40/a84f9f04c7c043df9f28db5077a8badab3ce2d.src","preCode":"\tpublic void testAvroRecovery() throws Exception {\n\t\tfinal int recordsUntilCheckpoint = 132;\n\n\t\tConfiguration parameters = new Configuration();\n\n\t\tAvroInputFormat<User> format = new AvroInputFormat<User>(new Path(testFile.getAbsolutePath()), User.class);\n\t\tformat.configure(parameters);\n\n\t\tFileInputSplit[] splits = format.createInputSplits(4);\n\t\tassertEquals(splits.length, 4);\n\n\t\tint elements = 0;\n\t\tint[] elementsPerSplit = new int[4];\n\t\tfor (int i = 0; i < splits.length; i++) {\n\t\t\tformat.open(splits[i]);\n\t\t\twhile (!format.reachedEnd()) {\n\t\t\t\tUser u = format.nextRecord(null);\n\t\t\t\tAssert.assertTrue(u.getName().toString().startsWith(TEST_NAME));\n\t\t\t\telements++;\n\n\t\t\t\tif (format.getRecordsReadFromBlock() == recordsUntilCheckpoint) {\n\n\t\t\t\t\t\r\n\t\t\t\t\tTuple2<Long, Long> state = format.getCurrentState();\n\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tformat = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()), User.class);\n\n\t\t\t\t\tformat.reopen(splits[i], state);\n\t\t\t\t\tassertEquals(format.getRecordsReadFromBlock(), recordsUntilCheckpoint);\n\t\t\t\t}\n\t\t\t\telementsPerSplit[i]++;\n\t\t\t}\n\t\t\tformat.close();\n\t\t}\n\n\t\tAssert.assertEquals(1539, elementsPerSplit[0]);\n\t\tAssert.assertEquals(1026, elementsPerSplit[1]);\n\t\tAssert.assertEquals(1539, elementsPerSplit[2]);\n\t\tAssert.assertEquals(896, elementsPerSplit[3]);\n\t\tAssert.assertEquals(NUM_RECORDS, elements);\n\t\tformat.close();\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/AvroSplittableInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"B"}],"commitId":"537a10ea2ff6a2d8507483c66f413f77884e77c4","commitMessage":"@@@[FLINK-7420] [avro] Move all Avro code to flink-avro\n","date":"2017-11-03 23:40:34","modifiedFileCount":"10","status":"B","submitter":"twalthr"},{"authorTime":"2018-06-26 17:46:06","codes":[{"authorDate":"2018-06-26 17:46:06","commitOrder":2,"curCode":"\tpublic void testSplittedIF() throws IOException {\n\t\tConfiguration parameters = new Configuration();\n\n\t\tAvroInputFormat<User> format = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()), User.class);\n\n\t\tformat.configure(parameters);\n\t\tFileInputSplit[] splits = format.createInputSplits(4);\n\t\tassertEquals(splits.length, 4);\n\t\tint elements = 0;\n\t\tint[] elementsPerSplit = new int[4];\n\t\tfor (int i = 0; i < splits.length; i++) {\n\t\t\tformat.open(splits[i]);\n\t\t\twhile (!format.reachedEnd()) {\n\t\t\t\tUser u = format.nextRecord(null);\n\t\t\t\tAssert.assertTrue(u.getName().toString().startsWith(TEST_NAME));\n\t\t\t\telements++;\n\t\t\t\telementsPerSplit[i]++;\n\t\t\t}\n\t\t\tformat.close();\n\t\t}\n\n\t\tAssert.assertEquals(1604, elementsPerSplit[0]);\n\t\tAssert.assertEquals(1203, elementsPerSplit[1]);\n\t\tAssert.assertEquals(1203, elementsPerSplit[2]);\n\t\tAssert.assertEquals(990, elementsPerSplit[3]);\n\t\tAssert.assertEquals(NUM_RECORDS, elements);\n\t\tformat.close();\n\t}\n","date":"2018-07-03 21:40:44","endLine":227,"groupId":"101916","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSplittedIF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fe/e81a82758c48af9a6499ce3a1ba82ed06b139d.src","preCode":"\tpublic void testSplittedIF() throws IOException {\n\t\tConfiguration parameters = new Configuration();\n\n\t\tAvroInputFormat<User> format = new AvroInputFormat<User>(new Path(testFile.getAbsolutePath()), User.class);\n\n\t\tformat.configure(parameters);\n\t\tFileInputSplit[] splits = format.createInputSplits(4);\n\t\tassertEquals(splits.length, 4);\n\t\tint elements = 0;\n\t\tint[] elementsPerSplit = new int[4];\n\t\tfor (int i = 0; i < splits.length; i++) {\n\t\t\tformat.open(splits[i]);\n\t\t\twhile (!format.reachedEnd()) {\n\t\t\t\tUser u = format.nextRecord(null);\n\t\t\t\tAssert.assertTrue(u.getName().toString().startsWith(TEST_NAME));\n\t\t\t\telements++;\n\t\t\t\telementsPerSplit[i]++;\n\t\t\t}\n\t\t\tformat.close();\n\t\t}\n\n\t\tAssert.assertEquals(1539, elementsPerSplit[0]);\n\t\tAssert.assertEquals(1026, elementsPerSplit[1]);\n\t\tAssert.assertEquals(1539, elementsPerSplit[2]);\n\t\tAssert.assertEquals(896, elementsPerSplit[3]);\n\t\tAssert.assertEquals(NUM_RECORDS, elements);\n\t\tformat.close();\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/AvroSplittableInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2018-06-26 17:46:06","commitOrder":2,"curCode":"\tpublic void testAvroRecovery() throws Exception {\n\t\tfinal int recordsUntilCheckpoint = 132;\n\n\t\tConfiguration parameters = new Configuration();\n\n\t\tAvroInputFormat<User> format = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()), User.class);\n\t\tformat.configure(parameters);\n\n\t\tFileInputSplit[] splits = format.createInputSplits(4);\n\t\tassertEquals(splits.length, 4);\n\n\t\tint elements = 0;\n\t\tint[] elementsPerSplit = new int[4];\n\t\tfor (int i = 0; i < splits.length; i++) {\n\t\t\tformat.open(splits[i]);\n\t\t\twhile (!format.reachedEnd()) {\n\t\t\t\tUser u = format.nextRecord(null);\n\t\t\t\tAssert.assertTrue(u.getName().toString().startsWith(TEST_NAME));\n\t\t\t\telements++;\n\n\t\t\t\tif (format.getRecordsReadFromBlock() == recordsUntilCheckpoint) {\n\n\t\t\t\t\t\r\n\t\t\t\t\tTuple2<Long, Long> state = format.getCurrentState();\n\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tformat = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()), User.class);\n\n\t\t\t\t\tformat.reopen(splits[i], state);\n\t\t\t\t\tassertEquals(format.getRecordsReadFromBlock(), recordsUntilCheckpoint);\n\t\t\t\t}\n\t\t\t\telementsPerSplit[i]++;\n\t\t\t}\n\t\t\tformat.close();\n\t\t}\n\n\t\tAssert.assertEquals(1604, elementsPerSplit[0]);\n\t\tAssert.assertEquals(1203, elementsPerSplit[1]);\n\t\tAssert.assertEquals(1203, elementsPerSplit[2]);\n\t\tAssert.assertEquals(990, elementsPerSplit[3]);\n\t\tAssert.assertEquals(NUM_RECORDS, elements);\n\t\tformat.close();\n\t}\n","date":"2018-07-03 21:40:44","endLine":319,"groupId":"101916","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvroRecovery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fe/e81a82758c48af9a6499ce3a1ba82ed06b139d.src","preCode":"\tpublic void testAvroRecovery() throws Exception {\n\t\tfinal int recordsUntilCheckpoint = 132;\n\n\t\tConfiguration parameters = new Configuration();\n\n\t\tAvroInputFormat<User> format = new AvroInputFormat<User>(new Path(testFile.getAbsolutePath()), User.class);\n\t\tformat.configure(parameters);\n\n\t\tFileInputSplit[] splits = format.createInputSplits(4);\n\t\tassertEquals(splits.length, 4);\n\n\t\tint elements = 0;\n\t\tint[] elementsPerSplit = new int[4];\n\t\tfor (int i = 0; i < splits.length; i++) {\n\t\t\tformat.open(splits[i]);\n\t\t\twhile (!format.reachedEnd()) {\n\t\t\t\tUser u = format.nextRecord(null);\n\t\t\t\tAssert.assertTrue(u.getName().toString().startsWith(TEST_NAME));\n\t\t\t\telements++;\n\n\t\t\t\tif (format.getRecordsReadFromBlock() == recordsUntilCheckpoint) {\n\n\t\t\t\t\t\r\n\t\t\t\t\tTuple2<Long, Long> state = format.getCurrentState();\n\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tformat = new AvroInputFormat<>(new Path(testFile.getAbsolutePath()), User.class);\n\n\t\t\t\t\tformat.reopen(splits[i], state);\n\t\t\t\t\tassertEquals(format.getRecordsReadFromBlock(), recordsUntilCheckpoint);\n\t\t\t\t}\n\t\t\t\telementsPerSplit[i]++;\n\t\t\t}\n\t\t\tformat.close();\n\t\t}\n\n\t\tAssert.assertEquals(1539, elementsPerSplit[0]);\n\t\tAssert.assertEquals(1026, elementsPerSplit[1]);\n\t\tAssert.assertEquals(1539, elementsPerSplit[2]);\n\t\tAssert.assertEquals(896, elementsPerSplit[3]);\n\t\tAssert.assertEquals(NUM_RECORDS, elements);\n\t\tformat.close();\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/AvroSplittableInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"c34c7e4127c8947d68e2b960cd84206e59d479b3","commitMessage":"@@@[FLINK-9444] [formats] Add full SQL support for Avro formats\n\nThis PR adds full support of Apache Avro records for the Table API & SQL. It adds (de)serialization schemas to the row type for both specific and generic records. It converts all Avro types to Flink types and vice versa. It supports both physical and logical Avro types. Both an Avro class or a Avro schema string can be used for format initialization.\n\nThis closes #6218.\nThis closes #6082.\n","date":"2018-07-03 21:40:44","modifiedFileCount":"24","status":"M","submitter":"Timo Walther"}]
