[{"authorTime":"2019-04-03 23:45:01","codes":[{"authorDate":"2019-02-19 21:33:27","commitOrder":37,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = mock(TaskMetricGroup.class);\n\t\twhen(taskMetricGroup.getIOMetricGroup()).thenReturn(mock(TaskIOMetricGroup.class));\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tnetworkEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2019-04-17 20:36:31","endLine":316,"groupId":"35254","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/ba02821e18b18f077ca7887387f35cbf34425f.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = mock(TaskMetricGroup.class);\n\t\twhen(taskMetricGroup.getIOMetricGroup()).thenReturn(mock(TaskIOMetricGroup.class));\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tnetworkEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"},{"authorDate":"2019-04-03 23:45:01","commitOrder":37,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = mock(TaskMetricGroup.class);\n\t\twhen(taskMetricGroup.getIOMetricGroup()).thenReturn(mock(TaskIOMetricGroup.class));\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tnetworkEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2019-04-03 23:45:01","endLine":276,"groupId":"35254","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/b4b350ee1bb0aa9730b8e980aa83adc84e9bef.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = mock(TaskMetricGroup.class);\n\t\twhen(taskMetricGroup.getIOMetricGroup()).thenReturn(mock(TaskIOMetricGroup.class));\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tnetworkEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"NB"}],"commitId":"f22dd5b0a26d85d5bbbb2adbd41855458e83ebc9","commitMessage":"@@@[FLINK-11667][checkpointing] Add Synchronous Checkpoint handling in StreamTask.\n\nThis is a necessary step towards implementing the \"stop with a savepoint\".\nEssentially.  a synchronous savepoint is one that waits until also the\nnotifyOnCheckpointComplete is successfully executed.  before releasing the\ncheckpoint lock (on the StreamTask side).\n","date":"2019-04-17 20:36:31","modifiedFileCount":"11","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-04-26 10:55:12","codes":[{"authorDate":"2019-04-26 10:55:12","commitOrder":38,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tnetworkEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2019-04-30 16:00:50","endLine":316,"groupId":"35254","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/b339293a8e44da4f7a539116b006ffd9759e00.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = mock(TaskMetricGroup.class);\n\t\twhen(taskMetricGroup.getIOMetricGroup()).thenReturn(mock(TaskIOMetricGroup.class));\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tnetworkEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2019-04-26 10:55:12","commitOrder":38,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tnetworkEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2019-04-30 16:00:50","endLine":268,"groupId":"35254","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/06da03c5f78df479093b76805e7bc800cac5bc.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = mock(TaskMetricGroup.class);\n\t\twhen(taskMetricGroup.getIOMetricGroup()).thenReturn(mock(TaskIOMetricGroup.class));\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tnetworkEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"f98a7a8558deb155c6a20bb7b9687feb949514f7","commitMessage":"@@@[FLINK-12199][metrics][network] Decouple network metrics from Task\n","date":"2019-04-30 16:00:50","modifiedFileCount":"29","status":"M","submitter":"Zhijiang"},{"authorTime":"2019-04-25 17:05:21","codes":[{"authorDate":"2019-04-25 17:05:21","commitOrder":39,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = new NetworkEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tnetworkEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2019-05-08 21:29:31","endLine":314,"groupId":"35254","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/22/2133a71615e6b984f78781a4aa40fb2fd4b7b1.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tnetworkEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2019-04-25 17:05:21","commitOrder":39,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tnetworkEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2019-05-08 21:29:31","endLine":275,"groupId":"35254","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1f/743e4242a659dd18d59cd5db8d04096d76dfd9.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionManager partitionManager = mock(ResultPartitionManager.class);\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = mock(NetworkEnvironment.class);\n\t\twhen(networkEnvironment.getResultPartitionManager()).thenReturn(partitionManager);\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tnetworkEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"f392616f404a6471d99d64eeab5dd1dd3da1a4a0","commitMessage":"@@@[hotfix][tests] Avoid mock NetworkEnvironment in tests\n","date":"2019-05-08 21:29:31","modifiedFileCount":"9","status":"M","submitter":"Zhijiang"},{"authorTime":"2019-05-30 21:16:16","codes":[{"authorDate":"2019-05-30 21:16:16","commitOrder":40,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment shuffleEnvironment = new NetworkEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2019-06-11 18:03:41","endLine":315,"groupId":"35254","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5d/bd5ced72527b6a8464753cb024d839e5138241.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tNetworkEnvironment networkEnvironment = new NetworkEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tnetworkEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2019-05-30 21:16:16","commitOrder":40,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2019-06-11 18:03:41","endLine":275,"groupId":"35254","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bf/cbd1330d0bc7c0873bc4b14a86b71ee83e4b68.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tnetworkEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"6349db7df4576eaa637d449ee45d76d7232c48ca","commitMessage":"@@@[FLINK-11392][network] Introduce ShuffleEnvironment interface\n","date":"2019-06-11 18:03:41","modifiedFileCount":"26","status":"M","submitter":"Andrey Zagrebin"},{"authorTime":"2019-05-30 21:16:16","codes":[{"authorDate":"2019-05-30 21:16:16","commitOrder":41,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2019-06-11 18:03:41","endLine":315,"groupId":"35254","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/3bcf8e8a3a4648faac8e1f1eeccb729416badc.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment shuffleEnvironment = new NetworkEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2019-05-30 21:16:16","commitOrder":41,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2019-06-11 18:03:41","endLine":275,"groupId":"35254","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bf/cbd1330d0bc7c0873bc4b14a86b71ee83e4b68.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"N"}],"commitId":"c104dafd26f32d939461cb880ddfc881a8d14d5f","commitMessage":"@@@[FLINK-11392][network] Rename NetworkEnviroment to NettyShuffleEnviroment\n\nThis closes #8608.\n","date":"2019-06-11 18:03:41","modifiedFileCount":"45","status":"M","submitter":"Andrey Zagrebin"},{"authorTime":"2019-05-30 21:16:16","codes":[{"authorDate":"2019-06-14 17:27:18","commitOrder":42,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2019-06-25 19:15:42","endLine":284,"groupId":"35254","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/860b6abf0ce02a01c82206c23207849e86efa9.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2019-05-30 21:16:16","commitOrder":42,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2019-06-11 18:03:41","endLine":275,"groupId":"35254","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bf/cbd1330d0bc7c0873bc4b14a86b71ee83e4b68.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"N"}],"commitId":"7cb42f40eff443b127fabcef5b92b663a1b8af89","commitMessage":"@@@[hotfix][network] Fix raw type usages\n","date":"2019-06-25 19:15:42","modifiedFileCount":"8","status":"M","submitter":"Chesnay Schepler"},{"authorTime":"2019-11-15 20:12:14","codes":[{"authorDate":"2019-11-15 20:12:14","commitOrder":43,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2020-02-14 16:07:42","endLine":274,"groupId":"35254","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/2ccc1a34261822f19c0e9aee072c490ef38f5a.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2019-11-15 20:12:14","commitOrder":43,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2020-02-14 16:07:42","endLine":222,"groupId":"35254","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/cb0b6a9705e437758dc73d851d0e43e1a911f3.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"41b6bfa62c61bfe758ce67b06cbf32b3cc937691","commitMessage":"@@@[FLINK-15099][runtime] Add Operator Coordinators and Events\n\nOperator Coordinators are instances that exist once per operator. While the operators run on the TaskManagers.  the\ncoordinator runs on the JobManager. The coordinator communicates via events with the operators.  typicalls to\nassign work.\n\nThe first user for those coordinators would be the new source interface.\nFurther users we envision are sinks (for coordinated commits of metadata).  or iterations (gather progress and\nsteer supersteps) as well as simple approximate alignments between streams (event time alignment).\n","date":"2020-02-14 16:07:42","modifiedFileCount":"38","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2020-04-29 21:37:27","codes":[{"authorDate":"2020-04-29 21:37:27","commitOrder":44,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2020-05-07 21:19:08","endLine":267,"groupId":"35254","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/51/76f600d0e75dac5db3fe73105811711dd8928c.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tblobService,\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"},{"authorDate":"2020-04-29 21:37:27","commitOrder":44,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2020-05-07 21:19:08","endLine":215,"groupId":"35254","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/19/4cd572e501d91f984a2d7db4b853bf6ca55374.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tBlobCacheService blobService =\n\t\t\tnew BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class));\n\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tblobService,\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"11f5c7fafea649e429022576becb35f871471587","commitMessage":"@@@[FLINK-16408] Bind job blob lifecycle to JobTable.Job\n\nThe PermanentBlobCache#registerJob method registers the use of job-related Blobs. Similarly.  PermanentBlobCache#releaseJob will release all job-related blobs which makes them eligible for cleanup by the periodic clean up task.\n\nSince tasks belonging to the same job should be able to share blobs (e.g. jar blobs for the common user code class loader).  the PermanentBlobCache#registerJob and PermanentBlobCache#releaseJob should be bound to the job lifecycle instead of the Task lifecycle. This is what this commit achieves by moving the #registerJob and #releaseJob calls from the Task to the JobTable.Job. Whenever we create new JobTable.Job.  we will also call PermanentBlobCache#registerJob. We will only call PermanentBlobCache#releaseJob when we close JobTable.Job.\n","date":"2020-05-07 21:19:08","modifiedFileCount":"13","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2020-05-01 00:00:50","codes":[{"authorDate":"2020-05-01 00:00:50","commitOrder":45,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tTestingClassLoaderLease.newBuilder().build(),\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2020-05-07 21:20:54","endLine":263,"groupId":"35254","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/05/eec10958b50e582e4c07ca7e14b99d9445f62d.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(ClassLoader.getSystemClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tlibCache,\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2020-05-01 00:00:50","commitOrder":45,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tfinal TestingClassLoaderLease classLoaderHandle = TestingClassLoaderLease.newBuilder()\n\t\t\t.setGetOrResolveClassLoaderFunction((permanentBlobKeys, urls) -> new TestUserCodeClassLoader())\n\t\t\t.build();\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tclassLoaderHandle,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2020-05-07 21:20:54","endLine":214,"groupId":"35254","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/58f34cfedb8e3bdc34e7a77c279694f32de85c.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tLibraryCacheManager libCache = mock(LibraryCacheManager.class);\n\t\twhen(libCache.getClassLoader(any(JobID.class))).thenReturn(new TestUserCodeClassLoader());\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tlibCache,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"7f503f21d27a31a02c7577fa3d39d27dc4e181c6","commitMessage":"@@@[FLINK-16408] Bind user code class loader to lifetime of Job on TaskExecutor\n\nThis commit binds the user code class loader to the lifetime of a JobTable.Job on the TaskExecutor. This means that the TaskExecutor will not release the user code class loader as long as it contains an allocated slot for the respective job. This will ensure that a TaskExecutor can reuse the user code class loader across failovers (task and JM failovers). By reusing user code class loaders Flink will avoid to reload classes and.  thus.  decrease the pressure it puts on the JVM's metaspace. This will significantly improve situations where a class leak exists because Flink won't deplete the JVM's metaspace under recoveries.\n\nIn order to achieve this.  the LibraryCacheManager has been changed. The LibraryCacheManager only supports to register a LibraryCacheManager.ClassLoaderLease for a given job. As long as there is a single valid ClassLoaderLease.  the LibraryCacheManager will not release the associated user code class loader. A LibraryCacheManger.ClassLoaderLease needs to be resolved in order to create and then obtain the user code class loader. This is done via LibraryCacheManager.ClassLoaderHandle#getOrResolveClassLoader. Upon calling this method the first time.  one specifies the set of jars and class paths the user code class loader should be started with. Every subsequent call to this method will ensure that the underlying class loader contains the set of specified jars and class paths. If this is not the case.  then this method will fail. Differently said.  the system only supports one user code class loader per job at the moment.\n\nOnce the owner of the LibraryCacheManager.ClassLoaderLease no longer needs the user code class loader.  it should call LibraryCacheManager.ClassLoaderLease#close in order to invalidate the lease. Once all leases for a given job are invalidate.  the LibraryCacheManager will release the underlying user code class loader.\n\nAt the moment.  there is only a single lease per job which is owned by the JobTable.Job and will be created when the JobTable.Job will be created. That way we ensure that the user code class loader lives as long as the JobTable.Job.\n\nIn order to ensure that we reuse the user code class loader as long as the TaskExecutor has allocated slots for a given job.  TaskExecutorSlotLifetimeTest#testUserCodeClassLoaderIsBoundToSlot has been added.\n","date":"2020-05-07 21:20:54","modifiedFileCount":"24","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2020-04-24 12:06:24","codes":[{"authorDate":"2020-04-24 12:06:24","commitOrder":46,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tTestingClassLoaderLease.newBuilder().build(),\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2020-05-17 23:33:04","endLine":265,"groupId":"35254","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/5ee615528b6195f0d8c7c028d657b3fabae665.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tTestingClassLoaderLease.newBuilder().build(),\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"},{"authorDate":"2020-04-24 12:06:24","commitOrder":46,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tfinal TestingClassLoaderLease classLoaderHandle = TestingClassLoaderLease.newBuilder()\n\t\t\t.setGetOrResolveClassLoaderFunction((permanentBlobKeys, urls) -> new TestUserCodeClassLoader())\n\t\t\t.build();\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tclassLoaderHandle,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2020-05-17 23:33:04","endLine":216,"groupId":"35254","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ef/77500973727e36a7c3c7917318d7077f2134ae.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tfinal TestingClassLoaderLease classLoaderHandle = TestingClassLoaderLease.newBuilder()\n\t\t\t.setGetOrResolveClassLoaderFunction((permanentBlobKeys, urls) -> new TestUserCodeClassLoader())\n\t\t\t.build();\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tclassLoaderHandle,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"22112f12b07d20aed43705776cf93fbdc115ed23","commitMessage":"@@@[FLINK-17407] Instatiate and pass ExternalResourceInfoProvider to RuntimeContext\n","date":"2020-05-17 23:33:04","modifiedFileCount":"41","status":"M","submitter":"Yangze Guo"},{"authorTime":"2020-09-16 01:41:08","codes":[{"authorDate":"2020-04-24 12:06:24","commitOrder":47,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tTestingClassLoaderLease.newBuilder().build(),\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","date":"2020-05-17 23:33:04","endLine":265,"groupId":"35254","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/5ee615528b6195f0d8c7c028d657b3fabae665.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\t\tnew JobID(),\n\t\t\t\t\"Job Name\",\n\t\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\t\tnew JobVertexID(),\n\t\t\t\t\"Test Task\",\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tinvokableClass.getName(),\n\t\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\t\tjobInformation,\n\t\t\t\ttaskInformation,\n\t\t\t\tnew ExecutionAttemptID(),\n\t\t\t\tnew AllocationID(),\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t\t0,\n\t\t\t\tmock(MemoryManager.class),\n\t\t\t\tmock(IOManager.class),\n\t\t\t\tshuffleEnvironment,\n\t\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\t\tmock(BroadcastVariableManager.class),\n\t\t\t\tnew TaskEventDispatcher(),\n\t\t\t\tExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n\t\t\t\tnew TestTaskStateManager(),\n\t\t\t\tmock(TaskManagerActions.class),\n\t\t\t\tmock(InputSplitProvider.class),\n\t\t\t\tmock(CheckpointResponder.class),\n\t\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\t\tnew TestGlobalAggregateManager(),\n\t\t\t\tTestingClassLoaderLease.newBuilder().build(),\n\t\t\t\tmock(FileCache.class),\n\t\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\t\ttaskMetricGroup,\n\t\t\t\tconsumableNotifier,\n\t\t\t\tpartitionProducerStateChecker,\n\t\t\t\texecutor);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"},{"authorDate":"2020-09-16 01:41:08","commitOrder":47,"curCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tfinal TestingClassLoaderLease classLoaderHandle = TestingClassLoaderLease.newBuilder()\n\t\t\t.setGetOrResolveClassLoaderFunction((permanentBlobKeys, urls) -> TestingUserCodeClassLoader.newBuilder()\n\t\t\t\t.setClassLoader(new TestUserCodeClassLoader())\n\t\t\t\t.build())\n\t\t\t.build();\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tclassLoaderHandle,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","date":"2020-09-16 15:21:08","endLine":219,"groupId":"35254","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/72/72537a3271dbfa5cf63da1a78ac88cc7ccb979.src","preCode":"\tprivate Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\t\tfinal TestingClassLoaderLease classLoaderHandle = TestingClassLoaderLease.newBuilder()\n\t\t\t.setGetOrResolveClassLoaderFunction((permanentBlobKeys, urls) -> new TestUserCodeClassLoader())\n\t\t\t.build();\n\n\t\tResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier();\n\t\tPartitionProducerStateChecker partitionProducerStateChecker = mock(PartitionProducerStateChecker.class);\n\t\tExecutor executor = mock(Executor.class);\n\t\tTaskMetricGroup taskMetricGroup = UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n\t\tJobInformation jobInformation = new JobInformation(\n\t\t\tnew JobID(),\n\t\t\t\"Job Name\",\n\t\t\tnew SerializedValue<>(new ExecutionConfig()),\n\t\t\tnew Configuration(),\n\t\t\tCollections.emptyList(),\n\t\t\tCollections.emptyList());\n\n\t\tTaskInformation taskInformation = new TaskInformation(\n\t\t\tnew JobVertexID(),\n\t\t\t\"Test Task\",\n\t\t\t1,\n\t\t\t1,\n\t\t\tinvokableClass.getName(),\n\t\t\tnew Configuration());\n\n\t\treturn new Task(\n\t\t\tjobInformation,\n\t\t\ttaskInformation,\n\t\t\tnew ExecutionAttemptID(),\n\t\t\tnew AllocationID(),\n\t\t\t0,\n\t\t\t0,\n\t\t\tCollections.<ResultPartitionDeploymentDescriptor>emptyList(),\n\t\t\tCollections.<InputGateDeploymentDescriptor>emptyList(),\n\t\t\t0,\n\t\t\tmock(MemoryManager.class),\n\t\t\tmock(IOManager.class),\n\t\t\tshuffleEnvironment,\n\t\t\tnew KvStateService(new KvStateRegistry(), null, null),\n\t\t\tmock(BroadcastVariableManager.class),\n\t\t\tnew TaskEventDispatcher(),\n\t\t\tExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n\t\t\tnew TestTaskStateManager(),\n\t\t\tmock(TaskManagerActions.class),\n\t\t\tmock(InputSplitProvider.class),\n\t\t\tmock(CheckpointResponder.class),\n\t\t\tnew NoOpTaskOperatorEventGateway(),\n\t\t\tnew TestGlobalAggregateManager(),\n\t\t\tclassLoaderHandle,\n\t\t\tmock(FileCache.class),\n\t\t\tnew TestingTaskManagerRuntimeInfo(),\n\t\t\ttaskMetricGroup,\n\t\t\tconsumableNotifier,\n\t\t\tpartitionProducerStateChecker,\n\t\t\texecutor);\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"328c9010a8865fe334e7992fb1421fafeaff165d","commitMessage":"@@@[FLINK-17554] Allow to register release hooks for the classloader\n\nThis closes #13355\n","date":"2020-09-16 15:21:08","modifiedFileCount":"41","status":"M","submitter":"Robert Metzger"},{"authorTime":"2021-02-08 18:39:08","codes":[{"authorDate":"2021-02-08 18:39:08","commitOrder":48,"curCode":"    private Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\n        ResultPartitionConsumableNotifier consumableNotifier =\n                new NoOpResultPartitionConsumableNotifier();\n        PartitionProducerStateChecker partitionProducerStateChecker =\n                mock(PartitionProducerStateChecker.class);\n        Executor executor = mock(Executor.class);\n        ShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n        TaskMetricGroup taskMetricGroup =\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n        JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Job Name\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClass.getName(),\n                        new Configuration());\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                mock(MemoryManager.class),\n                mock(IOManager.class),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                TestingClassLoaderLease.newBuilder().build(),\n                mock(FileCache.class),\n                new TestingTaskManagerRuntimeInfo(),\n                taskMetricGroup,\n                consumableNotifier,\n                partitionProducerStateChecker,\n                executor);\n    }\n","date":"2021-02-08 18:39:08","endLine":285,"groupId":"35254","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/d6fb7bf126efe8e5922ea8c9dc6438d7e201bb.src","preCode":"    private Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\n        ResultPartitionConsumableNotifier consumableNotifier =\n                new NoOpResultPartitionConsumableNotifier();\n        PartitionProducerStateChecker partitionProducerStateChecker =\n                mock(PartitionProducerStateChecker.class);\n        Executor executor = mock(Executor.class);\n        ShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n        TaskMetricGroup taskMetricGroup =\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n        JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Job Name\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClass.getName(),\n                        new Configuration());\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                0,\n                mock(MemoryManager.class),\n                mock(IOManager.class),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                TestingClassLoaderLease.newBuilder().build(),\n                mock(FileCache.class),\n                new TestingTaskManagerRuntimeInfo(),\n                taskMetricGroup,\n                consumableNotifier,\n                partitionProducerStateChecker,\n                executor);\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2021-02-08 18:39:08","commitOrder":48,"curCode":"    private Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n        final TestingClassLoaderLease classLoaderHandle =\n                TestingClassLoaderLease.newBuilder()\n                        .setGetOrResolveClassLoaderFunction(\n                                (permanentBlobKeys, urls) ->\n                                        TestingUserCodeClassLoader.newBuilder()\n                                                .setClassLoader(new TestUserCodeClassLoader())\n                                                .build())\n                        .build();\n\n        ResultPartitionConsumableNotifier consumableNotifier =\n                new NoOpResultPartitionConsumableNotifier();\n        PartitionProducerStateChecker partitionProducerStateChecker =\n                mock(PartitionProducerStateChecker.class);\n        Executor executor = mock(Executor.class);\n        TaskMetricGroup taskMetricGroup =\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n        JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Job Name\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClass.getName(),\n                        new Configuration());\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                mock(MemoryManager.class),\n                mock(IOManager.class),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                classLoaderHandle,\n                mock(FileCache.class),\n                new TestingTaskManagerRuntimeInfo(),\n                taskMetricGroup,\n                consumableNotifier,\n                partitionProducerStateChecker,\n                executor);\n    }\n","date":"2021-02-08 18:39:08","endLine":233,"groupId":"35254","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c6/9f1c0b27c79b37b7b79d85933d94ac517cca0f.src","preCode":"    private Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n        final TestingClassLoaderLease classLoaderHandle =\n                TestingClassLoaderLease.newBuilder()\n                        .setGetOrResolveClassLoaderFunction(\n                                (permanentBlobKeys, urls) ->\n                                        TestingUserCodeClassLoader.newBuilder()\n                                                .setClassLoader(new TestUserCodeClassLoader())\n                                                .build())\n                        .build();\n\n        ResultPartitionConsumableNotifier consumableNotifier =\n                new NoOpResultPartitionConsumableNotifier();\n        PartitionProducerStateChecker partitionProducerStateChecker =\n                mock(PartitionProducerStateChecker.class);\n        Executor executor = mock(Executor.class);\n        TaskMetricGroup taskMetricGroup =\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n        JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Job Name\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClass.getName(),\n                        new Configuration());\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                0,\n                mock(MemoryManager.class),\n                mock(IOManager.class),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                classLoaderHandle,\n                mock(FileCache.class),\n                new TestingTaskManagerRuntimeInfo(),\n                taskMetricGroup,\n                consumableNotifier,\n                partitionProducerStateChecker,\n                executor);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"7ea786ac6af7286eb147449729316418b38cdafe","commitMessage":"@@@[FLINK-21303][coordination] Remove LogicalSlot#getPhysicalSlotNumber\n\n","date":"2021-02-08 18:39:08","modifiedFileCount":"25","status":"M","submitter":"SteNicholas"},{"authorTime":"2021-02-08 18:39:08","codes":[{"authorDate":"2021-08-21 01:27:23","commitOrder":49,"curCode":"    private Task createTask(Class<? extends TaskInvokable> invokableClass) throws Exception {\n\n        ResultPartitionConsumableNotifier consumableNotifier =\n                new NoOpResultPartitionConsumableNotifier();\n        PartitionProducerStateChecker partitionProducerStateChecker =\n                mock(PartitionProducerStateChecker.class);\n        Executor executor = mock(Executor.class);\n        ShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n        TaskMetricGroup taskMetricGroup =\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n        JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Job Name\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClass.getName(),\n                        new Configuration());\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                mock(MemoryManager.class),\n                mock(IOManager.class),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                TestingClassLoaderLease.newBuilder().build(),\n                mock(FileCache.class),\n                new TestingTaskManagerRuntimeInfo(),\n                taskMetricGroup,\n                consumableNotifier,\n                partitionProducerStateChecker,\n                executor);\n    }\n","date":"2021-08-26 18:54:21","endLine":283,"groupId":"102516","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"createTask","params":"(Class<?extendsTaskInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/1b329a18fe2791898d5440ad82f0bcc3635a3b.src","preCode":"    private Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n\n        ResultPartitionConsumableNotifier consumableNotifier =\n                new NoOpResultPartitionConsumableNotifier();\n        PartitionProducerStateChecker partitionProducerStateChecker =\n                mock(PartitionProducerStateChecker.class);\n        Executor executor = mock(Executor.class);\n        ShuffleEnvironment<?, ?> shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build();\n\n        TaskMetricGroup taskMetricGroup =\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n        JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Job Name\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClass.getName(),\n                        new Configuration());\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                mock(MemoryManager.class),\n                mock(IOManager.class),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                TestingClassLoaderLease.newBuilder().build(),\n                mock(FileCache.class),\n                new TestingTaskManagerRuntimeInfo(),\n                taskMetricGroup,\n                consumableNotifier,\n                partitionProducerStateChecker,\n                executor);\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SynchronousCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2021-02-08 18:39:08","commitOrder":49,"curCode":"    private Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n        final TestingClassLoaderLease classLoaderHandle =\n                TestingClassLoaderLease.newBuilder()\n                        .setGetOrResolveClassLoaderFunction(\n                                (permanentBlobKeys, urls) ->\n                                        TestingUserCodeClassLoader.newBuilder()\n                                                .setClassLoader(new TestUserCodeClassLoader())\n                                                .build())\n                        .build();\n\n        ResultPartitionConsumableNotifier consumableNotifier =\n                new NoOpResultPartitionConsumableNotifier();\n        PartitionProducerStateChecker partitionProducerStateChecker =\n                mock(PartitionProducerStateChecker.class);\n        Executor executor = mock(Executor.class);\n        TaskMetricGroup taskMetricGroup =\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n        JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Job Name\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClass.getName(),\n                        new Configuration());\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                mock(MemoryManager.class),\n                mock(IOManager.class),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                classLoaderHandle,\n                mock(FileCache.class),\n                new TestingTaskManagerRuntimeInfo(),\n                taskMetricGroup,\n                consumableNotifier,\n                partitionProducerStateChecker,\n                executor);\n    }\n","date":"2021-02-08 18:39:08","endLine":233,"groupId":"102516","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(Class<?extendsAbstractInvokable>invokableClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c6/9f1c0b27c79b37b7b79d85933d94ac517cca0f.src","preCode":"    private Task createTask(Class<? extends AbstractInvokable> invokableClass) throws Exception {\n        final TestingClassLoaderLease classLoaderHandle =\n                TestingClassLoaderLease.newBuilder()\n                        .setGetOrResolveClassLoaderFunction(\n                                (permanentBlobKeys, urls) ->\n                                        TestingUserCodeClassLoader.newBuilder()\n                                                .setClassLoader(new TestUserCodeClassLoader())\n                                                .build())\n                        .build();\n\n        ResultPartitionConsumableNotifier consumableNotifier =\n                new NoOpResultPartitionConsumableNotifier();\n        PartitionProducerStateChecker partitionProducerStateChecker =\n                mock(PartitionProducerStateChecker.class);\n        Executor executor = mock(Executor.class);\n        TaskMetricGroup taskMetricGroup =\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup();\n\n        JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Job Name\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClass.getName(),\n                        new Configuration());\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                mock(MemoryManager.class),\n                mock(IOManager.class),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                classLoaderHandle,\n                mock(FileCache.class),\n                new TestingTaskManagerRuntimeInfo(),\n                taskMetricGroup,\n                consumableNotifier,\n                partitionProducerStateChecker,\n                executor);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/taskmanager/TaskAsyncCallTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"N"}],"commitId":"a8ea3c3e81517f9c38f90b82c043136d8b56bf8b","commitMessage":"@@@[FLINK-23862][runtime] Replace usages of AbstractInvokable with interface\n\nA follow-up step after introduction of task interfaces to:\n- accept TaskInvokable in place of AbstractInvokable\n- make StreamTask implement the interfaces directly\n","date":"2021-08-26 18:54:21","modifiedFileCount":"29","status":"M","submitter":"Roman Khachatryan"}]
