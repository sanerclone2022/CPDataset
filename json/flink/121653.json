[{"authorTime":"2021-01-21 19:45:02","codes":[{"authorDate":"2021-01-25 00:58:11","commitOrder":3,"curCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry) {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            cancelStreamRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            mock(AbstractSnapshotStrategy.class)) {\n                        @Nonnull\n                        @Override\n                        public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(\n                                long checkpointId,\n                                long timestamp,\n                                @Nonnull CheckpointStreamFactory streamFactory,\n                                @Nonnull CheckpointOptions checkpointOptions) {\n\n                            return new FutureTask<>(\n                                    () -> {\n                                        throw new Exception(\"Expected async snapshot exception.\");\n                                    });\n                        }\n                    };\n                }\n            }.build();\n        }\n","date":"2021-01-28 18:01:58","endLine":207,"groupId":"47043","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createOperatorStateBackend","params":"(Environmentenv@StringoperatorIdentifier@@NonnullCollection<OperatorStateHandle>stateHandles@CloseableRegistrycancelStreamRegistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2b/06a9752fc4016d724aaa8b6820ecf82717cb06.src","preCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry) {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            cancelStreamRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            mock(AbstractSnapshotStrategy.class)) {\n                        @Nonnull\n                        @Override\n                        public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(\n                                long checkpointId,\n                                long timestamp,\n                                @Nonnull CheckpointStreamFactory streamFactory,\n                                @Nonnull CheckpointOptions checkpointOptions) {\n\n                            return new FutureTask<>(\n                                    () -> {\n                                        throw new Exception(\"Expected async snapshot exception.\");\n                                    });\n                        }\n                    };\n                }\n            }.build();\n        }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/CheckpointFailureManagerITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"},{"authorDate":"2021-01-21 19:45:02","commitOrder":3,"curCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry)\n                throws Exception {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            cancelStreamRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            mock(SnapshotStrategyRunner.class)) {\n                        @Nonnull\n                        @Override\n                        public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(\n                                long checkpointId,\n                                long timestamp,\n                                @Nonnull CheckpointStreamFactory streamFactory,\n                                @Nonnull CheckpointOptions checkpointOptions)\n                                throws Exception {\n\n                            throw new Exception(\"Sync part snapshot exception.\");\n                        }\n                    };\n                }\n            }.build();\n        }\n","date":"2021-01-26 18:40:06","endLine":335,"groupId":"40773","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createOperatorStateBackend","params":"(Environmentenv@StringoperatorIdentifier@@NonnullCollection<OperatorStateHandle>stateHandles@CloseableRegistrycancelStreamRegistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/37/2339ed11a7eaec6d8795909f8decbc402ef7bb.src","preCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry)\n                throws Exception {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            cancelStreamRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            mock(SnapshotStrategyRunner.class)) {\n                        @Nonnull\n                        @Override\n                        public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(\n                                long checkpointId,\n                                long timestamp,\n                                @Nonnull CheckpointStreamFactory streamFactory,\n                                @Nonnull CheckpointOptions checkpointOptions)\n                                throws Exception {\n\n                            throw new Exception(\"Sync part snapshot exception.\");\n                        }\n                    };\n                }\n            }.build();\n        }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TaskCheckpointingBehaviourTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"NB"}],"commitId":"c7ed2e818a4ead70c6081117f771c54a1bbc0fc5","commitMessage":"@@@[FLINK-20675][checkpointing] Ensure asynchronous checkpoint failure could fail the job by default\n","date":"2021-01-28 18:01:58","modifiedFileCount":"9","status":"M","submitter":"Yun Tang"},{"authorTime":"2021-01-21 19:45:02","codes":[{"authorDate":"2021-01-28 19:10:36","commitOrder":4,"curCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry) {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    CloseableRegistry closeableRegistry = new CloseableRegistry();\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            closeableRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new SnapshotStrategyRunner(\n                                    \"Async Failure State Backend\",\n                                    ASYNC_DECLINING_SNAPSHOT_STRATEGY,\n                                    closeableRegistry,\n                                    SnapshotStrategyRunner.ExecutionType.ASYNCHRONOUS));\n                }\n            }.build();\n        }\n","date":"2021-01-28 19:14:42","endLine":215,"groupId":"26792","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createOperatorStateBackend","params":"(Environmentenv@StringoperatorIdentifier@@NonnullCollection<OperatorStateHandle>stateHandles@CloseableRegistrycancelStreamRegistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bf/710fd112cb9ca00698f278a5648fbf11a903f1.src","preCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry) {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            cancelStreamRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            mock(AbstractSnapshotStrategy.class)) {\n                        @Nonnull\n                        @Override\n                        public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(\n                                long checkpointId,\n                                long timestamp,\n                                @Nonnull CheckpointStreamFactory streamFactory,\n                                @Nonnull CheckpointOptions checkpointOptions) {\n\n                            return new FutureTask<>(\n                                    () -> {\n                                        throw new Exception(\"Expected async snapshot exception.\");\n                                    });\n                        }\n                    };\n                }\n            }.build();\n        }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/CheckpointFailureManagerITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2021-01-21 19:45:02","commitOrder":4,"curCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry)\n                throws Exception {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            cancelStreamRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            mock(SnapshotStrategyRunner.class)) {\n                        @Nonnull\n                        @Override\n                        public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(\n                                long checkpointId,\n                                long timestamp,\n                                @Nonnull CheckpointStreamFactory streamFactory,\n                                @Nonnull CheckpointOptions checkpointOptions)\n                                throws Exception {\n\n                            throw new Exception(\"Sync part snapshot exception.\");\n                        }\n                    };\n                }\n            }.build();\n        }\n","date":"2021-01-26 18:40:06","endLine":335,"groupId":"40773","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createOperatorStateBackend","params":"(Environmentenv@StringoperatorIdentifier@@NonnullCollection<OperatorStateHandle>stateHandles@CloseableRegistrycancelStreamRegistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/37/2339ed11a7eaec6d8795909f8decbc402ef7bb.src","preCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry)\n                throws Exception {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            cancelStreamRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            mock(SnapshotStrategyRunner.class)) {\n                        @Nonnull\n                        @Override\n                        public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(\n                                long checkpointId,\n                                long timestamp,\n                                @Nonnull CheckpointStreamFactory streamFactory,\n                                @Nonnull CheckpointOptions checkpointOptions)\n                                throws Exception {\n\n                            throw new Exception(\"Sync part snapshot exception.\");\n                        }\n                    };\n                }\n            }.build();\n        }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TaskCheckpointingBehaviourTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"N"}],"commitId":"c475e4da7402f8c5200262716ce1e354797ee12b","commitMessage":"@@@[hotfix] Fix CheckpointFailureManagerITCase compile error\n","date":"2021-01-28 19:14:42","modifiedFileCount":"1","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-01-21 19:45:02","codes":[{"authorDate":"2021-02-25 00:51:30","commitOrder":5,"curCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry) {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    CloseableRegistry closeableRegistry = new CloseableRegistry();\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            closeableRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new SnapshotStrategyRunner(\n                                    \"Async Failure State Backend\",\n                                    ASYNC_DECLINING_SNAPSHOT_STRATEGY,\n                                    closeableRegistry,\n                                    SnapshotExecutionType.ASYNCHRONOUS));\n                }\n            }.build();\n        }\n","date":"2021-03-01 17:27:54","endLine":216,"groupId":"121653","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createOperatorStateBackend","params":"(Environmentenv@StringoperatorIdentifier@@NonnullCollection<OperatorStateHandle>stateHandles@CloseableRegistrycancelStreamRegistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/40/427486b59d08ddf05ac3694ef870d1afeb4a63.src","preCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry) {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    CloseableRegistry closeableRegistry = new CloseableRegistry();\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            closeableRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new SnapshotStrategyRunner(\n                                    \"Async Failure State Backend\",\n                                    ASYNC_DECLINING_SNAPSHOT_STRATEGY,\n                                    closeableRegistry,\n                                    SnapshotStrategyRunner.ExecutionType.ASYNCHRONOUS));\n                }\n            }.build();\n        }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/CheckpointFailureManagerITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"},{"authorDate":"2021-01-21 19:45:02","commitOrder":5,"curCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry)\n                throws Exception {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            cancelStreamRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            mock(SnapshotStrategyRunner.class)) {\n                        @Nonnull\n                        @Override\n                        public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(\n                                long checkpointId,\n                                long timestamp,\n                                @Nonnull CheckpointStreamFactory streamFactory,\n                                @Nonnull CheckpointOptions checkpointOptions)\n                                throws Exception {\n\n                            throw new Exception(\"Sync part snapshot exception.\");\n                        }\n                    };\n                }\n            }.build();\n        }\n","date":"2021-01-26 18:40:06","endLine":335,"groupId":"121653","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createOperatorStateBackend","params":"(Environmentenv@StringoperatorIdentifier@@NonnullCollection<OperatorStateHandle>stateHandles@CloseableRegistrycancelStreamRegistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/37/2339ed11a7eaec6d8795909f8decbc402ef7bb.src","preCode":"        public OperatorStateBackend createOperatorStateBackend(\n                Environment env,\n                String operatorIdentifier,\n                @Nonnull Collection<OperatorStateHandle> stateHandles,\n                CloseableRegistry cancelStreamRegistry)\n                throws Exception {\n            return new DefaultOperatorStateBackendBuilder(\n                    env.getUserCodeClassLoader().asClassLoader(),\n                    env.getExecutionConfig(),\n                    true,\n                    stateHandles,\n                    cancelStreamRegistry) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public DefaultOperatorStateBackend build() {\n                    return new DefaultOperatorStateBackend(\n                            executionConfig,\n                            cancelStreamRegistry,\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            new HashMap<>(),\n                            mock(SnapshotStrategyRunner.class)) {\n                        @Nonnull\n                        @Override\n                        public RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot(\n                                long checkpointId,\n                                long timestamp,\n                                @Nonnull CheckpointStreamFactory streamFactory,\n                                @Nonnull CheckpointOptions checkpointOptions)\n                                throws Exception {\n\n                            throw new Exception(\"Sync part snapshot exception.\");\n                        }\n                    };\n                }\n            }.build();\n        }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TaskCheckpointingBehaviourTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"N"}],"commitId":"fabba001e623517fd6834602e1b848ab75ad2909","commitMessage":"@@@[FLINK-21505] Extract SnapshotExecutionType from SnapshotStrategyRunner\n","date":"2021-03-01 17:27:54","modifiedFileCount":"7","status":"M","submitter":"Aljoscha Krettek"}]
