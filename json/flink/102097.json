[{"authorTime":"2020-09-18 15:52:20","codes":[{"authorDate":"2020-09-18 15:52:20","commitOrder":2,"curCode":"\tpublic void testFilteringTables() throws Exception {\n\t\tList<String> lines = readLines(\"canal-data-filter-table.txt\");\n\t\tCanalJsonDeserializationSchema deserializationSchema = CanalJsonDeserializationSchema\n\t\t\t.builder(SCHEMA, InternalTypeInfo.of(SCHEMA))\n\t\t\t.setDatabase(\"mydb\")\n\t\t\t.setTable(\"product\")\n\t\t\t.build();\n\t\trunTest(lines, deserializationSchema);\n\t}\n","date":"2020-09-18 15:52:20","endLine":73,"groupId":"8197","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilteringTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/f3401af961f33cbc496ccbf3d53962b6a80248.src","preCode":"\tpublic void testFilteringTables() throws Exception {\n\t\tList<String> lines = readLines(\"canal-data-filter-table.txt\");\n\t\tCanalJsonDeserializationSchema deserializationSchema = CanalJsonDeserializationSchema\n\t\t\t.builder(SCHEMA, InternalTypeInfo.of(SCHEMA))\n\t\t\t.setDatabase(\"mydb\")\n\t\t\t.setTable(\"product\")\n\t\t\t.build();\n\t\trunTest(lines, deserializationSchema);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2020-09-18 15:52:20","commitOrder":2,"curCode":"\tpublic void testSerializationDeserialization() throws Exception {\n\t\tList<String> lines = readLines(\"canal-data.txt\");\n\t\tCanalJsonDeserializationSchema deserializationSchema = CanalJsonDeserializationSchema\n\t\t\t.builder(SCHEMA, InternalTypeInfo.of(SCHEMA))\n\t\t\t.setIgnoreParseErrors(false)\n\t\t\t.setTimestampFormat(TimestampFormat.ISO_8601)\n\t\t\t.build();\n\t\trunTest(lines, deserializationSchema);\n\t}\n","date":"2020-09-18 15:52:20","endLine":84,"groupId":"8194","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationDeserialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/f3401af961f33cbc496ccbf3d53962b6a80248.src","preCode":"\tpublic void testSerializationDeserialization() throws Exception {\n\t\tList<String> lines = readLines(\"canal-data.txt\");\n\t\tCanalJsonDeserializationSchema deserializationSchema = CanalJsonDeserializationSchema\n\t\t\t.builder(SCHEMA, InternalTypeInfo.of(SCHEMA))\n\t\t\t.setIgnoreParseErrors(false)\n\t\t\t.setTimestampFormat(TimestampFormat.ISO_8601)\n\t\t\t.build();\n\t\trunTest(lines, deserializationSchema);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"MB"}],"commitId":"a3b4c93f82bb04d7313bd0ab34e584061cf22974","commitMessage":"@@@[FLINK-19002][canal][json] Support to only read changelogs of specific database and table for canal-json format\n\nThis closes  (#13294)","date":"2020-09-18 15:52:20","modifiedFileCount":"4","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-12-31 10:34:00","codes":[{"authorDate":"2020-12-31 10:34:00","commitOrder":3,"curCode":"    public void testFilteringTables() throws Exception {\n        List<String> lines = readLines(\"canal-data-filter-table.txt\");\n        CanalJsonDeserializationSchema deserializationSchema =\n                CanalJsonDeserializationSchema.builder(\n                                PHYSICAL_DATA_TYPE,\n                                Collections.emptyList(),\n                                InternalTypeInfo.of(PHYSICAL_DATA_TYPE.getLogicalType()))\n                        .setDatabase(\"mydb\")\n                        .setTable(\"product\")\n                        .build();\n        runTest(lines, deserializationSchema);\n    }\n","date":"2020-12-31 10:34:00","endLine":82,"groupId":"16193","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilteringTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/fd1544f2ca8214108ea1ff1f9cead18cd2b21a.src","preCode":"    public void testFilteringTables() throws Exception {\n        List<String> lines = readLines(\"canal-data-filter-table.txt\");\n        CanalJsonDeserializationSchema deserializationSchema =\n                CanalJsonDeserializationSchema.builder(SCHEMA, InternalTypeInfo.of(SCHEMA))\n                        .setDatabase(\"mydb\")\n                        .setTable(\"product\")\n                        .build();\n        runTest(lines, deserializationSchema);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-12-31 10:34:00","commitOrder":3,"curCode":"    public void testSerializationDeserialization() throws Exception {\n        List<String> lines = readLines(\"canal-data.txt\");\n        CanalJsonDeserializationSchema deserializationSchema =\n                CanalJsonDeserializationSchema.builder(\n                                PHYSICAL_DATA_TYPE,\n                                Collections.emptyList(),\n                                InternalTypeInfo.of(PHYSICAL_DATA_TYPE.getLogicalType()))\n                        .setIgnoreParseErrors(false)\n                        .setTimestampFormat(TimestampFormat.ISO_8601)\n                        .build();\n        runTest(lines, deserializationSchema);\n    }\n","date":"2020-12-31 10:34:00","endLine":130,"groupId":"32180","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationDeserialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/fd1544f2ca8214108ea1ff1f9cead18cd2b21a.src","preCode":"    public void testSerializationDeserialization() throws Exception {\n        List<String> lines = readLines(\"canal-data.txt\");\n        CanalJsonDeserializationSchema deserializationSchema =\n                CanalJsonDeserializationSchema.builder(SCHEMA, InternalTypeInfo.of(SCHEMA))\n                        .setIgnoreParseErrors(false)\n                        .setTimestampFormat(TimestampFormat.ISO_8601)\n                        .build();\n        runTest(lines, deserializationSchema);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"814fe0eb06f1941247742de27e8150b7c9274b43","commitMessage":"@@@[FLINK-20385][canal-json] Allow to read metadata for canal-json format\n\n\nThis closes #14464","date":"2020-12-31 10:34:00","modifiedFileCount":"5","status":"M","submitter":"SteNicholas"},{"authorTime":"2020-12-31 10:34:00","codes":[{"authorDate":"2021-01-15 22:38:34","commitOrder":4,"curCode":"    public void testFilteringTables() throws Exception {\n        List<String> lines = readLines(\"canal-data-filter-table.txt\");\n        CanalJsonDeserializationSchema deserializationSchema =\n                CanalJsonDeserializationSchema.builder(\n                                PHYSICAL_DATA_TYPE,\n                                Collections.emptyList(),\n                                InternalTypeInfo.of(PHYSICAL_DATA_TYPE.getLogicalType()))\n                        .setDatabase(\"^my.*\")\n                        .setTable(\"^prod.*\")\n                        .build();\n        runTest(lines, deserializationSchema);\n    }\n","date":"2021-01-15 22:38:34","endLine":82,"groupId":"102097","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilteringTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/59/a5071da1fcaa061425a64a114d6a1fb7f7fa6c.src","preCode":"    public void testFilteringTables() throws Exception {\n        List<String> lines = readLines(\"canal-data-filter-table.txt\");\n        CanalJsonDeserializationSchema deserializationSchema =\n                CanalJsonDeserializationSchema.builder(\n                                PHYSICAL_DATA_TYPE,\n                                Collections.emptyList(),\n                                InternalTypeInfo.of(PHYSICAL_DATA_TYPE.getLogicalType()))\n                        .setDatabase(\"mydb\")\n                        .setTable(\"product\")\n                        .build();\n        runTest(lines, deserializationSchema);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-12-31 10:34:00","commitOrder":4,"curCode":"    public void testSerializationDeserialization() throws Exception {\n        List<String> lines = readLines(\"canal-data.txt\");\n        CanalJsonDeserializationSchema deserializationSchema =\n                CanalJsonDeserializationSchema.builder(\n                                PHYSICAL_DATA_TYPE,\n                                Collections.emptyList(),\n                                InternalTypeInfo.of(PHYSICAL_DATA_TYPE.getLogicalType()))\n                        .setIgnoreParseErrors(false)\n                        .setTimestampFormat(TimestampFormat.ISO_8601)\n                        .build();\n        runTest(lines, deserializationSchema);\n    }\n","date":"2020-12-31 10:34:00","endLine":130,"groupId":"102097","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationDeserialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/fd1544f2ca8214108ea1ff1f9cead18cd2b21a.src","preCode":"    public void testSerializationDeserialization() throws Exception {\n        List<String> lines = readLines(\"canal-data.txt\");\n        CanalJsonDeserializationSchema deserializationSchema =\n                CanalJsonDeserializationSchema.builder(\n                                PHYSICAL_DATA_TYPE,\n                                Collections.emptyList(),\n                                InternalTypeInfo.of(PHYSICAL_DATA_TYPE.getLogicalType()))\n                        .setIgnoreParseErrors(false)\n                        .setTimestampFormat(TimestampFormat.ISO_8601)\n                        .build();\n        runTest(lines, deserializationSchema);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"3fea150713c970d8f1dd54670049115116029af4","commitMessage":"@@@[FLINK-20953][canal-json] Support regular expression to filter databases and tables for canal-json\n\nThis closes #14652","date":"2021-01-15 22:38:34","modifiedFileCount":"3","status":"M","submitter":"SteNicholas"}]
