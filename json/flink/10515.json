[{"authorTime":"2020-05-15 21:49:36","codes":[{"authorDate":"2020-05-13 20:55:49","commitOrder":2,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-05-13 20:55:49","endLine":180,"groupId":"15461","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/11/803d04767da563e66fa035b0f401b365b2835a.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"NB"},{"authorDate":"2020-05-15 21:49:36","commitOrder":2,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-05-18 12:30:38","endLine":181,"groupId":"17404","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a0/75aeeae288295ef57a929efaef96710dc199dd.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcRowDataLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"ce843a2e601cbc2ddba8d3feacaa930aea810877","commitMessage":"@@@[FLINK-17029][jdbc] Introduce a new JDBC connector with new property keys\n\nThis closes #12176\n","date":"2020-05-18 12:30:38","modifiedFileCount":"29","status":"M","submitter":"Leonard Xu"},{"authorTime":"2020-06-01 18:57:57","codes":[{"authorDate":"2020-06-01 18:57:57","commitOrder":3,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-06-10 11:06:01","endLine":192,"groupId":"15461","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/4598e35309201582ac0b3423374897059d4ecd.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2020-06-01 18:57:57","commitOrder":3,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-06-10 11:06:01","endLine":193,"groupId":"17404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3c/3ecf2883617a97cff83dbac2a143c8cc493471.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcRowDataLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"7ab4d33ec492b5abb93c078abd6ac2027337b421","commitMessage":"@@@[FLINK-16681][jdbc] Fix JDBC source/sink lost connection after a long time idle\n\nThis closes #12427\n","date":"2020-06-10 11:06:01","modifiedFileCount":"17","status":"M","submitter":"Lijie Wang"},{"authorTime":"2020-10-27 22:06:47","codes":[{"authorDate":"2020-06-01 18:57:57","commitOrder":4,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-06-10 11:06:01","endLine":192,"groupId":"15461","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/4598e35309201582ac0b3423374897059d4ecd.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"},{"authorDate":"2020-10-27 22:06:47","commitOrder":4,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-10-27 22:06:47","endLine":195,"groupId":"17404","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/bc550772e1acc62630173ca1cfe81060eae8bf.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcRowDataLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"bca8e472f943f59c0b226734a7a7c889ff4ba321","commitMessage":"@@@[FLINK-19684][jdbc] Fix 'max-retries' option doesn't work when set to zero\n\nThis closes #13669","date":"2020-10-27 22:06:47","modifiedFileCount":"7","status":"M","submitter":"caozhen"},{"authorTime":"2020-10-27 22:06:47","codes":[{"authorDate":"2020-12-19 22:48:31","commitOrder":5,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-12-19 22:48:31","endLine":197,"groupId":"15461","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e7/70e9c338367708d50272a974900a9207d7384a.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2020-10-27 22:06:47","commitOrder":5,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-10-27 22:06:47","endLine":195,"groupId":"17404","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/bc550772e1acc62630173ca1cfe81060eae8bf.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcRowDataLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"cc9ccc42e8c8f7221c6d35f4c011d573577d0505","commitMessage":"@@@[FLINK-19905][jdbc] Fix the 'lookup.max-retries' option initial value is 1 in JdbcLookupFunction\n\nThis closes #14377\n\nCo-authored-by: ??? <xiaojiawen1@xiaomi.com>","date":"2020-12-19 22:48:31","modifiedFileCount":"4","status":"M","submitter":"xiaoHoly"},{"authorTime":"2020-12-15 16:59:04","codes":[{"authorDate":"2020-12-15 16:59:04","commitOrder":6,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(connectionCheckTimeoutSeconds)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-12-25 10:22:51","endLine":198,"groupId":"15461","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ff/0dab0ccc172792ff504427b1b28c7d9093f4ea.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2020-12-15 16:59:04","commitOrder":6,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(connectionCheckTimeoutSeconds)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-12-25 10:22:51","endLine":196,"groupId":"17404","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f1/92ed04f3536b4f0c051c62852c4b5578760670.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(CONNECTION_CHECK_TIMEOUT_SECONDS)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcRowDataLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"f5e829c4ffed88e1a79b76e9fc8579013502ddc0","commitMessage":"@@@[FLINK-19691][jdbc] Support connection.max-retry-timeout configuration for JDBC connector\n\nThis closes #14387\n","date":"2020-12-25 10:22:51","modifiedFileCount":"12","status":"M","submitter":"???"},{"authorTime":"2020-12-27 13:52:54","codes":[{"authorDate":"2020-12-27 13:52:54","commitOrder":7,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!connectionProvider.isConnectionValid()) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tconnectionProvider.closeConnection();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-12-27 13:52:54","endLine":190,"groupId":"15461","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/c5f3de82c1c74554ad5516875a043ac112ddc2.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(connectionCheckTimeoutSeconds)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2020-12-27 13:52:54","commitOrder":7,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!connectionProvider.isConnectionValid()) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tconnectionProvider.closeConnection();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-12-27 13:52:54","endLine":189,"groupId":"17404","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/4268d5c924e820c7fe1f14c80d52c61c472bca.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRowData keyRow = GenericRowData.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<RowData> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (RowData cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tstatement = lookupKeyRowConverter.toExternal(keyRow, statement);\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(jdbcRowConverter.toInternal(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<RowData> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRowData row = jdbcRowConverter.toInternal(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!dbConn.isValid(connectionCheckTimeoutSeconds)) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tdbConn.close();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcRowDataLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"0c36b666094c01a96d341d2b0ee0b6863a6484e8","commitMessage":"@@@[FLINK-20657][connectors/jdbc] Migrate jdbc InputFormat/LookupFunction to SimpleJdbcConnectionProvider for connection establishment\n\nThis closes #14466","date":"2020-12-27 13:52:54","modifiedFileCount":"12","status":"M","submitter":"Kezhu Wang"},{"authorTime":"2021-08-05 10:27:39","codes":[{"authorDate":"2020-12-27 13:52:54","commitOrder":8,"curCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!connectionProvider.isConnectionValid()) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tconnectionProvider.closeConnection();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-12-27 13:52:54","endLine":190,"groupId":"10515","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/c5f3de82c1c74554ad5516875a043ac112ddc2.src","preCode":"\tpublic void eval(Object... keys) {\n\t\tRow keyRow = Row.of(keys);\n\t\tif (cache != null) {\n\t\t\tList<Row> cachedRows = cache.getIfPresent(keyRow);\n\t\t\tif (cachedRows != null) {\n\t\t\t\tfor (Row cachedRow : cachedRows) {\n\t\t\t\t\tcollect(cachedRow);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {\n\t\t\ttry {\n\t\t\t\tstatement.clearParameters();\n\t\t\t\tfor (int i = 0; i < keys.length; i++) {\n\t\t\t\t\tJdbcUtils.setField(statement, keySqlTypes[i], keys[i], i);\n\t\t\t\t}\n\t\t\t\ttry (ResultSet resultSet = statement.executeQuery()) {\n\t\t\t\t\tif (cache == null) {\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tcollect(convertToRowFromResultSet(resultSet));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tArrayList<Row> rows = new ArrayList<>();\n\t\t\t\t\t\twhile (resultSet.next()) {\n\t\t\t\t\t\t\tRow row = convertToRowFromResultSet(resultSet);\n\t\t\t\t\t\t\trows.add(row);\n\t\t\t\t\t\t\tcollect(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trows.trimToSize();\n\t\t\t\t\t\tcache.put(keyRow, rows);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n\t\t\t\tif (retry >= maxRetryTimes) {\n\t\t\t\t\tthrow new RuntimeException(\"Execution of JDBC statement failed.\", e);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!connectionProvider.isConnectionValid()) {\n\t\t\t\t\t\tstatement.close();\n\t\t\t\t\t\tconnectionProvider.closeConnection();\n\t\t\t\t\t\testablishConnectionAndStatement();\n\t\t\t\t\t}\n\t\t\t\t} catch (SQLException | ClassNotFoundException excpetion) {\n\t\t\t\t\tLOG.error(\"JDBC connection is not valid, and reestablish connection failed\", excpetion);\n\t\t\t\t\tthrow new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000 * retry);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\tthrow new RuntimeException(e1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"},{"authorDate":"2021-08-05 10:27:39","commitOrder":8,"curCode":"    public void eval(Object... keys) {\n        RowData keyRow = GenericRowData.of(keys);\n        if (cache != null) {\n            List<RowData> cachedRows = cache.getIfPresent(keyRow);\n            if (cachedRows != null) {\n                for (RowData cachedRow : cachedRows) {\n                    collect(cachedRow);\n                }\n                return;\n            }\n        }\n\n        for (int retry = 0; retry <= maxRetryTimes; retry++) {\n            try {\n                statement.clearParameters();\n                statement = lookupKeyRowConverter.toExternal(keyRow, statement);\n                try (ResultSet resultSet = statement.executeQuery()) {\n                    if (cache == null) {\n                        while (resultSet.next()) {\n                            collect(jdbcRowConverter.toInternal(resultSet));\n                        }\n                    } else {\n                        ArrayList<RowData> rows = new ArrayList<>();\n                        while (resultSet.next()) {\n                            RowData row = jdbcRowConverter.toInternal(resultSet);\n                            rows.add(row);\n                            collect(row);\n                        }\n                        rows.trimToSize();\n                        cache.put(keyRow, rows);\n                    }\n                }\n                break;\n            } catch (SQLException e) {\n                LOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n                if (retry >= maxRetryTimes) {\n                    throw new RuntimeException(\"Execution of JDBC statement failed.\", e);\n                }\n\n                try {\n                    if (!connectionProvider.isConnectionValid()) {\n                        statement.close();\n                        connectionProvider.closeConnection();\n                        establishConnectionAndStatement();\n                    }\n                } catch (SQLException | ClassNotFoundException exception) {\n                    LOG.error(\n                            \"JDBC connection is not valid, and reestablish connection failed\",\n                            exception);\n                    throw new RuntimeException(\"Reestablish JDBC connection failed\", exception);\n                }\n\n                try {\n                    Thread.sleep(1000 * retry);\n                } catch (InterruptedException e1) {\n                    throw new RuntimeException(e1);\n                }\n            }\n        }\n    }\n","date":"2021-08-05 10:27:39","endLine":208,"groupId":"10515","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"eval","params":"(Object...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5a/659f39fc82f6f4fc944725acddd7caa310d25a.src","preCode":"    public void eval(Object... keys) {\n        RowData keyRow = GenericRowData.of(keys);\n        if (cache != null) {\n            List<RowData> cachedRows = cache.getIfPresent(keyRow);\n            if (cachedRows != null) {\n                for (RowData cachedRow : cachedRows) {\n                    collect(cachedRow);\n                }\n                return;\n            }\n        }\n\n        for (int retry = 0; retry <= maxRetryTimes; retry++) {\n            try {\n                statement.clearParameters();\n                statement = lookupKeyRowConverter.toExternal(keyRow, statement);\n                try (ResultSet resultSet = statement.executeQuery()) {\n                    if (cache == null) {\n                        while (resultSet.next()) {\n                            collect(jdbcRowConverter.toInternal(resultSet));\n                        }\n                    } else {\n                        ArrayList<RowData> rows = new ArrayList<>();\n                        while (resultSet.next()) {\n                            RowData row = jdbcRowConverter.toInternal(resultSet);\n                            rows.add(row);\n                            collect(row);\n                        }\n                        rows.trimToSize();\n                        cache.put(keyRow, rows);\n                    }\n                }\n                break;\n            } catch (SQLException e) {\n                LOG.error(String.format(\"JDBC executeBatch error, retry times = %d\", retry), e);\n                if (retry >= maxRetryTimes) {\n                    throw new RuntimeException(\"Execution of JDBC statement failed.\", e);\n                }\n\n                try {\n                    if (!connectionProvider.isConnectionValid()) {\n                        statement.close();\n                        connectionProvider.closeConnection();\n                        establishConnectionAndStatement();\n                    }\n                } catch (SQLException | ClassNotFoundException excpetion) {\n                    LOG.error(\n                            \"JDBC connection is not valid, and reestablish connection failed\",\n                            excpetion);\n                    throw new RuntimeException(\"Reestablish JDBC connection failed\", excpetion);\n                }\n\n                try {\n                    Thread.sleep(1000 * retry);\n                } catch (InterruptedException e1) {\n                    throw new RuntimeException(e1);\n                }\n            }\n        }\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcRowDataLookupFunction.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"35ac5e58cfbc57ad9ebca16dd52d36a5deba54d8","commitMessage":"@@@[hotfix][connector][jdbc] Corrected exception variable name (#16662)\n\n","date":"2021-08-05 10:27:39","modifiedFileCount":"1","status":"M","submitter":"mans2singh"}]
