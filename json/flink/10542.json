[{"authorTime":"2016-11-29 20:57:30","codes":[{"authorDate":"2016-11-29 20:57:30","commitOrder":1,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes());\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif(element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\t\tsee.execute();\n\t}\n","date":"2016-12-02 21:28:35","endLine":90,"groupId":"51439","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/35/e9ef6c0c2bffb22ad3c506d81efddf14dd0502.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes());\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif(element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\t\tsee.execute();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/manualtests/ManualProducerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2016-11-29 20:57:30","commitOrder":1,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes());\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif(element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\n\t\t\r\n\t\tProperties consumerProps = new Properties();\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tDataStream<String> consuming = see.addSource(new FlinkKinesisConsumer<>(\"test-flink\", new SimpleStringSchema(), consumerProps));\n\t\t\r\n\t\tconsuming.flatMap(new FlatMapFunction<String, String>() {\n\t\t\t@Override\n\t\t\tpublic void flatMap(String value, Collector<String> out) throws Exception {\n\t\t\t\tString[] parts = value.split(\"-\");\n\t\t\t\ttry {\n\t\t\t\t\tlong l = Long.parseLong(parts[0]);\n\t\t\t\t\tif(l < 0) {\n\t\t\t\t\t\tthrow new RuntimeException(\"Negative\");\n\t\t\t\t\t}\n\t\t\t\t} catch(NumberFormatException nfe) {\n\t\t\t\t\tthrow new RuntimeException(\"First part of '\" + value + \"' is not a valid numeric type\");\n\t\t\t\t}\n\t\t\t\tif(parts[1].length() != 12) {\n\t\t\t\t\tthrow new RuntimeException(\"Second part of '\" + value + \"' doesn't have 12 characters\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconsuming.print();\n\n\t\tsee.execute();\n\t}\n","date":"2016-12-02 21:28:35","endLine":120,"groupId":"51439","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6e/02a5590d3b6a0bb28e1a8401d02a255e4686d7.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes());\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif(element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\n\t\t\r\n\t\tProperties consumerProps = new Properties();\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tDataStream<String> consuming = see.addSource(new FlinkKinesisConsumer<>(\"test-flink\", new SimpleStringSchema(), consumerProps));\n\t\t\r\n\t\tconsuming.flatMap(new FlatMapFunction<String, String>() {\n\t\t\t@Override\n\t\t\tpublic void flatMap(String value, Collector<String> out) throws Exception {\n\t\t\t\tString[] parts = value.split(\"-\");\n\t\t\t\ttry {\n\t\t\t\t\tlong l = Long.parseLong(parts[0]);\n\t\t\t\t\tif(l < 0) {\n\t\t\t\t\t\tthrow new RuntimeException(\"Negative\");\n\t\t\t\t\t}\n\t\t\t\t} catch(NumberFormatException nfe) {\n\t\t\t\t\tthrow new RuntimeException(\"First part of '\" + value + \"' is not a valid numeric type\");\n\t\t\t\t}\n\t\t\t\tif(parts[1].length() != 12) {\n\t\t\t\t\tthrow new RuntimeException(\"Second part of '\" + value + \"' doesn't have 12 characters\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconsuming.print();\n\n\t\tsee.execute();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/manualtests/ManualConsumerProducerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"de4fe3b7392948807753d65d13f3da968e6c7de0","commitMessage":"@@@[FLINK-4676] [connectors] Merge batch and streaming connectors into common Maven module.\n\nThis closes #2897.\n","date":"2016-12-02 21:28:35","modifiedFileCount":"0","status":"B","submitter":"Fabian Hueske"},{"authorTime":"2017-03-03 20:24:49","codes":[{"authorDate":"2017-03-03 20:24:49","commitOrder":2,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes(ConfigConstants.DEFAULT_CHARSET));\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif(element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\t\tsee.execute();\n\t}\n","date":"2017-03-09 20:00:55","endLine":91,"groupId":"4887","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1d/f717c20fde6c8554a98d6bcc09ab3651a6b2bf.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes());\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif(element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\t\tsee.execute();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/manualtests/ManualProducerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2017-03-03 20:24:49","commitOrder":2,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes(ConfigConstants.DEFAULT_CHARSET));\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif(element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\n\t\t\r\n\t\tProperties consumerProps = new Properties();\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tDataStream<String> consuming = see.addSource(new FlinkKinesisConsumer<>(\"test-flink\", new SimpleStringSchema(), consumerProps));\n\t\t\r\n\t\tconsuming.flatMap(new FlatMapFunction<String, String>() {\n\t\t\t@Override\n\t\t\tpublic void flatMap(String value, Collector<String> out) throws Exception {\n\t\t\t\tString[] parts = value.split(\"-\");\n\t\t\t\ttry {\n\t\t\t\t\tlong l = Long.parseLong(parts[0]);\n\t\t\t\t\tif(l < 0) {\n\t\t\t\t\t\tthrow new RuntimeException(\"Negative\");\n\t\t\t\t\t}\n\t\t\t\t} catch(NumberFormatException nfe) {\n\t\t\t\t\tthrow new RuntimeException(\"First part of '\" + value + \"' is not a valid numeric type\");\n\t\t\t\t}\n\t\t\t\tif(parts[1].length() != 12) {\n\t\t\t\t\tthrow new RuntimeException(\"Second part of '\" + value + \"' doesn't have 12 characters\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconsuming.print();\n\n\t\tsee.execute();\n\t}\n","date":"2017-03-09 20:00:55","endLine":121,"groupId":"4887","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/c6c2b0093b2f7b964c2173ef57df60d90350d6.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes());\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif(element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\n\t\t\r\n\t\tProperties consumerProps = new Properties();\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tDataStream<String> consuming = see.addSource(new FlinkKinesisConsumer<>(\"test-flink\", new SimpleStringSchema(), consumerProps));\n\t\t\r\n\t\tconsuming.flatMap(new FlatMapFunction<String, String>() {\n\t\t\t@Override\n\t\t\tpublic void flatMap(String value, Collector<String> out) throws Exception {\n\t\t\t\tString[] parts = value.split(\"-\");\n\t\t\t\ttry {\n\t\t\t\t\tlong l = Long.parseLong(parts[0]);\n\t\t\t\t\tif(l < 0) {\n\t\t\t\t\t\tthrow new RuntimeException(\"Negative\");\n\t\t\t\t\t}\n\t\t\t\t} catch(NumberFormatException nfe) {\n\t\t\t\t\tthrow new RuntimeException(\"First part of '\" + value + \"' is not a valid numeric type\");\n\t\t\t\t}\n\t\t\t\tif(parts[1].length() != 12) {\n\t\t\t\t\tthrow new RuntimeException(\"Second part of '\" + value + \"' doesn't have 12 characters\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconsuming.print();\n\n\t\tsee.execute();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/manualtests/ManualConsumerProducerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"53fedbd2894c6c7b839d8fdcc0dbf1e6e21e631a","commitMessage":"@@@[FLINK-5824] Fix String/byte conversions without explicit encoding\n\nThis closes #3468\n","date":"2017-03-09 20:00:55","modifiedFileCount":"70","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2017-08-15 13:46:29","codes":[{"authorDate":"2017-08-15 13:46:29","commitOrder":3,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(AWSConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes(ConfigConstants.DEFAULT_CHARSET));\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif (element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\t\tsee.execute();\n\t}\n","date":"2017-09-07 12:54:33","endLine":92,"groupId":"10542","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/49169bc8110a303dd80a4de56f78b407fb67bc.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes(ConfigConstants.DEFAULT_CHARSET));\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif (element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\t\tsee.execute();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/manualtests/ManualProducerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2017-08-15 13:46:29","commitOrder":3,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(AWSConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes(ConfigConstants.DEFAULT_CHARSET));\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif (element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\t\t\r\n\t\tProperties consumerProps = new Properties();\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tDataStream<String> consuming = see.addSource(new FlinkKinesisConsumer<>(\"test-flink\", new SimpleStringSchema(), consumerProps));\n\t\t\r\n\t\tconsuming.flatMap(new FlatMapFunction<String, String>() {\n\t\t\t@Override\n\t\t\tpublic void flatMap(String value, Collector<String> out) throws Exception {\n\t\t\t\tString[] parts = value.split(\"-\");\n\t\t\t\ttry {\n\t\t\t\t\tlong l = Long.parseLong(parts[0]);\n\t\t\t\t\tif (l < 0) {\n\t\t\t\t\t\tthrow new RuntimeException(\"Negative\");\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\t\tthrow new RuntimeException(\"First part of '\" + value + \"' is not a valid numeric type\");\n\t\t\t\t}\n\t\t\t\tif (parts[1].length() != 12) {\n\t\t\t\t\tthrow new RuntimeException(\"Second part of '\" + value + \"' doesn't have 12 characters\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconsuming.print();\n\n\t\tsee.execute();\n\t}\n","date":"2017-09-07 12:54:33","endLine":121,"groupId":"10542","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/470dc166e2f1a9c0e7eafe1b1e19cad44df8fc.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tParameterTool pt = ParameterTool.fromArgs(args);\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(4);\n\n\t\tDataStream<String> simpleStringStream = see.addSource(new ProduceIntoKinesis.EventsGenerator());\n\n\t\tProperties kinesisProducerConfig = new Properties();\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tkinesisProducerConfig.setProperty(ProducerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\n\t\tFlinkKinesisProducer<String> kinesis = new FlinkKinesisProducer<>(\n\t\t\t\tnew KinesisSerializationSchema<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ByteBuffer serialize(String element) {\n\t\t\t\t\t\treturn ByteBuffer.wrap(element.getBytes(ConfigConstants.DEFAULT_CHARSET));\n\t\t\t\t\t}\n\n\t\t\t\t\t\r\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getTargetStream(String element) {\n\t\t\t\t\t\tif (element.split(\"-\")[0].endsWith(\"0\")) {\n\t\t\t\t\t\t\treturn \"flink-test-2\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null; \r\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkinesisProducerConfig\n\t\t);\n\n\t\tkinesis.setFailOnError(true);\n\t\tkinesis.setDefaultStream(\"test-flink\");\n\t\tkinesis.setDefaultPartition(\"0\");\n\t\tkinesis.setCustomPartitioner(new KinesisPartitioner<String>() {\n\t\t\t@Override\n\t\t\tpublic String getPartitionId(String element) {\n\t\t\t\tint l = element.length();\n\t\t\t\treturn element.substring(l - 1, l);\n\t\t\t}\n\t\t});\n\t\tsimpleStringStream.addSink(kinesis);\n\n\t\t\r\n\t\tProperties consumerProps = new Properties();\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_ACCESS_KEY_ID, pt.getRequired(\"accessKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_SECRET_ACCESS_KEY, pt.getRequired(\"secretKey\"));\n\t\tconsumerProps.setProperty(ConsumerConfigConstants.AWS_REGION, pt.getRequired(\"region\"));\n\t\tDataStream<String> consuming = see.addSource(new FlinkKinesisConsumer<>(\"test-flink\", new SimpleStringSchema(), consumerProps));\n\t\t\r\n\t\tconsuming.flatMap(new FlatMapFunction<String, String>() {\n\t\t\t@Override\n\t\t\tpublic void flatMap(String value, Collector<String> out) throws Exception {\n\t\t\t\tString[] parts = value.split(\"-\");\n\t\t\t\ttry {\n\t\t\t\t\tlong l = Long.parseLong(parts[0]);\n\t\t\t\t\tif (l < 0) {\n\t\t\t\t\t\tthrow new RuntimeException(\"Negative\");\n\t\t\t\t\t}\n\t\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\t\tthrow new RuntimeException(\"First part of '\" + value + \"' is not a valid numeric type\");\n\t\t\t\t}\n\t\t\t\tif (parts[1].length() != 12) {\n\t\t\t\t\tthrow new RuntimeException(\"Second part of '\" + value + \"' doesn't have 12 characters\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconsuming.print();\n\n\t\tsee.execute();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/manualtests/ManualConsumerProducerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"59eab45458b3b1637ccbc5dafd326cc84ffb9655","commitMessage":"@@@[FLINK-7363] [kinesis] Clean up deprecation of ProducerConfigConstants\n\n- Improve deprecation message in Javadocs\n- Remove usage of ProducerConfigConstants in code wherever possible\n- Remove usage of ProducerConfigConstants in documentation code snippets\n\nThis closes #4473.\n","date":"2017-09-07 12:54:33","modifiedFileCount":"5","status":"M","submitter":"Tzu-Li (Gordon) Tai"}]
