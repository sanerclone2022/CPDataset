[{"authorTime":"2016-11-24 15:14:48","codes":[{"authorDate":"2016-11-24 15:14:48","commitOrder":2,"curCode":"\tpublic void testApplyWithCustomTrigger() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))\n\t\t\t\t.trigger(CountTrigger.of(1))\n\t\t\t\t.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> values,\n\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\tfor (Tuple2<String, Integer> in : values) {\n\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof CountTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2017-01-11 17:35:47","endLine":709,"groupId":"40939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplyWithCustomTrigger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3d/4de5d1bfa7a4ab3aae7a8f0403bc3a90bb6940.src","preCode":"\tpublic void testApplyWithCustomTrigger() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))\n\t\t\t\t.trigger(CountTrigger.of(1))\n\t\t\t\t.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> values,\n\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\tfor (Tuple2<String, Integer> in : values) {\n\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof CountTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/AllWindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":677,"status":"NB"},{"authorDate":"2016-11-24 15:14:48","commitOrder":2,"curCode":"\tpublic void testProcessWithCustomTrigger() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))\n\t\t\t\t.trigger(CountTrigger.of(1))\n\t\t\t\t.process(new ProcessWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(String key,\n\t\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> values,\n\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\tfor (Tuple2<String, Integer> in : values) {\n\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof CountTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2017-02-18 00:15:51","endLine":1308,"groupId":"6326","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithCustomTrigger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b8/99948d41885679ed66c150f45b3e604bc9bfd6.src","preCode":"\tpublic void testProcessWithCustomTrigger() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))\n\t\t\t\t.trigger(CountTrigger.of(1))\n\t\t\t\t.process(new ProcessWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(String key,\n\t\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> values,\n\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\tfor (Tuple2<String, Integer> in : values) {\n\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof CountTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1275,"status":"B"}],"commitId":"5368a7d32d96beb1b8298b87d9ea6d42ea306947","commitMessage":"@@@[FLINK-5237] Consolidate and harmonize Window Translation Tests\n","date":"2017-02-18 00:15:51","modifiedFileCount":"2","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":3,"curCode":"\tpublic void testApplyWithCustomTrigger() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))\n\t\t\t\t.trigger(CountTrigger.of(1))\n\t\t\t\t.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> values,\n\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\tfor (Tuple2<String, Integer> in : values) {\n\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof CountTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2020-10-01 23:03:45","endLine":925,"groupId":"102843","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplyWithCustomTrigger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/f1ccd82d9ad6943385f4b4bf602aa8f657cacd.src","preCode":"\tpublic void testApplyWithCustomTrigger() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))\n\t\t\t\t.trigger(CountTrigger.of(1))\n\t\t\t\t.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> values,\n\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\tfor (Tuple2<String, Integer> in : values) {\n\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof CountTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/AllWindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":894,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":3,"curCode":"\tpublic void testProcessWithCustomTrigger() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))\n\t\t\t\t.trigger(CountTrigger.of(1))\n\t\t\t\t.process(new ProcessWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(String key,\n\t\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> values,\n\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\tfor (Tuple2<String, Integer> in : values) {\n\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof CountTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2020-10-01 23:03:45","endLine":929,"groupId":"102843","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithCustomTrigger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/871406ac51fcb92088b16ceba657da0961f6c8.src","preCode":"\tpublic void testProcessWithCustomTrigger() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS)))\n\t\t\t\t.trigger(CountTrigger.of(1))\n\t\t\t\t.process(new ProcessWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(String key,\n\t\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> values,\n\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\tfor (Tuple2<String, Integer> in : values) {\n\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof CountTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":897,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
