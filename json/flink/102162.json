[{"authorTime":"2020-05-15 23:07:03","codes":[{"authorDate":"2020-09-01 13:28:57","commitOrder":2,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tCanalJsonSerializationSchema that = (CanalJsonSerializationSchema) o;\n\t\treturn Objects.equals(jsonSerializer, that.jsonSerializer);\n\t}\n","date":"2020-09-01 13:28:57","endLine":105,"groupId":"38966","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ea/5d4e141111f6f7a529e0eec7f3846530b79127.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tCanalJsonSerializationSchema that = (CanalJsonSerializationSchema) o;\n\t\treturn Objects.equals(jsonSerializer, that.jsonSerializer);\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonSerializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2020-05-15 23:07:03","commitOrder":2,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tDebeziumJsonDeserializationSchema that = (DebeziumJsonDeserializationSchema) o;\n\t\treturn schemaInclude == that.schemaInclude &&\n\t\t\tignoreParseErrors == that.ignoreParseErrors &&\n\t\t\tObjects.equals(jsonDeserializer, that.jsonDeserializer) &&\n\t\t\tObjects.equals(resultTypeInfo, that.resultTypeInfo);\n\t}\n","date":"2020-05-15 23:07:03","endLine":162,"groupId":"5267","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f0/ae9d99d3bea95da1c4a6b27f693227e64beb85.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tDebeziumJsonDeserializationSchema that = (DebeziumJsonDeserializationSchema) o;\n\t\treturn schemaInclude == that.schemaInclude &&\n\t\t\tignoreParseErrors == that.ignoreParseErrors &&\n\t\t\tObjects.equals(jsonDeserializer, that.jsonDeserializer) &&\n\t\t\tObjects.equals(resultTypeInfo, that.resultTypeInfo);\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"NB"}],"commitId":"853e1906c3fe3a3931c650c5ca6965a0d460240e","commitMessage":"@@@[FLINK-18824][json][table] Support serialization for canal-json format\n\nThis closes #13122","date":"2020-09-01 13:28:57","modifiedFileCount":"2","status":"M","submitter":"caozhen"},{"authorTime":"2020-11-03 22:55:58","codes":[{"authorDate":"2020-09-01 13:28:57","commitOrder":3,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tCanalJsonSerializationSchema that = (CanalJsonSerializationSchema) o;\n\t\treturn Objects.equals(jsonSerializer, that.jsonSerializer);\n\t}\n","date":"2020-09-01 13:28:57","endLine":105,"groupId":"102162","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ea/5d4e141111f6f7a529e0eec7f3846530b79127.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tCanalJsonSerializationSchema that = (CanalJsonSerializationSchema) o;\n\t\treturn Objects.equals(jsonSerializer, that.jsonSerializer);\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonSerializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2020-11-03 22:55:58","commitOrder":3,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tDebeziumJsonDeserializationSchema that = (DebeziumJsonDeserializationSchema) o;\n\t\treturn Objects.equals(jsonDeserializer, that.jsonDeserializer)\n\t\t\t\t&& hasMetadata == that.hasMetadata\n\t\t\t\t&& Objects.equals(producedTypeInfo, that.producedTypeInfo)\n\t\t\t\t&& schemaInclude == that.schemaInclude\n\t\t\t\t&& ignoreParseErrors == that.ignoreParseErrors;\n\t}\n","date":"2020-11-07 17:22:09","endLine":219,"groupId":"102162","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/43/bd94efa4a083b2c224d414fd0b0bf1fe8db856.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tDebeziumJsonDeserializationSchema that = (DebeziumJsonDeserializationSchema) o;\n\t\treturn schemaInclude == that.schemaInclude &&\n\t\t\tignoreParseErrors == that.ignoreParseErrors &&\n\t\t\tObjects.equals(jsonDeserializer, that.jsonDeserializer) &&\n\t\t\tObjects.equals(resultTypeInfo, that.resultTypeInfo);\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"64b96651579d76c718d67ebf2caca526d402a70e","commitMessage":"@@@[FLINK-19276][json][connector-kafka] Support reading Debezium metadata\n\nThis exposes metadata for the Debezium JSON format according to FLIP-107.\n\n- Update the Kafka connector to expose format specific metadata.\n- Reconfigure the internal JsonRowDataDeserializationSchema to read additional fields.\n- Let DebeziumJsonDeserializationSchema access and convert those additional fields to metadata columns.\n\nThis closes #13910.\n","date":"2020-11-07 17:22:09","modifiedFileCount":"13","status":"M","submitter":"Timo Walther"}]
