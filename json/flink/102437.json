[{"authorTime":"2017-10-05 01:11:09","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":5,"curCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-10-27 00:57:34","endLine":101,"groupId":"14704","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeInitValue","params":"(List<Long>toSerialize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/8ed1f6080dcca23fc6b33b5c225db8f9afb9bb.src","preCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/test/java/org/apache/flink/queryablestate/client/state/ImmutableListStateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2017-10-05 01:11:09","commitOrder":5,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tSV result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\t\treturn KvStateSerializer.serializeValue(result, serializer);\n\t}\n","date":"2017-10-11 21:33:30","endLine":112,"groupId":"5423","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/97/b6bcd2281bee90da47d5e51e71e98474dbc8a9.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tSV result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\t\treturn KvStateSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"NB"}],"commitId":"0c771505b84cdacf7a359c3be0efe38a30f9e660","commitMessage":"@@@[FLINK-7908][QS] Restructure the queryable state module.\n\nThe QS module is split into core and client. The core should\nbe put in the lib folder to enable queryable state.  while the\nclient is the one that the user will program against. The\nreason for the restructuring in mainly to remove the dependency\non the flink-runtime from the user's program.\n","date":"2017-10-27 00:57:34","modifiedFileCount":"23","status":"M","submitter":"kkloudas"},{"authorTime":"2018-03-10 05:47:35","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":6,"curCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-10-27 00:57:34","endLine":101,"groupId":"102437","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeInitValue","params":"(List<Long>toSerialize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/8ed1f6080dcca23fc6b33b5c225db8f9afb9bb.src","preCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/test/java/org/apache/flink/queryablestate/client/state/ImmutableListStateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"},{"authorDate":"2018-03-10 05:47:35","commitOrder":6,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<SV> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tSV result = stateTable.get(keyAndNamespace.f0, keyAndNamespace.f1);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn KvStateSerializer.serializeValue(result, safeValueSerializer);\n\t}\n","date":"2018-03-29 23:35:39","endLine":108,"groupId":"102437","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<SV>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/89c53795dfcb8a78f1d734053d5695d40adbe4.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tSV result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\t\treturn KvStateSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"db8e1f09bd7dcd9f392bf987e96cddcb34665b6c","commitMessage":"@@@[FLINK-8802] [QS] Fix concurrent access to non-duplicated serializers.\n\nThis closes #5691.\n","date":"2018-03-29 23:35:39","modifiedFileCount":"42","status":"M","submitter":"kkloudas"}]
