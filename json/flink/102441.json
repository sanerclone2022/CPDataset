[{"authorTime":"2017-10-24 18:16:08","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":1,"curCode":"\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\t\tREQ request = null;\n\t\tlong requestId = -1L;\n\n\t\ttry {\n\t\t\tfinal ByteBuf buf = (ByteBuf) msg;\n\t\t\tfinal MessageType msgType = MessageSerializer.deserializeHeader(buf);\n\n\t\t\trequestId = MessageSerializer.getRequestId(buf);\n\n\t\t\tif (msgType == MessageType.REQUEST) {\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\trequest = serializer.deserializeRequest(buf);\n\t\t\t\tstats.reportRequest();\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tqueryExecutor.submit(new AsyncRequestTask<>(this, ctx, requestId, request, stats));\n\n\t\t\t} else {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\n\t\t\t\tfinal String errMsg = \"Unexpected message type \" + msgType + \". Expected \" + MessageType.REQUEST + \".\";\n\t\t\t\tfinal ByteBuf failure = MessageSerializer.serializeServerFailure(ctx.alloc(), new IllegalArgumentException(errMsg));\n\n\t\t\t\tLOG.debug(errMsg);\n\t\t\t\tctx.writeAndFlush(failure);\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tfinal String stringifiedCause = ExceptionUtils.stringifyException(t);\n\n\t\t\tString errMsg;\n\t\t\tByteBuf err;\n\t\t\tif (request != null) {\n\t\t\t\terrMsg = \"Failed request with ID \" + requestId + \". Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeRequestFailure(ctx.alloc(), requestId, new RuntimeException(errMsg));\n\t\t\t\tstats.reportFailedRequest();\n\t\t\t} else {\n\t\t\t\terrMsg = \"Failed incoming message. Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(errMsg));\n\t\t\t}\n\n\t\t\tLOG.debug(errMsg);\n\t\t\tctx.writeAndFlush(err);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tReferenceCountUtil.release(msg);\n\t\t}\n\t}\n","date":"2017-10-27 00:57:34","endLine":163,"groupId":"20174","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"channelRead","params":"(ChannelHandlerContextctx@Objectmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/02291b528952f7579265e36cd8d28d35317f9a.src","preCode":"\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\t\tREQ request = null;\n\t\tlong requestId = -1L;\n\n\t\ttry {\n\t\t\tfinal ByteBuf buf = (ByteBuf) msg;\n\t\t\tfinal MessageType msgType = MessageSerializer.deserializeHeader(buf);\n\n\t\t\trequestId = MessageSerializer.getRequestId(buf);\n\n\t\t\tif (msgType == MessageType.REQUEST) {\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\trequest = serializer.deserializeRequest(buf);\n\t\t\t\tstats.reportRequest();\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tqueryExecutor.submit(new AsyncRequestTask<>(this, ctx, requestId, request, stats));\n\n\t\t\t} else {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\n\t\t\t\tfinal String errMsg = \"Unexpected message type \" + msgType + \". Expected \" + MessageType.REQUEST + \".\";\n\t\t\t\tfinal ByteBuf failure = MessageSerializer.serializeServerFailure(ctx.alloc(), new IllegalArgumentException(errMsg));\n\n\t\t\t\tLOG.debug(errMsg);\n\t\t\t\tctx.writeAndFlush(failure);\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tfinal String stringifiedCause = ExceptionUtils.stringifyException(t);\n\n\t\t\tString errMsg;\n\t\t\tByteBuf err;\n\t\t\tif (request != null) {\n\t\t\t\terrMsg = \"Failed request with ID \" + requestId + \". Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeRequestFailure(ctx.alloc(), requestId, new RuntimeException(errMsg));\n\t\t\t\tstats.reportFailedRequest();\n\t\t\t} else {\n\t\t\t\terrMsg = \"Failed incoming message. Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(errMsg));\n\t\t\t}\n\n\t\t\tLOG.debug(errMsg);\n\t\t\tctx.writeAndFlush(err);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tReferenceCountUtil.release(msg);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2017-10-24 18:16:08","commitOrder":1,"curCode":"\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n\t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = serializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n\n\t\tLOG.debug(msg);\n\t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);\n\t}\n","date":"2017-10-27 00:57:34","endLine":172,"groupId":"4864","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"exceptionCaught","params":"(ChannelHandlerContextctx@Throwablecause)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/02291b528952f7579265e36cd8d28d35317f9a.src","preCode":"\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n\t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = serializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n\n\t\tLOG.debug(msg);\n\t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"}],"commitId":"0c771505b84cdacf7a359c3be0efe38a30f9e660","commitMessage":"@@@[FLINK-7908][QS] Restructure the queryable state module.\n\nThe QS module is split into core and client. The core should\nbe put in the lib folder to enable queryable state.  while the\nclient is the one that the user will program against. The\nreason for the restructuring in mainly to remove the dependency\non the flink-runtime from the user's program.\n","date":"2017-10-27 00:57:34","modifiedFileCount":"23","status":"B","submitter":"kkloudas"},{"authorTime":"2018-07-04 02:36:43","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":2,"curCode":"\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\t\tREQ request = null;\n\t\tlong requestId = -1L;\n\n\t\ttry {\n\t\t\tfinal ByteBuf buf = (ByteBuf) msg;\n\t\t\tfinal MessageType msgType = MessageSerializer.deserializeHeader(buf);\n\n\t\t\trequestId = MessageSerializer.getRequestId(buf);\n\n\t\t\tif (msgType == MessageType.REQUEST) {\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\trequest = serializer.deserializeRequest(buf);\n\t\t\t\tstats.reportRequest();\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tqueryExecutor.submit(new AsyncRequestTask<>(this, ctx, requestId, request, stats));\n\n\t\t\t} else {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\n\t\t\t\tfinal String errMsg = \"Unexpected message type \" + msgType + \". Expected \" + MessageType.REQUEST + \".\";\n\t\t\t\tfinal ByteBuf failure = MessageSerializer.serializeServerFailure(ctx.alloc(), new IllegalArgumentException(errMsg));\n\n\t\t\t\tLOG.debug(errMsg);\n\t\t\t\tctx.writeAndFlush(failure);\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tfinal String stringifiedCause = ExceptionUtils.stringifyException(t);\n\n\t\t\tString errMsg;\n\t\t\tByteBuf err;\n\t\t\tif (request != null) {\n\t\t\t\terrMsg = \"Failed request with ID \" + requestId + \". Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeRequestFailure(ctx.alloc(), requestId, new RuntimeException(errMsg));\n\t\t\t\tstats.reportFailedRequest();\n\t\t\t} else {\n\t\t\t\terrMsg = \"Failed incoming message. Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(errMsg));\n\t\t\t}\n\n\t\t\tLOG.debug(errMsg);\n\t\t\tctx.writeAndFlush(err);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tReferenceCountUtil.release(msg);\n\t\t}\n\t}\n","date":"2017-10-27 00:57:34","endLine":163,"groupId":"20174","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"channelRead","params":"(ChannelHandlerContextctx@Objectmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/02291b528952f7579265e36cd8d28d35317f9a.src","preCode":"\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\t\tREQ request = null;\n\t\tlong requestId = -1L;\n\n\t\ttry {\n\t\t\tfinal ByteBuf buf = (ByteBuf) msg;\n\t\t\tfinal MessageType msgType = MessageSerializer.deserializeHeader(buf);\n\n\t\t\trequestId = MessageSerializer.getRequestId(buf);\n\n\t\t\tif (msgType == MessageType.REQUEST) {\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\trequest = serializer.deserializeRequest(buf);\n\t\t\t\tstats.reportRequest();\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tqueryExecutor.submit(new AsyncRequestTask<>(this, ctx, requestId, request, stats));\n\n\t\t\t} else {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\n\t\t\t\tfinal String errMsg = \"Unexpected message type \" + msgType + \". Expected \" + MessageType.REQUEST + \".\";\n\t\t\t\tfinal ByteBuf failure = MessageSerializer.serializeServerFailure(ctx.alloc(), new IllegalArgumentException(errMsg));\n\n\t\t\t\tLOG.debug(errMsg);\n\t\t\t\tctx.writeAndFlush(failure);\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tfinal String stringifiedCause = ExceptionUtils.stringifyException(t);\n\n\t\t\tString errMsg;\n\t\t\tByteBuf err;\n\t\t\tif (request != null) {\n\t\t\t\terrMsg = \"Failed request with ID \" + requestId + \". Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeRequestFailure(ctx.alloc(), requestId, new RuntimeException(errMsg));\n\t\t\t\tstats.reportFailedRequest();\n\t\t\t} else {\n\t\t\t\terrMsg = \"Failed incoming message. Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(errMsg));\n\t\t\t}\n\n\t\t\tLOG.debug(errMsg);\n\t\t\tctx.writeAndFlush(err);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tReferenceCountUtil.release(msg);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2018-07-04 02:36:43","commitOrder":2,"curCode":"\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n\t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n\n\t\tLOG.debug(msg);\n\t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);\n\t}\n","date":"2018-07-11 18:05:08","endLine":172,"groupId":"4864","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"exceptionCaught","params":"(ChannelHandlerContextctx@Throwablecause)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/835e31a828743c3c39e98c266b5533b91a4ded.src","preCode":"\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n\t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = serializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n\n\t\tLOG.debug(msg);\n\t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"cad6e4d396e7b901b8c83257312860021f01c060","commitMessage":"@@@[FLINK-9730][refactor] Fix static accesses via instance reference\n\nThis closes #6247.\n","date":"2018-07-11 18:05:08","modifiedFileCount":"3","status":"M","submitter":"lamber-ken"},{"authorTime":"2018-07-04 02:36:43","codes":[{"authorDate":"2020-05-04 18:35:08","commitOrder":3,"curCode":"\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\t\tREQ request = null;\n\t\tlong requestId = UNKNOWN_REQUEST_ID;\n\n\t\ttry {\n\t\t\tfinal ByteBuf buf = (ByteBuf) msg;\n\t\t\tfinal MessageType msgType = MessageSerializer.deserializeHeader(buf);\n\n\t\t\trequestId = MessageSerializer.getRequestId(buf);\n\n\t\t\tif (msgType == MessageType.REQUEST) {\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\trequest = serializer.deserializeRequest(buf);\n\t\t\t\tstats.reportRequest();\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tqueryExecutor.submit(new AsyncRequestTask<>(this, ctx, requestId, request, stats));\n\n\t\t\t} else {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\n\t\t\t\tfinal String errMsg = \"Unexpected message type \" + msgType + \". Expected \" + MessageType.REQUEST + \".\";\n\t\t\t\tfinal ByteBuf failure = MessageSerializer.serializeServerFailure(ctx.alloc(), new IllegalArgumentException(errMsg));\n\n\t\t\t\tLOG.debug(errMsg);\n\t\t\t\tctx.writeAndFlush(failure);\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tLOG.error(\"Error while handling request with ID [{}]\",\n\t\t\t\trequestId == UNKNOWN_REQUEST_ID ? \"unknown\" : requestId,\n\t\t\t\tt);\n\n\t\t\tfinal String stringifiedCause = ExceptionUtils.stringifyException(t);\n\n\t\t\tString errMsg;\n\t\t\tByteBuf err;\n\t\t\tif (request != null) {\n\t\t\t\terrMsg = \"Failed request with ID \" + requestId + \". Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeRequestFailure(ctx.alloc(), requestId, new RuntimeException(errMsg));\n\t\t\t\tstats.reportFailedRequest();\n\t\t\t} else {\n\t\t\t\terrMsg = \"Failed incoming message. Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(errMsg));\n\t\t\t}\n\n\t\t\tctx.writeAndFlush(err);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tReferenceCountUtil.release(msg);\n\t\t}\n\t}\n","date":"2020-05-06 15:50:23","endLine":168,"groupId":"20174","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"channelRead","params":"(ChannelHandlerContextctx@Objectmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/79/411310ffc9c761410b4eaecced56426a369709.src","preCode":"\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\t\tREQ request = null;\n\t\tlong requestId = -1L;\n\n\t\ttry {\n\t\t\tfinal ByteBuf buf = (ByteBuf) msg;\n\t\t\tfinal MessageType msgType = MessageSerializer.deserializeHeader(buf);\n\n\t\t\trequestId = MessageSerializer.getRequestId(buf);\n\n\t\t\tif (msgType == MessageType.REQUEST) {\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\trequest = serializer.deserializeRequest(buf);\n\t\t\t\tstats.reportRequest();\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tqueryExecutor.submit(new AsyncRequestTask<>(this, ctx, requestId, request, stats));\n\n\t\t\t} else {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\n\t\t\t\tfinal String errMsg = \"Unexpected message type \" + msgType + \". Expected \" + MessageType.REQUEST + \".\";\n\t\t\t\tfinal ByteBuf failure = MessageSerializer.serializeServerFailure(ctx.alloc(), new IllegalArgumentException(errMsg));\n\n\t\t\t\tLOG.debug(errMsg);\n\t\t\t\tctx.writeAndFlush(failure);\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tfinal String stringifiedCause = ExceptionUtils.stringifyException(t);\n\n\t\t\tString errMsg;\n\t\t\tByteBuf err;\n\t\t\tif (request != null) {\n\t\t\t\terrMsg = \"Failed request with ID \" + requestId + \". Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeRequestFailure(ctx.alloc(), requestId, new RuntimeException(errMsg));\n\t\t\t\tstats.reportFailedRequest();\n\t\t\t} else {\n\t\t\t\terrMsg = \"Failed incoming message. Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(errMsg));\n\t\t\t}\n\n\t\t\tLOG.debug(errMsg);\n\t\t\tctx.writeAndFlush(err);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tReferenceCountUtil.release(msg);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2018-07-04 02:36:43","commitOrder":3,"curCode":"\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n\t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n\n\t\tLOG.debug(msg);\n\t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);\n\t}\n","date":"2018-07-11 18:05:08","endLine":172,"groupId":"4864","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"exceptionCaught","params":"(ChannelHandlerContextctx@Throwablecause)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/835e31a828743c3c39e98c266b5533b91a4ded.src","preCode":"\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n\t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n\n\t\tLOG.debug(msg);\n\t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"N"}],"commitId":"c2540e44058a313a8dc7251dd5d37d2d52db2b44","commitMessage":"@@@[FLINK-17501][qs] Improve logging in AbstractServerHandler#channelRead(ChannelHandlerContext.  Object)\n\nLog errors as soon as possible.  i.e..  before serializing and sending an\nerror response to the client. This mitigates the problem that errors\nmight be masked by other errors that are caused by the error handling\nlogic.\n\nThis closes #11984.\n","date":"2020-05-06 15:50:23","modifiedFileCount":"1","status":"M","submitter":"Gary Yao"},{"authorTime":"2018-07-04 02:36:43","codes":[{"authorDate":"2020-05-21 15:44:33","commitOrder":4,"curCode":"\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\t\tREQ request = null;\n\t\tlong requestId = UNKNOWN_REQUEST_ID;\n\n\t\ttry {\n\t\t\tfinal ByteBuf buf = (ByteBuf) msg;\n\t\t\tfinal MessageType msgType = MessageSerializer.deserializeHeader(buf);\n\n\t\t\trequestId = MessageSerializer.getRequestId(buf);\n\t\t\tLOG.trace(\"Handling request with ID {}\", requestId);\n\n\t\t\tif (msgType == MessageType.REQUEST) {\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\trequest = serializer.deserializeRequest(buf);\n\t\t\t\tstats.reportRequest();\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tqueryExecutor.submit(new AsyncRequestTask<>(this, ctx, requestId, request, stats));\n\n\t\t\t} else {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\n\t\t\t\tfinal String errMsg = \"Unexpected message type \" + msgType + \". Expected \" + MessageType.REQUEST + \".\";\n\t\t\t\tfinal ByteBuf failure = MessageSerializer.serializeServerFailure(ctx.alloc(), new IllegalArgumentException(errMsg));\n\n\t\t\t\tLOG.debug(errMsg);\n\t\t\t\tctx.writeAndFlush(failure);\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tLOG.error(\"Error while handling request with ID [{}]\",\n\t\t\t\trequestId == UNKNOWN_REQUEST_ID ? \"unknown\" : requestId,\n\t\t\t\tt);\n\n\t\t\tfinal String stringifiedCause = ExceptionUtils.stringifyException(t);\n\n\t\t\tString errMsg;\n\t\t\tByteBuf err;\n\t\t\tif (request != null) {\n\t\t\t\terrMsg = \"Failed request with ID \" + requestId + \". Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeRequestFailure(ctx.alloc(), requestId, new RuntimeException(errMsg));\n\t\t\t\tstats.reportFailedRequest();\n\t\t\t} else {\n\t\t\t\terrMsg = \"Failed incoming message. Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(errMsg));\n\t\t\t}\n\n\t\t\tctx.writeAndFlush(err);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tReferenceCountUtil.release(msg);\n\t\t}\n\t}\n","date":"2020-05-23 01:15:49","endLine":169,"groupId":"102441","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"channelRead","params":"(ChannelHandlerContextctx@Objectmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/90/11bb27a14d910323af30817e16ba283322dcb6.src","preCode":"\tpublic void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\t\tREQ request = null;\n\t\tlong requestId = UNKNOWN_REQUEST_ID;\n\n\t\ttry {\n\t\t\tfinal ByteBuf buf = (ByteBuf) msg;\n\t\t\tfinal MessageType msgType = MessageSerializer.deserializeHeader(buf);\n\n\t\t\trequestId = MessageSerializer.getRequestId(buf);\n\n\t\t\tif (msgType == MessageType.REQUEST) {\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\trequest = serializer.deserializeRequest(buf);\n\t\t\t\tstats.reportRequest();\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tqueryExecutor.submit(new AsyncRequestTask<>(this, ctx, requestId, request, stats));\n\n\t\t\t} else {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\n\t\t\t\tfinal String errMsg = \"Unexpected message type \" + msgType + \". Expected \" + MessageType.REQUEST + \".\";\n\t\t\t\tfinal ByteBuf failure = MessageSerializer.serializeServerFailure(ctx.alloc(), new IllegalArgumentException(errMsg));\n\n\t\t\t\tLOG.debug(errMsg);\n\t\t\t\tctx.writeAndFlush(failure);\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\tLOG.error(\"Error while handling request with ID [{}]\",\n\t\t\t\trequestId == UNKNOWN_REQUEST_ID ? \"unknown\" : requestId,\n\t\t\t\tt);\n\n\t\t\tfinal String stringifiedCause = ExceptionUtils.stringifyException(t);\n\n\t\t\tString errMsg;\n\t\t\tByteBuf err;\n\t\t\tif (request != null) {\n\t\t\t\terrMsg = \"Failed request with ID \" + requestId + \". Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeRequestFailure(ctx.alloc(), requestId, new RuntimeException(errMsg));\n\t\t\t\tstats.reportFailedRequest();\n\t\t\t} else {\n\t\t\t\terrMsg = \"Failed incoming message. Caused by: \" + stringifiedCause;\n\t\t\t\terr = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(errMsg));\n\t\t\t}\n\n\t\t\tctx.writeAndFlush(err);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tReferenceCountUtil.release(msg);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2018-07-04 02:36:43","commitOrder":4,"curCode":"\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n\t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n\n\t\tLOG.debug(msg);\n\t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);\n\t}\n","date":"2018-07-11 18:05:08","endLine":172,"groupId":"102441","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"exceptionCaught","params":"(ChannelHandlerContextctx@Throwablecause)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/835e31a828743c3c39e98c266b5533b91a4ded.src","preCode":"\tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n\t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n\n\t\tLOG.debug(msg);\n\t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"N"}],"commitId":"564e8802a8f1a8c92d3c46686b109dfb826856fe","commitMessage":"@@@[FLINK-13553][qs] Add logging to AbstractServerHandler\n\nLog every request on trace level.\nLog caught exceptions in AsyncRequestTask.\n","date":"2020-05-23 01:15:49","modifiedFileCount":"1","status":"M","submitter":"Gary Yao"}]
