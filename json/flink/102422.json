[{"authorTime":"2020-05-11 17:46:53","codes":[{"authorDate":"2020-05-04 11:03:38","commitOrder":2,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-14 05:00:06","endLine":85,"groupId":"40384","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/80b5426718f8ff2f0adbf966a13eef3f8eca44.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesApplicationClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2020-05-11 17:46:53","commitOrder":2,"curCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, StandaloneApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal CommandLineParser<StandaloneApplicationClusterConfiguration> commandLineParser = new CommandLineParser<>(new StandaloneApplicationClusterConfigurationParserFactory());\n\n\t\tStandaloneApplicationClusterConfiguration clusterConfiguration = null;\n\t\ttry {\n\t\t\tclusterConfiguration = commandLineParser.parse(args);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not parse command line arguments {}.\", args, e);\n\t\t\tcommandLineParser.printHelp(StandaloneApplicationClusterEntryPoint.class.getSimpleName());\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(clusterConfiguration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tConfiguration configuration = loadConfigurationFromClusterConfig(clusterConfiguration);\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tStandaloneApplicationClusterEntryPoint entrypoint = new StandaloneApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(entrypoint);\n\t}\n","date":"2020-05-13 01:39:09","endLine":96,"groupId":"41928","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/38b3c667967a7861b3ef994d9e0e1fba0d1a98.src","preCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, StandaloneApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal CommandLineParser<StandaloneApplicationClusterConfiguration> commandLineParser = new CommandLineParser<>(new StandaloneApplicationClusterConfigurationParserFactory());\n\n\t\tStandaloneApplicationClusterConfiguration clusterConfiguration = null;\n\t\ttry {\n\t\t\tclusterConfiguration = commandLineParser.parse(args);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not parse command line arguments {}.\", args, e);\n\t\t\tcommandLineParser.printHelp(StandaloneApplicationClusterEntryPoint.class.getSimpleName());\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(clusterConfiguration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tConfiguration configuration = loadConfigurationFromClusterConfig(clusterConfiguration);\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tStandaloneApplicationClusterEntryPoint entrypoint = new StandaloneApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(entrypoint);\n\t}\n","realPath":"flink-container/src/main/java/org/apache/flink/container/entrypoint/StandaloneApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"}],"commitId":"c84e48cfe6c27cf738850e5d802322c3ca30b48f","commitMessage":"@@@[FLINK-10934][k8s] Support application mode for kubernetes\n\nThis closes #12003.\n","date":"2020-05-14 05:00:06","modifiedFileCount":"7","status":"M","submitter":"wangyang0918"},{"authorTime":"2020-05-18 18:29:48","codes":[{"authorDate":"2020-05-18 18:29:48","commitOrder":3,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-19 00:36:39","endLine":83,"groupId":"40384","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/4902ffb556a1012ce7490ecd4dc9b2af8159fa.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesApplicationClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-05-18 18:29:48","commitOrder":3,"curCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, StandaloneApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal CommandLineParser<StandaloneApplicationClusterConfiguration> commandLineParser = new CommandLineParser<>(new StandaloneApplicationClusterConfigurationParserFactory());\n\n\t\tStandaloneApplicationClusterConfiguration clusterConfiguration = null;\n\t\ttry {\n\t\t\tclusterConfiguration = commandLineParser.parse(args);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not parse command line arguments {}.\", args, e);\n\t\t\tcommandLineParser.printHelp(StandaloneApplicationClusterEntryPoint.class.getSimpleName());\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(clusterConfiguration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tConfiguration configuration = loadConfigurationFromClusterConfig(clusterConfiguration);\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tStandaloneApplicationClusterEntryPoint entrypoint = new StandaloneApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(entrypoint);\n\t}\n","date":"2020-05-19 00:36:39","endLine":95,"groupId":"41928","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/41/e874347e77dd8e7b086b20f25071cd93d39df0.src","preCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, StandaloneApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal CommandLineParser<StandaloneApplicationClusterConfiguration> commandLineParser = new CommandLineParser<>(new StandaloneApplicationClusterConfigurationParserFactory());\n\n\t\tStandaloneApplicationClusterConfiguration clusterConfiguration = null;\n\t\ttry {\n\t\t\tclusterConfiguration = commandLineParser.parse(args);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not parse command line arguments {}.\", args, e);\n\t\t\tcommandLineParser.printHelp(StandaloneApplicationClusterEntryPoint.class.getSimpleName());\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(clusterConfiguration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tConfiguration configuration = loadConfigurationFromClusterConfig(clusterConfiguration);\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tStandaloneApplicationClusterEntryPoint entrypoint = new StandaloneApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(entrypoint);\n\t}\n","realPath":"flink-container/src/main/java/org/apache/flink/container/entrypoint/StandaloneApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"b591f906685ee1379d791d296bd0b305cc7e9bb7","commitMessage":"@@@[FLINK-17796] Respect user specified classpath for application mode\n\nThis closes #12222.\n","date":"2020-05-19 00:36:39","modifiedFileCount":"4","status":"M","submitter":"wangyang0918"},{"authorTime":"2020-10-19 21:09:56","codes":[{"authorDate":"2020-10-19 21:09:56","commitOrder":4,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration dynamicParameters = ClusterEntrypointUtils.parseParametersOrExit(\n\t\t\targs,\n\t\t\tnew DynamicParametersConfigurationParserFactory(),\n\t\t\tKubernetesApplicationClusterEntrypoint.class);\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration(dynamicParameters);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","date":"2020-11-05 01:07:21","endLine":88,"groupId":"16353","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a1/c1fd594456d56c239b6beb0c9bca359e92af1e.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesApplicationClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2020-10-19 21:09:56","commitOrder":4,"curCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, StandaloneApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal StandaloneApplicationClusterConfiguration clusterConfiguration = ClusterEntrypointUtils.parseParametersOrExit(\n\t\t\targs,\n\t\t\tnew StandaloneApplicationClusterConfigurationParserFactory(),\n\t\t\tStandaloneApplicationClusterEntryPoint.class);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(clusterConfiguration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tConfiguration configuration = loadConfigurationFromClusterConfig(clusterConfiguration);\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tStandaloneApplicationClusterEntryPoint entrypoint = new StandaloneApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(entrypoint);\n\t}\n","date":"2020-11-05 01:07:21","endLine":87,"groupId":"18137","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c1/21ecb27ec42f599d6c494d4b632dadb411d23f.src","preCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, StandaloneApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal CommandLineParser<StandaloneApplicationClusterConfiguration> commandLineParser = new CommandLineParser<>(new StandaloneApplicationClusterConfigurationParserFactory());\n\n\t\tStandaloneApplicationClusterConfiguration clusterConfiguration = null;\n\t\ttry {\n\t\t\tclusterConfiguration = commandLineParser.parse(args);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not parse command line arguments {}.\", args, e);\n\t\t\tcommandLineParser.printHelp(StandaloneApplicationClusterEntryPoint.class.getSimpleName());\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(clusterConfiguration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tConfiguration configuration = loadConfigurationFromClusterConfig(clusterConfiguration);\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tStandaloneApplicationClusterEntryPoint entrypoint = new StandaloneApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(entrypoint);\n\t}\n","realPath":"flink-container/src/main/java/org/apache/flink/container/entrypoint/StandaloneApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"0a51d85255b9c7480eb5e939d88e9ccc5e98af69","commitMessage":"@@@[FLINK-19662][runtime][kubernetes][yarn][dist] Added dynamic parameters to BashJavaUtils' JobManager argument extraction. Additionally.  the Kubernetes and Yarn deployment were extended accordingly.\n\nThe parameters are returned using the newly introduced global environment variable DYNAMIC_PARAMETERS.\n","date":"2020-11-05 01:07:21","modifiedFileCount":"17","status":"M","submitter":"Matthias Pohl"},{"authorTime":"2021-06-25 15:37:50","codes":[{"authorDate":"2020-10-19 21:09:56","commitOrder":5,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration dynamicParameters = ClusterEntrypointUtils.parseParametersOrExit(\n\t\t\targs,\n\t\t\tnew DynamicParametersConfigurationParserFactory(),\n\t\t\tKubernetesApplicationClusterEntrypoint.class);\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration(dynamicParameters);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","date":"2020-11-05 01:07:21","endLine":88,"groupId":"102422","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a1/c1fd594456d56c239b6beb0c9bca359e92af1e.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration dynamicParameters = ClusterEntrypointUtils.parseParametersOrExit(\n\t\t\targs,\n\t\t\tnew DynamicParametersConfigurationParserFactory(),\n\t\t\tKubernetesApplicationClusterEntrypoint.class);\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration(dynamicParameters);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesApplicationClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2021-06-25 15:37:50","commitOrder":5,"curCode":"    public static void main(String[] args) {\n        \r\n        EnvironmentInformation.logEnvironmentInfo(\n                LOG, StandaloneApplicationClusterEntryPoint.class.getSimpleName(), args);\n        SignalHandler.register(LOG);\n        JvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n        final StandaloneApplicationClusterConfiguration clusterConfiguration =\n                ClusterEntrypointUtils.parseParametersOrExit(\n                        args,\n                        new StandaloneApplicationClusterConfigurationParserFactory(),\n                        StandaloneApplicationClusterEntryPoint.class);\n\n        Configuration configuration = loadConfigurationFromClusterConfig(clusterConfiguration);\n        PackagedProgram program = null;\n        try {\n            program = getPackagedProgram(clusterConfiguration, configuration);\n        } catch (Exception e) {\n            LOG.error(\"Could not create application program.\", e);\n            System.exit(1);\n        }\n\n        try {\n            configureExecution(configuration, program);\n        } catch (Exception e) {\n            LOG.error(\"Could not apply application configuration.\", e);\n            System.exit(1);\n        }\n\n        StandaloneApplicationClusterEntryPoint entrypoint =\n                new StandaloneApplicationClusterEntryPoint(configuration, program);\n\n        ClusterEntrypoint.runClusterEntrypoint(entrypoint);\n    }\n","date":"2021-07-06 19:07:43","endLine":83,"groupId":"102422","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/7650bda86dd54c311688e67fc4d77167ed5dd2.src","preCode":"    public static void main(String[] args) {\n        \r\n        EnvironmentInformation.logEnvironmentInfo(\n                LOG, StandaloneApplicationClusterEntryPoint.class.getSimpleName(), args);\n        SignalHandler.register(LOG);\n        JvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n        final StandaloneApplicationClusterConfiguration clusterConfiguration =\n                ClusterEntrypointUtils.parseParametersOrExit(\n                        args,\n                        new StandaloneApplicationClusterConfigurationParserFactory(),\n                        StandaloneApplicationClusterEntryPoint.class);\n\n        PackagedProgram program = null;\n        try {\n            program = getPackagedProgram(clusterConfiguration);\n        } catch (Exception e) {\n            LOG.error(\"Could not create application program.\", e);\n            System.exit(1);\n        }\n\n        Configuration configuration = loadConfigurationFromClusterConfig(clusterConfiguration);\n        try {\n            configureExecution(configuration, program);\n        } catch (Exception e) {\n            LOG.error(\"Could not apply application configuration.\", e);\n            System.exit(1);\n        }\n\n        StandaloneApplicationClusterEntryPoint entrypoint =\n                new StandaloneApplicationClusterEntryPoint(configuration, program);\n\n        ClusterEntrypoint.runClusterEntrypoint(entrypoint);\n    }\n","realPath":"flink-container/src/main/java/org/apache/flink/container/entrypoint/StandaloneApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"012dc6a9b800bae0cfa5250d38de992ccbabc015","commitMessage":"@@@[FLINK-21445][clients] Adds configuration parameter to DefaultPackagedProgramRetriever\n\nThis is the actual fix for FLINK-21445.\n","date":"2021-07-06 19:07:43","modifiedFileCount":"5","status":"M","submitter":"Matthias Pohl"}]
