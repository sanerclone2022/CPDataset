[{"authorTime":"2018-10-18 22:24:23","codes":[{"authorDate":"2018-10-18 22:24:23","commitOrder":1,"curCode":"\tprivate static <T> AvroFactory<T> fromSpecific(Class<T> type, ClassLoader cl, Optional<Schema> previousSchema) {\n\t\tSpecificData specificData = new SpecificData(cl);\n\t\tSchema newSchema = specificData.getSchema(type);\n\n\t\treturn new AvroFactory<>(\n\t\t\tspecificData,\n\t\t\tnewSchema,\n\t\t\tnew SpecificDatumReader<>(previousSchema.orElse(newSchema), newSchema, specificData),\n\t\t\tnew SpecificDatumWriter<>(newSchema, specificData)\n\t\t);\n\t}\n","date":"2018-10-30 21:55:51","endLine":105,"groupId":"27680","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromSpecific","params":"(Class<T>type@ClassLoadercl@Optional<Schema>previousSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0c/a25bfaa04e413cd609bad8f5ec743334e6a028.src","preCode":"\tprivate static <T> AvroFactory<T> fromSpecific(Class<T> type, ClassLoader cl, Optional<Schema> previousSchema) {\n\t\tSpecificData specificData = new SpecificData(cl);\n\t\tSchema newSchema = specificData.getSchema(type);\n\n\t\treturn new AvroFactory<>(\n\t\t\tspecificData,\n\t\t\tnewSchema,\n\t\t\tnew SpecificDatumReader<>(previousSchema.orElse(newSchema), newSchema, specificData),\n\t\t\tnew SpecificDatumWriter<>(newSchema, specificData)\n\t\t);\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/typeutils/AvroFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2018-10-18 22:24:23","commitOrder":1,"curCode":"\tprivate static <T> AvroFactory<T> fromGeneric(ClassLoader cl, Schema schema) {\n\t\tcheckNotNull(schema,\n\t\t\t\"Unable to create an AvroSerializer with a GenericRecord type without a schema\");\n\t\tGenericData genericData = new GenericData(cl);\n\n\t\treturn new AvroFactory<>(\n\t\t\tgenericData,\n\t\t\tschema,\n\t\t\tnew GenericDatumReader<>(schema, schema, genericData),\n\t\t\tnew GenericDatumWriter<>(schema, genericData)\n\t\t);\n\t}\n","date":"2018-10-30 21:55:51","endLine":118,"groupId":"31042","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fromGeneric","params":"(ClassLoadercl@Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0c/a25bfaa04e413cd609bad8f5ec743334e6a028.src","preCode":"\tprivate static <T> AvroFactory<T> fromGeneric(ClassLoader cl, Schema schema) {\n\t\tcheckNotNull(schema,\n\t\t\t\"Unable to create an AvroSerializer with a GenericRecord type without a schema\");\n\t\tGenericData genericData = new GenericData(cl);\n\n\t\treturn new AvroFactory<>(\n\t\t\tgenericData,\n\t\t\tschema,\n\t\t\tnew GenericDatumReader<>(schema, schema, genericData),\n\t\t\tnew GenericDatumWriter<>(schema, genericData)\n\t\t);\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/typeutils/AvroFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"b0b10edca7cf776defb83a739c9db2b8b55e5f70","commitMessage":"@@@[FLINK-10605] [avro] Upgrade AvroSerializer and snapshot for Avro schema evolution\n\nThis closes #6881.\n","date":"2018-10-30 21:55:51","modifiedFileCount":"3","status":"B","submitter":"Igal Shilman"},{"authorTime":"2018-10-18 22:24:23","codes":[{"authorDate":"2019-08-30 16:42:58","commitOrder":2,"curCode":"\tprivate static <T> AvroFactory<T> fromSpecific(Class<T> type, ClassLoader cl, Optional<Schema> previousSchema) {\n\t\tSpecificData specificData = new SpecificData(cl);\n\t\tSchema newSchema = extractAvroSpecificSchema(type, specificData);\n\n\t\treturn new AvroFactory<>(\n\t\t\tspecificData,\n\t\t\tnewSchema,\n\t\t\tnew SpecificDatumReader<>(previousSchema.orElse(newSchema), newSchema, specificData),\n\t\t\tnew SpecificDatumWriter<>(newSchema, specificData)\n\t\t);\n\t}\n","date":"2019-09-06 19:16:25","endLine":109,"groupId":"31398","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fromSpecific","params":"(Class<T>type@ClassLoadercl@Optional<Schema>previousSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/16a90288094d82b46fa8372f4e232377b0a19c.src","preCode":"\tprivate static <T> AvroFactory<T> fromSpecific(Class<T> type, ClassLoader cl, Optional<Schema> previousSchema) {\n\t\tSpecificData specificData = new SpecificData(cl);\n\t\tSchema newSchema = specificData.getSchema(type);\n\n\t\treturn new AvroFactory<>(\n\t\t\tspecificData,\n\t\t\tnewSchema,\n\t\t\tnew SpecificDatumReader<>(previousSchema.orElse(newSchema), newSchema, specificData),\n\t\t\tnew SpecificDatumWriter<>(newSchema, specificData)\n\t\t);\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/typeutils/AvroFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2018-10-18 22:24:23","commitOrder":2,"curCode":"\tprivate static <T> AvroFactory<T> fromGeneric(ClassLoader cl, Schema schema) {\n\t\tcheckNotNull(schema,\n\t\t\t\"Unable to create an AvroSerializer with a GenericRecord type without a schema\");\n\t\tGenericData genericData = new GenericData(cl);\n\n\t\treturn new AvroFactory<>(\n\t\t\tgenericData,\n\t\t\tschema,\n\t\t\tnew GenericDatumReader<>(schema, schema, genericData),\n\t\t\tnew GenericDatumWriter<>(schema, genericData)\n\t\t);\n\t}\n","date":"2018-10-30 21:55:51","endLine":118,"groupId":"31042","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fromGeneric","params":"(ClassLoadercl@Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0c/a25bfaa04e413cd609bad8f5ec743334e6a028.src","preCode":"\tprivate static <T> AvroFactory<T> fromGeneric(ClassLoader cl, Schema schema) {\n\t\tcheckNotNull(schema,\n\t\t\t\"Unable to create an AvroSerializer with a GenericRecord type without a schema\");\n\t\tGenericData genericData = new GenericData(cl);\n\n\t\treturn new AvroFactory<>(\n\t\t\tgenericData,\n\t\t\tschema,\n\t\t\tnew GenericDatumReader<>(schema, schema, genericData),\n\t\t\tnew GenericDatumWriter<>(schema, genericData)\n\t\t);\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/typeutils/AvroFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"}],"commitId":"f43138e0fe52a66f23225cbf5f72eae110bd3841","commitMessage":"@@@[FLINK-12501] Use SpecificRecord.getSchema in AvroFactory\n\nBefore.  we were using SpecificData.getSchema(type) which was not working\nfor types that were generated using Avrohugger (for Scala) because\nthe SCHEMA was generated in the companion object. Now we use a method\nthat must be available on all SpecificRecord(s).\n\nWe still use the old method as a fallback if we cannot instantiate or\ncall getSchema() on the instance.\n","date":"2019-09-06 19:16:25","modifiedFileCount":"2","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2018-10-18 22:24:23","codes":[{"authorDate":"2020-09-22 03:26:30","commitOrder":3,"curCode":"\tprivate static <T> AvroFactory<T> fromSpecific(Class<T> type, ClassLoader cl, Optional<Schema> previousSchema) {\n\t\tSpecificData specificData = getSpecificDataForClass((Class<? extends SpecificData>) type, cl);\n\t\tSchema newSchema = extractAvroSpecificSchema(type, specificData);\n\n\t\treturn new AvroFactory<>(\n\t\t\tspecificData,\n\t\t\tnewSchema,\n\t\t\tnew SpecificDatumReader<>(previousSchema.orElse(newSchema), newSchema, specificData),\n\t\t\tnew SpecificDatumWriter<>(newSchema, specificData)\n\t\t);\n\t}\n","date":"2020-09-24 13:58:44","endLine":111,"groupId":"101954","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fromSpecific","params":"(Class<T>type@ClassLoadercl@Optional<Schema>previousSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/c0b0b681481cea2e90aa6423e7640f9f3b4fb7.src","preCode":"\tprivate static <T> AvroFactory<T> fromSpecific(Class<T> type, ClassLoader cl, Optional<Schema> previousSchema) {\n\t\tSpecificData specificData = new SpecificData(cl);\n\t\tSchema newSchema = extractAvroSpecificSchema(type, specificData);\n\n\t\treturn new AvroFactory<>(\n\t\t\tspecificData,\n\t\t\tnewSchema,\n\t\t\tnew SpecificDatumReader<>(previousSchema.orElse(newSchema), newSchema, specificData),\n\t\t\tnew SpecificDatumWriter<>(newSchema, specificData)\n\t\t);\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/typeutils/AvroFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2018-10-18 22:24:23","commitOrder":3,"curCode":"\tprivate static <T> AvroFactory<T> fromGeneric(ClassLoader cl, Schema schema) {\n\t\tcheckNotNull(schema,\n\t\t\t\"Unable to create an AvroSerializer with a GenericRecord type without a schema\");\n\t\tGenericData genericData = new GenericData(cl);\n\n\t\treturn new AvroFactory<>(\n\t\t\tgenericData,\n\t\t\tschema,\n\t\t\tnew GenericDatumReader<>(schema, schema, genericData),\n\t\t\tnew GenericDatumWriter<>(schema, genericData)\n\t\t);\n\t}\n","date":"2018-10-30 21:55:51","endLine":118,"groupId":"101954","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fromGeneric","params":"(ClassLoadercl@Schemaschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0c/a25bfaa04e413cd609bad8f5ec743334e6a028.src","preCode":"\tprivate static <T> AvroFactory<T> fromGeneric(ClassLoader cl, Schema schema) {\n\t\tcheckNotNull(schema,\n\t\t\t\"Unable to create an AvroSerializer with a GenericRecord type without a schema\");\n\t\tGenericData genericData = new GenericData(cl);\n\n\t\treturn new AvroFactory<>(\n\t\t\tgenericData,\n\t\t\tschema,\n\t\t\tnew GenericDatumReader<>(schema, schema, genericData),\n\t\t\tnew GenericDatumWriter<>(schema, genericData)\n\t\t);\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/typeutils/AvroFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"}],"commitId":"3fcfb73177c25bc5dc1cc23927fd9d8bc2b6cead","commitMessage":"@@@[FLINK-19339] Support unions with logical types in Avro >= 1.9.x\n\nAvro 1.9.x introduced yet another mechanism for registering/looking up\nconversions for logical types.\n\nIf a logical type is part of a union a static field MODEL$ of type SpecificData\nis added to the generated Avro class with registered conversions for logical types.\nIn this commit we try to use that SpecificData in AvroSerializer and\nAvro(De)SerializationSchema whenever available instead of instantiating a new\nunrelated one.\n\nThe change is backwards compatible and if the field is not available we\nfallback to the old ways.\n","date":"2020-09-24 13:58:44","modifiedFileCount":"6","status":"M","submitter":"Dawid Wysakowicz"}]
