[{"authorTime":"2021-03-15 10:17:35","codes":[{"authorDate":"2020-12-18 18:32:55","commitOrder":3,"curCode":"    public void testHBaseLookupTableSource() {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + TEST_TABLE_1\n                        + \" (\"\n                        + \" family1 ROW<col1 INT>,\"\n                        + \" family2 ROW<col1 STRING, col2 BIGINT>,\"\n                        + \" family3 ROW<col1 DOUBLE, col2 BOOLEAN, col3 STRING>,\"\n                        + \" rowkey INT,\"\n                        + \" family4 ROW<col1 TIMESTAMP(3), col2 DATE, col3 TIME(3), col4 DECIMAL(12, 4)>,\"\n                        + \" PRIMARY KEY (rowkey) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \" 'connector' = 'hbase-1.4',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n\n        \r\n        String srcTableName = \"src\";\n        DataStream<Row> srcDs = execEnv.fromCollection(testData).returns(testTypeInfo);\n        Table in = tEnv.fromDataStream(srcDs, $(\"a\"), $(\"b\"), $(\"c\"), $(\"proc\").proctime());\n        tEnv.registerTable(srcTableName, in);\n\n        \r\n        String dimJoinQuery =\n                \"SELECT\"\n                        + \" a,\"\n                        + \" b,\"\n                        + \" h.family1.col1,\"\n                        + \" h.family2.col1,\"\n                        + \" h.family2.col2,\"\n                        + \" h.family3.col1,\"\n                        + \" h.family3.col2,\"\n                        + \" h.family3.col3,\"\n                        + \" h.family4.col1,\"\n                        + \" h.family4.col2,\"\n                        + \" h.family4.col3,\"\n                        + \" h.family4.col4 \"\n                        + \" FROM src JOIN \"\n                        + TEST_TABLE_1\n                        + \" FOR SYSTEM_TIME AS OF src.proc as h ON src.a = h.rowkey\";\n        Iterator<Row> collected = tEnv.executeSql(dimJoinQuery).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 2, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[3, 3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n\n        assertEquals(expected, result);\n    }\n","date":"2021-01-08 00:17:30","endLine":578,"groupId":"51005","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHBaseLookupTableSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fc/8a555806cf37812deea4e55d1eb923e508d909.src","preCode":"    public void testHBaseLookupTableSource() {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + TEST_TABLE_1\n                        + \" (\"\n                        + \" family1 ROW<col1 INT>,\"\n                        + \" family2 ROW<col1 STRING, col2 BIGINT>,\"\n                        + \" family3 ROW<col1 DOUBLE, col2 BOOLEAN, col3 STRING>,\"\n                        + \" rowkey INT,\"\n                        + \" family4 ROW<col1 TIMESTAMP(3), col2 DATE, col3 TIME(3), col4 DECIMAL(12, 4)>,\"\n                        + \" PRIMARY KEY (rowkey) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \" 'connector' = 'hbase-1.4',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n\n        \r\n        String srcTableName = \"src\";\n        DataStream<Row> srcDs = execEnv.fromCollection(testData).returns(testTypeInfo);\n        Table in = tEnv.fromDataStream(srcDs, $(\"a\"), $(\"b\"), $(\"c\"), $(\"proc\").proctime());\n        tEnv.registerTable(srcTableName, in);\n\n        \r\n        String dimJoinQuery =\n                \"SELECT\"\n                        + \" a,\"\n                        + \" b,\"\n                        + \" h.family1.col1,\"\n                        + \" h.family2.col1,\"\n                        + \" h.family2.col2,\"\n                        + \" h.family3.col1,\"\n                        + \" h.family3.col2,\"\n                        + \" h.family3.col3,\"\n                        + \" h.family4.col1,\"\n                        + \" h.family4.col2,\"\n                        + \" h.family4.col3,\"\n                        + \" h.family4.col4 \"\n                        + \" FROM src JOIN \"\n                        + TEST_TABLE_1\n                        + \" FOR SYSTEM_TIME AS OF src.proc as h ON src.a = h.rowkey\";\n        Iterator<Row> collected = tEnv.executeSql(dimJoinQuery).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 2, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[3, 3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":506,"status":"NB"},{"authorDate":"2021-03-15 10:17:35","commitOrder":3,"curCode":"    private void verifyHBaseLookupJoin(boolean async) {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + TEST_TABLE_1\n                        + \" (\"\n                        + \" family1 ROW<col1 INT>,\"\n                        + \" family2 ROW<col1 STRING, col2 BIGINT>,\"\n                        + \" family3 ROW<col1 DOUBLE, col2 BOOLEAN, col3 STRING>,\"\n                        + \" rowkey INT,\"\n                        + \" family4 ROW<col1 TIMESTAMP(3), col2 DATE, col3 TIME(3), col4 DECIMAL(12, 4)>,\"\n                        + \" PRIMARY KEY (rowkey) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \" 'connector' = 'hbase-2.2',\"\n                        + \" 'lookup.async' = '\"\n                        + async\n                        + \"',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n\n        \r\n        String srcTableName = \"src\";\n        DataStream<Row> srcDs = execEnv.fromCollection(testData).returns(testTypeInfo);\n        Table in = tEnv.fromDataStream(srcDs, $(\"a\"), $(\"b\"), $(\"c\"), $(\"proc\").proctime());\n        tEnv.createTemporaryView(srcTableName, in);\n\n        \r\n        String dimJoinQuery =\n                \"SELECT\"\n                        + \" a,\"\n                        + \" b,\"\n                        + \" h.family1.col1,\"\n                        + \" h.family2.col1,\"\n                        + \" h.family2.col2,\"\n                        + \" h.family3.col1,\"\n                        + \" h.family3.col2,\"\n                        + \" h.family3.col3,\"\n                        + \" h.family4.col1,\"\n                        + \" h.family4.col2,\"\n                        + \" h.family4.col3,\"\n                        + \" h.family4.col4 \"\n                        + \" FROM src JOIN \"\n                        + TEST_TABLE_1\n                        + \" FOR SYSTEM_TIME AS OF src.proc as h ON src.a = h.rowkey\";\n        Iterator<Row> collected = tEnv.executeSql(dimJoinQuery).collect();\n        List<String> result =\n                Lists.newArrayList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 2, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[3, 3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n\n        assertEquals(expected, result);\n    }\n","date":"2021-03-15 10:17:35","endLine":612,"groupId":"51005","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyHBaseLookupJoin","params":"(booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/ab7c2e984082eb47c4cd9892161a3501027827.src","preCode":"    private void verifyHBaseLookupJoin(boolean async) {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + TEST_TABLE_1\n                        + \" (\"\n                        + \" family1 ROW<col1 INT>,\"\n                        + \" family2 ROW<col1 STRING, col2 BIGINT>,\"\n                        + \" family3 ROW<col1 DOUBLE, col2 BOOLEAN, col3 STRING>,\"\n                        + \" rowkey INT,\"\n                        + \" family4 ROW<col1 TIMESTAMP(3), col2 DATE, col3 TIME(3), col4 DECIMAL(12, 4)>,\"\n                        + \" PRIMARY KEY (rowkey) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \" 'connector' = 'hbase-2.2',\"\n                        + \" 'lookup.async' = '\"\n                        + async\n                        + \"',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n\n        \r\n        String srcTableName = \"src\";\n        DataStream<Row> srcDs = execEnv.fromCollection(testData).returns(testTypeInfo);\n        Table in = tEnv.fromDataStream(srcDs, $(\"a\"), $(\"b\"), $(\"c\"), $(\"proc\").proctime());\n        tEnv.createTemporaryView(srcTableName, in);\n\n        \r\n        String dimJoinQuery =\n                \"SELECT\"\n                        + \" a,\"\n                        + \" b,\"\n                        + \" h.family1.col1,\"\n                        + \" h.family2.col1,\"\n                        + \" h.family2.col2,\"\n                        + \" h.family3.col1,\"\n                        + \" h.family3.col2,\"\n                        + \" h.family3.col3,\"\n                        + \" h.family4.col1,\"\n                        + \" h.family4.col2,\"\n                        + \" h.family4.col3,\"\n                        + \" h.family4.col4 \"\n                        + \" FROM src JOIN \"\n                        + TEST_TABLE_1\n                        + \" FOR SYSTEM_TIME AS OF src.proc as h ON src.a = h.rowkey\";\n        Iterator<Row> collected = tEnv.executeSql(dimJoinQuery).collect();\n        List<String> result =\n                Lists.newArrayList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 2, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[3, 3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"B"}],"commitId":"12aa1ad1a3affd70271a1e939beb87d7809452bf","commitMessage":"@@@[FLINK-20460][hbase] Support async lookup for HBase connector (#14684)\n\n","date":"2021-03-15 10:17:35","modifiedFileCount":"13","status":"M","submitter":"anlen321"},{"authorTime":"2021-05-11 23:29:15","codes":[{"authorDate":"2021-05-11 23:29:15","commitOrder":4,"curCode":"    public void testHBaseLookupTableSource() {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + TEST_TABLE_1\n                        + \" (\"\n                        + \" family1 ROW<col1 INT>,\"\n                        + \" family2 ROW<col1 STRING, col2 BIGINT>,\"\n                        + \" family3 ROW<col1 DOUBLE, col2 BOOLEAN, col3 STRING>,\"\n                        + \" rowkey INT,\"\n                        + \" family4 ROW<col1 TIMESTAMP(3), col2 DATE, col3 TIME(3), col4 DECIMAL(12, 4)>,\"\n                        + \" PRIMARY KEY (rowkey) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \" 'connector' = 'hbase-1.4',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n\n        \r\n        String srcTableName = \"src\";\n        DataStream<Row> srcDs = execEnv.fromCollection(testData).returns(testTypeInfo);\n        Table in = tEnv.fromDataStream(srcDs, $(\"a\"), $(\"b\"), $(\"c\"), $(\"proc\").proctime());\n        tEnv.registerTable(srcTableName, in);\n\n        \r\n        String dimJoinQuery =\n                \"SELECT\"\n                        + \" a,\"\n                        + \" b,\"\n                        + \" h.family1.col1,\"\n                        + \" h.family2.col1,\"\n                        + \" h.family2.col2,\"\n                        + \" h.family3.col1,\"\n                        + \" h.family3.col2,\"\n                        + \" h.family3.col3,\"\n                        + \" h.family4.col1,\"\n                        + \" h.family4.col2,\"\n                        + \" h.family4.col3,\"\n                        + \" h.family4.col4 \"\n                        + \" FROM src JOIN \"\n                        + TEST_TABLE_1\n                        + \" FOR SYSTEM_TIME AS OF src.proc as h ON src.a = h.rowkey\";\n        Iterator<Row> collected = tEnv.executeSql(dimJoinQuery).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 2, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[3, 3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n\n        assertEquals(expected, result);\n    }\n","date":"2021-05-18 19:59:43","endLine":421,"groupId":"10770","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testHBaseLookupTableSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1a/d2dd2d196495dada8ff95f9e5d245a82edfaa4.src","preCode":"    public void testHBaseLookupTableSource() {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + TEST_TABLE_1\n                        + \" (\"\n                        + \" family1 ROW<col1 INT>,\"\n                        + \" family2 ROW<col1 STRING, col2 BIGINT>,\"\n                        + \" family3 ROW<col1 DOUBLE, col2 BOOLEAN, col3 STRING>,\"\n                        + \" rowkey INT,\"\n                        + \" family4 ROW<col1 TIMESTAMP(3), col2 DATE, col3 TIME(3), col4 DECIMAL(12, 4)>,\"\n                        + \" PRIMARY KEY (rowkey) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \" 'connector' = 'hbase-1.4',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n\n        \r\n        String srcTableName = \"src\";\n        DataStream<Row> srcDs = execEnv.fromCollection(testData).returns(testTypeInfo);\n        Table in = tEnv.fromDataStream(srcDs, $(\"a\"), $(\"b\"), $(\"c\"), $(\"proc\").proctime());\n        tEnv.registerTable(srcTableName, in);\n\n        \r\n        String dimJoinQuery =\n                \"SELECT\"\n                        + \" a,\"\n                        + \" b,\"\n                        + \" h.family1.col1,\"\n                        + \" h.family2.col1,\"\n                        + \" h.family2.col2,\"\n                        + \" h.family3.col1,\"\n                        + \" h.family3.col2,\"\n                        + \" h.family3.col3,\"\n                        + \" h.family4.col1,\"\n                        + \" h.family4.col2,\"\n                        + \" h.family4.col3,\"\n                        + \" h.family4.col4 \"\n                        + \" FROM src JOIN \"\n                        + TEST_TABLE_1\n                        + \" FOR SYSTEM_TIME AS OF src.proc as h ON src.a = h.rowkey\";\n        Iterator<Row> collected = tEnv.executeSql(dimJoinQuery).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 2, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[3, 3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"},{"authorDate":"2021-05-11 23:29:15","commitOrder":4,"curCode":"    private void verifyHBaseLookupJoin(boolean async) {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + TEST_TABLE_1\n                        + \" (\"\n                        + \" family1 ROW<col1 INT>,\"\n                        + \" family2 ROW<col1 STRING, col2 BIGINT>,\"\n                        + \" family3 ROW<col1 DOUBLE, col2 BOOLEAN, col3 STRING>,\"\n                        + \" rowkey INT,\"\n                        + \" family4 ROW<col1 TIMESTAMP(3), col2 DATE, col3 TIME(3), col4 DECIMAL(12, 4)>,\"\n                        + \" PRIMARY KEY (rowkey) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \" 'connector' = 'hbase-2.2',\"\n                        + \" 'lookup.async' = '\"\n                        + async\n                        + \"',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n\n        \r\n        String srcTableName = \"src\";\n        DataStream<Row> srcDs = execEnv.fromCollection(testData).returns(testTypeInfo);\n        Table in = tEnv.fromDataStream(srcDs, $(\"a\"), $(\"b\"), $(\"c\"), $(\"proc\").proctime());\n        tEnv.createTemporaryView(srcTableName, in);\n\n        \r\n        String dimJoinQuery =\n                \"SELECT\"\n                        + \" a,\"\n                        + \" b,\"\n                        + \" h.family1.col1,\"\n                        + \" h.family2.col1,\"\n                        + \" h.family2.col2,\"\n                        + \" h.family3.col1,\"\n                        + \" h.family3.col2,\"\n                        + \" h.family3.col3,\"\n                        + \" h.family4.col1,\"\n                        + \" h.family4.col2,\"\n                        + \" h.family4.col3,\"\n                        + \" h.family4.col4 \"\n                        + \" FROM src JOIN \"\n                        + TEST_TABLE_1\n                        + \" FOR SYSTEM_TIME AS OF src.proc as h ON src.a = h.rowkey\";\n        Iterator<Row> collected = tEnv.executeSql(dimJoinQuery).collect();\n        List<String> result =\n                Lists.newArrayList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 2, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[3, 3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n\n        assertEquals(expected, result);\n    }\n","date":"2021-05-18 19:59:43","endLine":452,"groupId":"10770","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyHBaseLookupJoin","params":"(booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d9/633161cafadb4faec63a4d8e2e9e03f2c00381.src","preCode":"    private void verifyHBaseLookupJoin(boolean async) {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + TEST_TABLE_1\n                        + \" (\"\n                        + \" family1 ROW<col1 INT>,\"\n                        + \" family2 ROW<col1 STRING, col2 BIGINT>,\"\n                        + \" family3 ROW<col1 DOUBLE, col2 BOOLEAN, col3 STRING>,\"\n                        + \" rowkey INT,\"\n                        + \" family4 ROW<col1 TIMESTAMP(3), col2 DATE, col3 TIME(3), col4 DECIMAL(12, 4)>,\"\n                        + \" PRIMARY KEY (rowkey) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \" 'connector' = 'hbase-2.2',\"\n                        + \" 'lookup.async' = '\"\n                        + async\n                        + \"',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n\n        \r\n        String srcTableName = \"src\";\n        DataStream<Row> srcDs = execEnv.fromCollection(testData).returns(testTypeInfo);\n        Table in = tEnv.fromDataStream(srcDs, $(\"a\"), $(\"b\"), $(\"c\"), $(\"proc\").proctime());\n        tEnv.createTemporaryView(srcTableName, in);\n\n        \r\n        String dimJoinQuery =\n                \"SELECT\"\n                        + \" a,\"\n                        + \" b,\"\n                        + \" h.family1.col1,\"\n                        + \" h.family2.col1,\"\n                        + \" h.family2.col2,\"\n                        + \" h.family3.col1,\"\n                        + \" h.family3.col2,\"\n                        + \" h.family3.col3,\"\n                        + \" h.family4.col1,\"\n                        + \" h.family4.col2,\"\n                        + \" h.family4.col3,\"\n                        + \" h.family4.col4 \"\n                        + \" FROM src JOIN \"\n                        + TEST_TABLE_1\n                        + \" FOR SYSTEM_TIME AS OF src.proc as h ON src.a = h.rowkey\";\n        Iterator<Row> collected = tEnv.executeSql(dimJoinQuery).collect();\n        List<String> result =\n                Lists.newArrayList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 2, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[3, 3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"}],"commitId":"97610190fbdf4899e7d9aa8888971a0423fb7d81","commitMessage":"@@@[FLINK-22623][hbase] Drop BatchTableSource/Sink HBaseTableSource/Sink and related classes\n\nThis removes the HBaseTableSource/Sink and related classes including various HBaseInputFormats and\nHBaseSinkFunction. It is possible to read via Table & SQL API and convert the Table to DataStream API\n(or vice versa) if necessary. DataSet API is not supported anymore.\n\nThis closes #15905.\n","date":"2021-05-18 19:59:43","modifiedFileCount":"5","status":"M","submitter":"Timo Walther"}]
