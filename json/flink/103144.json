[{"authorTime":"2020-03-30 08:12:01","codes":[{"authorDate":"2020-03-30 08:12:01","commitOrder":1,"curCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\t\r\n\t\tMockSourceReader mockSourceReader = source.getCreatedReaders().get(0);\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","date":"2020-05-12 10:14:52","endLine":114,"groupId":"33987","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleAddSplitsEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/239c84cae84edf708d2b3c162d1c02e1c44dd9.src","preCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\t\r\n\t\tMockSourceReader mockSourceReader = source.getCreatedReaders().get(0);\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2020-03-30 08:12:01","commitOrder":1,"curCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = new ArrayList<>();\n\t\tIterable<byte[]> serializedSplits =\n\t\t\t\tstateContext.getOperatorStateStore().getListState(SourceOperator.SPLITS_STATE_DESC).get();\n\t\tfor (byte[] serialized : serializedSplits) {\n\t\t\tMockSourceSplitSerializer serializer = new MockSourceSplitSerializer();\n\t\t\tSourceOperator.SplitStateAndVersion stateAndVersion =\n\t\t\t\t\tSourceOperator.SplitStateAndVersion.fromBytes(serialized);\n\t\t\tsplitsInState.add(serializer.deserialize(\n\t\t\t\t\tstateAndVersion.getSerializerVersion(),\n\t\t\t\t\tstateAndVersion.getSplitState()));\n\t\t}\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","date":"2020-05-12 10:14:52","endLine":149,"groupId":"52969","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshotState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/239c84cae84edf708d2b3c162d1c02e1c44dd9.src","preCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = new ArrayList<>();\n\t\tIterable<byte[]> serializedSplits =\n\t\t\t\tstateContext.getOperatorStateStore().getListState(SourceOperator.SPLITS_STATE_DESC).get();\n\t\tfor (byte[] serialized : serializedSplits) {\n\t\t\tMockSourceSplitSerializer serializer = new MockSourceSplitSerializer();\n\t\t\tSourceOperator.SplitStateAndVersion stateAndVersion =\n\t\t\t\t\tSourceOperator.SplitStateAndVersion.fromBytes(serialized);\n\t\t\tsplitsInState.add(serializer.deserialize(\n\t\t\t\t\tstateAndVersion.getSerializerVersion(),\n\t\t\t\t\tstateAndVersion.getSplitState()));\n\t\t}\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"aa1ede9835192b28324789c7bbf4e6b906086797","commitMessage":"@@@[FLINK-16845] Adds implmentation of SourceOperator. This patch does the following:\n1. Add CoordinatedOperatorFactory interface.\n2. Rename SourceReaderOpertor to SourceOperator.  add implementation and connect it to OperatorEventGateway.\n3. Rename SourceReaderStreamTask to SourceOperatorStreamTask\n4. Fix some bugs in StreamTaskMailboxTestHarness.\n","date":"2020-05-12 10:14:52","modifiedFileCount":"10","status":"B","submitter":"Jiangjie (Becket) Qin"},{"authorTime":"2020-05-11 02:50:29","codes":[{"authorDate":"2020-03-30 08:12:01","commitOrder":2,"curCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\t\r\n\t\tMockSourceReader mockSourceReader = source.getCreatedReaders().get(0);\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","date":"2020-05-12 10:14:52","endLine":114,"groupId":"33987","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleAddSplitsEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/239c84cae84edf708d2b3c162d1c02e1c44dd9.src","preCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\t\r\n\t\tMockSourceReader mockSourceReader = source.getCreatedReaders().get(0);\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"},{"authorDate":"2020-05-11 02:50:29","commitOrder":2,"curCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get());\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","date":"2020-05-16 22:32:18","endLine":140,"groupId":"52969","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshotState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/3b08327ae1296f2c0c78a478ac5f657ae20a32.src","preCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = new ArrayList<>();\n\t\tIterable<byte[]> serializedSplits =\n\t\t\t\tstateContext.getOperatorStateStore().getListState(SourceOperator.SPLITS_STATE_DESC).get();\n\t\tfor (byte[] serialized : serializedSplits) {\n\t\t\tMockSourceSplitSerializer serializer = new MockSourceSplitSerializer();\n\t\t\tSourceOperator.SplitStateAndVersion stateAndVersion =\n\t\t\t\t\tSourceOperator.SplitStateAndVersion.fromBytes(serialized);\n\t\t\tsplitsInState.add(serializer.deserialize(\n\t\t\t\t\tstateAndVersion.getSerializerVersion(),\n\t\t\t\t\tstateAndVersion.getSplitState()));\n\t\t}\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"61d0344cb973fd42c210d9a97f3ea1c0697445ce","commitMessage":"@@@[FLINK-10740][DataStream API] Simplify SourceOperator by using SimpleVersionedListState\n","date":"2020-05-16 22:32:18","modifiedFileCount":"3","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2020-05-11 02:50:29","codes":[{"authorDate":"2020-05-11 05:07:16","commitOrder":3,"curCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\t\r\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","date":"2020-05-16 22:32:18","endLine":111,"groupId":"33987","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleAddSplitsEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/34/b79629b9d922a2d1412b48c8e354db6f38c0f0.src","preCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\t\r\n\t\tMockSourceReader mockSourceReader = source.getCreatedReaders().get(0);\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2020-05-11 02:50:29","commitOrder":3,"curCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get());\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","date":"2020-05-16 22:32:18","endLine":140,"groupId":"52969","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshotState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/3b08327ae1296f2c0c78a478ac5f657ae20a32.src","preCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get());\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"}],"commitId":"939625f2c84bdce6872548d3df672f492e33a704","commitMessage":"@@@[FLINK-17699][DataStream API] Initalize SourceOperator more eagerly and reduce scope or collaborators.\n\nThis reduces the scope of necessary mocking in the tests and of special-casing in the setup logic.\n\n  - This removes the dependency on Source and replaces it with a reader factory\n  - This let's the SourceOperator register itself at the OperatorEventDispatcher\n","date":"2020-05-16 22:32:18","modifiedFileCount":"3","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2020-06-06 09:52:48","codes":[{"authorDate":"2020-06-06 09:52:48","commitOrder":4,"curCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\t\r\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","date":"2020-06-16 01:38:16","endLine":110,"groupId":"52967","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleAddSplitsEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/5e96ef66cc711eaaa389223c0ffce948393803.src","preCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\t\r\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-06-06 09:52:48","commitOrder":4,"curCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get());\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","date":"2020-06-16 01:38:16","endLine":135,"groupId":"52969","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshotState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/5e96ef66cc711eaaa389223c0ffce948393803.src","preCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(Collections.singletonList(newSplit)));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get());\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"f883f1190132f9dd6b37f1e5c8ae0e0d25f78333","commitMessage":"@@@[FLINK-18162][connector/common] Serialize the splits in the AddSplitsEvent.\n","date":"2020-06-16 01:38:16","modifiedFileCount":"9","status":"M","submitter":"Jiangjie (Becket) Qin"},{"authorTime":"2020-08-24 23:59:04","codes":[{"authorDate":"2020-08-24 23:59:04","commitOrder":5,"curCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\ttry {\n\t\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\t\t\r\n\t\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t\t}\n\t\tfinally {\n\t\t\toperator.close();\n\t\t}\n\t}\n","date":"2020-08-25 15:55:25","endLine":120,"groupId":"52967","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleAddSplitsEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a2/ef7585e97d12f416867c8d5ce83121fa006b47.src","preCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\t\r\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-08-24 23:59:04","commitOrder":5,"curCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\ttry {\n\t\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\t\r\n\t\t\tList<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get());\n\t\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t\t}\n\t\tfinally {\n\t\t\toperator.close();\n\t\t}\n\t}\n","date":"2020-08-25 15:55:25","endLine":156,"groupId":"52969","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshotState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a2/ef7585e97d12f416867c8d5ce83121fa006b47.src","preCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get());\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"d4970e2732e7c3bb19539f25e2cb86936df0d877","commitMessage":"@@@[FLINK-19040][test] Properly close operator in SourceOperatorTest\n","date":"2020-08-25 15:55:25","modifiedFileCount":"1","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-10-25 18:04:19","codes":[{"authorDate":"2020-10-25 18:04:19","commitOrder":6,"curCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\t\r\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t}\n","date":"2020-11-05 23:04:20","endLine":119,"groupId":"103144","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleAddSplitsEvent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/1b2469a1b70d26e5f1877c213eee3525790088.src","preCode":"\tpublic void testHandleAddSplitsEvent() throws Exception {\n\t\toperator.initializeState(getStateContext());\n\t\toperator.open();\n\t\ttry {\n\t\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\t\t\r\n\t\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), mockSourceReader.getAssignedSplits());\n\t\t}\n\t\tfinally {\n\t\t\toperator.close();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2020-10-25 18:04:19","commitOrder":6,"curCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\r\n\t\tList<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get());\n\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t}\n","date":"2020-11-05 23:04:20","endLine":156,"groupId":"103144","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSnapshotState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/1b2469a1b70d26e5f1877c213eee3525790088.src","preCode":"\tpublic void testSnapshotState() throws Exception {\n\t\tStateInitializationContext stateContext = getStateContext();\n\t\toperator.initializeState(stateContext);\n\t\toperator.open();\n\t\ttry {\n\t\t\tMockSourceSplit newSplit = new MockSourceSplit((2));\n\t\t\toperator.handleOperatorEvent(new AddSplitEvent<>(\n\t\t\t\tCollections.singletonList(newSplit), new MockSourceSplitSerializer()));\n\t\t\toperator.snapshotState(new StateSnapshotContextSynchronousImpl(100L, 100L));\n\n\t\t\t\r\n\t\t\tList<MockSourceSplit> splitsInState = CollectionUtil.iterableToList(operator.getReaderState().get());\n\t\t\tassertEquals(Arrays.asList(MOCK_SPLIT, newSplit), splitsInState);\n\t\t}\n\t\tfinally {\n\t\t\toperator.close();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/SourceOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"d143762e2e343bb934ea2c1703aa69e2bcba6cdf","commitMessage":"@@@[hotfix] Replace finally block with JUnit After method in SourceOperatorTest.\n","date":"2020-11-05 23:04:20","modifiedFileCount":"1","status":"M","submitter":"Jiangjie (Becket) Qin"}]
