[{"authorTime":"2020-04-23 23:22:55","codes":[{"authorDate":"2020-04-17 22:14:01","commitOrder":2,"curCode":"\tpublic void testApplicationTaskFinishesWhenApplicationFinishes() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownSupplier(() -> CompletableFuture.completedFuture(Acknowledge.get()));\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tapplicationExecutionFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","date":"2020-04-21 17:15:18","endLine":167,"groupId":"6828","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplicationTaskFinishesWhenApplicationFinishes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/317c89c716a5decf672386ca873297e17f477a.src","preCode":"\tpublic void testApplicationTaskFinishesWhenApplicationFinishes() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownSupplier(() -> CompletableFuture.completedFuture(Acknowledge.get()));\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tapplicationExecutionFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"NB"},{"authorDate":"2020-04-23 23:22:55","commitOrder":2,"curCode":"\tprivate CompletableFuture<Void> runApplication(\n\t\t\tfinal Configuration configuration,\n\t\t\tfinal int noOfJobs) throws Throwable {\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\treturn runApplication(dispatcherBuilder, configuration, noOfJobs);\n\t}\n","date":"2020-05-01 04:08:04","endLine":422,"groupId":"6828","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runApplication","params":"(finalConfigurationconfiguration@finalintnoOfJobs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/52abd0251233c297a69faa42a1b007fdfb039c.src","preCode":"\tprivate CompletableFuture<Void> runApplication(\n\t\t\tfinal Configuration configuration,\n\t\t\tfinal int noOfJobs) throws Throwable {\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\treturn runApplication(dispatcherBuilder, configuration, noOfJobs);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"B"}],"commitId":"f42c14e07b9160620022064956e866dd284b4fd8","commitMessage":"@@@[FLINK-16661] Move the static job id setting to ApplicationDispatcherBootstrap\n\nHA support and static Job Ids go hand-in-hand.  as HA requires that\nthe id of a job graph stays fixed across consecutive executions. In\naddition.  no 2 jobs can have the same job id while executing on the\nsame cluster. This commit consolidates this logic (in the context\nof Application Mode) in one place.  the ApplicationDispatcherBootstrap.\n","date":"2020-05-01 04:08:04","modifiedFileCount":"4","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-04-23 23:22:55","codes":[{"authorDate":"2020-04-30 18:16:16","commitOrder":3,"curCode":"\tpublic void testApplicationTaskFinishesWhenApplicationFinishes() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tapplicationExecutionFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","date":"2020-05-01 04:08:07","endLine":296,"groupId":"6828","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplicationTaskFinishesWhenApplicationFinishes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/7aa2eb50bdc608b9c3be643976d21280a00f66.src","preCode":"\tpublic void testApplicationTaskFinishesWhenApplicationFinishes() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownSupplier(() -> CompletableFuture.completedFuture(Acknowledge.get()));\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tapplicationExecutionFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2020-04-23 23:22:55","commitOrder":3,"curCode":"\tprivate CompletableFuture<Void> runApplication(\n\t\t\tfinal Configuration configuration,\n\t\t\tfinal int noOfJobs) throws Throwable {\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\treturn runApplication(dispatcherBuilder, configuration, noOfJobs);\n\t}\n","date":"2020-05-01 04:08:04","endLine":422,"groupId":"6828","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runApplication","params":"(finalConfigurationconfiguration@finalintnoOfJobs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/52abd0251233c297a69faa42a1b007fdfb039c.src","preCode":"\tprivate CompletableFuture<Void> runApplication(\n\t\t\tfinal Configuration configuration,\n\t\t\tfinal int noOfJobs) throws Throwable {\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\treturn runApplication(dispatcherBuilder, configuration, noOfJobs);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"N"}],"commitId":"440755dda75d2a45a27930cd9f96db6343bc3e2a","commitMessage":"@@@[minor] Verify cluster shutdown status in ApplicationDispatcherBootstrap\n\nThis also verifies cluster shutdown status in other tests\n","date":"2020-05-01 04:08:07","modifiedFileCount":"3","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-04-23 23:22:55","codes":[{"authorDate":"2020-10-22 02:55:44","commitOrder":4,"curCode":"\tpublic void testApplicationTaskFinishesWhenApplicationFinishes() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t3, dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture = bootstrap.getClusterShutdownFuture();\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tapplicationExecutionFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","date":"2020-10-26 21:25:43","endLine":299,"groupId":"101747","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplicationTaskFinishesWhenApplicationFinishes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/c8dbec4c9d8f262684317c5567d745b38988c0.src","preCode":"\tpublic void testApplicationTaskFinishesWhenApplicationFinishes() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tapplicationExecutionFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"},{"authorDate":"2020-04-23 23:22:55","commitOrder":4,"curCode":"\tprivate CompletableFuture<Void> runApplication(\n\t\t\tfinal Configuration configuration,\n\t\t\tfinal int noOfJobs) throws Throwable {\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\treturn runApplication(dispatcherBuilder, configuration, noOfJobs);\n\t}\n","date":"2020-05-01 04:08:04","endLine":422,"groupId":"101747","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"runApplication","params":"(finalConfigurationconfiguration@finalintnoOfJobs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/52abd0251233c297a69faa42a1b007fdfb039c.src","preCode":"\tprivate CompletableFuture<Void> runApplication(\n\t\t\tfinal Configuration configuration,\n\t\t\tfinal int noOfJobs) throws Throwable {\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\treturn runApplication(dispatcherBuilder, configuration, noOfJobs);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"N"}],"commitId":"c5ec0b0abe09e097f0e79f126b749be22bee437a","commitMessage":"@@@[FLINK-19154] Merge ApplicationDispatcherBootstrap#initialize() with constructor.\n","date":"2020-10-26 21:25:43","modifiedFileCount":"17","status":"M","submitter":"Kostas Kloudas"}]
