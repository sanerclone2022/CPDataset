[{"authorTime":"2020-09-18 22:28:48","codes":[{"authorDate":"2020-09-18 22:28:48","commitOrder":1,"curCode":"\tpublic void testSourceCheckpointFirst() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","date":"2020-09-25 16:25:14","endLine":85,"groupId":"24126","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSourceCheckpointFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/17/0515d4a79d8141586aee9ed3aabb26a026f868.src","preCode":"\tpublic void testSourceCheckpointFirst() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2020-09-18 22:28:48","commitOrder":1,"curCode":"\tpublic void testSourceCheckpointLast() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\ttestHarness.processWhileAvailable();\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","date":"2020-09-25 16:25:14","endLine":149,"groupId":"24126","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSourceCheckpointLast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/17/0515d4a79d8141586aee9ed3aabb26a026f868.src","preCode":"\tpublic void testSourceCheckpointLast() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\ttestHarness.processWhileAvailable();\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"}],"commitId":"f547f4c05e21d227cb45db10dab0d86b2a1b8a80","commitMessage":"@@@[FLINK-18906][task] Support StreamTaskSourceInput as BlockabledInput\n\nThis commit adds support for StreamTaskSourceInput as BlockableInput passed to CheckpointBarrierHandlers.\nEffectively this enables checkpointing with chained sources for MultipleInputStreamTask.\n","date":"2020-09-25 16:25:14","modifiedFileCount":"11","status":"B","submitter":"Piotr Nowojski"},{"authorTime":"2020-09-25 18:58:13","codes":[{"authorDate":"2020-09-18 22:28:48","commitOrder":2,"curCode":"\tpublic void testSourceCheckpointFirst() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","date":"2020-09-25 16:25:14","endLine":85,"groupId":"24126","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSourceCheckpointFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/17/0515d4a79d8141586aee9ed3aabb26a026f868.src","preCode":"\tpublic void testSourceCheckpointFirst() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2020-09-25 18:58:13","commitOrder":2,"curCode":"\tpublic void testSourceCheckpointLast() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\ttestHarness.processAll();\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","date":"2020-09-25 21:50:44","endLine":149,"groupId":"24126","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSourceCheckpointLast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/85/3331067b623f21f33b243713c7c78cf38289cf.src","preCode":"\tpublic void testSourceCheckpointLast() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\ttestHarness.processWhileAvailable();\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"cf1b21f4b83d17f7dc262efc688e9dd657bb1445","commitMessage":"@@@[FLINK-18907][hotfix] Replace old processIf/WhileAvailable with processSingleStep\n\nThe new versions have a bit different semantc. They process data/keep processing data. \nas long something was processed.  instead of relaying on input/output availability.\nThe biggest difference is.  that processSingleStep can process mailbox actions\neven if input is not available.\n","date":"2020-09-25 21:50:44","modifiedFileCount":"4","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-10-20 22:57:46","codes":[{"authorDate":"2020-10-20 22:57:46","commitOrder":3,"curCode":"\tpublic void testSourceCheckpointFirst() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tCheckpointBarrier barrier = createBarrier(testHarness);\n\t\t\taddRecordsAndBarriers(testHarness, barrier);\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, barrier.getCheckpointOptions(), false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n\t\t}\n\t}\n","date":"2020-10-29 19:30:41","endLine":87,"groupId":"24126","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSourceCheckpointFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/912ab0c6069949167e82cbc3cefc7cd64ba4a6.src","preCode":"\tpublic void testSourceCheckpointFirst() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-10-20 22:57:46","commitOrder":3,"curCode":"\tpublic void testSourceCheckpointLast() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tCheckpointBarrier barrier = createBarrier(testHarness);\n\t\t\taddRecordsAndBarriers(testHarness, barrier);\n\n\t\t\ttestHarness.processAll();\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, barrier.getCheckpointOptions(), false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n\t\t}\n\t}\n","date":"2020-10-29 19:30:41","endLine":153,"groupId":"24126","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSourceCheckpointLast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/912ab0c6069949167e82cbc3cefc7cd64ba4a6.src","preCode":"\tpublic void testSourceCheckpointLast() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n\t\t\ttestHarness.setAutoProcess(false);\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\taddRecordsAndBarriers(testHarness);\n\n\t\t\ttestHarness.processAll();\n\n\t\t\tFuture<Boolean> checkpointFuture = testHarness.getStreamTask().triggerCheckpointAsync(metaData, options, false);\n\t\t\tprocessSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n\t\t\tArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n\t\t\tassertThat(actualOutput.subList(0, expectedOutput.size()), containsInAnyOrder(expectedOutput.toArray()));\n\t\t\tassertThat(actualOutput.get(expectedOutput.size()), equalTo(checkpointBarrier));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"fda1679bab0b069138a4f81493ad939643832200","commitMessage":"@@@[FLINK-19680][checkpointing] Provide alignment timeout checkpoint option\n","date":"2020-10-29 19:30:41","modifiedFileCount":"20","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-02-24 03:34:00","codes":[{"authorDate":"2021-02-24 03:34:00","commitOrder":4,"curCode":"    public void testSourceCheckpointFirst() throws Exception {\n        try (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n            testHarness.setAutoProcess(false);\n            ArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n            CheckpointBarrier barrier = createBarrier(testHarness);\n            addRecordsAndBarriers(testHarness, barrier);\n\n            Future<Boolean> checkpointFuture =\n                    testHarness\n                            .getStreamTask()\n                            .triggerCheckpointAsync(metaData, barrier.getCheckpointOptions());\n            processSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n            ArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n            assertThat(\n                    actualOutput.subList(0, expectedOutput.size()),\n                    containsInAnyOrder(expectedOutput.toArray()));\n            assertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n        }\n    }\n","date":"2021-02-25 01:57:36","endLine":92,"groupId":"24126","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSourceCheckpointFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3a/bef6b5e6df2c8471a44ef87bdd7a5fec4ecbc9.src","preCode":"    public void testSourceCheckpointFirst() throws Exception {\n        try (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n            testHarness.setAutoProcess(false);\n            ArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n            CheckpointBarrier barrier = createBarrier(testHarness);\n            addRecordsAndBarriers(testHarness, barrier);\n\n            Future<Boolean> checkpointFuture =\n                    testHarness\n                            .getStreamTask()\n                            .triggerCheckpointAsync(\n                                    metaData, barrier.getCheckpointOptions(), false);\n            processSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n            ArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n            assertThat(\n                    actualOutput.subList(0, expectedOutput.size()),\n                    containsInAnyOrder(expectedOutput.toArray()));\n            assertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-02-24 03:34:00","commitOrder":4,"curCode":"    public void testSourceCheckpointLast() throws Exception {\n        try (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n            testHarness.setAutoProcess(false);\n            ArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n            CheckpointBarrier barrier = createBarrier(testHarness);\n            addRecordsAndBarriers(testHarness, barrier);\n\n            testHarness.processAll();\n\n            Future<Boolean> checkpointFuture =\n                    testHarness\n                            .getStreamTask()\n                            .triggerCheckpointAsync(metaData, barrier.getCheckpointOptions());\n            processSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n            ArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n            assertThat(\n                    actualOutput.subList(0, expectedOutput.size()),\n                    containsInAnyOrder(expectedOutput.toArray()));\n            assertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n        }\n    }\n","date":"2021-02-25 01:57:36","endLine":164,"groupId":"24126","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSourceCheckpointLast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3a/bef6b5e6df2c8471a44ef87bdd7a5fec4ecbc9.src","preCode":"    public void testSourceCheckpointLast() throws Exception {\n        try (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n            testHarness.setAutoProcess(false);\n            ArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n            CheckpointBarrier barrier = createBarrier(testHarness);\n            addRecordsAndBarriers(testHarness, barrier);\n\n            testHarness.processAll();\n\n            Future<Boolean> checkpointFuture =\n                    testHarness\n                            .getStreamTask()\n                            .triggerCheckpointAsync(\n                                    metaData, barrier.getCheckpointOptions(), false);\n            processSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n            ArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n            assertThat(\n                    actualOutput.subList(0, expectedOutput.size()),\n                    containsInAnyOrder(expectedOutput.toArray()));\n            assertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"44e962715b9411b8a00a420d3043e0cc32a0f565","commitMessage":"@@@[FLINK-21453][checkpointing][refactor] Replace advanceToEndOfTime with new CheckpointType.SAVEPOINT_TERMINATE\n","date":"2021-02-25 01:57:36","modifiedFileCount":"63","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-07-16 21:46:28","codes":[{"authorDate":"2021-07-16 21:46:28","commitOrder":5,"curCode":"    public void testSourceCheckpointFirst() throws Exception {\n        try (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness(objectReuse)) {\n            testHarness.setAutoProcess(false);\n            ArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n            CheckpointBarrier barrier = createBarrier(testHarness);\n            addRecordsAndBarriers(testHarness, barrier);\n\n            Future<Boolean> checkpointFuture =\n                    testHarness\n                            .getStreamTask()\n                            .triggerCheckpointAsync(metaData, barrier.getCheckpointOptions());\n            processSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n            ArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n            assertThat(\n                    actualOutput.subList(0, expectedOutput.size()),\n                    containsInAnyOrder(expectedOutput.toArray()));\n            assertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n        }\n    }\n","date":"2021-07-26 15:08:00","endLine":125,"groupId":"102493","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSourceCheckpointFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a1/ad06f232bbb745a7acac586fef7c5dfec816bb.src","preCode":"    public void testSourceCheckpointFirst() throws Exception {\n        try (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n            testHarness.setAutoProcess(false);\n            ArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n            CheckpointBarrier barrier = createBarrier(testHarness);\n            addRecordsAndBarriers(testHarness, barrier);\n\n            Future<Boolean> checkpointFuture =\n                    testHarness\n                            .getStreamTask()\n                            .triggerCheckpointAsync(metaData, barrier.getCheckpointOptions());\n            processSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n            ArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n            assertThat(\n                    actualOutput.subList(0, expectedOutput.size()),\n                    containsInAnyOrder(expectedOutput.toArray()));\n            assertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2021-07-16 21:46:28","commitOrder":5,"curCode":"    public void testSourceCheckpointLast() throws Exception {\n        try (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness(objectReuse)) {\n            testHarness.setAutoProcess(false);\n            ArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n            CheckpointBarrier barrier = createBarrier(testHarness);\n            addRecordsAndBarriers(testHarness, barrier);\n\n            testHarness.processAll();\n\n            Future<Boolean> checkpointFuture =\n                    testHarness\n                            .getStreamTask()\n                            .triggerCheckpointAsync(metaData, barrier.getCheckpointOptions());\n            processSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n            ArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n            assertThat(\n                    actualOutput.subList(0, expectedOutput.size()),\n                    containsInAnyOrder(expectedOutput.toArray()));\n            assertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n        }\n    }\n","date":"2021-07-26 15:08:00","endLine":198,"groupId":"102493","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSourceCheckpointLast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a1/ad06f232bbb745a7acac586fef7c5dfec816bb.src","preCode":"    public void testSourceCheckpointLast() throws Exception {\n        try (StreamTaskMailboxTestHarness<String> testHarness = buildTestHarness()) {\n            testHarness.setAutoProcess(false);\n            ArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n            CheckpointBarrier barrier = createBarrier(testHarness);\n            addRecordsAndBarriers(testHarness, barrier);\n\n            testHarness.processAll();\n\n            Future<Boolean> checkpointFuture =\n                    testHarness\n                            .getStreamTask()\n                            .triggerCheckpointAsync(metaData, barrier.getCheckpointOptions());\n            processSingleStepUntil(testHarness, checkpointFuture::isDone);\n\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"42\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"44\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n            expectedOutput.add(new StreamRecord<>(\"47.0\", TimestampAssigner.NO_TIMESTAMP));\n\n            ArrayList<Object> actualOutput = new ArrayList<>(testHarness.getOutput());\n\n            assertThat(\n                    actualOutput.subList(0, expectedOutput.size()),\n                    containsInAnyOrder(expectedOutput.toArray()));\n            assertThat(actualOutput.get(expectedOutput.size()), equalTo(barrier));\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskChainedSourcesCheckpointingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"2fe7b938e77b3ea88979ab1d36502604042e2ffc","commitMessage":"@@@[FLINK-23373][task] Fully support object reuse in OperatorChain\n\nThis closes #16518.\n","date":"2021-07-26 15:08:00","modifiedFileCount":"5","status":"M","submitter":"Timo Walther"}]
