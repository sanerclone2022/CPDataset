[{"authorTime":"2020-10-06 04:01:47","codes":[{"authorDate":"2020-10-06 04:01:47","commitOrder":1,"curCode":"\tpublic void testBadTableSinkForCustomPartitionerForPartitionedTable() {\n\t\tTableSchema sinkSchema = defaultSinkSchema().build();\n\t\tMap<String, String> sinkOptions = defaultTableOptions()\n\t\t\t.withTableOption(KinesisOptions.SINK_PARTITIONER, \"random\")\n\t\t\t.build();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expect(containsCause(new ValidationException(String.format(\n\t\t\t\"Cannot set %s option for a table defined with a PARTITIONED BY clause\",\n\t\t\tKinesisOptions.SINK_PARTITIONER.key()))));\n\n\t\ttry {\n\t\t\tFactoryUtil.createTableSink(\n\t\t\t\tnull,\n\t\t\t\tObjectIdentifier.of(\"default\", \"default\", TABLE_NAME),\n\t\t\t\tcreateSinkTable(sinkSchema, sinkOptions, Arrays.asList(\"name\", \"curr_id\")),\n\t\t\t\tnew Configuration(),\n\t\t\t\tThread.currentThread().getContextClassLoader(),\n\t\t\t\tfalse);\n\t\t} catch (ValidationException e) {\n\t\t\tthrow (ValidationException) e.getCause(); \r\n\t\t}\n\t}\n","date":"2020-11-08 06:08:34","endLine":234,"groupId":"1797","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadTableSinkForCustomPartitionerForPartitionedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/d3a47cab3082e52a24afed58c93c1990fcc37f.src","preCode":"\tpublic void testBadTableSinkForCustomPartitionerForPartitionedTable() {\n\t\tTableSchema sinkSchema = defaultSinkSchema().build();\n\t\tMap<String, String> sinkOptions = defaultTableOptions()\n\t\t\t.withTableOption(KinesisOptions.SINK_PARTITIONER, \"random\")\n\t\t\t.build();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expect(containsCause(new ValidationException(String.format(\n\t\t\t\"Cannot set %s option for a table defined with a PARTITIONED BY clause\",\n\t\t\tKinesisOptions.SINK_PARTITIONER.key()))));\n\n\t\ttry {\n\t\t\tFactoryUtil.createTableSink(\n\t\t\t\tnull,\n\t\t\t\tObjectIdentifier.of(\"default\", \"default\", TABLE_NAME),\n\t\t\t\tcreateSinkTable(sinkSchema, sinkOptions, Arrays.asList(\"name\", \"curr_id\")),\n\t\t\t\tnew Configuration(),\n\t\t\t\tThread.currentThread().getContextClassLoader(),\n\t\t\t\tfalse);\n\t\t} catch (ValidationException e) {\n\t\t\tthrow (ValidationException) e.getCause(); \r\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2020-10-06 04:01:47","commitOrder":1,"curCode":"\tpublic void testBadTableSinkForNonExistingPartitionerClass() {\n\t\tTableSchema sinkSchema = defaultSinkSchema().build();\n\t\tMap<String, String> sinkOptions = defaultTableOptions()\n\t\t\t.withTableOption(KinesisOptions.SINK_PARTITIONER, \"abc\")\n\t\t\t.build();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expect(containsCause(new ValidationException(\n\t\t\t\"Could not find and instantiate partitioner class 'abc'\")));\n\n\t\tFactoryUtil.createTableSink(\n\t\t\tnull,\n\t\t\tObjectIdentifier.of(\"default\", \"default\", TABLE_NAME),\n\t\t\tcreateSinkTable(sinkSchema, sinkOptions, Collections.emptyList()),\n\t\t\tnew Configuration(),\n\t\t\tThread.currentThread().getContextClassLoader(),\n\t\t\tfalse);\n\t}\n","date":"2020-11-08 06:08:34","endLine":254,"groupId":"1797","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadTableSinkForNonExistingPartitionerClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/d3a47cab3082e52a24afed58c93c1990fcc37f.src","preCode":"\tpublic void testBadTableSinkForNonExistingPartitionerClass() {\n\t\tTableSchema sinkSchema = defaultSinkSchema().build();\n\t\tMap<String, String> sinkOptions = defaultTableOptions()\n\t\t\t.withTableOption(KinesisOptions.SINK_PARTITIONER, \"abc\")\n\t\t\t.build();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expect(containsCause(new ValidationException(\n\t\t\t\"Could not find and instantiate partitioner class 'abc'\")));\n\n\t\tFactoryUtil.createTableSink(\n\t\t\tnull,\n\t\t\tObjectIdentifier.of(\"default\", \"default\", TABLE_NAME),\n\t\t\tcreateSinkTable(sinkSchema, sinkOptions, Collections.emptyList()),\n\t\t\tnew Configuration(),\n\t\t\tThread.currentThread().getContextClassLoader(),\n\t\t\tfalse);\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"}],"commitId":"322a357f96bf60d3a89fd39ab4ae972bb272a758","commitMessage":"@@@[FLINK-18858][connector-kinesis] Add Kinesis sources and sinks\n\nThis adds an implementation.  unit-tests.  and docs for the following factories:\n\n- KinesisDynamicSource - produces FlinkKinesisConsumer instances.\n- KinesisDynamicSink - produces FlinkKinesisProducer instances.\n- KinesisDynamicTableFactory - produces instances of the above two factories.\n\nThe following ability interfaces are supported:\n\n- KinesisDynamicSink implements SupportsPartitioning through a specialized KinesisPartitioner class.\n- KinesisDynamicSource implements SupportsReadingMetadata through a specialized KinesisDeserializationSchema class.\n\nThis closes #13770.\n","date":"2020-11-08 06:08:34","modifiedFileCount":"1","status":"B","submitter":"Alexander Alexandrov"},{"authorTime":"2021-03-18 19:13:17","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    public void testBadTableSinkForCustomPartitionerForPartitionedTable() {\n        ResolvedSchema sinkSchema = defaultSinkSchema();\n        Map<String, String> sinkOptions =\n                defaultTableOptions()\n                        .withTableOption(KinesisOptions.SINK_PARTITIONER, \"random\")\n                        .build();\n\n        thrown.expect(ValidationException.class);\n        thrown.expect(\n                containsCause(\n                        new ValidationException(\n                                String.format(\n                                        \"Cannot set %s option for a table defined with a PARTITIONED BY clause\",\n                                        KinesisOptions.SINK_PARTITIONER.key()))));\n\n        try {\n            createTableSink(sinkSchema, Arrays.asList(\"name\", \"curr_id\"), sinkOptions);\n        } catch (ValidationException e) {\n            throw (ValidationException) e.getCause(); \r\n        }\n    }\n","date":"2021-03-24 04:35:35","endLine":235,"groupId":"26200","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadTableSinkForCustomPartitionerForPartitionedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/a109f46cecf5fcd128e0c570061d1100058ade.src","preCode":"    public void testBadTableSinkForCustomPartitionerForPartitionedTable() {\n        TableSchema sinkSchema = defaultSinkSchema().build();\n        Map<String, String> sinkOptions =\n                defaultTableOptions()\n                        .withTableOption(KinesisOptions.SINK_PARTITIONER, \"random\")\n                        .build();\n\n        thrown.expect(ValidationException.class);\n        thrown.expect(\n                containsCause(\n                        new ValidationException(\n                                String.format(\n                                        \"Cannot set %s option for a table defined with a PARTITIONED BY clause\",\n                                        KinesisOptions.SINK_PARTITIONER.key()))));\n\n        try {\n            FactoryUtil.createTableSink(\n                    null,\n                    ObjectIdentifier.of(\"default\", \"default\", TABLE_NAME),\n                    createSinkTable(sinkSchema, sinkOptions, Arrays.asList(\"name\", \"curr_id\")),\n                    new Configuration(),\n                    Thread.currentThread().getContextClassLoader(),\n                    false);\n        } catch (ValidationException e) {\n            throw (ValidationException) e.getCause(); \r\n        }\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    public void testBadTableSinkForNonExistingPartitionerClass() {\n        ResolvedSchema sinkSchema = defaultSinkSchema();\n        Map<String, String> sinkOptions =\n                defaultTableOptions()\n                        .withTableOption(KinesisOptions.SINK_PARTITIONER, \"abc\")\n                        .build();\n\n        thrown.expect(ValidationException.class);\n        thrown.expect(\n                containsCause(\n                        new ValidationException(\n                                \"Could not find and instantiate partitioner class 'abc'\")));\n\n        createTableSink(sinkSchema, sinkOptions);\n    }\n","date":"2021-03-24 04:35:35","endLine":252,"groupId":"1797","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadTableSinkForNonExistingPartitionerClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/a109f46cecf5fcd128e0c570061d1100058ade.src","preCode":"    public void testBadTableSinkForNonExistingPartitionerClass() {\n        TableSchema sinkSchema = defaultSinkSchema().build();\n        Map<String, String> sinkOptions =\n                defaultTableOptions()\n                        .withTableOption(KinesisOptions.SINK_PARTITIONER, \"abc\")\n                        .build();\n\n        thrown.expect(ValidationException.class);\n        thrown.expect(\n                containsCause(\n                        new ValidationException(\n                                \"Could not find and instantiate partitioner class 'abc'\")));\n\n        FactoryUtil.createTableSink(\n                null,\n                ObjectIdentifier.of(\"default\", \"default\", TABLE_NAME),\n                createSinkTable(sinkSchema, sinkOptions, Collections.emptyList()),\n                new Configuration(),\n                Thread.currentThread().getContextClassLoader(),\n                false);\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"73338e22bd0567169ce2636c8f9e3b87df783385","commitMessage":"@@@[FLINK-21913][table][connectors] Update DynamicTableFactory.Context to use ResolvedCatalogTable\n\nThis closes #15316.\n","date":"2021-03-24 04:35:35","modifiedFileCount":"45","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-06-30 17:00:16","codes":[{"authorDate":"2021-06-30 17:00:16","commitOrder":3,"curCode":"    public void testBadTableSinkForCustomPartitionerForPartitionedTable() {\n        ResolvedSchema sinkSchema = defaultSinkSchema();\n        Map<String, String> sinkOptions =\n                defaultTableOptions()\n                        .withTableOption(KinesisConnectorOptions.SINK_PARTITIONER, \"random\")\n                        .build();\n\n        thrown.expect(ValidationException.class);\n        thrown.expect(\n                containsCause(\n                        new ValidationException(\n                                String.format(\n                                        \"Cannot set %s option for a table defined with a PARTITIONED BY clause\",\n                                        KinesisConnectorOptions.SINK_PARTITIONER.key()))));\n\n        try {\n            createTableSink(sinkSchema, Arrays.asList(\"name\", \"curr_id\"), sinkOptions);\n        } catch (ValidationException e) {\n            throw (ValidationException) e.getCause(); \r\n        }\n    }\n","date":"2021-07-12 18:56:17","endLine":235,"groupId":"10540","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testBadTableSinkForCustomPartitionerForPartitionedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/40/1542490f95804c738ca952cb924fc0ac524ee9.src","preCode":"    public void testBadTableSinkForCustomPartitionerForPartitionedTable() {\n        ResolvedSchema sinkSchema = defaultSinkSchema();\n        Map<String, String> sinkOptions =\n                defaultTableOptions()\n                        .withTableOption(KinesisOptions.SINK_PARTITIONER, \"random\")\n                        .build();\n\n        thrown.expect(ValidationException.class);\n        thrown.expect(\n                containsCause(\n                        new ValidationException(\n                                String.format(\n                                        \"Cannot set %s option for a table defined with a PARTITIONED BY clause\",\n                                        KinesisOptions.SINK_PARTITIONER.key()))));\n\n        try {\n            createTableSink(sinkSchema, Arrays.asList(\"name\", \"curr_id\"), sinkOptions);\n        } catch (ValidationException e) {\n            throw (ValidationException) e.getCause(); \r\n        }\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2021-06-30 17:00:16","commitOrder":3,"curCode":"    public void testBadTableSinkForNonExistingPartitionerClass() {\n        ResolvedSchema sinkSchema = defaultSinkSchema();\n        Map<String, String> sinkOptions =\n                defaultTableOptions()\n                        .withTableOption(KinesisConnectorOptions.SINK_PARTITIONER, \"abc\")\n                        .build();\n\n        thrown.expect(ValidationException.class);\n        thrown.expect(\n                containsCause(\n                        new ValidationException(\n                                \"Could not find and instantiate partitioner class 'abc'\")));\n\n        createTableSink(sinkSchema, sinkOptions);\n    }\n","date":"2021-07-12 18:56:17","endLine":252,"groupId":"10540","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testBadTableSinkForNonExistingPartitionerClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/40/1542490f95804c738ca952cb924fc0ac524ee9.src","preCode":"    public void testBadTableSinkForNonExistingPartitionerClass() {\n        ResolvedSchema sinkSchema = defaultSinkSchema();\n        Map<String, String> sinkOptions =\n                defaultTableOptions()\n                        .withTableOption(KinesisOptions.SINK_PARTITIONER, \"abc\")\n                        .build();\n\n        thrown.expect(ValidationException.class);\n        thrown.expect(\n                containsCause(\n                        new ValidationException(\n                                \"Could not find and instantiate partitioner class 'abc'\")));\n\n        createTableSink(sinkSchema, sinkOptions);\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"faa854467bd621911c791604922fa1050b618c98","commitMessage":"@@@[FLINK-23064][connector-kinesis] Make connector options PublicEvolving\n","date":"2021-07-12 18:56:17","modifiedFileCount":"3","status":"M","submitter":"Ingo B?rk"}]
