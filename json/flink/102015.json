[{"authorTime":"2020-02-16 20:59:59","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":2,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"},{"authorDate":"2020-02-16 20:59:59","commitOrder":2,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fromArrowFieldToLogicalType(vector.getField())));\n\t\t}\n\t}\n","date":"2020-02-24 20:13:47","endLine":210,"groupId":"20466","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/72/212277d720f56c725b07c8d7cd459aac4aa979.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fromArrowFieldToLogicalType(vector.getField())));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"B"}],"commitId":"ca2bc35f0da5610c7153f40ca86d46d007d83845","commitMessage":"@@@[FLINK-16121][python] Introduce ArrowReader and ArrowWriter for reading and writing Arrow format data\n\nThis closes #11112.\n","date":"2020-02-24 20:13:47","modifiedFileCount":"1","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-13 20:40:50","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":3,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-13 20:40:50","commitOrder":3,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-24 14:19:59","endLine":210,"groupId":"20466","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5e/4c9c2b92548dfbfae784922823e18de98ae281.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fromArrowFieldToLogicalType(vector.getField())));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"f0777fe29dee40e3af8d949894955a7e21b7ef15","commitMessage":"@@@[FLINK-16608][python] Remove the method which derives the LogicalType from the Arrow ValueVector\n","date":"2020-03-24 14:19:59","modifiedFileCount":"11","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-12 14:48:20","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":4,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-12 14:48:20","commitOrder":4,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-24 14:19:59","endLine":224,"groupId":"20466","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/8d661f5c9521399f6fe06a908e9b38dbaadce9.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"09fcfab27ade7035b8d2d3453863e401ad760f43","commitMessage":"@@@[FLINK-16608][python] Support BooleanType in vectorized Python UDF\n","date":"2020-03-24 14:19:59","modifiedFileCount":"4","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-12 15:10:58","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":5,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-12 15:10:58","commitOrder":5,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-24 14:19:59","endLine":239,"groupId":"20466","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0b/29f3a59f8d1364d092d8f15166f097d269fca9.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"63ba2017915c59e782b3f1d13215ea91ee2a8315","commitMessage":"@@@[FLINK-16608][python] Support FloatType in vectorized Python UDF\n","date":"2020-03-24 14:19:59","modifiedFileCount":"4","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-12 15:23:38","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":6,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-12 15:23:38","commitOrder":6,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-24 14:19:59","endLine":253,"groupId":"20466","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/c64df033aa4422526eef43293481462011c273.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"180c2c9b8d163badbce8753478ee01a8d7bc9e0e","commitMessage":"@@@[FLINK-16608][python] Support DoubleType in vectorized Python UDF\n","date":"2020-03-24 14:19:59","modifiedFileCount":"4","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-13 14:34:12","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":7,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-13 14:34:12","commitOrder":7,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-24 14:19:59","endLine":267,"groupId":"20466","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/44551b3575f3a8f86e42ebc641a40bbd20506d.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"cf1d8c63c039c5ec715573982d1d45d3dd2cf5a6","commitMessage":"@@@[FLINK-16608][python] Support VarCharType in vectorized Python UDF\n","date":"2020-03-24 14:19:59","modifiedFileCount":"4","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-13 14:37:03","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":8,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-13 14:37:03","commitOrder":8,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-24 14:19:59","endLine":281,"groupId":"20466","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b9/c3426fc11f3e6a982aa62fa85403d9ae235ed9.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"6918ae75f61995daa1a9a7f4d86256f2944f8c4d","commitMessage":"@@@[FLINK-16608][python] Support VarBinaryType in vectorized Python UDF\n","date":"2020-03-24 14:19:59","modifiedFileCount":"5","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-13 14:37:36","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":9,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-13 14:37:36","commitOrder":9,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-24 14:19:59","endLine":299,"groupId":"20466","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9f/795d18902e6a5131fcee420f3205b8d357e0b8.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"}],"commitId":"27d854726bcf124f1c9448b60586c6e31fa16479","commitMessage":"@@@[FLINK-16608][python] Support DecimalType in vectorized Python UDF\n","date":"2020-03-24 14:19:59","modifiedFileCount":"6","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-13 14:37:56","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":10,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-13 14:37:56","commitOrder":10,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-24 14:19:59","endLine":314,"groupId":"20466","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/91/a331c6135105e947202ff7377ed95fd10c5e53.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"9992b3774f48e570193f567a05e91b0fd35f80c5","commitMessage":"@@@[FLINK-16608][python] Support DateType in vectorized Python UDF\n","date":"2020-03-24 14:19:59","modifiedFileCount":"6","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-14 17:45:46","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":11,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-14 17:45:46","commitOrder":11,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-24 14:19:59","endLine":336,"groupId":"20466","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4a/d3af7e7ceff5a640eb7df19478b6e752f9c80a.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"}],"commitId":"28bcbd0cf68a4e1820bc091a8be0417f060dd01c","commitMessage":"@@@[FLINK-16608][python] Support TimeType in vectorized Python UDF\n","date":"2020-03-24 14:19:59","modifiedFileCount":"4","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-03-28 23:04:03","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":12,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-03-28 23:04:03","commitOrder":12,"curCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else if (vector instanceof TimeStampVector && ((ArrowType.Timestamp) vector.getField().getType()).getTimezone() == null) {\n\t\t\treturn new ArrowTimestampColumnVector(vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-03-31 09:46:42","endLine":350,"groupId":"20466","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ac/92cf24859ca91310b1151c70fb5b7f485456af.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"919075a5f8aef717071bb9ea80947b7b8559e90d","commitMessage":"@@@[FLINK-16847][python] Support LocalZonedTimestampType in vectorized Python UDF\n","date":"2020-03-31 09:46:42","modifiedFileCount":"6","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-04-03 13:56:27","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":13,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-04-03 13:56:27","commitOrder":13,"curCode":"\tpublic static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else if (vector instanceof TimeStampVector && ((ArrowType.Timestamp) vector.getField().getType()).getTimezone() == null) {\n\t\t\treturn new ArrowTimestampColumnVector(vector);\n\t\t} else if (vector instanceof ListVector) {\n\t\t\tListVector listVector = (ListVector) vector;\n\t\t\treturn new ArrowArrayColumnVector(listVector,\n\t\t\t\tcreateColumnVector(listVector.getDataVector(), ((ArrayType) fieldType).getElementType()));\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-04-07 17:16:29","endLine":388,"groupId":"20466","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(FieldVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d5/8cd1a4f29a8ef4df53ce7391ea0ceef1ebcc19.src","preCode":"\tprivate static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else if (vector instanceof TimeStampVector && ((ArrowType.Timestamp) vector.getField().getType()).getTimezone() == null) {\n\t\t\treturn new ArrowTimestampColumnVector(vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"}],"commitId":"72a7ccc91a7c382a65c0d3af3986b9700e4eef97","commitMessage":"@@@[FLINK-16914][python] Support ArrayType in vectorized Python UDF\n","date":"2020-04-07 17:16:29","modifiedFileCount":"19","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-04-16 11:21:32","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":14,"curCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-02-15 14:07:13","endLine":78,"groupId":"20466","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/fd12b7d35a7b0015cfe0555ae875d6ff45245c.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-04-16 11:21:32","commitOrder":14,"curCode":"\tpublic static ColumnVector createColumnVector(ValueVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else if (vector instanceof TimeStampVector && ((ArrowType.Timestamp) vector.getField().getType()).getTimezone() == null) {\n\t\t\treturn new ArrowTimestampColumnVector(vector);\n\t\t} else if (vector instanceof ListVector) {\n\t\t\tListVector listVector = (ListVector) vector;\n\t\t\treturn new ArrowArrayColumnVector(listVector,\n\t\t\t\tcreateColumnVector(listVector.getDataVector(), ((ArrayType) fieldType).getElementType()));\n\t\t} else if (vector instanceof StructVector) {\n\t\t\tStructVector structVector = (StructVector) vector;\n\t\t\tColumnVector[] fieldColumns = new ColumnVector[structVector.size()];\n\t\t\tfor (int i = 0; i < fieldColumns.length; ++i) {\n\t\t\t\tfieldColumns[i] = createColumnVector(structVector.getVectorById(i), ((RowType) fieldType).getTypeAt(i));\n\t\t\t}\n\t\t\treturn new ArrowRowColumnVector(structVector, fieldColumns);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-04-16 11:21:32","endLine":432,"groupId":"20466","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(ValueVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f2/fd7c97a537460709bc41a5e8eb1a3244f06c96.src","preCode":"\tpublic static ColumnVector createColumnVector(FieldVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else if (vector instanceof TimeStampVector && ((ArrowType.Timestamp) vector.getField().getType()).getTimezone() == null) {\n\t\t\treturn new ArrowTimestampColumnVector(vector);\n\t\t} else if (vector instanceof ListVector) {\n\t\t\tListVector listVector = (ListVector) vector;\n\t\t\treturn new ArrowArrayColumnVector(listVector,\n\t\t\t\tcreateColumnVector(listVector.getDataVector(), ((ArrayType) fieldType).getElementType()));\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"M"}],"commitId":"177976b8941a4996d82efbcc1b60b8898aae0775","commitMessage":"@@@[FLINK-16983][python] Support RowType in vectorized Python UDF (#11656)\n\n","date":"2020-04-16 11:21:32","modifiedFileCount":"7","status":"M","submitter":"Dian Fu"},{"authorTime":"2020-04-16 11:21:32","codes":[{"authorDate":"2020-04-29 11:27:33","commitOrder":15,"curCode":"\tpublic static org.apache.flink.table.data.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","date":"2020-04-29 14:14:41","endLine":73,"groupId":"20466","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/816ef9761d3167e981ab154ae53e821ade055a.src","preCode":"\tpublic static org.apache.flink.table.dataformat.vector.ColumnVector createFlinkVector(\n\t\t\tColumnVector vector) {\n\t\tif (vector instanceof LongColumnVector) {\n\t\t\treturn new OrcNoHiveLongVector((LongColumnVector) vector);\n\t\t} else if (vector instanceof DoubleColumnVector) {\n\t\t\treturn new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n\t\t} else if (vector instanceof BytesColumnVector) {\n\t\t\treturn new OrcNoHiveBytesVector((BytesColumnVector) vector);\n\t\t} else if (vector instanceof DecimalColumnVector) {\n\t\t\treturn new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n\t\t} else if (vector instanceof TimestampColumnVector) {\n\t\t\treturn new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Unsupport vector: \" + vector.getClass().getName());\n\t\t}\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-04-16 11:21:32","commitOrder":15,"curCode":"\tpublic static ColumnVector createColumnVector(ValueVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else if (vector instanceof TimeStampVector && ((ArrowType.Timestamp) vector.getField().getType()).getTimezone() == null) {\n\t\t\treturn new ArrowTimestampColumnVector(vector);\n\t\t} else if (vector instanceof ListVector) {\n\t\t\tListVector listVector = (ListVector) vector;\n\t\t\treturn new ArrowArrayColumnVector(listVector,\n\t\t\t\tcreateColumnVector(listVector.getDataVector(), ((ArrayType) fieldType).getElementType()));\n\t\t} else if (vector instanceof StructVector) {\n\t\t\tStructVector structVector = (StructVector) vector;\n\t\t\tColumnVector[] fieldColumns = new ColumnVector[structVector.size()];\n\t\t\tfor (int i = 0; i < fieldColumns.length; ++i) {\n\t\t\t\tfieldColumns[i] = createColumnVector(structVector.getVectorById(i), ((RowType) fieldType).getTypeAt(i));\n\t\t\t}\n\t\t\treturn new ArrowRowColumnVector(structVector, fieldColumns);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-04-16 11:21:32","endLine":432,"groupId":"20466","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(ValueVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f2/fd7c97a537460709bc41a5e8eb1a3244f06c96.src","preCode":"\tpublic static ColumnVector createColumnVector(ValueVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else if (vector instanceof TimeStampVector && ((ArrowType.Timestamp) vector.getField().getType()).getTimezone() == null) {\n\t\t\treturn new ArrowTimestampColumnVector(vector);\n\t\t} else if (vector instanceof ListVector) {\n\t\t\tListVector listVector = (ListVector) vector;\n\t\t\treturn new ArrowArrayColumnVector(listVector,\n\t\t\t\tcreateColumnVector(listVector.getDataVector(), ((ArrayType) fieldType).getElementType()));\n\t\t} else if (vector instanceof StructVector) {\n\t\t\tStructVector structVector = (StructVector) vector;\n\t\t\tColumnVector[] fieldColumns = new ColumnVector[structVector.size()];\n\t\t\tfor (int i = 0; i < fieldColumns.length; ++i) {\n\t\t\t\tfieldColumns[i] = createColumnVector(structVector.getVectorById(i), ((RowType) fieldType).getTypeAt(i));\n\t\t\t}\n\t\t\treturn new ArrowRowColumnVector(structVector, fieldColumns);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"}],"commitId":"b8fa6f6b8f31ff5e092147b1c6dad8bba555f048","commitMessage":"@@@[FLINK-16996][orc] Refactor ORC connector to use new data structures\n\nThis closes #11925\n","date":"2020-04-29 14:14:41","modifiedFileCount":"16","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-04-16 11:21:32","codes":[{"authorDate":"2021-09-01 19:39:50","commitOrder":16,"curCode":"    public static org.apache.flink.table.data.vector.ColumnVector createFlinkVector(\n            ColumnVector vector) {\n        if (vector instanceof LongColumnVector) {\n            return new OrcNoHiveLongVector((LongColumnVector) vector);\n        } else if (vector instanceof DoubleColumnVector) {\n            return new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n        } else if (vector instanceof BytesColumnVector) {\n            return new OrcNoHiveBytesVector((BytesColumnVector) vector);\n        } else if (vector instanceof DecimalColumnVector) {\n            return new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n        } else if (vector instanceof TimestampColumnVector) {\n            return new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n        } else {\n            throw new UnsupportedOperationException(\n                    \"Unsupported vector: \" + vector.getClass().getName());\n        }\n    }\n","date":"2021-09-01 19:39:50","endLine":72,"groupId":"102015","id":29,"instanceNumber":1,"isCurCommit":1,"methodName":"createFlinkVector","params":"(ColumnVectorvector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/888e434eb6a33fe200216d9c5f2404c541193b.src","preCode":"    public static org.apache.flink.table.data.vector.ColumnVector createFlinkVector(\n            ColumnVector vector) {\n        if (vector instanceof LongColumnVector) {\n            return new OrcNoHiveLongVector((LongColumnVector) vector);\n        } else if (vector instanceof DoubleColumnVector) {\n            return new OrcNoHiveDoubleVector((DoubleColumnVector) vector);\n        } else if (vector instanceof BytesColumnVector) {\n            return new OrcNoHiveBytesVector((BytesColumnVector) vector);\n        } else if (vector instanceof DecimalColumnVector) {\n            return new OrcNoHiveDecimalVector((DecimalColumnVector) vector);\n        } else if (vector instanceof TimestampColumnVector) {\n            return new OrcNoHiveTimestampVector((TimestampColumnVector) vector);\n        } else {\n            throw new UnsupportedOperationException(\n                    \"Unsupport vector: \" + vector.getClass().getName());\n        }\n    }\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/vector/AbstractOrcNoHiveVector.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-04-16 11:21:32","commitOrder":16,"curCode":"\tpublic static ColumnVector createColumnVector(ValueVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else if (vector instanceof TimeStampVector && ((ArrowType.Timestamp) vector.getField().getType()).getTimezone() == null) {\n\t\t\treturn new ArrowTimestampColumnVector(vector);\n\t\t} else if (vector instanceof ListVector) {\n\t\t\tListVector listVector = (ListVector) vector;\n\t\t\treturn new ArrowArrayColumnVector(listVector,\n\t\t\t\tcreateColumnVector(listVector.getDataVector(), ((ArrayType) fieldType).getElementType()));\n\t\t} else if (vector instanceof StructVector) {\n\t\t\tStructVector structVector = (StructVector) vector;\n\t\t\tColumnVector[] fieldColumns = new ColumnVector[structVector.size()];\n\t\t\tfor (int i = 0; i < fieldColumns.length; ++i) {\n\t\t\t\tfieldColumns[i] = createColumnVector(structVector.getVectorById(i), ((RowType) fieldType).getTypeAt(i));\n\t\t\t}\n\t\t\treturn new ArrowRowColumnVector(structVector, fieldColumns);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","date":"2020-04-16 11:21:32","endLine":432,"groupId":"102015","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"createColumnVector","params":"(ValueVectorvector@LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f2/fd7c97a537460709bc41a5e8eb1a3244f06c96.src","preCode":"\tpublic static ColumnVector createColumnVector(ValueVector vector, LogicalType fieldType) {\n\t\tif (vector instanceof TinyIntVector) {\n\t\t\treturn new ArrowTinyIntColumnVector((TinyIntVector) vector);\n\t\t} else if (vector instanceof SmallIntVector) {\n\t\t\treturn new ArrowSmallIntColumnVector((SmallIntVector) vector);\n\t\t} else if (vector instanceof IntVector) {\n\t\t\treturn new ArrowIntColumnVector((IntVector) vector);\n\t\t} else if (vector instanceof BigIntVector) {\n\t\t\treturn new ArrowBigIntColumnVector((BigIntVector) vector);\n\t\t} else if (vector instanceof BitVector) {\n\t\t\treturn new ArrowBooleanColumnVector((BitVector) vector);\n\t\t} else if (vector instanceof Float4Vector) {\n\t\t\treturn new ArrowFloatColumnVector((Float4Vector) vector);\n\t\t} else if (vector instanceof Float8Vector) {\n\t\t\treturn new ArrowDoubleColumnVector((Float8Vector) vector);\n\t\t} else if (vector instanceof VarCharVector) {\n\t\t\treturn new ArrowVarCharColumnVector((VarCharVector) vector);\n\t\t} else if (vector instanceof VarBinaryVector) {\n\t\t\treturn new ArrowVarBinaryColumnVector((VarBinaryVector) vector);\n\t\t} else if (vector instanceof DecimalVector) {\n\t\t\treturn new ArrowDecimalColumnVector((DecimalVector) vector);\n\t\t} else if (vector instanceof DateDayVector) {\n\t\t\treturn new ArrowDateColumnVector((DateDayVector) vector);\n\t\t} else if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector ||\n\t\t\tvector instanceof TimeMicroVector || vector instanceof TimeNanoVector) {\n\t\t\treturn new ArrowTimeColumnVector(vector);\n\t\t} else if (vector instanceof TimeStampVector && ((ArrowType.Timestamp) vector.getField().getType()).getTimezone() == null) {\n\t\t\treturn new ArrowTimestampColumnVector(vector);\n\t\t} else if (vector instanceof ListVector) {\n\t\t\tListVector listVector = (ListVector) vector;\n\t\t\treturn new ArrowArrayColumnVector(listVector,\n\t\t\t\tcreateColumnVector(listVector.getDataVector(), ((ArrayType) fieldType).getElementType()));\n\t\t} else if (vector instanceof StructVector) {\n\t\t\tStructVector structVector = (StructVector) vector;\n\t\t\tColumnVector[] fieldColumns = new ColumnVector[structVector.size()];\n\t\t\tfor (int i = 0; i < fieldColumns.length; ++i) {\n\t\t\t\tfieldColumns[i] = createColumnVector(structVector.getVectorById(i), ((RowType) fieldType).getTypeAt(i));\n\t\t\t}\n\t\t\treturn new ArrowRowColumnVector(structVector, fieldColumns);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(String.format(\n\t\t\t\t\"Unsupported type %s.\", fieldType));\n\t\t}\n\t}\n","realPath":"flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"}],"commitId":"6628237f72d818baec094a2426c236480ee33380","commitMessage":"@@@[FLINK-23859] Fix typos\n\n","date":"2021-09-01 19:39:50","modifiedFileCount":"42","status":"M","submitter":"hapihu"}]
