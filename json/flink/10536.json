[{"authorTime":"2020-10-06 04:01:47","codes":[{"authorDate":"2020-10-06 04:01:47","commitOrder":1,"curCode":"\tpublic void testGoodPartitionerWithStaticPrefix() {\n\t\tCatalogTable table = createTable(defaultTableOptions(), PARTITION_BY_DATE);\n\n\t\t\r\n\t\tString year = String.valueOf(year(DATE_TIMES.get(0)));\n\t\tString month = String.valueOf(monthOfYear(DATE_TIMES.get(0)));\n\n\t\tfor (String delimiter : FIELD_DELIMITERS) {\n\t\t\tRowDataFieldsKinesisPartitioner partitioner =\n\t\t\t\tnew RowDataFieldsKinesisPartitioner(table, delimiter);\n\n\t\t\tpartitioner.setStaticFields(new HashMap<String, String>() {{\n\t\t\t\tput(\"year\", year);\n\t\t\t\tput(\"month\", month);\n\t\t\t}});\n\n\t\t\tfor (LocalDateTime time : DATE_TIMES) {\n\t\t\t\tString day = String.valueOf(dayOfMonth(time));\n\t\t\t\tString expectedKey = String.join(delimiter, year, month, day);\n\t\t\t\tString actualKey = partitioner.getPartitionId(createElement(time, IP));\n\n\t\t\t\tassertEquals(expectedKey, actualKey);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-11-08 06:08:34","endLine":173,"groupId":"29786","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGoodPartitionerWithStaticPrefix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9b/f33ad27f018bbedfcc14f9551160b4f68f3522.src","preCode":"\tpublic void testGoodPartitionerWithStaticPrefix() {\n\t\tCatalogTable table = createTable(defaultTableOptions(), PARTITION_BY_DATE);\n\n\t\t\r\n\t\tString year = String.valueOf(year(DATE_TIMES.get(0)));\n\t\tString month = String.valueOf(monthOfYear(DATE_TIMES.get(0)));\n\n\t\tfor (String delimiter : FIELD_DELIMITERS) {\n\t\t\tRowDataFieldsKinesisPartitioner partitioner =\n\t\t\t\tnew RowDataFieldsKinesisPartitioner(table, delimiter);\n\n\t\t\tpartitioner.setStaticFields(new HashMap<String, String>() {{\n\t\t\t\tput(\"year\", year);\n\t\t\t\tput(\"month\", month);\n\t\t\t}});\n\n\t\t\tfor (LocalDateTime time : DATE_TIMES) {\n\t\t\t\tString day = String.valueOf(dayOfMonth(time));\n\t\t\t\tString expectedKey = String.join(delimiter, year, month, day);\n\t\t\t\tString actualKey = partitioner.getPartitionId(createElement(time, IP));\n\n\t\t\t\tassertEquals(expectedKey, actualKey);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/RowDataFieldsKinesisPartitionerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2020-10-06 04:01:47","commitOrder":1,"curCode":"\tpublic void testGoodPartitionerWithStaticSuffix() {\n\t\tCatalogTable table = createTable(defaultTableOptions(), PARTITION_BY_DATE);\n\n\t\t\r\n\t\tString month = String.valueOf(monthOfYear(DATE_TIMES.get(0)));\n\t\tString day = String.valueOf(dayOfMonth(DATE_TIMES.get(0)));\n\n\t\tfor (String delimiter : FIELD_DELIMITERS) {\n\t\t\tRowDataFieldsKinesisPartitioner partitioner =\n\t\t\t\tnew RowDataFieldsKinesisPartitioner(table, delimiter);\n\n\t\t\tpartitioner.setStaticFields(new HashMap<String, String>() {{\n\t\t\t\tput(\"month\", month);\n\t\t\t\tput(\"day\", day);\n\t\t\t}});\n\n\t\t\tfor (LocalDateTime time : DATE_TIMES) {\n\t\t\t\tString year = String.valueOf(year(time));\n\t\t\t\tString expectedKey = String.join(delimiter, year, month, day);\n\t\t\t\tString actualKey = partitioner.getPartitionId(createElement(time, IP));\n\n\t\t\t\tassertEquals(expectedKey, actualKey);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-11-08 06:08:34","endLine":200,"groupId":"29787","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGoodPartitionerWithStaticSuffix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9b/f33ad27f018bbedfcc14f9551160b4f68f3522.src","preCode":"\tpublic void testGoodPartitionerWithStaticSuffix() {\n\t\tCatalogTable table = createTable(defaultTableOptions(), PARTITION_BY_DATE);\n\n\t\t\r\n\t\tString month = String.valueOf(monthOfYear(DATE_TIMES.get(0)));\n\t\tString day = String.valueOf(dayOfMonth(DATE_TIMES.get(0)));\n\n\t\tfor (String delimiter : FIELD_DELIMITERS) {\n\t\t\tRowDataFieldsKinesisPartitioner partitioner =\n\t\t\t\tnew RowDataFieldsKinesisPartitioner(table, delimiter);\n\n\t\t\tpartitioner.setStaticFields(new HashMap<String, String>() {{\n\t\t\t\tput(\"month\", month);\n\t\t\t\tput(\"day\", day);\n\t\t\t}});\n\n\t\t\tfor (LocalDateTime time : DATE_TIMES) {\n\t\t\t\tString year = String.valueOf(year(time));\n\t\t\t\tString expectedKey = String.join(delimiter, year, month, day);\n\t\t\t\tString actualKey = partitioner.getPartitionId(createElement(time, IP));\n\n\t\t\t\tassertEquals(expectedKey, actualKey);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/RowDataFieldsKinesisPartitionerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"B"}],"commitId":"322a357f96bf60d3a89fd39ab4ae972bb272a758","commitMessage":"@@@[FLINK-18858][connector-kinesis] Add Kinesis sources and sinks\n\nThis adds an implementation.  unit-tests.  and docs for the following factories:\n\n- KinesisDynamicSource - produces FlinkKinesisConsumer instances.\n- KinesisDynamicSink - produces FlinkKinesisProducer instances.\n- KinesisDynamicTableFactory - produces instances of the above two factories.\n\nThe following ability interfaces are supported:\n\n- KinesisDynamicSink implements SupportsPartitioning through a specialized KinesisPartitioner class.\n- KinesisDynamicSource implements SupportsReadingMetadata through a specialized KinesisDeserializationSchema class.\n\nThis closes #13770.\n","date":"2020-11-08 06:08:34","modifiedFileCount":"1","status":"B","submitter":"Alexander Alexandrov"},{"authorTime":"2021-03-18 19:13:17","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    public void testGoodPartitionerWithStaticPrefix() {\n        \r\n        String year = String.valueOf(year(DATE_TIMES.get(0)));\n        String month = String.valueOf(monthOfYear(DATE_TIMES.get(0)));\n\n        for (String delimiter : FIELD_DELIMITERS) {\n            RowDataFieldsKinesisPartitioner partitioner =\n                    new RowDataFieldsKinesisPartitioner(ROW_TYPE, PARTITION_BY_DATE, delimiter);\n\n            partitioner.setStaticFields(\n                    new HashMap<String, String>() {\n                        {\n                            put(\"year\", year);\n                            put(\"month\", month);\n                        }\n                    });\n\n            for (LocalDateTime time : DATE_TIMES) {\n                String day = String.valueOf(dayOfMonth(time));\n                String expectedKey = String.join(delimiter, year, month, day);\n                String actualKey = partitioner.getPartitionId(createElement(time, IP));\n\n                assertEquals(expectedKey, actualKey);\n            }\n        }\n    }\n","date":"2021-03-24 04:35:35","endLine":157,"groupId":"10536","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGoodPartitionerWithStaticPrefix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/68/8eb15fc8f1f81c1246c397ac38e26eeea3ca2f.src","preCode":"    public void testGoodPartitionerWithStaticPrefix() {\n        CatalogTable table = createTable(defaultTableOptions(), PARTITION_BY_DATE);\n\n        \r\n        String year = String.valueOf(year(DATE_TIMES.get(0)));\n        String month = String.valueOf(monthOfYear(DATE_TIMES.get(0)));\n\n        for (String delimiter : FIELD_DELIMITERS) {\n            RowDataFieldsKinesisPartitioner partitioner =\n                    new RowDataFieldsKinesisPartitioner(table, delimiter);\n\n            partitioner.setStaticFields(\n                    new HashMap<String, String>() {\n                        {\n                            put(\"year\", year);\n                            put(\"month\", month);\n                        }\n                    });\n\n            for (LocalDateTime time : DATE_TIMES) {\n                String day = String.valueOf(dayOfMonth(time));\n                String expectedKey = String.join(delimiter, year, month, day);\n                String actualKey = partitioner.getPartitionId(createElement(time, IP));\n\n                assertEquals(expectedKey, actualKey);\n            }\n        }\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/RowDataFieldsKinesisPartitionerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    public void testGoodPartitionerWithStaticSuffix() {\n        \r\n        String month = String.valueOf(monthOfYear(DATE_TIMES.get(0)));\n        String day = String.valueOf(dayOfMonth(DATE_TIMES.get(0)));\n\n        for (String delimiter : FIELD_DELIMITERS) {\n            RowDataFieldsKinesisPartitioner partitioner =\n                    new RowDataFieldsKinesisPartitioner(ROW_TYPE, PARTITION_BY_DATE, delimiter);\n\n            partitioner.setStaticFields(\n                    new HashMap<String, String>() {\n                        {\n                            put(\"month\", month);\n                            put(\"day\", day);\n                        }\n                    });\n\n            for (LocalDateTime time : DATE_TIMES) {\n                String year = String.valueOf(year(time));\n                String expectedKey = String.join(delimiter, year, month, day);\n                String actualKey = partitioner.getPartitionId(createElement(time, IP));\n\n                assertEquals(expectedKey, actualKey);\n            }\n        }\n    }\n","date":"2021-03-24 04:35:35","endLine":185,"groupId":"10536","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGoodPartitionerWithStaticSuffix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/68/8eb15fc8f1f81c1246c397ac38e26eeea3ca2f.src","preCode":"    public void testGoodPartitionerWithStaticSuffix() {\n        CatalogTable table = createTable(defaultTableOptions(), PARTITION_BY_DATE);\n\n        \r\n        String month = String.valueOf(monthOfYear(DATE_TIMES.get(0)));\n        String day = String.valueOf(dayOfMonth(DATE_TIMES.get(0)));\n\n        for (String delimiter : FIELD_DELIMITERS) {\n            RowDataFieldsKinesisPartitioner partitioner =\n                    new RowDataFieldsKinesisPartitioner(table, delimiter);\n\n            partitioner.setStaticFields(\n                    new HashMap<String, String>() {\n                        {\n                            put(\"month\", month);\n                            put(\"day\", day);\n                        }\n                    });\n\n            for (LocalDateTime time : DATE_TIMES) {\n                String year = String.valueOf(year(time));\n                String expectedKey = String.join(delimiter, year, month, day);\n                String actualKey = partitioner.getPartitionId(createElement(time, IP));\n\n                assertEquals(expectedKey, actualKey);\n            }\n        }\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/table/RowDataFieldsKinesisPartitionerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"73338e22bd0567169ce2636c8f9e3b87df783385","commitMessage":"@@@[FLINK-21913][table][connectors] Update DynamicTableFactory.Context to use ResolvedCatalogTable\n\nThis closes #15316.\n","date":"2021-03-24 04:35:35","modifiedFileCount":"45","status":"M","submitter":"Timo Walther"}]
