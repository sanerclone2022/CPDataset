[{"authorTime":"2020-06-17 21:32:10","codes":[{"authorDate":"2020-06-17 21:32:10","commitOrder":2,"curCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING())\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, new RowDataTypeInfo(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","date":"2020-06-17 21:47:28","endLine":267,"groupId":"31570","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerDeMultiRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fe/dfbeab4e47189d5b9eff84a7d15ce53c0fc150.src","preCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING())\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, new RowDataTypeInfo(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"MB"},{"authorDate":"2020-06-17 21:32:10","commitOrder":2,"curCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, new RowDataTypeInfo(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","date":"2020-06-17 21:47:28","endLine":366,"groupId":"48689","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerDeSQLTimestampFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fe/dfbeab4e47189d5b9eff84a7d15ce53c0fc150.src","preCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, new RowDataTypeInfo(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"B"}],"commitId":"c42a2f9cd6fcf50ff79f030f9b7c7bbe30d64a0f","commitMessage":"@@@[FLINK-18299][json] Fix the non SQL standard timestamp format in JSON format\n\n\nThe current timestamp format in JSON format is not SQL standard which uses RFC-3339. This commit changes the default behavior to parse/generate timestamp using SQL standard. Besides.  it introduces an option \"json.timestamp-format.standard\" to have the ability to fallback to ISO standard. \n\nThis closes #12661","date":"2020-06-17 21:47:28","modifiedFileCount":"19","status":"M","submitter":"Shengkai"},{"authorTime":"2020-06-23 18:07:17","codes":[{"authorDate":"2020-06-23 18:07:17","commitOrder":3,"curCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING())\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, WrapperTypeInfo.of(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","date":"2020-07-09 16:39:41","endLine":268,"groupId":"31570","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerDeMultiRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/b427f11170b327855483a64bacf2779354e83d.src","preCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING())\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, new RowDataTypeInfo(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2020-06-23 18:07:17","commitOrder":3,"curCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, WrapperTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","date":"2020-07-09 16:39:41","endLine":367,"groupId":"48689","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerDeSQLTimestampFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/b427f11170b327855483a64bacf2779354e83d.src","preCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, new RowDataTypeInfo(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"}],"commitId":"584dca179f178e977b07ba0c1ba2a38b0672113b","commitMessage":"@@@[FLINK-17000][table] Ensure that every logical type can be represented as TypeInformation\n\nIntroduces a WrapperTypeInfo that can replace most (if not all) TypeInformation classes\nin the Blink planner. It is backed by logical types and uses internal serializers.\n\nThis closes #12852.\n","date":"2020-07-09 16:39:41","modifiedFileCount":"21","status":"M","submitter":"Timo Walther"},{"authorTime":"2020-07-10 15:40:59","codes":[{"authorDate":"2020-07-10 15:40:59","commitOrder":4,"curCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING())\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","date":"2020-07-21 20:44:25","endLine":263,"groupId":"31570","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerDeMultiRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/dc120b02845e2a2b2755e67fcd44bcc58fc19f.src","preCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING())\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, WrapperTypeInfo.of(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2020-07-10 15:40:59","commitOrder":4,"curCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","date":"2020-07-21 20:44:25","endLine":369,"groupId":"48689","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerDeSQLTimestampFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/dc120b02845e2a2b2755e67fcd44bcc58fc19f.src","preCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, WrapperTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"}],"commitId":"758b1bdd57c46f51db7a2bc2e7fd73f4932fe0cf","commitMessage":"@@@[FLINK-18537][table] Replace RowDataTypeInfo with InternalTypeInfo\n\nTypeInformation is a legacy class for the sole purpose of creating a\nTypeSerializer. Instances of TypeInformation are not required in the\ntable ecosystem but sometimes enforced by interfaces of other modules\n(such as org.apache.flink.api.dag.Transformation). Therefore.  we\nintroduce InternalTypeInfo which acts as an adapter whenever type\ninformation is required. Instances of InternalTypeInfo should only\nbe created for passing it to interfaces that require type information.\nThe class should not be used as a replacement for a LogicalType.\nInformation such as the arity of a row type.  field types.  field names.  etc.\nshould be derived from the LogicalType directly.\n\nThis closes #12900.\n","date":"2020-07-21 20:44:25","modifiedFileCount":"90","status":"M","submitter":"Timo Walther"},{"authorTime":"2020-06-23 20:06:33","codes":[{"authorDate":"2020-07-10 15:40:59","commitOrder":5,"curCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING())\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","date":"2020-07-21 20:44:25","endLine":263,"groupId":"31570","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerDeMultiRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/dc120b02845e2a2b2755e67fcd44bcc58fc19f.src","preCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING())\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"N"},{"authorDate":"2020-06-23 20:06:33","commitOrder":5,"curCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9)),\n\t\t\tFIELD(\"timestamp_with_local_timezone3\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)),\n\t\t\tFIELD(\"timestamp_with_local_timezone9\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\troot.put(\"timestamp_with_local_timezone3\", \"1990-10-14 12:12:43.123Z\");\n\t\troot.put(\"timestamp_with_local_timezone9\", \"1990-10-14 12:12:43.123456789Z\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","date":"2020-07-22 10:45:47","endLine":384,"groupId":"15981","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerDeSQLTimestampFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7a/150c3551be797f82752498dea6fa2b539eaa33.src","preCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"be9be0ca0b84a902f8ece215f40c5900805e0fbf","commitMessage":"@@@[FLINK-18296][json] Add support for TIMESTAMP_WITH_LOCAL_ZONE type for Json format\n\nThis closes #12756\n","date":"2020-07-22 10:45:47","modifiedFileCount":"5","status":"M","submitter":"Shengkai"},{"authorTime":"2020-06-23 20:06:33","codes":[{"authorDate":"2020-10-23 23:03:44","commitOrder":6,"curCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING()),\n\t\t\tFIELD(\"f4\", MAP(STRING(), STRING())),\n\t\t\tFIELD(\"f5\", ARRAY(STRING())),\n\t\t\tFIELD(\"f6\", ROW(\n\t\t\t\tFIELD(\"f1\", STRING()),\n\t\t\t\tFIELD(\"f2\", INT())))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tObjectNode map = root.putObject(\"f4\");\n\t\t\tmap.put(\"hello1\", \"flink\");\n\t\t\tArrayNode array = root.putArray(\"f5\");\n\t\t\tarray.add(\"element1\");\n\t\t\tarray.add(\"element2\");\n\t\t\tObjectNode row = root.putObject(\"f6\");\n\t\t\trow.put(\"f1\", \"this is row1\");\n\t\t\trow.put(\"f2\", 12);\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tObjectNode map = root.putObject(\"f4\");\n\t\t\tmap.put(\"hello2\", \"json\");\n\t\t\tArrayNode array = root.putArray(\"f5\");\n\t\t\tarray.add(\"element3\");\n\t\t\tarray.add(\"element4\");\n\t\t\tObjectNode row = root.putObject(\"f6\");\n\t\t\trow.put(\"f1\", \"this is row2\");\n\t\t\trow.putNull(\"f2\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","date":"2020-11-04 20:44:09","endLine":302,"groupId":"31570","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerDeMultiRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bb/a9cc1d25c87cf503c8edabbcdafd345ca489ca.src","preCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING())\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2020-06-23 20:06:33","commitOrder":6,"curCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9)),\n\t\t\tFIELD(\"timestamp_with_local_timezone3\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)),\n\t\t\tFIELD(\"timestamp_with_local_timezone9\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\troot.put(\"timestamp_with_local_timezone3\", \"1990-10-14 12:12:43.123Z\");\n\t\troot.put(\"timestamp_with_local_timezone9\", \"1990-10-14 12:12:43.123456789Z\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","date":"2020-07-22 10:45:47","endLine":384,"groupId":"15981","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerDeSQLTimestampFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7a/150c3551be797f82752498dea6fa2b539eaa33.src","preCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9)),\n\t\t\tFIELD(\"timestamp_with_local_timezone3\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)),\n\t\t\tFIELD(\"timestamp_with_local_timezone9\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\troot.put(\"timestamp_with_local_timezone3\", \"1990-10-14 12:12:43.123Z\");\n\t\troot.put(\"timestamp_with_local_timezone9\", \"1990-10-14 12:12:43.123456789Z\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"N"}],"commitId":"b7487bd85bedea8bd50e706c253a61ebbcf8a8bc","commitMessage":"@@@[FLINK-19790][json] Clear reused ObjectNode's content for map converter in RowDataToJsonConverters\n\nThis closes #13777\n","date":"2020-11-04 20:44:09","modifiedFileCount":"2","status":"M","submitter":"Benchao Li"},{"authorTime":"2020-11-11 10:58:04","codes":[{"authorDate":"2020-11-11 10:58:04","commitOrder":7,"curCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING()),\n\t\t\tFIELD(\"f4\", MAP(STRING(), STRING())),\n\t\t\tFIELD(\"f5\", ARRAY(STRING())),\n\t\t\tFIELD(\"f6\", ROW(\n\t\t\t\tFIELD(\"f1\", STRING()),\n\t\t\t\tFIELD(\"f2\", INT())))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema =\n\t\t\tnew JsonRowDataSerializationSchema(\n\t\t\t\trowType, TimestampFormat.ISO_8601, JsonOptions.MapNullKeyMode.LITERAL, \"null\");\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tObjectNode map = root.putObject(\"f4\");\n\t\t\tmap.put(\"hello1\", \"flink\");\n\t\t\tArrayNode array = root.putArray(\"f5\");\n\t\t\tarray.add(\"element1\");\n\t\t\tarray.add(\"element2\");\n\t\t\tObjectNode row = root.putObject(\"f6\");\n\t\t\trow.put(\"f1\", \"this is row1\");\n\t\t\trow.put(\"f2\", 12);\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tObjectNode map = root.putObject(\"f4\");\n\t\t\tmap.put(\"hello2\", \"json\");\n\t\t\tArrayNode array = root.putArray(\"f5\");\n\t\t\tarray.add(\"element3\");\n\t\t\tarray.add(\"element4\");\n\t\t\tObjectNode row = root.putObject(\"f6\");\n\t\t\trow.put(\"f1\", \"this is row2\");\n\t\t\trow.putNull(\"f2\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","date":"2020-11-11 10:58:04","endLine":313,"groupId":"31570","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerDeMultiRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/08187df2551f5fb91b394f3c753757a3ea3a90.src","preCode":"\tpublic void testSerDeMultiRows() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"f1\", INT()),\n\t\t\tFIELD(\"f2\", BOOLEAN()),\n\t\t\tFIELD(\"f3\", STRING()),\n\t\t\tFIELD(\"f4\", MAP(STRING(), STRING())),\n\t\t\tFIELD(\"f5\", ARRAY(STRING())),\n\t\t\tFIELD(\"f6\", ROW(\n\t\t\t\tFIELD(\"f1\", STRING()),\n\t\t\t\tFIELD(\"f2\", INT())))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false,  TimestampFormat.ISO_8601);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.ISO_8601);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 1);\n\t\t\troot.put(\"f2\", true);\n\t\t\troot.put(\"f3\", \"str\");\n\t\t\tObjectNode map = root.putObject(\"f4\");\n\t\t\tmap.put(\"hello1\", \"flink\");\n\t\t\tArrayNode array = root.putArray(\"f5\");\n\t\t\tarray.add(\"element1\");\n\t\t\tarray.add(\"element2\");\n\t\t\tObjectNode row = root.putObject(\"f6\");\n\t\t\trow.put(\"f1\", \"this is row1\");\n\t\t\trow.put(\"f2\", 12);\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\n\t\t\r\n\t\t{\n\t\t\tObjectNode root = objectMapper.createObjectNode();\n\t\t\troot.put(\"f1\", 10);\n\t\t\troot.put(\"f2\", false);\n\t\t\troot.put(\"f3\", \"newStr\");\n\t\t\tObjectNode map = root.putObject(\"f4\");\n\t\t\tmap.put(\"hello2\", \"json\");\n\t\t\tArrayNode array = root.putArray(\"f5\");\n\t\t\tarray.add(\"element3\");\n\t\t\tarray.add(\"element4\");\n\t\t\tObjectNode row = root.putObject(\"f6\");\n\t\t\trow.put(\"f1\", \"this is row2\");\n\t\t\trow.putNull(\"f2\");\n\t\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\t\tassertEquals(new String(serializedJson), new String(actual));\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2020-11-11 10:58:04","commitOrder":7,"curCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception {\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9)),\n\t\t\tFIELD(\"timestamp_with_local_timezone3\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)),\n\t\t\tFIELD(\"timestamp_with_local_timezone9\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema =\n\t\t\tnew JsonRowDataSerializationSchema(\n\t\t\t\t\trowType, TimestampFormat.SQL, JsonOptions.MapNullKeyMode.LITERAL, \"null\");\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\troot.put(\"timestamp_with_local_timezone3\", \"1990-10-14 12:12:43.123Z\");\n\t\troot.put(\"timestamp_with_local_timezone9\", \"1990-10-14 12:12:43.123456789Z\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","date":"2020-11-11 10:58:04","endLine":427,"groupId":"31981","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerDeSQLTimestampFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/08187df2551f5fb91b394f3c753757a3ea3a90.src","preCode":"\tpublic void testSerDeSQLTimestampFormat() throws Exception{\n\t\tRowType rowType = (RowType) ROW(\n\t\t\tFIELD(\"timestamp3\", TIMESTAMP(3)),\n\t\t\tFIELD(\"timestamp9\", TIMESTAMP(9)),\n\t\t\tFIELD(\"timestamp_with_local_timezone3\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)),\n\t\t\tFIELD(\"timestamp_with_local_timezone9\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(9))\n\t\t).getLogicalType();\n\n\t\tJsonRowDataDeserializationSchema deserializationSchema = new JsonRowDataDeserializationSchema(\n\t\t\trowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n\t\tJsonRowDataSerializationSchema serializationSchema = new JsonRowDataSerializationSchema(rowType, TimestampFormat.SQL);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tObjectNode root = objectMapper.createObjectNode();\n\t\troot.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n\t\troot.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n\t\troot.put(\"timestamp_with_local_timezone3\", \"1990-10-14 12:12:43.123Z\");\n\t\troot.put(\"timestamp_with_local_timezone9\", \"1990-10-14 12:12:43.123456789Z\");\n\t\tbyte[] serializedJson = objectMapper.writeValueAsBytes(root);\n\t\tRowData rowData = deserializationSchema.deserialize(serializedJson);\n\t\tbyte[] actual = serializationSchema.serialize(rowData);\n\t\tassertEquals(new String(serializedJson), new String(actual));\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"ba7c232cd2519995b693376cdf08b028e8f2e260","commitMessage":"@@@[FLINK-19912][json] Fix JSON format fails to serialize map value with null keys\n\nThis closes #13972","date":"2020-11-11 10:58:04","modifiedFileCount":"19","status":"M","submitter":"wangxlong"},{"authorTime":"2021-01-13 20:15:49","codes":[{"authorDate":"2021-01-13 20:15:49","commitOrder":8,"curCode":"    public void testSerDeMultiRows() throws Exception {\n        RowType rowType =\n                (RowType)\n                        ROW(\n                                        FIELD(\"f1\", INT()),\n                                        FIELD(\"f2\", BOOLEAN()),\n                                        FIELD(\"f3\", STRING()),\n                                        FIELD(\"f4\", MAP(STRING(), STRING())),\n                                        FIELD(\"f5\", ARRAY(STRING())),\n                                        FIELD(\"f6\", ROW(FIELD(\"f1\", STRING()), FIELD(\"f2\", INT()))))\n                                .getLogicalType();\n\n        JsonRowDataDeserializationSchema deserializationSchema =\n                new JsonRowDataDeserializationSchema(\n                        rowType,\n                        InternalTypeInfo.of(rowType),\n                        false,\n                        false,\n                        TimestampFormat.ISO_8601);\n        JsonRowDataSerializationSchema serializationSchema =\n                new JsonRowDataSerializationSchema(\n                        rowType,\n                        TimestampFormat.ISO_8601,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        \r\n        {\n            ObjectNode root = objectMapper.createObjectNode();\n            root.put(\"f1\", 1);\n            root.put(\"f2\", true);\n            root.put(\"f3\", \"str\");\n            ObjectNode map = root.putObject(\"f4\");\n            map.put(\"hello1\", \"flink\");\n            ArrayNode array = root.putArray(\"f5\");\n            array.add(\"element1\");\n            array.add(\"element2\");\n            ObjectNode row = root.putObject(\"f6\");\n            row.put(\"f1\", \"this is row1\");\n            row.put(\"f2\", 12);\n            byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n            RowData rowData = deserializationSchema.deserialize(serializedJson);\n            byte[] actual = serializationSchema.serialize(rowData);\n            assertEquals(new String(serializedJson), new String(actual));\n        }\n\n        \r\n        {\n            ObjectNode root = objectMapper.createObjectNode();\n            root.put(\"f1\", 10);\n            root.put(\"f2\", false);\n            root.put(\"f3\", \"newStr\");\n            ObjectNode map = root.putObject(\"f4\");\n            map.put(\"hello2\", \"json\");\n            ArrayNode array = root.putArray(\"f5\");\n            array.add(\"element3\");\n            array.add(\"element4\");\n            ObjectNode row = root.putObject(\"f6\");\n            row.put(\"f1\", \"this is row2\");\n            row.putNull(\"f2\");\n            byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n            RowData rowData = deserializationSchema.deserialize(serializedJson);\n            byte[] actual = serializationSchema.serialize(rowData);\n            assertEquals(new String(serializedJson), new String(actual));\n        }\n    }\n","date":"2021-01-13 20:15:49","endLine":332,"groupId":"31570","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerDeMultiRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7a/565124f083a200f2908b0ff1c4e20fe0cc5b13.src","preCode":"    public void testSerDeMultiRows() throws Exception {\n        RowType rowType =\n                (RowType)\n                        ROW(\n                                        FIELD(\"f1\", INT()),\n                                        FIELD(\"f2\", BOOLEAN()),\n                                        FIELD(\"f3\", STRING()),\n                                        FIELD(\"f4\", MAP(STRING(), STRING())),\n                                        FIELD(\"f5\", ARRAY(STRING())),\n                                        FIELD(\"f6\", ROW(FIELD(\"f1\", STRING()), FIELD(\"f2\", INT()))))\n                                .getLogicalType();\n\n        JsonRowDataDeserializationSchema deserializationSchema =\n                new JsonRowDataDeserializationSchema(\n                        rowType,\n                        InternalTypeInfo.of(rowType),\n                        false,\n                        false,\n                        TimestampFormat.ISO_8601);\n        JsonRowDataSerializationSchema serializationSchema =\n                new JsonRowDataSerializationSchema(\n                        rowType,\n                        TimestampFormat.ISO_8601,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\");\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        \r\n        {\n            ObjectNode root = objectMapper.createObjectNode();\n            root.put(\"f1\", 1);\n            root.put(\"f2\", true);\n            root.put(\"f3\", \"str\");\n            ObjectNode map = root.putObject(\"f4\");\n            map.put(\"hello1\", \"flink\");\n            ArrayNode array = root.putArray(\"f5\");\n            array.add(\"element1\");\n            array.add(\"element2\");\n            ObjectNode row = root.putObject(\"f6\");\n            row.put(\"f1\", \"this is row1\");\n            row.put(\"f2\", 12);\n            byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n            RowData rowData = deserializationSchema.deserialize(serializedJson);\n            byte[] actual = serializationSchema.serialize(rowData);\n            assertEquals(new String(serializedJson), new String(actual));\n        }\n\n        \r\n        {\n            ObjectNode root = objectMapper.createObjectNode();\n            root.put(\"f1\", 10);\n            root.put(\"f2\", false);\n            root.put(\"f3\", \"newStr\");\n            ObjectNode map = root.putObject(\"f4\");\n            map.put(\"hello2\", \"json\");\n            ArrayNode array = root.putArray(\"f5\");\n            array.add(\"element3\");\n            array.add(\"element4\");\n            ObjectNode row = root.putObject(\"f6\");\n            row.put(\"f1\", \"this is row2\");\n            row.putNull(\"f2\");\n            byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n            RowData rowData = deserializationSchema.deserialize(serializedJson);\n            byte[] actual = serializationSchema.serialize(rowData);\n            assertEquals(new String(serializedJson), new String(actual));\n        }\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"},{"authorDate":"2021-01-13 20:15:49","commitOrder":8,"curCode":"    public void testSerDeSQLTimestampFormat() throws Exception {\n        RowType rowType =\n                (RowType)\n                        ROW(\n                                        FIELD(\"timestamp3\", TIMESTAMP(3)),\n                                        FIELD(\"timestamp9\", TIMESTAMP(9)),\n                                        FIELD(\n                                                \"timestamp_with_local_timezone3\",\n                                                TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)),\n                                        FIELD(\n                                                \"timestamp_with_local_timezone9\",\n                                                TIMESTAMP_WITH_LOCAL_TIME_ZONE(9)))\n                                .getLogicalType();\n\n        JsonRowDataDeserializationSchema deserializationSchema =\n                new JsonRowDataDeserializationSchema(\n                        rowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n        JsonRowDataSerializationSchema serializationSchema =\n                new JsonRowDataSerializationSchema(\n                        rowType,\n                        TimestampFormat.SQL,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        ObjectNode root = objectMapper.createObjectNode();\n        root.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n        root.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n        root.put(\"timestamp_with_local_timezone3\", \"1990-10-14 12:12:43.123Z\");\n        root.put(\"timestamp_with_local_timezone9\", \"1990-10-14 12:12:43.123456789Z\");\n        byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n        RowData rowData = deserializationSchema.deserialize(serializedJson);\n        byte[] actual = serializationSchema.serialize(rowData);\n        assertEquals(new String(serializedJson), new String(actual));\n    }\n","date":"2021-01-13 20:15:49","endLine":507,"groupId":"31981","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerDeSQLTimestampFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7a/565124f083a200f2908b0ff1c4e20fe0cc5b13.src","preCode":"    public void testSerDeSQLTimestampFormat() throws Exception {\n        RowType rowType =\n                (RowType)\n                        ROW(\n                                        FIELD(\"timestamp3\", TIMESTAMP(3)),\n                                        FIELD(\"timestamp9\", TIMESTAMP(9)),\n                                        FIELD(\n                                                \"timestamp_with_local_timezone3\",\n                                                TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)),\n                                        FIELD(\n                                                \"timestamp_with_local_timezone9\",\n                                                TIMESTAMP_WITH_LOCAL_TIME_ZONE(9)))\n                                .getLogicalType();\n\n        JsonRowDataDeserializationSchema deserializationSchema =\n                new JsonRowDataDeserializationSchema(\n                        rowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n        JsonRowDataSerializationSchema serializationSchema =\n                new JsonRowDataSerializationSchema(\n                        rowType, TimestampFormat.SQL, JsonOptions.MapNullKeyMode.LITERAL, \"null\");\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        ObjectNode root = objectMapper.createObjectNode();\n        root.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n        root.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n        root.put(\"timestamp_with_local_timezone3\", \"1990-10-14 12:12:43.123Z\");\n        root.put(\"timestamp_with_local_timezone9\", \"1990-10-14 12:12:43.123456789Z\");\n        byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n        RowData rowData = deserializationSchema.deserialize(serializedJson);\n        byte[] actual = serializationSchema.serialize(rowData);\n        assertEquals(new String(serializedJson), new String(actual));\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":471,"status":"M"}],"commitId":"5b9f4db30e5afcf23588f44da767aaa218df1207","commitMessage":"@@@[FLINK-20861][json] Introduce an option for serializing DECIMALs in JSON as plain number instead of scientific notation\n\nThis closes #14604","date":"2021-01-13 20:15:49","modifiedFileCount":"17","status":"M","submitter":"LM Kang"},{"authorTime":"2021-06-30 18:15:34","codes":[{"authorDate":"2021-06-30 18:15:34","commitOrder":9,"curCode":"    public void testSerDeMultiRows() throws Exception {\n        RowType rowType =\n                (RowType)\n                        ROW(\n                                        FIELD(\"f1\", INT()),\n                                        FIELD(\"f2\", BOOLEAN()),\n                                        FIELD(\"f3\", STRING()),\n                                        FIELD(\"f4\", MAP(STRING(), STRING())),\n                                        FIELD(\"f5\", ARRAY(STRING())),\n                                        FIELD(\"f6\", ROW(FIELD(\"f1\", STRING()), FIELD(\"f2\", INT()))))\n                                .getLogicalType();\n\n        JsonRowDataDeserializationSchema deserializationSchema =\n                new JsonRowDataDeserializationSchema(\n                        rowType,\n                        InternalTypeInfo.of(rowType),\n                        false,\n                        false,\n                        TimestampFormat.ISO_8601);\n        JsonRowDataSerializationSchema serializationSchema =\n                new JsonRowDataSerializationSchema(\n                        rowType,\n                        TimestampFormat.ISO_8601,\n                        JsonFormatOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        \r\n        {\n            ObjectNode root = objectMapper.createObjectNode();\n            root.put(\"f1\", 1);\n            root.put(\"f2\", true);\n            root.put(\"f3\", \"str\");\n            ObjectNode map = root.putObject(\"f4\");\n            map.put(\"hello1\", \"flink\");\n            ArrayNode array = root.putArray(\"f5\");\n            array.add(\"element1\");\n            array.add(\"element2\");\n            ObjectNode row = root.putObject(\"f6\");\n            row.put(\"f1\", \"this is row1\");\n            row.put(\"f2\", 12);\n            byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n            RowData rowData = deserializationSchema.deserialize(serializedJson);\n            byte[] actual = serializationSchema.serialize(rowData);\n            assertEquals(new String(serializedJson), new String(actual));\n        }\n\n        \r\n        {\n            ObjectNode root = objectMapper.createObjectNode();\n            root.put(\"f1\", 10);\n            root.put(\"f2\", false);\n            root.put(\"f3\", \"newStr\");\n            ObjectNode map = root.putObject(\"f4\");\n            map.put(\"hello2\", \"json\");\n            ArrayNode array = root.putArray(\"f5\");\n            array.add(\"element3\");\n            array.add(\"element4\");\n            ObjectNode row = root.putObject(\"f6\");\n            row.put(\"f1\", \"this is row2\");\n            row.putNull(\"f2\");\n            byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n            RowData rowData = deserializationSchema.deserialize(serializedJson);\n            byte[] actual = serializationSchema.serialize(rowData);\n            assertEquals(new String(serializedJson), new String(actual));\n        }\n    }\n","date":"2021-07-12 18:56:17","endLine":335,"groupId":"102143","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testSerDeMultiRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e1/4849b74deb983f47598fe9975db053be512872.src","preCode":"    public void testSerDeMultiRows() throws Exception {\n        RowType rowType =\n                (RowType)\n                        ROW(\n                                        FIELD(\"f1\", INT()),\n                                        FIELD(\"f2\", BOOLEAN()),\n                                        FIELD(\"f3\", STRING()),\n                                        FIELD(\"f4\", MAP(STRING(), STRING())),\n                                        FIELD(\"f5\", ARRAY(STRING())),\n                                        FIELD(\"f6\", ROW(FIELD(\"f1\", STRING()), FIELD(\"f2\", INT()))))\n                                .getLogicalType();\n\n        JsonRowDataDeserializationSchema deserializationSchema =\n                new JsonRowDataDeserializationSchema(\n                        rowType,\n                        InternalTypeInfo.of(rowType),\n                        false,\n                        false,\n                        TimestampFormat.ISO_8601);\n        JsonRowDataSerializationSchema serializationSchema =\n                new JsonRowDataSerializationSchema(\n                        rowType,\n                        TimestampFormat.ISO_8601,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        \r\n        {\n            ObjectNode root = objectMapper.createObjectNode();\n            root.put(\"f1\", 1);\n            root.put(\"f2\", true);\n            root.put(\"f3\", \"str\");\n            ObjectNode map = root.putObject(\"f4\");\n            map.put(\"hello1\", \"flink\");\n            ArrayNode array = root.putArray(\"f5\");\n            array.add(\"element1\");\n            array.add(\"element2\");\n            ObjectNode row = root.putObject(\"f6\");\n            row.put(\"f1\", \"this is row1\");\n            row.put(\"f2\", 12);\n            byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n            RowData rowData = deserializationSchema.deserialize(serializedJson);\n            byte[] actual = serializationSchema.serialize(rowData);\n            assertEquals(new String(serializedJson), new String(actual));\n        }\n\n        \r\n        {\n            ObjectNode root = objectMapper.createObjectNode();\n            root.put(\"f1\", 10);\n            root.put(\"f2\", false);\n            root.put(\"f3\", \"newStr\");\n            ObjectNode map = root.putObject(\"f4\");\n            map.put(\"hello2\", \"json\");\n            ArrayNode array = root.putArray(\"f5\");\n            array.add(\"element3\");\n            array.add(\"element4\");\n            ObjectNode row = root.putObject(\"f6\");\n            row.put(\"f1\", \"this is row2\");\n            row.putNull(\"f2\");\n            byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n            RowData rowData = deserializationSchema.deserialize(serializedJson);\n            byte[] actual = serializationSchema.serialize(rowData);\n            assertEquals(new String(serializedJson), new String(actual));\n        }\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2021-06-30 18:15:34","commitOrder":9,"curCode":"    public void testSerDeSQLTimestampFormat() throws Exception {\n        RowType rowType =\n                (RowType)\n                        ROW(\n                                        FIELD(\"timestamp3\", TIMESTAMP(3)),\n                                        FIELD(\"timestamp9\", TIMESTAMP(9)),\n                                        FIELD(\n                                                \"timestamp_with_local_timezone3\",\n                                                TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)),\n                                        FIELD(\n                                                \"timestamp_with_local_timezone9\",\n                                                TIMESTAMP_WITH_LOCAL_TIME_ZONE(9)))\n                                .getLogicalType();\n\n        JsonRowDataDeserializationSchema deserializationSchema =\n                new JsonRowDataDeserializationSchema(\n                        rowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n        JsonRowDataSerializationSchema serializationSchema =\n                new JsonRowDataSerializationSchema(\n                        rowType,\n                        TimestampFormat.SQL,\n                        JsonFormatOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        ObjectNode root = objectMapper.createObjectNode();\n        root.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n        root.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n        root.put(\"timestamp_with_local_timezone3\", \"1990-10-14 12:12:43.123Z\");\n        root.put(\"timestamp_with_local_timezone9\", \"1990-10-14 12:12:43.123456789Z\");\n        byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n        RowData rowData = deserializationSchema.deserialize(serializedJson);\n        byte[] actual = serializationSchema.serialize(rowData);\n        assertEquals(new String(serializedJson), new String(actual));\n    }\n","date":"2021-07-12 18:56:17","endLine":505,"groupId":"102143","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testSerDeSQLTimestampFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e1/4849b74deb983f47598fe9975db053be512872.src","preCode":"    public void testSerDeSQLTimestampFormat() throws Exception {\n        RowType rowType =\n                (RowType)\n                        ROW(\n                                        FIELD(\"timestamp3\", TIMESTAMP(3)),\n                                        FIELD(\"timestamp9\", TIMESTAMP(9)),\n                                        FIELD(\n                                                \"timestamp_with_local_timezone3\",\n                                                TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)),\n                                        FIELD(\n                                                \"timestamp_with_local_timezone9\",\n                                                TIMESTAMP_WITH_LOCAL_TIME_ZONE(9)))\n                                .getLogicalType();\n\n        JsonRowDataDeserializationSchema deserializationSchema =\n                new JsonRowDataDeserializationSchema(\n                        rowType, InternalTypeInfo.of(rowType), false, false, TimestampFormat.SQL);\n        JsonRowDataSerializationSchema serializationSchema =\n                new JsonRowDataSerializationSchema(\n                        rowType,\n                        TimestampFormat.SQL,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        ObjectNode root = objectMapper.createObjectNode();\n        root.put(\"timestamp3\", \"1990-10-14 12:12:43.123\");\n        root.put(\"timestamp9\", \"1990-10-14 12:12:43.123456789\");\n        root.put(\"timestamp_with_local_timezone3\", \"1990-10-14 12:12:43.123Z\");\n        root.put(\"timestamp_with_local_timezone9\", \"1990-10-14 12:12:43.123456789Z\");\n        byte[] serializedJson = objectMapper.writeValueAsBytes(root);\n        RowData rowData = deserializationSchema.deserialize(serializedJson);\n        byte[] actual = serializationSchema.serialize(rowData);\n        assertEquals(new String(serializedJson), new String(actual));\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":469,"status":"M"}],"commitId":"4fb9287e1d9da63d49d963e2120d79cf822f028c","commitMessage":"@@@[FLINK-23064][format-json] Make JsonOptions PublicEvolving\n","date":"2021-07-12 18:56:17","modifiedFileCount":"17","status":"M","submitter":"Ingo B?rk"}]
