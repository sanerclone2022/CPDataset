[{"authorTime":"2020-10-30 19:01:44","codes":[{"authorDate":"2020-10-30 19:01:44","commitOrder":2,"curCode":"\tpublic void testSubscribeToShardFailsWhenMaxRetriesExceeded() throws Exception {\n\t\tthrown.expect(RuntimeException.class);\n\t\tthrown.expectMessage(\"Maximum reties exceeded for SubscribeToShard. Failed 3 times.\");\n\n\t\tProperties efoProperties = createEfoProperties();\n\t\tefoProperties.setProperty(SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n\t\tFanOutRecordPublisherConfiguration configuration = new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n\t\tLimitExceededException retryableError = LimitExceededException.builder().build();\n\t\tSubscriptionErrorKinesisV2 kinesis = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n\t\tFullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n\t\tFanOutRecordPublisher recordPublisher = new FanOutRecordPublisher(latest(), \"arn\", createDummyStreamShardHandle(), kinesis, configuration, backoff);\n\n\t\tint count = 0;\n\t\twhile (recordPublisher.run(new TestConsumer()) == INCOMPLETE) {\n\t\t\tif (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-11-04 18:40:44","endLine":283,"groupId":"47759","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubscribeToShardFailsWhenMaxRetriesExceeded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/365329990c0a68167907fd9329c00c50b6edfa.src","preCode":"\tpublic void testSubscribeToShardFailsWhenMaxRetriesExceeded() throws Exception {\n\t\tthrown.expect(RuntimeException.class);\n\t\tthrown.expectMessage(\"Maximum reties exceeded for SubscribeToShard. Failed 3 times.\");\n\n\t\tProperties efoProperties = createEfoProperties();\n\t\tefoProperties.setProperty(SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n\t\tFanOutRecordPublisherConfiguration configuration = new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n\t\tLimitExceededException retryableError = LimitExceededException.builder().build();\n\t\tSubscriptionErrorKinesisV2 kinesis = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n\t\tFullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n\t\tFanOutRecordPublisher recordPublisher = new FanOutRecordPublisher(latest(), \"arn\", createDummyStreamShardHandle(), kinesis, configuration, backoff);\n\n\t\tint count = 0;\n\t\twhile (recordPublisher.run(new TestConsumer()) == INCOMPLETE) {\n\t\t\tif (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"MB"},{"authorDate":"2020-10-30 19:01:44","commitOrder":2,"curCode":"\tpublic void testSubscribeToShardIgnoresReadTimeoutInRetryPolicy() throws Exception {\n\t\tProperties efoProperties = createEfoProperties();\n\t\tefoProperties.setProperty(SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n\t\tFanOutRecordPublisherConfiguration configuration = new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n\t\tReadTimeoutException retryableError = ReadTimeoutException.INSTANCE;\n\t\tFakeKinesisFanOutBehavioursFactory.SubscriptionErrorKinesisV2 kinesis = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n\t\tFullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n\t\tFanOutRecordPublisher recordPublisher = new FanOutRecordPublisher(latest(), \"arn\", createDummyStreamShardHandle(), kinesis, configuration, backoff);\n\n\t\tint count = 0;\n\t\twhile (recordPublisher.run(new TestConsumer()) == RecordPublisher.RecordPublisherRunResult.INCOMPLETE) {\n\t\t\tif (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tverify(backoff, times(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES + 1)).calculateFullJitterBackoff(anyLong(), anyLong(), anyDouble(), anyInt());\n\t}\n","date":"2020-11-04 18:40:44","endLine":306,"groupId":"47763","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubscribeToShardIgnoresReadTimeoutInRetryPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/365329990c0a68167907fd9329c00c50b6edfa.src","preCode":"\tpublic void testSubscribeToShardIgnoresReadTimeoutInRetryPolicy() throws Exception {\n\t\tProperties efoProperties = createEfoProperties();\n\t\tefoProperties.setProperty(SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n\t\tFanOutRecordPublisherConfiguration configuration = new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n\t\tReadTimeoutException retryableError = ReadTimeoutException.INSTANCE;\n\t\tFakeKinesisFanOutBehavioursFactory.SubscriptionErrorKinesisV2 kinesis = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n\t\tFullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n\t\tFanOutRecordPublisher recordPublisher = new FanOutRecordPublisher(latest(), \"arn\", createDummyStreamShardHandle(), kinesis, configuration, backoff);\n\n\t\tint count = 0;\n\t\twhile (recordPublisher.run(new TestConsumer()) == RecordPublisher.RecordPublisherRunResult.INCOMPLETE) {\n\t\t\tif (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tverify(backoff, times(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES + 1)).calculateFullJitterBackoff(anyLong(), anyLong(), anyDouble(), anyInt());\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"}],"commitId":"325fb24b97de9286a8ede0280932637996ce3dd3","commitMessage":"@@@[FLINK-19899][Kinesis][EFO] Optimise error handling to use a separate exception delivery mechanism\n\n[FLINK-19898][Kinesis][EFO] Ignore ReadTimeoutException from SubcribeToShard retry policy\n\nThis closes #13886.\n","date":"2020-11-04 18:40:44","modifiedFileCount":"5","status":"M","submitter":"Danny Cranmer"},{"authorTime":"2020-10-30 19:01:44","codes":[{"authorDate":"2021-01-18 18:59:21","commitOrder":3,"curCode":"    public void testSubscribeToShardFailsWhenMaxRetriesExceeded() throws Exception {\n        thrown.expect(RuntimeException.class);\n        thrown.expectMessage(\"Maximum retries exceeded for SubscribeToShard. Failed 3 times.\");\n\n        Properties efoProperties = createEfoProperties();\n        efoProperties.setProperty(\n                SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n        FanOutRecordPublisherConfiguration configuration =\n                new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n        LimitExceededException retryableError = LimitExceededException.builder().build();\n        SubscriptionErrorKinesisV2 kinesis =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n        FullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n        FanOutRecordPublisher recordPublisher =\n                new FanOutRecordPublisher(\n                        latest(),\n                        \"arn\",\n                        createDummyStreamShardHandle(),\n                        kinesis,\n                        configuration,\n                        backoff);\n\n        int count = 0;\n        while (recordPublisher.run(new TestConsumer()) == INCOMPLETE) {\n            if (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n                break;\n            }\n        }\n    }\n","date":"2021-01-28 17:15:53","endLine":320,"groupId":"47759","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubscribeToShardFailsWhenMaxRetriesExceeded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/fec0da7908fb845467a97c186fdcd1f002da61.src","preCode":"    public void testSubscribeToShardFailsWhenMaxRetriesExceeded() throws Exception {\n        thrown.expect(RuntimeException.class);\n        thrown.expectMessage(\"Maximum reties exceeded for SubscribeToShard. Failed 3 times.\");\n\n        Properties efoProperties = createEfoProperties();\n        efoProperties.setProperty(\n                SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n        FanOutRecordPublisherConfiguration configuration =\n                new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n        LimitExceededException retryableError = LimitExceededException.builder().build();\n        SubscriptionErrorKinesisV2 kinesis =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n        FullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n        FanOutRecordPublisher recordPublisher =\n                new FanOutRecordPublisher(\n                        latest(),\n                        \"arn\",\n                        createDummyStreamShardHandle(),\n                        kinesis,\n                        configuration,\n                        backoff);\n\n        int count = 0;\n        while (recordPublisher.run(new TestConsumer()) == INCOMPLETE) {\n            if (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n                break;\n            }\n        }\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2020-10-30 19:01:44","commitOrder":3,"curCode":"\tpublic void testSubscribeToShardIgnoresReadTimeoutInRetryPolicy() throws Exception {\n\t\tProperties efoProperties = createEfoProperties();\n\t\tefoProperties.setProperty(SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n\t\tFanOutRecordPublisherConfiguration configuration = new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n\t\tReadTimeoutException retryableError = ReadTimeoutException.INSTANCE;\n\t\tFakeKinesisFanOutBehavioursFactory.SubscriptionErrorKinesisV2 kinesis = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n\t\tFullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n\t\tFanOutRecordPublisher recordPublisher = new FanOutRecordPublisher(latest(), \"arn\", createDummyStreamShardHandle(), kinesis, configuration, backoff);\n\n\t\tint count = 0;\n\t\twhile (recordPublisher.run(new TestConsumer()) == RecordPublisher.RecordPublisherRunResult.INCOMPLETE) {\n\t\t\tif (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tverify(backoff, times(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES + 1)).calculateFullJitterBackoff(anyLong(), anyLong(), anyDouble(), anyInt());\n\t}\n","date":"2020-11-04 18:40:44","endLine":306,"groupId":"47763","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubscribeToShardIgnoresReadTimeoutInRetryPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/365329990c0a68167907fd9329c00c50b6edfa.src","preCode":"\tpublic void testSubscribeToShardIgnoresReadTimeoutInRetryPolicy() throws Exception {\n\t\tProperties efoProperties = createEfoProperties();\n\t\tefoProperties.setProperty(SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n\t\tFanOutRecordPublisherConfiguration configuration = new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n\t\tReadTimeoutException retryableError = ReadTimeoutException.INSTANCE;\n\t\tFakeKinesisFanOutBehavioursFactory.SubscriptionErrorKinesisV2 kinesis = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n\t\tFullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n\t\tFanOutRecordPublisher recordPublisher = new FanOutRecordPublisher(latest(), \"arn\", createDummyStreamShardHandle(), kinesis, configuration, backoff);\n\n\t\tint count = 0;\n\t\twhile (recordPublisher.run(new TestConsumer()) == RecordPublisher.RecordPublisherRunResult.INCOMPLETE) {\n\t\t\tif (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tverify(backoff, times(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES + 1)).calculateFullJitterBackoff(anyLong(), anyLong(), anyDouble(), anyInt());\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"}],"commitId":"9ce6bf77f83f6c92c1edcc7ccffbaafedb0901d9","commitMessage":"@@@Fix typo in kinesis-connector module\n","date":"2021-01-28 17:15:53","modifiedFileCount":"2","status":"M","submitter":"Ammar Al-Batool"},{"authorTime":"2021-03-25 16:33:22","codes":[{"authorDate":"2021-01-18 18:59:21","commitOrder":4,"curCode":"    public void testSubscribeToShardFailsWhenMaxRetriesExceeded() throws Exception {\n        thrown.expect(RuntimeException.class);\n        thrown.expectMessage(\"Maximum retries exceeded for SubscribeToShard. Failed 3 times.\");\n\n        Properties efoProperties = createEfoProperties();\n        efoProperties.setProperty(\n                SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n        FanOutRecordPublisherConfiguration configuration =\n                new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n        LimitExceededException retryableError = LimitExceededException.builder().build();\n        SubscriptionErrorKinesisV2 kinesis =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n        FullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n        FanOutRecordPublisher recordPublisher =\n                new FanOutRecordPublisher(\n                        latest(),\n                        \"arn\",\n                        createDummyStreamShardHandle(),\n                        kinesis,\n                        configuration,\n                        backoff);\n\n        int count = 0;\n        while (recordPublisher.run(new TestConsumer()) == INCOMPLETE) {\n            if (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n                break;\n            }\n        }\n    }\n","date":"2021-01-28 17:15:53","endLine":320,"groupId":"10593","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubscribeToShardFailsWhenMaxRetriesExceeded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/fec0da7908fb845467a97c186fdcd1f002da61.src","preCode":"    public void testSubscribeToShardFailsWhenMaxRetriesExceeded() throws Exception {\n        thrown.expect(RuntimeException.class);\n        thrown.expectMessage(\"Maximum retries exceeded for SubscribeToShard. Failed 3 times.\");\n\n        Properties efoProperties = createEfoProperties();\n        efoProperties.setProperty(\n                SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n        FanOutRecordPublisherConfiguration configuration =\n                new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n        LimitExceededException retryableError = LimitExceededException.builder().build();\n        SubscriptionErrorKinesisV2 kinesis =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n        FullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n        FanOutRecordPublisher recordPublisher =\n                new FanOutRecordPublisher(\n                        latest(),\n                        \"arn\",\n                        createDummyStreamShardHandle(),\n                        kinesis,\n                        configuration,\n                        backoff);\n\n        int count = 0;\n        while (recordPublisher.run(new TestConsumer()) == INCOMPLETE) {\n            if (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n                break;\n            }\n        }\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"},{"authorDate":"2021-03-25 16:33:22","commitOrder":4,"curCode":"    public void testSubscribeToShardIgnoresReadTimeoutInRetryPolicy() throws Exception {\n        Properties efoProperties = createEfoProperties();\n        efoProperties.setProperty(\n                SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n        FanOutRecordPublisherConfiguration configuration =\n                new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n        ReadTimeoutException retryableError = ReadTimeoutException.INSTANCE;\n        FakeKinesisFanOutBehavioursFactory.SubscriptionErrorKinesisV2 kinesis =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n        FullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n        FanOutRecordPublisher recordPublisher =\n                new FanOutRecordPublisher(\n                        latest(),\n                        \"arn\",\n                        createDummyStreamShardHandle(),\n                        kinesis,\n                        configuration,\n                        backoff);\n\n        int count = 0;\n        while (recordPublisher.run(new TestConsumer()) == RecordPublisherRunResult.INCOMPLETE) {\n            if (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n                break;\n            }\n        }\n\n        \r\n        verify(backoff, times(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES + 1))\n                .calculateFullJitterBackoff(anyLong(), anyLong(), anyDouble(), anyInt());\n    }\n","date":"2021-03-25 21:51:33","endLine":357,"groupId":"10593","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubscribeToShardIgnoresReadTimeoutInRetryPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/cba554eb3eba94b970d784d358e1c14b092990.src","preCode":"    public void testSubscribeToShardIgnoresReadTimeoutInRetryPolicy() throws Exception {\n        Properties efoProperties = createEfoProperties();\n        efoProperties.setProperty(\n                SUBSCRIBE_TO_SHARD_RETRIES, String.valueOf(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES));\n        FanOutRecordPublisherConfiguration configuration =\n                new FanOutRecordPublisherConfiguration(efoProperties, emptyList());\n\n        ReadTimeoutException retryableError = ReadTimeoutException.INSTANCE;\n        FakeKinesisFanOutBehavioursFactory.SubscriptionErrorKinesisV2 kinesis =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(retryableError);\n        FullJitterBackoff backoff = mock(FullJitterBackoff.class);\n\n        FanOutRecordPublisher recordPublisher =\n                new FanOutRecordPublisher(\n                        latest(),\n                        \"arn\",\n                        createDummyStreamShardHandle(),\n                        kinesis,\n                        configuration,\n                        backoff);\n\n        int count = 0;\n        while (recordPublisher.run(new TestConsumer())\n                == RecordPublisher.RecordPublisherRunResult.INCOMPLETE) {\n            if (++count > EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES) {\n                break;\n            }\n        }\n\n        \r\n        verify(backoff, times(EXPECTED_SUBSCRIBE_TO_SHARD_RETRIES + 1))\n                .calculateFullJitterBackoff(anyLong(), anyLong(), anyDouble(), anyInt());\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"888551ef0a41f8d2b53d2e92e1b1f9705cc2493f","commitMessage":"@@@[FLINK-21933][kinesis] EFO consumer treats interrupts as retryable exceptions (#15347)\n\n","date":"2021-03-25 21:51:33","modifiedFileCount":"10","status":"M","submitter":"Danny Cranmer"}]
