[{"authorTime":"2017-10-18 21:01:37","codes":[{"authorDate":"2017-10-18 21:01:37","commitOrder":1,"curCode":"\tpublic void testRestore() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(\n\t\t\tnew HashSet<OperatorID>() {{\n\t\t\t\tadd(headOperatorID);\n\t\t\t\tadd(tailOperatorID);\n\t\t\t}},\n\t\t\tRESTORED_OPERATORS);\n\t}\n","date":"2017-10-24 22:13:25","endLine":95,"groupId":"22298","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/240976aa0f6c46217fc71fbae153ba8d8f6a3e.src","preCode":"\tpublic void testRestore() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(\n\t\t\tnew HashSet<OperatorID>() {{\n\t\t\t\tadd(headOperatorID);\n\t\t\t\tadd(tailOperatorID);\n\t\t\t}},\n\t\t\tRESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2017-10-18 21:01:37","commitOrder":1,"curCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\t\r\n\t\tOperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(\n\t\t\tnew OperatorInstanceID(0, headOperatorID),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(\n\t\t\tnew HashSet<OperatorID>() {{\n\t\t\t\tadd(headOperatorID);\n\t\t\t\tadd(tailOperatorID);\n\t\t\t}},\n\t\t\tRESTORED_OPERATORS);\n\t}\n","date":"2017-10-24 22:13:25","endLine":192,"groupId":"22301","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestoreAfterScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/240976aa0f6c46217fc71fbae153ba8d8f6a3e.src","preCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\t\r\n\t\tOperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(\n\t\t\tnew OperatorInstanceID(0, headOperatorID),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(\n\t\t\tnew HashSet<OperatorID>() {{\n\t\t\t\tadd(headOperatorID);\n\t\t\t\tadd(tailOperatorID);\n\t\t\t}},\n\t\t\tRESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"}],"commitId":"bc32991a358889464a5b596684aa40ff3e31acbe","commitMessage":"@@@[FLINK-7623][tests] Add tests verifying isRestored flag\n","date":"2017-10-24 22:13:25","modifiedFileCount":"1","status":"B","submitter":"Piotr Nowojski"},{"authorTime":"2017-03-15 11:13:41","codes":[{"authorDate":"2017-03-15 11:13:41","commitOrder":2,"curCode":"\tpublic void testRestore() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","date":"2018-01-10 01:30:59","endLine":91,"groupId":"22298","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b2/41d05daa5da680b17230cae0c577e61debb751.src","preCode":"\tpublic void testRestore() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(\n\t\t\tnew HashSet<OperatorID>() {{\n\t\t\t\tadd(headOperatorID);\n\t\t\t\tadd(tailOperatorID);\n\t\t\t}},\n\t\t\tRESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2017-03-15 11:13:41","commitOrder":2,"curCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\t\r\n\t\tOperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(\n\t\t\tnew OperatorInstanceID(0, headOperatorID),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","date":"2018-01-10 01:30:59","endLine":175,"groupId":"22301","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestoreAfterScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b2/41d05daa5da680b17230cae0c577e61debb751.src","preCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\t\r\n\t\tOperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(\n\t\t\tnew OperatorInstanceID(0, headOperatorID),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(\n\t\t\tnew HashSet<OperatorID>() {{\n\t\t\t\tadd(headOperatorID);\n\t\t\t\tadd(tailOperatorID);\n\t\t\t}},\n\t\t\tRESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"6033de01ae620ebc9735c552ce85ccd1687793d7","commitMessage":"@@@[FLINK-5982] [runtime] Refactor AbstractInvokable and StatefulTask to accept Environment and State in the constructor.\n\nThis is the first steo towards implementing an RAII pattern for all task runtime classes.\n\nThis closes #3633\n","date":"2018-01-10 01:30:59","modifiedFileCount":"74","status":"M","submitter":"Tony Wei"},{"authorTime":"2017-09-27 21:10:52","codes":[{"authorDate":"2017-09-27 21:10:52","commitOrder":3,"curCode":"\tpublic void testRestore() throws Exception {\n\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","date":"2018-01-22 21:06:37","endLine":96,"groupId":"36137","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/745e3430fc964572a8408117c085900b4330a8.src","preCode":"\tpublic void testRestore() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2017-09-27 21:10:52","commitOrder":3,"curCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\t\r\n\t\tOperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(\n\t\t\tnew OperatorInstanceID(0, headOperatorID),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap());\n\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","date":"2018-01-22 21:06:37","endLine":182,"groupId":"15302","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestoreAfterScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/745e3430fc964572a8408117c085900b4330a8.src","preCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tAcknowledgeStreamMockEnvironment environment1 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tassertEquals(2, environment1.getCheckpointStateHandles().getSubtaskStateMappings().size());\n\n\t\t\r\n\t\tOperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(\n\t\t\tnew OperatorInstanceID(0, headOperatorID),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap());\n\n\t\tTaskStateSnapshot stateHandles = environment1.getCheckpointStateHandles();\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tAcknowledgeStreamMockEnvironment environment2 = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(stateHandles));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"517b3f87214168a445b5751cda210ecf3a292fd6","commitMessage":"@@@[FLINK-7720] [checkpoints] Centralize creation of backends and state related resources\n\nThis closes #4745.\n","date":"2018-01-22 21:06:37","modifiedFileCount":"69","status":"M","submitter":"Stefan Richter"},{"authorTime":"2020-03-20 00:35:24","codes":[{"authorDate":"2017-09-27 21:10:52","commitOrder":4,"curCode":"\tpublic void testRestore() throws Exception {\n\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","date":"2018-01-22 21:06:37","endLine":96,"groupId":"36137","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/745e3430fc964572a8408117c085900b4330a8.src","preCode":"\tpublic void testRestore() throws Exception {\n\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2020-03-20 00:35:24","commitOrder":4,"curCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\t\r\n\t\tOperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(\n\t\t\tnew OperatorInstanceID(0, headOperatorID),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap());\n\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","date":"2020-04-08 20:45:23","endLine":184,"groupId":"15302","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestoreAfterScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/2bf4d6d88ef57b3cafb9f53e381910d92e96a7.src","preCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\t\r\n\t\tOperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(\n\t\t\tnew OperatorInstanceID(0, headOperatorID),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap());\n\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"d6982e6a61b586314a19c1551b4dc84f93d518b3","commitMessage":"@@@[FLINK-16513][checkpointing] add task channel state for unaligned checkpoints\n\nChanges:\n1. add channel state metadata to OperatorSubtaskState\n2. adjust StateAssignmentOperation\n3. adjust metadata serialization\n4. adjust related classes\n\nThis closes #11491.\n","date":"2020-04-08 20:45:23","modifiedFileCount":"35","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2020-10-22 06:30:26","codes":[{"authorDate":"2017-09-27 21:10:52","commitOrder":5,"curCode":"\tpublic void testRestore() throws Exception {\n\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","date":"2018-01-22 21:06:37","endLine":96,"groupId":"36137","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/745e3430fc964572a8408117c085900b4330a8.src","preCode":"\tpublic void testRestore() throws Exception {\n\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2020-10-22 06:30:26","commitOrder":5,"curCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\t\r\n\n\t\tOperatorSubtaskState emptyHeadOperatorState = OperatorSubtaskState.builder().build();\n\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","date":"2020-11-06 15:03:57","endLine":176,"groupId":"9125","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestoreAfterScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/89e624f03487e19fafe67b01433196ec135796.src","preCode":"\tpublic void testRestoreAfterScaleUp() throws Exception {\n\t\tOperatorID headOperatorID = new OperatorID(42L, 42L);\n\t\tOperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n\t\tJobManagerTaskRestore restore = createRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.empty());\n\n\t\tTaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n\t\tassertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n\t\t\r\n\t\tOperatorSubtaskState emptyHeadOperatorState = StateAssignmentOperation.operatorSubtaskStateFrom(\n\t\t\tnew OperatorInstanceID(0, headOperatorID),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap(),\n\t\t\tCollections.emptyMap());\n\n\t\tstateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n\t\tcreateRunAndCheckpointOperatorChain(\n\t\t\theadOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\ttailOperatorID,\n\t\t\tnew CounterOperator(),\n\t\t\tOptional.of(restore));\n\n\t\tassertEquals(new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"32a2dedba276fcc270b236ea8343746c5b733a44","commitMessage":"@@@[FLINK-19533][checkpoint] Introduce builder for OperatorSubtaskState.\n\nThe builder will make it easier to add more fields to OperatorSubtaskState in future commits.\n","date":"2020-11-06 15:03:57","modifiedFileCount":"38","status":"M","submitter":"Arvid Heise"},{"authorTime":"2021-08-24 22:24:01","codes":[{"authorDate":"2021-08-24 22:24:01","commitOrder":6,"curCode":"    public void testRestore() throws Exception {\n\n        OperatorID headOperatorID = new OperatorID(42L, 42L);\n        OperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n        JobManagerTaskRestore restore =\n                createRunAndCheckpointOperatorChain(\n                        headOperatorID,\n                        new CounterOperator(),\n                        tailOperatorID,\n                        new CounterOperator(),\n                        Optional.empty());\n\n        TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n        assertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n        createRunAndCheckpointOperatorChain(\n                headOperatorID,\n                new CounterOperator(),\n                tailOperatorID,\n                new CounterOperator(),\n                Optional.of(restore));\n\n        assertEquals(\n                new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)),\n                RESTORED_OPERATORS.keySet());\n        assertThat(\n                new HashSet<>(RESTORED_OPERATORS.values()),\n                contains(restore.getRestoreCheckpointId()));\n    }\n","date":"2021-09-01 14:27:59","endLine":101,"groupId":"102523","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/cbff187522f461d6a684817ff9a12dc7c3e75c.src","preCode":"    public void testRestore() throws Exception {\n\n        OperatorID headOperatorID = new OperatorID(42L, 42L);\n        OperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n        JobManagerTaskRestore restore =\n                createRunAndCheckpointOperatorChain(\n                        headOperatorID,\n                        new CounterOperator(),\n                        tailOperatorID,\n                        new CounterOperator(),\n                        Optional.empty());\n\n        TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n        assertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n        createRunAndCheckpointOperatorChain(\n                headOperatorID,\n                new CounterOperator(),\n                tailOperatorID,\n                new CounterOperator(),\n                Optional.of(restore));\n\n        assertEquals(\n                new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-08-24 22:24:01","commitOrder":6,"curCode":"    public void testRestoreAfterScaleUp() throws Exception {\n        OperatorID headOperatorID = new OperatorID(42L, 42L);\n        OperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n        JobManagerTaskRestore restore =\n                createRunAndCheckpointOperatorChain(\n                        headOperatorID,\n                        new CounterOperator(),\n                        tailOperatorID,\n                        new CounterOperator(),\n                        Optional.empty());\n\n        TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n        assertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n        \r\n\n        OperatorSubtaskState emptyHeadOperatorState = OperatorSubtaskState.builder().build();\n\n        stateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n        createRunAndCheckpointOperatorChain(\n                headOperatorID,\n                new CounterOperator(),\n                tailOperatorID,\n                new CounterOperator(),\n                Optional.of(restore));\n\n        assertEquals(\n                new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)),\n                RESTORED_OPERATORS.keySet());\n        assertThat(\n                new HashSet<>(RESTORED_OPERATORS.values()),\n                contains(restore.getRestoreCheckpointId()));\n    }\n","date":"2021-09-01 14:27:59","endLine":197,"groupId":"102523","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testRestoreAfterScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/cbff187522f461d6a684817ff9a12dc7c3e75c.src","preCode":"    public void testRestoreAfterScaleUp() throws Exception {\n        OperatorID headOperatorID = new OperatorID(42L, 42L);\n        OperatorID tailOperatorID = new OperatorID(44L, 44L);\n\n        JobManagerTaskRestore restore =\n                createRunAndCheckpointOperatorChain(\n                        headOperatorID,\n                        new CounterOperator(),\n                        tailOperatorID,\n                        new CounterOperator(),\n                        Optional.empty());\n\n        TaskStateSnapshot stateHandles = restore.getTaskStateSnapshot();\n\n        assertEquals(2, stateHandles.getSubtaskStateMappings().size());\n\n        \r\n\n        OperatorSubtaskState emptyHeadOperatorState = OperatorSubtaskState.builder().build();\n\n        stateHandles.putSubtaskStateByOperatorID(headOperatorID, emptyHeadOperatorState);\n\n        createRunAndCheckpointOperatorChain(\n                headOperatorID,\n                new CounterOperator(),\n                tailOperatorID,\n                new CounterOperator(),\n                Optional.of(restore));\n\n        assertEquals(\n                new HashSet<>(Arrays.asList(headOperatorID, tailOperatorID)), RESTORED_OPERATORS);\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/RestoreStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"f01c636aa4871590fb44f09e63aa97216277ff29","commitMessage":"@@@[FLINK-23854][datastream] Expose the restored checkpoint id in ManagedInitializationContext.\n","date":"2021-09-01 14:27:59","modifiedFileCount":"21","status":"M","submitter":"Arvid Heise"}]
