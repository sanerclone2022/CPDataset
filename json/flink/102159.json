[{"authorTime":"2020-08-12 11:11:58","codes":[{"authorDate":"2020-05-15 23:07:58","commitOrder":2,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\t\r\n\t\t\t\tArrayData old = row.getArray(1);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\t\r\n\t\t\t\t\tGenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n\t\t\t\t\tGenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n\t\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\t\tout.collect(before);\n\t\t\t\t\tout.collect(after);\n\t\t\t\t}\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.DELETE);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-05-15 23:07:58","endLine":148,"groupId":"14912","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/03d041e2a9d8220c6d34b1f2ce9159dd511bbb.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\t\r\n\t\t\t\tArrayData old = row.getArray(1);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\t\r\n\t\t\t\t\tGenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n\t\t\t\t\tGenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n\t\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\t\tout.collect(before);\n\t\t\t\t\tout.collect(after);\n\t\t\t\t}\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.DELETE);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"NB"},{"authorDate":"2020-08-12 11:11:58","commitOrder":2,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-12 11:11:58","endLine":139,"groupId":"35191","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/4ab559762eefc0163dfbc761c4abb5299f2fcb.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"2d75031d3d6bdc11c7b3fcf25cd43f396677003c","commitMessage":"@@@[FLINK-18844][json][maxwell] Support maxwell-json format to read Maxwell changelogs\n\nThis closes #13090","date":"2020-08-12 11:11:58","modifiedFileCount":"0","status":"M","submitter":"dijie"},{"authorTime":"2020-08-12 11:11:58","codes":[{"authorDate":"2020-09-18 15:52:20","commitOrder":3,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tif (database != null) {\n\t\t\t\tString currentDatabase = row.getString(3).toString();\n\t\t\t\tif (!database.equals(currentDatabase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (table != null) {\n\t\t\t\tString currentTable = row.getString(4).toString();\n\t\t\t\tif (!table.equals(currentTable)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\t\r\n\t\t\t\tArrayData old = row.getArray(1);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\t\r\n\t\t\t\t\tGenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n\t\t\t\t\tGenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n\t\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\t\tout.collect(before);\n\t\t\t\t\tout.collect(after);\n\t\t\t\t}\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.DELETE);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-09-18 15:52:20","endLine":239,"groupId":"14912","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/292fc2503a46c7728d684f736d08199c072730.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\t\r\n\t\t\t\tArrayData old = row.getArray(1);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\t\r\n\t\t\t\t\tGenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n\t\t\t\t\tGenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n\t\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\t\tout.collect(before);\n\t\t\t\t\tout.collect(after);\n\t\t\t\t}\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.DELETE);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2020-08-12 11:11:58","commitOrder":3,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-12 11:11:58","endLine":139,"groupId":"35191","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/4ab559762eefc0163dfbc761c4abb5299f2fcb.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"a3b4c93f82bb04d7313bd0ab34e584061cf22974","commitMessage":"@@@[FLINK-19002][canal][json] Support to only read changelogs of specific database and table for canal-json format\n\nThis closes  (#13294)","date":"2020-09-18 15:52:20","modifiedFileCount":"4","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-08-12 11:11:58","codes":[{"authorDate":"2020-11-04 10:13:53","commitOrder":4,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tif (database != null) {\n\t\t\t\tString currentDatabase = row.getString(3).toString();\n\t\t\t\tif (!database.equals(currentDatabase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (table != null) {\n\t\t\t\tString currentTable = row.getString(4).toString();\n\t\t\t\tif (!table.equals(currentTable)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\t\r\n\t\t\t\tArrayData old = row.getArray(1);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\t\r\n\t\t\t\t\tGenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n\t\t\t\t\tGenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n\t\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\t\tout.collect(before);\n\t\t\t\t\tout.collect(after);\n\t\t\t\t}\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.DELETE);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else if (OP_CREATE.equals(type)){\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-11-04 10:13:53","endLine":244,"groupId":"14912","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fe/9227a3002fea90c9a6ac4379fe02ce35171d3f.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tif (database != null) {\n\t\t\t\tString currentDatabase = row.getString(3).toString();\n\t\t\t\tif (!database.equals(currentDatabase)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (table != null) {\n\t\t\t\tString currentTable = row.getString(4).toString();\n\t\t\t\tif (!table.equals(currentTable)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\t\r\n\t\t\t\tArrayData old = row.getArray(1);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\t\r\n\t\t\t\t\tGenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n\t\t\t\t\tGenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n\t\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\t\tout.collect(before);\n\t\t\t\t\tout.collect(after);\n\t\t\t\t}\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tArrayData data = row.getArray(0);\n\t\t\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\t\t\tRowData insert = data.getRow(i, fieldCount);\n\t\t\t\t\tinsert.setRowKind(RowKind.DELETE);\n\t\t\t\t\tout.collect(insert);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2020-08-12 11:11:58","commitOrder":4,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-12 11:11:58","endLine":139,"groupId":"35191","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/4ab559762eefc0163dfbc761c4abb5299f2fcb.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"25701e1a0291f331f2192c12c80a09d8c23ffb14","commitMessage":"@@@[FLINK-19873][canal-json] Skip DDL change events for Canal data\n\nThis closes #13872","date":"2020-11-04 10:13:53","modifiedFileCount":"1","status":"M","submitter":"fangliang"},{"authorTime":"2020-08-12 11:11:58","codes":[{"authorDate":"2020-12-31 10:34:00","commitOrder":5,"curCode":"    public void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n        try {\n            GenericRowData row = (GenericRowData) jsonDeserializer.deserialize(message);\n            if (database != null) {\n                String currentDatabase = row.getString(3).toString();\n                if (!database.equals(currentDatabase)) {\n                    return;\n                }\n            }\n            if (table != null) {\n                String currentTable = row.getString(4).toString();\n                if (!table.equals(currentTable)) {\n                    return;\n                }\n            }\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f)) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","date":"2020-12-31 10:34:00","endLine":264,"groupId":"47464","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/bb7483b435b978b51cda05a1bb141f68f2e0f9.src","preCode":"    public void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n        try {\n            RowData row = jsonDeserializer.deserialize(message);\n            if (database != null) {\n                String currentDatabase = row.getString(3).toString();\n                if (!database.equals(currentDatabase)) {\n                    return;\n                }\n            }\n            if (table != null) {\n                String currentTable = row.getString(4).toString();\n                if (!table.equals(currentTable)) {\n                    return;\n                }\n            }\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    RowData insert = data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    out.collect(insert);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f)) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    out.collect(before);\n                    out.collect(after);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    RowData insert = data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    out.collect(insert);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2020-08-12 11:11:58","commitOrder":5,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-12 11:11:58","endLine":139,"groupId":"35191","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/4ab559762eefc0163dfbc761c4abb5299f2fcb.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"814fe0eb06f1941247742de27e8150b7c9274b43","commitMessage":"@@@[FLINK-20385][canal-json] Allow to read metadata for canal-json format\n\n\nThis closes #14464","date":"2020-12-31 10:34:00","modifiedFileCount":"5","status":"M","submitter":"SteNicholas"},{"authorTime":"2020-08-12 11:11:58","codes":[{"authorDate":"2021-01-08 22:31:32","commitOrder":6,"curCode":"    public void deserialize(@Nullable byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            GenericRowData row = (GenericRowData) jsonDeserializer.deserialize(message);\n            if (database != null) {\n                String currentDatabase = row.getString(3).toString();\n                if (!database.equals(currentDatabase)) {\n                    return;\n                }\n            }\n            if (table != null) {\n                String currentTable = row.getString(4).toString();\n                if (!table.equals(currentTable)) {\n                    return;\n                }\n            }\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f)) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","date":"2021-01-08 22:31:32","endLine":267,"groupId":"47464","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"deserialize","params":"(@Nullablebyte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d8/23fd939ae033d165f13a3d5d889f20766254ed.src","preCode":"    public void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n        try {\n            GenericRowData row = (GenericRowData) jsonDeserializer.deserialize(message);\n            if (database != null) {\n                String currentDatabase = row.getString(3).toString();\n                if (!database.equals(currentDatabase)) {\n                    return;\n                }\n            }\n            if (table != null) {\n                String currentTable = row.getString(4).toString();\n                if (!table.equals(currentTable)) {\n                    return;\n                }\n            }\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f)) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2020-08-12 11:11:58","commitOrder":6,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-12 11:11:58","endLine":139,"groupId":"35191","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/4ab559762eefc0163dfbc761c4abb5299f2fcb.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"241185a40118cfe3087eb4f7fc14203afe4073cc","commitMessage":"@@@[FLINK-20321][formats] Fix NPE when using Avro/Json/Csv formats to deserialize null input (#14539)\n\nThis closes #14539\n\nCo-authored-by: Alex Wang <alex.wang.dev@gmail.com>","date":"2021-01-08 22:31:32","modifiedFileCount":"12","status":"M","submitter":"Xue Wang"},{"authorTime":"2020-08-12 11:11:58","codes":[{"authorDate":"2021-01-14 22:05:07","commitOrder":7,"curCode":"    public void deserialize(@Nullable byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            final JsonNode root = jsonDeserializer.deserializeToJsonNode(message);\n            if (database != null) {\n                if (!database.equals(root.get(ReadableMetadata.DATABASE.key).asText())) {\n                    return;\n                }\n            }\n            if (table != null) {\n                if (!table.equals(root.get(ReadableMetadata.TABLE.key).asText())) {\n                    return;\n                }\n            }\n            final GenericRowData row = (GenericRowData) jsonDeserializer.convertToRowData(root);\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f)) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","date":"2021-01-14 22:05:07","endLine":268,"groupId":"47464","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"deserialize","params":"(@Nullablebyte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/66/7741b1496d3dfa42b7c027d8931b15d51d311d.src","preCode":"    public void deserialize(@Nullable byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            GenericRowData row = (GenericRowData) jsonDeserializer.deserialize(message);\n            if (database != null) {\n                String currentDatabase = row.getString(3).toString();\n                if (!database.equals(currentDatabase)) {\n                    return;\n                }\n            }\n            if (table != null) {\n                String currentTable = row.getString(4).toString();\n                if (!table.equals(currentTable)) {\n                    return;\n                }\n            }\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f)) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2020-08-12 11:11:58","commitOrder":7,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-12 11:11:58","endLine":139,"groupId":"35191","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/4ab559762eefc0163dfbc761c4abb5299f2fcb.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"9d674edd478706cc8ef7233d42385e948bae60e6","commitMessage":"@@@[FLINK-20885][canal-json] Fix deserialization exception when using 'canal-json.table.include' to filter binlogs of multiple tables\n\nThis closes #14631","date":"2021-01-14 22:05:07","modifiedFileCount":"3","status":"M","submitter":"SteNicholas"},{"authorTime":"2020-08-12 11:11:58","codes":[{"authorDate":"2021-01-15 22:38:34","commitOrder":8,"curCode":"    public void deserialize(@Nullable byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            final JsonNode root = jsonDeserializer.deserializeToJsonNode(message);\n            if (database != null) {\n                if (!databasePattern\n                        .matcher(root.get(ReadableMetadata.DATABASE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            if (table != null) {\n                if (!tablePattern\n                        .matcher(root.get(ReadableMetadata.TABLE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            final GenericRowData row = (GenericRowData) jsonDeserializer.convertToRowData(root);\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f)) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","date":"2021-01-15 22:38:34","endLine":281,"groupId":"47464","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"deserialize","params":"(@Nullablebyte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8c/bf2794ed5c876b1b87b4a7fd3a2c98de3ad19f.src","preCode":"    public void deserialize(@Nullable byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            final JsonNode root = jsonDeserializer.deserializeToJsonNode(message);\n            if (database != null) {\n                if (!database.equals(root.get(ReadableMetadata.DATABASE.key).asText())) {\n                    return;\n                }\n            }\n            if (table != null) {\n                if (!table.equals(root.get(ReadableMetadata.TABLE.key).asText())) {\n                    return;\n                }\n            }\n            final GenericRowData row = (GenericRowData) jsonDeserializer.convertToRowData(root);\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f)) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2020-08-12 11:11:58","commitOrder":8,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-12 11:11:58","endLine":139,"groupId":"35191","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/4ab559762eefc0163dfbc761c4abb5299f2fcb.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"3fea150713c970d8f1dd54670049115116029af4","commitMessage":"@@@[FLINK-20953][canal-json] Support regular expression to filter databases and tables for canal-json\n\nThis closes #14652","date":"2021-01-15 22:38:34","modifiedFileCount":"3","status":"M","submitter":"SteNicholas"},{"authorTime":"2020-08-12 11:11:58","codes":[{"authorDate":"2021-01-22 13:53:20","commitOrder":9,"curCode":"    public void deserialize(@Nullable byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            final JsonNode root = jsonDeserializer.deserializeToJsonNode(message);\n            if (database != null) {\n                if (!databasePattern\n                        .matcher(root.get(ReadableMetadata.DATABASE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            if (table != null) {\n                if (!tablePattern\n                        .matcher(root.get(ReadableMetadata.TABLE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            final GenericRowData row = (GenericRowData) jsonDeserializer.convertToRowData(root);\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    final JsonNode oldField = root.get(FIELD_OLD);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f) && oldField.findValue(fieldNames.get(f)) == null) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","date":"2021-01-22 13:53:20","endLine":288,"groupId":"47464","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"deserialize","params":"(@Nullablebyte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ac/daecf58c7adc58d16a644bd56d85f0f4f4b2c5.src","preCode":"    public void deserialize(@Nullable byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            final JsonNode root = jsonDeserializer.deserializeToJsonNode(message);\n            if (database != null) {\n                if (!databasePattern\n                        .matcher(root.get(ReadableMetadata.DATABASE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            if (table != null) {\n                if (!tablePattern\n                        .matcher(root.get(ReadableMetadata.TABLE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            final GenericRowData row = (GenericRowData) jsonDeserializer.convertToRowData(root);\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f)) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2020-08-12 11:11:58","commitOrder":9,"curCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-12 11:11:58","endLine":139,"groupId":"35191","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/4ab559762eefc0163dfbc761c4abb5299f2fcb.src","preCode":"\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n\t\ttry {\n\t\t\tRowData row = jsonDeserializer.deserialize(message);\n\t\t\tString type = row.getString(2).toString(); \r\n\t\t\tif (OP_INSERT.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData insert = row.getRow(0, fieldCount);\n\t\t\t\tinsert.setRowKind(RowKind.INSERT);\n\t\t\t\tout.collect(insert);\n\t\t\t} else if (OP_UPDATE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tGenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n\t\t\t\tGenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n\t\t\t\tfor (int f = 0; f < fieldCount; f++) {\n\t\t\t\t\tif (before.isNullAt(f)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbefore.setField(f, after.getField(f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbefore.setRowKind(RowKind.UPDATE_BEFORE);\n\t\t\t\tafter.setRowKind(RowKind.UPDATE_AFTER);\n\t\t\t\tout.collect(before);\n\t\t\t\tout.collect(after);\n\t\t\t} else if (OP_DELETE.equals(type)) {\n\t\t\t\t\r\n\t\t\t\tRowData delete = row.getRow(0, fieldCount);\n\t\t\t\tdelete.setRowKind(RowKind.DELETE);\n\t\t\t\tout.collect(delete);\n\n\t\t\t} else {\n\t\t\t\tif (!ignoreParseErrors) {\n\t\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\t\"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\", type, new String(message)));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Throwable t) {\n\t\t\t\r\n\t\t\tif (!ignoreParseErrors) {\n\t\t\t\tthrow new IOException(format(\n\t\t\t\t\t\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"6ee32ee4a4cc24f2e519545f6c032f06849f08d1","commitMessage":"@@@[FLINK-19446][canal-json] Fix canal-json format parse UPDATE record with null value will get wrong result\n\nThis closes #14693","date":"2021-01-22 13:53:20","modifiedFileCount":"2","status":"M","submitter":"SteNicholas"},{"authorTime":"2021-06-01 16:32:22","codes":[{"authorDate":"2021-01-22 13:53:20","commitOrder":10,"curCode":"    public void deserialize(@Nullable byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            final JsonNode root = jsonDeserializer.deserializeToJsonNode(message);\n            if (database != null) {\n                if (!databasePattern\n                        .matcher(root.get(ReadableMetadata.DATABASE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            if (table != null) {\n                if (!tablePattern\n                        .matcher(root.get(ReadableMetadata.TABLE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            final GenericRowData row = (GenericRowData) jsonDeserializer.convertToRowData(root);\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    final JsonNode oldField = root.get(FIELD_OLD);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f) && oldField.findValue(fieldNames.get(f)) == null) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","date":"2021-01-22 13:53:20","endLine":288,"groupId":"102159","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"deserialize","params":"(@Nullablebyte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ac/daecf58c7adc58d16a644bd56d85f0f4f4b2c5.src","preCode":"    public void deserialize(@Nullable byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            final JsonNode root = jsonDeserializer.deserializeToJsonNode(message);\n            if (database != null) {\n                if (!databasePattern\n                        .matcher(root.get(ReadableMetadata.DATABASE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            if (table != null) {\n                if (!tablePattern\n                        .matcher(root.get(ReadableMetadata.TABLE.key).asText())\n                        .matches()) {\n                    return;\n                }\n            }\n            final GenericRowData row = (GenericRowData) jsonDeserializer.convertToRowData(root);\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.INSERT);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                \r\n                ArrayData old = row.getArray(1);\n                for (int i = 0; i < data.size(); i++) {\n                    \r\n                    GenericRowData after = (GenericRowData) data.getRow(i, fieldCount);\n                    GenericRowData before = (GenericRowData) old.getRow(i, fieldCount);\n                    final JsonNode oldField = root.get(FIELD_OLD);\n                    for (int f = 0; f < fieldCount; f++) {\n                        if (before.isNullAt(f) && oldField.findValue(fieldNames.get(f)) == null) {\n                            \r\n                            \r\n                            \r\n                            before.setField(f, after.getField(f));\n                        }\n                    }\n                    before.setRowKind(RowKind.UPDATE_BEFORE);\n                    after.setRowKind(RowKind.UPDATE_AFTER);\n                    emitRow(row, before, out);\n                    emitRow(row, after, out);\n                }\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                ArrayData data = row.getArray(0);\n                for (int i = 0; i < data.size(); i++) {\n                    GenericRowData insert = (GenericRowData) data.getRow(i, fieldCount);\n                    insert.setRowKind(RowKind.DELETE);\n                    emitRow(row, insert, out);\n                }\n            } else if (OP_CREATE.equals(type)) {\n                \r\n                \r\n                return;\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Canal JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Canal JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"N"},{"authorDate":"2021-06-01 16:32:22","commitOrder":10,"curCode":"    public void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n        if (message == null || message.length == 0) {\n            return;\n        }\n        try {\n            final JsonNode root = jsonDeserializer.deserializeToJsonNode(message);\n            final GenericRowData row = (GenericRowData) jsonDeserializer.convertToRowData(root);\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                GenericRowData insert = (GenericRowData) row.getRow(0, fieldCount);\n                insert.setRowKind(RowKind.INSERT);\n                emitRow(row, insert, out);\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                \r\n                \r\n                GenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n                GenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n                final JsonNode oldField = root.get(FIELD_OLD);\n                for (int f = 0; f < fieldCount; f++) {\n                    if (before.isNullAt(f) && oldField.findValue(fieldNames.get(f)) == null) {\n                        \r\n                        \r\n                        \r\n                        before.setField(f, after.getField(f));\n                    }\n                }\n                before.setRowKind(RowKind.UPDATE_BEFORE);\n                after.setRowKind(RowKind.UPDATE_AFTER);\n                emitRow(row, before, out);\n                emitRow(row, after, out);\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                GenericRowData delete = (GenericRowData) row.getRow(0, fieldCount);\n                delete.setRowKind(RowKind.DELETE);\n                emitRow(row, delete, out);\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","date":"2021-06-10 12:37:00","endLine":171,"groupId":"102159","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"deserialize","params":"(byte[]message@Collector<RowData>out)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/86/3620fd90885eac908ba566244da6f76dbe2b88.src","preCode":"    public void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n        try {\n            RowData row = jsonDeserializer.deserialize(message);\n            String type = row.getString(2).toString(); \r\n            if (OP_INSERT.equals(type)) {\n                \r\n                RowData insert = row.getRow(0, fieldCount);\n                insert.setRowKind(RowKind.INSERT);\n                out.collect(insert);\n            } else if (OP_UPDATE.equals(type)) {\n                \r\n                \r\n                \r\n                GenericRowData after = (GenericRowData) row.getRow(0, fieldCount); \r\n                GenericRowData before = (GenericRowData) row.getRow(1, fieldCount); \r\n                for (int f = 0; f < fieldCount; f++) {\n                    if (before.isNullAt(f)) {\n                        \r\n                        \r\n                        \r\n                        before.setField(f, after.getField(f));\n                    }\n                }\n                before.setRowKind(RowKind.UPDATE_BEFORE);\n                after.setRowKind(RowKind.UPDATE_AFTER);\n                out.collect(before);\n                out.collect(after);\n            } else if (OP_DELETE.equals(type)) {\n                \r\n                RowData delete = row.getRow(0, fieldCount);\n                delete.setRowKind(RowKind.DELETE);\n                out.collect(delete);\n\n            } else {\n                if (!ignoreParseErrors) {\n                    throw new IOException(\n                            format(\n                                    \"Unknown \\\"type\\\" value \\\"%s\\\". The Maxwell JSON message is '%s'\",\n                                    type, new String(message)));\n                }\n            }\n        } catch (Throwable t) {\n            \r\n            if (!ignoreParseErrors) {\n                throw new IOException(\n                        format(\"Corrupt Maxwell JSON message '%s'.\", new String(message)), t);\n            }\n        }\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"410b8c4d6fb1e4af1d00b54e96a44cb540a66f99","commitMessage":"@@@[FLINK-20926][maxwell][json] Allow to read metadata for maxwell-json format\n\nThis closes #16040\n","date":"2021-06-10 12:37:00","modifiedFileCount":"5","status":"M","submitter":"SteNicholas"}]
