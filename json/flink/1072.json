[{"authorTime":"2018-07-23 10:35:40","codes":[{"authorDate":"2018-07-23 10:35:40","commitOrder":3,"curCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal Environment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t}\n\t}\n","date":"2018-07-26 15:52:15","endLine":126,"groupId":"26207","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDbPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/c3144d94b998e93cbb3382755682f1e802bdb7.src","preCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal Environment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"MB"},{"authorDate":"2018-07-23 10:35:40","commitOrder":3,"curCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal Environment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t}\n\t}\n","date":"2018-07-26 15:52:15","endLine":188,"groupId":"46441","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocalDbPaths","params":"(StringconfiguredPath@FileexpectedPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/c3144d94b998e93cbb3382755682f1e802bdb7.src","preCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal Environment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"MB"}],"commitId":"2c0dd5422b788511637c8fa7a67c91997f6a883f","commitMessage":"@@@[FLINK-5860] [tests] Replace java.io.tmpdir with JUnit TemporaryFolder in tests\n\nJUnit's TemporaryFolder is a better way to handle temporary folders\nin tests as JUnit takes care of creation and cleanup of temporary\nfolders automatically.\n\nThis closes #6399.\n","date":"2018-07-26 15:52:15","modifiedFileCount":"11","status":"M","submitter":"Mahesh Senniappan"},{"authorTime":"2020-01-21 23:46:05","codes":[{"authorDate":"2020-01-21 23:46:05","commitOrder":4,"curCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-01-23 21:10:06","endLine":137,"groupId":"26207","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDbPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/5e96b5db79a0efde8b0ad78dbaeff291e20819.src","preCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal Environment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2020-01-21 23:46:05","commitOrder":4,"curCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-01-23 21:10:06","endLine":238,"groupId":"46441","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocalDbPaths","params":"(StringconfiguredPath@FileexpectedPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/5e96b5db79a0efde8b0ad78dbaeff291e20819.src","preCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal Environment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"e6ff5655c76e25157781d64f08dbc0893b22708e","commitMessage":"@@@[FLINK-15692][state] Enable limiting RocksDB memory consumption by default\n\nTurn on state.backend.rocksdb.memory.managed to enable memory limit on RocksDB\n\nThis closes #10921.\n","date":"2020-01-23 21:10:06","modifiedFileCount":"23","status":"M","submitter":"Yun Tang"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2020-06-05 01:16:27","commitOrder":5,"curCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-06-16 16:31:11","endLine":142,"groupId":"26207","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDbPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/19/7f7ca54af87a678e0d6fdf23198c75a5875fdc.src","preCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":5,"curCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-06-16 16:31:11","endLine":272,"groupId":"28892","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocalDbPaths","params":"(StringconfiguredPath@FileexpectedPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/19/7f7ca54af87a678e0d6fdf23198c75a5875fdc.src","preCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"8ca388ca0225ff22f532c8a65f97d8cfea027c22","commitMessage":"@@@[FLINK-17800][roksdb] Ensure total order seek to avoid user misuse\n","date":"2020-06-16 16:31:11","modifiedFileCount":"15","status":"M","submitter":"Yun Tang"},{"authorTime":"2020-06-17 16:13:30","codes":[{"authorDate":"2020-06-17 16:13:30","commitOrder":6,"curCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-06-17 20:33:00","endLine":141,"groupId":"26207","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDbPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/eb6dbc28ddea52eb12b76677f69919732d7823.src","preCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-06-17 16:13:30","commitOrder":6,"curCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-06-17 20:33:00","endLine":271,"groupId":"46441","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocalDbPaths","params":"(StringconfiguredPath@FileexpectedPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/eb6dbc28ddea52eb12b76677f69919732d7823.src","preCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"f6f51d8767990cee7f1ca052b040530b646c3efe","commitMessage":"@@@Revert \"[FLINK-17800][roksdb] Ensure total order seek to avoid user misuse\"\n\nThis reverts commit 8ca388ca0225ff22f532c8a65f97d8cfea027c22.\n","date":"2020-06-17 20:33:00","modifiedFileCount":"15","status":"M","submitter":"Robert Metzger"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2020-06-05 01:16:27","commitOrder":7,"curCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-06-26 22:24:49","endLine":142,"groupId":"26207","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDbPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e6/4fc79a2f2993cf1cc3d19169c7a4a78d6a1fdb.src","preCode":"\tpublic void testSetDbPath() throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n\t\tfinal String testDir1 = tempFolder.newFolder().getAbsolutePath();\n\t\tfinal String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(testDir1);\n\t\tassertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePath(null);\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\trocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n\t\tassertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tfinal RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t}\n\t\tfinally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":7,"curCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-06-26 22:24:49","endLine":272,"groupId":"28892","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocalDbPaths","params":"(StringconfiguredPath@FileexpectedPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e6/4fc79a2f2993cf1cc3d19169c7a4a78d6a1fdb.src","preCode":"\tprivate void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n\t\tfinal RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\t\trocksDbBackend.setDbStoragePath(configuredPath);\n\n\t\tfinal MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env);\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n\t\t\t\r\n\t\t\trocksDbBackend.setDbStoragePaths(null);\n\t\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"3516e37ae0aa4ee040b6844f336541315a455ce9","commitMessage":"@@@[FLINK-17800][rocksdb] Ensure total order seek to avoid user misuse\n","date":"2020-06-26 22:24:49","modifiedFileCount":"15","status":"M","submitter":"Yun Tang"},{"authorTime":"2021-01-22 04:15:38","codes":[{"authorDate":"2021-01-22 04:15:38","commitOrder":8,"curCode":"    public void testSetDbPath() throws Exception {\n        final EmbeddedRocksDBStateBackend rocksDbBackend = new EmbeddedRocksDBStateBackend();\n\n        final String testDir1 = tempFolder.newFolder().getAbsolutePath();\n        final String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n        assertNull(rocksDbBackend.getDbStoragePaths());\n\n        rocksDbBackend.setDbStoragePath(testDir1);\n        assertArrayEquals(new String[] {testDir1}, rocksDbBackend.getDbStoragePaths());\n\n        rocksDbBackend.setDbStoragePath(null);\n        assertNull(rocksDbBackend.getDbStoragePaths());\n\n        rocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n        assertArrayEquals(new String[] {testDir1, testDir2}, rocksDbBackend.getDbStoragePaths());\n\n        final MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n        final RocksDBKeyedStateBackend<Integer> keyedBackend =\n                createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n        try {\n            File instanceBasePath = keyedBackend.getInstanceBasePath();\n            assertThat(\n                    instanceBasePath.getAbsolutePath(),\n                    anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n            \r\n            rocksDbBackend.setDbStoragePaths(null);\n            assertNull(rocksDbBackend.getDbStoragePaths());\n        } finally {\n            IOUtils.closeQuietly(keyedBackend);\n            keyedBackend.dispose();\n            env.close();\n        }\n    }\n","date":"2021-02-25 10:11:27","endLine":141,"groupId":"1072","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetDbPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/eb/e496699145209f749c9c054c9069a6131b4cbe.src","preCode":"    public void testSetDbPath() throws Exception {\n        final RocksDBStateBackend rocksDbBackend =\n                new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n\n        final String testDir1 = tempFolder.newFolder().getAbsolutePath();\n        final String testDir2 = tempFolder.newFolder().getAbsolutePath();\n\n        assertNull(rocksDbBackend.getDbStoragePaths());\n\n        rocksDbBackend.setDbStoragePath(testDir1);\n        assertArrayEquals(new String[] {testDir1}, rocksDbBackend.getDbStoragePaths());\n\n        rocksDbBackend.setDbStoragePath(null);\n        assertNull(rocksDbBackend.getDbStoragePaths());\n\n        rocksDbBackend.setDbStoragePaths(testDir1, testDir2);\n        assertArrayEquals(new String[] {testDir1, testDir2}, rocksDbBackend.getDbStoragePaths());\n\n        final MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n        final RocksDBKeyedStateBackend<Integer> keyedBackend =\n                createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n        try {\n            File instanceBasePath = keyedBackend.getInstanceBasePath();\n            assertThat(\n                    instanceBasePath.getAbsolutePath(),\n                    anyOf(startsWith(testDir1), startsWith(testDir2)));\n\n            \r\n            rocksDbBackend.setDbStoragePaths(null);\n            assertNull(rocksDbBackend.getDbStoragePaths());\n        } finally {\n            IOUtils.closeQuietly(keyedBackend);\n            keyedBackend.dispose();\n            env.close();\n        }\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2021-01-22 04:15:38","commitOrder":8,"curCode":"    private void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n        final EmbeddedRocksDBStateBackend rocksDbBackend = new EmbeddedRocksDBStateBackend();\n        rocksDbBackend.setDbStoragePath(configuredPath);\n\n        final MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n        RocksDBKeyedStateBackend<Integer> keyedBackend =\n                createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n        try {\n            File instanceBasePath = keyedBackend.getInstanceBasePath();\n            assertThat(\n                    instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n            \r\n            rocksDbBackend.setDbStoragePaths(null);\n            assertNull(rocksDbBackend.getDbStoragePaths());\n        } finally {\n            IOUtils.closeQuietly(keyedBackend);\n            keyedBackend.dispose();\n            env.close();\n        }\n    }\n","date":"2021-02-25 10:11:27","endLine":282,"groupId":"1072","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testLocalDbPaths","params":"(StringconfiguredPath@FileexpectedPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/eb/e496699145209f749c9c054c9069a6131b4cbe.src","preCode":"    private void testLocalDbPaths(String configuredPath, File expectedPath) throws Exception {\n        final RocksDBStateBackend rocksDbBackend =\n                new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());\n        rocksDbBackend.setDbStoragePath(configuredPath);\n\n        final MockEnvironment env = getMockEnvironment(tempFolder.newFolder());\n        RocksDBKeyedStateBackend<Integer> keyedBackend =\n                createKeyedStateBackend(rocksDbBackend, env, IntSerializer.INSTANCE);\n\n        try {\n            File instanceBasePath = keyedBackend.getInstanceBasePath();\n            assertThat(\n                    instanceBasePath.getAbsolutePath(), startsWith(expectedPath.getAbsolutePath()));\n\n            \r\n            rocksDbBackend.setDbStoragePaths(null);\n            assertNull(rocksDbBackend.getDbStoragePaths());\n        } finally {\n            IOUtils.closeQuietly(keyedBackend);\n            keyedBackend.dispose();\n            env.close();\n        }\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"0a76daba0a428a322f0273d7dc6a70966f62bf26","commitMessage":"@@@[FLINK-19467][runtime / state backends] Implement HashMapStateBackend and EmbeddedRocksDBStateBackend\n","date":"2021-02-25 10:11:27","modifiedFileCount":"32","status":"M","submitter":"Seth Wiesman"}]
