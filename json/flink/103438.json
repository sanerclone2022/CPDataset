[{"authorTime":"2020-11-02 22:30:12","codes":[{"authorDate":"2020-11-02 22:30:12","commitOrder":1,"curCode":"\tpublic Collection<Integer> translateForBatchInternal(\n\t\t\tfinal ReduceTransformation<IN, KEY> transformation,\n\t\t\tfinal Context context) {\n\t\tBatchGroupedReduceOperator<IN, KEY> groupedReduce = new BatchGroupedReduceOperator<>(\n\t\t\ttransformation.getReducer(),\n\t\t\ttransformation\n\t\t\t\t.getInputType()\n\t\t\t\t.createSerializer(context.getStreamGraph().getExecutionConfig())\n\t\t);\n\t\tSimpleOperatorFactory<IN> operatorFactory = SimpleOperatorFactory.of(groupedReduce);\n\t\toperatorFactory.setChainingStrategy(transformation.getChainingStrategy());\n\t\tCollection<Integer> ids = translateInternal(\n\t\t\ttransformation,\n\t\t\toperatorFactory,\n\t\t\ttransformation.getInputType(),\n\t\t\ttransformation.getKeySelector(),\n\t\t\ttransformation.getKeyTypeInfo(),\n\t\t\tcontext);\n\t\tBatchExecutionUtils.applySortingInputs(transformation.getId(), context);\n\n\t\treturn ids;\n\t}\n","date":"2020-11-04 02:02:44","endLine":58,"groupId":"46041","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"translateForBatchInternal","params":"(finalReduceTransformation<IN@KEY>transformation@finalContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/c811e8253ef8cfb0c7983687b7444e4a3fa43f.src","preCode":"\tpublic Collection<Integer> translateForBatchInternal(\n\t\t\tfinal ReduceTransformation<IN, KEY> transformation,\n\t\t\tfinal Context context) {\n\t\tBatchGroupedReduceOperator<IN, KEY> groupedReduce = new BatchGroupedReduceOperator<>(\n\t\t\ttransformation.getReducer(),\n\t\t\ttransformation\n\t\t\t\t.getInputType()\n\t\t\t\t.createSerializer(context.getStreamGraph().getExecutionConfig())\n\t\t);\n\t\tSimpleOperatorFactory<IN> operatorFactory = SimpleOperatorFactory.of(groupedReduce);\n\t\toperatorFactory.setChainingStrategy(transformation.getChainingStrategy());\n\t\tCollection<Integer> ids = translateInternal(\n\t\t\ttransformation,\n\t\t\toperatorFactory,\n\t\t\ttransformation.getInputType(),\n\t\t\ttransformation.getKeySelector(),\n\t\t\ttransformation.getKeyTypeInfo(),\n\t\t\tcontext);\n\t\tBatchExecutionUtils.applySortingInputs(transformation.getId(), context);\n\n\t\treturn ids;\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/ReduceTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2020-11-02 22:30:12","commitOrder":1,"curCode":"\tpublic Collection<Integer> translateForStreamingInternal(\n\t\t\tfinal ReduceTransformation<IN, KEY> transformation,\n\t\t\tfinal Context context) {\n\t\tStreamGroupedReduceOperator<IN> groupedReduce = new StreamGroupedReduceOperator<>(\n\t\t\ttransformation.getReducer(),\n\t\t\ttransformation\n\t\t\t\t.getInputType()\n\t\t\t\t.createSerializer(context.getStreamGraph().getExecutionConfig())\n\t\t);\n\n\t\tSimpleOperatorFactory<IN> operatorFactory = SimpleOperatorFactory.of(groupedReduce);\n\t\toperatorFactory.setChainingStrategy(transformation.getChainingStrategy());\n\t\treturn translateInternal(\n\t\t\ttransformation,\n\t\t\toperatorFactory,\n\t\t\ttransformation.getInputType(),\n\t\t\ttransformation.getKeySelector(),\n\t\t\ttransformation.getKeyTypeInfo(),\n\t\t\tcontext);\n\t}\n","date":"2020-11-04 02:02:44","endLine":80,"groupId":"46041","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"translateForStreamingInternal","params":"(finalReduceTransformation<IN@KEY>transformation@finalContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/c811e8253ef8cfb0c7983687b7444e4a3fa43f.src","preCode":"\tpublic Collection<Integer> translateForStreamingInternal(\n\t\t\tfinal ReduceTransformation<IN, KEY> transformation,\n\t\t\tfinal Context context) {\n\t\tStreamGroupedReduceOperator<IN> groupedReduce = new StreamGroupedReduceOperator<>(\n\t\t\ttransformation.getReducer(),\n\t\t\ttransformation\n\t\t\t\t.getInputType()\n\t\t\t\t.createSerializer(context.getStreamGraph().getExecutionConfig())\n\t\t);\n\n\t\tSimpleOperatorFactory<IN> operatorFactory = SimpleOperatorFactory.of(groupedReduce);\n\t\toperatorFactory.setChainingStrategy(transformation.getChainingStrategy());\n\t\treturn translateInternal(\n\t\t\ttransformation,\n\t\t\toperatorFactory,\n\t\t\ttransformation.getInputType(),\n\t\t\ttransformation.getKeySelector(),\n\t\t\ttransformation.getKeyTypeInfo(),\n\t\t\tcontext);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/ReduceTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"5b4a3704cc32ab51e7bf3acbe7cd877ba751e36c","commitMessage":"@@@[FLINK-19931] Do not emit intermediate results for reduce operation BATCH execution mode\n\nThis PR introduces ReduceTransformation and a corresponding translator\nthat produces runtime execution mode dependent operator.\n\nThe operator for the BATCH execution instead of emitting intermediate results after each incoming event it registers a callback for max watermark and then emits the result for a given key when the timer fires.\n","date":"2020-11-04 02:02:44","modifiedFileCount":"5","status":"B","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-11-02 22:30:12","codes":[{"authorDate":"2020-12-10 22:07:57","commitOrder":2,"curCode":"    public Collection<Integer> translateForBatchInternal(\n            final ReduceTransformation<IN, KEY> transformation, final Context context) {\n        BatchGroupedReduceOperator<IN, KEY> groupedReduce =\n                new BatchGroupedReduceOperator<>(\n                        transformation.getReducer(),\n                        transformation\n                                .getInputType()\n                                .createSerializer(context.getStreamGraph().getExecutionConfig()));\n        SimpleOperatorFactory<IN> operatorFactory = SimpleOperatorFactory.of(groupedReduce);\n        operatorFactory.setChainingStrategy(transformation.getChainingStrategy());\n        Collection<Integer> ids =\n                translateInternal(\n                        transformation,\n                        operatorFactory,\n                        transformation.getInputType(),\n                        transformation.getKeySelector(),\n                        transformation.getKeyTypeInfo(),\n                        context);\n        BatchExecutionUtils.applyBatchExecutionSettings(\n                transformation.getId(), context, StreamConfig.InputRequirement.SORTED);\n\n        return ids;\n    }\n","date":"2021-01-07 19:11:45","endLine":61,"groupId":"103438","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"translateForBatchInternal","params":"(finalReduceTransformation<IN@KEY>transformation@finalContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/bf563e5500a5fa9565a98e33bacec9953831f6.src","preCode":"    public Collection<Integer> translateForBatchInternal(\n            final ReduceTransformation<IN, KEY> transformation, final Context context) {\n        BatchGroupedReduceOperator<IN, KEY> groupedReduce =\n                new BatchGroupedReduceOperator<>(\n                        transformation.getReducer(),\n                        transformation\n                                .getInputType()\n                                .createSerializer(context.getStreamGraph().getExecutionConfig()));\n        SimpleOperatorFactory<IN> operatorFactory = SimpleOperatorFactory.of(groupedReduce);\n        operatorFactory.setChainingStrategy(transformation.getChainingStrategy());\n        Collection<Integer> ids =\n                translateInternal(\n                        transformation,\n                        operatorFactory,\n                        transformation.getInputType(),\n                        transformation.getKeySelector(),\n                        transformation.getKeyTypeInfo(),\n                        context);\n        BatchExecutionUtils.applySortingInputs(transformation.getId(), context);\n\n        return ids;\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/ReduceTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2020-11-02 22:30:12","commitOrder":2,"curCode":"\tpublic Collection<Integer> translateForStreamingInternal(\n\t\t\tfinal ReduceTransformation<IN, KEY> transformation,\n\t\t\tfinal Context context) {\n\t\tStreamGroupedReduceOperator<IN> groupedReduce = new StreamGroupedReduceOperator<>(\n\t\t\ttransformation.getReducer(),\n\t\t\ttransformation\n\t\t\t\t.getInputType()\n\t\t\t\t.createSerializer(context.getStreamGraph().getExecutionConfig())\n\t\t);\n\n\t\tSimpleOperatorFactory<IN> operatorFactory = SimpleOperatorFactory.of(groupedReduce);\n\t\toperatorFactory.setChainingStrategy(transformation.getChainingStrategy());\n\t\treturn translateInternal(\n\t\t\ttransformation,\n\t\t\toperatorFactory,\n\t\t\ttransformation.getInputType(),\n\t\t\ttransformation.getKeySelector(),\n\t\t\ttransformation.getKeyTypeInfo(),\n\t\t\tcontext);\n\t}\n","date":"2020-11-04 02:02:44","endLine":80,"groupId":"103438","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"translateForStreamingInternal","params":"(finalReduceTransformation<IN@KEY>transformation@finalContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/c811e8253ef8cfb0c7983687b7444e4a3fa43f.src","preCode":"\tpublic Collection<Integer> translateForStreamingInternal(\n\t\t\tfinal ReduceTransformation<IN, KEY> transformation,\n\t\t\tfinal Context context) {\n\t\tStreamGroupedReduceOperator<IN> groupedReduce = new StreamGroupedReduceOperator<>(\n\t\t\ttransformation.getReducer(),\n\t\t\ttransformation\n\t\t\t\t.getInputType()\n\t\t\t\t.createSerializer(context.getStreamGraph().getExecutionConfig())\n\t\t);\n\n\t\tSimpleOperatorFactory<IN> operatorFactory = SimpleOperatorFactory.of(groupedReduce);\n\t\toperatorFactory.setChainingStrategy(transformation.getChainingStrategy());\n\t\treturn translateInternal(\n\t\t\ttransformation,\n\t\t\toperatorFactory,\n\t\t\ttransformation.getInputType(),\n\t\t\ttransformation.getKeySelector(),\n\t\t\ttransformation.getKeyTypeInfo(),\n\t\t\tcontext);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/ReduceTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"}],"commitId":"524a10708aed7f9c67cccba909d489e8d14a633f","commitMessage":"@@@[FLINK-20491] Add per-input setting of BATCH execution requirements\n\nThis doesn't change the actual behavior.  we still set the same \"sorted\"\nsetting on both inputs. We will add tests and actually change the\nbehavior in a follow-up commit.\n","date":"2021-01-07 19:11:45","modifiedFileCount":"14","status":"M","submitter":"Aljoscha Krettek"}]
