[{"authorTime":"2017-02-22 21:55:17","codes":[{"authorDate":"2017-02-07 21:38:25","commitOrder":2,"curCode":"\tpublic void testInternalAggregateProcessWindowFunction() throws Exception {\n\n\t\tAggregateProcessWindowFunctionMock mock = mock(AggregateProcessWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessWindowFunction<Long, Set<Long>, Map<Long, Long>, String, Long, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\t\n\t\twindowFunction.apply(42L, w, args, c);\n\t\tverify(mock).process(\n\t\t\t\teq(42L),\n\t\t\t\t(AggregateProcessWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-02-18 00:15:51","endLine":380,"groupId":"24611","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInternalAggregateProcessWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/9a496870cde68927b3ed53879905887c8a752c.src","preCode":"\tpublic void testInternalAggregateProcessWindowFunction() throws Exception {\n\n\t\tAggregateProcessWindowFunctionMock mock = mock(AggregateProcessWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessWindowFunction<Long, Set<Long>, Map<Long, Long>, String, Long, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\t\n\t\twindowFunction.apply(42L, w, args, c);\n\t\tverify(mock).process(\n\t\t\t\teq(42L),\n\t\t\t\t(AggregateProcessWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"NB"},{"authorDate":"2017-02-22 21:55:17","commitOrder":2,"curCode":"\tpublic void testInternalAggregateProcessAllWindowFunction() throws Exception {\n\n\t\tAggregateProcessAllWindowFunctionMock mock = mock(AggregateProcessAllWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessAllWindowFunction<Long, Set<Long>, Map<Long, Long>, String, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\n\t\twindowFunction.apply(((byte)0), w, args, c);\n\t\tverify(mock).process(\n\t\t\t\t(AggregateProcessAllWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-02-28 21:02:56","endLine":543,"groupId":"24611","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInternalAggregateProcessAllWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8f/795e913642159c0576d3ad0bf1421bb973caec.src","preCode":"\tpublic void testInternalAggregateProcessAllWindowFunction() throws Exception {\n\n\t\tAggregateProcessAllWindowFunctionMock mock = mock(AggregateProcessAllWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessAllWindowFunction<Long, Set<Long>, Map<Long, Long>, String, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\n\t\twindowFunction.apply(((byte)0), w, args, c);\n\t\tverify(mock).process(\n\t\t\t\t(AggregateProcessAllWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":470,"status":"B"}],"commitId":"788b839213811c6f2407ac6d54fef28dfa3d29a6","commitMessage":"@@@[FLINK-5157] [streaming] Introduce ProcessAllWindowFunction\n","date":"2017-02-28 21:02:56","modifiedFileCount":"7","status":"M","submitter":"Ventura Del Monte"},{"authorTime":"2017-03-06 12:07:18","codes":[{"authorDate":"2017-03-06 12:07:18","commitOrder":3,"curCode":"\tpublic void testInternalAggregateProcessWindowFunction() throws Exception {\n\n\t\tAggregateProcessWindowFunctionMock mock = mock(AggregateProcessWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessWindowFunction<Long, Set<Long>, Map<Long, Long>, String, Long, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\twindowFunction.process(42L, w, ctx, args, c);\n\t\tverify(mock).process(\n\t\t\t\teq(42L),\n\t\t\t\t(AggregateProcessWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-03-25 23:59:17","endLine":484,"groupId":"24611","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInternalAggregateProcessWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6f/34607160e89824950b84ebaf0797d2f1fb272b.src","preCode":"\tpublic void testInternalAggregateProcessWindowFunction() throws Exception {\n\n\t\tAggregateProcessWindowFunctionMock mock = mock(AggregateProcessWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessWindowFunction<Long, Set<Long>, Map<Long, Long>, String, Long, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\n\t\twindowFunction.apply(42L, w, args, c);\n\t\tverify(mock).process(\n\t\t\t\teq(42L),\n\t\t\t\t(AggregateProcessWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"M"},{"authorDate":"2017-03-06 12:07:18","commitOrder":3,"curCode":"\tpublic void testInternalAggregateProcessAllWindowFunction() throws Exception {\n\n\t\tAggregateProcessAllWindowFunctionMock mock = mock(AggregateProcessAllWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessAllWindowFunction<Long, Set<Long>, Map<Long, Long>, String, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\twindowFunction.process(((byte)0), w, ctx, args, c);\n\t\tverify(mock).process(\n\t\t\t\t(AggregateProcessAllWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-03-25 23:59:17","endLine":562,"groupId":"24611","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInternalAggregateProcessAllWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6f/34607160e89824950b84ebaf0797d2f1fb272b.src","preCode":"\tpublic void testInternalAggregateProcessAllWindowFunction() throws Exception {\n\n\t\tAggregateProcessAllWindowFunctionMock mock = mock(AggregateProcessAllWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessAllWindowFunction<Long, Set<Long>, Map<Long, Long>, String, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\n\t\twindowFunction.apply(((byte)0), w, args, c);\n\t\tverify(mock).process(\n\t\t\t\t(AggregateProcessAllWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"M"}],"commitId":"fad201bfb0b1f2757f68f7b3ffaf97a486eb93e8","commitMessage":"@@@[FLINK-5929] Allow Access to Per-Window State in ProcessWindowFunction\n","date":"2017-03-25 23:59:17","modifiedFileCount":"24","status":"M","submitter":"Seth Wiesman"},{"authorTime":"2017-03-06 12:07:18","codes":[{"authorDate":"2017-04-02 19:27:14","commitOrder":4,"curCode":"\tpublic void testInternalAggregateProcessWindowFunction() throws Exception {\n\n\t\tAggregateProcessWindowFunctionMock mock = mock(AggregateProcessWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessWindowFunction<Long, Set<Long>, Map<Long, Long>, String, Long, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\tdoAnswer(new Answer() {\n\t\t\t@Override\n\t\t\tpublic Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tProcessWindowFunctionMock.Context c =\n\t\t\t\t\t(ProcessWindowFunction.Context) invocationOnMock.getArguments()[1];\n\t\t\t\tc.currentProcessingTime();\n\t\t\t\tc.currentWatermark();\n\t\t\t\tc.windowState();\n\t\t\t\tc.globalState();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mock).process(\n\t\t\t\teq(42L),\n\t\t\t\t(AggregateProcessWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\twindowFunction.process(42L, w, ctx, args, c);\n\t\tverify(ctx).currentProcessingTime();\n\t\tverify(ctx).currentWatermark();\n\t\tverify(ctx).windowState();\n\t\tverify(ctx).globalState();\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-04-27 21:09:08","endLine":534,"groupId":"24611","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInternalAggregateProcessWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/8057f5a6bcb3044326388f79fb532ee274d08b.src","preCode":"\tpublic void testInternalAggregateProcessWindowFunction() throws Exception {\n\n\t\tAggregateProcessWindowFunctionMock mock = mock(AggregateProcessWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessWindowFunction<Long, Set<Long>, Map<Long, Long>, String, Long, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\twindowFunction.process(42L, w, ctx, args, c);\n\t\tverify(mock).process(\n\t\t\t\teq(42L),\n\t\t\t\t(AggregateProcessWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"},{"authorDate":"2017-03-06 12:07:18","commitOrder":4,"curCode":"\tpublic void testInternalAggregateProcessAllWindowFunction() throws Exception {\n\n\t\tAggregateProcessAllWindowFunctionMock mock = mock(AggregateProcessAllWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessAllWindowFunction<Long, Set<Long>, Map<Long, Long>, String, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\twindowFunction.process(((byte)0), w, ctx, args, c);\n\t\tverify(mock).process(\n\t\t\t\t(AggregateProcessAllWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-03-25 23:59:17","endLine":562,"groupId":"24611","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInternalAggregateProcessAllWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6f/34607160e89824950b84ebaf0797d2f1fb272b.src","preCode":"\tpublic void testInternalAggregateProcessAllWindowFunction() throws Exception {\n\n\t\tAggregateProcessAllWindowFunctionMock mock = mock(AggregateProcessAllWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessAllWindowFunction<Long, Set<Long>, Map<Long, Long>, String, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\twindowFunction.process(((byte)0), w, ctx, args, c);\n\t\tverify(mock).process(\n\t\t\t\t(AggregateProcessAllWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"N"}],"commitId":"db759c5303bef8b412a183b4bcdf6d11abb7f327","commitMessage":"@@@[FLINK-4953] Allow access to \"time\" in ProcessWindowFunction.Context\n","date":"2017-04-27 21:09:08","modifiedFileCount":"12","status":"M","submitter":"manuzhang"},{"authorTime":"2017-10-14 01:17:01","codes":[{"authorDate":"2017-10-14 01:17:01","commitOrder":5,"curCode":"\tpublic void testInternalAggregateProcessWindowFunction() throws Exception {\n\n\t\tAggregateProcessWindowFunctionMock mock = mock(AggregateProcessWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessWindowFunction<Long, Set<Long>, Map<Long, Long>, String, Long, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\tdoAnswer(new Answer() {\n\t\t\t@Override\n\t\t\tpublic Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tProcessWindowFunctionMock.Context c =\n\t\t\t\t\t(ProcessWindowFunction.Context) invocationOnMock.getArguments()[1];\n\t\t\t\tc.currentProcessingTime();\n\t\t\t\tc.currentWatermark();\n\t\t\t\tc.windowState();\n\t\t\t\tc.globalState();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mock).process(\n\t\t\t\teq(42L),\n\t\t\t\t(AggregateProcessWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\twindowFunction.process(42L, w, ctx, args, c);\n\t\tverify(ctx).currentProcessingTime();\n\t\tverify(ctx).currentWatermark();\n\t\tverify(ctx).windowState();\n\t\tverify(ctx).globalState();\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-10-21 15:33:38","endLine":538,"groupId":"103330","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testInternalAggregateProcessWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/5b24c654d9e3c65c1b4265503b0739ab2a95a1.src","preCode":"\tpublic void testInternalAggregateProcessWindowFunction() throws Exception {\n\n\t\tAggregateProcessWindowFunctionMock mock = mock(AggregateProcessWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessWindowFunction<Long, Set<Long>, Map<Long, Long>, String, Long, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\tdoAnswer(new Answer() {\n\t\t\t@Override\n\t\t\tpublic Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tProcessWindowFunctionMock.Context c =\n\t\t\t\t\t(ProcessWindowFunction.Context) invocationOnMock.getArguments()[1];\n\t\t\t\tc.currentProcessingTime();\n\t\t\t\tc.currentWatermark();\n\t\t\t\tc.windowState();\n\t\t\t\tc.globalState();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mock).process(\n\t\t\t\teq(42L),\n\t\t\t\t(AggregateProcessWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\twindowFunction.process(42L, w, ctx, args, c);\n\t\tverify(ctx).currentProcessingTime();\n\t\tverify(ctx).currentWatermark();\n\t\tverify(ctx).windowState();\n\t\tverify(ctx).globalState();\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":446,"status":"M"},{"authorDate":"2017-10-14 01:17:01","commitOrder":5,"curCode":"\tpublic void testInternalAggregateProcessAllWindowFunction() throws Exception {\n\n\t\tAggregateProcessAllWindowFunctionMock mock = mock(AggregateProcessAllWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessAllWindowFunction<Long, Set<Long>, Map<Long, Long>, String, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\twindowFunction.process(((byte) 0), w, ctx, args, c);\n\t\tverify(mock).process(\n\t\t\t\t(AggregateProcessAllWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-10-21 15:33:38","endLine":617,"groupId":"103330","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testInternalAggregateProcessAllWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/5b24c654d9e3c65c1b4265503b0739ab2a95a1.src","preCode":"\tpublic void testInternalAggregateProcessAllWindowFunction() throws Exception {\n\n\t\tAggregateProcessAllWindowFunctionMock mock = mock(AggregateProcessAllWindowFunctionMock.class);\n\n\t\tInternalAggregateProcessAllWindowFunction<Long, Set<Long>, Map<Long, Long>, String, TimeWindow> windowFunction =\n\t\t\t\tnew InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long, Set<Long>, Map<Long, Long>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> createAccumulator() {\n\t\t\t\t\t\treturn new HashSet<>();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void add(Long value, Set<Long> accumulator) {\n\t\t\t\t\t\taccumulator.add(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Map<Long, Long> getResult(Set<Long> accumulator) {\n\t\t\t\t\t\tMap<Long, Long> result = new HashMap<>();\n\t\t\t\t\t\tfor (Long in : accumulator) {\n\t\t\t\t\t\t\tresult.put(in, in);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Set<Long> merge(Set<Long> a, Set<Long> b) {\n\t\t\t\t\t\ta.addAll(b);\n\t\t\t\t\t\treturn a;\n\t\t\t\t\t}\n\t\t\t\t}, mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tList<Long> args = new LinkedList<>();\n\t\targs.add(23L);\n\t\targs.add(24L);\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\twindowFunction.process(((byte) 0), w, ctx, args, c);\n\t\tverify(mock).process(\n\t\t\t\t(AggregateProcessAllWindowFunctionMock.Context) anyObject(),\n\t\t\t\t(Iterable) argThat(containsInAnyOrder(allOf(\n\t\t\t\t\t\thasEntry(is(23L), is(23L)),\n\t\t\t\t\t\thasEntry(is(24L), is(24L))))),\n\t\t\t\teq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":542,"status":"M"}],"commitId":"f176c917d56fa682c047930be9e579b635d7268b","commitMessage":"@@@[FLINK-7837] Extend AggregateFunction.add() to work with immutable types\n","date":"2017-10-21 15:33:38","modifiedFileCount":"14","status":"M","submitter":"Aljoscha Krettek"}]
