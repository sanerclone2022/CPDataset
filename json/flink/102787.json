[{"authorTime":"2016-09-05 18:01:11","codes":[{"authorDate":"2016-09-05 18:01:11","commitOrder":1,"curCode":"\tprivate void testOnTimeFireAndPurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(0, 2)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\ttimeAdaptor.registerTimer(context, 0L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldFireAndPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 0L);\n\n\t\tverify(mockWindowFunction, times(2)).apply(eq(0), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(2, 4)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\t}\n","date":"2017-01-24 17:42:34","endLine":960,"groupId":"32491","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnTimeFireAndPurge","params":"(finalTimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7c/4d71171f808dc4b8968f061629ea4a416f6967.src","preCode":"\tprivate void testOnTimeFireAndPurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(0, 2)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\ttimeAdaptor.registerTimer(context, 0L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldFireAndPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 0L);\n\n\t\tverify(mockWindowFunction, times(2)).apply(eq(0), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(2, 4)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":911,"status":"B"},{"authorDate":"2016-09-05 18:01:11","commitOrder":1,"curCode":"\tprivate void testOnTimePurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(4, 6)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\t\r\n\t\t\t\ttimeAdaptor.registerTimer(context, 1L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\n\t\t\r\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t}\n","date":"2017-01-24 17:42:34","endLine":1021,"groupId":"32491","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOnTimePurge","params":"(finalTimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7c/4d71171f808dc4b8968f061629ea4a416f6967.src","preCode":"\tprivate void testOnTimePurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(4, 6)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\t\r\n\t\t\t\ttimeAdaptor.registerTimer(context, 1L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\n\t\t\r\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"B"}],"commitId":"d1475ee86fb58ab70a6dc785d08f190189ede43d","commitMessage":"@@@[FLINK-4552] Refactor WindowOperator/Trigger Tests\n\nBefore.  tests for WindowOperator.  WindowAssigner.  Trigger and\nWindowFunction were all conflated in WindowOperatorTest. All of these\ntest that a certain combination of a Trigger.  WindowAssigner and\nWindowFunction produce the expected output.\n\nThis change modularizes these tests and spreads them out across multiple\nfiles. For example.  one per trigger/window assigner.\n\nThe new WindowOperatorContractTest verifies that the interaction between\nWindowOperator and the various other parts works as expected.  that the\ncorrect methods on Trigger and WindowFunction are called at the expected\ntime and that snapshotting.  timers.  cleanup etc. work correctly. These\ntests also verify that the different state types and WindowFunctions\nwork correctly.\n\nFor trigger tests this introduces TriggerTestHarness. This can be used\nto inject elements into Triggers they fire at the correct times. The\nactual output of the WindowFunction is not important for these tests.\nThe new tests also make sure that triggers correctly clean up state and\ntimers.\n\nWindowAssigner tests verify the behaviour of window assigners in\nisolation.  They also test.  for example.  whether offset parameter of\ntime-based windows work correctly.\n\nWe keep the old WindowOperatorTest because it still provides some level\nof coverage and doesn't take long to run.\n","date":"2017-01-24 17:42:34","modifiedFileCount":"16","status":"B","submitter":"Aljoscha Krettek"},{"authorTime":"2017-03-21 22:00:24","codes":[{"authorDate":"2017-03-21 22:00:24","commitOrder":2,"curCode":"\tprivate void testOnTimeFireAndPurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(0, 2)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\ttimeAdaptor.registerTimer(context, 0L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldFireAndPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 0L);\n\n\t\tverify(mockWindowFunction, times(2)).apply(eq(0), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(2, 4)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\t}\n","date":"2017-03-23 23:29:01","endLine":931,"groupId":"32491","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnTimeFireAndPurge","params":"(finalTimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/c7b3eb9415cfed7ad5989621aa40b3d9cc5963.src","preCode":"\tprivate void testOnTimeFireAndPurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(0, 2)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\ttimeAdaptor.registerTimer(context, 0L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldFireAndPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 0L);\n\n\t\tverify(mockWindowFunction, times(2)).apply(eq(0), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(2, 4)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":882,"status":"M"},{"authorDate":"2017-03-21 22:00:24","commitOrder":2,"curCode":"\tprivate void testOnTimePurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(4, 6)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\t\r\n\t\t\t\ttimeAdaptor.registerTimer(context, 1L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\n\t\t\r\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t}\n","date":"2017-03-23 23:29:01","endLine":992,"groupId":"32491","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOnTimePurge","params":"(finalTimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/c7b3eb9415cfed7ad5989621aa40b3d9cc5963.src","preCode":"\tprivate void testOnTimePurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, intListDescriptor, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(4, 6)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\t\r\n\t\t\t\ttimeAdaptor.registerTimer(context, 1L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\n\t\t\r\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":943,"status":"M"}],"commitId":"3c4b156527e9ca7cb2dafdda706913e91d688133","commitMessage":"@@@[hotfix] Add EvictingWindowOperatorContractTest\n\nThe existing WindowOperatorContractTest is turned into a test base while\nRegularWindowOperatorContract test tests WindowOperator and\nEvictingWindowOperatorTest tests EvictingWindowOperator. For this to\nwork.  the base tests now always use List windows and we have specific\ntests for reducing/folding windows in RegularWindowOperatorContractTest.\n\nThis also patches in the missing side output support for\nEvictingWindowOperator.\n","date":"2017-03-23 23:29:01","modifiedFileCount":"3","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2017-03-21 22:00:24","codes":[{"authorDate":"2017-03-06 12:07:18","commitOrder":3,"curCode":"\tprivate void testOnTimeFireAndPurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(0, 2)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\ttimeAdaptor.registerTimer(context, 0L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldFireAndPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 0L);\n\n\t\tverify(mockWindowFunction, times(2)).process(eq(0), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(2, 4)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\t}\n","date":"2017-03-25 23:59:17","endLine":936,"groupId":"102787","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnTimeFireAndPurge","params":"(finalTimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fa/ab505873556fc6ca7cc3435664112acb73c14c.src","preCode":"\tprivate void testOnTimeFireAndPurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(0, 2)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\ttimeAdaptor.registerTimer(context, 0L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldFireAndPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 0L);\n\n\t\tverify(mockWindowFunction, times(2)).apply(eq(0), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(2, 4)), intIterable(0), WindowOperatorContractTest.<Void>anyCollector());\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":887,"status":"M"},{"authorDate":"2017-03-21 22:00:24","commitOrder":3,"curCode":"\tprivate void testOnTimePurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(4, 6)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\t\r\n\t\t\t\ttimeAdaptor.registerTimer(context, 1L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\n\t\t\r\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t}\n","date":"2017-03-23 23:29:01","endLine":992,"groupId":"102787","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOnTimePurge","params":"(finalTimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/c7b3eb9415cfed7ad5989621aa40b3d9cc5963.src","preCode":"\tprivate void testOnTimePurge(final TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\ttimeAdaptor.setIsEventTime(mockAssigner);\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, Void, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, Void> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\ttimeAdaptor.advanceTime(testHarness, Long.MIN_VALUE);\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Arrays.asList(new TimeWindow(2, 4), new TimeWindow(4, 6)));\n\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t\tassertEquals(0, testHarness.numKeyedStateEntries());\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\tTrigger.TriggerContext context = (Trigger.TriggerContext) invocation.getArguments()[3];\n\t\t\t\t\r\n\t\t\t\ttimeAdaptor.registerTimer(context, 1L);\n\t\t\t\tcontext.getPartitionedState(valueStateDescriptor).update(\"hello\");\n\t\t\t\treturn TriggerResult.CONTINUE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\ttimeAdaptor.shouldPurgeOnTime(mockTrigger);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tassertEquals(4, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(4, timeAdaptor.numTimers(testHarness)); \r\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\t\r\n\t\tverify(mockTrigger, never()).clear(anyTimeWindow(), anyTriggerContext());\n\n\t\t\r\n\t\tassertEquals(2, testHarness.numKeyedStateEntries()); \r\n\t\tassertEquals(2, timeAdaptor.numTimers(testHarness)); \r\n\n\t\t\r\n\t\tassertEquals(0, testHarness.extractOutputStreamRecords().size());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":943,"status":"N"}],"commitId":"fad201bfb0b1f2757f68f7b3ffaf97a486eb93e8","commitMessage":"@@@[FLINK-5929] Allow Access to Per-Window State in ProcessWindowFunction\n","date":"2017-03-25 23:59:17","modifiedFileCount":"24","status":"M","submitter":"Seth Wiesman"}]
