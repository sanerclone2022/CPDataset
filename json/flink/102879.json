[{"authorTime":"2020-10-08 18:37:13","codes":[{"authorDate":"2021-01-12 13:21:13","commitOrder":2,"curCode":"    private CheckpointedInputGate setupInputGate(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            ResumeCountingConnectionManager connectionManager)\n            throws Exception {\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .build();\n        singleInputGate.setup();\n        CheckpointBarrierTracker barrierHandler =\n                new CheckpointBarrierTracker(\n                        numberOfChannels,\n                        new AbstractInvokable(new DummyEnvironment()) {\n                            @Override\n                            public void invoke() {}\n                        });\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","date":"2021-01-12 19:39:38","endLine":121,"groupId":"36988","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupInputGate","params":"(intnumberOfChannels@NetworkBufferPoolnetworkBufferPool@ResumeCountingConnectionManagerconnectionManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/7e2903d92d5624b8d309bbda699b85b190f7b1.src","preCode":"    private CheckpointedInputGate setupInputGate(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            ResumeCountingConnectionManager connectionManager)\n            throws Exception {\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .build();\n        singleInputGate.setup();\n        CheckpointBarrierTracker barrierHandler =\n                new CheckpointBarrierTracker(\n                        numberOfChannels,\n                        new AbstractInvokable(new DummyEnvironment()) {\n                            @Override\n                            public void invoke() {}\n                        });\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/CheckpointedInputGateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"},{"authorDate":"2020-10-08 18:37:13","commitOrder":2,"curCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","date":"2020-10-10 01:06:13","endLine":127,"groupId":"45072","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildGate","params":"(NetworkBufferPoolnetworkBufferPool@intnumberOfChannels)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/816595e73f5cccef24c3b83a9c0640cafb4c23.src","preCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/ChannelPersistenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"NB"}],"commitId":"92b21963c74345fb954e161a094db30a5bbadfb6","commitMessage":"@@@[FLINK-20453][runtime][checkpoint] Move checkpointing classes to an appropriate package\n","date":"2021-01-12 19:39:38","modifiedFileCount":"8","status":"M","submitter":"Yuan Mei"},{"authorTime":"2020-10-08 18:37:13","codes":[{"authorDate":"2021-01-29 20:45:17","commitOrder":3,"curCode":"    private CheckpointedInputGate setupInputGate(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            ConnectionManager connectionManager)\n            throws Exception {\n\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .build();\n        singleInputGate.setup();\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        CheckpointBarrierTracker barrierHandler =\n                new CheckpointBarrierTracker(\n                        numberOfChannels,\n                        new AbstractInvokable(new DummyEnvironment()) {\n                            @Override\n                            public void invoke() {}\n                        });\n\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","date":"2021-01-30 18:01:43","endLine":262,"groupId":"45072","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupInputGate","params":"(intnumberOfChannels@NetworkBufferPoolnetworkBufferPool@ConnectionManagerconnectionManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1f/fc850e992159f7157f3e2932c0b4c229711613.src","preCode":"    private CheckpointedInputGate setupInputGate(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            ResumeCountingConnectionManager connectionManager)\n            throws Exception {\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .build();\n        singleInputGate.setup();\n        CheckpointBarrierTracker barrierHandler =\n                new CheckpointBarrierTracker(\n                        numberOfChannels,\n                        new AbstractInvokable(new DummyEnvironment()) {\n                            @Override\n                            public void invoke() {}\n                        });\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/CheckpointedInputGateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2020-10-08 18:37:13","commitOrder":3,"curCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","date":"2020-10-10 01:06:13","endLine":127,"groupId":"45072","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildGate","params":"(NetworkBufferPoolnetworkBufferPool@intnumberOfChannels)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/816595e73f5cccef24c3b83a9c0640cafb4c23.src","preCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/ChannelPersistenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"a23744795d95c18c62cb6c0156e33f019a9adbb2","commitMessage":"@@@[FLINK-20654][network] Fix incorrect spilling/persisting logic in RemoteInputChannel\n\nThis commit fixes a bug where RemoteInputChannel was incorrectly deciding which\nbuffers should be spilled.  if it has received an obsoleted CheckpointBarrier. \nthat hasn't been cancelled (yet?).\n","date":"2021-01-30 18:01:43","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-10-08 18:37:13","codes":[{"authorDate":"2021-03-04 20:52:18","commitOrder":4,"curCode":"    private CheckpointedInputGate setupInputGate(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            ConnectionManager connectionManager)\n            throws Exception {\n\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .build();\n        singleInputGate.setup();\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        CheckpointBarrierTracker barrierHandler =\n                new CheckpointBarrierTracker(\n                        numberOfChannels,\n                        new AbstractInvokable(new DummyEnvironment()) {\n                            @Override\n                            public void invoke() {}\n                        },\n                        SystemClock.getInstance());\n\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","date":"2021-03-31 14:27:06","endLine":357,"groupId":"45072","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupInputGate","params":"(intnumberOfChannels@NetworkBufferPoolnetworkBufferPool@ConnectionManagerconnectionManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/d480798810944216fe7e3d3d9a331dc8942cf4.src","preCode":"    private CheckpointedInputGate setupInputGate(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            ConnectionManager connectionManager)\n            throws Exception {\n\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .build();\n        singleInputGate.setup();\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        CheckpointBarrierTracker barrierHandler =\n                new CheckpointBarrierTracker(\n                        numberOfChannels,\n                        new AbstractInvokable(new DummyEnvironment()) {\n                            @Override\n                            public void invoke() {}\n                        });\n\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/CheckpointedInputGateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2020-10-08 18:37:13","commitOrder":4,"curCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","date":"2020-10-10 01:06:13","endLine":127,"groupId":"45072","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildGate","params":"(NetworkBufferPoolnetworkBufferPool@intnumberOfChannels)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/816595e73f5cccef24c3b83a9c0640cafb4c23.src","preCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/ChannelPersistenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"0787073790835ad3d36065cd0ff7362a3d909905","commitMessage":"@@@[refactor][checkpoint] Use Clock instead of directly calling System.nanoTime around checkpoint barriers\n","date":"2021-03-31 14:27:06","modifiedFileCount":"13","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-10-08 18:37:13","codes":[{"authorDate":"2021-07-15 19:40:11","commitOrder":5,"curCode":"    private CheckpointedInputGate setupInputGate(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            ConnectionManager connectionManager)\n            throws Exception {\n\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .build();\n        singleInputGate.setup();\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        CheckpointBarrierTracker barrierHandler =\n                new CheckpointBarrierTracker(\n                        numberOfChannels,\n                        new AbstractInvokable(new DummyEnvironment()) {\n                            @Override\n                            public void invoke() {}\n                        },\n                        SystemClock.getInstance(),\n                        true);\n\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","date":"2021-07-28 18:47:48","endLine":358,"groupId":"102879","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"setupInputGate","params":"(intnumberOfChannels@NetworkBufferPoolnetworkBufferPool@ConnectionManagerconnectionManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ae/531f157a748acab51bab798a4e60371850ef67.src","preCode":"    private CheckpointedInputGate setupInputGate(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            ConnectionManager connectionManager)\n            throws Exception {\n\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .build();\n        singleInputGate.setup();\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        CheckpointBarrierTracker barrierHandler =\n                new CheckpointBarrierTracker(\n                        numberOfChannels,\n                        new AbstractInvokable(new DummyEnvironment()) {\n                            @Override\n                            public void invoke() {}\n                        },\n                        SystemClock.getInstance());\n\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/CheckpointedInputGateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2020-10-08 18:37:13","commitOrder":5,"curCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","date":"2020-10-10 01:06:13","endLine":127,"groupId":"102879","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildGate","params":"(NetworkBufferPoolnetworkBufferPool@intnumberOfChannels)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/816595e73f5cccef24c3b83a9c0640cafb4c23.src","preCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/ChannelPersistenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"7c902745fff13e70908d32084d2888a69e13fc8b","commitMessage":"@@@[FLINK-23460] Use a global feature flag in the CheckpointBarrierHandler\n","date":"2021-07-28 18:47:48","modifiedFileCount":"21","status":"M","submitter":"Dawid Wysakowicz"}]
