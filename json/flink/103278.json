[{"authorTime":"2016-10-28 21:37:42","codes":[{"authorDate":"2016-10-25 18:25:30","commitOrder":2,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","date":"2016-10-27 05:26:29","endLine":173,"groupId":"45932","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/f426b8d8571f1f92914aa16e552f8c6b473a47.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"NB"},{"authorDate":"2016-10-28 21:37:42","commitOrder":2,"curCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int MAX_PARALLELISM = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (MAX_PARALLELISM / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, MAX_PARALLELISM - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, MAX_PARALLELISM);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, MAX_PARALLELISM);\n\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tMAX_PARALLELISM,\n\t\t\t\t\t\t1, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\n\t\t\r\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tMAX_PARALLELISM,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.processWatermark(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.processWatermark(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\tTestOperator testOperator2 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator2,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tMAX_PARALLELISM,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t1 );\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.processWatermark(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.processWatermark(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.setProcessingTime(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t}\n","date":"2016-11-04 17:24:40","endLine":300,"groupId":"41724","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateAndTimerStateShufflingScalingUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fd/053531ceb1e493a370ee6a9b6772a5a22c87dc.src","preCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int MAX_PARALLELISM = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (MAX_PARALLELISM / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, MAX_PARALLELISM - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, MAX_PARALLELISM);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, MAX_PARALLELISM);\n\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tMAX_PARALLELISM,\n\t\t\t\t\t\t1, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\n\t\t\r\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tMAX_PARALLELISM,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.processWatermark(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.processWatermark(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\tTestOperator testOperator2 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator2,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tMAX_PARALLELISM,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t1 );\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.processWatermark(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.processWatermark(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.setProcessingTime(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"}],"commitId":"c385897661f36122e34ffa6a11996b983e2dc14a","commitMessage":"@@@[FLINK-4960] Add AbstractStreamOperatorTestHarness.repackageState()\n\nThe new method allows testing operator scale-in by combining several\nOperatorStateHandles (that result from TestHarness.snapshot()) into one\nto allow restoring an operator with a lower parallelism.\n","date":"2016-11-04 17:24:40","modifiedFileCount":"2","status":"M","submitter":"kl0u"},{"authorTime":"2017-05-17 20:01:04","codes":[{"authorDate":"2016-10-25 18:25:30","commitOrder":3,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","date":"2016-10-27 05:26:29","endLine":173,"groupId":"45932","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/f426b8d8571f1f92914aa16e552f8c6b473a47.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"},{"authorDate":"2017-05-17 20:01:04","commitOrder":3,"curCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int maxParallelism = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (maxParallelism / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, maxParallelism - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, maxParallelism);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, maxParallelism);\n\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t1, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\n\t\t\r\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.processWatermark(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.processWatermark(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\tTestOperator testOperator2 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator2,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t1 );\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.processWatermark(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.processWatermark(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.setProcessingTime(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t}\n","date":"2017-05-23 04:22:24","endLine":380,"groupId":"41724","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateAndTimerStateShufflingScalingUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/79/8c81f793d54f645a023c5a90d2adac5d72bc8d.src","preCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int MAX_PARALLELISM = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (MAX_PARALLELISM / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, MAX_PARALLELISM - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, MAX_PARALLELISM);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, MAX_PARALLELISM);\n\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tMAX_PARALLELISM,\n\t\t\t\t\t\t1, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\n\t\t\r\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tMAX_PARALLELISM,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.processWatermark(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.processWatermark(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\tTestOperator testOperator2 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator2,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tMAX_PARALLELISM,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t1 );\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.processWatermark(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.processWatermark(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.setProcessingTime(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"12b4185c6c09101b64e12a84c33dc4d28f95cff9","commitMessage":"@@@[FLINK-6603] [streaming] Enable checkstyle on test sources\n\nUpdates / reverts the import order by sections:\n- org.apache.flink.*\n- all other imports\n- javax.*\n- java.*\n- static imports\n\nAdds EmptyLineSeparator to enforce an extra newline (not enforced\nbetween field or local variable declarations).\n\nThis closes #3941\n","date":"2017-05-23 04:22:24","modifiedFileCount":"395","status":"M","submitter":"Greg Hogan"},{"authorTime":"2018-02-23 17:36:09","codes":[{"authorDate":"2016-10-25 18:25:30","commitOrder":4,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","date":"2016-10-27 05:26:29","endLine":173,"groupId":"45932","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/f426b8d8571f1f92914aa16e552f8c6b473a47.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"},{"authorDate":"2018-02-23 17:36:09","commitOrder":4,"curCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int maxParallelism = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (maxParallelism / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, maxParallelism - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, maxParallelism);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, maxParallelism);\n\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t1, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\n\t\t\r\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.processWatermark(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.processWatermark(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\tTestOperator testOperator2 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator2,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t1 );\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.processWatermark(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.processWatermark(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.setProcessingTime(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t}\n","date":"2018-02-25 22:10:28","endLine":384,"groupId":"10513","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateAndTimerStateShufflingScalingUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/cae276082a1c50139b8113e27b143d391293e5.src","preCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int maxParallelism = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (maxParallelism / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, maxParallelism - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, maxParallelism);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, maxParallelism);\n\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t1, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\n\t\t\r\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.processWatermark(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.processWatermark(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\tTestOperator testOperator2 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator2,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t1 );\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.processWatermark(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.processWatermark(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.setProcessingTime(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"617e67c2f540b62b97ca5198b6a5c42b89b6f392","commitMessage":"@@@[hotfix] Remove outdated class OperatorStateHandles and replace it with OperatorSubtaskState\n","date":"2018-02-25 22:10:28","modifiedFileCount":"34","status":"M","submitter":"Stefan Richter"},{"authorTime":"2019-02-23 03:19:12","codes":[{"authorDate":"2016-10-25 18:25:30","commitOrder":5,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","date":"2016-10-27 05:26:29","endLine":173,"groupId":"45932","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/f426b8d8571f1f92914aa16e552f8c6b473a47.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"},{"authorDate":"2019-02-23 03:19:12","commitOrder":5,"curCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int maxParallelism = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (maxParallelism / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, maxParallelism - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, maxParallelism);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, maxParallelism);\n\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t1, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\n\t\t\r\n\t\tOperatorSubtaskState initState1 = AbstractStreamOperatorTestHarness.repartitionOperatorState(\n\t\t\tsnapshot, maxParallelism, 1, 2, 0);\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(initState1);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.processWatermark(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.processWatermark(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\tOperatorSubtaskState initState2 = AbstractStreamOperatorTestHarness.repartitionOperatorState(\n\t\t\tsnapshot, maxParallelism, 1, 2, 1);\n\n\t\tTestOperator testOperator2 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator2,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t1 );\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(initState2);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.processWatermark(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.processWatermark(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.setProcessingTime(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t}\n","date":"2019-02-23 03:19:12","endLine":391,"groupId":"38644","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateAndTimerStateShufflingScalingUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/28/e0ac40b1660754fe8c3e7051d5ae708815a1d3.src","preCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int maxParallelism = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (maxParallelism / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, maxParallelism - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, maxParallelism);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, maxParallelism);\n\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t1, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\n\t\t\r\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t0 );\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.processWatermark(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.processWatermark(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\tTestOperator testOperator2 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator2,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\t2, \n\t\t\t\t\t\t1 );\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.processWatermark(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.processWatermark(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.setProcessingTime(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"bdb776035f7266916e9debc7a0d4e7cc5cb1dfd3","commitMessage":"@@@[FLINK-11618][state] Refactor operator state repartition mechanism\n\nThis closes #7711.\n","date":"2019-02-23 03:19:12","modifiedFileCount":"20","status":"M","submitter":"Yun Tang"},{"authorTime":"2020-03-20 00:35:43","codes":[{"authorDate":"2020-03-20 00:35:43","commitOrder":6,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\ttry (KeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness = createTestHarness()) {\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\t\t\ttestHarness.processWatermark(0L);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\t\ttestHarness.processWatermark(20L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\t\ttestHarness.setProcessingTime(10L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t\t}\n\t}\n","date":"2020-03-26 14:55:31","endLine":222,"groupId":"103278","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/3067534079f93a78ba10f4f1ce6a65ed2a22a6.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness),\n\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness),\n\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2020-03-20 00:35:43","commitOrder":6,"curCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int maxParallelism = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (maxParallelism / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, maxParallelism - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, maxParallelism);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, maxParallelism);\n\n\t\tOperatorSubtaskState snapshot;\n\n\t\ttry (KeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tcreateTestHarness(maxParallelism, 1, 0)) {\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.processWatermark(0L);\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\t\tsnapshot = testHarness.snapshot(0, 0);\n\t\t}\n\n\t\t\r\n\t\tOperatorSubtaskState initState1 = AbstractStreamOperatorTestHarness.repartitionOperatorState(\n\t\t\tsnapshot, maxParallelism, 1, 2, 0);\n\n\t\ttry (KeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tcreateTestHarness(maxParallelism, 2, 0)) {\n\t\t\ttestHarness1.setup();\n\t\t\ttestHarness1.initializeState(initState1);\n\t\t\ttestHarness1.open();\n\n\t\t\ttestHarness1.processWatermark(10L);\n\n\t\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness1.processWatermark(20L);\n\n\t\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\ttestHarness1.setProcessingTime(10L);\n\n\t\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness1.setProcessingTime(20L);\n\n\t\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\t\t}\n\n\t\t\r\n\t\tOperatorSubtaskState initState2 = AbstractStreamOperatorTestHarness.repartitionOperatorState(\n\t\t\tsnapshot, maxParallelism, 1, 2, 1);\n\n\t\ttry (KeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\t\tcreateTestHarness(maxParallelism, 2, 1)) {\n\t\t\ttestHarness2.setup();\n\t\t\ttestHarness2.initializeState(initState2);\n\t\t\ttestHarness2.open();\n\n\t\t\ttestHarness2.processWatermark(10L);\n\n\t\t\t\r\n\t\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\t\ttestHarness2.processWatermark(20L);\n\n\t\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\t\r\n\t\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\t\ttestHarness2.setProcessingTime(20L);\n\n\t\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t\t}\n\t}\n","date":"2020-03-26 14:55:31","endLine":331,"groupId":"103278","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateAndTimerStateShufflingScalingUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/3067534079f93a78ba10f4f1ce6a65ed2a22a6.src","preCode":"\tpublic void testStateAndTimerStateShufflingScalingUp() throws Exception {\n\t\tfinal int maxParallelism = 10;\n\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tKeyGroupRange subKeyGroupRange1 = new KeyGroupRange(0, (maxParallelism / 2) - 1);\n\t\tKeyGroupRange subKeyGroupRange2 = new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1, maxParallelism - 1);\n\n\t\t\r\n\t\tint key1 = getKeyInKeyGroupRange(subKeyGroupRange1, maxParallelism);\n\t\tint key2 = getKeyInKeyGroupRange(subKeyGroupRange2, maxParallelism);\n\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\ttestOperator,\n\t\t\t\tnew TestKeySelector(),\n\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\tmaxParallelism,\n\t\t\t\t1, \n\t\t\t\t0 );\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(key1, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(key2, \"SET_STATE:CIAO\"), 0);\n\n\t\tassertTrue(extractResult(testHarness).isEmpty());\n\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\n\t\t\r\n\t\tOperatorSubtaskState initState1 = AbstractStreamOperatorTestHarness.repartitionOperatorState(\n\t\t\tsnapshot, maxParallelism, 1, 2, 0);\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\ttestOperator1,\n\t\t\t\tnew TestKeySelector(),\n\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\tmaxParallelism,\n\t\t\t\t2, \n\t\t\t\t0 );\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(initState1);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.processWatermark(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.processWatermark(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(extractResult(testHarness1), contains(\"ON_PROC_TIME:HELLO\"));\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertTrue(extractResult(testHarness1).isEmpty());\n\n\t\t\r\n\t\tOperatorSubtaskState initState2 = AbstractStreamOperatorTestHarness.repartitionOperatorState(\n\t\t\tsnapshot, maxParallelism, 1, 2, 1);\n\n\t\tTestOperator testOperator2 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness2 =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\ttestOperator2,\n\t\t\t\tnew TestKeySelector(),\n\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\tmaxParallelism,\n\t\t\t\t2, \n\t\t\t\t1 );\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(initState2);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.processWatermark(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.processWatermark(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_EVENT_TIME:CIAO\"));\n\n\t\ttestHarness2.setProcessingTime(10L);\n\n\t\t\r\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\n\t\ttestHarness2.setProcessingTime(20L);\n\n\t\tassertThat(extractResult(testHarness2), contains(\"ON_PROC_TIME:CIAO\"));\n\n\t\tassertTrue(extractResult(testHarness2).isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"a443b04d20764257bb45efd53b4dcec5f8be59f1","commitMessage":"@@@[FLINK-16317][operators] Refactor AbstractStreamOperatorTest class\n\nThis deduplicates code a little bit.  fixes not closing issue and makes it ready for future extension that comes in next commit.\n","date":"2020-03-26 14:55:31","modifiedFileCount":"1","status":"M","submitter":"Piotr Nowojski"}]
