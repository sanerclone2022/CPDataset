[{"authorTime":"2020-05-13 21:15:03","codes":[{"authorDate":"2020-11-25 23:29:38","commitOrder":5,"curCode":"\tprivate Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> createPendingPartsPerCheckpoint(int noOfCheckpoints) {\n\t\tfinal Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingCommittablesPerCheckpoint = new HashMap<>();\n\t\tfor (int checkpointId = 0; checkpointId < noOfCheckpoints; checkpointId++) {\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pending = new ArrayList<>();\n\t\t\tpending.add(new OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(new NoOpRecoverable()));\n\t\t\tpendingCommittablesPerCheckpoint.put((long) checkpointId, pending);\n\t\t}\n\t\treturn pendingCommittablesPerCheckpoint;\n\t}\n","date":"2020-11-30 22:18:17","endLine":548,"groupId":"48987","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createPendingPartsPerCheckpoint","params":"(intnoOfCheckpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/91dd722cabbe507fc3e7a30194dc2fddb8c7bf.src","preCode":"\tprivate Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> createPendingPartsPerCheckpoint(int noOfCheckpoints) {\n\t\tfinal Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingCommittablesPerCheckpoint = new HashMap<>();\n\t\tfor (int checkpointId = 0; checkpointId < noOfCheckpoints; checkpointId++) {\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pending = new ArrayList<>();\n\t\t\tpending.add(new OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(new NoOpRecoverable()));\n\t\t\tpendingCommittablesPerCheckpoint.put((long) checkpointId, pending);\n\t\t}\n\t\treturn pendingCommittablesPerCheckpoint;\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterBucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"B"},{"authorDate":"2020-05-13 21:15:03","commitOrder":5,"curCode":"\tprivate Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> createPendingPartsPerCheckpoint(int noOfCheckpoints) {\n\t\tfinal Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingCommittablesPerCheckpoint = new HashMap<>();\n\t\tfor (int checkpointId = 0; checkpointId < noOfCheckpoints; checkpointId++) {\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pending = new ArrayList<>();\n\t\t\tpending.add(new OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(new NoOpRecoverable()));\n\t\t\tpendingCommittablesPerCheckpoint.put((long) checkpointId, pending);\n\t\t}\n\t\treturn pendingCommittablesPerCheckpoint;\n\t}\n","date":"2020-05-18 22:09:50","endLine":446,"groupId":"48987","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createPendingPartsPerCheckpoint","params":"(intnoOfCheckpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/d9a09e43e62f04999db4e04d288b2501baed47.src","preCode":"\tprivate Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> createPendingPartsPerCheckpoint(int noOfCheckpoints) {\n\t\tfinal Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingCommittablesPerCheckpoint = new HashMap<>();\n\t\tfor (int checkpointId = 0; checkpointId < noOfCheckpoints; checkpointId++) {\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pending = new ArrayList<>();\n\t\t\tpending.add(new OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(new NoOpRecoverable()));\n\t\t\tpendingCommittablesPerCheckpoint.put((long) checkpointId, pending);\n\t\t}\n\t\treturn pendingCommittablesPerCheckpoint;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"NB"}],"commitId":"da1ad03d68e6c57a95d7375259247053aa8fc24e","commitMessage":"@@@[FLINK-20337] Let FileSink restore state from StreamingFileSink\n\nThe FileWriterBucketStateSerializer is bumped past version 2 to allow it\nto restore the same old versions as BucketStateSerialize (from\nStreamingFileSink).\n","date":"2020-11-30 22:18:17","modifiedFileCount":"7","status":"M","submitter":"Yun Gao"},{"authorTime":"2020-12-28 21:30:59","codes":[{"authorDate":"2020-12-28 21:30:59","commitOrder":6,"curCode":"            createPendingPartsPerCheckpoint(int noOfCheckpoints) {\n        final Map<Long, List<InProgressFileWriter.PendingFileRecoverable>>\n                pendingCommittablesPerCheckpoint = new HashMap<>();\n        for (int checkpointId = 0; checkpointId < noOfCheckpoints; checkpointId++) {\n            final List<InProgressFileWriter.PendingFileRecoverable> pending = new ArrayList<>();\n            pending.add(\n                    new OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(\n                            new NoOpRecoverable()));\n            pendingCommittablesPerCheckpoint.put((long) checkpointId, pending);\n        }\n        return pendingCommittablesPerCheckpoint;\n    }\n","date":"2020-12-28 21:35:13","endLine":550,"groupId":"10974","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"createPendingPartsPerCheckpoint","params":"(intnoOfCheckpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/9b9f50ea00e3b392ee30ba20a91c69244e04be.src","preCode":"\tprivate Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> createPendingPartsPerCheckpoint(int noOfCheckpoints) {\n\t\tfinal Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingCommittablesPerCheckpoint = new HashMap<>();\n\t\tfor (int checkpointId = 0; checkpointId < noOfCheckpoints; checkpointId++) {\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pending = new ArrayList<>();\n\t\t\tpending.add(new OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(new NoOpRecoverable()));\n\t\t\tpendingCommittablesPerCheckpoint.put((long) checkpointId, pending);\n\t\t}\n\t\treturn pendingCommittablesPerCheckpoint;\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterBucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"M"},{"authorDate":"2020-12-28 21:30:59","commitOrder":6,"curCode":"            createPendingPartsPerCheckpoint(int noOfCheckpoints) {\n        final Map<Long, List<InProgressFileWriter.PendingFileRecoverable>>\n                pendingCommittablesPerCheckpoint = new HashMap<>();\n        for (int checkpointId = 0; checkpointId < noOfCheckpoints; checkpointId++) {\n            final List<InProgressFileWriter.PendingFileRecoverable> pending = new ArrayList<>();\n            pending.add(\n                    new OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(\n                            new NoOpRecoverable()));\n            pendingCommittablesPerCheckpoint.put((long) checkpointId, pending);\n        }\n        return pendingCommittablesPerCheckpoint;\n    }\n","date":"2020-12-28 21:35:13","endLine":475,"groupId":"10974","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createPendingPartsPerCheckpoint","params":"(intnoOfCheckpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9f/c09cdb110f04d1fa95b6b7b46445597e7f5e53.src","preCode":"\tprivate Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> createPendingPartsPerCheckpoint(int noOfCheckpoints) {\n\t\tfinal Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingCommittablesPerCheckpoint = new HashMap<>();\n\t\tfor (int checkpointId = 0; checkpointId < noOfCheckpoints; checkpointId++) {\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pending = new ArrayList<>();\n\t\t\tpending.add(new OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(new NoOpRecoverable()));\n\t\t\tpendingCommittablesPerCheckpoint.put((long) checkpointId, pending);\n\t\t}\n\t\treturn pendingCommittablesPerCheckpoint;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"M"}],"commitId":"c6997c97c575d334679915c328792b8a3067cfb5","commitMessage":"@@@[FLINK-20651] Format code with Spotless/google-java-format\n","date":"2020-12-28 21:35:13","modifiedFileCount":"11013","status":"M","submitter":"Rufus Refactor"}]
