[{"authorTime":"2017-02-17 11:19:18","codes":[{"authorDate":"2017-10-23 10:43:51","commitOrder":2,"curCode":"\tpublic void testAggregatingStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tAggregateFunction<String, TaskInfo, String> aggregate = (AggregateFunction<String, TaskInfo, String>) mock(AggregateFunction.class);\n\n\t\tAggregatingStateDescriptor<String, TaskInfo, String> descr =\n\t\t\t\tnew AggregatingStateDescriptor<>(\"name\", aggregate, TaskInfo.class);\n\n\t\tcontext.getAggregatingState(descr);\n\n\t\tAggregatingStateDescriptor<?, ?, ?> descrIntercepted = (AggregatingStateDescriptor<?, ?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2017-10-26 19:13:38","endLine":157,"groupId":"4498","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregatingStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/10/72eec10973d88bbd4a3d19afd7e1078c953f28.src","preCode":"\tpublic void testAggregatingStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tAggregateFunction<String, TaskInfo, String> aggregate = (AggregateFunction<String, TaskInfo, String>) mock(AggregateFunction.class);\n\n\t\tAggregatingStateDescriptor<String, TaskInfo, String> descr =\n\t\t\t\tnew AggregatingStateDescriptor<>(\"name\", aggregate, TaskInfo.class);\n\n\t\tcontext.getAggregatingState(descr);\n\n\t\tAggregatingStateDescriptor<?, ?, ?> descrIntercepted = (AggregatingStateDescriptor<?, ?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"},{"authorDate":"2017-02-17 11:19:18","commitOrder":2,"curCode":"\tpublic void testMapStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tMapStateDescriptor<String, TaskInfo> descr =\n\t\t\t\tnew MapStateDescriptor<>(\"name\", String.class, TaskInfo.class);\n\n\t\tcontext.getMapState(descr);\n\n\t\tMapStateDescriptor<?, ?> descrIntercepted = (MapStateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> valueSerializer = descrIntercepted.getValueSerializer();\n\n\t\t\r\n\t\tassertTrue(valueSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) valueSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2017-02-23 23:56:29","endLine":220,"groupId":"30810","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/496f2e0e41d44f2829fe7b58083a06b865c819.src","preCode":"\tpublic void testMapStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tMapStateDescriptor<String, TaskInfo> descr =\n\t\t\t\tnew MapStateDescriptor<>(\"name\", String.class, TaskInfo.class);\n\n\t\tcontext.getMapState(descr);\n\n\t\tMapStateDescriptor<?, ?> descrIntercepted = (MapStateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> valueSerializer = descrIntercepted.getValueSerializer();\n\n\t\t\r\n\t\tassertTrue(valueSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) valueSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"NB"}],"commitId":"e7a06094792e2a6f79c723dc1d70544601c41299","commitMessage":"@@@[FLINK-5967] Add support for AggregatingState in user functions\n\nThis also adds documentation for Aggregating state in user functions.\n","date":"2017-10-26 19:13:38","modifiedFileCount":"9","status":"M","submitter":"Bowen Li"},{"authorTime":"2020-03-12 00:53:38","codes":[{"authorDate":"2020-03-12 00:53:38","commitOrder":3,"curCode":"\tpublic void testAggregatingStateInstantiation() throws Exception {\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = createRuntimeContext(descriptorCapture, config);\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tAggregateFunction<String, TaskInfo, String> aggregate = (AggregateFunction<String, TaskInfo, String>) mock(AggregateFunction.class);\n\n\t\tAggregatingStateDescriptor<String, TaskInfo, String> descr =\n\t\t\t\tnew AggregatingStateDescriptor<>(\"name\", aggregate, TaskInfo.class);\n\n\t\tcontext.getAggregatingState(descr);\n\n\t\tAggregatingStateDescriptor<?, ?, ?> descrIntercepted = (AggregatingStateDescriptor<?, ?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2020-03-25 22:06:35","endLine":157,"groupId":"103239","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregatingStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/2390c90ed7a07329142bf552dbf26ec0a85aca.src","preCode":"\tpublic void testAggregatingStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tAggregateFunction<String, TaskInfo, String> aggregate = (AggregateFunction<String, TaskInfo, String>) mock(AggregateFunction.class);\n\n\t\tAggregatingStateDescriptor<String, TaskInfo, String> descr =\n\t\t\t\tnew AggregatingStateDescriptor<>(\"name\", aggregate, TaskInfo.class);\n\n\t\tcontext.getAggregatingState(descr);\n\n\t\tAggregatingStateDescriptor<?, ?, ?> descrIntercepted = (AggregatingStateDescriptor<?, ?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-03-12 00:53:38","commitOrder":3,"curCode":"\tpublic void testMapStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = createRuntimeContext(descriptorCapture, config);\n\n\t\tMapStateDescriptor<String, TaskInfo> descr =\n\t\t\t\tnew MapStateDescriptor<>(\"name\", String.class, TaskInfo.class);\n\n\t\tcontext.getMapState(descr);\n\n\t\tMapStateDescriptor<?, ?> descrIntercepted = (MapStateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> valueSerializer = descrIntercepted.getValueSerializer();\n\n\t\t\r\n\t\tassertTrue(valueSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) valueSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2020-03-25 22:06:35","endLine":242,"groupId":"103239","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/2390c90ed7a07329142bf552dbf26ec0a85aca.src","preCode":"\tpublic void testMapStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tMapStateDescriptor<String, TaskInfo> descr =\n\t\t\t\tnew MapStateDescriptor<>(\"name\", String.class, TaskInfo.class);\n\n\t\tcontext.getMapState(descr);\n\n\t\tMapStateDescriptor<?, ?> descrIntercepted = (MapStateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> valueSerializer = descrIntercepted.getValueSerializer();\n\n\t\t\r\n\t\tassertTrue(valueSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) valueSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"239088e603baede4fbbd05f75655c54bb3750fcb","commitMessage":"@@@[FLINK-16316][operators] Cut dependency between StreamingRuntimeContext and AbstractStreamOperator\n\nThis simplifies dependencies between those two classes and will allow for StreamingRuntimeContext\nto be re-used in new replacement for AbstractStreamOperator.\n","date":"2020-03-25 22:06:35","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"}]
