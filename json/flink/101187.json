[{"authorTime":"2021-02-20 01:28:12","codes":[{"authorDate":"2018-10-19 17:33:43","commitOrder":4,"curCode":"\tpublic void testCallFinalizeOnMasterBeforeJobCompletes() throws Exception {\n\t\tfinal int parallelism = 11;\n\n\t\tfinal MiniClusterConfiguration cfg = new MiniClusterConfiguration.Builder()\n\t\t\t.setNumTaskManagers(1)\n\t\t\t.setNumSlotsPerTaskManager(parallelism)\n\t\t\t.setConfiguration(getDefaultConfiguration())\n\t\t\t.build();\n\n\t\ttry (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n\t\t\tminiCluster.start();\n\n\t\t\tfinal JobVertex source = new JobVertex(\"Source\");\n\t\t\tsource.setInvokableClass(WaitingNoOpInvokable.class);\n\t\t\tsource.setParallelism(parallelism);\n\n\t\t\tfinal WaitOnFinalizeJobVertex sink = new WaitOnFinalizeJobVertex(\"Sink\", 20L);\n\t\t\tsink.setInvokableClass(NoOpInvokable.class);\n\t\t\tsink.setParallelism(parallelism);\n\n\t\t\tsink.connectNewDataSetAsInput(source, DistributionPattern.POINTWISE,\n\t\t\t\tResultPartitionType.PIPELINED);\n\n\t\t\tfinal JobGraph jobGraph = new JobGraph(\"SubtaskInFinalStateRaceCondition\", source, sink);\n\n\t\t\tfinal CompletableFuture<JobSubmissionResult> submissionFuture = miniCluster.submitJob(jobGraph);\n\n\t\t\tfinal CompletableFuture<JobResult> jobResultFuture = submissionFuture.thenCompose(\n\t\t\t\t(JobSubmissionResult ignored) -> miniCluster.requestJobResult(jobGraph.getJobID()));\n\n\t\t\tjobResultFuture.get().toJobExecutionResult(getClass().getClassLoader());\n\n\t\t\tassertTrue(sink.finalizedOnMaster.get());\n\t\t}\n\t}\n","date":"2018-10-19 17:33:43","endLine":546,"groupId":"25750","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallFinalizeOnMasterBeforeJobCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c1/08eaee36a38aee3dad68efdb7c2210c179267d.src","preCode":"\tpublic void testCallFinalizeOnMasterBeforeJobCompletes() throws Exception {\n\t\tfinal int parallelism = 11;\n\n\t\tfinal MiniClusterConfiguration cfg = new MiniClusterConfiguration.Builder()\n\t\t\t.setNumTaskManagers(1)\n\t\t\t.setNumSlotsPerTaskManager(parallelism)\n\t\t\t.setConfiguration(getDefaultConfiguration())\n\t\t\t.build();\n\n\t\ttry (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n\t\t\tminiCluster.start();\n\n\t\t\tfinal JobVertex source = new JobVertex(\"Source\");\n\t\t\tsource.setInvokableClass(WaitingNoOpInvokable.class);\n\t\t\tsource.setParallelism(parallelism);\n\n\t\t\tfinal WaitOnFinalizeJobVertex sink = new WaitOnFinalizeJobVertex(\"Sink\", 20L);\n\t\t\tsink.setInvokableClass(NoOpInvokable.class);\n\t\t\tsink.setParallelism(parallelism);\n\n\t\t\tsink.connectNewDataSetAsInput(source, DistributionPattern.POINTWISE,\n\t\t\t\tResultPartitionType.PIPELINED);\n\n\t\t\tfinal JobGraph jobGraph = new JobGraph(\"SubtaskInFinalStateRaceCondition\", source, sink);\n\n\t\t\tfinal CompletableFuture<JobSubmissionResult> submissionFuture = miniCluster.submitJob(jobGraph);\n\n\t\t\tfinal CompletableFuture<JobResult> jobResultFuture = submissionFuture.thenCompose(\n\t\t\t\t(JobSubmissionResult ignored) -> miniCluster.requestJobResult(jobGraph.getJobID()));\n\n\t\t\tjobResultFuture.get().toJobExecutionResult(getClass().getClassLoader());\n\n\t\t\tassertTrue(sink.finalizedOnMaster.get());\n\t\t}\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/minicluster/MiniClusterITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"NB"},{"authorDate":"2021-02-20 01:28:12","commitOrder":4,"curCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return new JobGraph(\"Simple job\", source, sink);\n    }\n","date":"2021-02-22 16:13:34","endLine":107,"groupId":"25750","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/bc486d4fcc3daed0d82920c83ef3571b1e1cdc.src","preCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return new JobGraph(\"Simple job\", source, sink);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/adaptive/AdaptiveSchedulerSimpleITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"50eca3182cad284990fd8c48b50e74582995d99f","commitMessage":"@@@[FLINK-21390] Rename DeclarativeScheduler to AdaptiveScheduler\n\nNote that this commit also changes the system property to enable the adaptive scheduler\nfrom flink.tests.enable-declarative-scheduler to flink.tests.enable-adaptive-scheduler.\n\nThis closes #14970.\n","date":"2021-02-22 16:13:34","modifiedFileCount":"5","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2021-03-03 23:01:50","codes":[{"authorDate":"2021-03-03 23:01:50","commitOrder":5,"curCode":"    public void testCallFinalizeOnMasterBeforeJobCompletes() throws Exception {\n        final int parallelism = 11;\n\n        final MiniClusterConfiguration cfg =\n                new MiniClusterConfiguration.Builder()\n                        .setNumTaskManagers(1)\n                        .setNumSlotsPerTaskManager(parallelism)\n                        .setConfiguration(getDefaultConfiguration())\n                        .build();\n\n        try (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n            miniCluster.start();\n\n            final JobVertex source = new JobVertex(\"Source\");\n            source.setInvokableClass(WaitingNoOpInvokable.class);\n            source.setParallelism(parallelism);\n\n            final WaitOnFinalizeJobVertex sink = new WaitOnFinalizeJobVertex(\"Sink\", 20L);\n            sink.setInvokableClass(NoOpInvokable.class);\n            sink.setParallelism(parallelism);\n\n            sink.connectNewDataSetAsInput(\n                    source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n            final JobGraph jobGraph = JobGraphTestUtils.streamingJobGraph(source, sink);\n\n            final CompletableFuture<JobSubmissionResult> submissionFuture =\n                    miniCluster.submitJob(jobGraph);\n\n            final CompletableFuture<JobResult> jobResultFuture =\n                    submissionFuture.thenCompose(\n                            (JobSubmissionResult ignored) ->\n                                    miniCluster.requestJobResult(jobGraph.getJobID()));\n\n            jobResultFuture.get().toJobExecutionResult(getClass().getClassLoader());\n\n            assertTrue(sink.finalizedOnMaster.get());\n        }\n    }\n","date":"2021-03-06 02:37:53","endLine":583,"groupId":"25750","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallFinalizeOnMasterBeforeJobCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/99277294269f4f946a6a15c4b78368c484f1db.src","preCode":"    public void testCallFinalizeOnMasterBeforeJobCompletes() throws Exception {\n        final int parallelism = 11;\n\n        final MiniClusterConfiguration cfg =\n                new MiniClusterConfiguration.Builder()\n                        .setNumTaskManagers(1)\n                        .setNumSlotsPerTaskManager(parallelism)\n                        .setConfiguration(getDefaultConfiguration())\n                        .build();\n\n        try (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n            miniCluster.start();\n\n            final JobVertex source = new JobVertex(\"Source\");\n            source.setInvokableClass(WaitingNoOpInvokable.class);\n            source.setParallelism(parallelism);\n\n            final WaitOnFinalizeJobVertex sink = new WaitOnFinalizeJobVertex(\"Sink\", 20L);\n            sink.setInvokableClass(NoOpInvokable.class);\n            sink.setParallelism(parallelism);\n\n            sink.connectNewDataSetAsInput(\n                    source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n            final JobGraph jobGraph =\n                    new JobGraph(\"SubtaskInFinalStateRaceCondition\", source, sink);\n\n            final CompletableFuture<JobSubmissionResult> submissionFuture =\n                    miniCluster.submitJob(jobGraph);\n\n            final CompletableFuture<JobResult> jobResultFuture =\n                    submissionFuture.thenCompose(\n                            (JobSubmissionResult ignored) ->\n                                    miniCluster.requestJobResult(jobGraph.getJobID()));\n\n            jobResultFuture.get().toJobExecutionResult(getClass().getClassLoader());\n\n            assertTrue(sink.finalizedOnMaster.get());\n        }\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/minicluster/MiniClusterITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"},{"authorDate":"2021-03-03 23:01:50","commitOrder":5,"curCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return JobGraphTestUtils.streamingJobGraph(source, sink);\n    }\n","date":"2021-03-06 02:37:53","endLine":107,"groupId":"25750","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/70/f11fd857fb7b1d8b065d1e7c3abb5038d84cad.src","preCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return new JobGraph(\"Simple job\", source, sink);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/adaptive/AdaptiveSchedulerSimpleITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"88c2d1026a43965dff8fcb0d44230e76c5ebd0d7","commitMessage":"@@@[FLINK-21401] Replace explicit JobGraph generation with JobGraphTestUtil factories\n","date":"2021-03-06 02:37:53","modifiedFileCount":"35","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2021-03-03 23:01:50","codes":[{"authorDate":"2021-03-04 23:59:40","commitOrder":6,"curCode":"    public void testCallFinalizeOnMasterBeforeJobCompletes() throws Exception {\n        final int parallelism = 11;\n\n        final MiniClusterConfiguration cfg =\n                new MiniClusterConfiguration.Builder()\n                        .setNumTaskManagers(1)\n                        .setNumSlotsPerTaskManager(parallelism)\n                        .setConfiguration(getDefaultConfiguration())\n                        .build();\n\n        try (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n            miniCluster.start();\n\n            final JobVertex source = new JobVertex(\"Source\");\n            source.setInvokableClass(WaitingNoOpInvokable.class);\n            source.setParallelism(parallelism);\n\n            WaitOnFinalizeJobVertex.resetFinalizedOnMaster();\n\n            final WaitOnFinalizeJobVertex sink = new WaitOnFinalizeJobVertex(\"Sink\", 20L);\n            sink.setInvokableClass(NoOpInvokable.class);\n            sink.setParallelism(parallelism);\n\n            sink.connectNewDataSetAsInput(\n                    source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n            final JobGraph jobGraph = JobGraphTestUtils.streamingJobGraph(source, sink);\n\n            final CompletableFuture<JobSubmissionResult> submissionFuture =\n                    miniCluster.submitJob(jobGraph);\n\n            final CompletableFuture<JobResult> jobResultFuture =\n                    submissionFuture.thenCompose(\n                            (JobSubmissionResult ignored) ->\n                                    miniCluster.requestJobResult(jobGraph.getJobID()));\n\n            jobResultFuture.get().toJobExecutionResult(getClass().getClassLoader());\n\n            assertTrue(WaitOnFinalizeJobVertex.finalizedOnMaster.get());\n        }\n    }\n","date":"2021-03-06 02:37:56","endLine":591,"groupId":"43584","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallFinalizeOnMasterBeforeJobCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/de92005e764f82b2c2c06df72e9b54565748d3.src","preCode":"    public void testCallFinalizeOnMasterBeforeJobCompletes() throws Exception {\n        final int parallelism = 11;\n\n        final MiniClusterConfiguration cfg =\n                new MiniClusterConfiguration.Builder()\n                        .setNumTaskManagers(1)\n                        .setNumSlotsPerTaskManager(parallelism)\n                        .setConfiguration(getDefaultConfiguration())\n                        .build();\n\n        try (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n            miniCluster.start();\n\n            final JobVertex source = new JobVertex(\"Source\");\n            source.setInvokableClass(WaitingNoOpInvokable.class);\n            source.setParallelism(parallelism);\n\n            final WaitOnFinalizeJobVertex sink = new WaitOnFinalizeJobVertex(\"Sink\", 20L);\n            sink.setInvokableClass(NoOpInvokable.class);\n            sink.setParallelism(parallelism);\n\n            sink.connectNewDataSetAsInput(\n                    source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n            final JobGraph jobGraph = JobGraphTestUtils.streamingJobGraph(source, sink);\n\n            final CompletableFuture<JobSubmissionResult> submissionFuture =\n                    miniCluster.submitJob(jobGraph);\n\n            final CompletableFuture<JobResult> jobResultFuture =\n                    submissionFuture.thenCompose(\n                            (JobSubmissionResult ignored) ->\n                                    miniCluster.requestJobResult(jobGraph.getJobID()));\n\n            jobResultFuture.get().toJobExecutionResult(getClass().getClassLoader());\n\n            assertTrue(sink.finalizedOnMaster.get());\n        }\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/minicluster/MiniClusterITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"M"},{"authorDate":"2021-03-03 23:01:50","commitOrder":6,"curCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return JobGraphTestUtils.streamingJobGraph(source, sink);\n    }\n","date":"2021-03-06 02:37:53","endLine":107,"groupId":"25750","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/70/f11fd857fb7b1d8b065d1e7c3abb5038d84cad.src","preCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return JobGraphTestUtils.streamingJobGraph(source, sink);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/adaptive/AdaptiveSchedulerSimpleITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"3926b5ea68acac6066d08b9174ccae4d726c4547","commitMessage":"@@@[FLINK-21401] Make MiniClusterITCase work with AdaptiveScheduler\n\nThe AdaptiveScheduler needs to make the JobVertices serializable and let them use\nstatic fields to communicate with the test because the JobGraph is copied.\n\nThis closes #15093.\n","date":"2021-03-06 02:37:56","modifiedFileCount":"1","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2021-03-03 23:01:50","codes":[{"authorDate":"2021-03-05 00:03:53","commitOrder":7,"curCode":"    public void testCallFinalizeOnMasterBeforeJobCompletes() throws Exception {\n        final int parallelism = 11;\n\n        final MiniClusterConfiguration cfg =\n                new MiniClusterConfiguration.Builder()\n                        .setNumTaskManagers(1)\n                        .setNumSlotsPerTaskManager(2 * parallelism)\n                        .setConfiguration(getDefaultConfiguration())\n                        .build();\n\n        try (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n            miniCluster.start();\n\n            final JobVertex source = new JobVertex(\"Source\");\n            source.setInvokableClass(WaitingNoOpInvokable.class);\n            source.setParallelism(parallelism);\n\n            WaitOnFinalizeJobVertex.resetFinalizedOnMaster();\n\n            final WaitOnFinalizeJobVertex sink = new WaitOnFinalizeJobVertex(\"Sink\", 20L);\n            sink.setInvokableClass(NoOpInvokable.class);\n            sink.setParallelism(parallelism);\n\n            sink.connectNewDataSetAsInput(\n                    source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n            final JobGraph jobGraph = JobGraphTestUtils.streamingJobGraph(source, sink);\n\n            final CompletableFuture<JobSubmissionResult> submissionFuture =\n                    miniCluster.submitJob(jobGraph);\n\n            final CompletableFuture<JobResult> jobResultFuture =\n                    submissionFuture.thenCompose(\n                            (JobSubmissionResult ignored) ->\n                                    miniCluster.requestJobResult(jobGraph.getJobID()));\n\n            jobResultFuture.get().toJobExecutionResult(getClass().getClassLoader());\n\n            assertTrue(WaitOnFinalizeJobVertex.finalizedOnMaster.get());\n        }\n    }\n","date":"2021-03-06 02:37:56","endLine":591,"groupId":"101187","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCallFinalizeOnMasterBeforeJobCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6b/5a964b0f4d93e03ff81928d1526e03b235aab6.src","preCode":"    public void testCallFinalizeOnMasterBeforeJobCompletes() throws Exception {\n        final int parallelism = 11;\n\n        final MiniClusterConfiguration cfg =\n                new MiniClusterConfiguration.Builder()\n                        .setNumTaskManagers(1)\n                        .setNumSlotsPerTaskManager(parallelism)\n                        .setConfiguration(getDefaultConfiguration())\n                        .build();\n\n        try (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n            miniCluster.start();\n\n            final JobVertex source = new JobVertex(\"Source\");\n            source.setInvokableClass(WaitingNoOpInvokable.class);\n            source.setParallelism(parallelism);\n\n            WaitOnFinalizeJobVertex.resetFinalizedOnMaster();\n\n            final WaitOnFinalizeJobVertex sink = new WaitOnFinalizeJobVertex(\"Sink\", 20L);\n            sink.setInvokableClass(NoOpInvokable.class);\n            sink.setParallelism(parallelism);\n\n            sink.connectNewDataSetAsInput(\n                    source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n            final JobGraph jobGraph = JobGraphTestUtils.streamingJobGraph(source, sink);\n\n            final CompletableFuture<JobSubmissionResult> submissionFuture =\n                    miniCluster.submitJob(jobGraph);\n\n            final CompletableFuture<JobResult> jobResultFuture =\n                    submissionFuture.thenCompose(\n                            (JobSubmissionResult ignored) ->\n                                    miniCluster.requestJobResult(jobGraph.getJobID()));\n\n            jobResultFuture.get().toJobExecutionResult(getClass().getClassLoader());\n\n            assertTrue(WaitOnFinalizeJobVertex.finalizedOnMaster.get());\n        }\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/minicluster/MiniClusterITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"M"},{"authorDate":"2021-03-03 23:01:50","commitOrder":7,"curCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return JobGraphTestUtils.streamingJobGraph(source, sink);\n    }\n","date":"2021-03-06 02:37:53","endLine":107,"groupId":"101187","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/70/f11fd857fb7b1d8b065d1e7c3abb5038d84cad.src","preCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return JobGraphTestUtils.streamingJobGraph(source, sink);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/adaptive/AdaptiveSchedulerSimpleITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"034195801849479e9b442aa177aac779ab5d97a3","commitMessage":"@@@[hotfix] Speed up MiniClusterITCase for AdaptiveScheduler by giving enough slots for test jobs\n","date":"2021-03-06 02:37:56","modifiedFileCount":"1","status":"M","submitter":"Till Rohrmann"}]
