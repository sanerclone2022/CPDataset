[{"authorTime":"2020-11-18 12:02:02","codes":[{"authorDate":"2020-11-18 12:02:02","commitOrder":2,"curCode":"\tpublic void testOnProcessingTime() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\t\r\n\t\tManuallyTriggeredProcessingTimeService processingTimeService = new ManuallyTriggeredProcessingTimeService();\n\t\tprocessingTimeService.advanceTo(10);\n\n\t\tFileWriter<String> fileWriter = createWriter(\n\t\t\t\tpath,\n\t\t\t\tnew FileSinkTestUtils.StringIdentityBucketAssigner(),\n\t\t\t\tDefaultRollingPolicy.builder().withRolloverInterval(10).build(),\n\t\t\t\tnew OutputFileConfig(\"part-\", \"\"),\n\t\t\t\tprocessingTimeService,\n\t\t\t\t5);\n\t\tfileWriter.initializeState(Collections.emptyList());\n\n\t\t\r\n\t\tfileWriter.write(\"test1\", new ContextImpl());\n\t\tprocessingTimeService.advanceTo(15);\n\t\tfileWriter.write(\"test2\", new ContextImpl());\n\t\tprocessingTimeService.advanceTo(20);\n\n\t\tFileWriterBucket<String> test1Bucket = fileWriter.getActiveBuckets().get(\"test1\");\n\t\tassertNull(\"The in-progress part of test1 should be rolled\", test1Bucket.getInProgressPart());\n\t\tassertEquals(1, test1Bucket.getPendingFiles().size());\n\n\t\tFileWriterBucket<String> test2Bucket = fileWriter.getActiveBuckets().get(\"test2\");\n\t\tassertNotNull(\"The in-progress part of test2 should not be rolled\", test2Bucket.getInProgressPart());\n\t\tassertEquals(0, test2Bucket.getPendingFiles().size());\n\n\t\t\r\n\t\tprocessingTimeService.advanceTo(30);\n\t\tfileWriter.prepareCommit(false);\n\n\t\t\r\n\t\tfileWriter.write(\"test1\", new ContextImpl());\n\t\tprocessingTimeService.advanceTo(35);\n\t\tfileWriter.write(\"test2\", new ContextImpl());\n\t\tprocessingTimeService.advanceTo(40);\n\n\t\ttest1Bucket = fileWriter.getActiveBuckets().get(\"test1\");\n\t\tassertNull(\"The in-progress part of test1 should be rolled\", test1Bucket.getInProgressPart());\n\t\tassertEquals(1, test1Bucket.getPendingFiles().size());\n\n\t\ttest2Bucket = fileWriter.getActiveBuckets().get(\"test2\");\n\t\tassertNotNull(\"The in-progress part of test2 should not be rolled\", test2Bucket.getInProgressPart());\n\t\tassertEquals(0, test2Bucket.getPendingFiles().size());\n\t}\n","date":"2020-11-18 19:46:50","endLine":243,"groupId":"14825","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnProcessingTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/60/022f7e48da156ea0f935fea242d2088586269d.src","preCode":"\tpublic void testOnProcessingTime() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\t\r\n\t\tManuallyTriggeredProcessingTimeService processingTimeService = new ManuallyTriggeredProcessingTimeService();\n\t\tprocessingTimeService.advanceTo(10);\n\n\t\tFileWriter<String> fileWriter = createWriter(\n\t\t\t\tpath,\n\t\t\t\tnew FileSinkTestUtils.StringIdentityBucketAssigner(),\n\t\t\t\tDefaultRollingPolicy.builder().withRolloverInterval(10).build(),\n\t\t\t\tnew OutputFileConfig(\"part-\", \"\"),\n\t\t\t\tprocessingTimeService,\n\t\t\t\t5);\n\t\tfileWriter.initializeState(Collections.emptyList());\n\n\t\t\r\n\t\tfileWriter.write(\"test1\", new ContextImpl());\n\t\tprocessingTimeService.advanceTo(15);\n\t\tfileWriter.write(\"test2\", new ContextImpl());\n\t\tprocessingTimeService.advanceTo(20);\n\n\t\tFileWriterBucket<String> test1Bucket = fileWriter.getActiveBuckets().get(\"test1\");\n\t\tassertNull(\"The in-progress part of test1 should be rolled\", test1Bucket.getInProgressPart());\n\t\tassertEquals(1, test1Bucket.getPendingFiles().size());\n\n\t\tFileWriterBucket<String> test2Bucket = fileWriter.getActiveBuckets().get(\"test2\");\n\t\tassertNotNull(\"The in-progress part of test2 should not be rolled\", test2Bucket.getInProgressPart());\n\t\tassertEquals(0, test2Bucket.getPendingFiles().size());\n\n\t\t\r\n\t\tprocessingTimeService.advanceTo(30);\n\t\tfileWriter.prepareCommit(false);\n\n\t\t\r\n\t\tfileWriter.write(\"test1\", new ContextImpl());\n\t\tprocessingTimeService.advanceTo(35);\n\t\tfileWriter.write(\"test2\", new ContextImpl());\n\t\tprocessingTimeService.advanceTo(40);\n\n\t\ttest1Bucket = fileWriter.getActiveBuckets().get(\"test1\");\n\t\tassertNull(\"The in-progress part of test1 should be rolled\", test1Bucket.getInProgressPart());\n\t\tassertEquals(1, test1Bucket.getPendingFiles().size());\n\n\t\ttest2Bucket = fileWriter.getActiveBuckets().get(\"test2\");\n\t\tassertNotNull(\"The in-progress part of test2 should not be rolled\", test2Bucket.getInProgressPart());\n\t\tassertEquals(0, test2Bucket.getPendingFiles().size());\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"MB"},{"authorDate":"2020-11-18 12:02:02","commitOrder":2,"curCode":"\tprivate void testCorrectTimestampPassingInContext(Long timestamp, long watermark, long processingTime) throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\t\tfinal Path path = new Path(outDir.toURI());\n\n\t\t\r\n\t\tManuallyTriggeredProcessingTimeService processingTimeService = new ManuallyTriggeredProcessingTimeService();\n\t\tprocessingTimeService.advanceTo(processingTime);\n\n\t\tFileWriter<String> fileWriter = createWriter(\n\t\t\t\tpath,\n\t\t\t\tnew VerifyingBucketAssigner(timestamp, watermark, processingTime),\n\t\t\t\tDefaultRollingPolicy.builder().withRolloverInterval(10).build(),\n\t\t\t\tnew OutputFileConfig(\"part-\", \"\"),\n\t\t\t\tprocessingTimeService,\n\t\t\t\t5);\n\t\tfileWriter.initializeState(Collections.emptyList());\n\t\tfileWriter.write(\"test\", new ContextImpl(watermark, timestamp));\n\t}\n","date":"2020-11-18 19:46:50","endLine":272,"groupId":"14826","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorrectTimestampPassingInContext","params":"(Longtimestamp@longwatermark@longprocessingTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/60/022f7e48da156ea0f935fea242d2088586269d.src","preCode":"\tprivate void testCorrectTimestampPassingInContext(Long timestamp, long watermark, long processingTime) throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\t\tfinal Path path = new Path(outDir.toURI());\n\n\t\t\r\n\t\tManuallyTriggeredProcessingTimeService processingTimeService = new ManuallyTriggeredProcessingTimeService();\n\t\tprocessingTimeService.advanceTo(processingTime);\n\n\t\tFileWriter<String> fileWriter = createWriter(\n\t\t\t\tpath,\n\t\t\t\tnew VerifyingBucketAssigner(timestamp, watermark, processingTime),\n\t\t\t\tDefaultRollingPolicy.builder().withRolloverInterval(10).build(),\n\t\t\t\tnew OutputFileConfig(\"part-\", \"\"),\n\t\t\t\tprocessingTimeService,\n\t\t\t\t5);\n\t\tfileWriter.initializeState(Collections.emptyList());\n\t\tfileWriter.write(\"test\", new ContextImpl(watermark, timestamp));\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"B"}],"commitId":"ac94befe5992ce34d9c3e5050a485e8aa2681cd3","commitMessage":"@@@[FLINK-20197] Fix processing time support in FileSink\n\nNow we pass the current processing time from the\ntimer service of the FileWriter to the context that\nis passed in the write() method.\n\nThis closes #14109.\n","date":"2020-11-18 19:46:50","modifiedFileCount":"2","status":"M","submitter":"Yun Gao"},{"authorTime":"2020-11-18 12:02:02","codes":[{"authorDate":"2021-08-13 17:44:59","commitOrder":3,"curCode":"    public void testOnProcessingTime() throws IOException, InterruptedException {\n        File outDir = TEMP_FOLDER.newFolder();\n        Path path = new Path(outDir.toURI());\n\n        \r\n        ManuallyTriggeredProcessingTimeService processingTimeService =\n                new ManuallyTriggeredProcessingTimeService();\n        processingTimeService.advanceTo(10);\n\n        FileWriter<String> fileWriter =\n                createWriter(\n                        path,\n                        new FileSinkTestUtils.StringIdentityBucketAssigner(),\n                        DefaultRollingPolicy.builder().withRolloverInterval(10).build(),\n                        new OutputFileConfig(\"part-\", \"\"),\n                        processingTimeService,\n                        5);\n        fileWriter.initializeState(Collections.emptyList());\n\n        \r\n        fileWriter.write(\"test1\", new ContextImpl());\n        processingTimeService.advanceTo(15);\n        fileWriter.write(\"test2\", new ContextImpl());\n        processingTimeService.advanceTo(20);\n\n        FileWriterBucket<String> test1Bucket = fileWriter.getActiveBuckets().get(\"test1\");\n        assertNull(\n                \"The in-progress part of test1 should be rolled\", test1Bucket.getInProgressPart());\n        assertEquals(1, test1Bucket.getPendingFiles().size());\n\n        FileWriterBucket<String> test2Bucket = fileWriter.getActiveBuckets().get(\"test2\");\n        assertNotNull(\n                \"The in-progress part of test2 should not be rolled\",\n                test2Bucket.getInProgressPart());\n        assertEquals(0, test2Bucket.getPendingFiles().size());\n\n        \r\n        processingTimeService.advanceTo(30);\n        fileWriter.prepareCommit(false);\n\n        \r\n        fileWriter.write(\"test1\", new ContextImpl());\n        processingTimeService.advanceTo(35);\n        fileWriter.write(\"test2\", new ContextImpl());\n        processingTimeService.advanceTo(40);\n\n        test1Bucket = fileWriter.getActiveBuckets().get(\"test1\");\n        assertNull(\n                \"The in-progress part of test1 should be rolled\", test1Bucket.getInProgressPart());\n        assertEquals(1, test1Bucket.getPendingFiles().size());\n\n        test2Bucket = fileWriter.getActiveBuckets().get(\"test2\");\n        assertNotNull(\n                \"The in-progress part of test2 should not be rolled\",\n                test2Bucket.getInProgressPart());\n        assertEquals(0, test2Bucket.getPendingFiles().size());\n    }\n","date":"2021-08-14 15:31:10","endLine":251,"groupId":"10983","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnProcessingTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/15f375caeb0a2d8121d0e8d3fd83cf3240e73e.src","preCode":"    public void testOnProcessingTime() throws IOException {\n        File outDir = TEMP_FOLDER.newFolder();\n        Path path = new Path(outDir.toURI());\n\n        \r\n        ManuallyTriggeredProcessingTimeService processingTimeService =\n                new ManuallyTriggeredProcessingTimeService();\n        processingTimeService.advanceTo(10);\n\n        FileWriter<String> fileWriter =\n                createWriter(\n                        path,\n                        new FileSinkTestUtils.StringIdentityBucketAssigner(),\n                        DefaultRollingPolicy.builder().withRolloverInterval(10).build(),\n                        new OutputFileConfig(\"part-\", \"\"),\n                        processingTimeService,\n                        5);\n        fileWriter.initializeState(Collections.emptyList());\n\n        \r\n        fileWriter.write(\"test1\", new ContextImpl());\n        processingTimeService.advanceTo(15);\n        fileWriter.write(\"test2\", new ContextImpl());\n        processingTimeService.advanceTo(20);\n\n        FileWriterBucket<String> test1Bucket = fileWriter.getActiveBuckets().get(\"test1\");\n        assertNull(\n                \"The in-progress part of test1 should be rolled\", test1Bucket.getInProgressPart());\n        assertEquals(1, test1Bucket.getPendingFiles().size());\n\n        FileWriterBucket<String> test2Bucket = fileWriter.getActiveBuckets().get(\"test2\");\n        assertNotNull(\n                \"The in-progress part of test2 should not be rolled\",\n                test2Bucket.getInProgressPart());\n        assertEquals(0, test2Bucket.getPendingFiles().size());\n\n        \r\n        processingTimeService.advanceTo(30);\n        fileWriter.prepareCommit(false);\n\n        \r\n        fileWriter.write(\"test1\", new ContextImpl());\n        processingTimeService.advanceTo(35);\n        fileWriter.write(\"test2\", new ContextImpl());\n        processingTimeService.advanceTo(40);\n\n        test1Bucket = fileWriter.getActiveBuckets().get(\"test1\");\n        assertNull(\n                \"The in-progress part of test1 should be rolled\", test1Bucket.getInProgressPart());\n        assertEquals(1, test1Bucket.getPendingFiles().size());\n\n        test2Bucket = fileWriter.getActiveBuckets().get(\"test2\");\n        assertNotNull(\n                \"The in-progress part of test2 should not be rolled\",\n                test2Bucket.getInProgressPart());\n        assertEquals(0, test2Bucket.getPendingFiles().size());\n    }\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2020-11-18 12:02:02","commitOrder":3,"curCode":"\tprivate void testCorrectTimestampPassingInContext(Long timestamp, long watermark, long processingTime) throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\t\tfinal Path path = new Path(outDir.toURI());\n\n\t\t\r\n\t\tManuallyTriggeredProcessingTimeService processingTimeService = new ManuallyTriggeredProcessingTimeService();\n\t\tprocessingTimeService.advanceTo(processingTime);\n\n\t\tFileWriter<String> fileWriter = createWriter(\n\t\t\t\tpath,\n\t\t\t\tnew VerifyingBucketAssigner(timestamp, watermark, processingTime),\n\t\t\t\tDefaultRollingPolicy.builder().withRolloverInterval(10).build(),\n\t\t\t\tnew OutputFileConfig(\"part-\", \"\"),\n\t\t\t\tprocessingTimeService,\n\t\t\t\t5);\n\t\tfileWriter.initializeState(Collections.emptyList());\n\t\tfileWriter.write(\"test\", new ContextImpl(watermark, timestamp));\n\t}\n","date":"2020-11-18 19:46:50","endLine":272,"groupId":"10983","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorrectTimestampPassingInContext","params":"(Longtimestamp@longwatermark@longprocessingTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/60/022f7e48da156ea0f935fea242d2088586269d.src","preCode":"\tprivate void testCorrectTimestampPassingInContext(Long timestamp, long watermark, long processingTime) throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\t\tfinal Path path = new Path(outDir.toURI());\n\n\t\t\r\n\t\tManuallyTriggeredProcessingTimeService processingTimeService = new ManuallyTriggeredProcessingTimeService();\n\t\tprocessingTimeService.advanceTo(processingTime);\n\n\t\tFileWriter<String> fileWriter = createWriter(\n\t\t\t\tpath,\n\t\t\t\tnew VerifyingBucketAssigner(timestamp, watermark, processingTime),\n\t\t\t\tDefaultRollingPolicy.builder().withRolloverInterval(10).build(),\n\t\t\t\tnew OutputFileConfig(\"part-\", \"\"),\n\t\t\t\tprocessingTimeService,\n\t\t\t\t5);\n\t\tfileWriter.initializeState(Collections.emptyList());\n\t\tfileWriter.write(\"test\", new ContextImpl(watermark, timestamp));\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"N"}],"commitId":"134f388323f0c2b625504fc58e874133f467f781","commitMessage":"@@@[FLINK-23621] Add InterruptedException to ProcessingTimeService#onProcessingTime\n","date":"2021-08-14 15:31:10","modifiedFileCount":"2","status":"M","submitter":"Fabian Paul"}]
