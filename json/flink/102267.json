[{"authorTime":"2016-12-10 01:41:36","codes":[{"authorDate":"2016-12-10 01:41:36","commitOrder":1,"curCode":"\tpublic void testReadSparseWithPositionSetter() throws Exception {\n\t\tString fileContent = \"111|222|333|444|555|666|777|888|999|000|\\n\" +\n\t\t\t\"000|999|888|777|666|555|444|333|222|111|\";\n\n\t\tFileInputSplit split = createTempFile(fileContent);\n\n\t\tRowTypeInfo typeInfo = new RowTypeInfo(\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\tRowCsvInputFormat format = new RowCsvInputFormat(\n\t\t\tPATH,\n\t\t\ttypeInfo,\n\t\t\tnew int[]{0, 3, 7});\n\t\tformat.setFieldDelimiter(\"|\");\n\t\tformat.configure(new Configuration());\n\t\tformat.open(split);\n\n\t\tRow result = new Row(3);\n\t\tresult = format.nextRecord(result);\n\n\t\tassertNotNull(result);\n\t\tassertEquals(111, result.getField(0));\n\t\tassertEquals(444, result.getField(1));\n\t\tassertEquals(888, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(0, result.getField(0));\n\t\tassertEquals(777, result.getField(1));\n\t\tassertEquals(333, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNull(result);\n\t\tassertTrue(format.reachedEnd());\n\t}\n","date":"2016-12-15 18:36:40","endLine":585,"groupId":"30017","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadSparseWithPositionSetter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a6/8e81ee839a623e584cfc0ed94f51d8ace5d0a9.src","preCode":"\tpublic void testReadSparseWithPositionSetter() throws Exception {\n\t\tString fileContent = \"111|222|333|444|555|666|777|888|999|000|\\n\" +\n\t\t\t\"000|999|888|777|666|555|444|333|222|111|\";\n\n\t\tFileInputSplit split = createTempFile(fileContent);\n\n\t\tRowTypeInfo typeInfo = new RowTypeInfo(\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\tRowCsvInputFormat format = new RowCsvInputFormat(\n\t\t\tPATH,\n\t\t\ttypeInfo,\n\t\t\tnew int[]{0, 3, 7});\n\t\tformat.setFieldDelimiter(\"|\");\n\t\tformat.configure(new Configuration());\n\t\tformat.open(split);\n\n\t\tRow result = new Row(3);\n\t\tresult = format.nextRecord(result);\n\n\t\tassertNotNull(result);\n\t\tassertEquals(111, result.getField(0));\n\t\tassertEquals(444, result.getField(1));\n\t\tassertEquals(888, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(0, result.getField(0));\n\t\tassertEquals(777, result.getField(1));\n\t\tassertEquals(333, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNull(result);\n\t\tassertTrue(format.reachedEnd());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/io/RowCsvInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"B"},{"authorDate":"2016-12-10 01:41:36","commitOrder":1,"curCode":"\tpublic void testReadSparseWithMask() throws Exception {\n\t\tString fileContent = \"111&&222&&333&&444&&555&&666&&777&&888&&999&&000&&\\n\" +\n\t\t\t\"000&&999&&888&&777&&666&&555&&444&&333&&222&&111&&\";\n\n\t\tFileInputSplit split = RowCsvInputFormatTest.createTempFile(fileContent);\n\n\t\tRowTypeInfo typeInfo = new RowTypeInfo(\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\tRowCsvInputFormat format = new RowCsvInputFormat(\n\t\t\tPATH,\n\t\t\ttypeInfo,\n\t\t\tnew boolean[]{true, false, false, true, false, false, false, true});\n\t\tformat.setFieldDelimiter(\"&&\");\n\t\tformat.configure(new Configuration());\n\t\tformat.open(split);\n\n\t\tRow result = new Row(3);\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(111, result.getField(0));\n\t\tassertEquals(444, result.getField(1));\n\t\tassertEquals(888, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(0, result.getField(0));\n\t\tassertEquals(777, result.getField(1));\n\t\tassertEquals(333, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNull(result);\n\t\tassertTrue(format.reachedEnd());\n\t}\n","date":"2016-12-15 18:36:40","endLine":624,"groupId":"30017","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadSparseWithMask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a6/8e81ee839a623e584cfc0ed94f51d8ace5d0a9.src","preCode":"\tpublic void testReadSparseWithMask() throws Exception {\n\t\tString fileContent = \"111&&222&&333&&444&&555&&666&&777&&888&&999&&000&&\\n\" +\n\t\t\t\"000&&999&&888&&777&&666&&555&&444&&333&&222&&111&&\";\n\n\t\tFileInputSplit split = RowCsvInputFormatTest.createTempFile(fileContent);\n\n\t\tRowTypeInfo typeInfo = new RowTypeInfo(\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\tRowCsvInputFormat format = new RowCsvInputFormat(\n\t\t\tPATH,\n\t\t\ttypeInfo,\n\t\t\tnew boolean[]{true, false, false, true, false, false, false, true});\n\t\tformat.setFieldDelimiter(\"&&\");\n\t\tformat.configure(new Configuration());\n\t\tformat.open(split);\n\n\t\tRow result = new Row(3);\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(111, result.getField(0));\n\t\tassertEquals(444, result.getField(1));\n\t\tassertEquals(888, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(0, result.getField(0));\n\t\tassertEquals(777, result.getField(1));\n\t\tassertEquals(333, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNull(result);\n\t\tassertTrue(format.reachedEnd());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/io/RowCsvInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":588,"status":"B"}],"commitId":"4d27f8f2deef9fad845ebc91cef121cf9b35f825","commitMessage":"@@@[FLINK-5188] [table] [connectors] [core] Adjust imports and method calls to new Row type.\n\n- Port RowCsvInputFormat to Java and move it to flink-core.\n\nThis closes #3003.\n","date":"2016-12-15 18:36:40","modifiedFileCount":"35","status":"B","submitter":"tonycox"},{"authorTime":"2016-12-08 16:00:40","codes":[{"authorDate":"2016-12-08 16:00:40","commitOrder":2,"curCode":"\tpublic void testReadSparseWithPositionSetter() throws Exception {\n\t\tString fileContent = \"111|222|333|444|555|666|777|888|999|000|\\n\" +\n\t\t\t\"000|999|888|777|666|555|444|333|222|111|\";\n\n\t\tFileInputSplit split = createTempFile(fileContent);\n\n\t\tTypeInformation[] fieldTypes = new TypeInformation[]{\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO};\n\n\t\tRowCsvInputFormat format = new RowCsvInputFormat(\n\t\t\tPATH,\n\t\t\tfieldTypes,\n\t\t\tnew int[]{0, 3, 7});\n\t\tformat.setFieldDelimiter(\"|\");\n\t\tformat.configure(new Configuration());\n\t\tformat.open(split);\n\n\t\tRow result = new Row(3);\n\t\tresult = format.nextRecord(result);\n\n\t\tassertNotNull(result);\n\t\tassertEquals(111, result.getField(0));\n\t\tassertEquals(444, result.getField(1));\n\t\tassertEquals(888, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(0, result.getField(0));\n\t\tassertEquals(777, result.getField(1));\n\t\tassertEquals(333, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNull(result);\n\t\tassertTrue(format.reachedEnd());\n\t}\n","date":"2016-12-16 23:41:21","endLine":586,"groupId":"102267","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadSparseWithPositionSetter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b8/19641c8f09fd05bd471919ed81bcc56ea12ee7.src","preCode":"\tpublic void testReadSparseWithPositionSetter() throws Exception {\n\t\tString fileContent = \"111|222|333|444|555|666|777|888|999|000|\\n\" +\n\t\t\t\"000|999|888|777|666|555|444|333|222|111|\";\n\n\t\tFileInputSplit split = createTempFile(fileContent);\n\n\t\tRowTypeInfo typeInfo = new RowTypeInfo(\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\tRowCsvInputFormat format = new RowCsvInputFormat(\n\t\t\tPATH,\n\t\t\ttypeInfo,\n\t\t\tnew int[]{0, 3, 7});\n\t\tformat.setFieldDelimiter(\"|\");\n\t\tformat.configure(new Configuration());\n\t\tformat.open(split);\n\n\t\tRow result = new Row(3);\n\t\tresult = format.nextRecord(result);\n\n\t\tassertNotNull(result);\n\t\tassertEquals(111, result.getField(0));\n\t\tassertEquals(444, result.getField(1));\n\t\tassertEquals(888, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(0, result.getField(0));\n\t\tassertEquals(777, result.getField(1));\n\t\tassertEquals(333, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNull(result);\n\t\tassertTrue(format.reachedEnd());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/io/RowCsvInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"},{"authorDate":"2016-12-08 16:00:40","commitOrder":2,"curCode":"\tpublic void testReadSparseWithMask() throws Exception {\n\t\tString fileContent = \"111&&222&&333&&444&&555&&666&&777&&888&&999&&000&&\\n\" +\n\t\t\t\"000&&999&&888&&777&&666&&555&&444&&333&&222&&111&&\";\n\n\t\tFileInputSplit split = RowCsvInputFormatTest.createTempFile(fileContent);\n\n\t\tTypeInformation[] fieldTypes = new TypeInformation[]{\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO};\n\n\t\tRowCsvInputFormat format = new RowCsvInputFormat(\n\t\t\tPATH,\n\t\t\tfieldTypes,\n\t\t\tnew int[]{0, 3, 7});\n\t\tformat.setFieldDelimiter(\"&&\");\n\t\tformat.configure(new Configuration());\n\t\tformat.open(split);\n\n\t\tRow result = new Row(3);\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(111, result.getField(0));\n\t\tassertEquals(444, result.getField(1));\n\t\tassertEquals(888, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(0, result.getField(0));\n\t\tassertEquals(777, result.getField(1));\n\t\tassertEquals(333, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNull(result);\n\t\tassertTrue(format.reachedEnd());\n\t}\n","date":"2016-12-16 23:41:21","endLine":625,"groupId":"102267","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadSparseWithMask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b8/19641c8f09fd05bd471919ed81bcc56ea12ee7.src","preCode":"\tpublic void testReadSparseWithMask() throws Exception {\n\t\tString fileContent = \"111&&222&&333&&444&&555&&666&&777&&888&&999&&000&&\\n\" +\n\t\t\t\"000&&999&&888&&777&&666&&555&&444&&333&&222&&111&&\";\n\n\t\tFileInputSplit split = RowCsvInputFormatTest.createTempFile(fileContent);\n\n\t\tRowTypeInfo typeInfo = new RowTypeInfo(\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\tRowCsvInputFormat format = new RowCsvInputFormat(\n\t\t\tPATH,\n\t\t\ttypeInfo,\n\t\t\tnew boolean[]{true, false, false, true, false, false, false, true});\n\t\tformat.setFieldDelimiter(\"&&\");\n\t\tformat.configure(new Configuration());\n\t\tformat.open(split);\n\n\t\tRow result = new Row(3);\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(111, result.getField(0));\n\t\tassertEquals(444, result.getField(1));\n\t\tassertEquals(888, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNotNull(result);\n\t\tassertEquals(0, result.getField(0));\n\t\tassertEquals(777, result.getField(1));\n\t\tassertEquals(333, result.getField(2));\n\n\t\tresult = format.nextRecord(result);\n\t\tassertNull(result);\n\t\tassertTrue(format.reachedEnd());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/io/RowCsvInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"}],"commitId":"ef575e87e8a77d56673d40d98d3d66c6511d57ab","commitMessage":"@@@[FLINK-3848] [table] Add projection push down for StreamTableSource.\n\n- Add plan tests for projection push down.\n- Implement ProjectableTableSource in CsvTableSource.\n- Refactored RowCsvInputFormat\n\nThis closes #2810.\n","date":"2016-12-16 23:41:21","modifiedFileCount":"2","status":"M","submitter":"tonycox"}]
