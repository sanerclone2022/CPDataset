[{"authorTime":"2017-03-03 17:51:15","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":6,"curCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-10-27 00:57:34","endLine":101,"groupId":"14704","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeInitValue","params":"(List<Long>toSerialize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/8ed1f6080dcca23fc6b33b5c225db8f9afb9bb.src","preCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/test/java/org/apache/flink/queryablestate/client/state/ImmutableListStateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2017-03-03 17:51:15","commitOrder":6,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tArrayList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-03-17 01:34:02","endLine":112,"groupId":"42654","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/f67f0a8263453f82a6560758ce8557321eb868.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tArrayList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"NB"}],"commitId":"0c771505b84cdacf7a359c3be0efe38a30f9e660","commitMessage":"@@@[FLINK-7908][QS] Restructure the queryable state module.\n\nThe QS module is split into core and client. The core should\nbe put in the lib folder to enable queryable state.  while the\nclient is the one that the user will program against. The\nreason for the restructuring in mainly to remove the dependency\non the flink-runtime from the user's program.\n","date":"2017-10-27 00:57:34","modifiedFileCount":"23","status":"M","submitter":"kkloudas"},{"authorTime":"2018-01-21 13:29:38","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":7,"curCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-10-27 00:57:34","endLine":101,"groupId":"14704","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeInitValue","params":"(List<Long>toSerialize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/8ed1f6080dcca23fc6b33b5c225db8f9afb9bb.src","preCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/test/java/org/apache/flink/queryablestate/client/state/ImmutableListStateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"},{"authorDate":"2018-01-21 13:29:38","commitOrder":7,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2018-01-23 21:03:52","endLine":113,"groupId":"42654","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/858071ffaa75e5ced3616a9a71c6d17bb11c4b.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tArrayList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"e075da5d5eb0f5ae8c394ea0c549f9dbce28fcf3","commitMessage":"@@@[FLINK-8365] Relax List type in HeapListState and HeapKeyedStateBackend\n\nThis closes #5326.\n","date":"2018-01-23 21:03:52","modifiedFileCount":"3","status":"M","submitter":"Bowen Li"},{"authorTime":"2018-03-10 05:47:35","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":8,"curCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-10-27 00:57:34","endLine":101,"groupId":"102436","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeInitValue","params":"(List<Long>toSerialize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/8ed1f6080dcca23fc6b33b5c225db8f9afb9bb.src","preCode":"\tprivate byte[] serializeInitValue(List<Long> toSerialize) throws IOException {\n\t\tTypeSerializer<Long> serializer = listStateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < toSerialize.size(); i++) {\n\t\t\tserializer.serialize(toSerialize.get(i), view);\n\t\t\tif (i < toSerialize.size() - 1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-client-java/src/test/java/org/apache/flink/queryablestate/client/state/ImmutableListStateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"},{"authorDate":"2018-03-10 05:47:35","commitOrder":8,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<List<V>> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tList<V> result = stateTable.get(keyAndNamespace.f0, keyAndNamespace.f1);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfinal TypeSerializer<V> dupSerializer = ((ListSerializer<V>) safeValueSerializer).getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tdupSerializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2018-03-29 23:35:39","endLine":137,"groupId":"102436","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<List<V>>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bd/68560cdc4f54e2f3a53c9138fdc15db94fa9a7.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"db8e1f09bd7dcd9f392bf987e96cddcb34665b6c","commitMessage":"@@@[FLINK-8802] [QS] Fix concurrent access to non-duplicated serializers.\n\nThis closes #5691.\n","date":"2018-03-29 23:35:39","modifiedFileCount":"42","status":"M","submitter":"kkloudas"}]
