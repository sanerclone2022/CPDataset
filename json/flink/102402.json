[{"authorTime":"2020-03-17 23:12:26","codes":[{"authorDate":"2020-03-17 23:12:26","commitOrder":3,"curCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements requirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerMemoryMB(),\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerCPU());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesJobManagerParameters.getJobManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesJobManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesJobManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(requirements)\n\t\t\t\t.withPorts(getContainerPorts())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_IP_ADDRESS)\n\t\t\t\t\t.withValueFrom(new EnvVarSourceBuilder()\n\t\t\t\t\t\t.withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n\t\t\t\t\t\t.build())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","date":"2020-03-17 23:12:26","endLine":97,"groupId":"47808","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/28/36dea4d0ad95df5e094525d35645380206aba6.src","preCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements requirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerMemoryMB(),\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerCPU());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesJobManagerParameters.getJobManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesJobManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesJobManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(requirements)\n\t\t\t\t.withPorts(getContainerPorts())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_IP_ADDRESS)\n\t\t\t\t\t.withValueFrom(new EnvVarSourceBuilder()\n\t\t\t\t\t\t.withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n\t\t\t\t\t\t.build())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"MB"},{"authorDate":"2020-03-17 23:12:26","commitOrder":3,"curCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements resourceRequirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerCPU());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesTaskManagerParameters.getTaskManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesTaskManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesTaskManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(resourceRequirements)\n\t\t\t\t.withPorts(new ContainerPortBuilder()\n\t\t\t\t\t.withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n\t\t\t\t\t.build())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_NAME)\n\t\t\t\t\t.withValue(kubernetesTaskManagerParameters.getPodName())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","date":"2020-03-17 23:12:26","endLine":92,"groupId":"12541","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ef/118c2db3ba9f4b8eee68e4485351b5899603fd.src","preCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements resourceRequirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerCPU());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesTaskManagerParameters.getTaskManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesTaskManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesTaskManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(resourceRequirements)\n\t\t\t\t.withPorts(new ContainerPortBuilder()\n\t\t\t\t\t.withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n\t\t\t\t\t.build())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_NAME)\n\t\t\t\t\t.withValue(kubernetesTaskManagerParameters.getPodName())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitTaskManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"MB"}],"commitId":"6cf07d374a34742a919a1dc1edf4eb1c1f44e831","commitMessage":"@@@[FLINK-16494][k8s] Switch to enum type for config option KubernetesConfigOptions.CONTAINER_IMAGE_PULL_POLICY\n\nThis closes #11406 .","date":"2020-03-17 23:12:26","modifiedFileCount":"10","status":"M","submitter":"Canbin Zheng"},{"authorTime":"2020-04-30 15:26:15","codes":[{"authorDate":"2020-04-30 15:26:15","commitOrder":4,"curCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements requirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerMemoryMB(),\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerCPU(),\n\t\t\t\tCollections.emptyMap());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesJobManagerParameters.getJobManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesJobManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesJobManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(requirements)\n\t\t\t\t.withPorts(getContainerPorts())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_IP_ADDRESS)\n\t\t\t\t\t.withValueFrom(new EnvVarSourceBuilder()\n\t\t\t\t\t\t.withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n\t\t\t\t\t\t.build())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","date":"2020-05-17 23:33:03","endLine":105,"groupId":"47808","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ef/04252bfae7bd66f837efd89d19fe6855067d45.src","preCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements requirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerMemoryMB(),\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerCPU());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesJobManagerParameters.getJobManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesJobManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesJobManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(requirements)\n\t\t\t\t.withPorts(getContainerPorts())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_IP_ADDRESS)\n\t\t\t\t\t.withValueFrom(new EnvVarSourceBuilder()\n\t\t\t\t\t\t.withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n\t\t\t\t\t\t.build())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-04-30 15:26:15","commitOrder":4,"curCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements resourceRequirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerCPU(),\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerExternalResources());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesTaskManagerParameters.getTaskManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesTaskManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesTaskManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(resourceRequirements)\n\t\t\t\t.withPorts(new ContainerPortBuilder()\n\t\t\t\t\t.withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n\t\t\t\t\t.build())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_NAME)\n\t\t\t\t\t.withValue(kubernetesTaskManagerParameters.getPodName())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","date":"2020-05-17 23:33:03","endLine":100,"groupId":"12541","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fe/9e67cfff3adf6bf899a349aece14387e256f69.src","preCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements resourceRequirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerCPU());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesTaskManagerParameters.getTaskManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesTaskManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesTaskManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(resourceRequirements)\n\t\t\t\t.withPorts(new ContainerPortBuilder()\n\t\t\t\t\t.withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n\t\t\t\t\t.build())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_NAME)\n\t\t\t\t\t.withValue(kubernetesTaskManagerParameters.getPodName())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitTaskManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"9dd1f6db59511842672f9427a95060029fe7a759","commitMessage":"@@@[FLINK-17407] Forward extended resource request to Kubernetes.\n","date":"2020-05-17 23:33:03","modifiedFileCount":"8","status":"M","submitter":"Yangze Guo"},{"authorTime":"2020-05-09 17:28:45","codes":[{"authorDate":"2020-04-30 15:26:15","commitOrder":5,"curCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements requirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerMemoryMB(),\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerCPU(),\n\t\t\t\tCollections.emptyMap());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesJobManagerParameters.getJobManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesJobManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesJobManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(requirements)\n\t\t\t\t.withPorts(getContainerPorts())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_IP_ADDRESS)\n\t\t\t\t\t.withValueFrom(new EnvVarSourceBuilder()\n\t\t\t\t\t\t.withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n\t\t\t\t\t\t.build())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","date":"2020-05-17 23:33:03","endLine":105,"groupId":"47808","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ef/04252bfae7bd66f837efd89d19fe6855067d45.src","preCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements requirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerMemoryMB(),\n\t\t\t\tkubernetesJobManagerParameters.getJobManagerCPU(),\n\t\t\t\tCollections.emptyMap());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesJobManagerParameters.getJobManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesJobManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesJobManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(requirements)\n\t\t\t\t.withPorts(getContainerPorts())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_IP_ADDRESS)\n\t\t\t\t\t.withValueFrom(new EnvVarSourceBuilder()\n\t\t\t\t\t\t.withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n\t\t\t\t\t\t.build())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"},{"authorDate":"2020-05-09 17:28:45","commitOrder":5,"curCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements resourceRequirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerCPU(),\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerExternalResources());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesTaskManagerParameters.getTaskManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesTaskManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesTaskManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(resourceRequirements)\n\t\t\t\t.withPorts(new ContainerPortBuilder()\n\t\t\t\t\t.withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n\t\t\t\t\t.build())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.build();\n\t}\n","date":"2020-06-24 16:43:03","endLine":95,"groupId":"12541","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/40048978d7c1c8f438c6ccb03819d54ad2d057.src","preCode":"\tprivate Container decorateMainContainer(Container container) {\n\t\tfinal ResourceRequirements resourceRequirements = KubernetesUtils.getResourceRequirements(\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerCPU(),\n\t\t\t\tkubernetesTaskManagerParameters.getTaskManagerExternalResources());\n\n\t\treturn new ContainerBuilder(container)\n\t\t\t\t.withName(kubernetesTaskManagerParameters.getTaskManagerMainContainerName())\n\t\t\t\t.withImage(kubernetesTaskManagerParameters.getImage())\n\t\t\t\t.withImagePullPolicy(kubernetesTaskManagerParameters.getImagePullPolicy().name())\n\t\t\t\t.withResources(resourceRequirements)\n\t\t\t\t.withPorts(new ContainerPortBuilder()\n\t\t\t\t\t.withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n\t\t\t\t\t.build())\n\t\t\t\t.withEnv(getCustomizedEnvs())\n\t\t\t\t.addNewEnv()\n\t\t\t\t\t.withName(ENV_FLINK_POD_NAME)\n\t\t\t\t\t.withValue(kubernetesTaskManagerParameters.getPodName())\n\t\t\t\t\t.endEnv()\n\t\t\t\t.build();\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitTaskManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"66484922d5704a5e2c68078a0b1a3daebb5d8029","commitMessage":"@@@[FLINK-17579] Allow user to set the TaskManager ResourceID in standalone mode\n\nThis closes #12054.\n","date":"2020-06-24 16:43:03","modifiedFileCount":"18","status":"M","submitter":"Yangze Guo"},{"authorTime":"2021-02-20 10:00:14","codes":[{"authorDate":"2021-02-20 10:00:14","commitOrder":6,"curCode":"    private Container decorateMainContainer(Container container) {\n        final ResourceRequirements requirements =\n                KubernetesUtils.getResourceRequirements(\n                        kubernetesJobManagerParameters.getJobManagerMemoryMB(),\n                        kubernetesJobManagerParameters.getJobManagerCPU(),\n                        Collections.emptyMap());\n\n        return new ContainerBuilder(container)\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(kubernetesJobManagerParameters.getImage())\n                .withImagePullPolicy(kubernetesJobManagerParameters.getImagePullPolicy().name())\n                .withResources(requirements)\n                .withPorts(getContainerPorts())\n                .withEnv(getCustomizedEnvs())\n                .addNewEnv()\n                .withName(ENV_FLINK_POD_IP_ADDRESS)\n                .withValueFrom(\n                        new EnvVarSourceBuilder()\n                                .withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n                                .build())\n                .endEnv()\n                .build();\n    }\n","date":"2021-03-01 17:38:17","endLine":110,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/db/686a412a5e7d12facf2c4e4242ab99c88b2273.src","preCode":"    private Container decorateMainContainer(Container container) {\n        final ResourceRequirements requirements =\n                KubernetesUtils.getResourceRequirements(\n                        kubernetesJobManagerParameters.getJobManagerMemoryMB(),\n                        kubernetesJobManagerParameters.getJobManagerCPU(),\n                        Collections.emptyMap());\n\n        return new ContainerBuilder(container)\n                .withName(kubernetesJobManagerParameters.getJobManagerMainContainerName())\n                .withImage(kubernetesJobManagerParameters.getImage())\n                .withImagePullPolicy(kubernetesJobManagerParameters.getImagePullPolicy().name())\n                .withResources(requirements)\n                .withPorts(getContainerPorts())\n                .withEnv(getCustomizedEnvs())\n                .addNewEnv()\n                .withName(ENV_FLINK_POD_IP_ADDRESS)\n                .withValueFrom(\n                        new EnvVarSourceBuilder()\n                                .withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n                                .build())\n                .endEnv()\n                .build();\n    }\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2021-02-20 10:00:14","commitOrder":6,"curCode":"    private Container decorateMainContainer(Container container) {\n        final ResourceRequirements resourceRequirements =\n                KubernetesUtils.getResourceRequirements(\n                        kubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n                        kubernetesTaskManagerParameters.getTaskManagerCPU(),\n                        kubernetesTaskManagerParameters.getTaskManagerExternalResources());\n\n        return new ContainerBuilder(container)\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(kubernetesTaskManagerParameters.getImage())\n                .withImagePullPolicy(kubernetesTaskManagerParameters.getImagePullPolicy().name())\n                .withResources(resourceRequirements)\n                .withPorts(\n                        new ContainerPortBuilder()\n                                .withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n                                .withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n                                .build())\n                .withEnv(getCustomizedEnvs())\n                .build();\n    }\n","date":"2021-03-01 17:38:17","endLine":102,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/5bc3c4f894e4563c905e71774d2de6af6ff840.src","preCode":"    private Container decorateMainContainer(Container container) {\n        final ResourceRequirements resourceRequirements =\n                KubernetesUtils.getResourceRequirements(\n                        kubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n                        kubernetesTaskManagerParameters.getTaskManagerCPU(),\n                        kubernetesTaskManagerParameters.getTaskManagerExternalResources());\n\n        return new ContainerBuilder(container)\n                .withName(kubernetesTaskManagerParameters.getTaskManagerMainContainerName())\n                .withImage(kubernetesTaskManagerParameters.getImage())\n                .withImagePullPolicy(kubernetesTaskManagerParameters.getImagePullPolicy().name())\n                .withResources(resourceRequirements)\n                .withPorts(\n                        new ContainerPortBuilder()\n                                .withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n                                .withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n                                .build())\n                .withEnv(getCustomizedEnvs())\n                .build();\n    }\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitTaskManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"a9003ddd646fb76ee30c109652a3e35ed9b8057e","commitMessage":"@@@[FLINK-15656][k8s] Unify the main container name of jobmanager and taskmanager pod\n","date":"2021-03-01 17:38:17","modifiedFileCount":"9","status":"M","submitter":"wangyang0918"},{"authorTime":"2021-02-20 15:45:20","codes":[{"authorDate":"2021-02-20 15:45:20","commitOrder":7,"curCode":"    private Container decorateMainContainer(Container container) {\n        final ContainerBuilder mainContainerBuilder = new ContainerBuilder(container);\n        \r\n        final String image =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE,\n                        kubernetesJobManagerParameters.getImage(),\n                        container.getImage(),\n                        \"main container image\");\n        final String imagePullPolicy =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE_PULL_POLICY,\n                        kubernetesJobManagerParameters.getImagePullPolicy().name(),\n                        container.getImagePullPolicy(),\n                        \"main container image pull policy\");\n        final ResourceRequirements requirementsInPodTemplate =\n                container.getResources() == null\n                        ? new ResourceRequirements()\n                        : container.getResources();\n        final ResourceRequirements requirements =\n                KubernetesUtils.getResourceRequirements(\n                        requirementsInPodTemplate,\n                        kubernetesJobManagerParameters.getJobManagerMemoryMB(),\n                        kubernetesJobManagerParameters.getJobManagerCPU(),\n                        Collections.emptyMap());\n        mainContainerBuilder\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(image)\n                .withImagePullPolicy(imagePullPolicy)\n                .withResources(requirements);\n\n        \r\n        mainContainerBuilder\n                .addAllToPorts(getContainerPorts())\n                .addAllToEnv(getCustomizedEnvs())\n                .addNewEnv()\n                .withName(ENV_FLINK_POD_IP_ADDRESS)\n                .withValueFrom(\n                        new EnvVarSourceBuilder()\n                                .withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n                                .build())\n                .endEnv();\n        return mainContainerBuilder.build();\n    }\n","date":"2021-03-01 17:38:18","endLine":152,"groupId":"46303","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/df/59f97905b6a353ca5fa4f75b0f99ef25a62f77.src","preCode":"    private Container decorateMainContainer(Container container) {\n        final ResourceRequirements requirements =\n                KubernetesUtils.getResourceRequirements(\n                        kubernetesJobManagerParameters.getJobManagerMemoryMB(),\n                        kubernetesJobManagerParameters.getJobManagerCPU(),\n                        Collections.emptyMap());\n\n        return new ContainerBuilder(container)\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(kubernetesJobManagerParameters.getImage())\n                .withImagePullPolicy(kubernetesJobManagerParameters.getImagePullPolicy().name())\n                .withResources(requirements)\n                .withPorts(getContainerPorts())\n                .withEnv(getCustomizedEnvs())\n                .addNewEnv()\n                .withName(ENV_FLINK_POD_IP_ADDRESS)\n                .withValueFrom(\n                        new EnvVarSourceBuilder()\n                                .withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n                                .build())\n                .endEnv()\n                .build();\n    }\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2021-02-20 15:45:20","commitOrder":7,"curCode":"    private Container decorateMainContainer(Container container) {\n        final ContainerBuilder mainContainerBuilder = new ContainerBuilder(container);\n\n        \r\n        final ResourceRequirements requirementsInPodTemplate =\n                container.getResources() == null\n                        ? new ResourceRequirements()\n                        : container.getResources();\n        final ResourceRequirements resourceRequirements =\n                KubernetesUtils.getResourceRequirements(\n                        requirementsInPodTemplate,\n                        kubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n                        kubernetesTaskManagerParameters.getTaskManagerCPU(),\n                        kubernetesTaskManagerParameters.getTaskManagerExternalResources());\n        final String image =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE,\n                        kubernetesTaskManagerParameters.getImage(),\n                        container.getImage(),\n                        \"main container image\");\n        final String imagePullPolicy =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE_PULL_POLICY,\n                        kubernetesTaskManagerParameters.getImagePullPolicy().name(),\n                        container.getImagePullPolicy(),\n                        \"main container image pull policy\");\n        mainContainerBuilder\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(image)\n                .withImagePullPolicy(imagePullPolicy)\n                .withResources(resourceRequirements);\n\n        \r\n        mainContainerBuilder\n                .addToPorts(\n                        new ContainerPortBuilder()\n                                .withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n                                .withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n                                .build())\n                .addAllToEnv(getCustomizedEnvs());\n\n        return mainContainerBuilder.build();\n    }\n","date":"2021-03-01 17:38:18","endLine":148,"groupId":"51226","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/34/c317d2209b244ca22b44e9ab3543054a68df48.src","preCode":"    private Container decorateMainContainer(Container container) {\n        final ResourceRequirements resourceRequirements =\n                KubernetesUtils.getResourceRequirements(\n                        kubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n                        kubernetesTaskManagerParameters.getTaskManagerCPU(),\n                        kubernetesTaskManagerParameters.getTaskManagerExternalResources());\n\n        return new ContainerBuilder(container)\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(kubernetesTaskManagerParameters.getImage())\n                .withImagePullPolicy(kubernetesTaskManagerParameters.getImagePullPolicy().name())\n                .withResources(resourceRequirements)\n                .withPorts(\n                        new ContainerPortBuilder()\n                                .withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n                                .withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n                                .build())\n                .withEnv(getCustomizedEnvs())\n                .build();\n    }\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitTaskManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"1552131f76538ab8b09d84c8a12a9a5729432616","commitMessage":"@@@[FLINK-15656][k8s] Support to overwrite and merge some K8s fields from pod template and config options\n","date":"2021-03-01 17:38:18","modifiedFileCount":"12","status":"M","submitter":"wangyang0918"},{"authorTime":"2021-02-25 14:15:18","codes":[{"authorDate":"2021-02-25 14:15:18","commitOrder":8,"curCode":"    private Container decorateMainContainer(Container container) {\n        final ContainerBuilder mainContainerBuilder = new ContainerBuilder(container);\n        \r\n        final String image =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE,\n                        kubernetesJobManagerParameters.getImage(),\n                        container.getImage(),\n                        \"main container image\");\n        final String imagePullPolicy =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE_PULL_POLICY,\n                        kubernetesJobManagerParameters.getImagePullPolicy().name(),\n                        container.getImagePullPolicy(),\n                        \"main container image pull policy\");\n        final ResourceRequirements requirementsInPodTemplate =\n                container.getResources() == null\n                        ? new ResourceRequirements()\n                        : container.getResources();\n        final ResourceRequirements requirements =\n                KubernetesUtils.getResourceRequirements(\n                        requirementsInPodTemplate,\n                        kubernetesJobManagerParameters.getJobManagerMemoryMB(),\n                        kubernetesJobManagerParameters.getJobManagerCPU(),\n                        Collections.emptyMap(),\n                        Collections.emptyMap());\n        mainContainerBuilder\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(image)\n                .withImagePullPolicy(imagePullPolicy)\n                .withResources(requirements);\n\n        \r\n        mainContainerBuilder\n                .addAllToPorts(getContainerPorts())\n                .addAllToEnv(getCustomizedEnvs())\n                .addNewEnv()\n                .withName(ENV_FLINK_POD_IP_ADDRESS)\n                .withValueFrom(\n                        new EnvVarSourceBuilder()\n                                .withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n                                .build())\n                .endEnv();\n        return mainContainerBuilder.build();\n    }\n","date":"2021-03-17 18:51:51","endLine":153,"groupId":"102402","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/74fb325646bffeed7a1475620e4ab1fbaea720.src","preCode":"    private Container decorateMainContainer(Container container) {\n        final ContainerBuilder mainContainerBuilder = new ContainerBuilder(container);\n        \r\n        final String image =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE,\n                        kubernetesJobManagerParameters.getImage(),\n                        container.getImage(),\n                        \"main container image\");\n        final String imagePullPolicy =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE_PULL_POLICY,\n                        kubernetesJobManagerParameters.getImagePullPolicy().name(),\n                        container.getImagePullPolicy(),\n                        \"main container image pull policy\");\n        final ResourceRequirements requirementsInPodTemplate =\n                container.getResources() == null\n                        ? new ResourceRequirements()\n                        : container.getResources();\n        final ResourceRequirements requirements =\n                KubernetesUtils.getResourceRequirements(\n                        requirementsInPodTemplate,\n                        kubernetesJobManagerParameters.getJobManagerMemoryMB(),\n                        kubernetesJobManagerParameters.getJobManagerCPU(),\n                        Collections.emptyMap());\n        mainContainerBuilder\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(image)\n                .withImagePullPolicy(imagePullPolicy)\n                .withResources(requirements);\n\n        \r\n        mainContainerBuilder\n                .addAllToPorts(getContainerPorts())\n                .addAllToEnv(getCustomizedEnvs())\n                .addNewEnv()\n                .withName(ENV_FLINK_POD_IP_ADDRESS)\n                .withValueFrom(\n                        new EnvVarSourceBuilder()\n                                .withNewFieldRef(API_VERSION, POD_IP_FIELD_PATH)\n                                .build())\n                .endEnv();\n        return mainContainerBuilder.build();\n    }\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2021-02-25 14:15:18","commitOrder":8,"curCode":"    private Container decorateMainContainer(Container container) {\n        final ContainerBuilder mainContainerBuilder = new ContainerBuilder(container);\n\n        \r\n        final ResourceRequirements requirementsInPodTemplate =\n                container.getResources() == null\n                        ? new ResourceRequirements()\n                        : container.getResources();\n        final ResourceRequirements resourceRequirements =\n                KubernetesUtils.getResourceRequirements(\n                        requirementsInPodTemplate,\n                        kubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n                        kubernetesTaskManagerParameters.getTaskManagerCPU(),\n                        kubernetesTaskManagerParameters.getTaskManagerExternalResources(),\n                        kubernetesTaskManagerParameters.getTaskManagerExternalResourceConfigKeys());\n        final String image =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE,\n                        kubernetesTaskManagerParameters.getImage(),\n                        container.getImage(),\n                        \"main container image\");\n        final String imagePullPolicy =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE_PULL_POLICY,\n                        kubernetesTaskManagerParameters.getImagePullPolicy().name(),\n                        container.getImagePullPolicy(),\n                        \"main container image pull policy\");\n        mainContainerBuilder\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(image)\n                .withImagePullPolicy(imagePullPolicy)\n                .withResources(resourceRequirements);\n\n        \r\n        mainContainerBuilder\n                .addToPorts(\n                        new ContainerPortBuilder()\n                                .withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n                                .withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n                                .build())\n                .addAllToEnv(getCustomizedEnvs());\n\n        return mainContainerBuilder.build();\n    }\n","date":"2021-03-17 18:51:51","endLine":149,"groupId":"102402","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"decorateMainContainer","params":"(Containercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dd/c174585ce2adf3e90d7f9dd76ab54d4952909e.src","preCode":"    private Container decorateMainContainer(Container container) {\n        final ContainerBuilder mainContainerBuilder = new ContainerBuilder(container);\n\n        \r\n        final ResourceRequirements requirementsInPodTemplate =\n                container.getResources() == null\n                        ? new ResourceRequirements()\n                        : container.getResources();\n        final ResourceRequirements resourceRequirements =\n                KubernetesUtils.getResourceRequirements(\n                        requirementsInPodTemplate,\n                        kubernetesTaskManagerParameters.getTaskManagerMemoryMB(),\n                        kubernetesTaskManagerParameters.getTaskManagerCPU(),\n                        kubernetesTaskManagerParameters.getTaskManagerExternalResources());\n        final String image =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE,\n                        kubernetesTaskManagerParameters.getImage(),\n                        container.getImage(),\n                        \"main container image\");\n        final String imagePullPolicy =\n                KubernetesUtils.resolveUserDefinedValue(\n                        flinkConfig,\n                        KubernetesConfigOptions.CONTAINER_IMAGE_PULL_POLICY,\n                        kubernetesTaskManagerParameters.getImagePullPolicy().name(),\n                        container.getImagePullPolicy(),\n                        \"main container image pull policy\");\n        mainContainerBuilder\n                .withName(Constants.MAIN_CONTAINER_NAME)\n                .withImage(image)\n                .withImagePullPolicy(imagePullPolicy)\n                .withResources(resourceRequirements);\n\n        \r\n        mainContainerBuilder\n                .addToPorts(\n                        new ContainerPortBuilder()\n                                .withName(Constants.TASK_MANAGER_RPC_PORT_NAME)\n                                .withContainerPort(kubernetesTaskManagerParameters.getRPCPort())\n                                .build())\n                .addAllToEnv(getCustomizedEnvs());\n\n        return mainContainerBuilder.build();\n    }\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InitTaskManagerDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"b0467af84a679788e10954476fe1bd3fc8012677","commitMessage":"@@@[FLINK-21480][yarn][k8s] Request external resource according to TaskExecutorProcessSpec\n\nThis closes #15112\n","date":"2021-03-17 18:51:51","modifiedFileCount":"11","status":"M","submitter":"Yangze Guo"}]
