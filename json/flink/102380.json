[{"authorTime":"2020-06-22 16:39:35","codes":[{"authorDate":"2020-06-22 16:39:35","commitOrder":4,"curCode":"\tpublic void testKerberosConfConfigMap() throws IOException {\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(kubernetesJobManagerParameters);\n\n\t\tfinal ConfigMap resultConfigMap = (ConfigMap) this.kubernetesJobManagerSpecification.getAccompanyingResources()\n\t\t\t.stream()\n\t\t\t.filter(x -> x instanceof ConfigMap &&\n\t\t\t\tx.getMetadata().getName().equals(KerberosMountDecorator.getKerberosKrb5confConfigMapName(CLUSTER_ID)))\n\t\t\t.collect(Collectors.toList())\n\t\t\t.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, resultConfigMap.getApiVersion());\n\n\t\tassertEquals(KerberosMountDecorator.getKerberosKrb5confConfigMapName(CLUSTER_ID),\n\t\t\tresultConfigMap.getMetadata().getName());\n\n\t\tfinal Map<String, String> resultDatas = resultConfigMap.getData();\n\t\tassertEquals(1, resultDatas.size());\n\t\tassertEquals(\"some conf\", resultDatas.get(KRB5_CONF_FILE));\n\t}\n","date":"2020-10-22 11:33:26","endLine":244,"groupId":"11304","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKerberosConfConfigMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/99/3fedc3e5b17efb83417e560b901849c7359798.src","preCode":"\tpublic void testKerberosConfConfigMap() throws IOException {\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(kubernetesJobManagerParameters);\n\n\t\tfinal ConfigMap resultConfigMap = (ConfigMap) this.kubernetesJobManagerSpecification.getAccompanyingResources()\n\t\t\t.stream()\n\t\t\t.filter(x -> x instanceof ConfigMap &&\n\t\t\t\tx.getMetadata().getName().equals(KerberosMountDecorator.getKerberosKrb5confConfigMapName(CLUSTER_ID)))\n\t\t\t.collect(Collectors.toList())\n\t\t\t.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, resultConfigMap.getApiVersion());\n\n\t\tassertEquals(KerberosMountDecorator.getKerberosKrb5confConfigMapName(CLUSTER_ID),\n\t\t\tresultConfigMap.getMetadata().getName());\n\n\t\tfinal Map<String, String> resultDatas = resultConfigMap.getData();\n\t\tassertEquals(1, resultDatas.size());\n\t\tassertEquals(\"some conf\", resultDatas.get(KRB5_CONF_FILE));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"B"},{"authorDate":"2020-06-22 16:39:35","commitOrder":4,"curCode":"\tpublic void testFlinkConfConfigMap() throws IOException {\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(kubernetesJobManagerParameters);\n\n\t\tfinal ConfigMap resultConfigMap = (ConfigMap) this.kubernetesJobManagerSpecification.getAccompanyingResources()\n\t\t\t.stream()\n\t\t\t.filter(x -> x instanceof ConfigMap &&\n\t\t\t\tx.getMetadata().getName().equals(FlinkConfMountDecorator.getFlinkConfConfigMapName(CLUSTER_ID)))\n\t\t\t.collect(Collectors.toList())\n\t\t\t.get(0);\n\n\t\tassertEquals(2, resultConfigMap.getMetadata().getLabels().size());\n\n\t\tfinal Map<String, String> resultDatas = resultConfigMap.getData();\n\t\tassertEquals(3, resultDatas.size());\n\t\tassertEquals(\"some data\", resultDatas.get(CONFIG_FILE_LOG4J_NAME));\n\t\tassertEquals(\"some data\", resultDatas.get(CONFIG_FILE_LOGBACK_NAME));\n\t\tassertTrue(resultDatas.get(FLINK_CONF_FILENAME)\n\t\t\t.contains(KubernetesConfigOptionsInternal.ENTRY_POINT_CLASS.key() + \": \" + ENTRY_POINT_CLASS));\n\t}\n","date":"2020-10-22 11:33:26","endLine":281,"groupId":"19308","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlinkConfConfigMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/99/3fedc3e5b17efb83417e560b901849c7359798.src","preCode":"\tpublic void testFlinkConfConfigMap() throws IOException {\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(kubernetesJobManagerParameters);\n\n\t\tfinal ConfigMap resultConfigMap = (ConfigMap) this.kubernetesJobManagerSpecification.getAccompanyingResources()\n\t\t\t.stream()\n\t\t\t.filter(x -> x instanceof ConfigMap &&\n\t\t\t\tx.getMetadata().getName().equals(FlinkConfMountDecorator.getFlinkConfConfigMapName(CLUSTER_ID)))\n\t\t\t.collect(Collectors.toList())\n\t\t\t.get(0);\n\n\t\tassertEquals(2, resultConfigMap.getMetadata().getLabels().size());\n\n\t\tfinal Map<String, String> resultDatas = resultConfigMap.getData();\n\t\tassertEquals(3, resultDatas.size());\n\t\tassertEquals(\"some data\", resultDatas.get(CONFIG_FILE_LOG4J_NAME));\n\t\tassertEquals(\"some data\", resultDatas.get(CONFIG_FILE_LOGBACK_NAME));\n\t\tassertTrue(resultDatas.get(FLINK_CONF_FILENAME)\n\t\t\t.contains(KubernetesConfigOptionsInternal.ENTRY_POINT_CLASS.key() + \": \" + ENTRY_POINT_CLASS));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"MB"}],"commitId":"3862a4aaf3750506eb69af6faf822b07d7d725a2","commitMessage":"@@@[FLINK-18971][kubernetes] Support to mount kerberos conf as ConfigMap and Keytab as Secrete in Kubernetes\n","date":"2020-10-22 11:33:26","modifiedFileCount":"9","status":"M","submitter":"Yangze Guo"},{"authorTime":"2021-02-20 11:30:39","codes":[{"authorDate":"2021-02-20 11:30:39","commitOrder":5,"curCode":"    public void testKerberosConfConfigMap() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        flinkPod, kubernetesJobManagerParameters);\n\n        final ConfigMap resultConfigMap =\n                (ConfigMap)\n                        this.kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n                                .filter(\n                                        x ->\n                                                x instanceof ConfigMap\n                                                        && x.getMetadata()\n                                                                .getName()\n                                                                .equals(\n                                                                        KerberosMountDecorator\n                                                                                .getKerberosKrb5confConfigMapName(\n                                                                                        CLUSTER_ID)))\n                                .collect(Collectors.toList())\n                                .get(0);\n\n        assertEquals(Constants.API_VERSION, resultConfigMap.getApiVersion());\n\n        assertEquals(\n                KerberosMountDecorator.getKerberosKrb5confConfigMapName(CLUSTER_ID),\n                resultConfigMap.getMetadata().getName());\n\n        final Map<String, String> resultDatas = resultConfigMap.getData();\n        assertEquals(1, resultDatas.size());\n        assertEquals(\"some conf\", resultDatas.get(KRB5_CONF_FILE));\n    }\n","date":"2021-03-01 17:38:17","endLine":317,"groupId":"102380","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testKerberosConfConfigMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/25/869c66e5ad22bcac02e10f2d06c3a9aaa83e66.src","preCode":"    public void testKerberosConfConfigMap() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        kubernetesJobManagerParameters);\n\n        final ConfigMap resultConfigMap =\n                (ConfigMap)\n                        this.kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n                                .filter(\n                                        x ->\n                                                x instanceof ConfigMap\n                                                        && x.getMetadata()\n                                                                .getName()\n                                                                .equals(\n                                                                        KerberosMountDecorator\n                                                                                .getKerberosKrb5confConfigMapName(\n                                                                                        CLUSTER_ID)))\n                                .collect(Collectors.toList())\n                                .get(0);\n\n        assertEquals(Constants.API_VERSION, resultConfigMap.getApiVersion());\n\n        assertEquals(\n                KerberosMountDecorator.getKerberosKrb5confConfigMapName(CLUSTER_ID),\n                resultConfigMap.getMetadata().getName());\n\n        final Map<String, String> resultDatas = resultConfigMap.getData();\n        assertEquals(1, resultDatas.size());\n        assertEquals(\"some conf\", resultDatas.get(KRB5_CONF_FILE));\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2021-02-20 11:30:39","commitOrder":5,"curCode":"    public void testFlinkConfConfigMap() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        flinkPod, kubernetesJobManagerParameters);\n\n        final ConfigMap resultConfigMap =\n                (ConfigMap)\n                        this.kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n                                .filter(\n                                        x ->\n                                                x instanceof ConfigMap\n                                                        && x.getMetadata()\n                                                                .getName()\n                                                                .equals(\n                                                                        FlinkConfMountDecorator\n                                                                                .getFlinkConfConfigMapName(\n                                                                                        CLUSTER_ID)))\n                                .collect(Collectors.toList())\n                                .get(0);\n\n        assertEquals(2, resultConfigMap.getMetadata().getLabels().size());\n\n        final Map<String, String> resultDatas = resultConfigMap.getData();\n        assertEquals(3, resultDatas.size());\n        assertEquals(\"some data\", resultDatas.get(CONFIG_FILE_LOG4J_NAME));\n        assertEquals(\"some data\", resultDatas.get(CONFIG_FILE_LOGBACK_NAME));\n        assertTrue(\n                resultDatas\n                        .get(FLINK_CONF_FILENAME)\n                        .contains(\n                                KubernetesConfigOptionsInternal.ENTRY_POINT_CLASS.key()\n                                        + \": \"\n                                        + ENTRY_POINT_CLASS));\n    }\n","date":"2021-03-01 17:38:17","endLine":381,"groupId":"102380","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlinkConfConfigMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/25/869c66e5ad22bcac02e10f2d06c3a9aaa83e66.src","preCode":"    public void testFlinkConfConfigMap() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        kubernetesJobManagerParameters);\n\n        final ConfigMap resultConfigMap =\n                (ConfigMap)\n                        this.kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n                                .filter(\n                                        x ->\n                                                x instanceof ConfigMap\n                                                        && x.getMetadata()\n                                                                .getName()\n                                                                .equals(\n                                                                        FlinkConfMountDecorator\n                                                                                .getFlinkConfConfigMapName(\n                                                                                        CLUSTER_ID)))\n                                .collect(Collectors.toList())\n                                .get(0);\n\n        assertEquals(2, resultConfigMap.getMetadata().getLabels().size());\n\n        final Map<String, String> resultDatas = resultConfigMap.getData();\n        assertEquals(3, resultDatas.size());\n        assertEquals(\"some data\", resultDatas.get(CONFIG_FILE_LOG4J_NAME));\n        assertEquals(\"some data\", resultDatas.get(CONFIG_FILE_LOGBACK_NAME));\n        assertTrue(\n                resultDatas\n                        .get(FLINK_CONF_FILENAME)\n                        .contains(\n                                KubernetesConfigOptionsInternal.ENTRY_POINT_CLASS.key()\n                                        + \": \"\n                                        + ENTRY_POINT_CLASS));\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"}],"commitId":"4957736f9d00f6a2e7185fcea9965efd5aea9da0","commitMessage":"@@@[FLINK-15656][k8s] Support pod template for native kubernetes integration\n\nBenifit from flexibility of pod template.  we could support init container.  sidecar container.  volume mount.  pod security context.  etc.\n","date":"2021-03-01 17:38:17","modifiedFileCount":"17","status":"M","submitter":"wangyang0918"}]
