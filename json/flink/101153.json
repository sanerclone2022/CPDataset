[{"authorTime":"2020-05-12 01:47:14","codes":[{"authorDate":"2020-05-12 01:47:14","commitOrder":1,"curCode":"\tpublic void testProcessMessage() throws Exception {\n\t\tTestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(\n\t\t\treceivedMessage(\"1\", pubSubMessage(\"A\")),\n\t\t\treceivedMessage(\"2\", pubSubMessage(\"B\"))\n\t\t);\n\t\tPubSubSource<String> pubSubSource = PubSubSource.newBuilder()\n\t\t\t.withDeserializationSchema(new SimpleStringSchema())\n\t\t\t.withProjectName(\"fakeProject\")\n\t\t\t.withSubscriptionName(\"fakeSubscription\")\n\t\t\t.withPubSubSubscriberFactory(\n\t\t\tcredentials -> testPubSubSubscriber)\n\t\t\t.withCredentials(mock(Credentials.class))\n\t\t\t.build();\n\n\t\tObject lock = new Object();\n\t\tConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>();\n\t\tThread thread = createSourceThread(pubSubSource, lock, results);\n\t\ttry {\n\t\t\tthread.start();\n\t\t\tawaitRecordCount(results, 2);\n\n\t\t\tassertThat(new ArrayList<>(results), equalTo(Arrays.asList(\"A\", \"B\")));\n\t\t\tpubSubSource.snapshotState(0, 0);\n\t\t\tpubSubSource.notifyCheckpointComplete(0);\n\t\t\tassertThat(testPubSubSubscriber.getAcknowledgedIds(), equalTo(Arrays.asList(\"1\", \"2\")));\n\t\t} finally {\n\t\t\tpubSubSource.cancel();\n\t\t\tthread.join();\n\t\t}\n\t}\n","date":"2020-05-13 04:16:06","endLine":84,"groupId":"28124","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/b8bfa4188d2020102c785bacbb4d7fae5a8e41.src","preCode":"\tpublic void testProcessMessage() throws Exception {\n\t\tTestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(\n\t\t\treceivedMessage(\"1\", pubSubMessage(\"A\")),\n\t\t\treceivedMessage(\"2\", pubSubMessage(\"B\"))\n\t\t);\n\t\tPubSubSource<String> pubSubSource = PubSubSource.newBuilder()\n\t\t\t.withDeserializationSchema(new SimpleStringSchema())\n\t\t\t.withProjectName(\"fakeProject\")\n\t\t\t.withSubscriptionName(\"fakeSubscription\")\n\t\t\t.withPubSubSubscriberFactory(\n\t\t\tcredentials -> testPubSubSubscriber)\n\t\t\t.withCredentials(mock(Credentials.class))\n\t\t\t.build();\n\n\t\tObject lock = new Object();\n\t\tConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>();\n\t\tThread thread = createSourceThread(pubSubSource, lock, results);\n\t\ttry {\n\t\t\tthread.start();\n\t\t\tawaitRecordCount(results, 2);\n\n\t\t\tassertThat(new ArrayList<>(results), equalTo(Arrays.asList(\"A\", \"B\")));\n\t\t\tpubSubSource.snapshotState(0, 0);\n\t\t\tpubSubSource.notifyCheckpointComplete(0);\n\t\t\tassertThat(testPubSubSubscriber.getAcknowledgedIds(), equalTo(Arrays.asList(\"1\", \"2\")));\n\t\t} finally {\n\t\t\tpubSubSource.cancel();\n\t\t\tthread.join();\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-gcp-pubsub/src/test/java/org/apache/flink/streaming/connectors/gcp/pubsub/PubSubConsumingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2020-05-12 01:47:14","commitOrder":1,"curCode":"\tpublic void testProducingMultipleResults() throws Exception {\n\t\tTestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(\n\t\t\treceivedMessage(\"1\", pubSubMessage(\"A\")),\n\t\t\treceivedMessage(\"2\", pubSubMessage(\"B,C,D\")),\n\t\t\treceivedMessage(\"3\", pubSubMessage(\"E\"))\n\t\t);\n\t\tPubSubSource<String> pubSubSource = PubSubSource.newBuilder()\n\t\t\t.withDeserializationSchema(new SimpleStringSchema() {\n\t\t\t\t@Override\n\t\t\t\tpublic void deserialize(byte[] message, Collector<String> out) throws IOException {\n\t\t\t\t\tString[] records = super.deserialize(message).split(\",\");\n\t\t\t\t\tfor (String record : records) {\n\t\t\t\t\t\tout.collect(record);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isEndOfStream(String nextElement) {\n\t\t\t\t\treturn nextElement.equals(\"C\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.withProjectName(\"fakeProject\")\n\t\t\t.withSubscriptionName(\"fakeSubscription\")\n\t\t\t.withPubSubSubscriberFactory(\n\t\t\t\tcredentials -> testPubSubSubscriber)\n\t\t\t.withCredentials(mock(Credentials.class))\n\t\t\t.build();\n\n\t\tObject lock = new Object();\n\t\tConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>();\n\t\tThread thread = createSourceThread(pubSubSource, lock, results);\n\t\ttry {\n\t\t\tthread.start();\n\t\t\tawaitRecordCount(results, 2);\n\n\t\t\t\r\n\t\t\tassertThat(new ArrayList<>(results), equalTo(Arrays.asList(\"A\", \"B\")));\n\t\t\tpubSubSource.snapshotState(0, 0);\n\t\t\tpubSubSource.notifyCheckpointComplete(0);\n\t\t\t\r\n\t\t\tassertThat(testPubSubSubscriber.getAcknowledgedIds(), equalTo(Arrays.asList(\"1\", \"2\")));\n\t\t} finally {\n\t\t\tpubSubSource.cancel();\n\t\t\tthread.join();\n\t\t}\n\t}\n","date":"2020-05-13 04:16:06","endLine":173,"groupId":"28124","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProducingMultipleResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/b8bfa4188d2020102c785bacbb4d7fae5a8e41.src","preCode":"\tpublic void testProducingMultipleResults() throws Exception {\n\t\tTestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(\n\t\t\treceivedMessage(\"1\", pubSubMessage(\"A\")),\n\t\t\treceivedMessage(\"2\", pubSubMessage(\"B,C,D\")),\n\t\t\treceivedMessage(\"3\", pubSubMessage(\"E\"))\n\t\t);\n\t\tPubSubSource<String> pubSubSource = PubSubSource.newBuilder()\n\t\t\t.withDeserializationSchema(new SimpleStringSchema() {\n\t\t\t\t@Override\n\t\t\t\tpublic void deserialize(byte[] message, Collector<String> out) throws IOException {\n\t\t\t\t\tString[] records = super.deserialize(message).split(\",\");\n\t\t\t\t\tfor (String record : records) {\n\t\t\t\t\t\tout.collect(record);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isEndOfStream(String nextElement) {\n\t\t\t\t\treturn nextElement.equals(\"C\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.withProjectName(\"fakeProject\")\n\t\t\t.withSubscriptionName(\"fakeSubscription\")\n\t\t\t.withPubSubSubscriberFactory(\n\t\t\t\tcredentials -> testPubSubSubscriber)\n\t\t\t.withCredentials(mock(Credentials.class))\n\t\t\t.build();\n\n\t\tObject lock = new Object();\n\t\tConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>();\n\t\tThread thread = createSourceThread(pubSubSource, lock, results);\n\t\ttry {\n\t\t\tthread.start();\n\t\t\tawaitRecordCount(results, 2);\n\n\t\t\t\r\n\t\t\tassertThat(new ArrayList<>(results), equalTo(Arrays.asList(\"A\", \"B\")));\n\t\t\tpubSubSource.snapshotState(0, 0);\n\t\t\tpubSubSource.notifyCheckpointComplete(0);\n\t\t\t\r\n\t\t\tassertThat(testPubSubSubscriber.getAcknowledgedIds(), equalTo(Arrays.asList(\"1\", \"2\")));\n\t\t} finally {\n\t\t\tpubSubSource.cancel();\n\t\t\tthread.join();\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-gcp-pubsub/src/test/java/org/apache/flink/streaming/connectors/gcp/pubsub/PubSubConsumingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"6119c31a8a07b934aee5c3ca44e7995889d37eb1","commitMessage":"@@@[FLINK-17307] Add collector to deserialize in PubSub\n","date":"2020-05-13 04:16:06","modifiedFileCount":"5","status":"B","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-07-08 19:13:11","codes":[{"authorDate":"2020-05-12 01:47:14","commitOrder":2,"curCode":"\tpublic void testProcessMessage() throws Exception {\n\t\tTestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(\n\t\t\treceivedMessage(\"1\", pubSubMessage(\"A\")),\n\t\t\treceivedMessage(\"2\", pubSubMessage(\"B\"))\n\t\t);\n\t\tPubSubSource<String> pubSubSource = PubSubSource.newBuilder()\n\t\t\t.withDeserializationSchema(new SimpleStringSchema())\n\t\t\t.withProjectName(\"fakeProject\")\n\t\t\t.withSubscriptionName(\"fakeSubscription\")\n\t\t\t.withPubSubSubscriberFactory(\n\t\t\tcredentials -> testPubSubSubscriber)\n\t\t\t.withCredentials(mock(Credentials.class))\n\t\t\t.build();\n\n\t\tObject lock = new Object();\n\t\tConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>();\n\t\tThread thread = createSourceThread(pubSubSource, lock, results);\n\t\ttry {\n\t\t\tthread.start();\n\t\t\tawaitRecordCount(results, 2);\n\n\t\t\tassertThat(new ArrayList<>(results), equalTo(Arrays.asList(\"A\", \"B\")));\n\t\t\tpubSubSource.snapshotState(0, 0);\n\t\t\tpubSubSource.notifyCheckpointComplete(0);\n\t\t\tassertThat(testPubSubSubscriber.getAcknowledgedIds(), equalTo(Arrays.asList(\"1\", \"2\")));\n\t\t} finally {\n\t\t\tpubSubSource.cancel();\n\t\t\tthread.join();\n\t\t}\n\t}\n","date":"2020-05-13 04:16:06","endLine":84,"groupId":"101153","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/b8bfa4188d2020102c785bacbb4d7fae5a8e41.src","preCode":"\tpublic void testProcessMessage() throws Exception {\n\t\tTestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(\n\t\t\treceivedMessage(\"1\", pubSubMessage(\"A\")),\n\t\t\treceivedMessage(\"2\", pubSubMessage(\"B\"))\n\t\t);\n\t\tPubSubSource<String> pubSubSource = PubSubSource.newBuilder()\n\t\t\t.withDeserializationSchema(new SimpleStringSchema())\n\t\t\t.withProjectName(\"fakeProject\")\n\t\t\t.withSubscriptionName(\"fakeSubscription\")\n\t\t\t.withPubSubSubscriberFactory(\n\t\t\tcredentials -> testPubSubSubscriber)\n\t\t\t.withCredentials(mock(Credentials.class))\n\t\t\t.build();\n\n\t\tObject lock = new Object();\n\t\tConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>();\n\t\tThread thread = createSourceThread(pubSubSource, lock, results);\n\t\ttry {\n\t\t\tthread.start();\n\t\t\tawaitRecordCount(results, 2);\n\n\t\t\tassertThat(new ArrayList<>(results), equalTo(Arrays.asList(\"A\", \"B\")));\n\t\t\tpubSubSource.snapshotState(0, 0);\n\t\t\tpubSubSource.notifyCheckpointComplete(0);\n\t\t\tassertThat(testPubSubSubscriber.getAcknowledgedIds(), equalTo(Arrays.asList(\"1\", \"2\")));\n\t\t} finally {\n\t\t\tpubSubSource.cancel();\n\t\t\tthread.join();\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-gcp-pubsub/src/test/java/org/apache/flink/streaming/connectors/gcp/pubsub/PubSubConsumingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2020-07-08 19:13:11","commitOrder":2,"curCode":"\tpublic void testProducingMultipleResults() throws Exception {\n\t\tTestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(\n\t\t\treceivedMessage(\"1\", pubSubMessage(\"A\")),\n\t\t\treceivedMessage(\"2\", pubSubMessage(\"B,C,D\")),\n\t\t\treceivedMessage(\"3\", pubSubMessage(\"E\"))\n\t\t);\n\t\tPubSubSource<String> pubSubSource = PubSubSource.newBuilder()\n\t\t\t.withDeserializationSchema(new SimpleStringSchema() {\n\t\t\t\t@Override\n\t\t\t\tpublic void deserialize(byte[] message, Collector<String> out) {\n\t\t\t\t\tString[] records = super.deserialize(message).split(\",\");\n\t\t\t\t\tfor (String record : records) {\n\t\t\t\t\t\tout.collect(record);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isEndOfStream(String nextElement) {\n\t\t\t\t\treturn nextElement.equals(\"C\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.withProjectName(\"fakeProject\")\n\t\t\t.withSubscriptionName(\"fakeSubscription\")\n\t\t\t.withPubSubSubscriberFactory(\n\t\t\t\tcredentials -> testPubSubSubscriber)\n\t\t\t.withCredentials(mock(Credentials.class))\n\t\t\t.build();\n\n\t\tObject lock = new Object();\n\t\tConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>();\n\t\tThread thread = createSourceThread(pubSubSource, lock, results);\n\t\ttry {\n\t\t\tthread.start();\n\t\t\tawaitRecordCount(results, 2);\n\n\t\t\t\r\n\t\t\tassertThat(new ArrayList<>(results), equalTo(Arrays.asList(\"A\", \"B\")));\n\t\t\tpubSubSource.snapshotState(0, 0);\n\t\t\tpubSubSource.notifyCheckpointComplete(0);\n\t\t\t\r\n\t\t\tassertThat(testPubSubSubscriber.getAcknowledgedIds(), equalTo(Arrays.asList(\"1\", \"2\")));\n\t\t} finally {\n\t\t\tpubSubSource.cancel();\n\t\t\tthread.join();\n\t\t}\n\t}\n","date":"2020-07-23 23:21:09","endLine":172,"groupId":"101153","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProducingMultipleResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2a/5467e584d0b28015b51072bd36ea6d029a79a3.src","preCode":"\tpublic void testProducingMultipleResults() throws Exception {\n\t\tTestPubSubSubscriber testPubSubSubscriber = new TestPubSubSubscriber(\n\t\t\treceivedMessage(\"1\", pubSubMessage(\"A\")),\n\t\t\treceivedMessage(\"2\", pubSubMessage(\"B,C,D\")),\n\t\t\treceivedMessage(\"3\", pubSubMessage(\"E\"))\n\t\t);\n\t\tPubSubSource<String> pubSubSource = PubSubSource.newBuilder()\n\t\t\t.withDeserializationSchema(new SimpleStringSchema() {\n\t\t\t\t@Override\n\t\t\t\tpublic void deserialize(byte[] message, Collector<String> out) throws IOException {\n\t\t\t\t\tString[] records = super.deserialize(message).split(\",\");\n\t\t\t\t\tfor (String record : records) {\n\t\t\t\t\t\tout.collect(record);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isEndOfStream(String nextElement) {\n\t\t\t\t\treturn nextElement.equals(\"C\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.withProjectName(\"fakeProject\")\n\t\t\t.withSubscriptionName(\"fakeSubscription\")\n\t\t\t.withPubSubSubscriberFactory(\n\t\t\t\tcredentials -> testPubSubSubscriber)\n\t\t\t.withCredentials(mock(Credentials.class))\n\t\t\t.build();\n\n\t\tObject lock = new Object();\n\t\tConcurrentLinkedQueue<String> results = new ConcurrentLinkedQueue<>();\n\t\tThread thread = createSourceThread(pubSubSource, lock, results);\n\t\ttry {\n\t\t\tthread.start();\n\t\t\tawaitRecordCount(results, 2);\n\n\t\t\t\r\n\t\t\tassertThat(new ArrayList<>(results), equalTo(Arrays.asList(\"A\", \"B\")));\n\t\t\tpubSubSource.snapshotState(0, 0);\n\t\t\tpubSubSource.notifyCheckpointComplete(0);\n\t\t\t\r\n\t\t\tassertThat(testPubSubSubscriber.getAcknowledgedIds(), equalTo(Arrays.asList(\"1\", \"2\")));\n\t\t} finally {\n\t\t\tpubSubSource.cancel();\n\t\t\tthread.join();\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-gcp-pubsub/src/test/java/org/apache/flink/streaming/connectors/gcp/pubsub/PubSubConsumingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"fdcaa46f6047b53e7b6616be21c26967c0f8ade7","commitMessage":"@@@[FLINK-18448][pubsub] Update Google Cloud PubSub dependencies\n\nThis closes #12846\n","date":"2020-07-23 23:21:09","modifiedFileCount":"12","status":"M","submitter":"Niels Basjes"}]
