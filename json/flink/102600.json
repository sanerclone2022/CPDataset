[{"authorTime":"2016-06-27 19:56:27","codes":[{"authorDate":"2016-05-31 23:13:58","commitOrder":8,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-06-21 18:14:06","endLine":183,"groupId":"25052","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dd/f4dcc5f59645a1fabd0acc28fc85697b013e7d.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"NB"},{"authorDate":"2016-06-27 19:56:27","commitOrder":8,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tTestTimeServiceProvider testTimeProvider = new TestTimeServiceProvider();\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), testTimeProvider);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestTimeProvider.setCurrentTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-06-27 23:16:12","endLine":1069,"groupId":"23876","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/a6da2719624c02e200afe1c4624b14a2e89e35.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tTestTimeServiceProvider testTimeProvider = new TestTimeServiceProvider();\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), testTimeProvider);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestTimeProvider.setCurrentTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":996,"status":"MB"}],"commitId":"90cfe0a7b499832cebc2a53f7b066f83dde17de5","commitMessage":"@@@Fix test formatting and move WindowAssignerContext to WindowAssigner\n","date":"2016-06-27 23:16:12","modifiedFileCount":"4","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2016-08-11 00:44:50","codes":[{"authorDate":"2016-08-11 00:44:50","commitOrder":9,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-09-01 01:10:01","endLine":194,"groupId":"25052","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/a6f556796c5e88af3f93de8d4445e42b02169d.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2016-08-11 00:44:50","commitOrder":9,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tTestTimeServiceProvider testTimeProvider = new TestTimeServiceProvider();\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), testTimeProvider, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestTimeProvider.setCurrentTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-09-01 01:10:01","endLine":1073,"groupId":"23876","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/a6f556796c5e88af3f93de8d4445e42b02169d.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tTestTimeServiceProvider testTimeProvider = new TestTimeServiceProvider();\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), testTimeProvider);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestTimeProvider.setCurrentTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1002,"status":"M"}],"commitId":"4809f5367b08a9734fc1bd4875be51a9f3bb65aa","commitMessage":"@@@[FLINK-3761] Refactor State Backends/Make Keyed State Key-Group Aware\n\nThe biggest change in this is that functionality that used to be in\nAbstractStateBackend is now moved to CheckpointStreamFactory and\nKeyedStateBackend. The former is responsible for providing streams that\ncan be used to checkpoint data while the latter is responsible for\nkeeping keyed state. A keyed backend can checkpoint the state that it\nkeeps by using a CheckpointStreamFactory.\n\nThis also refactors how asynchronous keyed state snapshots work. They\nare not implemented using a Future/RunnableFuture.\n\nAlso.  this changes the keyed state backends to be key-group aware and to\nsnapshot the state in key-groups with an index for restoring.\n","date":"2016-09-01 01:10:01","modifiedFileCount":"100","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2016-10-05 05:49:54","codes":[{"authorDate":"2016-10-05 05:49:54","commitOrder":10,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-06 02:04:34","endLine":192,"groupId":"25052","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/a6524b4be41e76bc2250e273e2598685f8f6ee.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2016-10-05 05:49:54","commitOrder":10,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tTestTimeServiceProvider testTimeProvider = new TestTimeServiceProvider();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), testTimeProvider, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestTimeProvider.setCurrentTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-06 02:04:34","endLine":1044,"groupId":"23876","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/a6524b4be41e76bc2250e273e2598685f8f6ee.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tTestTimeServiceProvider testTimeProvider = new TestTimeServiceProvider();\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), testTimeProvider, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestTimeProvider.setCurrentTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":974,"status":"M"}],"commitId":"1cd8d4f418a707790c091fed2428627eae9da423","commitMessage":"@@@[hotfix] [streaming api] Remove obsolete and unused InputTypeSerializer from WindowOperator\n","date":"2016-10-06 02:04:34","modifiedFileCount":"4","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2016-09-26 02:58:16","codes":[{"authorDate":"2016-10-05 05:49:54","commitOrder":11,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-06 02:04:34","endLine":192,"groupId":"25052","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/a6524b4be41e76bc2250e273e2598685f8f6ee.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"},{"authorDate":"2016-09-26 02:58:16","commitOrder":11,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tTestProcessingTimeService testTimeProvider = new TestProcessingTimeService();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), testTimeProvider, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestTimeProvider.setCurrentTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-22 01:03:04","endLine":1039,"groupId":"23876","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/f077894a7c8e13d085b7916dc63d9f9100e6ca.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tTestTimeServiceProvider testTimeProvider = new TestTimeServiceProvider();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), testTimeProvider, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestTimeProvider.setCurrentTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":969,"status":"M"}],"commitId":"e112a63208006b4e348d75f3df84d2fd4b091797","commitMessage":"@@@[FLINK-4877] Rename TimeServiceProvider to ProcessingTimeService\n\nThe name is clashing with the soon-to-be-added\nTimerService/InternalTimerService which is meant as an interface for\ndealing with both processing time and event time.\n\nTimeServiceProvider is renamed to ProcessingTimeService to reflect the\nfact that it is a low-level utility that only deals with \"physical\"\nprocessing-time trigger tasks.\n","date":"2016-10-22 01:03:04","modifiedFileCount":"29","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2016-09-28 22:43:40","codes":[{"authorDate":"2016-10-05 05:49:54","commitOrder":12,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-06 02:04:34","endLine":192,"groupId":"25052","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/a6524b4be41e76bc2250e273e2598685f8f6ee.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"},{"authorDate":"2016-09-28 22:43:40","commitOrder":12,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-22 01:03:04","endLine":969,"groupId":"25052","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b8/a764ef999e1f9a5b24622df721608984f1c2d8.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tTestProcessingTimeService testTimeProvider = new TestProcessingTimeService();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), testTimeProvider, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestTimeProvider.setCurrentTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestTimeProvider.setCurrentTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":901,"status":"M"}],"commitId":"30554758897842ad851dc9b6e1758d452f7d702f","commitMessage":"@@@[FLINK-4877] Refactor OperatorTestHarness to always use TestProcessingTimeService\n\nBefore.  this would allow handing in a custom ProcessingTimeService but\nthis was in reality always TestProcessingTimeService.\n","date":"2016-10-22 01:03:04","modifiedFileCount":"9","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2016-10-26 18:19:25","codes":[{"authorDate":"2016-10-05 05:49:54","commitOrder":13,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-06 02:04:34","endLine":192,"groupId":"25052","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/a6524b4be41e76bc2250e273e2598685f8f6ee.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"},{"authorDate":"2016-10-26 18:19:25","commitOrder":13,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-27 05:26:28","endLine":1040,"groupId":"25052","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e5/a5e216386159c1a6fc942df1e4acf8ac7f64b0.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new ExecutionConfig(), new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"M"}],"commitId":"fe1654c680cad692e19ce262c402fd9756e8602a","commitMessage":"@@@[FLINK-4924] Simplify Operator Test Harness Constructors\n","date":"2016-10-27 05:26:28","modifiedFileCount":"19","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2017-03-01 22:36:17","codes":[{"authorDate":"2017-03-01 22:36:17","commitOrder":14,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":200,"groupId":"25052","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/8cb2e5ab2d2a952536d4a8fcb6d0fb155beb81.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2017-03-01 22:36:17","commitOrder":14,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":1208,"groupId":"25052","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/8cb2e5ab2d2a952536d4a8fcb6d0fb155beb81.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(), 0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1138,"status":"M"}],"commitId":"07a15d0e1647c79ae010ca6df5b1830a4087dd56","commitMessage":"@@@[FLINK-4460] Provide late-data output for window operations\n\nWe use side outputs to emit dropped late data.\n","date":"2017-03-18 14:44:17","modifiedFileCount":"8","status":"M","submitter":"Chen Qin"},{"authorTime":"2017-05-17 20:01:04","codes":[{"authorDate":"2017-05-17 20:01:04","commitOrder":15,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-05-23 04:22:24","endLine":198,"groupId":"25052","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/c6c6f9aeb78646d1c634a18d5b21eaf608a346.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2017-05-17 20:01:04","commitOrder":15,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-05-23 04:22:24","endLine":1167,"groupId":"25052","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/c6c6f9aeb78646d1c634a18d5b21eaf608a346.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int WINDOW_SIZE = 3;\n\t\tfinal int WINDOW_SLIDE = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS), Time.of(WINDOW_SLIDE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1097,"status":"M"}],"commitId":"12b4185c6c09101b64e12a84c33dc4d28f95cff9","commitMessage":"@@@[FLINK-6603] [streaming] Enable checkstyle on test sources\n\nUpdates / reverts the import order by sections:\n- org.apache.flink.*\n- all other imports\n- javax.*\n- java.*\n- static imports\n\nAdds EmptyLineSeparator to enforce an extra newline (not enforced\nbetween field or local variable declarations).\n\nThis closes #3941\n","date":"2017-05-23 04:22:24","modifiedFileCount":"395","status":"M","submitter":"Greg Hogan"},{"authorTime":"2017-12-20 19:27:56","codes":[{"authorDate":"2017-12-20 19:27:56","commitOrder":16,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\ttestSlidingEventTimeWindows(operator);\n\t}\n","date":"2018-01-06 12:30:12","endLine":203,"groupId":"25052","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c0/3207e7f1634926b7c5327931ad5fb6f82d91d2.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestSlidingEventTimeWindows(testHarness);\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2017-12-20 19:27:56","commitOrder":16,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-01-06 12:30:12","endLine":1190,"groupId":"25052","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c0/3207e7f1634926b7c5327931ad5fb6f82d91d2.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1120,"status":"M"}],"commitId":"091a37052b7045b3ed28c68bfea109024a5d1871","commitMessage":"@@@[FLINK-8298][tests] Properly shutdown MockEnvironment to release resources\n\nThis closes #5193.\n","date":"2018-01-06 12:30:12","modifiedFileCount":"9","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2018-05-04 23:15:51","codes":[{"authorDate":"2018-05-04 23:15:51","commitOrder":17,"curCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tSTRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\ttestSlidingEventTimeWindows(operator);\n\t}\n","date":"2018-05-05 00:48:16","endLine":210,"groupId":"102600","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testSlidingEventTimeWindowsReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/28e4057503dad900453e1a33a86d3f5303b660.src","preCode":"\tpublic void testSlidingEventTimeWindowsReduce() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\ttestSlidingEventTimeWindows(operator);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2018-05-04 23:15:51","commitOrder":17,"curCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tSTRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-05-05 00:48:16","endLine":1161,"groupId":"102600","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeSlidingWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/28e4057503dad900453e1a33a86d3f5303b660.src","preCode":"\tpublic void testProcessingTimeSlidingWindows() throws Throwable {\n\t\tfinal int windowSize = 3;\n\t\tfinal int windowSlide = 1;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tSlidingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS), Time.of(windowSlide, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tProcessingTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.setProcessingTime(3);\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(1000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(2000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(3000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 2999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), Long.MAX_VALUE));\n\n\t\ttestHarness.setProcessingTime(7000);\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 3999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 5), 4999));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 5999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1093,"status":"M"}],"commitId":"c8fa8d025684c2225824c54a7285bbfdec7cfddc","commitMessage":"@@@[FLINK-9292] [core] Remove TypeInfoParser (part 1)\n","date":"2018-05-05 00:48:16","modifiedFileCount":"26","status":"M","submitter":"Stephan Ewen"}]
