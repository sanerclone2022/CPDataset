[{"authorTime":"2020-10-14 21:22:29","codes":[{"authorDate":"2020-10-14 21:22:29","commitOrder":1,"curCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.BOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"bounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue));\n\t}\n","date":"2020-10-17 02:43:18","endLine":80,"groupId":"1245","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndBoundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4d/0688a5cb380596506bc1bb7d48db3a1364156c.src","preCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.BOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"bounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2020-10-14 21:22:29","commitOrder":1,"curCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"unbounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue));\n\t}\n","date":"2020-10-17 02:43:18","endLine":100,"groupId":"1245","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4d/0688a5cb380596506bc1bb7d48db3a1364156c.src","preCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"unbounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"b3fd487986f3807dfc9f718c0121a0539348042d","commitMessage":"@@@[FLINK-19583] Expose the execution.runtime-mode to users\n\nAs part of FLIP-134.  this PR exposes the 'execution.runtime-mode'\nto the users. This options allows users to specify.  among other\nthings.  the task scheduling.  network shuffle behavior.  and the\ntime semantics.\n\nThis closes #13656\n","date":"2020-10-17 02:43:18","modifiedFileCount":"5","status":"B","submitter":"Kostas Kloudas"},{"authorTime":"2020-10-20 15:36:22","codes":[{"authorDate":"2020-10-20 15:36:22","commitOrder":2,"curCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenvironment.enableCheckpointing(100);\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.BOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"bounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\ttrue));\n\t}\n","date":"2020-10-21 02:07:22","endLine":85,"groupId":"1245","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndBoundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3c/7f52662225f1d8a2f13a32c6699f50eb8049ad.src","preCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.BOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"bounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-10-20 15:36:22","commitOrder":2,"curCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"unbounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tfalse));\n\t}\n","date":"2020-10-21 02:07:22","endLine":106,"groupId":"1245","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3c/7f52662225f1d8a2f13a32c6699f50eb8049ad.src","preCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"unbounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"8fee135e7951eabfd9701f062721e969440fc7f7","commitMessage":"@@@[FLINK-19732] Disable checkpointing in BATCH mode\n\nWhen a pipeline is executed in BATCH mode.  its tasks\nare scheduled in independent regions and not all tasks\nare present throughout the execution. In this cases\ncheckpointing should be disabled.\n\nThis closes #13698\n","date":"2020-10-21 02:07:22","modifiedFileCount":"3","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-11-05 19:13:47","codes":[{"authorDate":"2020-11-05 19:13:47","commitOrder":3,"curCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenvironment.enableCheckpointing(100);\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.BOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"bounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue));\n\t}\n","date":"2020-11-06 18:01:28","endLine":83,"groupId":"1245","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndBoundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/2a82a3af706b48f052d9facf9db58e0ebf56c5.src","preCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenvironment.enableCheckpointing(100);\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.BOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"bounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\ttrue));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-11-05 19:13:47","commitOrder":3,"curCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"unbounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\tfalse));\n\t}\n","date":"2020-11-06 18:01:28","endLine":103,"groupId":"1245","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/2a82a3af706b48f052d9facf9db58e0ebf56c5.src","preCode":"\tpublic void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n\t\tfinal StreamExecutionEnvironment environment =\n\t\t\t\tStreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenvironment\n\t\t\t\t.fromSource(\n\t\t\t\t\t\tnew MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n\t\t\t\t\t\tWatermarkStrategy.noWatermarks(),\n\t\t\t\t\t\t\"unbounded-source\")\n\t\t\t\t.print();\n\n\t\tassertThat(\n\t\t\t\tenvironment.getStreamGraph(),\n\t\t\t\thasProperties(\n\t\t\t\t\t\tGlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n\t\t\t\t\t\tScheduleMode.EAGER,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tfalse));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"1fa0447dc6e9485c081d81122283fcee31068341","commitMessage":"@@@[FLINK-20001] Don't use setAllVerticesInSameSlotSharingGroupByDefault in StreamGraphGenerator\n\nI think the default of having all vertices in the same slot sharing\ngroup should be good for both BATCH and STREAMING right now. We can\nreconsider actually setting this flag in the future.\n\nBackground information: this is a special setting that was introduced\nfor the Table API Blink runner/planner.  which does special things with\nslot sharing (or lack thereof) and is more aware of memory requirements\nand such. For general DataStream/DataSet programs changing the setting\ndoesn't make sense.\n","date":"2020-11-06 18:01:28","modifiedFileCount":"2","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2021-03-03 18:37:49","codes":[{"authorDate":"2021-03-03 18:37:49","commitOrder":4,"curCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n        environment.enableCheckpointing(100);\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.BOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"bounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED, JobType.STREAMING, true));\n    }\n","date":"2021-03-04 21:15:28","endLine":79,"groupId":"1245","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndBoundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d0/dea2eccd1e561ba5e92eb6b388ec6f14d83ddb.src","preCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n        environment.enableCheckpointing(100);\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.BOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"bounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalDataExchangeMode.ALL_EDGES_PIPELINED, ScheduleMode.EAGER, true));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2021-03-03 18:37:49","commitOrder":4,"curCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"unbounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalDataExchangeMode.ALL_EDGES_PIPELINED, JobType.STREAMING, false));\n    }\n","date":"2021-03-04 21:15:28","endLine":97,"groupId":"1245","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d0/dea2eccd1e561ba5e92eb6b388ec6f14d83ddb.src","preCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"unbounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalDataExchangeMode.ALL_EDGES_PIPELINED, ScheduleMode.EAGER, false));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"872ad09fa530a345fff5202d985309f8bec586ca","commitMessage":"@@@[FLINK-21580] Remove ScheduleMode from JobGraph and its test\n\nThe JobGraph's JobType replaces the ScheduleMode. Before we always configured the\nScheduleMode in accordance with the JobType. Now.  only the JobType defines which\ntype of scheduling is selected.\n\n* JobType.STREAMING: The whole job must be deployed at the same time\n* JobType.BATCH: The job can be executed in steps\n\nThis closes #15076.\n","date":"2021-03-04 21:15:28","modifiedFileCount":"23","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2021-07-15 16:34:07","codes":[{"authorDate":"2021-07-15 16:34:07","commitOrder":5,"curCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n        environment.enableCheckpointing(100);\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.BOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"bounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalDataExchangeMode.ALL_EDGES_PIPELINED, JobType.STREAMING, true, true));\n    }\n","date":"2021-07-15 21:20:51","endLine":80,"groupId":"1245","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndBoundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cb/83685afaccd6fa06aa96c946204c80ad545a95.src","preCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n        environment.enableCheckpointing(100);\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.BOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"bounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(GlobalDataExchangeMode.ALL_EDGES_PIPELINED, JobType.STREAMING, true));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2021-07-15 16:34:07","commitOrder":5,"curCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"unbounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n                        JobType.STREAMING,\n                        false,\n                        true));\n    }\n","date":"2021-07-15 21:20:51","endLine":101,"groupId":"1245","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cb/83685afaccd6fa06aa96c946204c80ad545a95.src","preCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"unbounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalDataExchangeMode.ALL_EDGES_PIPELINED, JobType.STREAMING, false));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"d8b1a6fd3686de6fc3e7ab83795dd701ebec7621","commitMessage":"@@@[FLINK-23372][streaming-java] Disable AllVerticesInSameSlotSharingGroupByDefault in batch mode\n\nThis ensures consistency in terms of slot behavior between Table API batch mode and DataStream\nAPI batch mode. It should lead to better resource utilization when running complex pipelines\nwith data dependencies between regions.\n\nThis closes #16499.\n","date":"2021-07-15 21:20:51","modifiedFileCount":"2","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-07-19 22:14:51","codes":[{"authorDate":"2021-07-19 22:14:51","commitOrder":6,"curCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n        environment.enableCheckpointing(100);\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.BOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"bounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalStreamExchangeMode.ALL_EDGES_PIPELINED,\n                        JobType.STREAMING,\n                        true,\n                        true));\n    }\n","date":"2021-07-21 21:38:20","endLine":83,"groupId":"103027","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndBoundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4e/96ec7328383ed6cdf04fa2b2dd36a72c8554b5.src","preCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndBoundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n        environment.enableCheckpointing(100);\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.BOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"bounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalDataExchangeMode.ALL_EDGES_PIPELINED, JobType.STREAMING, true, true));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2021-07-19 22:14:51","commitOrder":6,"curCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"unbounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalStreamExchangeMode.ALL_EDGES_PIPELINED,\n                        JobType.STREAMING,\n                        false,\n                        true));\n    }\n","date":"2021-07-21 21:38:20","endLine":104,"groupId":"103027","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4e/96ec7328383ed6cdf04fa2b2dd36a72c8554b5.src","preCode":"    public void testExecutionModePropagationFromEnvWithDefaultAndUnboundedSource() {\n        final StreamExecutionEnvironment environment =\n                StreamExecutionEnvironment.getExecutionEnvironment();\n\n        environment\n                .fromSource(\n                        new MockSource(Boundedness.CONTINUOUS_UNBOUNDED, 100),\n                        WatermarkStrategy.noWatermarks(),\n                        \"unbounded-source\")\n                .print();\n\n        assertThat(\n                environment.getStreamGraph(),\n                hasProperties(\n                        GlobalDataExchangeMode.ALL_EDGES_PIPELINED,\n                        JobType.STREAMING,\n                        false,\n                        true));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"156f517d387202ac292bde5bfac423a23908b7a2","commitMessage":"@@@[FLINK-23402][streaming-java] Refactor GlobalDataExchangeMode to GlobalStreamExchangeMode\n","date":"2021-07-21 21:38:20","modifiedFileCount":"11","status":"M","submitter":"Timo Walther"}]
