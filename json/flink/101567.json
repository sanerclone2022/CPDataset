[{"authorTime":"2020-09-24 14:30:51","codes":[{"authorDate":"2020-12-28 21:30:59","commitOrder":5,"curCode":"    public static void waitUntilJobInitializationFinished(\n            JobID id, MiniClusterWithClientResource miniCluster, ClassLoader userCodeClassloader)\n            throws JobInitializationException {\n        ClusterClient<?> clusterClient = miniCluster.getClusterClient();\n        ClientUtils.waitUntilJobInitializationFinished(\n                () -> clusterClient.getJobStatus(id).get(),\n                () -> clusterClient.requestJobResult(id).get(),\n                userCodeClassloader);\n    }\n","date":"2020-12-28 21:35:13","endLine":74,"groupId":"46101","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"waitUntilJobInitializationFinished","params":"(JobIDid@MiniClusterWithClientResourceminiCluster@ClassLoaderuserCodeClassloader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/da/f66d4bb3d579a4a68df3d12ce2d61c9b4c0d26.src","preCode":"    public static void waitUntilJobInitializationFinished(\n            JobID id, MiniClusterWithClientResource miniCluster, ClassLoader userCodeClassloader)\n            throws JobInitializationException {\n        ClusterClient<?> clusterClient = miniCluster.getClusterClient();\n        ClientUtils.waitUntilJobInitializationFinished(\n                () -> clusterClient.getJobStatus(id).get(),\n                () -> clusterClient.requestJobResult(id).get(),\n                userCodeClassloader);\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/util/TestUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2020-09-24 14:30:51","commitOrder":5,"curCode":"\tpublic CompletableFuture<JobClient> execute(@Nonnull final Pipeline pipeline, @Nonnull final Configuration configuration, @Nonnull final ClassLoader userCodeClassloader) throws Exception {\n\t\tfinal JobGraph jobGraph = PipelineExecutorUtils.getJobGraph(pipeline, configuration);\n\n\t\ttry (final ClusterDescriptor<ClusterID> clusterDescriptor = clusterClientFactory.createClusterDescriptor(configuration)) {\n\t\t\tfinal ClusterID clusterID = clusterClientFactory.getClusterId(configuration);\n\t\t\tcheckState(clusterID != null);\n\n\t\t\tfinal ClusterClientProvider<ClusterID> clusterClientProvider = clusterDescriptor.retrieve(clusterID);\n\t\t\tClusterClient<ClusterID> clusterClient = clusterClientProvider.getClusterClient();\n\t\t\treturn clusterClient\n\t\t\t\t\t.submitJob(jobGraph)\n\t\t\t\t\t.thenApplyAsync(FunctionUtils.uncheckedFunction(jobId -> {\n\t\t\t\t\t\tClientUtils.waitUntilJobInitializationFinished(\n\t\t\t\t\t\t\t() -> clusterClient.getJobStatus(jobId).get(),\n\t\t\t\t\t\t\t() -> clusterClient.requestJobResult(jobId).get(),\n\t\t\t\t\t\t\tuserCodeClassloader);\n\t\t\t\t\t\treturn jobId;\n\t\t\t\t\t}))\n\t\t\t\t\t.thenApplyAsync(jobID -> (JobClient) new ClusterClientJobClientAdapter<>(\n\t\t\t\t\t\t\tclusterClientProvider,\n\t\t\t\t\t\t\tjobID,\n\t\t\t\t\t\t\tuserCodeClassloader))\n\t\t\t\t\t.whenComplete((ignored1, ignored2) -> clusterClient.close());\n\t\t}\n\t}\n","date":"2020-09-25 20:00:13","endLine":82,"groupId":"46101","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"(@NonnullfinalPipelinepipeline@@NonnullfinalConfigurationconfiguration@@NonnullfinalClassLoaderuserCodeClassloader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/17/cc2893ee7d8165b42da33d0261ac2603611fe3.src","preCode":"\tpublic CompletableFuture<JobClient> execute(@Nonnull final Pipeline pipeline, @Nonnull final Configuration configuration, @Nonnull final ClassLoader userCodeClassloader) throws Exception {\n\t\tfinal JobGraph jobGraph = PipelineExecutorUtils.getJobGraph(pipeline, configuration);\n\n\t\ttry (final ClusterDescriptor<ClusterID> clusterDescriptor = clusterClientFactory.createClusterDescriptor(configuration)) {\n\t\t\tfinal ClusterID clusterID = clusterClientFactory.getClusterId(configuration);\n\t\t\tcheckState(clusterID != null);\n\n\t\t\tfinal ClusterClientProvider<ClusterID> clusterClientProvider = clusterDescriptor.retrieve(clusterID);\n\t\t\tClusterClient<ClusterID> clusterClient = clusterClientProvider.getClusterClient();\n\t\t\treturn clusterClient\n\t\t\t\t\t.submitJob(jobGraph)\n\t\t\t\t\t.thenApplyAsync(FunctionUtils.uncheckedFunction(jobId -> {\n\t\t\t\t\t\tClientUtils.waitUntilJobInitializationFinished(\n\t\t\t\t\t\t\t() -> clusterClient.getJobStatus(jobId).get(),\n\t\t\t\t\t\t\t() -> clusterClient.requestJobResult(jobId).get(),\n\t\t\t\t\t\t\tuserCodeClassloader);\n\t\t\t\t\t\treturn jobId;\n\t\t\t\t\t}))\n\t\t\t\t\t.thenApplyAsync(jobID -> (JobClient) new ClusterClientJobClientAdapter<>(\n\t\t\t\t\t\t\tclusterClientProvider,\n\t\t\t\t\t\t\tjobID,\n\t\t\t\t\t\t\tuserCodeClassloader))\n\t\t\t\t\t.whenComplete((ignored1, ignored2) -> clusterClient.close());\n\t\t}\n\t}\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/executors/AbstractSessionClusterExecutor.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"NB"}],"commitId":"c6997c97c575d334679915c328792b8a3067cfb5","commitMessage":"@@@[FLINK-20651] Format code with Spotless/google-java-format\n","date":"2020-12-28 21:35:13","modifiedFileCount":"11013","status":"M","submitter":"Rufus Refactor"},{"authorTime":"2021-04-09 22:07:40","codes":[{"authorDate":"2020-12-28 21:30:59","commitOrder":6,"curCode":"    public static void waitUntilJobInitializationFinished(\n            JobID id, MiniClusterWithClientResource miniCluster, ClassLoader userCodeClassloader)\n            throws JobInitializationException {\n        ClusterClient<?> clusterClient = miniCluster.getClusterClient();\n        ClientUtils.waitUntilJobInitializationFinished(\n                () -> clusterClient.getJobStatus(id).get(),\n                () -> clusterClient.requestJobResult(id).get(),\n                userCodeClassloader);\n    }\n","date":"2020-12-28 21:35:13","endLine":74,"groupId":"101567","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"waitUntilJobInitializationFinished","params":"(JobIDid@MiniClusterWithClientResourceminiCluster@ClassLoaderuserCodeClassloader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/da/f66d4bb3d579a4a68df3d12ce2d61c9b4c0d26.src","preCode":"    public static void waitUntilJobInitializationFinished(\n            JobID id, MiniClusterWithClientResource miniCluster, ClassLoader userCodeClassloader)\n            throws JobInitializationException {\n        ClusterClient<?> clusterClient = miniCluster.getClusterClient();\n        ClientUtils.waitUntilJobInitializationFinished(\n                () -> clusterClient.getJobStatus(id).get(),\n                () -> clusterClient.requestJobResult(id).get(),\n                userCodeClassloader);\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/util/TestUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2021-04-09 22:07:40","commitOrder":6,"curCode":"    public CompletableFuture<JobClient> execute(\n            @Nonnull final Pipeline pipeline,\n            @Nonnull final Configuration configuration,\n            @Nonnull final ClassLoader userCodeClassloader)\n            throws Exception {\n        final JobGraph jobGraph = PipelineExecutorUtils.getJobGraph(pipeline, configuration);\n\n        try (final ClusterDescriptor<ClusterID> clusterDescriptor =\n                clusterClientFactory.createClusterDescriptor(configuration)) {\n            final ClusterID clusterID = clusterClientFactory.getClusterId(configuration);\n            checkState(clusterID != null);\n\n            final ClusterClientProvider<ClusterID> clusterClientProvider =\n                    clusterDescriptor.retrieve(clusterID);\n            ClusterClient<ClusterID> clusterClient = clusterClientProvider.getClusterClient();\n            return clusterClient\n                    .submitJob(jobGraph)\n                    .thenApplyAsync(\n                            FunctionUtils.uncheckedFunction(\n                                    jobId -> {\n                                        ClientUtils.waitUntilJobInitializationFinished(\n                                                () -> clusterClient.getJobStatus(jobId).get(),\n                                                () -> clusterClient.requestJobResult(jobId).get(),\n                                                userCodeClassloader);\n                                        return jobId;\n                                    }))\n                    .thenApplyAsync(\n                            jobID ->\n                                    (JobClient)\n                                            new ClusterClientJobClientAdapter<>(\n                                                    clusterClientProvider,\n                                                    jobID,\n                                                    userCodeClassloader))\n                    .whenCompleteAsync((ignored1, ignored2) -> clusterClient.close());\n        }\n    }\n","date":"2021-04-12 16:38:52","endLine":97,"groupId":"101567","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"(@NonnullfinalPipelinepipeline@@NonnullfinalConfigurationconfiguration@@NonnullfinalClassLoaderuserCodeClassloader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/72/24375a5eed83177067bfad72995a41605bc07d.src","preCode":"    public CompletableFuture<JobClient> execute(\n            @Nonnull final Pipeline pipeline,\n            @Nonnull final Configuration configuration,\n            @Nonnull final ClassLoader userCodeClassloader)\n            throws Exception {\n        final JobGraph jobGraph = PipelineExecutorUtils.getJobGraph(pipeline, configuration);\n\n        try (final ClusterDescriptor<ClusterID> clusterDescriptor =\n                clusterClientFactory.createClusterDescriptor(configuration)) {\n            final ClusterID clusterID = clusterClientFactory.getClusterId(configuration);\n            checkState(clusterID != null);\n\n            final ClusterClientProvider<ClusterID> clusterClientProvider =\n                    clusterDescriptor.retrieve(clusterID);\n            ClusterClient<ClusterID> clusterClient = clusterClientProvider.getClusterClient();\n            return clusterClient\n                    .submitJob(jobGraph)\n                    .thenApplyAsync(\n                            FunctionUtils.uncheckedFunction(\n                                    jobId -> {\n                                        ClientUtils.waitUntilJobInitializationFinished(\n                                                () -> clusterClient.getJobStatus(jobId).get(),\n                                                () -> clusterClient.requestJobResult(jobId).get(),\n                                                userCodeClassloader);\n                                        return jobId;\n                                    }))\n                    .thenApplyAsync(\n                            jobID ->\n                                    (JobClient)\n                                            new ClusterClientJobClientAdapter<>(\n                                                    clusterClientProvider,\n                                                    jobID,\n                                                    userCodeClassloader))\n                    .whenComplete((ignored1, ignored2) -> clusterClient.close());\n        }\n    }\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/executors/AbstractSessionClusterExecutor.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"f4b59f615438e76c2b42999fc0a8ebce6a543b07","commitMessage":"@@@[FLINK-22184][client] Shutdown client outside of netty thread\n","date":"2021-04-12 16:38:52","modifiedFileCount":"1","status":"M","submitter":"Chesnay Schepler"}]
