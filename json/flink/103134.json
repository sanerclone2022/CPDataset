[{"authorTime":"2020-09-21 21:05:35","codes":[{"authorDate":"2020-09-21 21:05:35","commitOrder":1,"curCode":"\tpublic void simpleFixedLengthKeySorting() throws Exception {\n\t\tCollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n\t\tCollectionDataInput<Integer> input = new CollectionDataInput<>(\n\t\t\tArrays.asList(\n\t\t\t\tnew StreamRecord<>(1, 3),\n\t\t\t\tnew StreamRecord<>(1, 1),\n\t\t\t\tnew StreamRecord<>(2, 1),\n\t\t\t\tnew StreamRecord<>(2, 3),\n\t\t\t\tnew StreamRecord<>(1, 2),\n\t\t\t\tnew StreamRecord<>(2, 2)\n\t\t\t)\n\t\t);\n\t\tMockEnvironment environment = MockEnvironment.builder().build();\n\t\tSortingDataInput<Integer, Integer> sortingDataInput = new SortingDataInput<>(\n\t\t\tinput,\n\t\t\tnew IntSerializer(),\n\t\t\tnew IntSerializer(),\n\t\t\t(KeySelector<Integer, Integer>) value -> value,\n\t\t\tenvironment.getMemoryManager(),\n\t\t\tenvironment.getIOManager(),\n\t\t\ttrue,\n\t\t\t1.0,\n\t\t\tnew Configuration(),\n\t\t\tnew DummyInvokable()\n\t\t);\n\n\t\tInputStatus inputStatus;\n\t\tdo {\n\t\t\tinputStatus = sortingDataInput.emitNext(collectingDataOutput);\n\t\t} while (inputStatus != InputStatus.END_OF_INPUT);\n\n\t\tassertThat(collectingDataOutput.events, equalTo(\n\t\t\tArrays.asList(\n\t\t\t\tnew StreamRecord<>(1, 1),\n\t\t\t\tnew StreamRecord<>(1, 2),\n\t\t\t\tnew StreamRecord<>(1, 3),\n\t\t\t\tnew StreamRecord<>(2, 1),\n\t\t\t\tnew StreamRecord<>(2, 2),\n\t\t\t\tnew StreamRecord<>(2, 3)\n\t\t\t)\n\t\t));\n\t}\n","date":"2020-10-06 21:29:59","endLine":98,"groupId":"46511","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"simpleFixedLengthKeySorting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/12e8adaf70acc816558af40e1cf70999e7e35f.src","preCode":"\tpublic void simpleFixedLengthKeySorting() throws Exception {\n\t\tCollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n\t\tCollectionDataInput<Integer> input = new CollectionDataInput<>(\n\t\t\tArrays.asList(\n\t\t\t\tnew StreamRecord<>(1, 3),\n\t\t\t\tnew StreamRecord<>(1, 1),\n\t\t\t\tnew StreamRecord<>(2, 1),\n\t\t\t\tnew StreamRecord<>(2, 3),\n\t\t\t\tnew StreamRecord<>(1, 2),\n\t\t\t\tnew StreamRecord<>(2, 2)\n\t\t\t)\n\t\t);\n\t\tMockEnvironment environment = MockEnvironment.builder().build();\n\t\tSortingDataInput<Integer, Integer> sortingDataInput = new SortingDataInput<>(\n\t\t\tinput,\n\t\t\tnew IntSerializer(),\n\t\t\tnew IntSerializer(),\n\t\t\t(KeySelector<Integer, Integer>) value -> value,\n\t\t\tenvironment.getMemoryManager(),\n\t\t\tenvironment.getIOManager(),\n\t\t\ttrue,\n\t\t\t1.0,\n\t\t\tnew Configuration(),\n\t\t\tnew DummyInvokable()\n\t\t);\n\n\t\tInputStatus inputStatus;\n\t\tdo {\n\t\t\tinputStatus = sortingDataInput.emitNext(collectingDataOutput);\n\t\t} while (inputStatus != InputStatus.END_OF_INPUT);\n\n\t\tassertThat(collectingDataOutput.events, equalTo(\n\t\t\tArrays.asList(\n\t\t\t\tnew StreamRecord<>(1, 1),\n\t\t\t\tnew StreamRecord<>(1, 2),\n\t\t\t\tnew StreamRecord<>(1, 3),\n\t\t\t\tnew StreamRecord<>(2, 1),\n\t\t\t\tnew StreamRecord<>(2, 2),\n\t\t\t\tnew StreamRecord<>(2, 3)\n\t\t\t)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sort/SortingDataInputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2020-09-21 21:05:35","commitOrder":1,"curCode":"\tpublic void watermarkPropagation() throws Exception {\n\t\tCollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n\t\tCollectionDataInput<Integer> input = new CollectionDataInput<>(\n\t\t\tArrays.asList(\n\t\t\t\tnew StreamRecord<>(1, 3),\n\t\t\t\tnew Watermark(1),\n\t\t\t\tnew StreamRecord<>(1, 1),\n\t\t\t\tnew Watermark(2),\n\t\t\t\tnew StreamRecord<>(2, 1),\n\t\t\t\tnew Watermark(3),\n\t\t\t\tnew StreamRecord<>(2, 3),\n\t\t\t\tnew Watermark(4),\n\t\t\t\tnew StreamRecord<>(1, 2),\n\t\t\t\tnew Watermark(5),\n\t\t\t\tnew StreamRecord<>(2, 2),\n\t\t\t\tnew Watermark(6)\n\t\t\t)\n\t\t);\n\t\tMockEnvironment environment = MockEnvironment.builder().build();\n\t\tSortingDataInput<Integer, Integer> sortingDataInput = new SortingDataInput<>(\n\t\t\tinput,\n\t\t\tnew IntSerializer(),\n\t\t\tnew IntSerializer(),\n\t\t\t(KeySelector<Integer, Integer>) value -> value,\n\t\t\tenvironment.getMemoryManager(),\n\t\t\tenvironment.getIOManager(),\n\t\t\ttrue,\n\t\t\t1.0,\n\t\t\tnew Configuration(),\n\t\t\tnew DummyInvokable()\n\t\t);\n\n\t\tInputStatus inputStatus;\n\t\tdo {\n\t\t\tinputStatus = sortingDataInput.emitNext(collectingDataOutput);\n\t\t} while (inputStatus != InputStatus.END_OF_INPUT);\n\n\t\tassertThat(collectingDataOutput.events, equalTo(\n\t\t\tArrays.asList(\n\t\t\t\tnew StreamRecord<>(1, 1),\n\t\t\t\tnew StreamRecord<>(1, 2),\n\t\t\t\tnew StreamRecord<>(1, 3),\n\t\t\t\tnew StreamRecord<>(2, 1),\n\t\t\t\tnew StreamRecord<>(2, 2),\n\t\t\t\tnew StreamRecord<>(2, 3),\n\t\t\t\tnew Watermark(6)\n\t\t\t)\n\t\t));\n\t}\n","date":"2020-10-06 21:29:59","endLine":149,"groupId":"34283","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"watermarkPropagation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/12e8adaf70acc816558af40e1cf70999e7e35f.src","preCode":"\tpublic void watermarkPropagation() throws Exception {\n\t\tCollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n\t\tCollectionDataInput<Integer> input = new CollectionDataInput<>(\n\t\t\tArrays.asList(\n\t\t\t\tnew StreamRecord<>(1, 3),\n\t\t\t\tnew Watermark(1),\n\t\t\t\tnew StreamRecord<>(1, 1),\n\t\t\t\tnew Watermark(2),\n\t\t\t\tnew StreamRecord<>(2, 1),\n\t\t\t\tnew Watermark(3),\n\t\t\t\tnew StreamRecord<>(2, 3),\n\t\t\t\tnew Watermark(4),\n\t\t\t\tnew StreamRecord<>(1, 2),\n\t\t\t\tnew Watermark(5),\n\t\t\t\tnew StreamRecord<>(2, 2),\n\t\t\t\tnew Watermark(6)\n\t\t\t)\n\t\t);\n\t\tMockEnvironment environment = MockEnvironment.builder().build();\n\t\tSortingDataInput<Integer, Integer> sortingDataInput = new SortingDataInput<>(\n\t\t\tinput,\n\t\t\tnew IntSerializer(),\n\t\t\tnew IntSerializer(),\n\t\t\t(KeySelector<Integer, Integer>) value -> value,\n\t\t\tenvironment.getMemoryManager(),\n\t\t\tenvironment.getIOManager(),\n\t\t\ttrue,\n\t\t\t1.0,\n\t\t\tnew Configuration(),\n\t\t\tnew DummyInvokable()\n\t\t);\n\n\t\tInputStatus inputStatus;\n\t\tdo {\n\t\t\tinputStatus = sortingDataInput.emitNext(collectingDataOutput);\n\t\t} while (inputStatus != InputStatus.END_OF_INPUT);\n\n\t\tassertThat(collectingDataOutput.events, equalTo(\n\t\t\tArrays.asList(\n\t\t\t\tnew StreamRecord<>(1, 1),\n\t\t\t\tnew StreamRecord<>(1, 2),\n\t\t\t\tnew StreamRecord<>(1, 3),\n\t\t\t\tnew StreamRecord<>(2, 1),\n\t\t\t\tnew StreamRecord<>(2, 2),\n\t\t\t\tnew StreamRecord<>(2, 3),\n\t\t\t\tnew Watermark(6)\n\t\t\t)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sort/SortingDataInputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"}],"commitId":"63bdbc9d4a2b2c025e450cd1cf6e6008940389de","commitMessage":"@@@[FLINK-19472] Implement a one input sorting DataInput\n\nI implement a SortingDataInput which can wrap a regular network input\nand sort the incoming records before passing them on to the DataOutput.\nThe sorting input performs the final sorting when it receives an\nInputStatus.END_OF_INPUT from the chained input.\n\nThe sorter uses a binary comparison of serialized keys of the incoming\nrecords. It uses first n bytes of the serialized key as a normalized\nkey.\n\nWatermarks.  stream statuses.  or latency markers are not propagated.  only the largest seen watermark is\nemitted after all records.\n\nThis closes #13521\n","date":"2020-10-06 21:29:59","modifiedFileCount":"3","status":"B","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-07-23 19:45:47","codes":[{"authorDate":"2021-07-23 19:45:47","commitOrder":2,"curCode":"    public void simpleFixedLengthKeySorting() throws Exception {\n        CollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n        CollectionDataInput<Integer> input =\n                new CollectionDataInput<>(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 3),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(2, 2)));\n        MockEnvironment environment = MockEnvironment.builder().build();\n        SortingDataInput<Integer, Integer> sortingDataInput =\n                new SortingDataInput<>(\n                        input,\n                        new IntSerializer(),\n                        new IntSerializer(),\n                        (KeySelector<Integer, Integer>) value -> value,\n                        environment.getMemoryManager(),\n                        environment.getIOManager(),\n                        true,\n                        1.0,\n                        new Configuration(),\n                        new DummyInvokable());\n\n        DataInputStatus inputStatus;\n        do {\n            inputStatus = sortingDataInput.emitNext(collectingDataOutput);\n        } while (inputStatus != DataInputStatus.END_OF_INPUT);\n\n        assertThat(\n                collectingDataOutput.events,\n                equalTo(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 2),\n                                new StreamRecord<>(2, 3))));\n    }\n","date":"2021-07-26 18:58:47","endLine":86,"groupId":"46511","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"simpleFixedLengthKeySorting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/72677a8986915e42d49e1fb9e3c7bcc9fd69b8.src","preCode":"    public void simpleFixedLengthKeySorting() throws Exception {\n        CollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n        CollectionDataInput<Integer> input =\n                new CollectionDataInput<>(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 3),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(2, 2)));\n        MockEnvironment environment = MockEnvironment.builder().build();\n        SortingDataInput<Integer, Integer> sortingDataInput =\n                new SortingDataInput<>(\n                        input,\n                        new IntSerializer(),\n                        new IntSerializer(),\n                        (KeySelector<Integer, Integer>) value -> value,\n                        environment.getMemoryManager(),\n                        environment.getIOManager(),\n                        true,\n                        1.0,\n                        new Configuration(),\n                        new DummyInvokable());\n\n        InputStatus inputStatus;\n        do {\n            inputStatus = sortingDataInput.emitNext(collectingDataOutput);\n        } while (inputStatus != InputStatus.END_OF_INPUT);\n\n        assertThat(\n                collectingDataOutput.events,\n                equalTo(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 2),\n                                new StreamRecord<>(2, 3))));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sort/SortingDataInputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2021-07-23 19:45:47","commitOrder":2,"curCode":"    public void watermarkPropagation() throws Exception {\n        CollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n        CollectionDataInput<Integer> input =\n                new CollectionDataInput<>(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 3),\n                                new Watermark(1),\n                                new StreamRecord<>(1, 1),\n                                new Watermark(2),\n                                new StreamRecord<>(2, 1),\n                                new Watermark(3),\n                                new StreamRecord<>(2, 3),\n                                new Watermark(4),\n                                new StreamRecord<>(1, 2),\n                                new Watermark(5),\n                                new StreamRecord<>(2, 2),\n                                new Watermark(6)));\n        MockEnvironment environment = MockEnvironment.builder().build();\n        SortingDataInput<Integer, Integer> sortingDataInput =\n                new SortingDataInput<>(\n                        input,\n                        new IntSerializer(),\n                        new IntSerializer(),\n                        (KeySelector<Integer, Integer>) value -> value,\n                        environment.getMemoryManager(),\n                        environment.getIOManager(),\n                        true,\n                        1.0,\n                        new Configuration(),\n                        new DummyInvokable());\n\n        DataInputStatus inputStatus;\n        do {\n            inputStatus = sortingDataInput.emitNext(collectingDataOutput);\n        } while (inputStatus != DataInputStatus.END_OF_INPUT);\n\n        assertThat(\n                collectingDataOutput.events,\n                equalTo(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 2),\n                                new StreamRecord<>(2, 3),\n                                new Watermark(6))));\n    }\n","date":"2021-07-26 18:58:47","endLine":136,"groupId":"34283","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"watermarkPropagation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/72677a8986915e42d49e1fb9e3c7bcc9fd69b8.src","preCode":"    public void watermarkPropagation() throws Exception {\n        CollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n        CollectionDataInput<Integer> input =\n                new CollectionDataInput<>(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 3),\n                                new Watermark(1),\n                                new StreamRecord<>(1, 1),\n                                new Watermark(2),\n                                new StreamRecord<>(2, 1),\n                                new Watermark(3),\n                                new StreamRecord<>(2, 3),\n                                new Watermark(4),\n                                new StreamRecord<>(1, 2),\n                                new Watermark(5),\n                                new StreamRecord<>(2, 2),\n                                new Watermark(6)));\n        MockEnvironment environment = MockEnvironment.builder().build();\n        SortingDataInput<Integer, Integer> sortingDataInput =\n                new SortingDataInput<>(\n                        input,\n                        new IntSerializer(),\n                        new IntSerializer(),\n                        (KeySelector<Integer, Integer>) value -> value,\n                        environment.getMemoryManager(),\n                        environment.getIOManager(),\n                        true,\n                        1.0,\n                        new Configuration(),\n                        new DummyInvokable());\n\n        InputStatus inputStatus;\n        do {\n            inputStatus = sortingDataInput.emitNext(collectingDataOutput);\n        } while (inputStatus != InputStatus.END_OF_INPUT);\n\n        assertThat(\n                collectingDataOutput.events,\n                equalTo(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 2),\n                                new StreamRecord<>(2, 3),\n                                new Watermark(6))));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sort/SortingDataInputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"684d56ebce83c9bf69a3bd070a8a0aefd3b380ff","commitMessage":"@@@[FLINK-23474] Extract internal version of InputStatus\n\nThis commit separates internal and user facing versions of InputStatus.\nUser sources should never return e.g. the END_OF_RECOVERY status and\nthus we need an internal status.\n","date":"2021-07-26 18:58:47","modifiedFileCount":"24","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-08-21 01:27:23","codes":[{"authorDate":"2021-08-21 01:27:23","commitOrder":3,"curCode":"    public void simpleFixedLengthKeySorting() throws Exception {\n        CollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n        CollectionDataInput<Integer> input =\n                new CollectionDataInput<>(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 3),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(2, 2)));\n        MockEnvironment environment = MockEnvironment.builder().build();\n        SortingDataInput<Integer, Integer> sortingDataInput =\n                new SortingDataInput<>(\n                        input,\n                        new IntSerializer(),\n                        new IntSerializer(),\n                        (KeySelector<Integer, Integer>) value -> value,\n                        environment.getMemoryManager(),\n                        environment.getIOManager(),\n                        true,\n                        1.0,\n                        new Configuration(),\n                        new DummyInvokable(),\n                        new ExecutionConfig());\n\n        DataInputStatus inputStatus;\n        do {\n            inputStatus = sortingDataInput.emitNext(collectingDataOutput);\n        } while (inputStatus != DataInputStatus.END_OF_INPUT);\n\n        assertThat(\n                collectingDataOutput.events,\n                equalTo(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 2),\n                                new StreamRecord<>(2, 3))));\n    }\n","date":"2021-08-26 18:54:21","endLine":88,"groupId":"103134","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"simpleFixedLengthKeySorting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/71f64e2d70a6854ee94dbeeddb70bfbd1541bb.src","preCode":"    public void simpleFixedLengthKeySorting() throws Exception {\n        CollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n        CollectionDataInput<Integer> input =\n                new CollectionDataInput<>(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 3),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(2, 2)));\n        MockEnvironment environment = MockEnvironment.builder().build();\n        SortingDataInput<Integer, Integer> sortingDataInput =\n                new SortingDataInput<>(\n                        input,\n                        new IntSerializer(),\n                        new IntSerializer(),\n                        (KeySelector<Integer, Integer>) value -> value,\n                        environment.getMemoryManager(),\n                        environment.getIOManager(),\n                        true,\n                        1.0,\n                        new Configuration(),\n                        new DummyInvokable());\n\n        DataInputStatus inputStatus;\n        do {\n            inputStatus = sortingDataInput.emitNext(collectingDataOutput);\n        } while (inputStatus != DataInputStatus.END_OF_INPUT);\n\n        assertThat(\n                collectingDataOutput.events,\n                equalTo(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 2),\n                                new StreamRecord<>(2, 3))));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sort/SortingDataInputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2021-08-21 01:27:23","commitOrder":3,"curCode":"    public void watermarkPropagation() throws Exception {\n        CollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n        CollectionDataInput<Integer> input =\n                new CollectionDataInput<>(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 3),\n                                new Watermark(1),\n                                new StreamRecord<>(1, 1),\n                                new Watermark(2),\n                                new StreamRecord<>(2, 1),\n                                new Watermark(3),\n                                new StreamRecord<>(2, 3),\n                                new Watermark(4),\n                                new StreamRecord<>(1, 2),\n                                new Watermark(5),\n                                new StreamRecord<>(2, 2),\n                                new Watermark(6)));\n        MockEnvironment environment = MockEnvironment.builder().build();\n        SortingDataInput<Integer, Integer> sortingDataInput =\n                new SortingDataInput<>(\n                        input,\n                        new IntSerializer(),\n                        new IntSerializer(),\n                        (KeySelector<Integer, Integer>) value -> value,\n                        environment.getMemoryManager(),\n                        environment.getIOManager(),\n                        true,\n                        1.0,\n                        new Configuration(),\n                        new DummyInvokable(),\n                        new ExecutionConfig());\n\n        DataInputStatus inputStatus;\n        do {\n            inputStatus = sortingDataInput.emitNext(collectingDataOutput);\n        } while (inputStatus != DataInputStatus.END_OF_INPUT);\n\n        assertThat(\n                collectingDataOutput.events,\n                equalTo(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 2),\n                                new StreamRecord<>(2, 3),\n                                new Watermark(6))));\n    }\n","date":"2021-08-26 18:54:21","endLine":139,"groupId":"103134","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"watermarkPropagation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/71f64e2d70a6854ee94dbeeddb70bfbd1541bb.src","preCode":"    public void watermarkPropagation() throws Exception {\n        CollectingDataOutput<Integer> collectingDataOutput = new CollectingDataOutput<>();\n        CollectionDataInput<Integer> input =\n                new CollectionDataInput<>(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 3),\n                                new Watermark(1),\n                                new StreamRecord<>(1, 1),\n                                new Watermark(2),\n                                new StreamRecord<>(2, 1),\n                                new Watermark(3),\n                                new StreamRecord<>(2, 3),\n                                new Watermark(4),\n                                new StreamRecord<>(1, 2),\n                                new Watermark(5),\n                                new StreamRecord<>(2, 2),\n                                new Watermark(6)));\n        MockEnvironment environment = MockEnvironment.builder().build();\n        SortingDataInput<Integer, Integer> sortingDataInput =\n                new SortingDataInput<>(\n                        input,\n                        new IntSerializer(),\n                        new IntSerializer(),\n                        (KeySelector<Integer, Integer>) value -> value,\n                        environment.getMemoryManager(),\n                        environment.getIOManager(),\n                        true,\n                        1.0,\n                        new Configuration(),\n                        new DummyInvokable());\n\n        DataInputStatus inputStatus;\n        do {\n            inputStatus = sortingDataInput.emitNext(collectingDataOutput);\n        } while (inputStatus != DataInputStatus.END_OF_INPUT);\n\n        assertThat(\n                collectingDataOutput.events,\n                equalTo(\n                        Arrays.asList(\n                                new StreamRecord<>(1, 1),\n                                new StreamRecord<>(1, 2),\n                                new StreamRecord<>(1, 3),\n                                new StreamRecord<>(2, 1),\n                                new StreamRecord<>(2, 2),\n                                new StreamRecord<>(2, 3),\n                                new Watermark(6))));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sort/SortingDataInputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"a8ea3c3e81517f9c38f90b82c043136d8b56bf8b","commitMessage":"@@@[FLINK-23862][runtime] Replace usages of AbstractInvokable with interface\n\nA follow-up step after introduction of task interfaces to:\n- accept TaskInvokable in place of AbstractInvokable\n- make StreamTask implement the interfaces directly\n","date":"2021-08-26 18:54:21","modifiedFileCount":"29","status":"M","submitter":"Roman Khachatryan"}]
