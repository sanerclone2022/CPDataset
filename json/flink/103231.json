[{"authorTime":"2016-04-22 01:18:28","codes":[{"authorDate":"2016-08-03 00:09:14","commitOrder":3,"curCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class, null);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2016-08-03 02:54:17","endLine":74,"groupId":"3959","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/30/ebb20f4b8e1b9c462387e72f74214d83c1f89b.src","preCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class, null);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"NB"},{"authorDate":"2016-04-22 01:18:28","commitOrder":3,"curCode":"\tpublic void testReducingStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tReduceFunction<TaskInfo> reducer = (ReduceFunction<TaskInfo>) mock(ReduceFunction.class);\n\t\t\n\t\tReducingStateDescriptor<TaskInfo> descr = \n\t\t\t\tnew ReducingStateDescriptor<>(\"name\", reducer, TaskInfo.class);\n\t\t\n\t\tcontext.getReducingState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2016-08-19 03:50:17","endLine":106,"groupId":"30805","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducingStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3a/88d94536ce85d6a3a0c2abf0913a686f76bcfa.src","preCode":"\tpublic void testReducingStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tReduceFunction<TaskInfo> reducer = (ReduceFunction<TaskInfo>) mock(ReduceFunction.class);\n\t\t\n\t\tReducingStateDescriptor<TaskInfo> descr = \n\t\t\t\tnew ReducingStateDescriptor<>(\"name\", reducer, TaskInfo.class);\n\t\t\n\t\tcontext.getReducingState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"0d53daa2f158cc42c9d18488bd5bb98382650756","commitMessage":"@@@[hotfix] Minutiae\n","date":"2016-08-19 03:50:17","modifiedFileCount":"11","status":"M","submitter":"Greg Hogan"},{"authorTime":"2016-04-22 01:18:28","codes":[{"authorDate":"2017-01-11 19:14:13","commitOrder":4,"curCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2017-01-13 18:30:57","endLine":89,"groupId":"9958","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/91726cecc3f3cbaf15c231337332000799383c.src","preCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class, null);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2016-04-22 01:18:28","commitOrder":4,"curCode":"\tpublic void testReducingStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tReduceFunction<TaskInfo> reducer = (ReduceFunction<TaskInfo>) mock(ReduceFunction.class);\n\t\t\n\t\tReducingStateDescriptor<TaskInfo> descr = \n\t\t\t\tnew ReducingStateDescriptor<>(\"name\", reducer, TaskInfo.class);\n\t\t\n\t\tcontext.getReducingState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2016-08-19 03:50:17","endLine":106,"groupId":"30805","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducingStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3a/88d94536ce85d6a3a0c2abf0913a686f76bcfa.src","preCode":"\tpublic void testReducingStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tReduceFunction<TaskInfo> reducer = (ReduceFunction<TaskInfo>) mock(ReduceFunction.class);\n\t\t\n\t\tReducingStateDescriptor<TaskInfo> descr = \n\t\t\t\tnew ReducingStateDescriptor<>(\"name\", reducer, TaskInfo.class);\n\t\t\n\t\tcontext.getReducingState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"7a2d3bea96d262de5cb963003b92833b27346af0","commitMessage":"@@@[FLINK-5155] Deprecate ValueStateDescriptor constructors with default value\n","date":"2017-01-13 18:30:57","modifiedFileCount":"19","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-03-12 00:53:38","codes":[{"authorDate":"2020-03-12 00:53:38","commitOrder":5,"curCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = createRuntimeContext(descriptorCapture, config);\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2020-03-25 22:06:35","endLine":106,"groupId":"103231","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/2390c90ed7a07329142bf552dbf26ec0a85aca.src","preCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-03-12 00:53:38","commitOrder":5,"curCode":"\tpublic void testReducingStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = createRuntimeContext(descriptorCapture, config);\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tReduceFunction<TaskInfo> reducer = (ReduceFunction<TaskInfo>) mock(ReduceFunction.class);\n\n\t\tReducingStateDescriptor<TaskInfo> descr =\n\t\t\t\tnew ReducingStateDescriptor<>(\"name\", reducer, TaskInfo.class);\n\n\t\tcontext.getReducingState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2020-03-25 22:06:35","endLine":132,"groupId":"103231","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReducingStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/2390c90ed7a07329142bf552dbf26ec0a85aca.src","preCode":"\tpublic void testReducingStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tReduceFunction<TaskInfo> reducer = (ReduceFunction<TaskInfo>) mock(ReduceFunction.class);\n\n\t\tReducingStateDescriptor<TaskInfo> descr =\n\t\t\t\tnew ReducingStateDescriptor<>(\"name\", reducer, TaskInfo.class);\n\n\t\tcontext.getReducingState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"239088e603baede4fbbd05f75655c54bb3750fcb","commitMessage":"@@@[FLINK-16316][operators] Cut dependency between StreamingRuntimeContext and AbstractStreamOperator\n\nThis simplifies dependencies between those two classes and will allow for StreamingRuntimeContext\nto be re-used in new replacement for AbstractStreamOperator.\n","date":"2020-03-25 22:06:35","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"}]
