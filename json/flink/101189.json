[{"authorTime":"2015-06-14 22:39:47","codes":[{"authorDate":"2015-06-14 22:39:47","commitOrder":1,"curCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getJobManagerRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\t\t\t\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\t\t\t\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-07-01 22:11:22","endLine":105,"groupId":"40797","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncorrectSerializer1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4e/7da8339ced649c25ad15917bba20f731747fd4.src","preCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getJobManagerRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\t\t\t\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\t\t\t\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2015-06-14 22:39:47","commitOrder":1,"curCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getJobManagerRPCPort());\n\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-07-01 22:11:22","endLine":171,"groupId":"40799","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIncorrectSerializer3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4e/7da8339ced649c25ad15917bba20f731747fd4.src","preCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getJobManagerRPCPort());\n\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"f5c1768aa730fb6be74c0ebf480675acb1488d4f","commitMessage":"@@@[FLINK-2308] [runtime] Give proper error messages in case user-defined serialization is broken and detected in the network stack.\n","date":"2015-07-01 22:11:22","modifiedFileCount":"2","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2015-06-26 18:07:39","codes":[{"authorDate":"2015-06-26 18:07:39","commitOrder":2,"curCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\t\t\t\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\t\t\t\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-08-31 17:02:31","endLine":106,"groupId":"40797","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncorrectSerializer1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f3/0f61fc3a57dfdbe2338efa27ee04de24ec0f72.src","preCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getJobManagerRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\t\t\t\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\t\t\t\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2015-06-26 18:07:39","commitOrder":2,"curCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-08-31 17:02:31","endLine":172,"groupId":"40799","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIncorrectSerializer3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f3/0f61fc3a57dfdbe2338efa27ee04de24ec0f72.src","preCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getJobManagerRPCPort());\n\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"}],"commitId":"b9de4ed37ffa68ef50dc6d6b3819afcc00d1d029","commitMessage":"@@@[FLINK-2291] [runtime] Add ZooKeeper support to elect a leader from a set of JobManager. The leader will then be retrieved from ZooKeeper by the TaskManagers.\n\nRefactors FlinkMiniCluster to support multiple JobManager\n\nAdds proper remote address resolution for actors\n\nClean up of LeaderElection and LeaderRetrievalService. Removes synchronization to avoid deadlock.\n\nAdds ZooKeeper start option to TestBaseUtils.startCluster\n\nRemoves registration session IDs.  using the leader session IDs instead. Sets the leader session ID\n directly in the grantLeadership method. Let the LeaderElectionService select the leader session I\nD. Return leader session ID to LeaderRetrievalListeners.\n\nRemoves direct ActorRef interaction\n\nIntroduces LeaderRetrievalService for the Client and the CliFrontend.\n\nMake ApplicationClient to use the LeaderRetrievalService for JobManager resolution\n\nAdds LeaderElection/Retrieval tests\n\nAdded test for exception forwarding from the CuratorFramework to a Contender\n\nAdds test job submission with changing leaders\n\nAdds new test cases for job cleanup after leader election change\n\nAdds new LeaderChangeStateCleanup test case\n\nAdds LeaderElectionRetrievalTestingCluster\n\nIntroduces ListeningBehaviour for job submissions\n\nRelocation of org.apache.curator in flink-shaded-hadoop jar\n\nAdds Apache ZooKeeper and Apache Curator to LICENSE and NOTICE files\n\nIncreases zookeeper connection timeout to 20000 ms for the KafkaITCase to fix failing tests on Travis\n\nIncreased timeouts of ZooKeeperLeaderElectionTest for Travis\n\nMakes the WebInfoServer and the WebRuntimeMonitor to use the LeaderRetrievalService to retrieve the current leading JobManager\n\nAdds proper synchronization to ZooKeeperLeaderElectionService. Fixes StateCheckpointedITCase and PartitionedStateCheckpointingITCase\n\nAdds configuration description for new ZooKeeper configuration values\n\nFixed port selection of JobManager at startup\n\nImproves logging output\n\nExtends masters file to also specify the webui ports\n\nAdds proper network interface resolution by retrieving the current leader address\n\nMakes the ZooKeeperLeaderElectionService write the leader information in ephemeral nodes so that the information is deleted once the leader has terminated. Fixes a bug in the TaskManager due to call by name semantics of scheduler.scheduleOnce.\n\nAdds jobManagerURL to TriggerTaskManagerRegistration message\n\nEnables findConnectingAddress to use the ZooKeeperLeaderRetrievalService. This allows to test the connection to a possibly changing master node.\n\nChanges startup scripts to respect the recovery mode instead of the ZK_QUORUM\n\nAdjust travis log file to only log zookeeper errors\n\nUpdates high availability setup guide\n\nAdds TestLogger to leader election tests\n\nThis closes #1016.\n","date":"2015-08-31 17:02:31","modifiedFileCount":"95","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2017-03-17 00:03:03","codes":[{"authorDate":"2017-03-17 00:03:03","commitOrder":3,"curCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\t\t\t\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\t\t\t\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-05-05 17:06:07","endLine":98,"groupId":"23316","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncorrectSerializer1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/480baf637638bdf03d41f1956d1814535e59bc.src","preCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\t\t\t\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\t\t\t\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2017-03-17 00:03:03","commitOrder":3,"curCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-05-05 17:06:07","endLine":158,"groupId":"23317","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIncorrectSerializer3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/480baf637638bdf03d41f1956d1814535e59bc.src","preCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env =\n\t\t\t\t\tExecutionEnvironment.createRemoteEnvironment(\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (ProgramInvocationException e) {\n\t\t\tThrowable rootCause = e.getCause().getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"ddd6a99a95b56c52ea5b5153b7270b578f5479bc","commitMessage":"@@@[FLINK-6078] Remove CuratorFramework#close calls from ZooKeeper based HA services\n\nRemove client less factory methods from ZooKeeperUtils\n\nIntroduce default job id\n\nThis closes #3781.\n","date":"2017-05-05 17:06:07","modifiedFileCount":"114","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2018-02-20 20:41:45","codes":[{"authorDate":"2018-02-20 20:41:45","commitOrder":4,"curCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-02-22 01:19:38","endLine":93,"groupId":"23316","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncorrectSerializer1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/937c922af19a10aa07dbef263af6ae4c427c58.src","preCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2018-02-20 20:41:45","commitOrder":4,"curCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-02-22 01:19:38","endLine":155,"groupId":"23317","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIncorrectSerializer3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/937c922af19a10aa07dbef263af6ae4c427c58.src","preCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"cb08aca3585bde903bc879b2009c7abdcd225019","commitMessage":"@@@[FLINK-8703][tests] Migrate tests to MiniClusterResource (batch #1)\n\nThis closes #5535.\n","date":"2018-02-22 01:19:38","modifiedFileCount":"16","status":"M","submitter":"zentol"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2019-08-21 16:38:00","commitOrder":5,"curCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-08-27 20:27:23","endLine":94,"groupId":"23316","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncorrectSerializer1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a1/e4add6a004915ee6f074b8c11df98bd2eb662c.src","preCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":5,"curCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-08-27 20:27:23","endLine":154,"groupId":"23317","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIncorrectSerializer3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a1/e4add6a004915ee6f074b8c11df98bd2eb662c.src","preCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"c30e84fb8df9cb6ab6a38cde40b9c3b83c4e8954","commitMessage":"@@@[FLINK-13794][client] Remove unused logic of printStatusDuringExecution\n","date":"2019-08-27 20:27:23","modifiedFileCount":"67","status":"M","submitter":"tison"},{"authorTime":"2019-10-15 11:25:40","codes":[{"authorDate":"2019-10-15 11:25:40","commitOrder":6,"curCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tOptional<IOException> rootCause = findThrowable(e, IOException.class);\n\t\t\tassertTrue(rootCause.isPresent());\n\t\t\tassertTrue(rootCause.get().getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-10-18 23:37:27","endLine":96,"groupId":"101189","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncorrectSerializer1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6c/85218b39c0ac8f842284073d8e9d47b3a150f5.src","preCode":"\tpublic void testIncorrectSerializer1() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\n\t\t\tenv\n\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t.map(new MapFunction<Long, ConsumesTooMuch>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic ConsumesTooMuch map(Long value) throws Exception {\n\t\t\t\t\t\treturn new ConsumesTooMuch();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.rebalance()\n\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooMuch>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2019-10-15 11:25:40","commitOrder":6,"curCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tOptional<IOException> rootCause = findThrowable(e, IOException.class);\n\t\t\tassertTrue(rootCause.isPresent());\n\t\t\tassertTrue(rootCause.get().getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-10-18 23:37:27","endLine":156,"groupId":"101189","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIncorrectSerializer3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6c/85218b39c0ac8f842284073d8e9d47b3a150f5.src","preCode":"\tpublic void testIncorrectSerializer3() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARLLELISM);\n\n\t\t\tenv\n\t\t\t\t\t.generateSequence(1, 10 * PARLLELISM)\n\t\t\t\t\t.map(new MapFunction<Long, ConsumesTooLittle>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic ConsumesTooLittle map(Long value) throws Exception {\n\t\t\t\t\t\t\treturn new ConsumesTooLittle();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.output(new DiscardingOutputFormat<ConsumesTooLittle>());\n\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (JobExecutionException e) {\n\t\t\tThrowable rootCause = e.getCause();\n\t\t\tassertTrue(rootCause instanceof IOException);\n\t\t\tassertTrue(rootCause.getMessage().contains(\"broken serialization\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/misc/CustomSerializationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"54952b28ab76877347fa0566a1af780156f3241b","commitMessage":"@@@[FLINK-14366][tests] Enable CustomSerializationITCase to pass with NG scheduler\n","date":"2019-10-18 23:37:27","modifiedFileCount":"1","status":"M","submitter":"Zhu Zhu"}]
