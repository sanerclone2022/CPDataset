[{"authorTime":"2020-08-25 19:19:04","codes":[{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableFactoryHelper helper = createTableFactoryHelper(this, context);\n\t\thelper.validate();\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tvalidatePrimaryKey(tableSchema);\n\n\t\tHBaseOptions.Builder hbaseOptionsBuilder = HBaseOptions.builder();\n\t\thbaseOptionsBuilder.setTableName(helper.getOptions().get(TABLE_NAME));\n\t\thbaseOptionsBuilder.setZkQuorum(helper.getOptions().get(ZOOKEEPER_QUORUM));\n\t\thbaseOptionsBuilder.setZkNodeParent(helper.getOptions().get(ZOOKEEPER_ZNODE_PARENT));\n\n\t\tHBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n\t\twriteBuilder.setBufferFlushMaxSizeInBytes(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n\t\twriteBuilder.setBufferFlushIntervalMillis(helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n\t\twriteBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n\t\tString nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n\t\tHBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n\t\treturn new HBaseDynamicTableSink(\n\t\t\thbaseSchema,\n\t\t\thbaseOptionsBuilder.build(),\n\t\t\twriteBuilder.build(),\n\t\t\tnullStringLiteral);\n\t}\n","date":"2020-09-28 22:08:46","endLine":149,"groupId":"23979","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/fe3c009fdef1b6c66cb9e073efff7f3f262b39.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableFactoryHelper helper = createTableFactoryHelper(this, context);\n\t\thelper.validate();\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tvalidatePrimaryKey(tableSchema);\n\n\t\tHBaseOptions.Builder hbaseOptionsBuilder = HBaseOptions.builder();\n\t\thbaseOptionsBuilder.setTableName(helper.getOptions().get(TABLE_NAME));\n\t\thbaseOptionsBuilder.setZkQuorum(helper.getOptions().get(ZOOKEEPER_QUORUM));\n\t\thbaseOptionsBuilder.setZkNodeParent(helper.getOptions().get(ZOOKEEPER_ZNODE_PARENT));\n\n\t\tHBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n\t\twriteBuilder.setBufferFlushMaxSizeInBytes(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n\t\twriteBuilder.setBufferFlushIntervalMillis(helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n\t\twriteBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n\t\tString nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n\t\tHBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n\t\treturn new HBaseDynamicTableSink(\n\t\t\thbaseSchema,\n\t\t\thbaseOptionsBuilder.build(),\n\t\t\twriteBuilder.build(),\n\t\t\tnullStringLiteral);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/main/java/org/apache/flink/connector/hbase1/HBase1DynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"},{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableFactoryHelper helper = createTableFactoryHelper(this, context);\n\t\thelper.validate();\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tvalidatePrimaryKey(tableSchema);\n\n\t\tString hTableName = helper.getOptions().get(TABLE_NAME);\n\n\t\tHBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n\t\twriteBuilder.setBufferFlushMaxSizeInBytes(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n\t\twriteBuilder.setBufferFlushIntervalMillis(helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n\t\twriteBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n\t\tString nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n\t\tHBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n\t\treturn new HBaseDynamicTableSink(\n\t\t\thTableName,\n\t\t\thbaseSchema,\n\t\t\tgetHbaseConf(helper),\n\t\t\twriteBuilder.build(),\n\t\t\tnullStringLiteral);\n\t}\n","date":"2020-09-28 22:08:46","endLine":143,"groupId":"53256","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/b0d05773925e041be00a7b09ba175a45eaa1ea.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableFactoryHelper helper = createTableFactoryHelper(this, context);\n\t\thelper.validate();\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tvalidatePrimaryKey(tableSchema);\n\n\t\tString hTableName = helper.getOptions().get(TABLE_NAME);\n\n\t\tHBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n\t\twriteBuilder.setBufferFlushMaxSizeInBytes(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n\t\twriteBuilder.setBufferFlushIntervalMillis(helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n\t\twriteBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n\t\tString nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n\t\tHBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n\t\treturn new HBaseDynamicTableSink(\n\t\t\thTableName,\n\t\t\thbaseSchema,\n\t\t\tgetHbaseConf(helper),\n\t\t\twriteBuilder.build(),\n\t\t\tnullStringLiteral);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/main/java/org/apache/flink/connector/hbase2/HBase2DynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"16c97c8db718219ed036218faf3519541f24b430","commitMessage":"@@@[FLINK-18795][hbase] Support for HBase 2\n\nThis closes #13128\n","date":"2020-09-28 22:08:46","modifiedFileCount":"5","status":"B","submitter":"Miklos Gergely"},{"authorTime":"2020-11-05 15:18:31","codes":[{"authorDate":"2020-11-05 15:18:31","commitOrder":2,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableFactoryHelper helper = createTableFactoryHelper(this, context);\n\t\thelper.validate();\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tvalidatePrimaryKey(tableSchema);\n\n\t\tHBaseOptions.Builder hbaseOptionsBuilder = HBaseOptions.builder();\n\t\thbaseOptionsBuilder.setTableName(helper.getOptions().get(TABLE_NAME));\n\t\thbaseOptionsBuilder.setZkQuorum(helper.getOptions().get(ZOOKEEPER_QUORUM));\n\t\thbaseOptionsBuilder.setZkNodeParent(helper.getOptions().get(ZOOKEEPER_ZNODE_PARENT));\n\n\t\tHBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n\t\twriteBuilder.setBufferFlushMaxSizeInBytes(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n\t\twriteBuilder.setBufferFlushIntervalMillis(helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n\t\twriteBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n\t\twriteBuilder.setParallelism(helper.getOptions().getOptional(SINK_PARALLELISM).orElse(null));\n\t\tString nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n\t\tHBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n\t\treturn new HBaseDynamicTableSink(\n\t\t\thbaseSchema,\n\t\t\thbaseOptionsBuilder.build(),\n\t\t\twriteBuilder.build(),\n\t\t\tnullStringLiteral);\n\t}\n","date":"2020-11-18 22:41:48","endLine":151,"groupId":"23979","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/cc32a6a5e3ecd39b846dd6a9c055c7bbd5ccba.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableFactoryHelper helper = createTableFactoryHelper(this, context);\n\t\thelper.validate();\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tvalidatePrimaryKey(tableSchema);\n\n\t\tHBaseOptions.Builder hbaseOptionsBuilder = HBaseOptions.builder();\n\t\thbaseOptionsBuilder.setTableName(helper.getOptions().get(TABLE_NAME));\n\t\thbaseOptionsBuilder.setZkQuorum(helper.getOptions().get(ZOOKEEPER_QUORUM));\n\t\thbaseOptionsBuilder.setZkNodeParent(helper.getOptions().get(ZOOKEEPER_ZNODE_PARENT));\n\n\t\tHBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n\t\twriteBuilder.setBufferFlushMaxSizeInBytes(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n\t\twriteBuilder.setBufferFlushIntervalMillis(helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n\t\twriteBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n\t\tString nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n\t\tHBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n\t\treturn new HBaseDynamicTableSink(\n\t\t\thbaseSchema,\n\t\t\thbaseOptionsBuilder.build(),\n\t\t\twriteBuilder.build(),\n\t\t\tnullStringLiteral);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/main/java/org/apache/flink/connector/hbase1/HBase1DynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-11-05 15:18:31","commitOrder":2,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableFactoryHelper helper = createTableFactoryHelper(this, context);\n\t\thelper.validate();\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tvalidatePrimaryKey(tableSchema);\n\n\t\tString hTableName = helper.getOptions().get(TABLE_NAME);\n\n\t\tHBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n\t\twriteBuilder.setBufferFlushMaxSizeInBytes(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n\t\twriteBuilder.setBufferFlushIntervalMillis(helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n\t\twriteBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n\t\twriteBuilder.setParallelism(helper.getOptions().getOptional(SINK_PARALLELISM).orElse(null));\n\t\tString nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n\t\tHBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n\t\treturn new HBaseDynamicTableSink(\n\t\t\thTableName,\n\t\t\thbaseSchema,\n\t\t\tgetHbaseConf(helper),\n\t\t\twriteBuilder.build(),\n\t\t\tnullStringLiteral);\n\t}\n","date":"2020-11-18 22:41:48","endLine":145,"groupId":"53256","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/bb613d42972089f30485e44ff3f648eacea378.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableFactoryHelper helper = createTableFactoryHelper(this, context);\n\t\thelper.validate();\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tvalidatePrimaryKey(tableSchema);\n\n\t\tString hTableName = helper.getOptions().get(TABLE_NAME);\n\n\t\tHBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n\t\twriteBuilder.setBufferFlushMaxSizeInBytes(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n\t\twriteBuilder.setBufferFlushIntervalMillis(helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n\t\twriteBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n\t\tString nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n\t\tHBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n\t\treturn new HBaseDynamicTableSink(\n\t\t\thTableName,\n\t\t\thbaseSchema,\n\t\t\tgetHbaseConf(helper),\n\t\t\twriteBuilder.build(),\n\t\t\tnullStringLiteral);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/main/java/org/apache/flink/connector/hbase2/HBase2DynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"a0398ff138351280e605e0abde3310bb19033676","commitMessage":"@@@[FLINK-19946][hbase] Add sink parallelism option for HBase connector\n\nThis closes #13933\n","date":"2020-11-18 22:41:48","modifiedFileCount":"7","status":"M","submitter":"zhuxiaoshang"},{"authorTime":"2021-01-14 20:26:32","codes":[{"authorDate":"2021-01-14 20:26:32","commitOrder":3,"curCode":"    public DynamicTableSink createDynamicTableSink(Context context) {\n        TableFactoryHelper helper = createTableFactoryHelper(this, context);\n        helper.validateExcept(PROPERTIES_PREFIX);\n\n        final ReadableConfig tableOptions = helper.getOptions();\n\n        TableSchema tableSchema = context.getCatalogTable().getSchema();\n        Map<String, String> options = context.getCatalogTable().getOptions();\n\n        validatePrimaryKey(tableSchema);\n\n        String tableName = tableOptions.get(TABLE_NAME);\n        Configuration hbaseConf = getHBaseConfiguration(options);\n        HBaseWriteOptions hBaseWriteOptions = getHBaseWriteOptions(tableOptions);\n        String nullStringLiteral = tableOptions.get(NULL_STRING_LITERAL);\n        HBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n        return new HBaseDynamicTableSink(\n                tableName, hbaseSchema, hbaseConf, hBaseWriteOptions, nullStringLiteral);\n    }\n","date":"2021-01-14 20:26:32","endLine":101,"groupId":"10796","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cf/e6d35c5f0eae927919a5df520ed28a9289f0d5.src","preCode":"    public DynamicTableSink createDynamicTableSink(Context context) {\n        TableFactoryHelper helper = createTableFactoryHelper(this, context);\n        helper.validate();\n        TableSchema tableSchema = context.getCatalogTable().getSchema();\n        validatePrimaryKey(tableSchema);\n\n        HBaseOptions.Builder hbaseOptionsBuilder = HBaseOptions.builder();\n        hbaseOptionsBuilder.setTableName(helper.getOptions().get(TABLE_NAME));\n        hbaseOptionsBuilder.setZkQuorum(helper.getOptions().get(ZOOKEEPER_QUORUM));\n        hbaseOptionsBuilder.setZkNodeParent(helper.getOptions().get(ZOOKEEPER_ZNODE_PARENT));\n\n        HBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n        writeBuilder.setBufferFlushMaxSizeInBytes(\n                helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n        writeBuilder.setBufferFlushIntervalMillis(\n                helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n        writeBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n        writeBuilder.setParallelism(helper.getOptions().getOptional(SINK_PARALLELISM).orElse(null));\n        String nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n        HBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n        return new HBaseDynamicTableSink(\n                hbaseSchema, hbaseOptionsBuilder.build(), writeBuilder.build(), nullStringLiteral);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/main/java/org/apache/flink/connector/hbase1/HBase1DynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2021-01-14 20:26:32","commitOrder":3,"curCode":"    public DynamicTableSink createDynamicTableSink(Context context) {\n        TableFactoryHelper helper = createTableFactoryHelper(this, context);\n        helper.validateExcept(PROPERTIES_PREFIX);\n\n        final ReadableConfig tableOptions = helper.getOptions();\n\n        TableSchema tableSchema = context.getCatalogTable().getSchema();\n        Map<String, String> options = context.getCatalogTable().getOptions();\n\n        validatePrimaryKey(tableSchema);\n\n        String tableName = tableOptions.get(TABLE_NAME);\n        Configuration hbaseConf = getHBaseConfiguration(options);\n        HBaseWriteOptions hBaseWriteOptions = getHBaseWriteOptions(tableOptions);\n        String nullStringLiteral = tableOptions.get(NULL_STRING_LITERAL);\n        HBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n        return new HBaseDynamicTableSink(\n                tableName, hbaseSchema, hbaseConf, hBaseWriteOptions, nullStringLiteral);\n    }\n","date":"2021-01-14 20:26:32","endLine":100,"groupId":"10796","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/650b997e03fbce6886f3b91e0f85488f4e0689.src","preCode":"    public DynamicTableSink createDynamicTableSink(Context context) {\n        TableFactoryHelper helper = createTableFactoryHelper(this, context);\n        helper.validate();\n        TableSchema tableSchema = context.getCatalogTable().getSchema();\n        validatePrimaryKey(tableSchema);\n\n        String hTableName = helper.getOptions().get(TABLE_NAME);\n\n        HBaseWriteOptions.Builder writeBuilder = HBaseWriteOptions.builder();\n        writeBuilder.setBufferFlushMaxSizeInBytes(\n                helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_SIZE).getBytes());\n        writeBuilder.setBufferFlushIntervalMillis(\n                helper.getOptions().get(SINK_BUFFER_FLUSH_INTERVAL).toMillis());\n        writeBuilder.setBufferFlushMaxRows(helper.getOptions().get(SINK_BUFFER_FLUSH_MAX_ROWS));\n        writeBuilder.setParallelism(helper.getOptions().getOptional(SINK_PARALLELISM).orElse(null));\n        String nullStringLiteral = helper.getOptions().get(NULL_STRING_LITERAL);\n        HBaseTableSchema hbaseSchema = HBaseTableSchema.fromTableSchema(tableSchema);\n\n        return new HBaseDynamicTableSink(\n                hTableName,\n                hbaseSchema,\n                getHbaseConf(helper),\n                writeBuilder.build(),\n                nullStringLiteral);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/main/java/org/apache/flink/connector/hbase2/HBase2DynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"39dbd75b1c7e063ca4f6bb771e21f909e3fd15ff","commitMessage":"@@@[FLINK-20812][hbase] Support 'properties.*' option to pass through all the HBase properties\n\nThis closes #14536","date":"2021-01-14 20:26:32","modifiedFileCount":"14","status":"M","submitter":"zhaown"}]
