[{"authorTime":"2015-08-31 01:14:00","codes":[{"authorDate":"2015-08-31 01:14:00","commitOrder":1,"curCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() {\n\t\ttry {\n\t\t\tList<Tuple2<Long, Long>> verticesInput = Arrays.asList(\n\t\t\t\t\tnew Tuple2<Long, Long>(1l,1l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(3l,3l),\n\t\t\t\t\tnew Tuple2<Long, Long>(4l,4l),\n\t\t\t\t\tnew Tuple2<Long, Long>(5l,5l),\n\t\t\t\t\tnew Tuple2<Long, Long>(6l,6l),\n\t\t\t\t\tnew Tuple2<Long, Long>(7l,7l),\n\t\t\t\t\tnew Tuple2<Long, Long>(8l,8l),\n\t\t\t\t\tnew Tuple2<Long, Long>(9l,9l)\n\t\t\t);\n\t\t\t\n\t\t\tList<Tuple2<Long, Long>> edgesInput = Arrays.asList(\n\t\t\t\t\tnew Tuple2<Long, Long>(1l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(1l,3l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,3l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,4l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,1l),\n\t\t\t\t\tnew Tuple2<Long, Long>(3l,1l),\n\t\t\t\t\tnew Tuple2<Long, Long>(3l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(4l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(4l,6l),\n\t\t\t\t\tnew Tuple2<Long, Long>(5l,6l),\n\t\t\t\t\tnew Tuple2<Long, Long>(6l,4l),\n\t\t\t\t\tnew Tuple2<Long, Long>(6l,5l),\n\t\t\t\t\tnew Tuple2<Long, Long>(7l,8l),\n\t\t\t\t\tnew Tuple2<Long, Long>(7l,9l),\n\t\t\t\t\tnew Tuple2<Long, Long>(8l,7l),\n\t\t\t\t\tnew Tuple2<Long, Long>(8l,9l),\n\t\t\t\t\tnew Tuple2<Long, Long>(9l,7l),\n\t\t\t\t\tnew Tuple2<Long, Long>(9l,8l)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<Long, Long>(1L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(2L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(3L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(4L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(5L,2L),\n\t\t\t\t\tnew Tuple2<Long, Long>(6L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(7L,7L),\n\t\t\t\t\tnew Tuple2<Long, Long>(8L,7L),\n\t\t\t\t\tnew Tuple2<Long, Long>(9L,7L)\n\t\t\t);\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-08-31 04:39:17","endLine":139,"groupId":"26080","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/1b31b4406a2ead47c915c0c4d29fb7b5cd5f64.src","preCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() {\n\t\ttry {\n\t\t\tList<Tuple2<Long, Long>> verticesInput = Arrays.asList(\n\t\t\t\t\tnew Tuple2<Long, Long>(1l,1l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(3l,3l),\n\t\t\t\t\tnew Tuple2<Long, Long>(4l,4l),\n\t\t\t\t\tnew Tuple2<Long, Long>(5l,5l),\n\t\t\t\t\tnew Tuple2<Long, Long>(6l,6l),\n\t\t\t\t\tnew Tuple2<Long, Long>(7l,7l),\n\t\t\t\t\tnew Tuple2<Long, Long>(8l,8l),\n\t\t\t\t\tnew Tuple2<Long, Long>(9l,9l)\n\t\t\t);\n\t\t\t\n\t\t\tList<Tuple2<Long, Long>> edgesInput = Arrays.asList(\n\t\t\t\t\tnew Tuple2<Long, Long>(1l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(1l,3l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,3l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,4l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,1l),\n\t\t\t\t\tnew Tuple2<Long, Long>(3l,1l),\n\t\t\t\t\tnew Tuple2<Long, Long>(3l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(4l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(4l,6l),\n\t\t\t\t\tnew Tuple2<Long, Long>(5l,6l),\n\t\t\t\t\tnew Tuple2<Long, Long>(6l,4l),\n\t\t\t\t\tnew Tuple2<Long, Long>(6l,5l),\n\t\t\t\t\tnew Tuple2<Long, Long>(7l,8l),\n\t\t\t\t\tnew Tuple2<Long, Long>(7l,9l),\n\t\t\t\t\tnew Tuple2<Long, Long>(8l,7l),\n\t\t\t\t\tnew Tuple2<Long, Long>(8l,9l),\n\t\t\t\t\tnew Tuple2<Long, Long>(9l,7l),\n\t\t\t\t\tnew Tuple2<Long, Long>(9l,8l)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<Long, Long>(1L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(2L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(3L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(4L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(5L,2L),\n\t\t\t\t\tnew Tuple2<Long, Long>(6L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(7L,7L),\n\t\t\t\t\tnew Tuple2<Long, Long>(8L,7L),\n\t\t\t\t\tnew Tuple2<Long, Long>(9L,7L)\n\t\t\t);\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2015-08-31 01:14:00","commitOrder":1,"curCode":"\tpublic void testParameterizableAggregator() {\n\t\ttry {\n\t\t\tList<Tuple2<Long, Long>> verticesInput = Arrays.asList(\n\t\t\t\tnew Tuple2<Long, Long>(1l,1l),\n\t\t\t\tnew Tuple2<Long, Long>(2l,2l),\n\t\t\t\tnew Tuple2<Long, Long>(3l,3l),\n\t\t\t\tnew Tuple2<Long, Long>(4l,4l),\n\t\t\t\tnew Tuple2<Long, Long>(5l,5l),\n\t\t\t\tnew Tuple2<Long, Long>(6l,6l),\n\t\t\t\tnew Tuple2<Long, Long>(7l,7l),\n\t\t\t\tnew Tuple2<Long, Long>(8l,8l),\n\t\t\t\tnew Tuple2<Long, Long>(9l,9l)\n\t\t\t);\n\t\t\t\n\t\t\tList<Tuple2<Long, Long>> edgesInput = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1l,2l),\n\t\t\t\t\tnew Tuple2<>(1l,3l),\n\t\t\t\t\tnew Tuple2<>(2l,3l),\n\t\t\t\t\tnew Tuple2<>(2l,4l),\n\t\t\t\t\tnew Tuple2<>(2l,1l),\n\t\t\t\t\tnew Tuple2<>(3l,1l),\n\t\t\t\t\tnew Tuple2<>(3l,2l),\n\t\t\t\t\tnew Tuple2<>(4l,2l),\n\t\t\t\t\tnew Tuple2<>(4l,6l),\n\t\t\t\t\tnew Tuple2<>(5l,6l),\n\t\t\t\t\tnew Tuple2<>(6l,4l),\n\t\t\t\t\tnew Tuple2<>(6l,5l),\n\t\t\t\t\tnew Tuple2<>(7l,8l),\n\t\t\t\t\tnew Tuple2<>(7l,9l),\n\t\t\t\t\tnew Tuple2<>(8l,7l),\n\t\t\t\t\tnew Tuple2<>(8l,9l),\n\t\t\t\t\tnew Tuple2<>(9l,7l),\n\t\t\t\t\tnew Tuple2<>(9l,8l)\n\t\t\t);\n\n\t\t\tfinal int MAX_ITERATIONS = 5;\n\t\t\tfinal String AGGREGATOR_NAME = \"elements.in.component.aggregator\";\n\t\t\tfinal long componentId = 1l;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(MAX_ITERATIONS);\n\n\t\t\t\r\n\t\t\titeration.registerAggregator(AGGREGATOR_NAME, new LongSumAggregatorWithParameter(componentId));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1L,1L),\n\t\t\t\t\tnew Tuple2<>(2L,1L),\n\t\t\t\t\tnew Tuple2<>(3L,1L),\n\t\t\t\t\tnew Tuple2<>(4L,1L),\n\t\t\t\t\tnew Tuple2<>(5L,1L),\n\t\t\t\t\tnew Tuple2<>(6L,1L),\n\t\t\t\t\tnew Tuple2<>(7L,7L),\n\t\t\t\t\tnew Tuple2<>(8L,7L),\n\t\t\t\t\tnew Tuple2<>(9L,7L)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tassertEquals(expectedResult, result);\n\n\t\t\t\r\n\t\t\tlong[] aggr_values = MinimumIdFilterCounting.aggr_value;\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tassertEquals(3, aggr_values[0]);\n\t\t\tassertEquals(4, aggr_values[1]);\n\t\t\tassertEquals(5, aggr_values[2]);\n\t\t\tassertEquals(6, aggr_values[3]);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-08-31 04:39:17","endLine":234,"groupId":"30248","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParameterizableAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/1b31b4406a2ead47c915c0c4d29fb7b5cd5f64.src","preCode":"\tpublic void testParameterizableAggregator() {\n\t\ttry {\n\t\t\tList<Tuple2<Long, Long>> verticesInput = Arrays.asList(\n\t\t\t\tnew Tuple2<Long, Long>(1l,1l),\n\t\t\t\tnew Tuple2<Long, Long>(2l,2l),\n\t\t\t\tnew Tuple2<Long, Long>(3l,3l),\n\t\t\t\tnew Tuple2<Long, Long>(4l,4l),\n\t\t\t\tnew Tuple2<Long, Long>(5l,5l),\n\t\t\t\tnew Tuple2<Long, Long>(6l,6l),\n\t\t\t\tnew Tuple2<Long, Long>(7l,7l),\n\t\t\t\tnew Tuple2<Long, Long>(8l,8l),\n\t\t\t\tnew Tuple2<Long, Long>(9l,9l)\n\t\t\t);\n\t\t\t\n\t\t\tList<Tuple2<Long, Long>> edgesInput = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1l,2l),\n\t\t\t\t\tnew Tuple2<>(1l,3l),\n\t\t\t\t\tnew Tuple2<>(2l,3l),\n\t\t\t\t\tnew Tuple2<>(2l,4l),\n\t\t\t\t\tnew Tuple2<>(2l,1l),\n\t\t\t\t\tnew Tuple2<>(3l,1l),\n\t\t\t\t\tnew Tuple2<>(3l,2l),\n\t\t\t\t\tnew Tuple2<>(4l,2l),\n\t\t\t\t\tnew Tuple2<>(4l,6l),\n\t\t\t\t\tnew Tuple2<>(5l,6l),\n\t\t\t\t\tnew Tuple2<>(6l,4l),\n\t\t\t\t\tnew Tuple2<>(6l,5l),\n\t\t\t\t\tnew Tuple2<>(7l,8l),\n\t\t\t\t\tnew Tuple2<>(7l,9l),\n\t\t\t\t\tnew Tuple2<>(8l,7l),\n\t\t\t\t\tnew Tuple2<>(8l,9l),\n\t\t\t\t\tnew Tuple2<>(9l,7l),\n\t\t\t\t\tnew Tuple2<>(9l,8l)\n\t\t\t);\n\n\t\t\tfinal int MAX_ITERATIONS = 5;\n\t\t\tfinal String AGGREGATOR_NAME = \"elements.in.component.aggregator\";\n\t\t\tfinal long componentId = 1l;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(MAX_ITERATIONS);\n\n\t\t\t\r\n\t\t\titeration.registerAggregator(AGGREGATOR_NAME, new LongSumAggregatorWithParameter(componentId));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1L,1L),\n\t\t\t\t\tnew Tuple2<>(2L,1L),\n\t\t\t\t\tnew Tuple2<>(3L,1L),\n\t\t\t\t\tnew Tuple2<>(4L,1L),\n\t\t\t\t\tnew Tuple2<>(5L,1L),\n\t\t\t\t\tnew Tuple2<>(6L,1L),\n\t\t\t\t\tnew Tuple2<>(7L,7L),\n\t\t\t\t\tnew Tuple2<>(8L,7L),\n\t\t\t\t\tnew Tuple2<>(9L,7L)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tassertEquals(expectedResult, result);\n\n\t\t\t\r\n\t\t\tlong[] aggr_values = MinimumIdFilterCounting.aggr_value;\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tassertEquals(3, aggr_values[0]);\n\t\t\tassertEquals(4, aggr_values[1]);\n\t\t\tassertEquals(5, aggr_values[2]);\n\t\t\tassertEquals(6, aggr_values[3]);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"}],"commitId":"0858d9f12101ecf7b29e995561dd3fc4ce00eb38","commitMessage":"@@@[tests] Improve and combine iteration tests with aggregators (less static sharing.  collect().  parallel execution)\n","date":"2015-08-31 04:39:17","modifiedFileCount":"0","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2016-10-05 19:49:20","codes":[{"authorDate":"2016-10-05 19:49:20","commitOrder":2,"curCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","date":"2016-10-21 18:33:50","endLine":134,"groupId":"26080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/ade80b3728bc301fb724bd7a28d324524fb563.src","preCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() {\n\t\ttry {\n\t\t\tList<Tuple2<Long, Long>> verticesInput = Arrays.asList(\n\t\t\t\t\tnew Tuple2<Long, Long>(1l,1l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(3l,3l),\n\t\t\t\t\tnew Tuple2<Long, Long>(4l,4l),\n\t\t\t\t\tnew Tuple2<Long, Long>(5l,5l),\n\t\t\t\t\tnew Tuple2<Long, Long>(6l,6l),\n\t\t\t\t\tnew Tuple2<Long, Long>(7l,7l),\n\t\t\t\t\tnew Tuple2<Long, Long>(8l,8l),\n\t\t\t\t\tnew Tuple2<Long, Long>(9l,9l)\n\t\t\t);\n\t\t\t\n\t\t\tList<Tuple2<Long, Long>> edgesInput = Arrays.asList(\n\t\t\t\t\tnew Tuple2<Long, Long>(1l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(1l,3l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,3l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,4l),\n\t\t\t\t\tnew Tuple2<Long, Long>(2l,1l),\n\t\t\t\t\tnew Tuple2<Long, Long>(3l,1l),\n\t\t\t\t\tnew Tuple2<Long, Long>(3l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(4l,2l),\n\t\t\t\t\tnew Tuple2<Long, Long>(4l,6l),\n\t\t\t\t\tnew Tuple2<Long, Long>(5l,6l),\n\t\t\t\t\tnew Tuple2<Long, Long>(6l,4l),\n\t\t\t\t\tnew Tuple2<Long, Long>(6l,5l),\n\t\t\t\t\tnew Tuple2<Long, Long>(7l,8l),\n\t\t\t\t\tnew Tuple2<Long, Long>(7l,9l),\n\t\t\t\t\tnew Tuple2<Long, Long>(8l,7l),\n\t\t\t\t\tnew Tuple2<Long, Long>(8l,9l),\n\t\t\t\t\tnew Tuple2<Long, Long>(9l,7l),\n\t\t\t\t\tnew Tuple2<Long, Long>(9l,8l)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<Long, Long>(1L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(2L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(3L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(4L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(5L,2L),\n\t\t\t\t\tnew Tuple2<Long, Long>(6L,1L),\n\t\t\t\t\tnew Tuple2<Long, Long>(7L,7L),\n\t\t\t\t\tnew Tuple2<Long, Long>(8L,7L),\n\t\t\t\t\tnew Tuple2<Long, Long>(9L,7L)\n\t\t\t);\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2016-10-05 19:49:20","commitOrder":2,"curCode":"\tpublic void testParameterizableAggregator() throws Exception {\n\n\t\t\tfinal int MAX_ITERATIONS = 5;\n\t\t\tfinal String AGGREGATOR_NAME = \"elements.in.component.aggregator\";\n\t\t\tfinal long componentId = 1l;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(MAX_ITERATIONS);\n\n\t\t\t\r\n\t\t\titeration.registerAggregator(AGGREGATOR_NAME, new LongSumAggregatorWithParameter(componentId));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1L,1L),\n\t\t\t\t\tnew Tuple2<>(2L,1L),\n\t\t\t\t\tnew Tuple2<>(3L,1L),\n\t\t\t\t\tnew Tuple2<>(4L,1L),\n\t\t\t\t\tnew Tuple2<>(5L,1L),\n\t\t\t\t\tnew Tuple2<>(6L,1L),\n\t\t\t\t\tnew Tuple2<>(7L,7L),\n\t\t\t\t\tnew Tuple2<>(8L,7L),\n\t\t\t\t\tnew Tuple2<>(9L,7L)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tassertEquals(expectedResult, result);\n\n\t\t\t\r\n\t\t\tlong[] aggr_values = MinimumIdFilterCounting.aggr_value;\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tassertEquals(3, aggr_values[0]);\n\t\t\tassertEquals(4, aggr_values[1]);\n\t\t\tassertEquals(5, aggr_values[2]);\n\t\t\tassertEquals(6, aggr_values[3]);\n\t}\n","date":"2016-10-21 18:33:50","endLine":226,"groupId":"30248","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParameterizableAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/ade80b3728bc301fb724bd7a28d324524fb563.src","preCode":"\tpublic void testParameterizableAggregator() {\n\t\ttry {\n\t\t\tList<Tuple2<Long, Long>> verticesInput = Arrays.asList(\n\t\t\t\tnew Tuple2<Long, Long>(1l,1l),\n\t\t\t\tnew Tuple2<Long, Long>(2l,2l),\n\t\t\t\tnew Tuple2<Long, Long>(3l,3l),\n\t\t\t\tnew Tuple2<Long, Long>(4l,4l),\n\t\t\t\tnew Tuple2<Long, Long>(5l,5l),\n\t\t\t\tnew Tuple2<Long, Long>(6l,6l),\n\t\t\t\tnew Tuple2<Long, Long>(7l,7l),\n\t\t\t\tnew Tuple2<Long, Long>(8l,8l),\n\t\t\t\tnew Tuple2<Long, Long>(9l,9l)\n\t\t\t);\n\t\t\t\n\t\t\tList<Tuple2<Long, Long>> edgesInput = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1l,2l),\n\t\t\t\t\tnew Tuple2<>(1l,3l),\n\t\t\t\t\tnew Tuple2<>(2l,3l),\n\t\t\t\t\tnew Tuple2<>(2l,4l),\n\t\t\t\t\tnew Tuple2<>(2l,1l),\n\t\t\t\t\tnew Tuple2<>(3l,1l),\n\t\t\t\t\tnew Tuple2<>(3l,2l),\n\t\t\t\t\tnew Tuple2<>(4l,2l),\n\t\t\t\t\tnew Tuple2<>(4l,6l),\n\t\t\t\t\tnew Tuple2<>(5l,6l),\n\t\t\t\t\tnew Tuple2<>(6l,4l),\n\t\t\t\t\tnew Tuple2<>(6l,5l),\n\t\t\t\t\tnew Tuple2<>(7l,8l),\n\t\t\t\t\tnew Tuple2<>(7l,9l),\n\t\t\t\t\tnew Tuple2<>(8l,7l),\n\t\t\t\t\tnew Tuple2<>(8l,9l),\n\t\t\t\t\tnew Tuple2<>(9l,7l),\n\t\t\t\t\tnew Tuple2<>(9l,8l)\n\t\t\t);\n\n\t\t\tfinal int MAX_ITERATIONS = 5;\n\t\t\tfinal String AGGREGATOR_NAME = \"elements.in.component.aggregator\";\n\t\t\tfinal long componentId = 1l;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(MAX_ITERATIONS);\n\n\t\t\t\r\n\t\t\titeration.registerAggregator(AGGREGATOR_NAME, new LongSumAggregatorWithParameter(componentId));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1L,1L),\n\t\t\t\t\tnew Tuple2<>(2L,1L),\n\t\t\t\t\tnew Tuple2<>(3L,1L),\n\t\t\t\t\tnew Tuple2<>(4L,1L),\n\t\t\t\t\tnew Tuple2<>(5L,1L),\n\t\t\t\t\tnew Tuple2<>(6L,1L),\n\t\t\t\t\tnew Tuple2<>(7L,7L),\n\t\t\t\t\tnew Tuple2<>(8L,7L),\n\t\t\t\t\tnew Tuple2<>(9L,7L)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tassertEquals(expectedResult, result);\n\n\t\t\t\r\n\t\t\tlong[] aggr_values = MinimumIdFilterCounting.aggr_value;\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tassertEquals(3, aggr_values[0]);\n\t\t\tassertEquals(4, aggr_values[1]);\n\t\t\tassertEquals(5, aggr_values[2]);\n\t\t\tassertEquals(6, aggr_values[3]);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"8085aa98333a052553f1155f65b5cc2728eb5ff8","commitMessage":"@@@[FLINK-3888] allow registering a custom convergence criterion in delta iterations\n\n- cleanups in iterations and aggregators code\n- add delta convergence criterion in the CollectionExecutor\n- add ITCases for delta custom convergence\n\nThis closes #2606\n","date":"2016-10-21 18:33:50","modifiedFileCount":"8","status":"M","submitter":"vasia"},{"authorTime":"2017-05-25 03:10:33","codes":[{"authorDate":"2017-05-25 03:10:33","commitOrder":3,"curCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","date":"2017-05-26 17:28:57","endLine":134,"groupId":"26080","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/ced254cf0d68aba3e8e5819437d7bc29992c71.src","preCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2017-05-25 03:10:33","commitOrder":3,"curCode":"\tpublic void testParameterizableAggregator() throws Exception {\n\n\t\t\tfinal int MAX_ITERATIONS = 5;\n\t\t\tfinal String AGGREGATOR_NAME = \"elements.in.component.aggregator\";\n\t\t\tfinal long componentId = 1l;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(MAX_ITERATIONS);\n\n\t\t\t\r\n\t\t\titeration.registerAggregator(AGGREGATOR_NAME, new LongSumAggregatorWithParameter(componentId));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\n\t\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1L,1L),\n\t\t\t\t\tnew Tuple2<>(2L,1L),\n\t\t\t\t\tnew Tuple2<>(3L,1L),\n\t\t\t\t\tnew Tuple2<>(4L,1L),\n\t\t\t\t\tnew Tuple2<>(5L,1L),\n\t\t\t\t\tnew Tuple2<>(6L,1L),\n\t\t\t\t\tnew Tuple2<>(7L,7L),\n\t\t\t\t\tnew Tuple2<>(8L,7L),\n\t\t\t\t\tnew Tuple2<>(9L,7L)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tassertEquals(expectedResult, result);\n\n\t\t\t\r\n\t\t\tlong[] aggr_values = MinimumIdFilterCounting.aggr_value;\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tassertEquals(3, aggr_values[0]);\n\t\t\tassertEquals(4, aggr_values[1]);\n\t\t\tassertEquals(5, aggr_values[2]);\n\t\t\tassertEquals(6, aggr_values[3]);\n\t}\n","date":"2017-05-26 17:28:57","endLine":226,"groupId":"26082","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParameterizableAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/ced254cf0d68aba3e8e5819437d7bc29992c71.src","preCode":"\tpublic void testParameterizableAggregator() throws Exception {\n\n\t\t\tfinal int MAX_ITERATIONS = 5;\n\t\t\tfinal String AGGREGATOR_NAME = \"elements.in.component.aggregator\";\n\t\t\tfinal long componentId = 1l;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(MAX_ITERATIONS);\n\n\t\t\t\r\n\t\t\titeration.registerAggregator(AGGREGATOR_NAME, new LongSumAggregatorWithParameter(componentId));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1L,1L),\n\t\t\t\t\tnew Tuple2<>(2L,1L),\n\t\t\t\t\tnew Tuple2<>(3L,1L),\n\t\t\t\t\tnew Tuple2<>(4L,1L),\n\t\t\t\t\tnew Tuple2<>(5L,1L),\n\t\t\t\t\tnew Tuple2<>(6L,1L),\n\t\t\t\t\tnew Tuple2<>(7L,7L),\n\t\t\t\t\tnew Tuple2<>(8L,7L),\n\t\t\t\t\tnew Tuple2<>(9L,7L)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tassertEquals(expectedResult, result);\n\n\t\t\t\r\n\t\t\tlong[] aggr_values = MinimumIdFilterCounting.aggr_value;\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tassertEquals(3, aggr_values[0]);\n\t\t\tassertEquals(4, aggr_values[1]);\n\t\t\tassertEquals(5, aggr_values[2]);\n\t\t\tassertEquals(6, aggr_values[3]);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"ae2c6be5da9d491480d36975280f46b8c107a85c","commitMessage":"@@@[FLINK-6688] Activate strict checkstyle for flink-test-utils\n\nThis closes #3983.\n","date":"2017-05-26 17:28:57","modifiedFileCount":"30","status":"M","submitter":"zentol"},{"authorTime":"2017-05-31 03:40:47","codes":[{"authorDate":"2017-05-31 03:40:47","commitOrder":4,"curCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\r\n\t\tfinal String updatedElements = \"updated.elements.aggr\";\n\n\t\t\r\n\t\tfinal long convergenceThreshold = 3;\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\r\n\t\titeration.registerAggregationConvergenceCriterion(updatedElements,\n\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergenceThreshold));\n\n\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t.groupBy(0).min(1);\n\n\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t.flatMap(new MinimumIdFilter(updatedElements));\n\n\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\n\t\tassertEquals(expectedResult, result);\n\t}\n","date":"2017-07-13 06:37:47","endLine":134,"groupId":"101219","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/03cd9cc3b16212b207a0d03e7d93014cad041a.src","preCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2017-05-31 03:40:47","commitOrder":4,"curCode":"\tpublic void testParameterizableAggregator() throws Exception {\n\n\t\t\tfinal int maxIterations = 5;\n\t\tfinal String aggregatorName = \"elements.in.component.aggregator\";\n\t\tfinal long componentId = 1L;\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\tinitialSolutionSet.iterate(maxIterations);\n\n\t\t\r\n\t\titeration.registerAggregator(aggregatorName, new LongSumAggregatorWithParameter(componentId));\n\n\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t.groupBy(0).min(1);\n\n\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t.flatMap(new MinimumIdFilterCounting(aggregatorName));\n\n\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\n\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\n\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\tnew Tuple2<>(1L, 1L),\n\t\t\tnew Tuple2<>(2L, 1L),\n\t\t\tnew Tuple2<>(3L, 1L),\n\t\t\tnew Tuple2<>(4L, 1L),\n\t\t\tnew Tuple2<>(5L, 1L),\n\t\t\tnew Tuple2<>(6L, 1L),\n\t\t\tnew Tuple2<>(7L, 7L),\n\t\t\tnew Tuple2<>(8L, 7L),\n\t\t\tnew Tuple2<>(9L, 7L)\n\t\t);\n\n\t\t\r\n\t\tassertEquals(expectedResult, result);\n\n\t\t\r\n\t\tlong[] aggrValues = MinimumIdFilterCounting.aggr_value;\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tassertEquals(3, aggrValues[0]);\n\t\tassertEquals(4, aggrValues[1]);\n\t\tassertEquals(5, aggrValues[2]);\n\t\tassertEquals(6, aggrValues[3]);\n\t}\n","date":"2017-07-13 06:37:47","endLine":226,"groupId":"101219","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testParameterizableAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/03cd9cc3b16212b207a0d03e7d93014cad041a.src","preCode":"\tpublic void testParameterizableAggregator() throws Exception {\n\n\t\t\tfinal int MAX_ITERATIONS = 5;\n\t\t\tfinal String AGGREGATOR_NAME = \"elements.in.component.aggregator\";\n\t\t\tfinal long componentId = 1l;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterate(MAX_ITERATIONS);\n\n\t\t\t\r\n\t\t\titeration.registerAggregator(AGGREGATOR_NAME, new LongSumAggregatorWithParameter(componentId));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilterCounting(AGGREGATOR_NAME));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\n\t\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tList<Tuple2<Long, Long>> expectedResult = Arrays.asList(\n\t\t\t\t\tnew Tuple2<>(1L,1L),\n\t\t\t\t\tnew Tuple2<>(2L,1L),\n\t\t\t\t\tnew Tuple2<>(3L,1L),\n\t\t\t\t\tnew Tuple2<>(4L,1L),\n\t\t\t\t\tnew Tuple2<>(5L,1L),\n\t\t\t\t\tnew Tuple2<>(6L,1L),\n\t\t\t\t\tnew Tuple2<>(7L,7L),\n\t\t\t\t\tnew Tuple2<>(8L,7L),\n\t\t\t\t\tnew Tuple2<>(9L,7L)\n\t\t\t);\n\n\t\t\t\r\n\t\t\tassertEquals(expectedResult, result);\n\n\t\t\t\r\n\t\t\tlong[] aggr_values = MinimumIdFilterCounting.aggr_value;\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tassertEquals(3, aggr_values[0]);\n\t\t\tassertEquals(4, aggr_values[1]);\n\t\t\tassertEquals(5, aggr_values[2]);\n\t\t\tassertEquals(6, aggr_values[3]);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"9bd491e05120915cbde36d4452e3982fe5d0975f","commitMessage":"@@@[FLINK-6731] [tests] Activate strict checkstyle for flink-tests\n\nThis closes #4295\n","date":"2017-07-13 06:37:47","modifiedFileCount":"185","status":"M","submitter":"Greg Hogan"}]
