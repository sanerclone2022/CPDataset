[{"authorTime":"2015-03-18 04:44:28","codes":[{"authorDate":"2015-01-27 01:52:27","commitOrder":4,"curCode":"\tprotected void testProgram() throws Exception {\n\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\n\t\tDataSet<Long> data1 = env.generateSequence(1, 100);\n\t\tDataSet<Long> data2 = env.generateSequence(1, 100);\n\t\t\n\t\tIterativeDataSet<Long> firstIteration = data1.iterate(100);\n\t\t\n\t\tDataSet<Long> firstResult = firstIteration.closeWith(firstIteration.map(new IdMapper()));\n\t\t\n\t\t\n\t\tIterativeDataSet<Long> mainIteration = data2.map(new IdMapper()).iterate(100);\n\t\t\n\t\tDataSet<Long> joined = mainIteration.join(firstResult)\n\t\t\t\t.where(new IdKeyExtractor()).equalTo(new IdKeyExtractor())\n\t\t\t\t.with(new Joiner());\n\t\t\n\t\tDataSet<Long> mainResult = mainIteration.closeWith(joined);\n\t\t\n\t\tmainResult.output(new DiscardingOutputFormat<Long>());\n\t\t\n\t\tenv.execute();\n\t}\n","date":"2015-01-28 09:25:23","endLine":56,"groupId":"40637","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProgram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/6a4220d321966d0d7a6d27c8681f94e08175d0.src","preCode":"\tprotected void testProgram() throws Exception {\n\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\n\t\tDataSet<Long> data1 = env.generateSequence(1, 100);\n\t\tDataSet<Long> data2 = env.generateSequence(1, 100);\n\t\t\n\t\tIterativeDataSet<Long> firstIteration = data1.iterate(100);\n\t\t\n\t\tDataSet<Long> firstResult = firstIteration.closeWith(firstIteration.map(new IdMapper()));\n\t\t\n\t\t\n\t\tIterativeDataSet<Long> mainIteration = data2.map(new IdMapper()).iterate(100);\n\t\t\n\t\tDataSet<Long> joined = mainIteration.join(firstResult)\n\t\t\t\t.where(new IdKeyExtractor()).equalTo(new IdKeyExtractor())\n\t\t\t\t.with(new Joiner());\n\t\t\n\t\tDataSet<Long> mainResult = mainIteration.closeWith(joined);\n\t\t\n\t\tmainResult.output(new DiscardingOutputFormat<Long>());\n\t\t\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/StaticlyNestedIterationsITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"NB"},{"authorDate":"2015-03-18 04:44:28","commitOrder":4,"curCode":"\tpublic void testBulkIterationInClosure() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\t\n\t\t\tDataSet<Long> data1 = env.generateSequence(1, 100);\n\t\t\tDataSet<Long> data2 = env.generateSequence(1, 100);\n\t\t\t\n\t\t\tIterativeDataSet<Long> firstIteration = data1.iterate(100);\n\t\t\t\n\t\t\tDataSet<Long> firstResult = firstIteration.closeWith(firstIteration.map(new IdentityMapper<Long>()));\n\t\t\t\n\t\t\t\n\t\t\tIterativeDataSet<Long> mainIteration = data2.map(new IdentityMapper<Long>()).iterate(100);\n\t\t\t\n\t\t\tDataSet<Long> joined = mainIteration.join(firstResult)\n\t\t\t\t\t.where(new IdentityKeyExtractor<Long>()).equalTo(new IdentityKeyExtractor<Long>())\n\t\t\t\t\t.with(new DummyFlatJoinFunction<Long>());\n\t\t\t\n\t\t\tDataSet<Long> mainResult = mainIteration.closeWith(joined);\n\t\t\t\n\t\t\tmainResult.print();\n\t\t\t\n\t\t\tPlan p = env.createProgramPlan();\n\t\t\t\n\t\t\t\r\n\t\t\tOptimizedPlan op = compileNoStats(p);\n\t\t\t\n\t\t\t\r\n\t\t\tnew JobGraphGenerator().compileJobGraph(op);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-03-20 17:21:14","endLine":142,"groupId":"40637","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBulkIterationInClosure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e6/5758f2908a48696d5baea339aedae91dfc414a.src","preCode":"\tpublic void testBulkIterationInClosure() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\t\n\t\t\tDataSet<Long> data1 = env.generateSequence(1, 100);\n\t\t\tDataSet<Long> data2 = env.generateSequence(1, 100);\n\t\t\t\n\t\t\tIterativeDataSet<Long> firstIteration = data1.iterate(100);\n\t\t\t\n\t\t\tDataSet<Long> firstResult = firstIteration.closeWith(firstIteration.map(new IdentityMapper<Long>()));\n\t\t\t\n\t\t\t\n\t\t\tIterativeDataSet<Long> mainIteration = data2.map(new IdentityMapper<Long>()).iterate(100);\n\t\t\t\n\t\t\tDataSet<Long> joined = mainIteration.join(firstResult)\n\t\t\t\t\t.where(new IdentityKeyExtractor<Long>()).equalTo(new IdentityKeyExtractor<Long>())\n\t\t\t\t\t.with(new DummyFlatJoinFunction<Long>());\n\t\t\t\n\t\t\tDataSet<Long> mainResult = mainIteration.closeWith(joined);\n\t\t\t\n\t\t\tmainResult.print();\n\t\t\t\n\t\t\tPlan p = env.createProgramPlan();\n\t\t\t\n\t\t\t\r\n\t\t\tOptimizedPlan op = compileNoStats(p);\n\t\t\t\n\t\t\t\r\n\t\t\tnew JobGraphGenerator().compileJobGraph(op);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-optimizer/src/test/java/org/apache/flink/optimizer/NestedIterationsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"633b0d6a9b25fd324f1aa007bbce246be304c099","commitMessage":"@@@[optimizer] Rename optimizer project to \"flink-optimizer\" (previously flink-compiler)\n","date":"2015-03-20 17:21:14","modifiedFileCount":"0","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2015-04-25 07:30:11","codes":[{"authorDate":"2015-01-27 01:52:27","commitOrder":5,"curCode":"\tprotected void testProgram() throws Exception {\n\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\n\t\tDataSet<Long> data1 = env.generateSequence(1, 100);\n\t\tDataSet<Long> data2 = env.generateSequence(1, 100);\n\t\t\n\t\tIterativeDataSet<Long> firstIteration = data1.iterate(100);\n\t\t\n\t\tDataSet<Long> firstResult = firstIteration.closeWith(firstIteration.map(new IdMapper()));\n\t\t\n\t\t\n\t\tIterativeDataSet<Long> mainIteration = data2.map(new IdMapper()).iterate(100);\n\t\t\n\t\tDataSet<Long> joined = mainIteration.join(firstResult)\n\t\t\t\t.where(new IdKeyExtractor()).equalTo(new IdKeyExtractor())\n\t\t\t\t.with(new Joiner());\n\t\t\n\t\tDataSet<Long> mainResult = mainIteration.closeWith(joined);\n\t\t\n\t\tmainResult.output(new DiscardingOutputFormat<Long>());\n\t\t\n\t\tenv.execute();\n\t}\n","date":"2015-01-28 09:25:23","endLine":56,"groupId":"101210","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProgram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/6a4220d321966d0d7a6d27c8681f94e08175d0.src","preCode":"\tprotected void testProgram() throws Exception {\n\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\n\t\tDataSet<Long> data1 = env.generateSequence(1, 100);\n\t\tDataSet<Long> data2 = env.generateSequence(1, 100);\n\t\t\n\t\tIterativeDataSet<Long> firstIteration = data1.iterate(100);\n\t\t\n\t\tDataSet<Long> firstResult = firstIteration.closeWith(firstIteration.map(new IdMapper()));\n\t\t\n\t\t\n\t\tIterativeDataSet<Long> mainIteration = data2.map(new IdMapper()).iterate(100);\n\t\t\n\t\tDataSet<Long> joined = mainIteration.join(firstResult)\n\t\t\t\t.where(new IdKeyExtractor()).equalTo(new IdKeyExtractor())\n\t\t\t\t.with(new Joiner());\n\t\t\n\t\tDataSet<Long> mainResult = mainIteration.closeWith(joined);\n\t\t\n\t\tmainResult.output(new DiscardingOutputFormat<Long>());\n\t\t\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/StaticlyNestedIterationsITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2015-04-25 07:30:11","commitOrder":5,"curCode":"\tpublic void testBulkIterationInClosure() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\t\n\t\t\tDataSet<Long> data1 = env.generateSequence(1, 100);\n\t\t\tDataSet<Long> data2 = env.generateSequence(1, 100);\n\t\t\t\n\t\t\tIterativeDataSet<Long> firstIteration = data1.iterate(100);\n\t\t\t\n\t\t\tDataSet<Long> firstResult = firstIteration.closeWith(firstIteration.map(new IdentityMapper<Long>()));\n\t\t\t\n\t\t\t\n\t\t\tIterativeDataSet<Long> mainIteration = data2.map(new IdentityMapper<Long>()).iterate(100);\n\t\t\t\n\t\t\tDataSet<Long> joined = mainIteration.join(firstResult)\n\t\t\t\t\t.where(new IdentityKeyExtractor<Long>()).equalTo(new IdentityKeyExtractor<Long>())\n\t\t\t\t\t.with(new DummyFlatJoinFunction<Long>());\n\t\t\t\n\t\t\tDataSet<Long> mainResult = mainIteration.closeWith(joined);\n\t\t\t\n\t\t\tmainResult.output(new DiscardingOutputFormat<Long>());\n\t\t\t\n\t\t\tPlan p = env.createProgramPlan();\n\t\t\t\n\t\t\t\r\n\t\t\tOptimizedPlan op = compileNoStats(p);\n\t\t\t\n\t\t\t\r\n\t\t\tnew JobGraphGenerator().compileJobGraph(op);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-05-06 05:01:47","endLine":144,"groupId":"101210","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBulkIterationInClosure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3a/5145187e4a9092bae99c2dff0a817b2e7b0ee0.src","preCode":"\tpublic void testBulkIterationInClosure() {\n\t\ttry {\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\t\t\n\t\t\tDataSet<Long> data1 = env.generateSequence(1, 100);\n\t\t\tDataSet<Long> data2 = env.generateSequence(1, 100);\n\t\t\t\n\t\t\tIterativeDataSet<Long> firstIteration = data1.iterate(100);\n\t\t\t\n\t\t\tDataSet<Long> firstResult = firstIteration.closeWith(firstIteration.map(new IdentityMapper<Long>()));\n\t\t\t\n\t\t\t\n\t\t\tIterativeDataSet<Long> mainIteration = data2.map(new IdentityMapper<Long>()).iterate(100);\n\t\t\t\n\t\t\tDataSet<Long> joined = mainIteration.join(firstResult)\n\t\t\t\t\t.where(new IdentityKeyExtractor<Long>()).equalTo(new IdentityKeyExtractor<Long>())\n\t\t\t\t\t.with(new DummyFlatJoinFunction<Long>());\n\t\t\t\n\t\t\tDataSet<Long> mainResult = mainIteration.closeWith(joined);\n\t\t\t\n\t\t\tmainResult.print();\n\t\t\t\n\t\t\tPlan p = env.createProgramPlan();\n\t\t\t\n\t\t\t\r\n\t\t\tOptimizedPlan op = compileNoStats(p);\n\t\t\t\n\t\t\t\r\n\t\t\tnew JobGraphGenerator().compileJobGraph(op);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-optimizer/src/test/java/org/apache/flink/optimizer/NestedIterationsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"bd96ba8d1bbdc494ac88b98a6469255572f4a9fc","commitMessage":"@@@[FLINK-1682] Ported optimizer unit tests from Record API to Java API\n\nThis closes #627\n","date":"2015-05-06 05:01:47","modifiedFileCount":"34","status":"M","submitter":"Fabian Hueske"}]
