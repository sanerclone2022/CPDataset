[{"authorTime":"2020-05-18 17:48:25","codes":[{"authorDate":"2020-05-18 17:48:25","commitOrder":2,"curCode":"\tpublic void testJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = Lists.newArrayList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\")\n\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","date":"2020-05-20 10:10:05","endLine":127,"groupId":"47603","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/be89e6c0b5a81db61fdf33c70e0c98aa27b89e.src","preCode":"\tpublic void testJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = Lists.newArrayList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\")\n\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"MB"},{"authorDate":"2020-05-18 17:48:25","commitOrder":2,"curCode":"\tpublic void testProject() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"',\" +\n\t\t\t\t\"  'scan.partition.column'='id',\" +\n\t\t\t\t\"  'scan.partition.num'='2',\" +\n\t\t\t\t\"  'scan.partition.lower-bound'='0',\" +\n\t\t\t\t\"  'scan.partition.upper-bound'='100'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = Lists.newArrayList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,101.1234\")\n\t\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","date":"2020-05-20 10:10:05","endLine":169,"groupId":"47603","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/be89e6c0b5a81db61fdf33c70e0c98aa27b89e.src","preCode":"\tpublic void testProject() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"',\" +\n\t\t\t\t\"  'scan.partition.column'='id',\" +\n\t\t\t\t\"  'scan.partition.num'='2',\" +\n\t\t\t\t\"  'scan.partition.lower-bound'='0',\" +\n\t\t\t\t\"  'scan.partition.upper-bound'='100'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = Lists.newArrayList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,101.1234\")\n\t\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"MB"}],"commitId":"73520ca19e76d0895c38ec956250cb588eca740c","commitMessage":"@@@[FLINK-17798][connector/jdbc] Align the behavior between the new and legacy JDBC table source\n\nThis closes #12221\n","date":"2020-05-20 10:10:05","modifiedFileCount":"4","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-06-18 11:52:35","codes":[{"authorDate":"2020-06-18 11:52:35","commitOrder":3,"curCode":"\tpublic void testJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = CollectionUtil.iteratorToList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\")\n\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","date":"2020-09-07 17:37:11","endLine":126,"groupId":"47603","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ad/5332554a5302e28bf372b17118343656ab698e.src","preCode":"\tpublic void testJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = Lists.newArrayList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\")\n\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2020-06-18 11:52:35","commitOrder":3,"curCode":"\tpublic void testProject() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"',\" +\n\t\t\t\t\"  'scan.partition.column'='id',\" +\n\t\t\t\t\"  'scan.partition.num'='2',\" +\n\t\t\t\t\"  'scan.partition.lower-bound'='0',\" +\n\t\t\t\t\"  'scan.partition.upper-bound'='100'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = CollectionUtil.iteratorToList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,101.1234\")\n\t\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","date":"2020-09-07 17:37:11","endLine":168,"groupId":"47603","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ad/5332554a5302e28bf372b17118343656ab698e.src","preCode":"\tpublic void testProject() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"',\" +\n\t\t\t\t\"  'scan.partition.column'='id',\" +\n\t\t\t\t\"  'scan.partition.num'='2',\" +\n\t\t\t\t\"  'scan.partition.lower-bound'='0',\" +\n\t\t\t\t\"  'scan.partition.upper-bound'='100'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = Lists.newArrayList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,101.1234\")\n\t\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"91d2b628bfe1a2e7beed5111a6d9a572cc6bc310","commitMessage":"@@@[hotfix][table][connector] Use CollectionUtil#iteratorToList instead of Guava Lists\n","date":"2020-09-07 17:37:11","modifiedFileCount":"18","status":"M","submitter":"godfreyhe"},{"authorTime":"2020-12-27 13:41:22","codes":[{"authorDate":"2020-12-27 13:41:22","commitOrder":4,"curCode":"\tpublic void testJdbcSource() throws Exception {\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = CollectionUtil.iteratorToList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\")\n\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","date":"2020-12-27 13:41:22","endLine":133,"groupId":"47603","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/22c15c4fec6ca44076ce8e0dcec10ba0aa7998.src","preCode":"\tpublic void testJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = CollectionUtil.iteratorToList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\")\n\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-12-27 13:41:22","commitOrder":4,"curCode":"\tpublic void testProject() throws Exception {\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"',\" +\n\t\t\t\t\"  'scan.partition.column'='id',\" +\n\t\t\t\t\"  'scan.partition.num'='2',\" +\n\t\t\t\t\"  'scan.partition.lower-bound'='0',\" +\n\t\t\t\t\"  'scan.partition.upper-bound'='100'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = CollectionUtil.iteratorToList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,101.1234\")\n\t\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","date":"2020-12-27 13:41:22","endLine":168,"groupId":"47603","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/22c15c4fec6ca44076ce8e0dcec10ba0aa7998.src","preCode":"\tpublic void testProject() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"',\" +\n\t\t\t\t\"  'scan.partition.column'='id',\" +\n\t\t\t\t\"  'scan.partition.num'='2',\" +\n\t\t\t\t\"  'scan.partition.lower-bound'='0',\" +\n\t\t\t\t\"  'scan.partition.upper-bound'='100'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE).collect();\n\t\tList<String> result = CollectionUtil.iteratorToList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\t\tList<String> expected =\n\t\t\tStream.of(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,101.1234\")\n\t\t\t\t.sorted().collect(Collectors.toList());\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"a859e2cca7961cc966cf0a3990e821a62fb52654","commitMessage":"@@@[FLINK-19650][jdbc][table] Support limit push down for the JDBC connector\n\nThis closes #13800","date":"2020-12-27 13:41:22","modifiedFileCount":"7","status":"M","submitter":"Shengkai"},{"authorTime":"2020-12-18 18:32:55","codes":[{"authorDate":"2020-12-18 18:32:55","commitOrder":5,"curCode":"    public void testJdbcSource() throws Exception {\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"double_col DOUBLE,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector'='jdbc',\"\n                        + \"  'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'table-name'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        Iterator<Row> collected = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n        List<String> expected =\n                Stream.of(\n                                \"+I[1, 2020-01-01T15:35:00.123456, 2020-01-01T15:35:00.123456789, 15:35, 1.175E-37, 1.79769E308, 100.1234]\",\n                                \"+I[2, 2020-01-01T15:36:01.123456, 2020-01-01T15:36:01.123456789, 15:36:01, -1.175E-37, -1.79769E308, 101.1234]\")\n                        .sorted()\n                        .collect(Collectors.toList());\n        assertEquals(expected, result);\n    }\n","date":"2021-01-08 00:17:30","endLine":147,"groupId":"10449","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/77/2059327384aa821258c483b92c5bc53be8cbad.src","preCode":"    public void testJdbcSource() throws Exception {\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"double_col DOUBLE,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector'='jdbc',\"\n                        + \"  'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'table-name'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        Iterator<Row> collected = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n        List<String> expected =\n                Stream.of(\n                                \"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n                                \"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\")\n                        .sorted()\n                        .collect(Collectors.toList());\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-12-18 18:32:55","commitOrder":5,"curCode":"    public void testProject() throws Exception {\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"double_col DOUBLE,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector'='jdbc',\"\n                        + \"  'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'table-name'='\"\n                        + INPUT_TABLE\n                        + \"',\"\n                        + \"  'scan.partition.column'='id',\"\n                        + \"  'scan.partition.num'='2',\"\n                        + \"  'scan.partition.lower-bound'='0',\"\n                        + \"  'scan.partition.upper-bound'='100'\"\n                        + \")\");\n\n        Iterator<Row> collected =\n                tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE)\n                        .collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n        List<String> expected =\n                Stream.of(\n                                \"+I[1, 2020-01-01T15:35:00.123456, 100.1234]\",\n                                \"+I[2, 2020-01-01T15:36:01.123456, 101.1234]\")\n                        .sorted()\n                        .collect(Collectors.toList());\n        assertEquals(expected, result);\n    }\n","date":"2021-01-08 00:17:30","endLine":191,"groupId":"10449","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/77/2059327384aa821258c483b92c5bc53be8cbad.src","preCode":"    public void testProject() throws Exception {\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"double_col DOUBLE,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector'='jdbc',\"\n                        + \"  'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'table-name'='\"\n                        + INPUT_TABLE\n                        + \"',\"\n                        + \"  'scan.partition.column'='id',\"\n                        + \"  'scan.partition.num'='2',\"\n                        + \"  'scan.partition.lower-bound'='0',\"\n                        + \"  'scan.partition.upper-bound'='100'\"\n                        + \")\");\n\n        Iterator<Row> collected =\n                tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE)\n                        .collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n        List<String> expected =\n                Stream.of(\n                                \"1,2020-01-01T15:35:00.123456,100.1234\",\n                                \"2,2020-01-01T15:36:01.123456,101.1234\")\n                        .sorted()\n                        .collect(Collectors.toList());\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"73cdd3d0d9f6a807b3e47c09eef7983c9aa180c7","commitMessage":"@@@[FLINK-18090] Update tests for new Row.toString\n\nAll tests in modules apart from the Blink planner/runtime\nmodule have been updated.\n\nOtherwise we use a JUnit rule to make the migration of\nthe remaining tests incremental.\n\nThis closes #14568.\n","date":"2021-01-08 00:17:30","modifiedFileCount":"34","status":"M","submitter":"Timo Walther"}]
