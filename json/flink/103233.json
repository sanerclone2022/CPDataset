[{"authorTime":"2016-02-04 00:44:07","codes":[{"authorDate":"2016-02-04 00:44:07","commitOrder":1,"curCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class, null);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2016-02-04 03:28:41","endLine":70,"groupId":"3959","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/72/e02c21b560060b3c938926d8eba3e3e259102f.src","preCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class, null);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2016-02-04 00:44:07","commitOrder":1,"curCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2016-02-04 03:28:41","endLine":123,"groupId":"9958","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testListStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/72/e02c21b560060b3c938926d8eba3e3e259102f.src","preCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"180cd3f608731208f5b5ed71e3eb80ae5ccdf5fc","commitMessage":"@@@[FLINK-3312] Add simple constructors for State Descriptors\n","date":"2016-02-04 03:28:41","modifiedFileCount":"37","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2016-08-03 00:09:14","codes":[{"authorDate":"2016-08-03 00:09:14","commitOrder":2,"curCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class, null);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2016-08-03 02:54:17","endLine":74,"groupId":"3959","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/30/ebb20f4b8e1b9c462387e72f74214d83c1f89b.src","preCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class, null);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2016-08-03 00:09:14","commitOrder":2,"curCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2016-08-03 02:54:17","endLine":127,"groupId":"9958","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testListStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/30/ebb20f4b8e1b9c462387e72f74214d83c1f89b.src","preCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"d5a06b4d634a54079a2a484a0c619e02cbaf2912","commitMessage":"@@@[FLINK-4307] [streaming API] Restore ListState behavior for user-facing ListStates\n","date":"2016-08-03 02:54:17","modifiedFileCount":"2","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2016-08-03 00:09:14","codes":[{"authorDate":"2017-01-11 19:14:13","commitOrder":3,"curCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2017-01-13 18:30:57","endLine":89,"groupId":"9958","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/91726cecc3f3cbaf15c231337332000799383c.src","preCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class, null);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2016-08-03 00:09:14","commitOrder":3,"curCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2016-08-03 02:54:17","endLine":127,"groupId":"9958","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testListStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/30/ebb20f4b8e1b9c462387e72f74214d83c1f89b.src","preCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"7a2d3bea96d262de5cb963003b92833b27346af0","commitMessage":"@@@[FLINK-5155] Deprecate ValueStateDescriptor constructors with default value\n","date":"2017-01-13 18:30:57","modifiedFileCount":"19","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2017-02-14 13:39:30","codes":[{"authorDate":"2017-01-11 19:14:13","commitOrder":4,"curCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2017-01-13 18:30:57","endLine":89,"groupId":"9958","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/91726cecc3f3cbaf15c231337332000799383c.src","preCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\t\t\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\t\t\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\t\t\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getState(descr);\n\t\t\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\t\t\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2017-02-14 13:39:30","commitOrder":4,"curCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tListStateDescriptor<?> descrIntercepted = (ListStateDescriptor<?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof ListSerializer);\n\n\t\tTypeSerializer<?> elementSerializer = descrIntercepted.getElementSerializer();\n\t\tassertTrue(elementSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) elementSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2017-02-15 19:21:07","endLine":175,"groupId":"30808","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testListStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/29/4b8da74b7c33619918a0d756ec7d1a8f229c1e.src","preCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"d47446cafffe0d34d89488f6eb860aa139ceb3f1","commitMessage":"@@@[FLINK-5790] [core] Use list types when ListStateDescriptor extends StateDescriptor\n\nThis closes #3305\n","date":"2017-02-15 19:21:07","modifiedFileCount":"14","status":"M","submitter":"xiaogang.sxg"},{"authorTime":"2020-03-12 00:53:38","codes":[{"authorDate":"2020-03-12 00:53:38","commitOrder":5,"curCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = createRuntimeContext(descriptorCapture, config);\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2020-03-25 22:06:35","endLine":106,"groupId":"103233","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/2390c90ed7a07329142bf552dbf26ec0a85aca.src","preCode":"\tpublic void testValueStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tValueStateDescriptor<TaskInfo> descr = new ValueStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getState(descr);\n\n\t\tStateDescriptor<?, ?> descrIntercepted = (StateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) serializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-03-12 00:53:38","commitOrder":5,"curCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = createRuntimeContext(descriptorCapture, config);\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tListStateDescriptor<?> descrIntercepted = (ListStateDescriptor<?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof ListSerializer);\n\n\t\tTypeSerializer<?> elementSerializer = descrIntercepted.getElementSerializer();\n\t\tassertTrue(elementSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) elementSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2020-03-25 22:06:35","endLine":207,"groupId":"103233","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testListStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/2390c90ed7a07329142bf552dbf26ec0a85aca.src","preCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tListStateDescriptor<?> descrIntercepted = (ListStateDescriptor<?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof ListSerializer);\n\n\t\tTypeSerializer<?> elementSerializer = descrIntercepted.getElementSerializer();\n\t\tassertTrue(elementSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) elementSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"239088e603baede4fbbd05f75655c54bb3750fcb","commitMessage":"@@@[FLINK-16316][operators] Cut dependency between StreamingRuntimeContext and AbstractStreamOperator\n\nThis simplifies dependencies between those two classes and will allow for StreamingRuntimeContext\nto be re-used in new replacement for AbstractStreamOperator.\n","date":"2020-03-25 22:06:35","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"}]
