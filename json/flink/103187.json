[{"authorTime":"2018-07-09 18:02:24","codes":[{"authorDate":"2018-07-09 18:02:24","commitOrder":1,"curCode":"\tpublic void testContextCorrectLeftTimestamp() throws Exception {\n\n\t\tIntervalJoinOperator<String, TestElem, TestElem, Tuple2<TestElem, TestElem>> op =\n\t\t\tnew IntervalJoinOperator<>(\n\t\t\t\t-1,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tnew ProcessJoinFunction<TestElem, TestElem, Tuple2<TestElem, TestElem>>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(\n\t\t\t\t\t\tTestElem left,\n\t\t\t\t\t\tTestElem right,\n\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\tCollector<Tuple2<TestElem, TestElem>> out) throws Exception {\n\t\t\t\t\t\tAssert.assertEquals(left.ts, ctx.getLeftTimestamp());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\ttry (TestHarness testHarness = new TestHarness(\n\t\t\top,\n\t\t\t(elem) -> elem.key,\n\t\t\t(elem) -> elem.key,\n\t\t\tTypeInformation.of(String.class)\n\t\t)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\tprocessElementsAndWatermarks(testHarness);\n\t\t}\n\t}\n","date":"2018-07-13 03:03:26","endLine":471,"groupId":"8356","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testContextCorrectLeftTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ee/3f4d8fc125be39fc80e366de0e6322809b4503.src","preCode":"\tpublic void testContextCorrectLeftTimestamp() throws Exception {\n\n\t\tIntervalJoinOperator<String, TestElem, TestElem, Tuple2<TestElem, TestElem>> op =\n\t\t\tnew IntervalJoinOperator<>(\n\t\t\t\t-1,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tnew ProcessJoinFunction<TestElem, TestElem, Tuple2<TestElem, TestElem>>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(\n\t\t\t\t\t\tTestElem left,\n\t\t\t\t\t\tTestElem right,\n\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\tCollector<Tuple2<TestElem, TestElem>> out) throws Exception {\n\t\t\t\t\t\tAssert.assertEquals(left.ts, ctx.getLeftTimestamp());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\ttry (TestHarness testHarness = new TestHarness(\n\t\t\top,\n\t\t\t(elem) -> elem.key,\n\t\t\t(elem) -> elem.key,\n\t\t\tTypeInformation.of(String.class)\n\t\t)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\tprocessElementsAndWatermarks(testHarness);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/IntervalJoinOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"B"},{"authorDate":"2018-07-09 18:02:24","commitOrder":1,"curCode":"\tpublic void testReturnsCorrectTimestamp() throws Exception {\n\t\tIntervalJoinOperator<String, TestElem, TestElem, Tuple2<TestElem, TestElem>> op =\n\t\t\tnew IntervalJoinOperator<>(\n\t\t\t\t-1,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tnew ProcessJoinFunction<TestElem, TestElem, Tuple2<TestElem, TestElem>>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(\n\t\t\t\t\t\tTestElem left,\n\t\t\t\t\t\tTestElem right,\n\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\tCollector<Tuple2<TestElem, TestElem>> out) throws Exception {\n\t\t\t\t\t\tAssert.assertEquals(left.ts, ctx.getTimestamp());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\ttry (TestHarness testHarness = new TestHarness(\n\t\t\top,\n\t\t\t(elem) -> elem.key,\n\t\t\t(elem) -> elem.key,\n\t\t\tTypeInformation.of(String.class)\n\t\t)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\tprocessElementsAndWatermarks(testHarness);\n\t\t}\n\t}\n","date":"2018-07-13 03:03:26","endLine":507,"groupId":"8356","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReturnsCorrectTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ee/3f4d8fc125be39fc80e366de0e6322809b4503.src","preCode":"\tpublic void testReturnsCorrectTimestamp() throws Exception {\n\t\tIntervalJoinOperator<String, TestElem, TestElem, Tuple2<TestElem, TestElem>> op =\n\t\t\tnew IntervalJoinOperator<>(\n\t\t\t\t-1,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tnew ProcessJoinFunction<TestElem, TestElem, Tuple2<TestElem, TestElem>>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(\n\t\t\t\t\t\tTestElem left,\n\t\t\t\t\t\tTestElem right,\n\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\tCollector<Tuple2<TestElem, TestElem>> out) throws Exception {\n\t\t\t\t\t\tAssert.assertEquals(left.ts, ctx.getTimestamp());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\ttry (TestHarness testHarness = new TestHarness(\n\t\t\top,\n\t\t\t(elem) -> elem.key,\n\t\t\t(elem) -> elem.key,\n\t\t\tTypeInformation.of(String.class)\n\t\t)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\tprocessElementsAndWatermarks(testHarness);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/IntervalJoinOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"B"}],"commitId":"42ada8ad9ca28f94d0a0355658330198bbc2b577","commitMessage":"@@@[FLINK-8480][DataStream] Add APIs for Interval Joins.\n\nThis adds the Java and Scala API for performing an IntervalJoin.\nIn jave this will look like:\n\nExample:\n\n```java\nkeyedStream.intervalJoin(otherKeyedStream)\n    .between(Time.milliseconds(-2).  Time.milliseconds(2)) // lower and upper bound\n    .upperBoundExclusive(true) // optional\n    .lowerBoundExclusive(true) // optional\n    .process(new IntervalJoinFunction() {...});\n```\n\nThis closes #5482.\n","date":"2018-07-13 03:03:26","modifiedFileCount":"1","status":"B","submitter":"Florian Schmidt"},{"authorTime":"2018-07-29 19:54:26","codes":[{"authorDate":"2018-07-09 18:02:24","commitOrder":2,"curCode":"\tpublic void testContextCorrectLeftTimestamp() throws Exception {\n\n\t\tIntervalJoinOperator<String, TestElem, TestElem, Tuple2<TestElem, TestElem>> op =\n\t\t\tnew IntervalJoinOperator<>(\n\t\t\t\t-1,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tnew ProcessJoinFunction<TestElem, TestElem, Tuple2<TestElem, TestElem>>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(\n\t\t\t\t\t\tTestElem left,\n\t\t\t\t\t\tTestElem right,\n\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\tCollector<Tuple2<TestElem, TestElem>> out) throws Exception {\n\t\t\t\t\t\tAssert.assertEquals(left.ts, ctx.getLeftTimestamp());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\ttry (TestHarness testHarness = new TestHarness(\n\t\t\top,\n\t\t\t(elem) -> elem.key,\n\t\t\t(elem) -> elem.key,\n\t\t\tTypeInformation.of(String.class)\n\t\t)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\tprocessElementsAndWatermarks(testHarness);\n\t\t}\n\t}\n","date":"2018-07-13 03:03:26","endLine":471,"groupId":"103187","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testContextCorrectLeftTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ee/3f4d8fc125be39fc80e366de0e6322809b4503.src","preCode":"\tpublic void testContextCorrectLeftTimestamp() throws Exception {\n\n\t\tIntervalJoinOperator<String, TestElem, TestElem, Tuple2<TestElem, TestElem>> op =\n\t\t\tnew IntervalJoinOperator<>(\n\t\t\t\t-1,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tnew ProcessJoinFunction<TestElem, TestElem, Tuple2<TestElem, TestElem>>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(\n\t\t\t\t\t\tTestElem left,\n\t\t\t\t\t\tTestElem right,\n\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\tCollector<Tuple2<TestElem, TestElem>> out) throws Exception {\n\t\t\t\t\t\tAssert.assertEquals(left.ts, ctx.getLeftTimestamp());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\ttry (TestHarness testHarness = new TestHarness(\n\t\t\top,\n\t\t\t(elem) -> elem.key,\n\t\t\t(elem) -> elem.key,\n\t\t\tTypeInformation.of(String.class)\n\t\t)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\tprocessElementsAndWatermarks(testHarness);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/IntervalJoinOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"N"},{"authorDate":"2018-07-29 19:54:26","commitOrder":2,"curCode":"\tpublic void testReturnsCorrectTimestamp() throws Exception {\n\t\tIntervalJoinOperator<String, TestElem, TestElem, Tuple2<TestElem, TestElem>> op =\n\t\t\tnew IntervalJoinOperator<>(\n\t\t\t\t-1,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tnew ProcessJoinFunction<TestElem, TestElem, Tuple2<TestElem, TestElem>>() {\n\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(\n\t\t\t\t\t\tTestElem left,\n\t\t\t\t\t\tTestElem right,\n\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\tCollector<Tuple2<TestElem, TestElem>> out) throws Exception {\n\t\t\t\t\t\tAssert.assertEquals(Math.max(left.ts, right.ts), ctx.getTimestamp());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\ttry (TestHarness testHarness = new TestHarness(\n\t\t\top,\n\t\t\t(elem) -> elem.key,\n\t\t\t(elem) -> elem.key,\n\t\t\tTypeInformation.of(String.class)\n\t\t)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\tprocessElementsAndWatermarks(testHarness);\n\t\t}\n\t}\n","date":"2018-07-30 02:34:56","endLine":510,"groupId":"103187","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReturnsCorrectTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/f514b98da38b15942a5355cde035d37626aa10.src","preCode":"\tpublic void testReturnsCorrectTimestamp() throws Exception {\n\t\tIntervalJoinOperator<String, TestElem, TestElem, Tuple2<TestElem, TestElem>> op =\n\t\t\tnew IntervalJoinOperator<>(\n\t\t\t\t-1,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tTestElem.serializer(),\n\t\t\t\tnew ProcessJoinFunction<TestElem, TestElem, Tuple2<TestElem, TestElem>>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(\n\t\t\t\t\t\tTestElem left,\n\t\t\t\t\t\tTestElem right,\n\t\t\t\t\t\tContext ctx,\n\t\t\t\t\t\tCollector<Tuple2<TestElem, TestElem>> out) throws Exception {\n\t\t\t\t\t\tAssert.assertEquals(left.ts, ctx.getTimestamp());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\ttry (TestHarness testHarness = new TestHarness(\n\t\t\top,\n\t\t\t(elem) -> elem.key,\n\t\t\t(elem) -> elem.key,\n\t\t\tTypeInformation.of(String.class)\n\t\t)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\tprocessElementsAndWatermarks(testHarness);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/IntervalJoinOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"}],"commitId":"dc780303e1e4420033949049e4d9368a6d230d88","commitMessage":"@@@[FLINK-9994][DataStream API] IntervalJoinOp Context#getTimestamp() returns max timestamp.\n\nThis closes #6449.\n","date":"2018-07-30 02:34:56","modifiedFileCount":"2","status":"M","submitter":"kkloudas"}]
