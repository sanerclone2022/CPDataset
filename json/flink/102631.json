[{"authorTime":"2016-09-07 19:51:53","codes":[{"authorDate":"2015-12-16 00:37:48","commitOrder":2,"curCode":"\tpublic void testLateMerging() throws Exception {\n\t\tMergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)));\n\n\t\tTestingMergeFunction mergeFunction = new TestingMergeFunction();\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.getStateWindow(new TimeWindow(0, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)));\n\n\t\t\r\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(8, 10), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 13), mergeFunction.mergeTarget());\n\t\tassertThat(mergeFunction.stateWindow(), anyOf(is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergeSources(), containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13)));\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(10, 13)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8))));\n\t\tassertThat(mergeFunction.mergedStateWindows(), not(hasItem(mergeFunction.mergeTarget())));\n\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.getStateWindow(new TimeWindow(0, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(8, 10), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(5, 13)), anyOf(is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\n\t\t\r\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(3, 5), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(0, 13), mergeFunction.mergeTarget());\n\t\tassertThat(mergeFunction.stateWindow(), anyOf(is(new TimeWindow(0, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergeSources(), containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 13)));\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergedStateWindows(), not(hasItem(mergeFunction.mergeTarget())));\n\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(0, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t}\n","date":"2016-04-05 23:18:58","endLine":211,"groupId":"32480","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLateMerging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cf/90f8ae478c16b3300b1971285effea1778db71.src","preCode":"\tpublic void testLateMerging() throws Exception {\n\t\tMergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)));\n\n\t\tTestingMergeFunction mergeFunction = new TestingMergeFunction();\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.getStateWindow(new TimeWindow(0, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)));\n\n\t\t\r\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(8, 10), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 13), mergeFunction.mergeTarget());\n\t\tassertThat(mergeFunction.stateWindow(), anyOf(is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergeSources(), containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13)));\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(10, 13)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8))));\n\t\tassertThat(mergeFunction.mergedStateWindows(), not(hasItem(mergeFunction.mergeTarget())));\n\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.getStateWindow(new TimeWindow(0, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(8, 10), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(5, 13)), anyOf(is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\n\t\t\r\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(3, 5), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(0, 13), mergeFunction.mergeTarget());\n\t\tassertThat(mergeFunction.stateWindow(), anyOf(is(new TimeWindow(0, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergeSources(), containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 13)));\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergedStateWindows(), not(hasItem(mergeFunction.mergeTarget())));\n\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(0, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/MergingWindowSetTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"NB"},{"authorDate":"2016-09-07 19:51:53","commitOrder":2,"curCode":"\tpublic void testMergeLargeWindowCoveringMultipleWindows() throws Exception {\n\t\tMergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)));\n\n\t\tTestingMergeFunction mergeFunction = new TestingMergeFunction();\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)));\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))));\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\n\t}\n","date":"2016-09-16 01:31:39","endLine":269,"groupId":"32480","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeLargeWindowCoveringMultipleWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e2/cb6c8ba25ae5f438afd658479b8b1c26c736dc.src","preCode":"\tpublic void testMergeLargeWindowCoveringMultipleWindows() throws Exception {\n\t\tMergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)));\n\n\t\tTestingMergeFunction mergeFunction = new TestingMergeFunction();\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)));\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))));\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/MergingWindowSetTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"7143a24542fa67b905258be841e5dde32016a687","commitMessage":"@@@[FLINK-4589] [DataStream API] Fix Merging of Covering Window in MergingWindowSet\n\nThis also adds two new test cases for that problem.\n\nThis closes #2476\n","date":"2016-09-16 01:31:39","modifiedFileCount":"2","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2016-10-21 23:55:53","codes":[{"authorDate":"2016-10-21 23:55:53","commitOrder":3,"curCode":"\tpublic void testLateMerging() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class);\n\n\t\tMergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState);\n\n\t\tTestingMergeFunction mergeFunction = new TestingMergeFunction();\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.getStateWindow(new TimeWindow(0, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)));\n\n\t\t\r\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(8, 10), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 13), mergeFunction.mergeTarget());\n\t\tassertThat(mergeFunction.stateWindow(), anyOf(is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergeSources(), containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13)));\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(10, 13)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8))));\n\t\tassertThat(mergeFunction.mergedStateWindows(), not(hasItem(mergeFunction.mergeTarget())));\n\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.getStateWindow(new TimeWindow(0, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(8, 10), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(5, 13)), anyOf(is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\n\t\t\r\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(3, 5), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(0, 13), mergeFunction.mergeTarget());\n\t\tassertThat(mergeFunction.stateWindow(), anyOf(is(new TimeWindow(0, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergeSources(), containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 13)));\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergedStateWindows(), not(hasItem(mergeFunction.mergeTarget())));\n\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(0, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t}\n","date":"2016-11-01 21:02:54","endLine":219,"groupId":"102631","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLateMerging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7c/1fa931df3398b36450c2eb185e474b38b4708b.src","preCode":"\tpublic void testLateMerging() throws Exception {\n\t\tMergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)));\n\n\t\tTestingMergeFunction mergeFunction = new TestingMergeFunction();\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.addWindow(new TimeWindow(0, 3), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.getStateWindow(new TimeWindow(0, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)));\n\n\t\t\r\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(8, 10), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 13), mergeFunction.mergeTarget());\n\t\tassertThat(mergeFunction.stateWindow(), anyOf(is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergeSources(), containsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13)));\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(10, 13)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8))));\n\t\tassertThat(mergeFunction.mergedStateWindows(), not(hasItem(mergeFunction.mergeTarget())));\n\n\t\tassertEquals(new TimeWindow(0, 3), windowSet.getStateWindow(new TimeWindow(0, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(8, 10), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(5, 13)), anyOf(is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\n\t\t\r\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(3, 5), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(0, 13), mergeFunction.mergeTarget());\n\t\tassertThat(mergeFunction.stateWindow(), anyOf(is(new TimeWindow(0, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergeSources(), containsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 13)));\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(10, 13))));\n\t\tassertThat(mergeFunction.mergedStateWindows(), not(hasItem(mergeFunction.mergeTarget())));\n\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(0, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/MergingWindowSetTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"},{"authorDate":"2016-10-21 23:55:53","commitOrder":3,"curCode":"\tpublic void testMergeLargeWindowCoveringMultipleWindows() throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tListState<Tuple2<TimeWindow, TimeWindow>> mockState = mock(ListState.class);\n\n\t\tMergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)), mockState);\n\n\t\tTestingMergeFunction mergeFunction = new TestingMergeFunction();\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)));\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))));\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\t}\n","date":"2016-11-01 21:02:54","endLine":287,"groupId":"102631","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeLargeWindowCoveringMultipleWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7c/1fa931df3398b36450c2eb185e474b38b4708b.src","preCode":"\tpublic void testMergeLargeWindowCoveringMultipleWindows() throws Exception {\n\t\tMergingWindowSet<TimeWindow> windowSet = new MergingWindowSet<>(EventTimeSessionWindows.withGap(Time.milliseconds(3)));\n\n\t\tTestingMergeFunction mergeFunction = new TestingMergeFunction();\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(1, 3), windowSet.addWindow(new TimeWindow(1, 3), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(1, 3), windowSet.getStateWindow(new TimeWindow(1, 3)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.addWindow(new TimeWindow(5, 8), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(5, 8), windowSet.getStateWindow(new TimeWindow(5, 8)));\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.addWindow(new TimeWindow(10, 13), mergeFunction));\n\t\tassertFalse(mergeFunction.hasMerged());\n\t\tassertEquals(new TimeWindow(10, 13), windowSet.getStateWindow(new TimeWindow(10, 13)));\n\n\t\t\r\n\n\t\tmergeFunction.reset();\n\t\tassertEquals(new TimeWindow(0, 13), windowSet.addWindow(new TimeWindow(0, 13), mergeFunction));\n\t\tassertTrue(mergeFunction.hasMerged());\n\t\tassertThat(mergeFunction.mergedStateWindows(), anyOf(\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(5, 8)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(0, 3), new TimeWindow(10, 13)),\n\t\t\t\tcontainsInAnyOrder(new TimeWindow(5, 8), new TimeWindow(10, 13))));\n\t\tassertThat(windowSet.getStateWindow(new TimeWindow(0, 13)), anyOf(is(new TimeWindow(1, 3)), is(new TimeWindow(5, 8)), is(new TimeWindow(10, 13))));\n\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/MergingWindowSetTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"ca68d2e074eee66066377c3ebf69c0e15e9956d0","commitMessage":"@@@[FLINK-4884] Eagerly Store MergingWindowSet in State in WindowOperator\n","date":"2016-11-01 21:02:54","modifiedFileCount":"4","status":"M","submitter":"Aljoscha Krettek"}]
