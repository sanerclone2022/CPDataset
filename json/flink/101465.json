[{"authorTime":"2018-07-09 18:02:24","codes":[{"authorDate":"2018-07-09 18:02:24","commitOrder":1,"curCode":"\tpublic void testFailsWithoutUpperBound() {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(Tuple2.of(\"1\", 1));\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(Tuple2.of(\"1\", 1));\n\n\t\tstreamOne\n\t\t\t.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(Time.milliseconds(0), null);\n\t}\n","date":"2018-07-13 03:03:26","endLine":266,"groupId":"47341","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailsWithoutUpperBound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/9fe7ba90d4697ee1dfecfc59b4b607642ed285.src","preCode":"\tpublic void testFailsWithoutUpperBound() {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(Tuple2.of(\"1\", 1));\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(Tuple2.of(\"1\", 1));\n\n\t\tstreamOne\n\t\t\t.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(Time.milliseconds(0), null);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IntervalJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"},{"authorDate":"2018-07-09 18:02:24","commitOrder":1,"curCode":"\tpublic void testFailsWithoutLowerBound() {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(Tuple2.of(\"1\", 1));\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(Tuple2.of(\"1\", 1));\n\n\t\tstreamOne\n\t\t\t.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(null, Time.milliseconds(1));\n\t}\n","date":"2018-07-13 03:03:26","endLine":281,"groupId":"47341","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailsWithoutLowerBound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/9fe7ba90d4697ee1dfecfc59b4b607642ed285.src","preCode":"\tpublic void testFailsWithoutLowerBound() {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(Tuple2.of(\"1\", 1));\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(Tuple2.of(\"1\", 1));\n\n\t\tstreamOne\n\t\t\t.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(null, Time.milliseconds(1));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IntervalJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"}],"commitId":"42ada8ad9ca28f94d0a0355658330198bbc2b577","commitMessage":"@@@[FLINK-8480][DataStream] Add APIs for Interval Joins.\n\nThis adds the Java and Scala API for performing an IntervalJoin.\nIn jave this will look like:\n\nExample:\n\n```java\nkeyedStream.intervalJoin(otherKeyedStream)\n    .between(Time.milliseconds(-2).  Time.milliseconds(2)) // lower and upper bound\n    .upperBoundExclusive(true) // optional\n    .lowerBoundExclusive(true) // optional\n    .process(new IntervalJoinFunction() {...});\n```\n\nThis closes #5482.\n","date":"2018-07-13 03:03:26","modifiedFileCount":"1","status":"B","submitter":"Florian Schmidt"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void testFailsWithoutUpperBound() {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(Tuple2.of(\"1\", 1));\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(Tuple2.of(\"1\", 1));\n\n\t\tstreamOne\n\t\t\t.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(Time.milliseconds(0), null);\n\t}\n","date":"2020-10-01 23:03:45","endLine":262,"groupId":"101465","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailsWithoutUpperBound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/a01068df6b8f947d6e8025ea838674eb3137fe.src","preCode":"\tpublic void testFailsWithoutUpperBound() {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(Tuple2.of(\"1\", 1));\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(Tuple2.of(\"1\", 1));\n\n\t\tstreamOne\n\t\t\t.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(Time.milliseconds(0), null);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IntervalJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void testFailsWithoutLowerBound() {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(Tuple2.of(\"1\", 1));\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(Tuple2.of(\"1\", 1));\n\n\t\tstreamOne\n\t\t\t.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(null, Time.milliseconds(1));\n\t}\n","date":"2020-10-01 23:03:45","endLine":276,"groupId":"101465","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailsWithoutLowerBound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/a01068df6b8f947d6e8025ea838674eb3137fe.src","preCode":"\tpublic void testFailsWithoutLowerBound() {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(Tuple2.of(\"1\", 1));\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(Tuple2.of(\"1\", 1));\n\n\t\tstreamOne\n\t\t\t.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(null, Time.milliseconds(1));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IntervalJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
