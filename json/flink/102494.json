[{"authorTime":"2016-11-03 05:34:59","codes":[{"authorDate":"2016-11-03 05:34:59","commitOrder":1,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>();\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2016-11-09 04:15:34","endLine":113,"groupId":"38511","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/828f8de444b32445df5f6df6751232366705e5.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>();\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2016-11-03 05:34:59","commitOrder":1,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>();\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2016-11-09 04:15:34","endLine":157,"groupId":"38511","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/828f8de444b32445df5f6df6751232366705e5.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>();\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"48a48139172e86f548f3b2f1564bdc948c3fe76a","commitMessage":"@@@[FLINK-4985] [checkpointing] Report canceled / declined checkpoints to the Checkpoint Coordinator\n","date":"2016-11-09 04:15:34","modifiedFileCount":"23","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2016-11-14 10:53:18","codes":[{"authorDate":"2016-11-14 10:53:18","commitOrder":2,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>();\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2017-02-10 21:20:42","endLine":113,"groupId":"38511","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/d4aaa0838519ecfc24219ff3801bd9e1d73d36.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>();\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2016-11-14 10:53:18","commitOrder":2,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>();\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2017-02-10 21:20:42","endLine":158,"groupId":"38511","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/d4aaa0838519ecfc24219ff3801bd9e1d73d36.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>();\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"66305135bcfe0841fdc9d26fdc0d8f373fa58b62","commitMessage":"@@@[FLINK-5017] [streaming] Introduce StreamStatus to facilitate idle sources\n\nThis commit is the first part of making idle streaming sources in Flink\npossible. It introduces a new element.  StreamStatus.  that flows with\nother records in streams. StreamStatus elements are generated at the\nsources.  and affect how operators advance their watermarks with the\npresence of idle sources.\n\nPrior to this commit.  when advancing watermarks at downstream operators. \nthe new min watermark is found by simply determining if the min\nwatermark across all input channels has advanced. This resulted in\nwatermark-stalling downstream operators when there are idle sources.\nWith this change.  operators can now mark input channels to be idle.  and\nignore them when advancing their watermark.\n\nThis commit also includes refactoring of previous watermark forwarding\nlogic into a single class.  StatusWatermarkValve. OneInputStreamTasks. \nTwoInputStreamTasks.  and AbstractStreamOperator use valves to help them\ndetermine how watermarks and stream statuses are forwarded.\n","date":"2017-02-10 21:20:42","modifiedFileCount":"23","status":"M","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2017-06-27 00:07:59","codes":[{"authorDate":"2017-06-27 00:07:59","commitOrder":3,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>();\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2017-08-15 20:56:54","endLine":120,"groupId":"38511","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/bdc054b9340b45025c60916d4d3dd3b3bddf40.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>();\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2017-06-27 00:07:59","commitOrder":3,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>();\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2017-08-15 20:56:54","endLine":165,"groupId":"38511","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/bdc054b9340b45025c60916d4d3dd3b3bddf40.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>();\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"b71154a734ea9f4489dffe1be6761efbb90cff41","commitMessage":"@@@[FLINK-7213] Introduce state management by OperatorID in TaskManager\n","date":"2017-08-15 20:56:54","modifiedFileCount":"61","status":"M","submitter":"Stefan Richter"},{"authorTime":"2017-03-15 11:13:41","codes":[{"authorDate":"2017-03-15 11:13:41","commitOrder":4,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-01-10 01:30:59","endLine":125,"groupId":"38511","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6b/d4acc28b1eba7cc3d2e5c956fe71574d183f70.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>();\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2017-03-15 11:13:41","commitOrder":4,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-01-10 01:30:59","endLine":169,"groupId":"38511","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6b/d4acc28b1eba7cc3d2e5c956fe71574d183f70.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>();\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\ttask,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"6033de01ae620ebc9735c552ce85ccd1687793d7","commitMessage":"@@@[FLINK-5982] [runtime] Refactor AbstractInvokable and StatefulTask to accept Environment and State in the constructor.\n\nThis is the first steo towards implementing an RAII pattern for all task runtime classes.\n\nThis closes #3633\n","date":"2018-01-10 01:30:59","modifiedFileCount":"74","status":"M","submitter":"Tony Wei"},{"authorTime":"2019-06-19 17:00:59","codes":[{"authorDate":"2019-06-19 17:00:59","commitOrder":5,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new BarrierBufferTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-06-19 17:00:59","endLine":124,"groupId":"38511","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/56/c38890f67130e3936834d0dcc30d9055f70e1c.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-06-19 17:00:59","commitOrder":5,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new BarrierBufferTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-06-19 17:00:59","endLine":169,"groupId":"38511","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/56/c38890f67130e3936834d0dcc30d9055f70e1c.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"8c57e5aed871b42d51e6218620ce7bd7991338c0","commitMessage":"@@@[FLINK-12364] Introduce CheckpointFailureManager for centralized checkpoint failure handling\n\n\n","date":"2019-06-19 17:00:59","modifiedFileCount":"38","status":"M","submitter":"vinoyang"},{"authorTime":"2019-06-18 16:41:11","codes":[{"authorDate":"2019-06-18 16:41:11","commitOrder":6,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-07-01 22:40:55","endLine":125,"groupId":"38511","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/6aea5123695e2af66a7a62e2b1cb2f86355f48.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new BarrierBufferTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-06-18 16:41:11","commitOrder":6,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointBarrierAlignerTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-07-01 22:40:55","endLine":170,"groupId":"38511","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/6aea5123695e2af66a7a62e2b1cb2f86355f48.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new BarrierBufferTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"0d502b6addffdc23a4826796c630bf7f9dbae718","commitMessage":"@@@[FLINK-12777][network] Rename existing classes to make them in sync with the refactor\n\n1. Rename BarrierBuffer to CheckpointedInputGate\nCheckpointedInputGate was an interface.  while BarrierBuffer was\nit's implementation. This rename means that we are dropping the interface\nand keeping only the concrete class.\n\n2. Rename BarrierBuffer and BarrierTracker tests to match this rename\nand previous refactorings.\n","date":"2019-07-01 22:40:55","modifiedFileCount":"8","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2019-07-25 14:25:37","codes":[{"authorDate":"2019-06-18 16:41:11","commitOrder":7,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-07-01 22:40:55","endLine":125,"groupId":"38511","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/6aea5123695e2af66a7a62e2b1cb2f86355f48.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2019-07-25 14:25:37","commitOrder":7,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputSelectableStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointBarrierAlignerTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-08-30 18:44:24","endLine":171,"groupId":"38511","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ee/b20319ba7f87dc164d78b7277ad3a377c6fec9.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointBarrierAlignerTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"dc742486083f1c30213098ac946e85a99b78fb4d","commitMessage":"@@@[FLINK-13051][runtime] Replace the non-selectable stream task with the input-selectable one\n","date":"2019-08-30 18:44:24","modifiedFileCount":"13","status":"M","submitter":"sunhaibotb"},{"authorTime":"2019-08-29 17:38:27","codes":[{"authorDate":"2019-06-18 16:41:11","commitOrder":8,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-07-01 22:40:55","endLine":125,"groupId":"38511","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/6aea5123695e2af66a7a62e2b1cb2f86355f48.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2019-08-29 17:38:27","commitOrder":8,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointBarrierAlignerTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-08-30 18:44:24","endLine":171,"groupId":"38511","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/92/cf60bf95b63f4eb8af2bc95c4765cbc3354932.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputSelectableStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointBarrierAlignerTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"ce557839d762b5f1ec92aa1885fd3d2ae33d0d0b","commitMessage":"@@@[FLINK-13051][runtime] Rename TwoInputSelectableStreamTask and StreamTwoInputSelectableProcessor\n","date":"2019-08-30 18:44:24","modifiedFileCount":"14","status":"M","submitter":"sunhaibotb"},{"authorTime":"2020-10-06 23:43:17","codes":[{"authorDate":"2019-06-18 16:41:11","commitOrder":9,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-07-01 22:40:55","endLine":125,"groupId":"38511","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/6aea5123695e2af66a7a62e2b1cb2f86355f48.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2020-10-06 23:43:17","commitOrder":9,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointBarrierAlignerTest.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2020-10-13 23:09:23","endLine":143,"groupId":"38511","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/77/062a71ff67b5d7a575d626899885bc8b43dce3.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointBarrierAlignerTestBase.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"a27f5a731d2d36532ccd56838bbc4f241e6fd961","commitMessage":"@@@[hotfix][test] Remove unnecessary abstraction in CheckpointBarrierAlignerTestBase\n","date":"2020-10-13 23:09:23","modifiedFileCount":"1","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-10-16 20:47:19","codes":[{"authorDate":"2019-06-18 16:41:11","commitOrder":10,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-07-01 22:40:55","endLine":125,"groupId":"38511","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/6aea5123695e2af66a7a62e2b1cb2f86355f48.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2020-10-16 20:47:19","commitOrder":10,"curCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new AlignedControllerTest.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2020-10-21 00:56:15","endLine":143,"groupId":"38511","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/85/50a468eb6e2014fdd7818796ce683989d5738c.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n\t\tTwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\t\tTwoInputStreamTask::new,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tCoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n\t\tstreamConfig.setStreamOperator(op);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointBarrierAlignerTest.CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"e4fae5d53a5ac7919e6da0d6f2b2149a6f212ea3","commitMessage":"@@@[FLINK-19679][task] Migrate CheckpointBarrierAligner to the generic SingleCheckpointBarrierHandler\n\nAlignedController replaces the custom logic of CheckpointBarrierAligner\n","date":"2020-10-21 00:56:15","modifiedFileCount":"5","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-03-05 21:05:36","codes":[{"authorDate":"2019-06-18 16:41:11","commitOrder":11,"curCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-07-01 22:40:55","endLine":125,"groupId":"102494","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeclineCallOnCancelBarrierOneInput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/6aea5123695e2af66a7a62e2b1cb2f86355f48.src","preCode":"\tpublic void testDeclineCallOnCancelBarrierOneInput() throws Exception {\n\n\t\tOneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t1, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tStreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n\t\t\r\n\t\ttestHarness.invoke(environment);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\t\r\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1);\n\t\ttestHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\tverify(environment, times(1)).declineCheckpoint(eq(2L),\n\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n\t\t\r\n\t\tObject result = testHarness.getOutput().poll();\n\t\tassertNotNull(\"nothing emitted\", result);\n\t\tassertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n\t\tassertEquals(\"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n\t\t\r\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2021-03-05 21:05:36","commitOrder":11,"curCode":"    public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n        TwoInputStreamTaskTestHarness<String, String, String> testHarness =\n                new TwoInputStreamTaskTestHarness<>(\n                        TwoInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n        testHarness.setupOutputForSingletonOperatorChain();\n\n        StreamConfig streamConfig = testHarness.getStreamConfig();\n        CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n        streamConfig.setStreamOperator(op);\n        streamConfig.setOperatorID(new OperatorID());\n\n        StreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n        \r\n        testHarness.invoke(environment);\n        testHarness.waitForTaskRunning();\n\n        \r\n        testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n        testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n        testHarness.waitForInputProcessing();\n\n        \r\n        verify(environment, times(1))\n                .declineCheckpoint(\n                        eq(2L),\n                        argThat(\n                                new AlignedCheckpointsTest.CheckpointExceptionMatcher(\n                                        CheckpointFailureReason\n                                                .CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n        \r\n        Object result = testHarness.getOutput().poll();\n        assertNotNull(\"nothing emitted\", result);\n        assertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n        assertEquals(\n                \"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n        \r\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","date":"2021-03-31 14:27:07","endLine":156,"groupId":"102494","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"testDeclineCallOnCancelBarrierTwoInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/162da8782b01848c529658738749e8d458718a.src","preCode":"    public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {\n\n        TwoInputStreamTaskTestHarness<String, String, String> testHarness =\n                new TwoInputStreamTaskTestHarness<>(\n                        TwoInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n        testHarness.setupOutputForSingletonOperatorChain();\n\n        StreamConfig streamConfig = testHarness.getStreamConfig();\n        CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap());\n        streamConfig.setStreamOperator(op);\n        streamConfig.setOperatorID(new OperatorID());\n\n        StreamMockEnvironment environment = spy(testHarness.createEnvironment());\n\n        \r\n        testHarness.invoke(environment);\n        testHarness.waitForTaskRunning();\n\n        \r\n        testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0);\n        testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0);\n        testHarness.waitForInputProcessing();\n\n        \r\n        verify(environment, times(1))\n                .declineCheckpoint(\n                        eq(2L),\n                        argThat(\n                                new AlignedControllerTest.CheckpointExceptionMatcher(\n                                        CheckpointFailureReason\n                                                .CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n\n        \r\n        Object result = testHarness.getOutput().poll();\n        assertNotNull(\"nothing emitted\", result);\n        assertTrue(\"wrong type emitted\", result instanceof CancelCheckpointMarker);\n        assertEquals(\n                \"wrong checkpoint id\", 2L, ((CancelCheckpointMarker) result).getCheckpointId());\n\n        \r\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskCancellationBarrierTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"77bf1055a00a64b02e440355c993ffc9e221525c","commitMessage":"@@@[FLINK-19682][checkpoint] Actively timeout checkpoint barriers on inputs\n\nThis closes #15313\n","date":"2021-03-31 14:27:07","modifiedFileCount":"18","status":"M","submitter":"Dawid Wysakowicz"}]
