[{"authorTime":"2018-01-02 14:42:18","codes":[{"authorDate":"2018-01-02 14:42:18","commitOrder":1,"curCode":"\tpublic void testNonExistingFileWithArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\n\t\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[4], options.getJarFilePath());\n\t\t\tassertArrayEquals(classpath, options.getClasspaths().toArray());\n\t\t\tassertArrayEquals(reducedArguments, options.getProgramArgs());\n\n\t\t\tCliFrontend frontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t\tfail(\"Should fail with an exception\");\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-01-12 03:39:41","endLine":228,"groupId":"38402","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonExistingFileWithArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b2/7eab2c2db0610d8a30d1aede33c45f8c225d65.src","preCode":"\tpublic void testNonExistingFileWithArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\n\t\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[4], options.getJarFilePath());\n\t\t\tassertArrayEquals(classpath, options.getClasspaths().toArray());\n\t\t\tassertArrayEquals(reducedArguments, options.getProgramArgs());\n\n\t\t\tCliFrontend frontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t\tfail(\"Should fail with an exception\");\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"},{"authorDate":"2018-01-02 14:42:18","commitOrder":1,"curCode":"\tpublic void testNonExistingFileWithoutArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[0], options.getJarFilePath());\n\t\t\tassertArrayEquals(new String[0], options.getProgramArgs());\n\n\t\t\tCliFrontend frontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-01-12 03:39:41","endLine":252,"groupId":"47406","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingFileWithoutArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b2/7eab2c2db0610d8a30d1aede33c45f8c225d65.src","preCode":"\tpublic void testNonExistingFileWithoutArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[0], options.getJarFilePath());\n\t\t\tassertArrayEquals(new String[0], options.getProgramArgs());\n\n\t\t\tCliFrontend frontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"}],"commitId":"12396f19851e74310c9b5f28870a8de9794511fc","commitMessage":"@@@[FLINK-8333] [flip6] Separate deployment options from command options\n\nThis commit separates the parsing of command options and deployment options into two\nsteps. This makes it easier to make the CustomCommandLines non-static.\n\nMoreover.  this commit moves the CliFrontend into the cli sub package.\n\nThis closes #5220.\n","date":"2018-01-12 03:39:41","modifiedFileCount":"10","status":"B","submitter":"Till Rohrmann"},{"authorTime":"2018-01-11 20:55:16","codes":[{"authorDate":"2018-01-11 20:55:16","commitOrder":2,"curCode":"\tpublic void testNonExistingFileWithArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\n\t\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[4], options.getJarFilePath());\n\t\t\tassertArrayEquals(classpath, options.getClasspaths().toArray());\n\t\t\tassertArrayEquals(reducedArguments, options.getProgramArgs());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t\tfail(\"Should fail with an exception\");\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-01-12 03:39:57","endLine":229,"groupId":"38402","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonExistingFileWithArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/26/f26ff3e35beefaec69d30556d32bec5d449b6b.src","preCode":"\tpublic void testNonExistingFileWithArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\n\t\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[4], options.getJarFilePath());\n\t\t\tassertArrayEquals(classpath, options.getClasspaths().toArray());\n\t\t\tassertArrayEquals(reducedArguments, options.getProgramArgs());\n\n\t\t\tCliFrontend frontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t\tfail(\"Should fail with an exception\");\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2018-01-11 20:55:16","commitOrder":2,"curCode":"\tpublic void testNonExistingFileWithoutArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[0], options.getJarFilePath());\n\t\t\tassertArrayEquals(new String[0], options.getProgramArgs());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-01-12 03:39:57","endLine":251,"groupId":"47406","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingFileWithoutArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/26/f26ff3e35beefaec69d30556d32bec5d449b6b.src","preCode":"\tpublic void testNonExistingFileWithoutArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[0], options.getJarFilePath());\n\t\t\tassertArrayEquals(new String[0], options.getProgramArgs());\n\n\t\t\tCliFrontend frontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"aff43768f3285a5f2bc5593369a7fec3ed77a2af","commitMessage":"@@@[FLINK-8338] [flip6] Make CustomCommandLines non static in CliFrontend\n\nThis commit changes how CustomCommandLines are registered at the CliFrontend.\nHenceforth.  the CliFrontend is initialized with the set of CustomCommandLines\ninstead of registering them statically. This improves maintainability and\ntestability.\n\nThis closes #5224.\n","date":"2018-01-12 03:39:57","modifiedFileCount":"14","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2018-01-03 20:25:09","codes":[{"authorDate":"2018-01-03 20:25:09","commitOrder":3,"curCode":"\tpublic void testNonExistingFileWithArguments() throws Exception {\n\t\tString[] arguments = {\n\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\tassertEquals(arguments[4], options.getJarFilePath());\n\t\tassertArrayEquals(classpath, options.getClasspaths().toArray());\n\t\tassertArrayEquals(reducedArguments, options.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(options);\n\t\t\tfail(\"Should fail with an exception\");\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","date":"2018-01-12 23:14:02","endLine":190,"groupId":"38402","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonExistingFileWithArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/68/73e68d1376a8f20ce8fac82d9a0ba1697302c7.src","preCode":"\tpublic void testNonExistingFileWithArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\n\t\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[4], options.getJarFilePath());\n\t\t\tassertArrayEquals(classpath, options.getClasspaths().toArray());\n\t\t\tassertArrayEquals(reducedArguments, options.getProgramArgs());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t\tfail(\"Should fail with an exception\");\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2018-01-03 20:25:09","commitOrder":3,"curCode":"\tpublic void testNonExistingFileWithoutArguments() throws Exception {\n\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\tassertEquals(arguments[0], options.getJarFilePath());\n\t\tassertArrayEquals(new String[0], options.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(options);\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","date":"2018-01-12 23:14:02","endLine":206,"groupId":"47406","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingFileWithoutArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/68/73e68d1376a8f20ce8fac82d9a0ba1697302c7.src","preCode":"\tpublic void testNonExistingFileWithoutArguments() {\n\t\ttry {\n\t\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\t\tassertEquals(arguments[0], options.getJarFilePath());\n\t\t\tassertArrayEquals(new String[0], options.getProgramArgs());\n\n\t\t\ttry {\n\t\t\t\tfrontend.buildProgram(options);\n\t\t\t}\n\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"30011b9b110aad0e1c28e7e0a025b73986781a72","commitMessage":"@@@[FLINK-8340] [flip6] Remove passing of Configuration to CustomCommandLine\n\nSince the Configuration does not change over the lifetime of a CustomCommandLine. \nwe can safely pass it as a constructor argument instead of method argument.\n\nThis closes #5226.\n","date":"2018-01-12 23:14:02","modifiedFileCount":"22","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2019-10-10 17:39:51","codes":[{"authorDate":"2019-10-10 17:39:51","commitOrder":4,"curCode":"\tpublic void testNonExistingFileWithArguments() throws Exception {\n\t\tString[] arguments = {\n\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = new ProgramOptions(commandLine);\n\t\tExecutionConfigAccessor executionOptions = ExecutionConfigAccessor.fromProgramOptions(programOptions);\n\n\t\tassertEquals(arguments[4], executionOptions.getJarFilePath());\n\t\tassertArrayEquals(classpath, executionOptions.getClasspaths().toArray());\n\t\tassertArrayEquals(reducedArguments, programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions, executionOptions);\n\t\t\tfail(\"Should fail with an exception\");\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","date":"2019-11-01 02:42:44","endLine":212,"groupId":"30623","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonExistingFileWithArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2e/fb8ca9bc258a902400d2c3ef7fdbd90b2e7d8d.src","preCode":"\tpublic void testNonExistingFileWithArguments() throws Exception {\n\t\tString[] arguments = {\n\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\tassertEquals(arguments[4], options.getJarFilePath());\n\t\tassertArrayEquals(classpath, options.getClasspaths().toArray());\n\t\tassertArrayEquals(reducedArguments, options.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(options);\n\t\t\tfail(\"Should fail with an exception\");\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2019-10-10 17:39:51","commitOrder":4,"curCode":"\tpublic void testNonExistingFileWithoutArguments() throws Exception {\n\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = new ProgramOptions(commandLine);\n\t\tExecutionConfigAccessor executionOptions = ExecutionConfigAccessor.fromProgramOptions(programOptions);\n\n\t\tassertEquals(arguments[0], executionOptions.getJarFilePath());\n\t\tassertArrayEquals(new String[0], programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions, executionOptions);\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","date":"2019-11-01 02:42:44","endLine":231,"groupId":"30623","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingFileWithoutArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2e/fb8ca9bc258a902400d2c3ef7fdbd90b2e7d8d.src","preCode":"\tpublic void testNonExistingFileWithoutArguments() throws Exception {\n\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\tRunOptions options = CliFrontendParser.parseRunCommand(arguments);\n\t\tassertEquals(arguments[0], options.getJarFilePath());\n\t\tassertArrayEquals(new String[0], options.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(options);\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"ea6fddeea1fce742b44b3b7b5e1e48ac1815df8d","commitMessage":"@@@[FLINK-14377] Parse the ProgramOptions to a Configuration.\n","date":"2019-11-01 02:42:44","modifiedFileCount":"9","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-11-12 16:12:37","codes":[{"authorDate":"2019-11-12 16:12:37","commitOrder":5,"curCode":"\tpublic void testNonExistingFileWithArguments() throws Exception {\n\t\tString[] arguments = {\n\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = new ProgramOptions(commandLine);\n\n\t\tassertEquals(arguments[4], programOptions.getJarFilePath());\n\t\tassertArrayEquals(classpath, programOptions.getClasspaths().toArray());\n\t\tassertArrayEquals(reducedArguments, programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions);\n\t\t\tfail(\"Should fail with an exception\");\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","date":"2019-11-14 17:47:36","endLine":207,"groupId":"38402","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonExistingFileWithArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/75/771cc34d22df2ec7a67999382ae3b94473b370.src","preCode":"\tpublic void testNonExistingFileWithArguments() throws Exception {\n\t\tString[] arguments = {\n\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = new ProgramOptions(commandLine);\n\t\tExecutionConfigAccessor executionOptions = ExecutionConfigAccessor.fromProgramOptions(programOptions);\n\n\t\tassertEquals(arguments[4], executionOptions.getJarFilePath());\n\t\tassertArrayEquals(classpath, executionOptions.getClasspaths().toArray());\n\t\tassertArrayEquals(reducedArguments, programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions, executionOptions);\n\t\t\tfail(\"Should fail with an exception\");\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2019-11-12 16:12:37","commitOrder":5,"curCode":"\tpublic void testNonExistingFileWithoutArguments() throws Exception {\n\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = new ProgramOptions(commandLine);\n\n\t\tassertEquals(arguments[0], programOptions.getJarFilePath());\n\t\tassertArrayEquals(new String[0], programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions);\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","date":"2019-11-14 17:47:36","endLine":225,"groupId":"47406","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingFileWithoutArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/75/771cc34d22df2ec7a67999382ae3b94473b370.src","preCode":"\tpublic void testNonExistingFileWithoutArguments() throws Exception {\n\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = new ProgramOptions(commandLine);\n\t\tExecutionConfigAccessor executionOptions = ExecutionConfigAccessor.fromProgramOptions(programOptions);\n\n\t\tassertEquals(arguments[0], executionOptions.getJarFilePath());\n\t\tassertArrayEquals(new String[0], programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions, executionOptions);\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"cffa2e8647f74e0332cad011d937015ac9ac031e","commitMessage":"@@@[hotfix] CliFrontend.buildProgram() uses only ProgramOptions\n","date":"2019-11-14 17:47:36","modifiedFileCount":"3","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-04-24 19:02:32","codes":[{"authorDate":"2020-04-24 19:02:32","commitOrder":6,"curCode":"\tpublic void testNonExistingFileWithArguments() throws Exception {\n\t\tString[] arguments = {\n\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = ProgramOptions.create(commandLine);\n\n\t\tassertEquals(arguments[4], programOptions.getJarFilePath());\n\t\tassertArrayEquals(classpath, programOptions.getClasspaths().toArray());\n\t\tassertArrayEquals(reducedArguments, programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions);\n\t\t\tfail(\"Should fail with an exception\");\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","date":"2020-04-24 19:02:32","endLine":208,"groupId":"101699","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonExistingFileWithArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/dc27619b2ba885d1a98c8949b47c6788b48747.src","preCode":"\tpublic void testNonExistingFileWithArguments() throws Exception {\n\t\tString[] arguments = {\n\t\t\t\t\"--classpath\", \"file:///tmp/foo\",\n\t\t\t\t\"--classpath\", \"file:///tmp/bar\",\n\t\t\t\t\"/some/none/existing/path\",\n\t\t\t\t\"--debug\", \"true\", \"arg1\", \"arg2\"  };\n\t\tURL[] classpath = new URL[] { new URL(\"file:///tmp/foo\"), new URL(\"file:///tmp/bar\") };\n\t\tString[] reducedArguments = {\"--debug\", \"true\", \"arg1\", \"arg2\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = new ProgramOptions(commandLine);\n\n\t\tassertEquals(arguments[4], programOptions.getJarFilePath());\n\t\tassertArrayEquals(classpath, programOptions.getClasspaths().toArray());\n\t\tassertArrayEquals(reducedArguments, programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions);\n\t\t\tfail(\"Should fail with an exception\");\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-04-24 19:02:32","commitOrder":6,"curCode":"\tpublic void testNonExistingFileWithoutArguments() throws Exception {\n\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = ProgramOptions.create(commandLine);\n\n\t\tassertEquals(arguments[0], programOptions.getJarFilePath());\n\t\tassertArrayEquals(new String[0], programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions);\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","date":"2020-04-24 19:02:32","endLine":226,"groupId":"101699","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingFileWithoutArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/dc27619b2ba885d1a98c8949b47c6788b48747.src","preCode":"\tpublic void testNonExistingFileWithoutArguments() throws Exception {\n\t\tString[] arguments = {\"/some/none/existing/path\"};\n\n\t\tCommandLine commandLine = CliFrontendParser.parse(CliFrontendParser.RUN_OPTIONS, arguments, true);\n\t\tProgramOptions programOptions = new ProgramOptions(commandLine);\n\n\t\tassertEquals(arguments[0], programOptions.getJarFilePath());\n\t\tassertArrayEquals(new String[0], programOptions.getProgramArgs());\n\n\t\ttry {\n\t\t\tfrontend.buildProgram(programOptions);\n\t\t}\n\t\tcatch (FileNotFoundException e) {\n\t\t\t\r\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendPackageProgramTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"eeaf08ffdbe64357b62e81cdbf0bec29fb9cf76b","commitMessage":"@@@[FLINK-16667][python][client] Support the Python dependency configuration options in CliFrontend (#11702)\n\n","date":"2020-04-24 19:02:32","modifiedFileCount":"11","status":"M","submitter":"Wei Zhong"}]
