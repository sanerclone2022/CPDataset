[{"authorTime":"2018-08-31 01:30:56","codes":[{"authorDate":"2020-09-23 20:37:35","commitOrder":2,"curCode":"\tpublic void testMapStateIteratorArbitraryAccess() throws Exception {\n\t\tMapStateDescriptor<Integer, Long> kvId = new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tMapState<Integer, Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\t\t\tbackend.setCurrentKey(1);\n\t\t\tint stateSize = 4096;\n\t\t\tfor (int i = 0; i < stateSize; i++) {\n\t\t\t\tstate.put(i, i * 2L);\n\t\t\t}\n\t\t\tIterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n\t\t\tint iteratorCount = 0;\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tMap.Entry<Integer, Long> entry = iterator.next();\n\t\t\t\tassertEquals(iteratorCount, (int) entry.getKey());\n\t\t\t\tswitch (ThreadLocalRandom.current().nextInt() % 3) {\n\t\t\t\t\tcase 0: \r\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\t\tfail();\n\t\t\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: \r\n\t\t\t\t\t\titerator.hasNext();\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\titeratorCount++;\n\t\t\t}\n\t\t\tassertEquals(stateSize, iteratorCount);\n\t\t} finally {\n\t\t\tbackend.dispose();\n\t\t}\n\t}\n","date":"2020-10-12 15:03:28","endLine":1240,"groupId":"24424","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapStateIteratorArbitraryAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/dd2d0de2b922eabdd039d853a7810a794b7cb5.src","preCode":"\tpublic void testMapStateIteratorArbitraryAccess() throws Exception {\n\t\tMapStateDescriptor<Integer, Long> kvId = new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tMapState<Integer, Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\t\t\tbackend.setCurrentKey(1);\n\t\t\tint stateSize = 4096;\n\t\t\tfor (int i = 0; i < stateSize; i++) {\n\t\t\t\tstate.put(i, i * 2L);\n\t\t\t}\n\t\t\tIterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n\t\t\tint iteratorCount = 0;\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tMap.Entry<Integer, Long> entry = iterator.next();\n\t\t\t\tassertEquals(iteratorCount, (int) entry.getKey());\n\t\t\t\tswitch (ThreadLocalRandom.current().nextInt() % 3) {\n\t\t\t\t\tcase 0: \r\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\t\tfail();\n\t\t\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: \r\n\t\t\t\t\t\titerator.hasNext();\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\titeratorCount++;\n\t\t\t}\n\t\t\tassertEquals(stateSize, iteratorCount);\n\t\t} finally {\n\t\t\tbackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sorted/state/BatchExecutionStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1200,"status":"B"},{"authorDate":"2018-08-31 01:30:56","commitOrder":2,"curCode":"\tpublic void testMapStateIteratorArbitraryAccess() throws Exception {\n\t\tMapStateDescriptor<Integer, Long> kvId = new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n\t\tAbstractKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tMapState<Integer, Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\t\t\tbackend.setCurrentKey(1);\n\t\t\tint stateSize = 4096;\n\t\t\tfor (int i = 0; i < stateSize; i++) {\n\t\t\t\tstate.put(i, i * 2L);\n\t\t\t}\n\t\t\tIterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n\t\t\tint iteratorCount = 0;\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tMap.Entry<Integer, Long> entry = iterator.next();\n\t\t\t\tassertEquals(iteratorCount, (int) entry.getKey());\n\t\t\t\tswitch (ThreadLocalRandom.current().nextInt() % 3) {\n\t\t\t\t\tcase 0: \r\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\t\tfail();\n\t\t\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: \r\n\t\t\t\t\t\titerator.hasNext();\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\titeratorCount++;\n\t\t\t}\n\t\t\tassertEquals(stateSize, iteratorCount);\n\t\t} finally {\n\t\t\tbackend.dispose();\n\t\t}\n\t}\n","date":"2018-09-11 21:20:25","endLine":2964,"groupId":"24424","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapStateIteratorArbitraryAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/26/34268c947ff778e10034989ff6ca1774a92a00.src","preCode":"\tpublic void testMapStateIteratorArbitraryAccess() throws Exception {\n\t\tMapStateDescriptor<Integer, Long> kvId = new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n\t\tAbstractKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tMapState<Integer, Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\t\t\tbackend.setCurrentKey(1);\n\t\t\tint stateSize = 4096;\n\t\t\tfor (int i = 0; i < stateSize; i++) {\n\t\t\t\tstate.put(i, i * 2L);\n\t\t\t}\n\t\t\tIterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n\t\t\tint iteratorCount = 0;\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tMap.Entry<Integer, Long> entry = iterator.next();\n\t\t\t\tassertEquals(iteratorCount, (int) entry.getKey());\n\t\t\t\tswitch (ThreadLocalRandom.current().nextInt() % 3) {\n\t\t\t\t\tcase 0: \r\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\t\tfail();\n\t\t\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: \r\n\t\t\t\t\t\titerator.hasNext();\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\titeratorCount++;\n\t\t\t}\n\t\t\tassertEquals(stateSize, iteratorCount);\n\t\t} finally {\n\t\t\tbackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/StateBackendTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2924,"status":"NB"}],"commitId":"1aea5f059cb1e0aee6168477391e6e17c9d23dc1","commitMessage":"@@@[FLINK-19474] Implement a state backend that holds a single key at a time\n\nThis commit introduces a SingleKeyStateBackend. This state backend is a\nsimplified version of a state backend that can be used in a BATCH\nruntime mode. It requires the input to be sorted.  as it only ever\nremembers the current key. If the key changes.  the current state is\ndiscarded. Moreover this state backend does not support checkpointing.\n","date":"2020-10-12 15:03:28","modifiedFileCount":"2","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-03-11 14:14:07","codes":[{"authorDate":"2020-09-23 20:37:35","commitOrder":3,"curCode":"\tpublic void testMapStateIteratorArbitraryAccess() throws Exception {\n\t\tMapStateDescriptor<Integer, Long> kvId = new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tMapState<Integer, Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\t\t\tbackend.setCurrentKey(1);\n\t\t\tint stateSize = 4096;\n\t\t\tfor (int i = 0; i < stateSize; i++) {\n\t\t\t\tstate.put(i, i * 2L);\n\t\t\t}\n\t\t\tIterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n\t\t\tint iteratorCount = 0;\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tMap.Entry<Integer, Long> entry = iterator.next();\n\t\t\t\tassertEquals(iteratorCount, (int) entry.getKey());\n\t\t\t\tswitch (ThreadLocalRandom.current().nextInt() % 3) {\n\t\t\t\t\tcase 0: \r\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\t\tfail();\n\t\t\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: \r\n\t\t\t\t\t\titerator.hasNext();\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\titeratorCount++;\n\t\t\t}\n\t\t\tassertEquals(stateSize, iteratorCount);\n\t\t} finally {\n\t\t\tbackend.dispose();\n\t\t}\n\t}\n","date":"2020-10-12 15:03:28","endLine":1240,"groupId":"24424","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapStateIteratorArbitraryAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/dd2d0de2b922eabdd039d853a7810a794b7cb5.src","preCode":"\tpublic void testMapStateIteratorArbitraryAccess() throws Exception {\n\t\tMapStateDescriptor<Integer, Long> kvId = new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tMapState<Integer, Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\t\t\tbackend.setCurrentKey(1);\n\t\t\tint stateSize = 4096;\n\t\t\tfor (int i = 0; i < stateSize; i++) {\n\t\t\t\tstate.put(i, i * 2L);\n\t\t\t}\n\t\t\tIterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n\t\t\tint iteratorCount = 0;\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tMap.Entry<Integer, Long> entry = iterator.next();\n\t\t\t\tassertEquals(iteratorCount, (int) entry.getKey());\n\t\t\t\tswitch (ThreadLocalRandom.current().nextInt() % 3) {\n\t\t\t\t\tcase 0: \r\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\t\tfail();\n\t\t\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: \r\n\t\t\t\t\t\titerator.hasNext();\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\titeratorCount++;\n\t\t\t}\n\t\t\tassertEquals(stateSize, iteratorCount);\n\t\t} finally {\n\t\t\tbackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sorted/state/BatchExecutionStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1200,"status":"N"},{"authorDate":"2021-03-11 14:14:07","commitOrder":3,"curCode":"    public void testMapStateIteratorArbitraryAccess() throws Exception {\n        MapStateDescriptor<Integer, Long> kvId =\n                new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n\n        try {\n            MapState<Integer, Long> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n            backend.setCurrentKey(1);\n            int stateSize = 4096;\n            for (int i = 0; i < stateSize; i++) {\n                state.put(i, i * 2L);\n            }\n            Iterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n            int iteratorCount = 0;\n            while (iterator.hasNext()) {\n                Map.Entry<Integer, Long> entry = iterator.next();\n                assertEquals(iteratorCount, (int) entry.getKey());\n                switch (ThreadLocalRandom.current().nextInt() % 3) {\n                    case 0: \r\n                        iterator.remove();\n                        try {\n                            iterator.remove();\n                            fail();\n                        } catch (IllegalStateException e) {\n                            \r\n                        }\n                        break;\n                    case 1: \r\n                        iterator.hasNext();\n                        iterator.remove();\n                        break;\n                    case 2: \r\n                        break;\n                }\n                iteratorCount++;\n            }\n            assertEquals(stateSize, iteratorCount);\n        } finally {\n            backend.dispose();\n        }\n    }\n","date":"2021-03-15 16:07:03","endLine":3435,"groupId":"24424","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapStateIteratorArbitraryAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/43/44e582a588850b1b47ba821f2ef66fa63f52b6.src","preCode":"    public void testMapStateIteratorArbitraryAccess() throws Exception {\n        MapStateDescriptor<Integer, Long> kvId =\n                new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n        AbstractKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n        try {\n            MapState<Integer, Long> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n            backend.setCurrentKey(1);\n            int stateSize = 4096;\n            for (int i = 0; i < stateSize; i++) {\n                state.put(i, i * 2L);\n            }\n            Iterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n            int iteratorCount = 0;\n            while (iterator.hasNext()) {\n                Map.Entry<Integer, Long> entry = iterator.next();\n                assertEquals(iteratorCount, (int) entry.getKey());\n                switch (ThreadLocalRandom.current().nextInt() % 3) {\n                    case 0: \r\n                        iterator.remove();\n                        try {\n                            iterator.remove();\n                            fail();\n                        } catch (IllegalStateException e) {\n                            \r\n                        }\n                        break;\n                    case 1: \r\n                        iterator.hasNext();\n                        iterator.remove();\n                        break;\n                    case 2: \r\n                        break;\n                }\n                iteratorCount++;\n            }\n            assertEquals(stateSize, iteratorCount);\n        } finally {\n            backend.dispose();\n        }\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/StateBackendTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":3391,"status":"M"}],"commitId":"d72fa2ea588fc0f52ebd33d583187eb27972a483","commitMessage":"@@@[FLINK-21354] Introduce ChangelogStateBackend to delegate state access\n\nThis change is to wrap the existing prod state backend (Rocksdb.  Fs.  Mem) to delegate\nstate access for these state backends. In the future.  we can forward state changes to\nStateChangeLog when states are updated. In this PR.  we only support keyed-state access.\n\nThe changes include:\n1. Introduce `DelegatingStateBackend` interface for state backend delegation\n   (in the flink-runtime module)\n2. Introduce `ChangelogStateBackend` and related delegating states for\n   state delegation (in flink-state-backends module)\n3. Implement `ChangelogStateBackend`'s Loader in `StateBackendLoader`.\n   (in the flink-runtime module)\n","date":"2021-03-15 16:07:03","modifiedFileCount":"12","status":"M","submitter":"Yuan Mei"},{"authorTime":"2021-03-26 12:16:51","codes":[{"authorDate":"2020-09-23 20:37:35","commitOrder":4,"curCode":"\tpublic void testMapStateIteratorArbitraryAccess() throws Exception {\n\t\tMapStateDescriptor<Integer, Long> kvId = new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tMapState<Integer, Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\t\t\tbackend.setCurrentKey(1);\n\t\t\tint stateSize = 4096;\n\t\t\tfor (int i = 0; i < stateSize; i++) {\n\t\t\t\tstate.put(i, i * 2L);\n\t\t\t}\n\t\t\tIterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n\t\t\tint iteratorCount = 0;\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tMap.Entry<Integer, Long> entry = iterator.next();\n\t\t\t\tassertEquals(iteratorCount, (int) entry.getKey());\n\t\t\t\tswitch (ThreadLocalRandom.current().nextInt() % 3) {\n\t\t\t\t\tcase 0: \r\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\t\tfail();\n\t\t\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: \r\n\t\t\t\t\t\titerator.hasNext();\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\titeratorCount++;\n\t\t\t}\n\t\t\tassertEquals(stateSize, iteratorCount);\n\t\t} finally {\n\t\t\tbackend.dispose();\n\t\t}\n\t}\n","date":"2020-10-12 15:03:28","endLine":1240,"groupId":"103358","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMapStateIteratorArbitraryAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/dd2d0de2b922eabdd039d853a7810a794b7cb5.src","preCode":"\tpublic void testMapStateIteratorArbitraryAccess() throws Exception {\n\t\tMapStateDescriptor<Integer, Long> kvId = new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\ttry {\n\t\t\tMapState<Integer, Long> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\t\t\tbackend.setCurrentKey(1);\n\t\t\tint stateSize = 4096;\n\t\t\tfor (int i = 0; i < stateSize; i++) {\n\t\t\t\tstate.put(i, i * 2L);\n\t\t\t}\n\t\t\tIterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n\t\t\tint iteratorCount = 0;\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tMap.Entry<Integer, Long> entry = iterator.next();\n\t\t\t\tassertEquals(iteratorCount, (int) entry.getKey());\n\t\t\t\tswitch (ThreadLocalRandom.current().nextInt() % 3) {\n\t\t\t\t\tcase 0: \r\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\t\tfail();\n\t\t\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: \r\n\t\t\t\t\t\titerator.hasNext();\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\titeratorCount++;\n\t\t\t}\n\t\t\tassertEquals(stateSize, iteratorCount);\n\t\t} finally {\n\t\t\tbackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sorted/state/BatchExecutionStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1200,"status":"N"},{"authorDate":"2021-03-26 12:16:51","commitOrder":4,"curCode":"    public void testMapStateIteratorArbitraryAccess() throws Exception {\n        MapStateDescriptor<Integer, Long> kvId =\n                new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n\n        try {\n            MapState<Integer, Long> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n            backend.setCurrentKey(1);\n            int stateSize = 4096;\n            for (int i = 0; i < stateSize; i++) {\n                state.put(i, i * 2L);\n            }\n            Iterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n            int iteratorCount = 0;\n            while (iterator.hasNext()) {\n                Map.Entry<Integer, Long> entry = iterator.next();\n                assertEquals(iteratorCount, (int) entry.getKey());\n                switch (ThreadLocalRandom.current().nextInt() % 3) {\n                    case 0: \r\n                        iterator.remove();\n                        try {\n                            iterator.remove();\n                            fail();\n                        } catch (IllegalStateException e) {\n                            \r\n                        }\n                        break;\n                    case 1: \r\n                        iterator.hasNext();\n                        iterator.remove();\n                        break;\n                    case 2: \r\n                        break;\n                }\n                iteratorCount++;\n            }\n            assertEquals(stateSize, iteratorCount);\n        } finally {\n            IOUtils.closeQuietly(backend);\n            backend.dispose();\n        }\n    }\n","date":"2021-03-26 17:39:33","endLine":3534,"groupId":"103358","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapStateIteratorArbitraryAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/87/0383a381a0b12ce0e4863477d9a99d55c99806.src","preCode":"    public void testMapStateIteratorArbitraryAccess() throws Exception {\n        MapStateDescriptor<Integer, Long> kvId =\n                new MapStateDescriptor<>(\"id\", Integer.class, Long.class);\n\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n\n        try {\n            MapState<Integer, Long> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n            backend.setCurrentKey(1);\n            int stateSize = 4096;\n            for (int i = 0; i < stateSize; i++) {\n                state.put(i, i * 2L);\n            }\n            Iterator<Map.Entry<Integer, Long>> iterator = state.iterator();\n            int iteratorCount = 0;\n            while (iterator.hasNext()) {\n                Map.Entry<Integer, Long> entry = iterator.next();\n                assertEquals(iteratorCount, (int) entry.getKey());\n                switch (ThreadLocalRandom.current().nextInt() % 3) {\n                    case 0: \r\n                        iterator.remove();\n                        try {\n                            iterator.remove();\n                            fail();\n                        } catch (IllegalStateException e) {\n                            \r\n                        }\n                        break;\n                    case 1: \r\n                        iterator.hasNext();\n                        iterator.remove();\n                        break;\n                    case 2: \r\n                        break;\n                }\n                iteratorCount++;\n            }\n            assertEquals(stateSize, iteratorCount);\n        } finally {\n            backend.dispose();\n        }\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/StateBackendTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":3489,"status":"M"}],"commitId":"97f257e46824772728a1a595edb57e5633903a55","commitMessage":"@@@[FLINK-21929][statebackend][tests] Refactor StateBackendTestBase to ensure created keyed state backend could be disposed finally\n","date":"2021-03-26 17:39:33","modifiedFileCount":"1","status":"M","submitter":"Yun Tang"}]
