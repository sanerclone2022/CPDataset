[{"authorTime":"2017-10-24 18:16:08","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":1,"curCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","date":"2017-10-27 00:57:34","endLine":100,"groupId":"19609","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/1544d845bf340d2471b06173f223733817b104.src","preCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2017-10-24 18:16:08","commitOrder":1,"curCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.isExecutorShutdown());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","date":"2017-10-27 00:57:34","endLine":445,"groupId":"19609","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryExecutorShutDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/1544d845bf340d2471b06173f223733817b104.src","preCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.isExecutorShutdown());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"B"}],"commitId":"0c771505b84cdacf7a359c3be0efe38a30f9e660","commitMessage":"@@@[FLINK-7908][QS] Restructure the queryable state module.\n\nThe QS module is split into core and client. The core should\nbe put in the lib folder to enable queryable state.  while the\nclient is the one that the user will program against. The\nreason for the restructuring in mainly to remove the dependency\non the flink-runtime from the user's program.\n","date":"2017-10-27 00:57:34","modifiedFileCount":"23","status":"B","submitter":"kkloudas"},{"authorTime":"2017-11-17 00:02:16","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":2,"curCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","date":"2017-10-27 00:57:34","endLine":100,"groupId":"19609","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/1544d845bf340d2471b06173f223733817b104.src","preCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2017-11-17 00:02:16","commitOrder":2,"curCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.getQueryExecutor().isTerminated());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","date":"2017-11-17 17:46:09","endLine":445,"groupId":"19609","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryExecutorShutDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/301ede8848ceb96a4a97081505393e39c6bfb3.src","preCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.isExecutorShutdown());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"}],"commitId":"5e059e968633c4292734ebed209fa1b3c30529a1","commitMessage":"@@@[FLINK-8055][QS] Deduplicate logging messages about QS start.\n","date":"2017-11-17 17:46:09","modifiedFileCount":"7","status":"M","submitter":"kkloudas"},{"authorTime":"2018-01-23 01:11:04","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":3,"curCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","date":"2017-10-27 00:57:34","endLine":100,"groupId":"19609","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/1544d845bf340d2471b06173f223733817b104.src","preCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2018-01-23 01:11:04","commitOrder":3,"curCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.getQueryExecutor().isTerminated());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","date":"2018-02-06 18:49:44","endLine":424,"groupId":"19609","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryExecutorShutDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/1517c5a6525fd2219795819c8e68eebdd9e49d.src","preCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.getQueryExecutor().isTerminated());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"cef6741a91fcb83757a82a39b04d074b1a1311cf","commitMessage":"@@@[FLINK-8493] [flip6] Integrate queryable state with Flip-6\n\nAdapt KvStateRegistry to accept multiple KvStateRegistryListeners. Introduce\nthe KvStateLocationOracle to retrieve the KvStateLocation. Adapt the KvStateClientProxy\nto accept multiple KvStateLocationOracles to retrieve the KvStateLocations for\ndifferent jobs. Registered the KvStateRegistryListener and KvStateLocationOracle\nin TaskExecutor upon establishing a connection to the JobMaster.\n\nThis closes #5339.\n","date":"2018-02-06 18:49:44","modifiedFileCount":"14","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2020-03-19 17:55:21","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":4,"curCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","date":"2017-10-27 00:57:34","endLine":100,"groupId":"19609","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/1544d845bf340d2471b06173f223733817b104.src","preCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2020-03-19 17:55:21","commitOrder":4,"curCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.getQueryExecutor().isTerminated());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tbuf.release();\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","date":"2020-03-23 17:20:30","endLine":470,"groupId":"19609","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryExecutorShutDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/f396eeea2cb42f960a74c589b5db3b53f223b8.src","preCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.getQueryExecutor().isTerminated());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"50ee6554dffee784f6dbfeaba7b18a18bdba5659","commitMessage":"@@@[FLINK-16718][tests] Fix ByteBuf leak in KvStateServerHandlerTest\n\nThis closes #11453.\n","date":"2020-03-23 17:20:30","modifiedFileCount":"1","status":"M","submitter":"Gary Yao"},{"authorTime":"2020-03-20 19:27:43","codes":[{"authorDate":"2020-03-20 19:27:43","commitOrder":5,"curCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost().getHostName(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","date":"2020-03-24 22:11:59","endLine":102,"groupId":"102459","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e6/05dc976071f5af3134bc5df55030a0e68e3801.src","preCode":"\tpublic static void setup() {\n\t\ttry {\n\t\t\ttestServer = new KvStateServerImpl(\n\t\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KvStateRegistry(),\n\t\t\t\t\tnew DisabledKvStateRequestStats());\n\t\t\ttestServer.start();\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-03-20 19:27:43","commitOrder":5,"curCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost().getHostName(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.getQueryExecutor().isTerminated());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tbuf.release();\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","date":"2020-03-24 22:11:59","endLine":470,"groupId":"102459","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryExecutorShutDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e6/05dc976071f5af3134bc5df55030a0e68e3801.src","preCode":"\tpublic void testQueryExecutorShutDown() throws Throwable {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tKvStateServerImpl localTestServer = new KvStateServerImpl(\n\t\t\t\tInetAddress.getLocalHost(),\n\t\t\t\tCollections.singletonList(0).iterator(),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tnew KvStateRegistry(),\n\t\t\t\tnew DisabledKvStateRequestStats());\n\n\t\tlocalTestServer.start();\n\t\tlocalTestServer.shutdown();\n\t\tassertTrue(localTestServer.getQueryExecutor().isTerminated());\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(localTestServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, new byte[0]);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 282872L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tbuf.release();\n\n\t\tassertTrue(response.getCause().getMessage().contains(\"RejectedExecutionException\"));\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\n\t\tlocalTestServer.shutdown();\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"9dc7a4a47f85153b98e1f50eb8917dd6c8e15c85","commitMessage":"@@@[FLINK-15911][runtime] Support unresolveable external hostname.\n","date":"2020-03-24 22:11:59","modifiedFileCount":"25","status":"M","submitter":"Xintong Song"}]
