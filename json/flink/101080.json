[{"authorTime":"2020-11-07 14:23:56","codes":[{"authorDate":"2020-11-07 14:23:56","commitOrder":1,"curCode":"\tprivate DynamicTableSource getTableSource(String tableName) throws Exception {\n\t\tObjectIdentifier tableIdentifier = ObjectIdentifier.of(hiveCatalog.getName(), \"default\", tableName);\n\t\tCatalogTable catalogTable = (CatalogTable) hiveCatalog.getTable(tableIdentifier.toObjectPath());\n\t\treturn FactoryUtil.createTableSource(\n\t\t\t\thiveCatalog,\n\t\t\t\ttableIdentifier,\n\t\t\t\tcatalogTable,\n\t\t\t\ttableEnv.getConfig().getConfiguration(),\n\t\t\t\tThread.currentThread().getContextClassLoader(),\n\t\t\t\tfalse);\n\t}\n","date":"2020-11-07 14:23:56","endLine":239,"groupId":"47697","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTableSource","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1e/dd19f00cbeff66ecf13a9118a548d5a8bbde12.src","preCode":"\tprivate DynamicTableSource getTableSource(String tableName) throws Exception {\n\t\tObjectIdentifier tableIdentifier = ObjectIdentifier.of(hiveCatalog.getName(), \"default\", tableName);\n\t\tCatalogTable catalogTable = (CatalogTable) hiveCatalog.getTable(tableIdentifier.toObjectPath());\n\t\treturn FactoryUtil.createTableSource(\n\t\t\t\thiveCatalog,\n\t\t\t\ttableIdentifier,\n\t\t\t\tcatalogTable,\n\t\t\t\ttableEnv.getConfig().getConfiguration(),\n\t\t\t\tThread.currentThread().getContextClassLoader(),\n\t\t\t\tfalse);\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"},{"authorDate":"2020-11-07 14:23:56","commitOrder":1,"curCode":"\tprivate FileSystemLookupFunction<HiveTablePartition> getLookupFunction(String tableName) throws Exception {\n\t\tObjectIdentifier tableIdentifier = ObjectIdentifier.of(hiveCatalog.getName(), \"default\", tableName);\n\t\tCatalogTable catalogTable = (CatalogTable) hiveCatalog.getTable(tableIdentifier.toObjectPath());\n\t\tHiveLookupTableSource hiveTableSource = (HiveLookupTableSource) FactoryUtil.createTableSource(\n\t\t\t\thiveCatalog,\n\t\t\t\ttableIdentifier,\n\t\t\t\tcatalogTable,\n\t\t\t\ttableEnv.getConfig().getConfiguration(),\n\t\t\t\tThread.currentThread().getContextClassLoader(),\n\t\t\t\tfalse);\n\t\tFileSystemLookupFunction<HiveTablePartition> lookupFunction =\n\t\t\t\t(FileSystemLookupFunction<HiveTablePartition>) hiveTableSource.getLookupFunction(new int[][]{{0}});\n\t\treturn lookupFunction;\n\t}\n","date":"2020-11-07 14:23:56","endLine":326,"groupId":"47697","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getLookupFunction","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/84134e0eeaede6d2fa8c8de449ec0a9810f56f.src","preCode":"\tprivate FileSystemLookupFunction<HiveTablePartition> getLookupFunction(String tableName) throws Exception {\n\t\tObjectIdentifier tableIdentifier = ObjectIdentifier.of(hiveCatalog.getName(), \"default\", tableName);\n\t\tCatalogTable catalogTable = (CatalogTable) hiveCatalog.getTable(tableIdentifier.toObjectPath());\n\t\tHiveLookupTableSource hiveTableSource = (HiveLookupTableSource) FactoryUtil.createTableSource(\n\t\t\t\thiveCatalog,\n\t\t\t\ttableIdentifier,\n\t\t\t\tcatalogTable,\n\t\t\t\ttableEnv.getConfig().getConfiguration(),\n\t\t\t\tThread.currentThread().getContextClassLoader(),\n\t\t\t\tfalse);\n\t\tFileSystemLookupFunction<HiveTablePartition> lookupFunction =\n\t\t\t\t(FileSystemLookupFunction<HiveTablePartition>) hiveTableSource.getLookupFunction(new int[][]{{0}});\n\t\treturn lookupFunction;\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveLookupJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"B"}],"commitId":"09386f27b66c86e8148ae8d25d72e3c2ac552362","commitMessage":"@@@[FLINK-19644][hive] Support read latest partition of Hive table in temporal join\n\nThis closes #13729","date":"2020-11-07 14:23:56","modifiedFileCount":"10","status":"B","submitter":"Leonard Xu"},{"authorTime":"2021-03-18 19:13:17","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    private DynamicTableSource getTableSource(String tableName) throws Exception {\n        TableEnvironmentInternal tableEnvInternal = (TableEnvironmentInternal) tableEnv;\n        ObjectIdentifier tableIdentifier =\n                ObjectIdentifier.of(hiveCatalog.getName(), \"default\", tableName);\n        CatalogTable catalogTable =\n                (CatalogTable) hiveCatalog.getTable(tableIdentifier.toObjectPath());\n        return FactoryUtil.createTableSource(\n                hiveCatalog,\n                tableIdentifier,\n                tableEnvInternal.getCatalogManager().resolveCatalogTable(catalogTable),\n                tableEnv.getConfig().getConfiguration(),\n                Thread.currentThread().getContextClassLoader(),\n                false);\n    }\n","date":"2021-03-24 04:35:35","endLine":246,"groupId":"101080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTableSource","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/37/a22e4ae192d8b10efbad848143017e47639d6e.src","preCode":"    private DynamicTableSource getTableSource(String tableName) throws Exception {\n        ObjectIdentifier tableIdentifier =\n                ObjectIdentifier.of(hiveCatalog.getName(), \"default\", tableName);\n        CatalogTable catalogTable =\n                (CatalogTable) hiveCatalog.getTable(tableIdentifier.toObjectPath());\n        return FactoryUtil.createTableSource(\n                hiveCatalog,\n                tableIdentifier,\n                catalogTable,\n                tableEnv.getConfig().getConfiguration(),\n                Thread.currentThread().getContextClassLoader(),\n                false);\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    private FileSystemLookupFunction<HiveTablePartition> getLookupFunction(String tableName)\n            throws Exception {\n        TableEnvironmentInternal tableEnvInternal = (TableEnvironmentInternal) tableEnv;\n        ObjectIdentifier tableIdentifier =\n                ObjectIdentifier.of(hiveCatalog.getName(), \"default\", tableName);\n        CatalogTable catalogTable =\n                (CatalogTable) hiveCatalog.getTable(tableIdentifier.toObjectPath());\n        HiveLookupTableSource hiveTableSource =\n                (HiveLookupTableSource)\n                        FactoryUtil.createTableSource(\n                                hiveCatalog,\n                                tableIdentifier,\n                                tableEnvInternal\n                                        .getCatalogManager()\n                                        .resolveCatalogTable(catalogTable),\n                                tableEnv.getConfig().getConfiguration(),\n                                Thread.currentThread().getContextClassLoader(),\n                                false);\n        FileSystemLookupFunction<HiveTablePartition> lookupFunction =\n                (FileSystemLookupFunction<HiveTablePartition>)\n                        hiveTableSource.getLookupFunction(new int[][] {{0}});\n        return lookupFunction;\n    }\n","date":"2021-03-24 04:35:35","endLine":383,"groupId":"101080","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getLookupFunction","params":"(StringtableName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e3/90eda8b46cd832652915d477b4b12ebe8cee1d.src","preCode":"    private FileSystemLookupFunction<HiveTablePartition> getLookupFunction(String tableName)\n            throws Exception {\n        ObjectIdentifier tableIdentifier =\n                ObjectIdentifier.of(hiveCatalog.getName(), \"default\", tableName);\n        CatalogTable catalogTable =\n                (CatalogTable) hiveCatalog.getTable(tableIdentifier.toObjectPath());\n        HiveLookupTableSource hiveTableSource =\n                (HiveLookupTableSource)\n                        FactoryUtil.createTableSource(\n                                hiveCatalog,\n                                tableIdentifier,\n                                catalogTable,\n                                tableEnv.getConfig().getConfiguration(),\n                                Thread.currentThread().getContextClassLoader(),\n                                false);\n        FileSystemLookupFunction<HiveTablePartition> lookupFunction =\n                (FileSystemLookupFunction<HiveTablePartition>)\n                        hiveTableSource.getLookupFunction(new int[][] {{0}});\n        return lookupFunction;\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveLookupJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"73338e22bd0567169ce2636c8f9e3b87df783385","commitMessage":"@@@[FLINK-21913][table][connectors] Update DynamicTableFactory.Context to use ResolvedCatalogTable\n\nThis closes #15316.\n","date":"2021-03-24 04:35:35","modifiedFileCount":"45","status":"M","submitter":"Timo Walther"}]
