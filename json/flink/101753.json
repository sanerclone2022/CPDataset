[{"authorTime":"2020-10-19 18:42:16","codes":[{"authorDate":"2020-04-30 18:16:16","commitOrder":4,"curCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.SUCCEEDED));\n\t}\n","date":"2020-05-01 04:08:07","endLine":400,"groupId":"16304","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationSucceeds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/7aa2eb50bdc608b9c3be643976d21280a00f66.src","preCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.SUCCEEDED));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"NB"},{"authorDate":"2020-10-19 18:42:16","commitOrder":4,"curCode":"\tpublic void testClusterShutdownWhenApplicationGetsCancelled() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.CANCELED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createCancelledJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.CANCELED));\n\t}\n","date":"2020-10-26 21:25:34","endLine":459,"groupId":"16304","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationGetsCancelled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/df/1c78671d7d3e5048f44039bb1e38fdc817c406.src","preCode":"\tpublic void testClusterShutdownWhenApplicationGetsCancelled() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.CANCELED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createCancelledJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.CANCELED));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"B"}],"commitId":"021456dc2f396fffe7ef134001da1561f2ee15ee","commitMessage":"@@@[FLINK-19154] Pass DispatcherGateway to DispatcherBootstrap\n\nIn order to make sure that all calls from the\nApplicationDispatcherBootstrap are executed from the main\nthread.  we are passing the DispatcherGateway\nto the Bootstrap and not the Dispatcher itself.\n\nThis closes #13699\n","date":"2020-10-26 21:25:34","modifiedFileCount":"16","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-10-22 02:55:44","codes":[{"authorDate":"2020-10-22 02:55:44","commitOrder":5,"curCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t3, dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture = bootstrap.getClusterShutdownFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.SUCCEEDED));\n\t}\n","date":"2020-10-26 21:25:43","endLine":404,"groupId":"101753","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationSucceeds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/c8dbec4c9d8f262684317c5567d745b38988c0.src","preCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.SUCCEEDED));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"},{"authorDate":"2020-10-22 02:55:44","commitOrder":5,"curCode":"\tpublic void testClusterShutdownWhenApplicationGetsCancelled() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.CANCELED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createCancelledJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap =\n\t\t\t\tcreateApplicationDispatcherBootstrap(3, dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture = bootstrap.getClusterShutdownFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.CANCELED));\n\t}\n","date":"2020-10-26 21:25:43","endLine":458,"groupId":"101753","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationGetsCancelled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/c8dbec4c9d8f262684317c5567d745b38988c0.src","preCode":"\tpublic void testClusterShutdownWhenApplicationGetsCancelled() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.CANCELED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createCancelledJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.CANCELED));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"}],"commitId":"c5ec0b0abe09e097f0e79f126b749be22bee437a","commitMessage":"@@@[FLINK-19154] Merge ApplicationDispatcherBootstrap#initialize() with constructor.\n","date":"2020-10-26 21:25:43","modifiedFileCount":"17","status":"M","submitter":"Kostas Kloudas"}]
