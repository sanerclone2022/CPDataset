[{"authorTime":"2016-03-10 01:20:43","codes":[{"authorDate":"2016-03-10 01:20:43","commitOrder":1,"curCode":"\tpublic void testIdealCircumstances() throws Exception {\n\t\tOperatorExposingTask<IN> task = createTask();\n\t\tTypeInformation<IN> info = createTypeInfo();\n\t\tOneInputStreamTaskTestHarness<IN, IN> testHarness = new OneInputStreamTaskTestHarness<>(task, 1, 1, info, info);\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tstreamConfig.setCheckpointingEnabled(true);\n\t\tstreamConfig.setStreamOperator(createSink());\n\n\t\tint elementCounter = 1;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tArrayList<StreamTaskState> states = new ArrayList<>();\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\ttestHarness.endInput();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tverifyResultsIdealCircumstances(testHarness, task, (S) task.getOperator());\n\t}\n","date":"2016-06-16 22:58:04","endLine":120,"groupId":"50038","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdealCircumstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/3a387a70d556bcab2182b0c689f509f2e6ee2d.src","preCode":"\tpublic void testIdealCircumstances() throws Exception {\n\t\tOperatorExposingTask<IN> task = createTask();\n\t\tTypeInformation<IN> info = createTypeInfo();\n\t\tOneInputStreamTaskTestHarness<IN, IN> testHarness = new OneInputStreamTaskTestHarness<>(task, 1, 1, info, info);\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tstreamConfig.setCheckpointingEnabled(true);\n\t\tstreamConfig.setStreamOperator(createSink());\n\n\t\tint elementCounter = 1;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tArrayList<StreamTaskState> states = new ArrayList<>();\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\ttestHarness.endInput();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tverifyResultsIdealCircumstances(testHarness, task, (S) task.getOperator());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2016-03-10 01:20:43","commitOrder":1,"curCode":"\tpublic void testDataPersistenceUponMissedNotify() throws Exception {\n\t\tS sink = createSink();\n\t\tOperatorExposingTask<IN> task = createTask();\n\t\tTypeInformation<IN> info = createTypeInfo();\n\t\tOneInputStreamTaskTestHarness<IN, IN> testHarness = new OneInputStreamTaskTestHarness<>(task, 1, 1, info, info);\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tstreamConfig.setCheckpointingEnabled(true);\n\t\tstreamConfig.setStreamOperator(sink);\n\n\t\tint elementCounter = 1;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tArrayList<StreamTaskState> states = new ArrayList<>();\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\ttestHarness.endInput();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tverifyResultsDataPersistenceUponMissedNotify(testHarness, task, (S) task.getOperator());\n\t}\n","date":"2016-06-16 22:58:04","endLine":168,"groupId":"50038","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataPersistenceUponMissedNotify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/3a387a70d556bcab2182b0c689f509f2e6ee2d.src","preCode":"\tpublic void testDataPersistenceUponMissedNotify() throws Exception {\n\t\tS sink = createSink();\n\t\tOperatorExposingTask<IN> task = createTask();\n\t\tTypeInformation<IN> info = createTypeInfo();\n\t\tOneInputStreamTaskTestHarness<IN, IN> testHarness = new OneInputStreamTaskTestHarness<>(task, 1, 1, info, info);\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tstreamConfig.setCheckpointingEnabled(true);\n\t\tstreamConfig.setStreamOperator(sink);\n\n\t\tint elementCounter = 1;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tArrayList<StreamTaskState> states = new ArrayList<>();\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\ttestHarness.endInput();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tverifyResultsDataPersistenceUponMissedNotify(testHarness, task, (S) task.getOperator());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"b63e19b090cd9a1558db4c68c385e0ce947789e9","commitMessage":"@@@[FLINK-3332] Address pull request review comments\n\nThis closes #1771\n","date":"2016-06-16 22:58:04","modifiedFileCount":"9","status":"B","submitter":"zentol"},{"authorTime":"2016-08-11 17:59:07","codes":[{"authorDate":"2016-08-11 17:59:07","commitOrder":2,"curCode":"\tpublic void testIdealCircumstances() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsIdealCircumstances(testHarness, sink);\n\t}\n","date":"2016-09-01 01:10:01","endLine":89,"groupId":"39447","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdealCircumstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/203b5ac0b33f2a110c6744e5ef679d37b03d79.src","preCode":"\tpublic void testIdealCircumstances() throws Exception {\n\t\tOperatorExposingTask<IN> task = createTask();\n\t\tTypeInformation<IN> info = createTypeInfo();\n\t\tOneInputStreamTaskTestHarness<IN, IN> testHarness = new OneInputStreamTaskTestHarness<>(task, 1, 1, info, info);\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tstreamConfig.setCheckpointingEnabled(true);\n\t\tstreamConfig.setStreamOperator(createSink());\n\n\t\tint elementCounter = 1;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tArrayList<StreamTaskState> states = new ArrayList<>();\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\ttestHarness.endInput();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tverifyResultsIdealCircumstances(testHarness, task, (S) task.getOperator());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2016-08-11 17:59:07","commitOrder":2,"curCode":"\tpublic void testDataPersistenceUponMissedNotify() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsDataPersistenceUponMissedNotify(testHarness, sink);\n\t}\n","date":"2016-09-01 01:10:01","endLine":127,"groupId":"39447","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataPersistenceUponMissedNotify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/203b5ac0b33f2a110c6744e5ef679d37b03d79.src","preCode":"\tpublic void testDataPersistenceUponMissedNotify() throws Exception {\n\t\tS sink = createSink();\n\t\tOperatorExposingTask<IN> task = createTask();\n\t\tTypeInformation<IN> info = createTypeInfo();\n\t\tOneInputStreamTaskTestHarness<IN, IN> testHarness = new OneInputStreamTaskTestHarness<>(task, 1, 1, info, info);\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tstreamConfig.setCheckpointingEnabled(true);\n\t\tstreamConfig.setStreamOperator(sink);\n\n\t\tint elementCounter = 1;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tArrayList<StreamTaskState> states = new ArrayList<>();\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttask.notifyCheckpointComplete(states.size() - 1);\n\n\t\ttestHarness.endInput();\n\n\t\tstates.add(copyTaskState(task.getOperator().snapshotOperatorState(states.size(), 0)));\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tverifyResultsDataPersistenceUponMissedNotify(testHarness, task, (S) task.getOperator());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"847ead01f2f0aaf318b2b1ba8501bc697d245900","commitMessage":"@@@[FLINK-4381] Refactor State to Prepare For Key-Group State Backends\n","date":"2016-09-01 01:10:01","modifiedFileCount":"99","status":"M","submitter":"Stefan Richter"},{"authorTime":"2016-10-04 16:59:38","codes":[{"authorDate":"2016-10-04 16:59:38","commitOrder":3,"curCode":"\tpublic void testIdealCircumstances() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsIdealCircumstances(testHarness, sink);\n\t}\n","date":"2016-10-20 22:14:21","endLine":89,"groupId":"24771","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdealCircumstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3d/1e6e8926dcc9c0707d10feda9879c19605c9f2.src","preCode":"\tpublic void testIdealCircumstances() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsIdealCircumstances(testHarness, sink);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2016-10-04 16:59:38","commitOrder":3,"curCode":"\tpublic void testDataPersistenceUponMissedNotify() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsDataPersistenceUponMissedNotify(testHarness, sink);\n\t}\n","date":"2016-10-20 22:14:21","endLine":127,"groupId":"24771","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataPersistenceUponMissedNotify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3d/1e6e8926dcc9c0707d10feda9879c19605c9f2.src","preCode":"\tpublic void testDataPersistenceUponMissedNotify() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsDataPersistenceUponMissedNotify(testHarness, sink);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"cab9cd44eca83ef8cbcd2a2d070d8c79cb037977","commitMessage":"@@@[FLINK-4844] Partitionable Raw Keyed/Operator State\n","date":"2016-10-20 22:14:21","modifiedFileCount":"87","status":"M","submitter":"Stefan Richter"},{"authorTime":"2016-10-26 23:19:12","codes":[{"authorDate":"2016-10-26 23:19:12","commitOrder":4,"curCode":"\tpublic void testIdealCircumstances() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsIdealCircumstances(sink);\n\t}\n","date":"2016-12-08 19:27:14","endLine":83,"groupId":"102538","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdealCircumstances","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/d92afdaad4913ed228255d984929cad2f16951.src","preCode":"\tpublic void testIdealCircumstances() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsIdealCircumstances(testHarness, sink);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2016-10-26 23:19:12","commitOrder":4,"curCode":"\tpublic void testDataPersistenceUponMissedNotify() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshot(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsDataPersistenceUponMissedNotify(sink);\n\t}\n","date":"2016-12-08 19:27:14","endLine":121,"groupId":"102538","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataPersistenceUponMissedNotify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/d92afdaad4913ed228255d984929cad2f16951.src","preCode":"\tpublic void testDataPersistenceUponMissedNotify() throws Exception {\n\t\tS sink = createSink();\n\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(sink);\n\n\t\ttestHarness.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 1)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\n\t\tfor (int x = 0; x < 20; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 2)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness.snapshotLegacy(snapshotCount++, 0);\n\t\ttestHarness.notifyOfCompletedCheckpoint(snapshotCount - 1);\n\n\t\tverifyResultsDataPersistenceUponMissedNotify(testHarness, sink);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"4eb71927bc4f0832eb08a79394ad6864a3c2e142","commitMessage":"@@@[FLINK-5020] Make the GenericWriteAheadSink rescalable.\n\nIntegrates the new state abstractions with the GenericWriteAheadSink\nso that the latter can change its parallelism when resuming execution\nfrom a savepoint.  without geopardizing the provided guarantees.\n\nThis closes #2759\n","date":"2016-12-08 19:27:14","modifiedFileCount":"5","status":"M","submitter":"kl0u"}]
