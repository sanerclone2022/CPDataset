[{"authorTime":"2017-03-01 22:36:17","codes":[{"authorDate":"2017-03-01 22:36:17","commitOrder":7,"curCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 500;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\t\t\n\t\ttestHarness.open();\n\t\t\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\t\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\ttestHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":1340,"groupId":"8371","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLateness","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/8cb2e5ab2d2a952536d4a8fcb6d0fb155beb81.src","preCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 500;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\t\t\n\t\ttestHarness.open();\n\t\t\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\t\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\ttestHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1275,"status":"MB"},{"authorDate":"2017-03-01 22:36:17","commitOrder":7,"curCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 0;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":1473,"groupId":"9621","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSideOutputDueToLatenessTumbling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/8cb2e5ab2d2a952536d4a8fcb6d0fb155beb81.src","preCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 0;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1412,"status":"B"}],"commitId":"07a15d0e1647c79ae010ca6df5b1830a4087dd56","commitMessage":"@@@[FLINK-4460] Provide late-data output for window operations\n\nWe use side outputs to emit dropped late data.\n","date":"2017-03-18 14:44:17","modifiedFileCount":"8","status":"M","submitter":"Chen Qin"},{"authorTime":"2017-03-10 18:42:56","codes":[{"authorDate":"2017-03-10 18:42:56","commitOrder":8,"curCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 500;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\t\t\n\t\ttestHarness.open();\n\t\t\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\t\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\t(Iterable) testHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":1340,"groupId":"8371","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLateness","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8f/8667b3eadd1006616bcdd2e2604988436489ab.src","preCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 500;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\t\t\n\t\ttestHarness.open();\n\t\t\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\t\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\t(Iterable) testHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1275,"status":"MB"},{"authorDate":"2017-03-10 18:42:56","commitOrder":8,"curCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 0;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, (Iterable) testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":1473,"groupId":"9621","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSideOutputDueToLatenessTumbling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8f/8667b3eadd1006616bcdd2e2604988436489ab.src","preCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 0;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, (Iterable) testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1412,"status":"MB"}],"commitId":"c2afe1b7ba748ccdb1b4233321805f31a6465bc1","commitMessage":"@@@[FLINK-4460] Add WindowOperatorContractTest tests for late data emission\n","date":"2017-03-18 14:44:17","modifiedFileCount":"3","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2017-05-17 20:01:04","codes":[{"authorDate":"2017-05-17 20:01:04","commitOrder":9,"curCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 500;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\t(Iterable) testHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-05-23 04:22:24","endLine":1299,"groupId":"8371","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLateness","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/c6c6f9aeb78646d1c634a18d5b21eaf608a346.src","preCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 500;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\t\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\t(Iterable) testHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1234,"status":"M"},{"authorDate":"2017-05-17 20:01:04","commitOrder":9,"curCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 0;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, (Iterable) testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2017-05-23 04:22:24","endLine":1432,"groupId":"9621","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSideOutputDueToLatenessTumbling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/c6c6f9aeb78646d1c634a18d5b21eaf608a346.src","preCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int WINDOW_SIZE = 2;\n\t\tfinal long LATENESS = 0;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, (Iterable) testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1371,"status":"M"}],"commitId":"12b4185c6c09101b64e12a84c33dc4d28f95cff9","commitMessage":"@@@[FLINK-6603] [streaming] Enable checkstyle on test sources\n\nUpdates / reverts the import order by sections:\n- org.apache.flink.*\n- all other imports\n- javax.*\n- java.*\n- static imports\n\nAdds EmptyLineSeparator to enforce an extra newline (not enforced\nbetween field or local variable declarations).\n\nThis closes #3941\n","date":"2017-05-23 04:22:24","modifiedFileCount":"395","status":"M","submitter":"Greg Hogan"},{"authorTime":"2017-12-20 19:27:56","codes":[{"authorDate":"2017-12-20 19:27:56","commitOrder":10,"curCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 500;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\t(Iterable) testHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-01-06 12:30:12","endLine":1322,"groupId":"48221","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLateness","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c0/3207e7f1634926b7c5327931ad5fb6f82d91d2.src","preCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 500;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\t(Iterable) testHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1257,"status":"M"},{"authorDate":"2017-12-20 19:27:56","commitOrder":10,"curCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 0;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, (Iterable) testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2018-01-06 12:30:12","endLine":1455,"groupId":"37564","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSideOutputDueToLatenessTumbling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c0/3207e7f1634926b7c5327931ad5fb6f82d91d2.src","preCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 0;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, (Iterable) testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1394,"status":"M"}],"commitId":"091a37052b7045b3ed28c68bfea109024a5d1871","commitMessage":"@@@[FLINK-8298][tests] Properly shutdown MockEnvironment to release resources\n\nThis closes #5193.\n","date":"2018-01-06 12:30:12","modifiedFileCount":"9","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2018-05-04 23:15:51","codes":[{"authorDate":"2018-05-04 23:15:51","commitOrder":11,"curCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 500;\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\t\tSTRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\t(Iterable) testHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-05-05 00:48:16","endLine":1456,"groupId":"102612","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testLateness","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/28e4057503dad900453e1a33a86d3f5303b660.src","preCode":"\tpublic void testLateness() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 500;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tPurgingTrigger.of(EventTimeTrigger.create()),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> lateExpected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 500));\n\t\ttestHarness.processWatermark(new Watermark(1500));\n\n\t\texpected.add(new Watermark(1500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1300));\n\t\ttestHarness.processWatermark(new Watermark(2300));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(2300));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1997));\n\t\ttestHarness.processWatermark(new Watermark(6000));\n\n\t\t\r\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\texpected.add(new Watermark(6000));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processWatermark(new Watermark(7000));\n\n\t\tlateExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\texpected.add(new Watermark(7000));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\n\t\t\t\t\"SideOutput was not correct.\",\n\t\t\t\tlateExpected,\n\t\t\t\t(Iterable) testHarness.getSideOutput(lateOutputTag),\n\t\t\t\tnew Tuple2ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1393,"status":"M"},{"authorDate":"2018-05-04 23:15:51","commitOrder":11,"curCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 0;\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tSTRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, (Iterable) testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2018-05-05 00:48:16","endLine":1585,"groupId":"102612","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSideOutputDueToLatenessTumbling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/28e4057503dad900453e1a33a86d3f5303b660.src","preCode":"\tpublic void testSideOutputDueToLatenessTumbling() throws Exception {\n\t\tfinal int windowSize = 2;\n\t\tfinal long lateness = 0;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tlateOutputTag);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\t\tConcurrentLinkedQueue<Object> sideExpected = new ConcurrentLinkedQueue<>();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(1985));\n\n\t\texpected.add(new Watermark(1985));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1980));\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1999));\n\t\texpected.add(new Watermark(1999));\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\tsideExpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 2001));\n\t\ttestHarness.processWatermark(new Watermark(2999));\n\n\t\texpected.add(new Watermark(2999));\n\n\t\ttestHarness.processWatermark(new Watermark(3999));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(3999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"SideOutput was not correct.\", sideExpected, (Iterable) testHarness.getSideOutput(\n\t\t\t\tlateOutputTag), new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1526,"status":"M"}],"commitId":"c8fa8d025684c2225824c54a7285bbfdec7cfddc","commitMessage":"@@@[FLINK-9292] [core] Remove TypeInfoParser (part 1)\n","date":"2018-05-05 00:48:16","modifiedFileCount":"26","status":"M","submitter":"Stephan Ewen"}]
