[{"authorTime":"2018-06-04 18:49:43","codes":[{"authorDate":"2019-07-09 20:07:24","commitOrder":5,"curCode":"\tprivate <IN, OUT> SingleOutputStreamOperator<OUT> addAsyncOperatorLegacyChained(\n\t\tDataStream<IN> in,\n\t\tAsyncFunction<IN, OUT> func,\n\t\tlong timeout,\n\t\tint bufSize,\n\t\tAsyncDataStream.OutputMode mode) {\n\n\t\tTypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(\n\t\t\tfunc,\n\t\t\tAsyncFunction.class,\n\t\t\t0,\n\t\t\t1,\n\t\t\tnew int[]{1, 0},\n\t\t\tin.getType(),\n\t\t\tUtils.getCallLocationName(),\n\t\t\ttrue);\n\n\t\t\r\n\t\tAsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(\n\t\t\tin.getExecutionEnvironment().clean(func),\n\t\t\ttimeout,\n\t\t\tbufSize,\n\t\t\tmode);\n\n\t\toperator.setChainingStrategy(ChainingStrategy.ALWAYS);\n\n\t\treturn in.transform(\"async wait operator\", outTypeInfo, operator);\n\t}\n","date":"2019-07-09 20:07:24","endLine":1178,"groupId":"50377","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addAsyncOperatorLegacyChained","params":"(DataStream<IN>in@AsyncFunction<IN@OUT>func@longtimeout@intbufSize@AsyncDataStream.OutputModemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/05/df36235b01027c1b9772d36c9830e45d0733a2.src","preCode":"\tprivate <IN, OUT> SingleOutputStreamOperator<OUT> addAsyncOperatorLegacyChained(\n\t\tDataStream<IN> in,\n\t\tAsyncFunction<IN, OUT> func,\n\t\tlong timeout,\n\t\tint bufSize,\n\t\tAsyncDataStream.OutputMode mode) {\n\n\t\tTypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(\n\t\t\tfunc,\n\t\t\tAsyncFunction.class,\n\t\t\t0,\n\t\t\t1,\n\t\t\tnew int[]{1, 0},\n\t\t\tin.getType(),\n\t\t\tUtils.getCallLocationName(),\n\t\t\ttrue);\n\n\t\t\r\n\t\tAsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(\n\t\t\tin.getExecutionEnvironment().clean(func),\n\t\t\ttimeout,\n\t\t\tbufSize,\n\t\t\tmode);\n\n\t\toperator.setChainingStrategy(ChainingStrategy.ALWAYS);\n\n\t\treturn in.transform(\"async wait operator\", outTypeInfo, operator);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1151,"status":"B"},{"authorDate":"2018-06-04 18:49:43","commitOrder":5,"curCode":"\tprivate static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(\n\t\t\tDataStream<IN> in,\n\t\t\tAsyncFunction<IN, OUT> func,\n\t\t\tlong timeout,\n\t\t\tint bufSize,\n\t\t\tOutputMode mode) {\n\n\t\tTypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(\n\t\t\tfunc,\n\t\t\tAsyncFunction.class,\n\t\t\t0,\n\t\t\t1,\n\t\t\tnew int[]{1, 0},\n\t\t\tin.getType(),\n\t\t\tUtils.getCallLocationName(),\n\t\t\ttrue);\n\n\t\t\r\n\t\tAsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(\n\t\t\tin.getExecutionEnvironment().clean(func),\n\t\t\ttimeout,\n\t\t\tbufSize,\n\t\t\tmode);\n\n\t\treturn in.transform(\"async wait operator\", outTypeInfo, operator);\n\t}\n","date":"2018-07-20 14:06:07","endLine":88,"groupId":"50377","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addOperator","params":"(DataStream<IN>in@AsyncFunction<IN@OUT>func@longtimeout@intbufSize@OutputModemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a3/e28abd95e8f2e4f38e70f7c37f67d2c28fcff8.src","preCode":"\tprivate static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(\n\t\t\tDataStream<IN> in,\n\t\t\tAsyncFunction<IN, OUT> func,\n\t\t\tlong timeout,\n\t\t\tint bufSize,\n\t\t\tOutputMode mode) {\n\n\t\tTypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(\n\t\t\tfunc,\n\t\t\tAsyncFunction.class,\n\t\t\t0,\n\t\t\t1,\n\t\t\tnew int[]{1, 0},\n\t\t\tin.getType(),\n\t\t\tUtils.getCallLocationName(),\n\t\t\ttrue);\n\n\t\t\r\n\t\tAsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(\n\t\t\tin.getExecutionEnvironment().clean(func),\n\t\t\ttimeout,\n\t\t\tbufSize,\n\t\t\tmode);\n\n\t\treturn in.transform(\"async wait operator\", outTypeInfo, operator);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/AsyncDataStream.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"}],"commitId":"c773ce5ff1c7cfb4ee2537c873b24cde4b9a060a","commitMessage":"@@@[FLINK-13063] Temporary fix for AsyncWaitOperator consistency problems\n\nThe current implementation of AsyncWaitOperator can violate exactly-once and at-least once guarantees in some common scenarios. This commit provides a temporary fix by preventing the operator to be chained after other operators.\n\nThis closes #9034.\n\n","date":"2019-07-09 20:07:24","modifiedFileCount":"2","status":"M","submitter":"Stefan Richter"},{"authorTime":"2019-08-27 15:58:40","codes":[{"authorDate":"2019-08-27 15:58:40","commitOrder":6,"curCode":"\tprivate <IN, OUT> SingleOutputStreamOperator<OUT> addAsyncOperatorLegacyChained(\n\t\tDataStream<IN> in,\n\t\tAsyncFunction<IN, OUT> func,\n\t\tlong timeout,\n\t\tint bufSize,\n\t\tAsyncDataStream.OutputMode mode) {\n\n\t\tTypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(\n\t\t\tfunc,\n\t\t\tAsyncFunction.class,\n\t\t\t0,\n\t\t\t1,\n\t\t\tnew int[]{1, 0},\n\t\t\tin.getType(),\n\t\t\tUtils.getCallLocationName(),\n\t\t\ttrue);\n\n\t\t\r\n\t\tAsyncWaitOperatorFactory<IN, OUT> factory = new AsyncWaitOperatorFactory<>(\n\t\t\tin.getExecutionEnvironment().clean(func),\n\t\t\ttimeout,\n\t\t\tbufSize,\n\t\t\tmode);\n\n\t\tfactory.setChainingStrategy(ChainingStrategy.ALWAYS);\n\n\t\treturn in.transform(\"async wait operator\", outTypeInfo, factory);\n\t}\n","date":"2019-09-17 19:48:52","endLine":1038,"groupId":"103130","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addAsyncOperatorLegacyChained","params":"(DataStream<IN>in@AsyncFunction<IN@OUT>func@longtimeout@intbufSize@AsyncDataStream.OutputModemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bb/5e694433b8726b8a2243c0c98f102bc6b28a61.src","preCode":"\tprivate <IN, OUT> SingleOutputStreamOperator<OUT> addAsyncOperatorLegacyChained(\n\t\tDataStream<IN> in,\n\t\tAsyncFunction<IN, OUT> func,\n\t\tlong timeout,\n\t\tint bufSize,\n\t\tAsyncDataStream.OutputMode mode) {\n\n\t\tTypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(\n\t\t\tfunc,\n\t\t\tAsyncFunction.class,\n\t\t\t0,\n\t\t\t1,\n\t\t\tnew int[]{1, 0},\n\t\t\tin.getType(),\n\t\t\tUtils.getCallLocationName(),\n\t\t\ttrue);\n\n\t\t\r\n\t\tAsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(\n\t\t\tin.getExecutionEnvironment().clean(func),\n\t\t\ttimeout,\n\t\t\tbufSize,\n\t\t\tmode);\n\n\t\toperator.setChainingStrategy(ChainingStrategy.ALWAYS);\n\n\t\treturn in.transform(\"async wait operator\", outTypeInfo, operator);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1011,"status":"M"},{"authorDate":"2019-08-27 15:58:40","commitOrder":6,"curCode":"\tprivate static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(\n\t\t\tDataStream<IN> in,\n\t\t\tAsyncFunction<IN, OUT> func,\n\t\t\tlong timeout,\n\t\t\tint bufSize,\n\t\t\tOutputMode mode) {\n\n\t\tTypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(\n\t\t\tfunc,\n\t\t\tAsyncFunction.class,\n\t\t\t0,\n\t\t\t1,\n\t\t\tnew int[]{1, 0},\n\t\t\tin.getType(),\n\t\t\tUtils.getCallLocationName(),\n\t\t\ttrue);\n\n\t\t\r\n\t\tAsyncWaitOperatorFactory<IN, OUT> operatorFactory = new AsyncWaitOperatorFactory<>(\n\t\t\tin.getExecutionEnvironment().clean(func),\n\t\t\ttimeout,\n\t\t\tbufSize,\n\t\t\tmode);\n\n\t\treturn in.transform(\"async wait operator\", outTypeInfo, operatorFactory);\n\t}\n","date":"2019-09-17 19:48:52","endLine":89,"groupId":"103130","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addOperator","params":"(DataStream<IN>in@AsyncFunction<IN@OUT>func@longtimeout@intbufSize@OutputModemode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/06649adb399475ae0e21d82dce890e446528d2.src","preCode":"\tprivate static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(\n\t\t\tDataStream<IN> in,\n\t\t\tAsyncFunction<IN, OUT> func,\n\t\t\tlong timeout,\n\t\t\tint bufSize,\n\t\t\tOutputMode mode) {\n\n\t\tTypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(\n\t\t\tfunc,\n\t\t\tAsyncFunction.class,\n\t\t\t0,\n\t\t\t1,\n\t\t\tnew int[]{1, 0},\n\t\t\tin.getType(),\n\t\t\tUtils.getCallLocationName(),\n\t\t\ttrue);\n\n\t\t\r\n\t\tAsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(\n\t\t\tin.getExecutionEnvironment().clean(func),\n\t\t\ttimeout,\n\t\t\tbufSize,\n\t\t\tmode);\n\n\t\treturn in.transform(\"async wait operator\", outTypeInfo, operator);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/api/datastream/AsyncDataStream.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"14555ba53430b46a68771d87e3cdffd6ef2ce313","commitMessage":"@@@[FLINK-12958][runtime] Adding processing of downstream messages in AsyncWaitOperator's wait loops\n","date":"2019-09-17 19:48:52","modifiedFileCount":"6","status":"M","submitter":"Arvid Heise"}]
