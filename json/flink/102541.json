[{"authorTime":"2016-10-26 23:19:12","codes":[{"authorDate":"2016-10-26 23:19:12","commitOrder":1,"curCode":"\tpublic void testScalingDown() throws Exception {\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 2, 0);\n\t\ttestHarness1.open();\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 1);\n\t\ttestHarness2.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness2.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorStateHandles snapshot1 = testHarness1.snapshot(snapshotCount, 0);\n\t\tOperatorStateHandles snapshot2 = testHarness2.snapshot(snapshotCount, 0);\n\n\t\t\r\n\t\tOperatorStateHandles mergedSnapshot = AbstractStreamOperatorTestHarness\n\t\t\t.repackageState(snapshot1, snapshot2);\n\n\t\ttestHarness1.close();\n\t\ttestHarness2.close();\n\n\t\t\r\n\t\t\r\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> mergedTestHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 1, 0);\n\n\t\tmergedTestHarness.setup();\n\t\tmergedTestHarness.initializeState(mergedSnapshot);\n\t\tmergedTestHarness.open();\n\n\t\tfor (int x = 0; x < 12; x++) {\n\t\t\tmergedTestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tsnapshotCount++;\n\t\tmergedTestHarness.snapshot(snapshotCount, 1);\n\t\tmergedTestHarness.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 1, 33);\n\t\tmergedTestHarness.close();\n\t}\n","date":"2016-12-08 19:27:14","endLine":227,"groupId":"11763","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testScalingDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/d92afdaad4913ed228255d984929cad2f16951.src","preCode":"\tpublic void testScalingDown() throws Exception {\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 2, 0);\n\t\ttestHarness1.open();\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 1);\n\t\ttestHarness2.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness2.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorStateHandles snapshot1 = testHarness1.snapshot(snapshotCount, 0);\n\t\tOperatorStateHandles snapshot2 = testHarness2.snapshot(snapshotCount, 0);\n\n\t\t\r\n\t\tOperatorStateHandles mergedSnapshot = AbstractStreamOperatorTestHarness\n\t\t\t.repackageState(snapshot1, snapshot2);\n\n\t\ttestHarness1.close();\n\t\ttestHarness2.close();\n\n\t\t\r\n\t\t\r\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> mergedTestHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 1, 0);\n\n\t\tmergedTestHarness.setup();\n\t\tmergedTestHarness.initializeState(mergedSnapshot);\n\t\tmergedTestHarness.open();\n\n\t\tfor (int x = 0; x < 12; x++) {\n\t\t\tmergedTestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tsnapshotCount++;\n\t\tmergedTestHarness.snapshot(snapshotCount, 1);\n\t\tmergedTestHarness.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 1, 33);\n\t\tmergedTestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"},{"authorDate":"2016-10-26 23:19:12","commitOrder":1,"curCode":"\tpublic void testScalingUp() throws Exception {\n\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 1, 0);\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\ttestHarness1.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness1.snapshot(++snapshotCount, 0);\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness1.snapshot(++snapshotCount, 0);\n\n\t\ttestHarness1.close();\n\n\t\t\r\n\t\tverifyResultsWhenReScaling(sink1, 0, -1);\n\n\t\t\r\n\t\t\r\n\n\t\t++snapshotCount;\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 0);\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink2, 1, 10);\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness3 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 2, 1);\n\n\t\ttestHarness3.setup();\n\t\ttestHarness3.initializeState(snapshot);\n\t\ttestHarness3.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness3.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness3.snapshot(snapshotCount, 1);\n\t\ttestHarness3.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 11, 31);\n\n\t\ttestHarness2.close();\n\t\ttestHarness3.close();\n\t}\n","date":"2016-12-08 19:27:14","endLine":301,"groupId":"11765","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScalingUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/d92afdaad4913ed228255d984929cad2f16951.src","preCode":"\tpublic void testScalingUp() throws Exception {\n\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 1, 0);\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\ttestHarness1.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness1.snapshot(++snapshotCount, 0);\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness1.snapshot(++snapshotCount, 0);\n\n\t\ttestHarness1.close();\n\n\t\t\r\n\t\tverifyResultsWhenReScaling(sink1, 0, -1);\n\n\t\t\r\n\t\t\r\n\n\t\t++snapshotCount;\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 0);\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink2, 1, 10);\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness3 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 2, 1);\n\n\t\ttestHarness3.setup();\n\t\ttestHarness3.initializeState(snapshot);\n\t\ttestHarness3.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness3.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness3.snapshot(snapshotCount, 1);\n\t\ttestHarness3.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 11, 31);\n\n\t\ttestHarness2.close();\n\t\ttestHarness3.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"}],"commitId":"4eb71927bc4f0832eb08a79394ad6864a3c2e142","commitMessage":"@@@[FLINK-5020] Make the GenericWriteAheadSink rescalable.\n\nIntegrates the new state abstractions with the GenericWriteAheadSink\nso that the latter can change its parallelism when resuming execution\nfrom a savepoint.  without geopardizing the provided guarantees.\n\nThis closes #2759\n","date":"2016-12-08 19:27:14","modifiedFileCount":"5","status":"B","submitter":"kl0u"},{"authorTime":"2018-02-23 17:36:09","codes":[{"authorDate":"2018-02-23 17:36:09","commitOrder":2,"curCode":"\tpublic void testScalingDown() throws Exception {\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 2, 0);\n\t\ttestHarness1.open();\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 1);\n\t\ttestHarness2.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness2.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot1 = testHarness1.snapshot(snapshotCount, 0);\n\t\tOperatorSubtaskState snapshot2 = testHarness2.snapshot(snapshotCount, 0);\n\n\t\t\r\n\t\tOperatorSubtaskState mergedSnapshot = AbstractStreamOperatorTestHarness\n\t\t\t.repackageState(snapshot1, snapshot2);\n\n\t\ttestHarness1.close();\n\t\ttestHarness2.close();\n\n\t\t\r\n\t\t\r\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> mergedTestHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 1, 0);\n\n\t\tmergedTestHarness.setup();\n\t\tmergedTestHarness.initializeState(mergedSnapshot);\n\t\tmergedTestHarness.open();\n\n\t\tfor (int x = 0; x < 12; x++) {\n\t\t\tmergedTestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tsnapshotCount++;\n\t\tmergedTestHarness.snapshot(snapshotCount, 1);\n\t\tmergedTestHarness.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 1, 33);\n\t\tmergedTestHarness.close();\n\t}\n","date":"2018-02-25 22:10:28","endLine":230,"groupId":"11763","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testScalingDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/bce364b0430294fb36d975bd7985d931178e52.src","preCode":"\tpublic void testScalingDown() throws Exception {\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 2, 0);\n\t\ttestHarness1.open();\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 1);\n\t\ttestHarness2.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness2.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorStateHandles snapshot1 = testHarness1.snapshot(snapshotCount, 0);\n\t\tOperatorStateHandles snapshot2 = testHarness2.snapshot(snapshotCount, 0);\n\n\t\t\r\n\t\tOperatorStateHandles mergedSnapshot = AbstractStreamOperatorTestHarness\n\t\t\t.repackageState(snapshot1, snapshot2);\n\n\t\ttestHarness1.close();\n\t\ttestHarness2.close();\n\n\t\t\r\n\t\t\r\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> mergedTestHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 1, 0);\n\n\t\tmergedTestHarness.setup();\n\t\tmergedTestHarness.initializeState(mergedSnapshot);\n\t\tmergedTestHarness.open();\n\n\t\tfor (int x = 0; x < 12; x++) {\n\t\t\tmergedTestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tsnapshotCount++;\n\t\tmergedTestHarness.snapshot(snapshotCount, 1);\n\t\tmergedTestHarness.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 1, 33);\n\t\tmergedTestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2018-02-23 17:36:09","commitOrder":2,"curCode":"\tpublic void testScalingUp() throws Exception {\n\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 1, 0);\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\ttestHarness1.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness1.snapshot(++snapshotCount, 0);\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness1.snapshot(++snapshotCount, 0);\n\n\t\ttestHarness1.close();\n\n\t\t\r\n\t\tverifyResultsWhenReScaling(sink1, 0, -1);\n\n\t\t\r\n\t\t\r\n\n\t\t++snapshotCount;\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 0);\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink2, 1, 10);\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness3 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 2, 1);\n\n\t\ttestHarness3.setup();\n\t\ttestHarness3.initializeState(snapshot);\n\t\ttestHarness3.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness3.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness3.snapshot(snapshotCount, 1);\n\t\ttestHarness3.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 11, 31);\n\n\t\ttestHarness2.close();\n\t\ttestHarness3.close();\n\t}\n","date":"2018-02-25 22:10:28","endLine":304,"groupId":"11765","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScalingUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/bce364b0430294fb36d975bd7985d931178e52.src","preCode":"\tpublic void testScalingUp() throws Exception {\n\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 1, 0);\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\ttestHarness1.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness1.snapshot(++snapshotCount, 0);\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness1.snapshot(++snapshotCount, 0);\n\n\t\ttestHarness1.close();\n\n\t\t\r\n\t\tverifyResultsWhenReScaling(sink1, 0, -1);\n\n\t\t\r\n\t\t\r\n\n\t\t++snapshotCount;\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 0);\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink2, 1, 10);\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness3 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 2, 1);\n\n\t\ttestHarness3.setup();\n\t\ttestHarness3.initializeState(snapshot);\n\t\ttestHarness3.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness3.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness3.snapshot(snapshotCount, 1);\n\t\ttestHarness3.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 11, 31);\n\n\t\ttestHarness2.close();\n\t\ttestHarness3.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"617e67c2f540b62b97ca5198b6a5c42b89b6f392","commitMessage":"@@@[hotfix] Remove outdated class OperatorStateHandles and replace it with OperatorSubtaskState\n","date":"2018-02-25 22:10:28","modifiedFileCount":"34","status":"M","submitter":"Stefan Richter"},{"authorTime":"2019-02-23 03:19:12","codes":[{"authorDate":"2019-02-23 03:19:12","commitOrder":3,"curCode":"\tpublic void testScalingDown() throws Exception {\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, maxParallelism, 2, 0);\n\t\ttestHarness1.open();\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, maxParallelism, 2, 1);\n\t\ttestHarness2.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness2.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot1 = testHarness1.snapshot(snapshotCount, 0);\n\t\tOperatorSubtaskState snapshot2 = testHarness2.snapshot(snapshotCount, 0);\n\n\t\t\r\n\t\tOperatorSubtaskState mergedSnapshot = AbstractStreamOperatorTestHarness\n\t\t\t.repackageState(snapshot1, snapshot2);\n\n\t\ttestHarness1.close();\n\t\ttestHarness2.close();\n\n\t\t\r\n\t\t\r\n\n\t\tOperatorSubtaskState initState = AbstractStreamOperatorTestHarness.repartitionOperatorState(\n\t\t\tmergedSnapshot, maxParallelism, 2, 1, 0);\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> mergedTestHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, maxParallelism, 1, 0);\n\n\t\tmergedTestHarness.setup();\n\t\tmergedTestHarness.initializeState(initState);\n\t\tmergedTestHarness.open();\n\n\t\tfor (int x = 0; x < 12; x++) {\n\t\t\tmergedTestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tsnapshotCount++;\n\t\tmergedTestHarness.snapshot(snapshotCount, 1);\n\t\tmergedTestHarness.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 1, 33);\n\t\tmergedTestHarness.close();\n\t}\n","date":"2019-02-23 03:19:12","endLine":235,"groupId":"102541","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testScalingDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d7/4977d8fcc1a30b0c276de13b81e444bf53f877.src","preCode":"\tpublic void testScalingDown() throws Exception {\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 2, 0);\n\t\ttestHarness1.open();\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 1);\n\t\ttestHarness2.open();\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness2.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot1 = testHarness1.snapshot(snapshotCount, 0);\n\t\tOperatorSubtaskState snapshot2 = testHarness2.snapshot(snapshotCount, 0);\n\n\t\t\r\n\t\tOperatorSubtaskState mergedSnapshot = AbstractStreamOperatorTestHarness\n\t\t\t.repackageState(snapshot1, snapshot2);\n\n\t\ttestHarness1.close();\n\t\ttestHarness2.close();\n\n\t\t\r\n\t\t\r\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> mergedTestHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 1, 0);\n\n\t\tmergedTestHarness.setup();\n\t\tmergedTestHarness.initializeState(mergedSnapshot);\n\t\tmergedTestHarness.open();\n\n\t\tfor (int x = 0; x < 12; x++) {\n\t\t\tmergedTestHarness.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\tsnapshotCount++;\n\t\tmergedTestHarness.snapshot(snapshotCount, 1);\n\t\tmergedTestHarness.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 1, 33);\n\t\tmergedTestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2019-02-23 03:19:12","commitOrder":3,"curCode":"\tpublic void testScalingUp() throws Exception {\n\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, maxParallelism, 1, 0);\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\ttestHarness1.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness1.snapshot(++snapshotCount, 0);\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness1.snapshot(++snapshotCount, 0);\n\n\t\ttestHarness1.close();\n\n\t\t\r\n\t\tverifyResultsWhenReScaling(sink1, 0, -1);\n\n\t\t\r\n\t\t\r\n\n\t\tOperatorSubtaskState initState1 = AbstractStreamOperatorTestHarness.repartitionOperatorState(\n\t\t\tsnapshot, maxParallelism, 1, 2, 0);\n\n\t\tOperatorSubtaskState initState2 = AbstractStreamOperatorTestHarness.repartitionOperatorState(\n\t\t\tsnapshot, maxParallelism, 1, 2, 1);\n\n\t\t++snapshotCount;\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, maxParallelism, 2, 0);\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(initState1);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink2, 1, 10);\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness3 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, maxParallelism, 2, 1);\n\n\t\ttestHarness3.setup();\n\t\ttestHarness3.initializeState(initState2);\n\t\ttestHarness3.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness3.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness3.snapshot(snapshotCount, 1);\n\t\ttestHarness3.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 11, 31);\n\n\t\ttestHarness2.close();\n\t\ttestHarness3.close();\n\t}\n","date":"2019-02-23 03:19:12","endLine":315,"groupId":"102541","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testScalingUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d7/4977d8fcc1a30b0c276de13b81e444bf53f877.src","preCode":"\tpublic void testScalingUp() throws Exception {\n\n\t\tS sink1 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness1 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink1, 10, 1, 0);\n\n\t\tint elementCounter = 1;\n\t\tint snapshotCount = 0;\n\n\t\ttestHarness1.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\t\ttestHarness1.snapshot(++snapshotCount, 0);\n\n\t\tfor (int x = 0; x < 11; x++) {\n\t\t\ttestHarness1.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness1.snapshot(++snapshotCount, 0);\n\n\t\ttestHarness1.close();\n\n\t\t\r\n\t\tverifyResultsWhenReScaling(sink1, 0, -1);\n\n\t\t\r\n\t\t\r\n\n\t\t++snapshotCount;\n\n\t\tS sink2 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness2 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink2, 10, 2, 0);\n\n\t\ttestHarness2.setup();\n\t\ttestHarness2.initializeState(snapshot);\n\t\ttestHarness2.open();\n\n\t\ttestHarness2.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink2, 1, 10);\n\n\t\tS sink3 = createSink();\n\t\tOneInputStreamOperatorTestHarness<IN, IN> testHarness3 =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(sink3, 10, 2, 1);\n\n\t\ttestHarness3.setup();\n\t\ttestHarness3.initializeState(snapshot);\n\t\ttestHarness3.open();\n\n\t\t\r\n\n\t\tfor (int x = 0; x < 10; x++) {\n\t\t\ttestHarness3.processElement(new StreamRecord<>(generateValue(elementCounter, 0)));\n\t\t\telementCounter++;\n\t\t}\n\n\t\ttestHarness3.snapshot(snapshotCount, 1);\n\t\ttestHarness3.notifyOfCompletedCheckpoint(snapshotCount);\n\n\t\tverifyResultsWhenReScaling(sink3, 11, 31);\n\n\t\ttestHarness2.close();\n\t\ttestHarness3.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/WriteAheadSinkTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"bdb776035f7266916e9debc7a0d4e7cc5cb1dfd3","commitMessage":"@@@[FLINK-11618][state] Refactor operator state repartition mechanism\n\nThis closes #7711.\n","date":"2019-02-23 03:19:12","modifiedFileCount":"20","status":"M","submitter":"Yun Tang"}]
