[{"authorTime":"2020-02-12 05:58:57","codes":[{"authorDate":"2020-02-12 05:58:57","commitOrder":1,"curCode":"  protected List<String> getChildren(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    try {\n      List<String> children = retryUntilConnected(new Callable<List<String>>() {\n        @Override\n        public List<String> call() throws Exception {\n          return getConnection().getChildren(path, watch);\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return children;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"getChildren, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","date":"2020-02-12 05:58:57","endLine":997,"groupId":"6675","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getChildren","params":"(finalStringpath@finalbooleanwatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/07c3f396ab2de6a22d4ce565a5cdea922faf61.src","preCode":"  protected List<String> getChildren(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    try {\n      List<String> children = retryUntilConnected(new Callable<List<String>>() {\n        @Override\n        public List<String> call() throws Exception {\n          return getConnection().getChildren(path, watch);\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return children;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"getChildren, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":974,"status":"B"},{"authorDate":"2020-02-12 05:58:57","commitOrder":1,"curCode":"  protected boolean exists(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    try {\n      boolean exists = retryUntilConnected(new Callable<Boolean>() {\n        @Override\n        public Boolean call() throws Exception {\n          return getConnection().exists(path, watch);\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return exists;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"exists, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","date":"2020-02-12 05:58:57","endLine":1039,"groupId":"7117","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"exists","params":"(finalStringpath@finalbooleanwatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/07c3f396ab2de6a22d4ce565a5cdea922faf61.src","preCode":"  protected boolean exists(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    try {\n      boolean exists = retryUntilConnected(new Callable<Boolean>() {\n        @Override\n        public Boolean call() throws Exception {\n          return getConnection().exists(path, watch);\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return exists;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"exists, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1016,"status":"B"}],"commitId":"b227b3b72b3ed0e347464f8d8e5279365a6e5acb","commitMessage":"@@@Add metrics-common.  zookeeper-api.  helix-common modules (#684)\n\nWe want to create a new module called zookeeper-api in order to decouple Helix's ZooKeeper APIs from helix-core. The goal is to enable non-Helix applications to use Helix's ZooKeeper APIs. This change also allows for better modularity and separation of concerns.","date":"2020-02-12 05:58:57","modifiedFileCount":"361","status":"B","submitter":"Hunter Lee"},{"authorTime":"2020-02-12 05:58:57","codes":[{"authorDate":"2020-07-24 02:03:54","commitOrder":2,"curCode":"  protected List<String> getChildren(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n\n    try {\n      List<String> children = retryUntilConnected(new Callable<List<String>>() {\n        private int connectionLossRetryCount = 0;\n\n        @Override\n        public List<String> call() throws Exception {\n          try {\n            return getConnection().getChildren(path, watch);\n          } catch (ConnectionLossException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            ++connectionLossRetryCount;\n            if (connectionLossRetryCount >= 3) {\n              checkNumChildrenLimit(path);\n              connectionLossRetryCount = 0;\n            }\n\n            \r\n            throw e;\n          }\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return children;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"getChildren, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","date":"2020-07-24 02:03:54","endLine":1072,"groupId":"2098","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getChildren","params":"(finalStringpath@finalbooleanwatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7a/4829d64f2adeb19767fbab4d0ed566242d3a4d.src","preCode":"  protected List<String> getChildren(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    try {\n      List<String> children = retryUntilConnected(new Callable<List<String>>() {\n        @Override\n        public List<String> call() throws Exception {\n          return getConnection().getChildren(path, watch);\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return children;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"getChildren, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1027,"status":"M"},{"authorDate":"2020-02-12 05:58:57","commitOrder":2,"curCode":"  protected boolean exists(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    try {\n      boolean exists = retryUntilConnected(new Callable<Boolean>() {\n        @Override\n        public Boolean call() throws Exception {\n          return getConnection().exists(path, watch);\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return exists;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"exists, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","date":"2020-02-12 05:58:57","endLine":1039,"groupId":"7117","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"exists","params":"(finalStringpath@finalbooleanwatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/07c3f396ab2de6a22d4ce565a5cdea922faf61.src","preCode":"  protected boolean exists(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    try {\n      boolean exists = retryUntilConnected(new Callable<Boolean>() {\n        @Override\n        public Boolean call() throws Exception {\n          return getConnection().exists(path, watch);\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return exists;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"exists, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1016,"status":"N"}],"commitId":"23905dd751eea8cba6f0916e1c577c80109adc9f","commitMessage":"@@@ZkClient should not keep retrying getChildren() due to large number of children (#1109)\n\nFor ZkClient's getChildren() operation.  if there are a large number of children and the response packet size exceeds jute.maxbuffer default value 4MB on zk client side.  ZkClient will get a ConnectionLossException and keep retrying connecting to ZK. The consequence is.  the infinite retry may cause heavy GC on ZK server and kill ZK server.\n\nThis commit implements a workaround to exit retry loop for getChildren() if a large number of children cause connection loss.","date":"2020-07-24 02:03:54","modifiedFileCount":"2","status":"M","submitter":"Huizhi Lu"},{"authorTime":"2020-09-24 05:46:09","codes":[{"authorDate":"2020-09-24 05:46:09","commitOrder":3,"curCode":"  protected List<String> getChildren(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n\n    try {\n      List<String> children = retryUntilConnected(new Callable<List<String>>() {\n        private int connectionLossRetryCount = 0;\n\n        @Override\n        public List<String> call() throws Exception {\n          try {\n            return getConnection().getChildren(path, watch);\n          } catch (ConnectionLossException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            ++connectionLossRetryCount;\n            if (connectionLossRetryCount >= 3) {\n              checkNumChildrenLimit(path);\n              connectionLossRetryCount = 0;\n            }\n\n            \r\n            throw e;\n          }\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return children;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"zkclient {} getChildren, path {} time: {} ms\", _uid, path, (endT - startT) );\n      }\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":1087,"groupId":"101019","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getChildren","params":"(finalStringpath@finalbooleanwatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/18/0fcdd4e9b16b81a61745538a443b9382a8b461.src","preCode":"  protected List<String> getChildren(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n\n    try {\n      List<String> children = retryUntilConnected(new Callable<List<String>>() {\n        private int connectionLossRetryCount = 0;\n\n        @Override\n        public List<String> call() throws Exception {\n          try {\n            return getConnection().getChildren(path, watch);\n          } catch (ConnectionLossException e) {\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            ++connectionLossRetryCount;\n            if (connectionLossRetryCount >= 3) {\n              checkNumChildrenLimit(path);\n              connectionLossRetryCount = 0;\n            }\n\n            \r\n            throw e;\n          }\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return children;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"getChildren, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1042,"status":"M"},{"authorDate":"2020-09-24 05:46:09","commitOrder":3,"curCode":"  protected boolean exists(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    try {\n      boolean exists = retryUntilConnected(new Callable<Boolean>() {\n        @Override\n        public Boolean call() throws Exception {\n          return getConnection().exists(path, watch);\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return exists;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"zkclient exists, path: {}, time: {} ms\", _uid, path, (endT - startT));\n      }\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":1129,"groupId":"101019","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"exists","params":"(finalStringpath@finalbooleanwatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/18/0fcdd4e9b16b81a61745538a443b9382a8b461.src","preCode":"  protected boolean exists(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    try {\n      boolean exists = retryUntilConnected(new Callable<Boolean>() {\n        @Override\n        public Boolean call() throws Exception {\n          return getConnection().exists(path, watch);\n        }\n      });\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return exists;\n    } catch (ZkNoNodeException e) {\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"exists, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1106,"status":"M"}],"commitId":"7028bf36a45b2c03d92193ef69d74324171db73d","commitMessage":"@@@Enhance logging for CallbackHandler and Zkclient (#1355)\n\nThis commit adds a unique id to each method's logging to help the\ncorrelation and track the callback handler and zkClient's life cycle.","date":"2020-09-24 05:46:09","modifiedFileCount":"2","status":"M","submitter":"kaisun2000"}]
