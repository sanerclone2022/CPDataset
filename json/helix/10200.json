[{"authorTime":"2013-04-13 08:49:36","codes":[{"authorDate":"2013-08-22 04:42:57","commitOrder":3,"curCode":"  public static void setupCluster(String clusterName, String ZkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance)\n      throws Exception {\n    ZkClient zkClient = new ZkClient(ZkAddr);\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n      zkClient.deleteRecursive(\"/\" + clusterName);\n    }\n\n    ClusterSetup setupTool = new ClusterSetup(ZkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < nodesNb; i++) {\n      int port = startPort + i;\n      setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n    }\n\n    for (int i = 0; i < resourceNb; i++) {\n      String resourceName = resourceNamePrefix + i;\n      setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef,\n          mode.toString());\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n      }\n    }\n    zkClient.close();\n  }\n","date":"2013-08-22 04:42:57","endLine":380,"groupId":"3271","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@StringZkAddr@intstartPort@StringparticipantNamePrefix@StringresourceNamePrefix@intresourceNb@intpartitionNb@intnodesNb@intreplica@StringstateModelDef@RebalanceModemode@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/4749edf02692e0eea3a0c86d46f71417e1370f.src","preCode":"  public static void setupCluster(String clusterName, String ZkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance)\n      throws Exception {\n    ZkClient zkClient = new ZkClient(ZkAddr);\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n      zkClient.deleteRecursive(\"/\" + clusterName);\n    }\n\n    ClusterSetup setupTool = new ClusterSetup(ZkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < nodesNb; i++) {\n      int port = startPort + i;\n      setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n    }\n\n    for (int i = 0; i < resourceNb; i++) {\n      String resourceName = resourceNamePrefix + i;\n      setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef,\n          mode.toString());\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n      }\n    }\n    zkClient.close();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"B"},{"authorDate":"2013-04-13 08:49:36","commitOrder":3,"curCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception\n  {\n    ZkClient zkClient = new ZkClient(zkAddr);\n    zkClient.setZkSerializer(new ZNRecordSerializer());\n\n    \r\n    String clusterName = uniqClusterName;\n    if (zkClient.exists(\"/\" + clusterName))\n    {\n      LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up zk; deleting it\");\n      zkClient.deleteRecursive(\"/\" + clusterName);\n    }\n\n    if (_testInfoMap.containsKey(uniqClusterName))\n    {\n      LOG.warn(\"test info already exists:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up test info map; removing it\");\n      _testInfoMap.remove(uniqClusterName);\n    }\n    TestInfo testInfo = new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource,\n        numInstances, replica);\n    _testInfoMap.put(uniqClusterName, testInfo);\n\n    ClusterSetup setupTool = new ClusterSetup(zkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < numInstances; i++)\n    {\n      int port = START_PORT + i;\n      setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n    }\n\n    for (int i = 0; i < numResources; i++)\n    {\n      String dbName = TEST_DB_PREFIX + i;\n      setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource,\n          STATE_MODEL);\n      if (doRebalance)\n      {\n        setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    }\n  }\n","date":"2013-04-13 08:49:36","endLine":182,"groupId":"1378","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringuniqClusterName@StringzkAddr@intnumResources@intnumPartitionsPerResource@intnumInstances@intreplica@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/74/b3bdca4c4105535b9920ee6ac5205708f0371c.src","preCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception\n  {\n    ZkClient zkClient = new ZkClient(zkAddr);\n    zkClient.setZkSerializer(new ZNRecordSerializer());\n\n    \r\n    String clusterName = uniqClusterName;\n    if (zkClient.exists(\"/\" + clusterName))\n    {\n      LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up zk; deleting it\");\n      zkClient.deleteRecursive(\"/\" + clusterName);\n    }\n\n    if (_testInfoMap.containsKey(uniqClusterName))\n    {\n      LOG.warn(\"test info already exists:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up test info map; removing it\");\n      _testInfoMap.remove(uniqClusterName);\n    }\n    TestInfo testInfo = new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource,\n        numInstances, replica);\n    _testInfoMap.put(uniqClusterName, testInfo);\n\n    ClusterSetup setupTool = new ClusterSetup(zkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < numInstances; i++)\n    {\n      int port = START_PORT + i;\n      setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n    }\n\n    for (int i = 0; i < numResources; i++)\n    {\n      String dbName = TEST_DB_PREFIX + i;\n      setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource,\n          STATE_MODEL);\n      if (doRebalance)\n      {\n        setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDriver.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"NB"}],"commitId":"f414aad4c9b26fc767eaf373f7691f8e0487a598","commitMessage":"@@@[HELIX-198] Unify helix code style.  rb=13710\n","date":"2013-08-22 04:42:57","modifiedFileCount":"597","status":"M","submitter":"zzhang"},{"authorTime":"2018-03-09 06:04:42","codes":[{"authorDate":"2018-03-09 06:04:42","commitOrder":4,"curCode":"  public static void setupCluster(String clusterName, String ZkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance)\n      throws Exception {\n    ZkClient zkClient = new ZkClient(ZkAddr);\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n      zkClient.deleteRecursively(\"/\" + clusterName);\n    }\n\n    ClusterSetup setupTool = new ClusterSetup(ZkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < nodesNb; i++) {\n      int port = startPort + i;\n      setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n    }\n\n    for (int i = 0; i < resourceNb; i++) {\n      String resourceName = resourceNamePrefix + i;\n      setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef,\n          mode.toString());\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n      }\n    }\n    zkClient.close();\n  }\n","date":"2018-03-20 07:43:31","endLine":288,"groupId":"3271","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@StringZkAddr@intstartPort@StringparticipantNamePrefix@StringresourceNamePrefix@intresourceNb@intpartitionNb@intnodesNb@intreplica@StringstateModelDef@RebalanceModemode@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/d7c35ed642d293ef7e72fa6e70c44a1a9164dc.src","preCode":"  public static void setupCluster(String clusterName, String ZkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance)\n      throws Exception {\n    ZkClient zkClient = new ZkClient(ZkAddr);\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n      zkClient.deleteRecursive(\"/\" + clusterName);\n    }\n\n    ClusterSetup setupTool = new ClusterSetup(ZkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < nodesNb; i++) {\n      int port = startPort + i;\n      setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n    }\n\n    for (int i = 0; i < resourceNb; i++) {\n      String resourceName = resourceNamePrefix + i;\n      setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef,\n          mode.toString());\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n      }\n    }\n    zkClient.close();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2018-03-09 06:04:42","commitOrder":4,"curCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception {\n    ZkClient zkClient = new ZkClient(zkAddr);\n    zkClient.setZkSerializer(new ZNRecordSerializer());\n\n    \r\n    String clusterName = uniqClusterName;\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up zk; deleting it\");\n      zkClient.deleteRecursively(\"/\" + clusterName);\n    }\n\n    if (_testInfoMap.containsKey(uniqClusterName)) {\n      LOG.warn(\"test info already exists:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up test info map; removing it\");\n      _testInfoMap.remove(uniqClusterName);\n    }\n    TestInfo testInfo =\n        new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource, numInstances,\n            replica);\n    _testInfoMap.put(uniqClusterName, testInfo);\n\n    ClusterSetup setupTool = new ClusterSetup(zkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < numInstances; i++) {\n      int port = START_PORT + i;\n      setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n    }\n\n    for (int i = 0; i < numResources; i++) {\n      String dbName = TEST_DB_PREFIX + i;\n      setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource, STATE_MODEL);\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    }\n  }\n","date":"2018-03-20 07:43:31","endLine":163,"groupId":"1378","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringuniqClusterName@StringzkAddr@intnumResources@intnumPartitionsPerResource@intnumInstances@intreplica@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/af2bb6f5371676e5715d968d5aa3815a964d96.src","preCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception {\n    ZkClient zkClient = new ZkClient(zkAddr);\n    zkClient.setZkSerializer(new ZNRecordSerializer());\n\n    \r\n    String clusterName = uniqClusterName;\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up zk; deleting it\");\n      zkClient.deleteRecursive(\"/\" + clusterName);\n    }\n\n    if (_testInfoMap.containsKey(uniqClusterName)) {\n      LOG.warn(\"test info already exists:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up test info map; removing it\");\n      _testInfoMap.remove(uniqClusterName);\n    }\n    TestInfo testInfo =\n        new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource, numInstances,\n            replica);\n    _testInfoMap.put(uniqClusterName, testInfo);\n\n    ClusterSetup setupTool = new ClusterSetup(zkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < numInstances; i++) {\n      int port = START_PORT + i;\n      setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n    }\n\n    for (int i = 0; i < numResources; i++) {\n      String dbName = TEST_DB_PREFIX + i;\n      setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource, STATE_MODEL);\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDriver.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"0e849035379a04b079ac1274bb8aaab473df1572","commitMessage":"@@@[HELIX-679] consolidate semantics of recursively delete path in ZkClient\n","date":"2018-03-20 07:43:31","modifiedFileCount":"57","status":"M","submitter":"hrzhang"},{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2018-09-27 02:39:42","commitOrder":5,"curCode":"  public static void setupCluster(String clusterName, String zkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance)\n      throws Exception {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddr));\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n      zkClient.deleteRecursively(\"/\" + clusterName);\n    }\n\n    ClusterSetup setupTool = new ClusterSetup(zkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < nodesNb; i++) {\n      int port = startPort + i;\n      setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n    }\n\n    for (int i = 0; i < resourceNb; i++) {\n      String resourceName = resourceNamePrefix + i;\n      setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef,\n          mode.toString());\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n      }\n    }\n    zkClient.close();\n  }\n","date":"2018-10-30 09:15:22","endLine":291,"groupId":"3271","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@StringzkAddr@intstartPort@StringparticipantNamePrefix@StringresourceNamePrefix@intresourceNb@intpartitionNb@intnodesNb@intreplica@StringstateModelDef@RebalanceModemode@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ed/c06462a0cd2e4f5541d2b33614943bae9577c5.src","preCode":"  public static void setupCluster(String clusterName, String ZkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance)\n      throws Exception {\n    ZkClient zkClient = new ZkClient(ZkAddr);\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n      zkClient.deleteRecursively(\"/\" + clusterName);\n    }\n\n    ClusterSetup setupTool = new ClusterSetup(ZkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < nodesNb; i++) {\n      int port = startPort + i;\n      setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n    }\n\n    for (int i = 0; i < resourceNb; i++) {\n      String resourceName = resourceNamePrefix + i;\n      setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef,\n          mode.toString());\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n      }\n    }\n    zkClient.close();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"},{"authorDate":"2018-09-27 02:39:42","commitOrder":5,"curCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(new ZNRecordSerializer());\n\n      \r\n      String clusterName = uniqClusterName;\n      if (zkClient.exists(\"/\" + clusterName)) {\n        LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName + \" is not unique or test has been run without cleaning up zk; deleting it\");\n        zkClient.deleteRecursively(\"/\" + clusterName);\n      }\n\n      if (_testInfoMap.containsKey(uniqClusterName)) {\n        LOG.warn(\"test info already exists:\" + uniqClusterName + \" is not unique or test has been run without cleaning up test info map; removing it\");\n        _testInfoMap.remove(uniqClusterName);\n      }\n      TestInfo testInfo =\n          new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource, numInstances,\n              replica);\n      _testInfoMap.put(uniqClusterName, testInfo);\n\n      ClusterSetup setupTool = new ClusterSetup(zkAddr);\n      setupTool.addCluster(clusterName, true);\n\n      for (int i = 0; i < numInstances; i++) {\n        int port = START_PORT + i;\n        setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n      }\n\n      for (int i = 0; i < numResources; i++) {\n        String dbName = TEST_DB_PREFIX + i;\n        setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource, STATE_MODEL);\n        if (doRebalance) {\n          setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n          \r\n          \r\n          \r\n          \r\n          \r\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n  }\n","date":"2018-10-30 09:15:22","endLine":167,"groupId":"1378","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringuniqClusterName@StringzkAddr@intnumResources@intnumPartitionsPerResource@intnumInstances@intreplica@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cc/8eef564441c0b5da8429b488a06196b3009b49.src","preCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception {\n    ZkClient zkClient = new ZkClient(zkAddr);\n    zkClient.setZkSerializer(new ZNRecordSerializer());\n\n    \r\n    String clusterName = uniqClusterName;\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up zk; deleting it\");\n      zkClient.deleteRecursively(\"/\" + clusterName);\n    }\n\n    if (_testInfoMap.containsKey(uniqClusterName)) {\n      LOG.warn(\"test info already exists:\" + uniqClusterName\n          + \" is not unique or test has been run without cleaning up test info map; removing it\");\n      _testInfoMap.remove(uniqClusterName);\n    }\n    TestInfo testInfo =\n        new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource, numInstances,\n            replica);\n    _testInfoMap.put(uniqClusterName, testInfo);\n\n    ClusterSetup setupTool = new ClusterSetup(zkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < numInstances; i++) {\n      int port = START_PORT + i;\n      setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n    }\n\n    for (int i = 0; i < numResources; i++) {\n      String dbName = TEST_DB_PREFIX + i;\n      setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource, STATE_MODEL);\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n      }\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDriver.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"9d7364d7abba3932a1b25e96e4eb9dd3e203cec9","commitMessage":"@@@Using HelixZkClient to replace ZkClient in helix-core and helix-rest.\n\n1. Replace as much usage as possible. For the raw ZkClient tests.  the usages are kept.\n2. For backward compatibility.  some public interfaces still returns ZkClient. Marks them as Deprecated.\n","date":"2018-10-30 09:15:22","modifiedFileCount":"60","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2020-07-04 15:59:19","commitOrder":6,"curCode":"  public static void setupCluster(String clusterName, String zkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance) {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddr));\n    try {\n      if (zkClient.exists(\"/\" + clusterName)) {\n        LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n        zkClient.deleteRecursively(\"/\" + clusterName);\n      }\n\n      ClusterSetup setupTool = new ClusterSetup(zkAddr);\n      setupTool.addCluster(clusterName, true);\n\n      for (int i = 0; i < nodesNb; i++) {\n        int port = startPort + i;\n        setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n      }\n\n      for (int i = 0; i < resourceNb; i++) {\n        String resourceName = resourceNamePrefix + i;\n        setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef, mode.toString());\n        if (doRebalance) {\n          setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n  }\n","date":"2020-07-04 15:59:19","endLine":298,"groupId":"3271","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@StringzkAddr@intstartPort@StringparticipantNamePrefix@StringresourceNamePrefix@intresourceNb@intpartitionNb@intnodesNb@intreplica@StringstateModelDef@RebalanceModemode@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/d13f04d5b45d8c8df017ec405959726b622132.src","preCode":"  public static void setupCluster(String clusterName, String zkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance)\n      throws Exception {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddr));\n    if (zkClient.exists(\"/\" + clusterName)) {\n      LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n      zkClient.deleteRecursively(\"/\" + clusterName);\n    }\n\n    ClusterSetup setupTool = new ClusterSetup(zkAddr);\n    setupTool.addCluster(clusterName, true);\n\n    for (int i = 0; i < nodesNb; i++) {\n      int port = startPort + i;\n      setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n    }\n\n    for (int i = 0; i < resourceNb; i++) {\n      String resourceName = resourceNamePrefix + i;\n      setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef,\n          mode.toString());\n      if (doRebalance) {\n        setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n      }\n    }\n    zkClient.close();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"},{"authorDate":"2018-09-27 02:39:42","commitOrder":6,"curCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(new ZNRecordSerializer());\n\n      \r\n      String clusterName = uniqClusterName;\n      if (zkClient.exists(\"/\" + clusterName)) {\n        LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName + \" is not unique or test has been run without cleaning up zk; deleting it\");\n        zkClient.deleteRecursively(\"/\" + clusterName);\n      }\n\n      if (_testInfoMap.containsKey(uniqClusterName)) {\n        LOG.warn(\"test info already exists:\" + uniqClusterName + \" is not unique or test has been run without cleaning up test info map; removing it\");\n        _testInfoMap.remove(uniqClusterName);\n      }\n      TestInfo testInfo =\n          new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource, numInstances,\n              replica);\n      _testInfoMap.put(uniqClusterName, testInfo);\n\n      ClusterSetup setupTool = new ClusterSetup(zkAddr);\n      setupTool.addCluster(clusterName, true);\n\n      for (int i = 0; i < numInstances; i++) {\n        int port = START_PORT + i;\n        setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n      }\n\n      for (int i = 0; i < numResources; i++) {\n        String dbName = TEST_DB_PREFIX + i;\n        setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource, STATE_MODEL);\n        if (doRebalance) {\n          setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n          \r\n          \r\n          \r\n          \r\n          \r\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n  }\n","date":"2018-10-30 09:15:22","endLine":167,"groupId":"1378","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringuniqClusterName@StringzkAddr@intnumResources@intnumPartitionsPerResource@intnumInstances@intreplica@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cc/8eef564441c0b5da8429b488a06196b3009b49.src","preCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(new ZNRecordSerializer());\n\n      \r\n      String clusterName = uniqClusterName;\n      if (zkClient.exists(\"/\" + clusterName)) {\n        LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName + \" is not unique or test has been run without cleaning up zk; deleting it\");\n        zkClient.deleteRecursively(\"/\" + clusterName);\n      }\n\n      if (_testInfoMap.containsKey(uniqClusterName)) {\n        LOG.warn(\"test info already exists:\" + uniqClusterName + \" is not unique or test has been run without cleaning up test info map; removing it\");\n        _testInfoMap.remove(uniqClusterName);\n      }\n      TestInfo testInfo =\n          new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource, numInstances,\n              replica);\n      _testInfoMap.put(uniqClusterName, testInfo);\n\n      ClusterSetup setupTool = new ClusterSetup(zkAddr);\n      setupTool.addCluster(clusterName, true);\n\n      for (int i = 0; i < numInstances; i++) {\n        int port = START_PORT + i;\n        setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n      }\n\n      for (int i = 0; i < numResources; i++) {\n        String dbName = TEST_DB_PREFIX + i;\n        setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource, STATE_MODEL);\n        if (doRebalance) {\n          setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n          \r\n          \r\n          \r\n          \r\n          \r\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDriver.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"bacb137f6fa8182cd063cbfd52305a32edc8f92c","commitMessage":"@@@Cleanup test code and adding finalize method to avoid ZkClient leakage in the Helix-core tests. (#1138)\n\nThe ZkClient leakage is currently blocking the whole test suite to finish. This change cleans up some leaking tests and adding the finalize method to the critical ZkClient resource holders. Since we have enforced GC between test classes.  these finalize methods will help to release a major part of the leakage.\n\nNote that this fix still cannot eliminate all the undesired leakages.","date":"2020-07-04 15:59:19","modifiedFileCount":"40","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2020-09-24 12:18:37","commitOrder":7,"curCode":"  public static void setupCluster(String clusterName, String zkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance) {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddr));\n    try {\n      if (zkClient.exists(\"/\" + clusterName)) {\n        LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n        zkClient.deleteRecursively(\"/\" + clusterName);\n      }\n\n      ClusterSetup setupTool = new ClusterSetup(zkAddr);\n      setupTool.addCluster(clusterName, true);\n\n      for (int i = 0; i < nodesNb; i++) {\n        int port = startPort + i;\n        setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n      }\n\n      for (int i = 0; i < resourceNb; i++) {\n        String resourceName = resourceNamePrefix + i;\n        setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef,\n            mode.name(),\n            mode == RebalanceMode.FULL_AUTO ? CrushEdRebalanceStrategy.class.getName()\n                : RebalanceStrategy.DEFAULT_REBALANCE_STRATEGY);\n        if (doRebalance) {\n          setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n  }\n","date":"2020-09-24 12:18:37","endLine":303,"groupId":"10200","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@StringzkAddr@intstartPort@StringparticipantNamePrefix@StringresourceNamePrefix@intresourceNb@intpartitionNb@intnodesNb@intreplica@StringstateModelDef@RebalanceModemode@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/56/fbb1164aa7756ab58e839d06bf1363d1f31247.src","preCode":"  public static void setupCluster(String clusterName, String zkAddr, int startPort,\n      String participantNamePrefix, String resourceNamePrefix, int resourceNb, int partitionNb,\n      int nodesNb, int replica, String stateModelDef, RebalanceMode mode, boolean doRebalance) {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddr));\n    try {\n      if (zkClient.exists(\"/\" + clusterName)) {\n        LOG.warn(\"Cluster already exists:\" + clusterName + \". Deleting it\");\n        zkClient.deleteRecursively(\"/\" + clusterName);\n      }\n\n      ClusterSetup setupTool = new ClusterSetup(zkAddr);\n      setupTool.addCluster(clusterName, true);\n\n      for (int i = 0; i < nodesNb; i++) {\n        int port = startPort + i;\n        setupTool.addInstanceToCluster(clusterName, participantNamePrefix + \"_\" + port);\n      }\n\n      for (int i = 0; i < resourceNb; i++) {\n        String resourceName = resourceNamePrefix + i;\n        setupTool.addResourceToCluster(clusterName, resourceName, partitionNb, stateModelDef, mode.toString());\n        if (doRebalance) {\n          setupTool.rebalanceStorageCluster(clusterName, resourceName, replica);\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2018-09-27 02:39:42","commitOrder":7,"curCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(new ZNRecordSerializer());\n\n      \r\n      String clusterName = uniqClusterName;\n      if (zkClient.exists(\"/\" + clusterName)) {\n        LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName + \" is not unique or test has been run without cleaning up zk; deleting it\");\n        zkClient.deleteRecursively(\"/\" + clusterName);\n      }\n\n      if (_testInfoMap.containsKey(uniqClusterName)) {\n        LOG.warn(\"test info already exists:\" + uniqClusterName + \" is not unique or test has been run without cleaning up test info map; removing it\");\n        _testInfoMap.remove(uniqClusterName);\n      }\n      TestInfo testInfo =\n          new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource, numInstances,\n              replica);\n      _testInfoMap.put(uniqClusterName, testInfo);\n\n      ClusterSetup setupTool = new ClusterSetup(zkAddr);\n      setupTool.addCluster(clusterName, true);\n\n      for (int i = 0; i < numInstances; i++) {\n        int port = START_PORT + i;\n        setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n      }\n\n      for (int i = 0; i < numResources; i++) {\n        String dbName = TEST_DB_PREFIX + i;\n        setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource, STATE_MODEL);\n        if (doRebalance) {\n          setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n          \r\n          \r\n          \r\n          \r\n          \r\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n  }\n","date":"2018-10-30 09:15:22","endLine":167,"groupId":"10200","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringuniqClusterName@StringzkAddr@intnumResources@intnumPartitionsPerResource@intnumInstances@intreplica@booleandoRebalance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cc/8eef564441c0b5da8429b488a06196b3009b49.src","preCode":"  public static void setupCluster(String uniqClusterName, String zkAddr, int numResources,\n      int numPartitionsPerResource, int numInstances, int replica, boolean doRebalance)\n      throws Exception {\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(new ZNRecordSerializer());\n\n      \r\n      String clusterName = uniqClusterName;\n      if (zkClient.exists(\"/\" + clusterName)) {\n        LOG.warn(\"test cluster already exists:\" + clusterName + \", test name:\" + uniqClusterName + \" is not unique or test has been run without cleaning up zk; deleting it\");\n        zkClient.deleteRecursively(\"/\" + clusterName);\n      }\n\n      if (_testInfoMap.containsKey(uniqClusterName)) {\n        LOG.warn(\"test info already exists:\" + uniqClusterName + \" is not unique or test has been run without cleaning up test info map; removing it\");\n        _testInfoMap.remove(uniqClusterName);\n      }\n      TestInfo testInfo =\n          new TestInfo(clusterName, zkClient, numResources, numPartitionsPerResource, numInstances,\n              replica);\n      _testInfoMap.put(uniqClusterName, testInfo);\n\n      ClusterSetup setupTool = new ClusterSetup(zkAddr);\n      setupTool.addCluster(clusterName, true);\n\n      for (int i = 0; i < numInstances; i++) {\n        int port = START_PORT + i;\n        setupTool.addInstanceToCluster(clusterName, PARTICIPANT_PREFIX + \"_\" + port);\n      }\n\n      for (int i = 0; i < numResources; i++) {\n        String dbName = TEST_DB_PREFIX + i;\n        setupTool.addResourceToCluster(clusterName, dbName, numPartitionsPerResource, STATE_MODEL);\n        if (doRebalance) {\n          setupTool.rebalanceStorageCluster(clusterName, dbName, replica);\n\n          \r\n          \r\n          \r\n          \r\n          \r\n        }\n      }\n    } finally {\n      zkClient.close();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDriver.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"be91eff5c3543ebc427e64ffcf8fc5f5dc25d0f7","commitMessage":"@@@Mark AutoRebalancer as deprecated and convert the default test logic to not use AutoRebalancer (#1401)\n\n","date":"2020-09-24 12:18:37","modifiedFileCount":"6","status":"M","submitter":"Jiajun Wang"}]
