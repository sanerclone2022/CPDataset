[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\",\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").getTextValue(),\n        TaskState.IN_PROGRESS.name());\n  }\n","date":"2017-11-08 08:48:26","endLine":86,"groupId":"7086","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetWorkflowContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c4/1101f08b54688fac2d24a9c42606abf1d8e034.src","preCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\",\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").getTextValue(),\n        TaskState.IN_PROGRESS.name());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestWorkflowAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testGetJobContext() throws IOException {\n\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").getTextValue(),\n        TaskPartitionState.COMPLETED.name());\n  }\n","date":"2017-11-08 08:48:26","endLine":107,"groupId":"3075","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ec/a68362366bd281b315460aeb0235407f544d67.src","preCode":"  public void testGetJobContext() throws IOException {\n\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").getTextValue(),\n        TaskPartitionState.COMPLETED.name());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestJobAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2019-02-21 06:23:08","codes":[{"authorDate":"2019-02-21 06:23:08","commitOrder":2,"curCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\", null,\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").getTextValue(),\n        TaskState.IN_PROGRESS.name());\n  }\n","date":"2019-05-23 07:02:20","endLine":96,"groupId":"6260","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetWorkflowContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/56/a8853f91d6fa2f8e769f0d5865e05faf21ed22.src","preCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\",\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").getTextValue(),\n        TaskState.IN_PROGRESS.name());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestWorkflowAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-02-21 06:23:08","commitOrder":2,"curCode":"  public void testGetJobContext() throws IOException {\n\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", null, Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").getTextValue(),\n        TaskPartitionState.COMPLETED.name());\n  }\n","date":"2019-05-23 07:02:20","endLine":113,"groupId":"6260","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/416fb61f4e3b9e29f48a6544168f30f6bee31d.src","preCode":"  public void testGetJobContext() throws IOException {\n\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").getTextValue(),\n        TaskPartitionState.COMPLETED.name());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestJobAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"babc471bbd81907da73f5f33b2f9f5a035e20177","commitMessage":"@@@get instance's pending messages with state model def parameter\n\nUpdate the get() method in AbstractTestClass in order to take the correct QueryParam\nBUGS=HELIX-1645\n\nRB=1570393\nBUG=HELIX-1645\nG=helix-reviewers\nA=hulee. jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-23 07:02:20","modifiedFileCount":"9","status":"M","submitter":"ywang4"},{"authorTime":"2019-08-06 07:25:03","codes":[{"authorDate":"2019-08-06 07:25:03","commitOrder":3,"curCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\", null,\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").getTextValue(),\n        TaskState.IN_PROGRESS.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":100,"groupId":"6260","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetWorkflowContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/00/6b600294c042dfee7ce67b11f505b6dbe72e15.src","preCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\", null,\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").getTextValue(),\n        TaskState.IN_PROGRESS.name());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestWorkflowAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-08-06 07:25:03","commitOrder":3,"curCode":"  public void testGetJobContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", null, Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").getTextValue(),\n        TaskPartitionState.COMPLETED.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":116,"groupId":"6260","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ca/9613dd34647076e8f5d00d9211a3e0a1e5e6bf.src","preCode":"  public void testGetJobContext() throws IOException {\n\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", null, Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").getTextValue(),\n        TaskPartitionState.COMPLETED.name());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestJobAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"af00b8df4f9ea432a8186b4c50c3a5bc3ddf035b","commitMessage":"@@@Stablize the REST tests\n\nStablize the REST tests by following changes:\n1. Remove temporary cluster which impact the ClusterAccessor test\n2. Add all start/end message for test debug purpose.\n3. Disable unstable monitoring test for default MBeans. Sometimes we can query it sometimes not. It is not critical test path. Let's make it stable later.\n","date":"2019-08-08 05:10:37","modifiedFileCount":"10","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-08-21 10:06:09","codes":[{"authorDate":"2020-08-21 10:06:09","commitOrder":4,"curCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\", null,\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").textValue(),\n        TaskState.IN_PROGRESS.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2020-08-21 10:06:09","endLine":117,"groupId":"6260","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetWorkflowContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e0/8218cfaa2e364db10c204603c36c9daa97ab73.src","preCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\", null,\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").getTextValue(),\n        TaskState.IN_PROGRESS.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestWorkflowAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-08-21 10:06:09","commitOrder":4,"curCode":"  public void testGetJobContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", null, Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").textValue(),\n        TaskPartitionState.COMPLETED.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2020-08-21 10:06:09","endLine":114,"groupId":"6260","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ce/8b7119dcf681685d96a6d41b09b2d3f86e9772.src","preCode":"  public void testGetJobContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", null, Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").getTextValue(),\n        TaskPartitionState.COMPLETED.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestJobAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"cd552d9f122dbe3fa4b3648d38b2fc615f663b84","commitMessage":"@@@Replace org.codehaus.jackson with FasterXML.jackson (#1293)\n\nReplace org.codehaus.jackson with FasterXML.jackson","date":"2020-08-21 10:06:09","modifiedFileCount":"86","status":"M","submitter":"xyuanlu"},{"authorTime":"2020-08-21 10:06:09","codes":[{"authorDate":"2020-11-14 06:21:26","commitOrder":5,"curCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\", null,\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").textValue(),\n        TaskState.FAILED.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2020-11-14 06:21:26","endLine":117,"groupId":"101058","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetWorkflowContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e5/364da84085d7578653f847a92fa64a5bbb9569.src","preCode":"  public void testGetWorkflowContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body = get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/context\", null,\n        Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"STATE\").textValue(),\n        TaskState.IN_PROGRESS.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestWorkflowAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-08-21 10:06:09","commitOrder":5,"curCode":"  public void testGetJobContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", null, Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").textValue(),\n        TaskPartitionState.COMPLETED.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2020-08-21 10:06:09","endLine":114,"groupId":"101058","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ce/8b7119dcf681685d96a6d41b09b2d3f86e9772.src","preCode":"  public void testGetJobContext() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String body =\n        get(\"clusters/\" + CLUSTER_NAME + \"/workflows/\" + WORKFLOW_NAME + \"/jobs/\" + JOB_NAME\n            + \"/context\", null, Response.Status.OK.getStatusCode(), true);\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Assert.assertEquals(node.get(\"mapFields\").get(\"0\").get(\"STATE\").textValue(),\n        TaskPartitionState.COMPLETED.name());\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestJobAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"}],"commitId":"56161ecdbf8c1b55529e79ab720232a7b08328bc","commitMessage":"@@@Implement job context garbage collection (#1520)\n\nPreviously.  the workflow context garbage collection has been implemented.\nIn this commit.  new methods have been added to remove the job contexts that\ndo not have a corresponding job config.","date":"2020-11-14 06:21:26","modifiedFileCount":"9","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"}]
