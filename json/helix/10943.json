[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  StringRepresentation getConfigKeys(ConfigScopeProperty scopeProperty, String... keys) throws Exception\n  {\n    StringRepresentation representation = null;\n    String clusterName = getValue(\"clusterName\");\n\n    ZkClient zkClient =\n        (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    List<String> configKeys = admin.getConfigKeys(scopeProperty, clusterName, keys);\n    record.setListField(scopeProperty.toString(), configKeys);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n                                 MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","date":"2012-10-25 07:14:36","endLine":99,"groupId":"783","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getConfigKeys","params":"(ConfigScopePropertyscopeProperty@String...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/2f6e6a798bbca58757d3387e64cb0160ec8f1a.src","preCode":"  StringRepresentation getConfigKeys(ConfigScopeProperty scopeProperty, String... keys) throws Exception\n  {\n    StringRepresentation representation = null;\n    String clusterName = getValue(\"clusterName\");\n\n    ZkClient zkClient =\n        (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    List<String> configKeys = admin.getConfigKeys(scopeProperty, clusterName, keys);\n    record.setListField(scopeProperty.toString(), configKeys);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n                                 MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ConfigResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  StringRepresentation getConfigs(ConfigScope scope,\n                                  ConfigScopeProperty scopeProperty,\n                                  String... keys) throws Exception\n  {\n    StringRepresentation representation = null;\n    String clusterName = getValue(\"clusterName\");\n\n    ZkClient zkClient =\n        (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    List<String> configKeys = admin.getConfigKeys(scopeProperty, clusterName, keys);\n    Map<String, String> configs = admin.getConfig(scope, new HashSet<String>(configKeys));\n    record.setSimpleFields(configs);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n                                 MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","date":"2012-10-25 07:14:36","endLine":123,"groupId":"783","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getConfigs","params":"(ConfigScopescope@ConfigScopePropertyscopeProperty@String...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/2f6e6a798bbca58757d3387e64cb0160ec8f1a.src","preCode":"  StringRepresentation getConfigs(ConfigScope scope,\n                                  ConfigScopeProperty scopeProperty,\n                                  String... keys) throws Exception\n  {\n    StringRepresentation representation = null;\n    String clusterName = getValue(\"clusterName\");\n\n    ZkClient zkClient =\n        (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    List<String> configKeys = admin.getConfigKeys(scopeProperty, clusterName, keys);\n    Map<String, String> configs = admin.getConfig(scope, new HashSet<String>(configKeys));\n    record.setSimpleFields(configs);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n                                 MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ConfigResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-04-08 14:58:17","codes":[{"authorDate":"2013-04-08 14:58:17","commitOrder":2,"curCode":"  StringRepresentation getConfigKeys(ConfigScopeProperty scopeProperty, String... keys) throws Exception\n  {\n    StringRepresentation representation = null;\n    \r\n\n    ZkClient zkClient =\n        (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    HelixConfigScope scope = new HelixConfigScopeBuilder(scopeProperty, keys).build();\n    \r\n    List<String> configKeys = admin.getConfigKeys(scope);\n    record.setListField(scopeProperty.toString(), configKeys);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n                                 MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","date":"2013-04-08 14:58:17","endLine":107,"groupId":"4884","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getConfigKeys","params":"(ConfigScopePropertyscopeProperty@String...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ce/52926ec6564dc720ac053ae806f45f89e9b728.src","preCode":"  StringRepresentation getConfigKeys(ConfigScopeProperty scopeProperty, String... keys) throws Exception\n  {\n    StringRepresentation representation = null;\n    String clusterName = getValue(\"clusterName\");\n\n    ZkClient zkClient =\n        (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    List<String> configKeys = admin.getConfigKeys(scopeProperty, clusterName, keys);\n    record.setListField(scopeProperty.toString(), configKeys);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n                                 MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ConfigResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2013-04-08 14:58:17","commitOrder":2,"curCode":"  StringRepresentation getConfigs(\r\n                                  ConfigScopeProperty scopeProperty,\n                                  String... keys) throws Exception\n  {\n    StringRepresentation representation = null;\n\r\n\n    ZkClient zkClient =\n        (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    HelixConfigScope scope = new HelixConfigScopeBuilder(scopeProperty, keys).build();\n    List<String> configKeys = admin.getConfigKeys(scope);\n    Map<String, String> configs = admin.getConfig(scope, configKeys);\n    record.setSimpleFields(configs);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n                                 MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","date":"2013-04-08 14:58:17","endLine":132,"groupId":"4884","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getConfigs","params":"(ConfigScopePropertyscopeProperty@String...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ce/52926ec6564dc720ac053ae806f45f89e9b728.src","preCode":"  StringRepresentation getConfigs(ConfigScope scope,\n                                  ConfigScopeProperty scopeProperty,\n                                  String... keys) throws Exception\n  {\n    StringRepresentation representation = null;\n    String clusterName = getValue(\"clusterName\");\n\n    ZkClient zkClient =\n        (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    List<String> configKeys = admin.getConfigKeys(scopeProperty, clusterName, keys);\n    Map<String, String> configs = admin.getConfig(scope, new HashSet<String>(configKeys));\n    record.setSimpleFields(configs);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n                                 MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ConfigResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"1b686456c5661b4df7f62d5f243c7c67769da2ba","commitMessage":"@@@refactor config accessor. deprecate ConfigAccessor. Add HelixConfigAccessor\n","date":"2013-04-08 14:58:17","modifiedFileCount":"27","status":"M","submitter":"zzhang"},{"authorTime":"2014-12-03 10:26:02","codes":[{"authorDate":"2014-12-03 10:26:02","commitOrder":3,"curCode":"  StringRepresentation getConfigKeys(ConfigScopeProperty scopeProperty, String... keys)\n      throws Exception {\n    StringRepresentation representation = null;\n\n    ZkClient zkClient =\n        ResourceUtil.getAttributeFromCtx(getContext(), ResourceUtil.ContextKey.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    HelixConfigScope scope = new HelixConfigScopeBuilder(scopeProperty, keys).build();\n    List<String> configKeys = admin.getConfigKeys(scope);\n    record.setListField(scopeProperty.toString(), configKeys);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n            MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","date":"2014-12-03 10:26:02","endLine":98,"groupId":"10943","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getConfigKeys","params":"(ConfigScopePropertyscopeProperty@String...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/5df9fae1fc2c183bdb3fe9f13fe0b130c6e33c.src","preCode":"  StringRepresentation getConfigKeys(ConfigScopeProperty scopeProperty, String... keys)\n      throws Exception {\n    StringRepresentation representation = null;\n    \r\n\n    ZkClient zkClient = (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    HelixConfigScope scope = new HelixConfigScopeBuilder(scopeProperty, keys).build();\n    \r\n    List<String> configKeys = admin.getConfigKeys(scope);\n    record.setListField(scopeProperty.toString(), configKeys);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n            MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ConfigResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2014-12-03 10:26:02","commitOrder":3,"curCode":"  StringRepresentation getConfigs(ConfigScopeProperty scopeProperty, String... keys)\n      throws Exception {\n    StringRepresentation representation = null;\n\n    ZkClient zkClient =\n        ResourceUtil.getAttributeFromCtx(getContext(), ResourceUtil.ContextKey.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    HelixConfigScope scope = new HelixConfigScopeBuilder(scopeProperty, keys).build();\n    List<String> configKeys = admin.getConfigKeys(scope);\n    Map<String, String> configs = admin.getConfig(scope, configKeys);\n    record.setSimpleFields(configs);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n            MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","date":"2014-12-03 10:26:02","endLine":120,"groupId":"10943","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getConfigs","params":"(ConfigScopePropertyscopeProperty@String...keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/5df9fae1fc2c183bdb3fe9f13fe0b130c6e33c.src","preCode":"  StringRepresentation getConfigs(\r\n      ConfigScopeProperty scopeProperty, String... keys) throws Exception {\n    StringRepresentation representation = null;\n    \r\n\n    ZkClient zkClient = (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n    ClusterSetup setupTool = new ClusterSetup(zkClient);\n    HelixAdmin admin = setupTool.getClusterManagementTool();\n    ZNRecord record = new ZNRecord(scopeProperty + \" Config\");\n\n    HelixConfigScope scope = new HelixConfigScopeBuilder(scopeProperty, keys).build();\n    List<String> configKeys = admin.getConfigKeys(scope);\n    Map<String, String> configs = admin.getConfig(scope, configKeys);\n    record.setSimpleFields(configs);\n\n    representation =\n        new StringRepresentation(ClusterRepresentationUtil.ZNRecordToJson(record),\n            MediaType.APPLICATION_JSON);\n\n    return representation;\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ConfigResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"9a5dbeaa624715e76486ae908eab48e503d28ceb","commitMessage":"@@@[HELIX-546] Add REST API for Helix job queue management - third part.  rb=28620\n","date":"2014-12-03 10:26:02","modifiedFileCount":"10","status":"M","submitter":"zzhang"}]
