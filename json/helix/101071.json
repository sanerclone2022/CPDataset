[{"authorTime":"2018-10-10 05:31:00","codes":[{"authorDate":"2018-10-10 05:31:00","commitOrder":2,"curCode":"  public void testGetAddTaskUserContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/0/userContent\";\n    String uriTaskDoesNotExist = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/xxx/userContent\";\n\n    \r\n    String body =\n        get(uri, Response.Status.OK.getStatusCode(), true);\n    Map<String, String>\n        contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    post(uriTaskDoesNotExist, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    body = get(uriTaskDoesNotExist, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n  }\n","date":"2018-11-02 08:42:22","endLine":59,"groupId":"685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetAddTaskUserContent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/5eae3aba95c822a94df34ce4d41521d3012ab2.src","preCode":"  public void testGetAddTaskUserContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/0/userContent\";\n    String uriTaskDoesNotExist = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/xxx/userContent\";\n\n    \r\n    String body =\n        get(uri, Response.Status.OK.getStatusCode(), true);\n    Map<String, String>\n        contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    post(uriTaskDoesNotExist, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    body = get(uriTaskDoesNotExist, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestTaskAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":19,"status":"B"},{"authorDate":"2018-10-10 05:31:00","commitOrder":2,"curCode":"  public void testGetAddJobContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/userContent\";\n\n    \r\n    String body =\n        get(uri, Response.Status.OK.getStatusCode(), true);\n    Map<String, String> contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n  }\n","date":"2018-11-02 08:42:22","endLine":171,"groupId":"685","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetAddJobContent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d1/178ee1f5fa2517e4e6b167a329f95d9196d1ad.src","preCode":"  public void testGetAddJobContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/userContent\";\n\n    \r\n    String body =\n        get(uri, Response.Status.OK.getStatusCode(), true);\n    Map<String, String> contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestJobAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"MB"}],"commitId":"18aa67b6d5c703e5b938b2f915f52a6ca856e889","commitMessage":"@@@[HELIX-780] add task user content related api and added more tests\n","date":"2018-11-02 08:42:22","modifiedFileCount":"5","status":"M","submitter":"Harry Zhang"},{"authorTime":"2019-02-21 06:23:08","codes":[{"authorDate":"2019-02-21 06:23:08","commitOrder":3,"curCode":"  public void testGetAddTaskUserContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/0/userContent\";\n    String uriTaskDoesNotExist = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/xxx/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String>\n        contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    post(uriTaskDoesNotExist, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    body = get(uriTaskDoesNotExist, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n  }\n","date":"2019-05-23 07:02:20","endLine":59,"groupId":"685","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetAddTaskUserContent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/81/3f0527676ee05b86500c3602964528b86ee58b.src","preCode":"  public void testGetAddTaskUserContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/0/userContent\";\n    String uriTaskDoesNotExist = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/xxx/userContent\";\n\n    \r\n    String body =\n        get(uri, Response.Status.OK.getStatusCode(), true);\n    Map<String, String>\n        contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    post(uriTaskDoesNotExist, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    body = get(uriTaskDoesNotExist, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestTaskAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":19,"status":"M"},{"authorDate":"2019-02-21 06:23:08","commitOrder":3,"curCode":"  public void testGetAddJobContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String> contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n  }\n","date":"2019-05-23 07:02:20","endLine":173,"groupId":"2524","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetAddJobContent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/416fb61f4e3b9e29f48a6544168f30f6bee31d.src","preCode":"  public void testGetAddJobContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/userContent\";\n\n    \r\n    String body =\n        get(uri, Response.Status.OK.getStatusCode(), true);\n    Map<String, String> contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestJobAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"babc471bbd81907da73f5f33b2f9f5a035e20177","commitMessage":"@@@get instance's pending messages with state model def parameter\n\nUpdate the get() method in AbstractTestClass in order to take the correct QueryParam\nBUGS=HELIX-1645\n\nRB=1570393\nBUG=HELIX-1645\nG=helix-reviewers\nA=hulee. jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-23 07:02:20","modifiedFileCount":"9","status":"M","submitter":"ywang4"},{"authorTime":"2019-08-06 07:25:03","codes":[{"authorDate":"2019-08-06 07:25:03","commitOrder":4,"curCode":"  public void testGetAddTaskUserContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/0/userContent\";\n    String uriTaskDoesNotExist = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/xxx/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String>\n        contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    post(uriTaskDoesNotExist, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    body = get(uriTaskDoesNotExist, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":60,"groupId":"685","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetAddTaskUserContent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4d/7edaf0d9dd44a455297c326d6d366562ebaaff.src","preCode":"  public void testGetAddTaskUserContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/0/userContent\";\n    String uriTaskDoesNotExist = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/xxx/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String>\n        contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    post(uriTaskDoesNotExist, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    body = get(uriTaskDoesNotExist, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestTaskAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":19,"status":"M"},{"authorDate":"2019-08-06 07:25:03","commitOrder":4,"curCode":"  public void testGetAddJobContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String> contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":178,"groupId":"2524","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetAddJobContent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ca/9613dd34647076e8f5d00d9211a3e0a1e5e6bf.src","preCode":"  public void testGetAddJobContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String> contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestJobAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"af00b8df4f9ea432a8186b4c50c3a5bc3ddf035b","commitMessage":"@@@Stablize the REST tests\n\nStablize the REST tests by following changes:\n1. Remove temporary cluster which impact the ClusterAccessor test\n2. Add all start/end message for test debug purpose.\n3. Disable unstable monitoring test for default MBeans. Sometimes we can query it sometimes not. It is not critical test path. Let's make it stable later.\n","date":"2019-08-08 05:10:37","modifiedFileCount":"10","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-11-14 06:21:26","codes":[{"authorDate":"2020-11-14 06:21:26","commitOrder":5,"curCode":"  public void testGetAddTaskUserContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/JOB0/tasks/0/userContent\";\n    String uriTaskDoesNotExist = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/JOB0/tasks/xxx/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String>\n        contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    post(uriTaskDoesNotExist, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    body = get(uriTaskDoesNotExist, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2020-11-14 06:21:26","endLine":80,"groupId":"101071","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetAddTaskUserContent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c4/f5ed37184d7dbd43b8cb3c8447bc83cbb88026.src","preCode":"  public void testGetAddTaskUserContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/0/userContent\";\n    String uriTaskDoesNotExist = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/tasks/xxx/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String>\n        contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    post(uriTaskDoesNotExist, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    body = get(uriTaskDoesNotExist, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {\n    });\n    Assert.assertEquals(contentStore, map1);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestTaskAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2020-11-14 06:21:26","commitOrder":5,"curCode":"  public void testGetAddJobContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/JOB0/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String> contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2020-11-14 06:21:26","endLine":176,"groupId":"101071","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testGetAddJobContent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b7/5a4f88ac9e0acb7e02b59be13c3f291c3a947b.src","preCode":"  public void testGetAddJobContent() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String uri = \"clusters/\" + CLUSTER_NAME + \"/workflows/Workflow_0/jobs/Job_0/userContent\";\n\n    \r\n    String body =\n        get(uri, null, Response.Status.OK.getStatusCode(), true);\n    Map<String, String> contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertTrue(contentStore.isEmpty());\n\n    \r\n    Map<String, String> map1 = new HashMap<>();\n    map1.put(\"k1\", \"v1\");\n    Entity entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n\n    \r\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n\n    \r\n    map1.put(\"k1\", \"v2\");\n    map1.put(\"k2\", \"v2\");\n    entity = Entity.entity(OBJECT_MAPPER.writeValueAsString(map1), MediaType.APPLICATION_JSON_TYPE);\n    post(uri, ImmutableMap.of(\"command\", \"update\"), entity, Response.Status.OK.getStatusCode());\n    body = get(uri, null, Response.Status.OK.getStatusCode(), true);\n    contentStore = OBJECT_MAPPER.readValue(body, new TypeReference<Map<String, String>>() {});\n    Assert.assertEquals(contentStore, map1);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestJobAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"56161ecdbf8c1b55529e79ab720232a7b08328bc","commitMessage":"@@@Implement job context garbage collection (#1520)\n\nPreviously.  the workflow context garbage collection has been implemented.\nIn this commit.  new methods have been added to remove the job contexts that\ndo not have a corresponding job config.","date":"2020-11-14 06:21:26","modifiedFileCount":"9","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"}]
