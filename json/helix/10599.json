[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testResetNode() throws Exception\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>()\n    {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipant[] participants = new MockParticipant[n];\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0)\n      {\n        participants[i] =\n            new MockParticipant(clusterName,\n                                instanceName,\n                                ZK_ADDR,\n                                new ErrTransition(errPartitions));\n      }\n      else\n      {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap =\n        new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                                       clusterName,\n                                                                                                       errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    \n    \r\n    participants[0].setTransition(null);\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName\n            + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                                       clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2012-10-25 07:14:36","endLine":111,"groupId":"6740","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1d/199d3553e36ac5153b03b1f6c50362623ef69e.src","preCode":"  public void testResetNode() throws Exception\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>()\n    {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipant[] participants = new MockParticipant[n];\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0)\n      {\n        participants[i] =\n            new MockParticipant(clusterName,\n                                instanceName,\n                                ZK_ADDR,\n                                new ErrTransition(errPartitions));\n      }\n      else\n      {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap =\n        new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                                       clusterName,\n                                                                                                       errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    \n    \r\n    participants[0].setTransition(null);\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName\n            + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                                       clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":21,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testResetInstance() throws Exception\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>()\n    {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipant[] participants = new MockParticipant[n];\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0)\n      {\n        participants[i] =\n            new MockParticipant(clusterName,\n                                instanceName,\n                                ZK_ADDR,\n                                new ErrTransition(errPartitions));\n      }\n      else\n      {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap =\n        new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                                       clusterName,\n                                                                                                       errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    \n    \r\n    participants[0].setTransition(null);\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName\n            + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                                       clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2012-10-25 07:14:36","endLine":112,"groupId":"6740","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/24/ee3a31720404955de6a2d5c7bb2f1324d18bbf.src","preCode":"  public void testResetInstance() throws Exception\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>()\n    {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipant[] participants = new MockParticipant[n];\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0)\n      {\n        participants[i] =\n            new MockParticipant(clusterName,\n                                instanceName,\n                                ZK_ADDR,\n                                new ErrTransition(errPartitions));\n      }\n      else\n      {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap =\n        new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                                       clusterName,\n                                                                                                       errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    \n    \r\n    participants[0].setTransition(null);\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName\n            + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                                       clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetInstance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2013-10-25 09:35:16","commitOrder":2,"curCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":111,"groupId":"7073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/46/a05d83b5d8f06190b1876a2e6612f58a619fca.src","preCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipant[] participants = new MockParticipant[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipant(clusterName, instanceName, ZK_ADDR,\n                new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":2,"curCode":"  public void testResetInstance() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":112,"groupId":"7073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/71/59a1774f6ab70e0422798f1b70ad756063c633.src","preCode":"  public void testResetInstance() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipant[] participants = new MockParticipant[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipant(clusterName, instanceName, ZK_ADDR,\n                new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetInstance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"5c7721970eef78e2d13d35b4934b07cb11a03cd9","commitMessage":"@@@Merge branch 'helix-0.6.2-release' of https://git-wip-us.apache.org/repos/asf/incubator-helix into helix-0.6.2-release\n","date":"2013-10-25 09:35:16","modifiedFileCount":"105","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 02:20:49","endLine":113,"groupId":"7073","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e0/38ebb301638af135a8018f857764e2bbfe2e7c.src","preCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testResetInstance() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":112,"groupId":"7073","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/71/59a1774f6ab70e0422798f1b70ad756063c633.src","preCode":"  public void testResetInstance() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetInstance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2018-06-19 01:21:53","commitOrder":4,"curCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 06:57:09","endLine":112,"groupId":"7073","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/39880218a77d06685b9a38f0c9802244a5e131.src","preCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":4,"curCode":"  public void testResetInstance() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":112,"groupId":"7073","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/71/59a1774f6ab70e0422798f1b70ad756063c633.src","preCode":"  public void testResetInstance() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetInstance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"4385d01a3673efa631d9837507c21ccab9f69be4","commitMessage":"@@@Refactor tests to use deleteCluster in test base class to deduplicate codes.\n","date":"2018-07-14 06:57:09","modifiedFileCount":"43","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2018-06-19 01:21:53","commitOrder":5,"curCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 06:57:09","endLine":112,"groupId":"10599","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/39880218a77d06685b9a38f0c9802244a5e131.src","preCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetResource \" + clusterName + \" TestDB0\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  public void testResetInstance() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2019-05-25 09:19:21","endLine":113,"groupId":"10599","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/48/fa742d80af37e3d4d4e7934dfbf9b222c64514.src","preCode":"  public void testResetInstance() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String command = \"--zkSvr \" + ZK_ADDR + \" --resetInstance \" + clusterName + \" localhost_12918\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetInstance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
