[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2017-11-08 08:48:26","endLine":93,"groupId":"5866","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/8735258cd2f047a7c25359a5c3324eddfca32e.src","preCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    HelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(clusterVerifier.verify(10000));\n  }\n","date":"2017-11-08 08:48:26","endLine":89,"groupId":"5866","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f9/651013f7eceb8f7053c8ef8b210e821656adda.src","preCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    HelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(clusterVerifier.verify(10000));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobTimeoutTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2018-03-09 06:04:42","codes":[{"authorDate":"2018-03-09 06:04:42","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2018-03-20 07:43:31","endLine":93,"groupId":"5866","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d1/f82508427b0ae6af7f725084df88668206cfa4.src","preCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2018-03-09 06:04:42","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    HelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(clusterVerifier.verify(10000));\n  }\n","date":"2018-03-20 07:43:31","endLine":89,"groupId":"5866","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/95/21e4ccaef8e7507b6e8b0e231a1717c87082dd.src","preCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    HelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(clusterVerifier.verify(10000));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobTimeoutTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"0e849035379a04b079ac1274bb8aaab473df1572","commitMessage":"@@@[HELIX-679] consolidate semantics of recursively delete path in ZkClient\n","date":"2018-03-20 07:43:31","modifiedFileCount":"57","status":"M","submitter":"hrzhang"},{"authorTime":"2018-02-09 07:22:18","codes":[{"authorDate":"2018-03-09 06:04:42","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2018-03-20 07:43:31","endLine":93,"groupId":"5866","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d1/f82508427b0ae6af7f725084df88668206cfa4.src","preCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2018-02-09 07:22:18","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n    _participants =  new MockParticipantManager[_numNodes];\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    HelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(clusterVerifier.verify(10000));\n  }\n","date":"2018-03-21 02:55:27","endLine":88,"groupId":"5866","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/61/299465771cb2609278e3decdd20237cae8f02b.src","preCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    HelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(clusterVerifier.verify(10000));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobTimeoutTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"d742d09846c8b39cd46c9d8560ca856355530a88","commitMessage":"@@@Fix Job level timeout not timeout jobs and refactor logics\n\nThere is an issue that job does not get timeouted. The rebalancerSchduler is not got scheduled when job started. Fixed this issue.\nRefactor the logics to support workflow level timeout.\n","date":"2018-03-21 02:55:27","modifiedFileCount":"7","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2018-07-14 02:20:49","endLine":85,"groupId":"5866","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ac/e98e042f384d5c45c005e2160ac7b3883c3e5f.src","preCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n    _participants =  new MockParticipantManager[_numNodes];\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    HelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(clusterVerifier.verify(10000));\n  }\n","date":"2018-07-14 02:20:49","endLine":80,"groupId":"5866","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/32/d5d52635e995410a2ee7702015acd179a6d5d0.src","preCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n    _participants =  new MockParticipantManager[_numNodes];\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    HelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(clusterVerifier.verify(10000));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobTimeoutTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","date":"2018-07-14 06:55:35","endLine":85,"groupId":"5866","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/83/314b21b5cd0213fe8a5ea99988413f93f82517.src","preCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n    _participants =  new MockParticipantManager[_numNodes];\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling(10000, 100));\n  }\n","date":"2018-07-14 06:55:35","endLine":77,"groupId":"5866","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/a41abb28da3a28f16a422ae547d1740cda2330.src","preCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n    _participants =  new MockParticipantManager[_numNodes];\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    HelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(clusterVerifier.verify(10000));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobTimeoutTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-07-14 05:45:41","codes":[{"authorDate":"2018-07-14 05:45:41","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numPartitions = 2;\n    _numReplicas = 1;\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","date":"2018-07-14 08:38:58","endLine":85,"groupId":"5866","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/79/e892a2d870d2091b31114fb735920b63b577b3.src","preCode":"  public void beforeClass() throws Exception {\n    _participants =  new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numParitions = 2;\n    _numReplicas = 1;\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-07-14 05:45:41","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numPartitions = 50;\n    _numReplicas = 1;\n    _participants =  new MockParticipantManager[_numNodes];\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numPartitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling(10000, 100));\n  }\n","date":"2018-07-14 08:38:58","endLine":77,"groupId":"5866","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/09b188fb5097990888dfca924972fee3b8fb64.src","preCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numParitions = 50;\n    _numReplicas = 1;\n    _participants =  new MockParticipantManager[_numNodes];\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numParitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling(10000, 100));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobTimeoutTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"4db61b56e473b64ec9956f694dd2ac6a8d328ed4","commitMessage":"@@@[HELIX-730] Add ThreadCountBasedAssignmentCalculator and integrate with Workflow/JobRebalancer and fix rebalancing logic\n\nFor quota-based scheduling of tasks.  we have added the TaskAssigner interface that takes into account AssignableInstances by way of AssignableInstanceManager. In order to use this in the currently-existing pipeline prior to Task Framework 2.0.  GenericTaskAssignmentCalculator was replaced with ThreadCountBasedAssignmentCalculator.  which is a wrapper around TaskAssigner. Necessary adjustments were made in Workflow/JobRebalancer for this replacement. Also the rebalance logic in Workflow/JobRebalancer was reviewed and fixed. Additionally.  TestQuotaBasedScheduling is added to test quota-based task scheduling. Note that quotas will apply to both generic and targeted jobs.\n\nA few bugs were uncovered during this process such as the faulty retry logic that never really got tasks to restart. For more details.  see the changelist below:\n\nChangelist:\n    1. Add ThreadCountBasedAssignmentCalculator.  a wrapper around ThreadCountBasedTaskAssigner\n    2. Make logic changes in JobRebalancer to enable the use of ThreadCountBasedAssignmentCalculator\n    3. Fix the failing test by using a thread-safe map and rename TestGenericTaskAssignmentCalculator to TestTaskAssignmentCalculator to better reflect what its tests are doing\n    4. Add retry logic that was previously absent for INIT and DROPPED tasks in JobRebalancer\n    5. Add TestQuotaBasedScheduling to test that jobs and tasks were being assigned and scheduled per quota config set in ClusterConfig\n    6. Add more log messages to aid with task-scheduling debugging in AssignableInstance\n    7. In AbstractTaskDispatcher.  for tasks that are STOPPED.  TIMED_OUT.  TASK_ERROR.  the retry logic was newly implemented so that they get re-started correctly\n    8. In AbstractTaskDispatcher.  when enforcing overlapAssign for jobs with isAllowOverlapAssignment().  a fix was implemented so that only jobs whose state is IN_PROGRESS are considered\n    9. In AbstractTaskDispatcher.  isWorkflowFinished() method was modified so that non-active jobs will have their tasks' resource freed from AssignableInstances to prevent resource leak\n   10. In markJobFailed() and markJobCompleted().  non-active jobs will have their tasks' resource freed from AssignableInstances to prevent resource leak\n   11. Fix the logic so that quotas do not apply to targeted jobs\n   12. Fix TestTaskRebalancer (assumes Consistent Hashing.  which is no longer used)\n   13. Fix TestIndependentTaskRebalancer (assumes Consistent Hashing.  no longer used)\n   14. Assignment logic was improved so that incomplete tasks whose assigned participants are no longer live will be re-assigned accordingly\n   15. Fix TestTaskRebalanceFailover (tasks on non-live instances will be re-assigned promptly)\n   16. Fix TestRebalanceRunningTask (targeted jobs will get tasks reassigned upon liveInstance and currentState change)\n   17. Fix a bug in FixedAssignmentCalculator and assignment logic for targeted jobs such that a task index will no longer be assigned multiple times\n   18. Fix TestJobFailureTaskNotStarted (tasks were not being assigned at all due to having reached maximum capacity for quota)\n   19. Add targetedTaskConfigMap field in JobConfig to cache TaskConfig objects for targeted tasks to reduce object creation and GC overload\n   20. Fix JobConfig so that it doesn't write quotaType to ZooKeeper when quotaType is null or not set\n   21. Fix deleteWorkflow() in TaskUtil so that the earliest delete failure will render the entire method as failed (and return prematurely to prevent breaking other ZNodes from incomplete deletion)\n   22. Fix TestDeleteWorkflow by adding another removeProperty() clause to lower failure rate\n","date":"2018-07-14 08:38:58","modifiedFileCount":"36","status":"M","submitter":"Hunter Lee"},{"authorTime":"2018-07-14 05:45:41","codes":[{"authorDate":"2020-11-18 08:24:18","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    _participants = new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numPartitions = 2;\n    _numReplicas = 1;\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)\n            .setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n  }\n","date":"2020-11-18 08:24:18","endLine":91,"groupId":"5866","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e5/e05b8d2aad84fd7012d79a627c68ce6d999d59.src","preCode":"  public void beforeClass() throws Exception {\n    _participants = new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numPartitions = 2;\n    _numReplicas = 1;\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2018-07-14 05:45:41","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numPartitions = 50;\n    _numReplicas = 1;\n    _participants =  new MockParticipantManager[_numNodes];\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numPartitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling(10000, 100));\n  }\n","date":"2018-07-14 08:38:58","endLine":77,"groupId":"5866","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/09b188fb5097990888dfca924972fee3b8fb64.src","preCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numPartitions = 50;\n    _numReplicas = 1;\n    _participants =  new MockParticipantManager[_numNodes];\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numPartitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling(10000, 100));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobTimeoutTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"1d6d6076550f4076c2108e7738c6f0d54bd4178d","commitMessage":"@@@Stabilizing several tests by giving a starting up waiting periods  (#1533)\n\nStabilizing several tests by giving a starting up waiting periods up-on constructing BestPossibleExternalViewVerifier.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-11-18 08:24:18","modifiedFileCount":"12","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-11-24 04:38:13","codes":[{"authorDate":"2020-11-18 08:24:18","commitOrder":8,"curCode":"  public void beforeClass() throws Exception {\n    _participants = new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numPartitions = 2;\n    _numReplicas = 1;\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)\n            .setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n  }\n","date":"2020-11-18 08:24:18","endLine":91,"groupId":"10497","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e5/e05b8d2aad84fd7012d79a627c68ce6d999d59.src","preCode":"  public void beforeClass() throws Exception {\n    _participants = new MockParticipantManager[_numNodes];\n    _numDbs = 1;\n    _numNodes = 2;\n    _numPartitions = 2;\n    _numReplicas = 1;\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)\n            .setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2020-11-24 04:38:13","commitOrder":8,"curCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numPartitions = 50;\n    _numReplicas = 1;\n    _participants = new MockParticipantManager[_numNodes];\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numPartitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling(10000, 100));\n  }\n","date":"2020-11-24 04:38:13","endLine":79,"groupId":"10497","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ef/a1fdb7cf705931d87d3b52c8b493ff39f4d52a.src","preCode":"  public void beforeClass() throws Exception {\n    _numDbs = 1;\n    _numNodes = 1;\n    _numPartitions = 50;\n    _numReplicas = 1;\n    _participants = new MockParticipantManager[_numNodes];\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    setupParticipants();\n    setupDBs();\n    startParticipantsWithStuckTaskStateModelFactory();\n    createManagers();\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, CONTROLLER_PREFIX);\n    _controller.syncStart();\n\n    \r\n    ConfigAccessor _configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.stateTransitionCancelEnabled(true);\n    clusterConfig.setMaxConcurrentTaskPerInstance(_numPartitions);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling(10000, 100));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobTimeoutTaskNotStarted.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"5509306c3b1e489c99e5931302a953ed6d3e20f0","commitMessage":"@@@misc fix: (#1541)\n\n1/ further leakage fix of TestClusterStateVerifier.  TestRoutingTableProviderPeriodicRefresh.java\n2/ timeout setting general 900s as github run is slow and also TestEnableCompression 30mins to let it finish\n3/ wait some time before best possible verifier start for TestJobTimeoutTaskNotStarted\n4/ clean up zk resource after test finish for TestDistControllerElection\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-11-24 04:38:13","modifiedFileCount":"6","status":"M","submitter":"kaisun2000"}]
