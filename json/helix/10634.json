[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testDisableNodeCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setIdealStateMode(IdealStateModeProperty.CUSTOMIZED.toString());\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n    \n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2012-10-25 07:14:36","endLine":123,"groupId":"5267","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNodeCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3a/29560e9dc7c5b8d77e955c91508df11964c6e6.src","preCode":"  public void testDisableNodeCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setIdealStateMode(IdealStateModeProperty.CUSTOMIZED.toString());\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n    \n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testDisableNodeAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n    \n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2012-10-25 07:14:36","endLine":211,"groupId":"5073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableNodeAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3a/29560e9dc7c5b8d77e955c91508df11964c6e6.src","preCode":"  public void testDisableNodeAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n    \n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2013-08-16 07:21:52","commitOrder":2,"curCode":"  public void testDisableNodeCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n    \n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2013-08-16 07:21:52","endLine":142,"groupId":"5267","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNodeCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/00657c3caaf88a3c5d63b83d8705bfe908875f.src","preCode":"  public void testDisableNodeCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setIdealStateMode(IdealStateModeProperty.CUSTOMIZED.toString());\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n    \n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2012-10-25 07:14:36","commitOrder":2,"curCode":"  public void testDisableNodeAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n    \n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2012-10-25 07:14:36","endLine":211,"groupId":"5073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableNodeAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3a/29560e9dc7c5b8d77e955c91508df11964c6e6.src","preCode":"  public void testDisableNodeAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n    \n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enableInstance \" + clusterName + \n        \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"}],"commitId":"13d19e914e7deec29c5cd665e75df12eafbce1b1","commitMessage":"@@@HELIX-166: Rename modes to auto.  semi-auto.  and custom.  rb=13444\n","date":"2013-08-16 07:21:52","modifiedFileCount":"39","status":"M","submitter":"zzhang"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":130,"groupId":"2257","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNodeCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/47/44508d2c29af68c310f7636bee3e1acfa158dc.src","preCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testDisableNodeAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":210,"groupId":"2257","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableNodeAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/47/44508d2c29af68c310f7636bee3e1acfa158dc.src","preCode":"  public void testDisableNodeAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"5c7721970eef78e2d13d35b4934b07cb11a03cd9","commitMessage":"@@@Merge branch 'helix-0.6.2-release' of https://git-wip-us.apache.org/repos/asf/incubator-helix into helix-0.6.2-release\n","date":"2013-10-25 09:35:16","modifiedFileCount":"105","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":4,"curCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verify());\n\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verify());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verify());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":127,"groupId":"3537","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNodeCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d5/12e9ed76e590117d295f8643b8a189ae6e6702.src","preCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":4,"curCode":"  public void testDisableNodeAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":210,"groupId":"2257","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableNodeAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/47/44508d2c29af68c310f7636bee3e1acfa158dc.src","preCode":"  public void testDisableNodeAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":126,"groupId":"3537","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNodeCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9c/10a938b213404ba0c5482946d96d05096921a3.src","preCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verify());\n\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verify());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verify());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void testDisableNodeAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":202,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableNodeAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9c/10a938b213404ba0c5482946d96d05096921a3.src","preCode":"  public void testDisableNodeAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":127,"groupId":"3061","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNodeCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/177a7b2d5c4dffa7c61b65f6c8c50e29769512.src","preCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  public void testDisableNodeAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":203,"groupId":"3062","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableNodeAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/177a7b2d5c4dffa7c61b65f6c8c50e29769512.src","preCode":"  public void testDisableNodeAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-08-06 10:47:55","codes":[{"authorDate":"2020-08-06 10:47:55","commitOrder":7,"curCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-08-06 10:47:55","endLine":128,"groupId":"3061","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNodeCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bd/60ccec408668fd2ba1d8faff19647db0dea93c.src","preCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-08-06 10:47:55","commitOrder":7,"curCode":"  public void testDisableNodeAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-08-06 10:47:55","endLine":204,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableNodeAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bd/60ccec408668fd2ba1d8faff19647db0dea93c.src","preCode":"  public void testDisableNodeAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"56cf1259add5d00bb13fefb018a5de9679a1c6a7","commitMessage":"@@@Fix ZkHelixClusterVerifier related resource leakage (#1185)\n\nZkHelixClusterVerifier and its subclass built with ZK addres would\ncreate an internal ZkClient. Without properly closing the ZkClient\nor using global ZkClient in the test base. There would be four\nthreads and one ZooKeeper client object leaked. The leaked threads\nwould be in thousands and thus be one of the main contributor\npreventing the unit test from finishing. This pull request addresses\nthis issue.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-08-06 10:47:55","modifiedFileCount":"30","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2020-10-08 07:58:42","commitOrder":8,"curCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-08 07:58:42","endLine":130,"groupId":"10634","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testDisableNodeCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/44/dfd820bfb3e0946a0ac7de8f6682ccb89db6bd.src","preCode":"  public void testDisableNodeCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12918\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-10-08 07:58:42","commitOrder":8,"curCode":"  public void testDisableNodeAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-08 07:58:42","endLine":208,"groupId":"10634","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testDisableNodeAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/44/dfd820bfb3e0946a0ac7de8f6682ccb89db6bd.src","preCode":"  public void testDisableNodeAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n    String disableNode = \"localhost_12919\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" false\";\n    ClusterSetup.processCommandLineArgs(command.split(\" \"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(disableNode, \"OFFLINE\");\n    expectStateMap.put(\".*\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, disableNode + \" should be in OFFLINE\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enableInstance \" + clusterName + \" \" + disableNode + \" true\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, disableNode + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"}]
