[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testController() throws Exception\n  {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path))\n    {\n      _gZkClient.deleteRecursive(path);\n    }\n   \n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager = new MockZKHelixManager(clusterName, controllerName,\n                               InstanceType.CONTROLLER,\n                               _gZkClient);\n\n    DistClusterControllerElection election = new DistClusterControllerElection(ZK_ADDR);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n\r\n\r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager = new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER,\n                               _gZkClient);\n    election = new DistClusterControllerElection(ZK_ADDR);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":91,"groupId":"2610","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9b/0f16645e07026fbcda5a465c7d9ff6ffc21975.src","preCode":"  public void testController() throws Exception\n  {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path))\n    {\n      _gZkClient.deleteRecursive(path);\n    }\n   \n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager = new MockZKHelixManager(clusterName, controllerName,\n                               InstanceType.CONTROLLER,\n                               _gZkClient);\n\n    DistClusterControllerElection election = new DistClusterControllerElection(ZK_ADDR);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n\r\n\r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager = new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER,\n                               _gZkClient);\n    election = new DistClusterControllerElection(ZK_ADDR);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testControllerParticipant() throws Exception\n  {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName = CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\"\n        + \"testControllerParticipant\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path))\n    {\n      _gZkClient.deleteRecursive(path);\n    }\n    \n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager = new MockZKHelixManager(clusterName, controllerName,\n                               InstanceType.CONTROLLER_PARTICIPANT,\n                               _gZkClient);\n\n    DistClusterControllerElection election = new DistClusterControllerElection(ZK_ADDR);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n\r\n\r\n\r\n    \r\n    \r\n\n    manager = new MockZKHelixManager(clusterName, \"controller_1\",\n                               InstanceType.CONTROLLER_PARTICIPANT,\n                               _gZkClient);\n    election = new DistClusterControllerElection(ZK_ADDR);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n\r\n\r\n    \r\n    \r\n\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":148,"groupId":"2875","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testControllerParticipant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9b/0f16645e07026fbcda5a465c7d9ff6ffc21975.src","preCode":"  public void testControllerParticipant() throws Exception\n  {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName = CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\"\n        + \"testControllerParticipant\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path))\n    {\n      _gZkClient.deleteRecursive(path);\n    }\n    \n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager = new MockZKHelixManager(clusterName, controllerName,\n                               InstanceType.CONTROLLER_PARTICIPANT,\n                               _gZkClient);\n\n    DistClusterControllerElection election = new DistClusterControllerElection(ZK_ADDR);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n\r\n\r\n\r\n    \r\n    \r\n\n    manager = new MockZKHelixManager(clusterName, \"controller_1\",\n                               InstanceType.CONTROLLER_PARTICIPANT,\n                               _gZkClient);\n    election = new DistClusterControllerElection(ZK_ADDR);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n\r\n\r\n    \r\n    \r\n\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2014-04-03 04:35:26","codes":[{"authorDate":"2014-04-03 04:35:26","commitOrder":2,"curCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursive(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n    \r\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n    \r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-04-04 03:59:25","endLine":99,"groupId":"2610","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/175d535bd627268b950738de9daa7aa0ea93d9.src","preCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursive(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n\n    DistClusterControllerElection election = new DistClusterControllerElection(ZK_ADDR);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n    \r\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    election = new DistClusterControllerElection(ZK_ADDR);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n    \r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2014-04-03 04:35:26","commitOrder":2,"curCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursive(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-04-04 03:59:25","endLine":159,"groupId":"2875","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testControllerParticipant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/175d535bd627268b950738de9daa7aa0ea93d9.src","preCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursive(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n\n    DistClusterControllerElection election = new DistClusterControllerElection(ZK_ADDR);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    election = new DistClusterControllerElection(ZK_ADDR);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"d540ba8a20795d474472c62a89dc1b7bb5afd011","commitMessage":"@@@[HELIX-423] Remove election code duplication.  fix metrics reset\n","date":"2014-04-04 03:59:25","modifiedFileCount":"3","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2018-03-09 06:04:42","codes":[{"authorDate":"2018-03-09 06:04:42","commitOrder":3,"curCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursively(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n    \r\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n    \r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-03-20 07:43:31","endLine":100,"groupId":"2610","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/90/990eeb6e5294a55ffdf549d6a359589003858a.src","preCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursive(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n    \r\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n    \r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2018-03-09 06:04:42","commitOrder":3,"curCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursively(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-03-20 07:43:31","endLine":160,"groupId":"2875","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testControllerParticipant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/90/990eeb6e5294a55ffdf549d6a359589003858a.src","preCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursive(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"0e849035379a04b079ac1274bb8aaab473df1572","commitMessage":"@@@[HELIX-679] consolidate semantics of recursively delete path in ZkClient\n","date":"2018-03-20 07:43:31","modifiedFileCount":"57","status":"M","submitter":"hrzhang"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n    \r\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n    \r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":98,"groupId":"2610","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/60/8e2e13fd7f9dfe27cfb036f9b34afc558dda46.src","preCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursively(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n    \r\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n    \r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":155,"groupId":"2875","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testControllerParticipant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/60/8e2e13fd7f9dfe27cfb036f9b34afc558dda46.src","preCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n    String path = \"/\" + clusterName;\n    if (_gZkClient.exists(path)) {\n      _gZkClient.deleteRecursively(path);\n    }\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n    \r\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n    \r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    accessor.removeProperty(keyBuilder.controllerLeader());\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":97,"groupId":"2610","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d8/9a656bc50fb3b3030ae86a3aac9afc1f8d5100.src","preCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n    \r\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n    \r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n\n    accessor.removeProperty(keyBuilder.controllerLeader());\n    TestHelper.dropCluster(clusterName, _gZkClient);\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":155,"groupId":"2875","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testControllerParticipant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d8/9a656bc50fb3b3030ae86a3aac9afc1f8d5100.src","preCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2020-11-18 08:52:35","codes":[{"authorDate":"2020-11-18 08:52:35","commitOrder":6,"curCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    try {\n      context.setType(NotificationContext.Type.INIT);\n      election.onControllerChange(context);\n\n      \r\n      \r\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n      \r\n      \r\n    } finally {\n      manager.disconnect();\n      controller0.shutdown();\n    }\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    try {\n      election.onControllerChange(context);\n      \r\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n      \r\n      \r\n    } finally {\n      manager.disconnect();\n      controller1.shutdown();\n      accessor.removeProperty(keyBuilder.controllerLeader());\n      TestHelper.dropCluster(clusterName, _gZkClient);\n    }\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-11-18 08:52:35","endLine":112,"groupId":"5982","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bf/58c1beb61979de11964f49a762b4577a66efc8.src","preCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n\n    \r\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    election.onControllerChange(context);\n    \r\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n    \r\n    \r\n\n    accessor.removeProperty(keyBuilder.controllerLeader());\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-11-18 08:52:35","commitOrder":6,"curCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    try {\n      election.onControllerChange(context);\n\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n      \r\n      \r\n      \r\n      \r\n      \r\n    }\n    finally {\n      manager.disconnect();\n      controller0.shutdown();\n    }\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    try {\n      election.onControllerChange(context);\n\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n      \r\n      \r\n      \r\n      \r\n    } finally {\n      manager.disconnect();\n      controller1.shutdown();\n    }\n\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-11-18 08:52:35","endLine":179,"groupId":"5984","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testControllerParticipant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bf/58c1beb61979de11964f49a762b4577a66efc8.src","preCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    election.onControllerChange(context);\n\n    liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n    AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n    \r\n    \r\n    \r\n    \r\n\n    accessor.removeProperty(keyBuilder.controllerLeader());\n    TestHelper.dropCluster(clusterName, _gZkClient);\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"540c53bd9913471baaaf8fade8489a5fffb1dc37","commitMessage":"@@@Fix several tests with resource leakage (#1534)\n\nFix several tests with resource leakage.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-11-18 08:52:35","modifiedFileCount":"7","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-11-24 04:38:13","codes":[{"authorDate":"2020-11-18 08:52:35","commitOrder":7,"curCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    try {\n      context.setType(NotificationContext.Type.INIT);\n      election.onControllerChange(context);\n\n      \r\n      \r\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n      \r\n      \r\n    } finally {\n      manager.disconnect();\n      controller0.shutdown();\n    }\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    try {\n      election.onControllerChange(context);\n      \r\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n      \r\n      \r\n    } finally {\n      manager.disconnect();\n      controller1.shutdown();\n      accessor.removeProperty(keyBuilder.controllerLeader());\n      TestHelper.dropCluster(clusterName, _gZkClient);\n    }\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-11-18 08:52:35","endLine":112,"groupId":"1013","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testController","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bf/58c1beb61979de11964f49a762b4577a66efc8.src","preCode":"  public void testController() throws Exception {\n    System.out.println(\"START TestDistControllerElection at \"\n        + new Date(System.currentTimeMillis()));\n    String className = getShortClassName();\n\n    final String clusterName = CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testController\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    try {\n      context.setType(NotificationContext.Type.INIT);\n      election.onControllerChange(context);\n\n      \r\n      \r\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n      \r\n      \r\n    } finally {\n      manager.disconnect();\n      controller0.shutdown();\n    }\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER, _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.INIT);\n    try {\n      election.onControllerChange(context);\n      \r\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n      \r\n      \r\n    } finally {\n      manager.disconnect();\n      controller1.shutdown();\n      accessor.removeProperty(keyBuilder.controllerLeader());\n      TestHelper.dropCluster(clusterName, _gZkClient);\n    }\n\n    System.out.println(\"END TestDistControllerElection at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2020-11-24 04:38:13","commitOrder":7,"curCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    try {\n      election.onControllerChange(context);\n\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n      \r\n      \r\n      \r\n      \r\n      \r\n    }\n    finally {\n      manager.disconnect();\n      controller0.shutdown();\n    }\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    try {\n      election.onControllerChange(context);\n\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n      \r\n      \r\n      \r\n      \r\n    } finally {\n      manager.disconnect();\n      controller1.shutdown();\n    }\n    accessor.removeProperty(keyBuilder.controllerLeader());\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-11-24 04:38:13","endLine":181,"groupId":"1013","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testControllerParticipant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/01/711d9c6dd31c0707b9898d736fb7a11052ffd7.src","preCode":"  public void testControllerParticipant() throws Exception {\n    String className = getShortClassName();\n    LOG.info(\"RUN \" + className + \" at \" + new Date(System.currentTimeMillis()));\n\n    final String clusterName =\n        CONTROLLER_CLUSTER_PREFIX + \"_\" + className + \"_\" + \"testControllerParticipant\";\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n\n    final String controllerName = \"controller_0\";\n    HelixManager manager =\n        new MockZKHelixManager(clusterName, controllerName, InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller0 = new GenericHelixController();\n    List<HelixTimerTask> timerTasks = Collections.emptyList();\n\n    DistributedLeaderElection election =\n        new DistributedLeaderElection(manager, controller0, timerTasks);\n    NotificationContext context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    try {\n      election.onControllerChange(context);\n\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n      \r\n      \r\n      \r\n      \r\n      \r\n    }\n    finally {\n      manager.disconnect();\n      controller0.shutdown();\n    }\n\n    manager =\n        new MockZKHelixManager(clusterName, \"controller_1\", InstanceType.CONTROLLER_PARTICIPANT,\n            _gZkClient);\n    GenericHelixController controller1 = new GenericHelixController();\n    election = new DistributedLeaderElection(manager, controller1, timerTasks);\n    context = new NotificationContext(manager);\n    context.setType(NotificationContext.Type.CALLBACK);\n    try {\n      election.onControllerChange(context);\n\n      LiveInstance liveInstance = accessor.getProperty(keyBuilder.controllerLeader());\n      AssertJUnit.assertEquals(controllerName, liveInstance.getInstanceName());\n\n      \r\n      \r\n      \r\n      \r\n    } finally {\n      manager.disconnect();\n      controller1.shutdown();\n    }\n\n    LOG.info(\"END \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"5509306c3b1e489c99e5931302a953ed6d3e20f0","commitMessage":"@@@misc fix: (#1541)\n\n1/ further leakage fix of TestClusterStateVerifier.  TestRoutingTableProviderPeriodicRefresh.java\n2/ timeout setting general 900s as github run is slow and also TestEnableCompression 30mins to let it finish\n3/ wait some time before best possible verifier start for TestJobTimeoutTaskNotStarted\n4/ clean up zk resource after test finish for TestDistControllerElection\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-11-24 04:38:13","modifiedFileCount":"6","status":"M","submitter":"kaisun2000"}]
