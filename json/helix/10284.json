[{"authorTime":"2018-06-29 09:06:04","codes":[{"authorDate":"2018-06-29 09:06:04","commitOrder":2,"curCode":"  public void testNoStateMissing() {\n    String resourcePrefix = \"resource\";\n    int nResource = 4;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet, nReplica,\n        nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(1);\n    setClusterConfig(_clusterConfig);\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"1\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n            currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"2\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"OFFLINE\");\n          } else if (resource.endsWith(\"3\")) {\n            \r\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            if (p == 0) {\n              if (r == 0) {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"ERROR\");\n                bestPossibleStateOutput.setState(resource, partition, instanceName, \"ERROR\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ERROR\");\n              } else {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              }\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              \r\n            }\n          } else if (resource.endsWith(\"4\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n            }\n          } else if (resource.endsWith(\"5\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","date":"2018-06-29 09:06:04","endLine":173,"groupId":"5576","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoStateMissing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6b/8795f57b1cf44dff21f987efdb87e09a9f3f2a.src","preCode":"  public void testNoStateMissing() {\n    String resourcePrefix = \"resource\";\n    int nResource = 4;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet, nReplica,\n        nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(1);\n    setClusterConfig(_clusterConfig);\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"1\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n            currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"2\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"OFFLINE\");\n          } else if (resource.endsWith(\"3\")) {\n            \r\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            if (p == 0) {\n              if (r == 0) {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"ERROR\");\n                bestPossibleStateOutput.setState(resource, partition, instanceName, \"ERROR\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ERROR\");\n              } else {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              }\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              \r\n            }\n          } else if (resource.endsWith(\"4\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n            }\n          } else if (resource.endsWith(\"5\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"MB"},{"authorDate":"2018-06-29 09:06:04","commitOrder":2,"curCode":"  public void testWithClusterConfigChange() {\n    String resourcePrefix = \"resource\";\n    int nResource = 1;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet,\n        nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            \r\n            _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(Integer.MAX_VALUE);\n            setClusterConfig(_clusterConfig);\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","date":"2018-06-29 09:06:04","endLine":250,"groupId":"5577","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithClusterConfigChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6b/8795f57b1cf44dff21f987efdb87e09a9f3f2a.src","preCode":"  public void testWithClusterConfigChange() {\n    String resourcePrefix = \"resource\";\n    int nResource = 1;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet,\n        nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            \r\n            _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(Integer.MAX_VALUE);\n            setClusterConfig(_clusterConfig);\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"B"}],"commitId":"37f3d4c8dadd7cadeebad4fb41e2d4b1c38601fa","commitMessage":"@@@[HELIX-711]  Allow downward state transition during recovery and add recovery threshold\n\nPreviously.  a single partition requiring recovery balance would block all types of load-balance. This commit allows all downward state transitions (load balance) to happen even when recovery balance is happening in the same cycle.\nAs for non-downward state transitions load-balance.  a parameter.  ErrorOrRecoveryPartitionThresholdForLoadBalance.  was added to ClusterConfig. If the number of partitions requiring recovery is lower than the threshold.  non-downward load-balance will take place in the same cycle as recovery balance; otherwise.  non-downward load-balance will not take place in the same cycle.\n","date":"2018-06-29 09:06:04","modifiedFileCount":"4","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":3,"curCode":"  public void testNoStateMissing() {\n    String resourcePrefix = \"resource\";\n    int nResource = 4;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet, nReplica,\n        nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(1);\n    setClusterConfig(_clusterConfig);\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"1\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n            currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"2\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"OFFLINE\");\n          } else if (resource.endsWith(\"3\")) {\n            \r\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            if (p == 0) {\n              if (r == 0) {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"ERROR\");\n                bestPossibleStateOutput.setState(resource, partition, instanceName, \"ERROR\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ERROR\");\n              } else {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              }\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              \r\n            }\n          } else if (resource.endsWith(\"4\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n            }\n          } else if (resource.endsWith(\"5\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":178,"groupId":"5576","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoStateMissing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/48/d17ec4232587340693e2da470b41e046192258.src","preCode":"  public void testNoStateMissing() {\n    String resourcePrefix = \"resource\";\n    int nResource = 4;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet, nReplica,\n        nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(1);\n    setClusterConfig(_clusterConfig);\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"1\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n            currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"2\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"OFFLINE\");\n          } else if (resource.endsWith(\"3\")) {\n            \r\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            if (p == 0) {\n              if (r == 0) {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"ERROR\");\n                bestPossibleStateOutput.setState(resource, partition, instanceName, \"ERROR\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ERROR\");\n              } else {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              }\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              \r\n            }\n          } else if (resource.endsWith(\"4\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n            }\n          } else if (resource.endsWith(\"5\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":3,"curCode":"  public void testWithClusterConfigChange() {\n    String resourcePrefix = \"resource\";\n    int nResource = 1;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet,\n        nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            \r\n            _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(Integer.MAX_VALUE);\n            setClusterConfig(_clusterConfig);\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":257,"groupId":"5577","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithClusterConfigChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/48/d17ec4232587340693e2da470b41e046192258.src","preCode":"  public void testWithClusterConfigChange() {\n    String resourcePrefix = \"resource\";\n    int nResource = 1;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet,\n        nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            \r\n            _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(Integer.MAX_VALUE);\n            setClusterConfig(_clusterConfig);\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2019-11-02 08:00:25","codes":[{"authorDate":"2019-11-02 08:00:25","commitOrder":4,"curCode":"  public void testNoStateMissing() {\n    String resourcePrefix = \"resource\";\n    int nResource = 4;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    String[] resources = new String[nResource];\n    for (int i = 0; i < nResource; i++) {\n      resources[i] = resourcePrefix + \"_\" + i;\n    }\n\n    preSetup(resources, nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(),\n        getResourceMap(resources, nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(),\n        getResourceMap(resources, nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(1);\n    setClusterConfig(_clusterConfig);\n\n    for (String resource : resources) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            Message pendingMessage = new Message(\"customType\", \"001\");\n            pendingMessage.setToState(\"ONLINE\");\n            currentStateOutput.setPendingMessage(resource, partition, instanceName, pendingMessage);\n\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"1\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n            currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"2\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"OFFLINE\");\n          } else if (resource.endsWith(\"3\")) {\n            \r\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            if (p == 0) {\n              if (r == 0) {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"ERROR\");\n                bestPossibleStateOutput.setState(resource, partition, instanceName, \"ERROR\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ERROR\");\n              } else {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              }\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput\n                  .setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              \r\n            }\n          } else if (resource.endsWith(\"4\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput\n                  .setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n            }\n          } else if (resource.endsWith(\"5\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resources) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","date":"2019-11-07 05:34:01","endLine":185,"groupId":"2975","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoStateMissing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dd/727eaf80055d829cb1d344c53c506d22da02e5.src","preCode":"  public void testNoStateMissing() {\n    String resourcePrefix = \"resource\";\n    int nResource = 4;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet, nReplica,\n        nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(1);\n    setClusterConfig(_clusterConfig);\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"1\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n            currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"2\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"OFFLINE\");\n          } else if (resource.endsWith(\"3\")) {\n            \r\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            if (p == 0) {\n              if (r == 0) {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"ERROR\");\n                bestPossibleStateOutput.setState(resource, partition, instanceName, \"ERROR\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ERROR\");\n              } else {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              }\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              \r\n            }\n          } else if (resource.endsWith(\"4\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\",\n                  \"OFFLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n            }\n          } else if (resource.endsWith(\"5\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2019-11-02 08:00:25","commitOrder":4,"curCode":"  public void testWithClusterConfigChange() {\n    String resourcePrefix = \"resource\";\n    int nResource = 1;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    String[] resources = new String[nResource];\n    for (int i = 0; i < nResource; i++) {\n      resources[i] = resourcePrefix + \"_\" + i;\n    }\n\n    preSetup(resources, nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(),\n        getResourceMap(resources, nPartition,\n            \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(),\n        getResourceMap(resources, nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    for (String resource : resources) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            \r\n            _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(Integer.MAX_VALUE);\n            setClusterConfig(_clusterConfig);\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resources) {\n      \r\n      \r\n      Assert.assertEquals(output.getPartitionStateMap(resource).getStateMap(), expectedResult.getPartitionStateMap(resource).getStateMap());\n    }\n  }\n","date":"2019-11-07 05:34:01","endLine":263,"groupId":"2976","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithClusterConfigChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dd/727eaf80055d829cb1d344c53c506d22da02e5.src","preCode":"  public void testWithClusterConfigChange() {\n    String resourcePrefix = \"resource\";\n    int nResource = 1;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    Set<String> resourceSet = new HashSet<>();\n    for (int i = 0; i < nResource; i++) {\n      resourceSet.add(resourcePrefix + \"_\" + i);\n    }\n\n    preSetup(StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, resourceSet,\n        nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), getResourceMap(\n        resourceSet.toArray(new String[resourceSet.size()]), nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    for (String resource : resourceSet) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            \r\n            _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(Integer.MAX_VALUE);\n            setClusterConfig(_clusterConfig);\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resourceSet) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"554dcd0e328f96462c4712019be7513d9166b4ee","commitMessage":"@@@Fix partitions double charged for pending message\n\nCurrent Helix will charge the partitions with pending message twice due to not remove the partition from partitions need recovery/load balance set when they are charged for pending message.\n\nThis fix will fix the problem for recovery/load/ANY rebalance type charged for pending messages.\n","date":"2019-11-07 05:34:01","modifiedFileCount":"2","status":"M","submitter":"Junkai Xue"},{"authorTime":"2021-05-26 01:19:08","codes":[{"authorDate":"2021-05-26 01:19:08","commitOrder":5,"curCode":"  public void testNoStateMissing() {\n    String resourcePrefix = \"resource\";\n    int nResource = 4;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    String[] resources = new String[nResource];\n    for (int i = 0; i < nResource; i++) {\n      resources[i] = resourcePrefix + \"_\" + i;\n    }\n\n    preSetup(resources, nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(resources, nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(),\n        getResourceMap(resources, nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    MessageOutput messageSelectOutput = new MessageOutput();\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(1);\n    setClusterConfig(_clusterConfig);\n\n    for (String resource : resources) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            Message pendingMessage = generateMessage(\"OFFLINE\", \"ONLINE\", instanceName);\n            currentStateOutput.setPendingMessage(resource, partition, instanceName, pendingMessage);\n\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"1\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n            currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            messageSelectOutput.addMessage(resource, partition,\n                generateMessage(\"OFFLINE\", \"DROPPED\", instanceName + \"-1\"));\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"2\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"OFFLINE\");\n          } else if (resource.endsWith(\"3\")) {\n            \r\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            if (p == 0) {\n              if (r == 0) {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"ERROR\");\n                bestPossibleStateOutput.setState(resource, partition, instanceName, \"ERROR\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ERROR\");\n              } else {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n                messageSelectOutput.addMessage(resource, partition, generateMessage(\"OFFLINE\", \"ONLINE\", instanceName));\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              }\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n              \r\n              messageSelectOutput.addMessage(resource, partition,\n                  generateMessage(\"OFFLINE\", \"DROPPED\", instanceName + \"-1\"));\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              \r\n            }\n          } else if (resource.endsWith(\"4\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              messageSelectOutput.addMessage(resource, partition, generateMessage(\"OFFLINE\", \"ONLINE\", instanceName));\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n              messageSelectOutput.addMessage(resource, partition,\n                  generateMessage(\"OFFLINE\", \"DROPPED\", instanceName + \"-1\"));\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n            }\n          } else if (resource.endsWith(\"5\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              messageSelectOutput.addMessage(resource, partition, generateMessage(\"OFFLINE\", \"ONLINE\", instanceName));\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              messageSelectOutput.addMessage(resource, partition,\n                  generateMessage(\"OFFLINE\", \"ONLINE\", instanceName + \"-1\"));\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.MESSAGES_SELECTED.name(), messageSelectOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resources) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource)\n          .getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","date":"2021-06-02 02:44:29","endLine":192,"groupId":"10284","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testNoStateMissing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7f/17dea77d185918523f1203947a9b90992d2ad7.src","preCode":"  public void testNoStateMissing() {\n    String resourcePrefix = \"resource\";\n    int nResource = 4;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    String[] resources = new String[nResource];\n    for (int i = 0; i < nResource; i++) {\n      resources[i] = resourcePrefix + \"_\" + i;\n    }\n\n    preSetup(resources, nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(),\n        getResourceMap(resources, nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(),\n        getResourceMap(resources, nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(1);\n    setClusterConfig(_clusterConfig);\n\n    for (String resource : resources) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            Message pendingMessage = new Message(\"customType\", \"001\");\n            pendingMessage.setToState(\"ONLINE\");\n            currentStateOutput.setPendingMessage(resource, partition, instanceName, pendingMessage);\n\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"1\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n            currentStateOutput.setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n          } else if (resource.endsWith(\"2\")) {\n            \r\n            currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"OFFLINE\");\n            \r\n            expectedResult.setState(resource, partition, instanceName, \"OFFLINE\");\n          } else if (resource.endsWith(\"3\")) {\n            \r\n            bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n            if (p == 0) {\n              if (r == 0) {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"ERROR\");\n                bestPossibleStateOutput.setState(resource, partition, instanceName, \"ERROR\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ERROR\");\n              } else {\n                currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n                \r\n                expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              }\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput\n                  .setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              \r\n            }\n          } else if (resource.endsWith(\"4\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              currentStateOutput\n                  .setCurrentState(resource, partition, instanceName + \"-1\", \"OFFLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"DROPPED\");\n            }\n          } else if (resource.endsWith(\"5\")) {\n            \r\n            \r\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resources) {\n      \r\n      \r\n      Assert.assertTrue(output.getPartitionStateMap(resource).getStateMap()\n          .equals(expectedResult.getPartitionStateMap(resource).getStateMap()));\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2021-05-26 01:19:08","commitOrder":5,"curCode":"  public void testWithClusterConfigChange() {\n    String resourcePrefix = \"resource\";\n    int nResource = 1;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    String[] resources = new String[nResource];\n    for (int i = 0; i < nResource; i++) {\n      resources[i] = resourcePrefix + \"_\" + i;\n    }\n\n    preSetup(resources, nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(), getResourceMap(resources, nPartition, \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(),\n        getResourceMap(resources, nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    MessageOutput messageSelectOutput = new MessageOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    for (String resource : resources) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            \r\n            _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(Integer.MAX_VALUE);\n            setClusterConfig(_clusterConfig);\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              messageSelectOutput.addMessage(resource, partition, generateMessage(\"OFFLINE\", \"ONLINE\", instanceName));\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              messageSelectOutput.addMessage(resource, partition,\n                  generateMessage(\"OFFLINE\", \"ONLINE\", instanceName + \"-1\"));\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.MESSAGES_SELECTED.name(), messageSelectOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resources) {\n      \r\n      \r\n      Assert.assertEquals(output.getPartitionStateMap(resource).getStateMap(),\n          expectedResult.getPartitionStateMap(resource).getStateMap());\n    }\n  }\n","date":"2021-06-02 02:44:29","endLine":273,"groupId":"10284","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testWithClusterConfigChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7f/17dea77d185918523f1203947a9b90992d2ad7.src","preCode":"  public void testWithClusterConfigChange() {\n    String resourcePrefix = \"resource\";\n    int nResource = 1;\n    int nPartition = 2;\n    int nReplica = 3;\n\n    String[] resources = new String[nResource];\n    for (int i = 0; i < nResource; i++) {\n      resources[i] = resourcePrefix + \"_\" + i;\n    }\n\n    preSetup(resources, nReplica, nReplica);\n    event.addAttribute(AttributeName.RESOURCES.name(),\n        getResourceMap(resources, nPartition,\n            \"OnlineOffline\"));\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(),\n        getResourceMap(resources, nPartition, \"OnlineOffline\"));\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    IntermediateStateOutput expectedResult = new IntermediateStateOutput();\n\n    for (String resource : resources) {\n      IdealState is = accessor.getProperty(accessor.keyBuilder().idealStates(resource));\n      setSingleIdealState(is);\n\n      Map<String, List<String>> partitionMap = new HashMap<>();\n      for (int p = 0; p < nPartition; p++) {\n        Partition partition = new Partition(resource + \"_\" + p);\n        for (int r = 0; r < nReplica; r++) {\n          String instanceName = HOSTNAME_PREFIX + r;\n          partitionMap.put(partition.getPartitionName(), Collections.singletonList(instanceName));\n          if (resource.endsWith(\"0\")) {\n            \r\n            \r\n            _clusterConfig.setErrorOrRecoveryPartitionThresholdForLoadBalance(Integer.MAX_VALUE);\n            setClusterConfig(_clusterConfig);\n            if (p == 0) {\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"OFFLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              \r\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n            } else {\n              \r\n              \r\n              currentStateOutput.setCurrentState(resource, partition, instanceName, \"ONLINE\");\n              bestPossibleStateOutput.setState(resource, partition, instanceName, \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName, \"ONLINE\");\n\n              \r\n              bestPossibleStateOutput.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n              expectedResult.setState(resource, partition, instanceName + \"-1\", \"ONLINE\");\n            }\n          }\n        }\n      }\n      bestPossibleStateOutput.setPreferenceLists(resource, partitionMap);\n    }\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    IntermediateStateOutput output = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    for (String resource : resources) {\n      \r\n      \r\n      Assert.assertEquals(output.getPartitionStateMap(resource).getStateMap(), expectedResult.getPartitionStateMap(resource).getStateMap());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestIntermediateStateCalcStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"f49986e24c27c49d8c877457753e32dcf8b540f4","commitMessage":"@@@[Replica Level Throttle] Make Pipeline in a correct order and fixes tests (#1750)\n\n* Make Pipeline in a correct order and fixes tests\n\n1. Make pipeline running in a correct order to process computation\n2. Add \"DROPPED\" case in the mapping to reflect the real case.\n3. Fixes test cases.","date":"2021-06-02 02:44:29","modifiedFileCount":"15","status":"M","submitter":"Junkai Xue"}]
