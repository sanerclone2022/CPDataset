[{"authorTime":"2015-03-12 15:31:28","codes":[{"authorDate":"2018-03-24 02:51:04","commitOrder":4,"curCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","date":"2018-03-26 05:43:42","endLine":272,"groupId":"4937","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getProperty","params":"(List<PropertyKey>keys@booleanthrowException)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a0/c06f7145cad44a9e499b02cdc06405eb34ca44.src","preCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"},{"authorDate":"2015-03-12 15:31:28","commitOrder":4,"curCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","date":"2015-03-12 15:31:28","endLine":271,"groupId":"4937","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getProperty","params":"(PropertyKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ed/434a1c496a61a6cbcc63449bcc4bd5d695d3eb.src","preCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"NB"}],"commitId":"38b9a7982da3a2f994da14571545dd40b696e5e7","commitMessage":"@@@Add new API for getProperty and get\n\nThese new APIs will perform different behavior as before. It will throw an exception if throwException flag set to be true and at least one of path is failed to read in the list. Previous behavior is ignoring the read failure and filled with null for unread data.\n","date":"2018-03-26 05:43:42","modifiedFileCount":"7","status":"M","submitter":"Junkai Xue"},{"authorTime":"2015-03-12 15:31:28","codes":[{"authorDate":"2018-03-25 11:29:36","commitOrder":5,"curCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixMetaDataAccessException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","date":"2018-03-27 05:50:31","endLine":272,"groupId":"4937","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getProperty","params":"(List<PropertyKey>keys@booleanthrowException)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4c/2574155160d57cecc71104d831f72253324c69.src","preCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2015-03-12 15:31:28","commitOrder":5,"curCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","date":"2015-03-12 15:31:28","endLine":271,"groupId":"4937","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getProperty","params":"(PropertyKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ed/434a1c496a61a6cbcc63449bcc4bd5d695d3eb.src","preCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"N"}],"commitId":"149831c8f49ee893f4966c2d01c21c005cca9d0a","commitMessage":"@@@Fail rebalance pipeline and retry if the data load from zookeeper fails in any read/batch-read calls.\n","date":"2018-03-27 05:50:31","modifiedFileCount":"17","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-12-01 09:47:32","codes":[{"authorDate":"2018-12-01 09:47:32","commitOrder":6,"curCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixMetaDataAccessException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","date":"2019-01-31 03:26:13","endLine":273,"groupId":"4937","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getProperty","params":"(List<PropertyKey>keys@booleanthrowException)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/2403f2f8f55c346403e7f9534ed2ee4434574d.src","preCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixMetaDataAccessException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2018-12-01 09:47:32","commitOrder":6,"curCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","date":"2019-01-31 03:26:13","endLine":328,"groupId":"4689","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getProperty","params":"(PropertyKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/2403f2f8f55c346403e7f9534ed2ee4434574d.src","preCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"0e0fcb99297d569a3cf1ccda4b7d25e44f73a41a","commitMessage":"@@@Fix the leader election issue when an invalid controller leader node with stale session was found.\n\nSince HelixManager refreshes the session Id only when new session event was processed.  there could be a delay before the new session Id becomes visible to the election method. In these case.  an invalid leader node might be created with a stale session Id. As a result.  this invalid node prevents the other controllers (including the original controller with a new session Id now) from acquiring the leadership.\n\nThis change make leader check respect the ZkNode ephemeral owner Id instead of the content. Note that in this case.  the node content will still contains the stale session Id.  but leader check will return the correct result. The invalid node issue will be fixed as a next step. Basically.  we need to discard the stale event when processing ZK events. This is not a blocking issue here.\n\nIn addition.  added a DistControllerElection test case using real helix managers.\n","date":"2019-01-31 03:26:13","modifiedFileCount":"11","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-05-15 08:34:22","codes":[{"authorDate":"2018-12-01 09:47:32","commitOrder":7,"curCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixMetaDataAccessException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","date":"2019-01-31 03:26:13","endLine":273,"groupId":"4937","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getProperty","params":"(List<PropertyKey>keys@booleanthrowException)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/2403f2f8f55c346403e7f9534ed2ee4434574d.src","preCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixMetaDataAccessException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"N"},{"authorDate":"2020-05-15 08:34:22","commitOrder":7,"curCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 0, 0);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","date":"2020-05-15 08:34:22","endLine":335,"groupId":"3769","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getProperty","params":"(PropertyKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/da/a00f3f67ff408879270708cb3fcd95f1afc096.src","preCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"6ff99f5a181fb5fe91340968f93ca2cd5329a90a","commitMessage":"@@@Enforce result check for data accessors batch get calls to prevent partial batch read. (#974)\n\nThis will help to ensure the main Helix logic does not calculate based on incomplete input.","date":"2020-05-15 08:34:22","modifiedFileCount":"49","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-12-09 06:31:12","codes":[{"authorDate":"2020-12-09 06:31:12","commitOrder":8,"curCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixMetaDataAccessException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case TASKCURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","date":"2020-12-22 07:00:24","endLine":283,"groupId":"11801","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getProperty","params":"(List<PropertyKey>keys@booleanthrowException)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/3c6c70acb54c816e002c5c80194023499b0a81.src","preCode":"  public <T extends HelixProperty> List<T> getProperty(List<PropertyKey> keys,\n      boolean throwException) throws HelixMetaDataAccessException {\n    if (keys == null || keys.size() == 0) {\n      return Collections.emptyList();\n    }\n\n    List<T> childValues = new ArrayList<T>();\n\n    \r\n    List<String> paths = new ArrayList<>();\n    List<Stat> stats = new ArrayList<>();\n    for (PropertyKey key : keys) {\n      paths.add(key.getPath());\n      stats.add(new Stat());\n    }\n    List<ZNRecord> children = _baseDataAccessor.get(paths, stats, 0, throwException);\n\n    \r\n    for (int i = 0; i < keys.size(); i++) {\n      PropertyKey key = keys.get(i);\n      ZNRecord record = children.get(i);\n      Stat stat = stats.get(i);\n\n      PropertyType type = key.getType();\n      String path = key.getPath();\n      int options = constructOptions(type);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n\n      switch (type) {\n      case CURRENTSTATES:\n      case IDEALSTATES:\n      case EXTERNALVIEW:\n        \r\n        if (record != null) {\n          HelixProperty property = new HelixProperty(record);\n\n          int bucketSize = property.getBucketSize();\n          if (bucketSize > 0) {\n            \r\n            \r\n            property.getRecord().getMapFields().clear();\n            property.getRecord().getListFields().clear();\n\n            List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 1, 0);\n            ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n            \r\n            if (assembledRecord != null) {\n              record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n              record.getListFields().putAll(assembledRecord.getListFields());\n              record.getMapFields().putAll(assembledRecord.getMapFields());\n            }\n          }\n        }\n        break;\n      default:\n        break;\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n      childValues.add(t);\n    }\n\n    return childValues;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2020-12-09 06:31:12","commitOrder":8,"curCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case TASKCURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 0, 0);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","date":"2020-12-22 07:00:24","endLine":339,"groupId":"11801","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getProperty","params":"(PropertyKeykey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/3c6c70acb54c816e002c5c80194023499b0a81.src","preCode":"  public <T extends HelixProperty> T getProperty(PropertyKey key) {\n    PropertyType type = key.getType();\n    String path = key.getPath();\n    int options = constructOptions(type);\n    ZNRecord record = null;\n    try {\n      Stat stat = new Stat();\n      record = _baseDataAccessor.get(path, stat, options);\n      if (record != null) {\n        record.setCreationTime(stat.getCtime());\n        record.setModifiedTime(stat.getMtime());\n        record.setVersion(stat.getVersion());\n        record.setEphemeralOwner(stat.getEphemeralOwner());\n      }\n    } catch (ZkNoNodeException e) {\n      \r\n    }\n\n    switch (type) {\n    case CURRENTSTATES:\n    case IDEALSTATES:\n    case EXTERNALVIEW:\n      \r\n      if (record != null) {\n        HelixProperty property = new HelixProperty(record);\n\n        int bucketSize = property.getBucketSize();\n        if (bucketSize > 0) {\n          \r\n          \r\n          property.getRecord().getMapFields().clear();\n          property.getRecord().getListFields().clear();\n\n          List<ZNRecord> childRecords = _baseDataAccessor.getChildren(path, null, options, 0, 0);\n          ZNRecord assembledRecord = new ZNRecordAssembler().assemble(childRecords);\n\n          \r\n          if (assembledRecord != null) {\n            record.getSimpleFields().putAll(assembledRecord.getSimpleFields());\n            record.getListFields().putAll(assembledRecord.getListFields());\n            record.getMapFields().putAll(assembledRecord.getMapFields());\n          }\n        }\n      }\n      break;\n    default:\n      break;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T t = (T) HelixProperty.convertToTypedInstance(key.getTypeClass(), record);\n    return t;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"a18deb06c28e25e79a9a773069a79ce21a2399b3","commitMessage":"@@@Controller-side Task Current State Migration (#1550)\n\nFirst part of task current state migration. \nAll changes made in this PR are on the controller side \nand are directly pipeline-impacting.","date":"2020-12-22 07:00:24","modifiedFileCount":"25","status":"M","submitter":"Neal Sun"}]
