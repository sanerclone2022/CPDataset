[{"authorTime":"2017-11-17 05:26:06","codes":[{"authorDate":"2017-11-17 05:26:06","commitOrder":1,"curCode":"  public void testWithDisabledInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n\n    \r\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      String instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, false);\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    String instance = _participants.get(i).getInstanceName();\n    admin.enableInstance(CLUSTER_NAME, instance, false);\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed + 1; i++) {\n      instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, true);\n    }\n    admin.enableMaintenanceMode(CLUSTER_NAME, false);\n  }\n","date":"2018-01-25 10:31:40","endLine":148,"groupId":"1838","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithDisabledInstancesLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e0/3ee14e9dd5e8428146512267227ccd3bf1e4ef.src","preCode":"  public void testWithDisabledInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n\n    \r\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      String instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, false);\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    String instance = _participants.get(i).getInstanceName();\n    admin.enableInstance(CLUSTER_NAME, instance, false);\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed + 1; i++) {\n      instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, true);\n    }\n    admin.enableMaintenanceMode(CLUSTER_NAME, false);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2017-11-17 05:26:06","commitOrder":1,"curCode":"  public void testWithOfflineInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      _participants.get(i).syncStop();\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    _participants.get(i).syncStop();\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","date":"2018-01-25 10:31:40","endLine":186,"groupId":"1839","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithOfflineInstancesLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e0/3ee14e9dd5e8428146512267227ccd3bf1e4ef.src","preCode":"  public void testWithOfflineInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      _participants.get(i).syncStop();\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    _participants.get(i).syncStop();\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"}],"commitId":"de2e3e8be366984461c0b43c8dc6a28048c66157","commitMessage":"@@@Fix two tests for maintenance mode\n","date":"2018-01-25 10:31:40","modifiedFileCount":"0","status":"B","submitter":"Junkai Xue"},{"authorTime":"2018-10-06 07:26:11","codes":[{"authorDate":"2018-10-06 07:26:11","commitOrder":2,"curCode":"  public void testWithDisabledInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n\n    \r\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      String instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, false);\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    String instance = _participants.get(i).getInstanceName();\n    admin.enableInstance(CLUSTER_NAME, instance, false);\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    checkForRebalanceError(true);\n\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed + 1; i++) {\n      instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, true);\n    }\n    admin.enableMaintenanceMode(CLUSTER_NAME, false);\n  }\n","date":"2018-11-02 05:38:36","endLine":153,"groupId":"2987","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithDisabledInstancesLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0d/e2fe3af2dda04607f6876167b4f4a5f25232ce.src","preCode":"  public void testWithDisabledInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n\n    \r\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      String instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, false);\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    String instance = _participants.get(i).getInstanceName();\n    admin.enableInstance(CLUSTER_NAME, instance, false);\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed + 1; i++) {\n      instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, true);\n    }\n    admin.enableMaintenanceMode(CLUSTER_NAME, false);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2018-10-06 07:26:11","commitOrder":2,"curCode":"  public void testWithOfflineInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      _participants.get(i).syncStop();\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    _participants.get(i).syncStop();\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    \r\n    checkForRebalanceError(true);\n  }\n","date":"2018-11-02 05:38:36","endLine":183,"groupId":"1839","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithOfflineInstancesLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0d/e2fe3af2dda04607f6876167b4f4a5f25232ce.src","preCode":"  public void testWithOfflineInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      _participants.get(i).syncStop();\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    _participants.get(i).syncStop();\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"2f39f381b0981503d7c204aabbeaa09153292e15","commitMessage":"@@@Emitting per resource rebalance status for possible calculation failure.\n\nThe status in MBean will be string for debug purposes only.\nThe resource rebalance state attribute will be in one of the following state:\n1. NORMAL\n2. BEST_POSSIBLE_STATE_CAL_FAILED: calculation failed or no possible allocation found.\n3. INTERMEDIATE_STATE_CAL_FAILED: Intermediate state calculation failed. (not include throttled case)\n4. UNKNOWN: the resource is not rebalanced or newly created.\n\nAdditional related changes:\n1. Fix a cluster level metric related bug to generate the right metrics data.\n2. Fix a resource monitoring bug that DISABLE_MONITORING is not working.\n","date":"2018-11-02 05:38:36","modifiedFileCount":"11","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2018-10-06 07:26:11","codes":[{"authorDate":"2020-10-08 07:58:42","commitOrder":3,"curCode":"  public void testWithDisabledInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n\n    \r\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      String instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, false);\n    }\n\n    boolean result = TestHelper.verify(() -> {\n      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n      return ms == null;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    String instance = _participants.get(i).getInstanceName();\n    admin.enableInstance(CLUSTER_NAME, instance, false);\n\n    ZkHelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n\n    result = TestHelper.verify(() -> {\n      MaintenanceSignal ms =_dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n      return ms != null && ms.getReason() != null;\n    }, TestHelper.WAIT_DURATION);\n\n    checkForRebalanceError(true);\n\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed + 1; i++) {\n      instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, true);\n    }\n    admin.enableMaintenanceMode(CLUSTER_NAME, false);\n\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n  }\n","date":"2020-10-08 07:58:42","endLine":164,"groupId":"2345","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithDisabledInstancesLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/54af0f790085f1320a979fee11eb81efd4b97a.src","preCode":"  public void testWithDisabledInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n\n    \r\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      String instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, false);\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    String instance = _participants.get(i).getInstanceName();\n    admin.enableInstance(CLUSTER_NAME, instance, false);\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    checkForRebalanceError(true);\n\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed + 1; i++) {\n      instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, true);\n    }\n    admin.enableMaintenanceMode(CLUSTER_NAME, false);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2018-10-06 07:26:11","commitOrder":3,"curCode":"  public void testWithOfflineInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      _participants.get(i).syncStop();\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    _participants.get(i).syncStop();\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    \r\n    checkForRebalanceError(true);\n  }\n","date":"2018-11-02 05:38:36","endLine":183,"groupId":"1839","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithOfflineInstancesLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0d/e2fe3af2dda04607f6876167b4f4a5f25232ce.src","preCode":"  public void testWithOfflineInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      _participants.get(i).syncStop();\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    _participants.get(i).syncStop();\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    \r\n    checkForRebalanceError(true);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-10-08 08:12:34","codes":[{"authorDate":"2020-10-08 08:12:34","commitOrder":4,"curCode":"  public void testWithDisabledInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n\n    \r\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      String instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, false);\n    }\n\n    boolean result = TestHelper.verify(() -> {\n      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n      return ms == null;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    String instance = _participants.get(i).getInstanceName();\n    admin.enableInstance(CLUSTER_NAME, instance, false);\n\n    ZkHelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n\n    result = TestHelper.verify(() -> {\n      MaintenanceSignal ms =_dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n      return ms != null && ms.getReason() != null;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    checkForRebalanceError(true);\n\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed + 1; i++) {\n      instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, true);\n    }\n    admin.enableMaintenanceMode(CLUSTER_NAME, false);\n\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n  }\n","date":"2020-10-08 08:12:34","endLine":165,"groupId":"10398","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testWithDisabledInstancesLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fa/e1b31e6e8ac4527798593a8a08b7bd36e02bb4.src","preCode":"  public void testWithDisabledInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n\n    \r\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      String instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, false);\n    }\n\n    boolean result = TestHelper.verify(() -> {\n      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n      return ms == null;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    String instance = _participants.get(i).getInstanceName();\n    admin.enableInstance(CLUSTER_NAME, instance, false);\n\n    ZkHelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n\n    result = TestHelper.verify(() -> {\n      MaintenanceSignal ms =_dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n      return ms != null && ms.getReason() != null;\n    }, TestHelper.WAIT_DURATION);\n\n    checkForRebalanceError(true);\n\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed + 1; i++) {\n      instance = _participants.get(i).getInstanceName();\n      admin.enableInstance(CLUSTER_NAME, instance, true);\n    }\n    admin.enableMaintenanceMode(CLUSTER_NAME, false);\n\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2020-10-08 08:12:34","commitOrder":4,"curCode":"  public void testWithOfflineInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      _participants.get(i).syncStop();\n    }\n\n    boolean result = TestHelper.verify(() -> {\n      MaintenanceSignal ms = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n      return ms == null;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    _participants.get(i).syncStop();\n\n    result = TestHelper.verify(() -> {\n      MaintenanceSignal ms =_dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n      return ms != null && ms.getReason() != null;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n    \n    \r\n    checkForRebalanceError(true);\n  }\n","date":"2020-10-08 08:12:34","endLine":196,"groupId":"10398","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testWithOfflineInstancesLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fa/e1b31e6e8ac4527798593a8a08b7bd36e02bb4.src","preCode":"  public void testWithOfflineInstancesLimit() throws Exception {\n    MaintenanceSignal maintenanceSignal =\n        _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    checkForRebalanceError(false);\n\n    int i;\n    for (i = 2; i < 2 + _maxOfflineInstancesAllowed; i++) {\n      _participants.get(i).syncStop();\n    }\n\n    Thread.sleep(500);\n\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    _participants.get(i).syncStop();\n\n    Thread.sleep(500);\n    maintenanceSignal = _dataAccessor.getProperty(_dataAccessor.keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertNotNull(maintenanceSignal.getReason());\n\n    \r\n    checkForRebalanceError(true);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"aaa6a7c900408ff7becfe49449e038bf09cb72f4","commitMessage":"@@@Replace Thread.sleep() with TestHelper.verify() to fix the flaky unit tests (#1447)\n\nQuite some unit test still use Thread.sleep(xxx) to wait for a condition to happen. This is a source of falkiness of test. This may also make the test running unnecessarily long. We address this issue with TestHelper.verify() method.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-10-08 08:12:34","modifiedFileCount":"8","status":"M","submitter":"kaisun2000"}]
