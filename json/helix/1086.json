[{"authorTime":"2018-03-21 06:04:30","codes":[{"authorDate":"2017-04-27 06:34:25","commitOrder":2,"curCode":"  protected void startParticipant(int i) {\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<String, TaskFactory>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, new TaskFactory() {\n      @Override public Task createNewTask(TaskCallbackContext context) {\n        return new MockTask(context);\n      }\n    });\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(\"Task\",\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","date":"2017-07-13 04:58:05","endLine":147,"groupId":"2622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startParticipant","params":"(inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/10/04c1f2fba7bed469e2ab29f060f1b55a7edc10.src","preCode":"  protected void startParticipant(int i) {\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<String, TaskFactory>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, new TaskFactory() {\n      @Override public Task createNewTask(TaskCallbackContext context) {\n        return new MockTask(context);\n      }\n    });\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(\"Task\",\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"NB"},{"authorDate":"2018-03-21 06:04:30","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    String namespace = \"/\" + CLUSTER_NAME;\n    _participants =  new MockParticipantManager[NUM_NODES];\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2018-03-24 03:12:44","endLine":73,"groupId":"1307","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/61/87cffa2b0d5001533a40fe760be85ad7b807c3.src","preCode":"  public void beforeClass() throws Exception {\n    String namespace = \"/\" + CLUSTER_NAME;\n    _participants =  new MockParticipantManager[NUM_NODES];\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderFromCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"}],"commitId":"e5728469e02f196690654b4f7f2ed8ca9130a631","commitMessage":"@@@Change RoutingTableProvider to support direct aggregating routing information from CurrentStates in each liveinstance. When sourceDataType is set as CurrentState.  RoutingTableProvider will listen on CurrentStateChanges and refresh routing table from CurrentStates upon changes.\n","date":"2018-03-24 03:12:44","modifiedFileCount":"7","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-03-21 06:04:30","codes":[{"authorDate":"2018-05-18 04:29:31","commitOrder":3,"curCode":"  protected void startParticipant(String zkAddr, int i) {\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<String, TaskFactory>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, new TaskFactory() {\n      @Override public Task createNewTask(TaskCallbackContext context) {\n        return new MockTask(context);\n      }\n    });\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(zkAddr, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(\"Task\",\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","date":"2018-07-10 06:56:40","endLine":162,"groupId":"2622","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startParticipant","params":"(StringzkAddr@inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ca/b60ce43cb688117fa22d01871e2b89751837c6.src","preCode":"  protected void startParticipant(int i) {\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<String, TaskFactory>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, new TaskFactory() {\n      @Override public Task createNewTask(TaskCallbackContext context) {\n        return new MockTask(context);\n      }\n    });\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(\"Task\",\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2018-03-21 06:04:30","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    String namespace = \"/\" + CLUSTER_NAME;\n    _participants =  new MockParticipantManager[NUM_NODES];\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2018-03-24 03:12:44","endLine":73,"groupId":"1307","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/61/87cffa2b0d5001533a40fe760be85ad7b807c3.src","preCode":"  public void beforeClass() throws Exception {\n    String namespace = \"/\" + CLUSTER_NAME;\n    _participants =  new MockParticipantManager[NUM_NODES];\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderFromCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"aaa632f3d53a0268bfbf1b7ed18996cdc72894a4","commitMessage":"@@@Fix TestZkConnectionLost to use seperate zk server to avoid stuck other tests.\n","date":"2018-07-10 06:56:40","modifiedFileCount":"2","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-05-18 04:29:31","commitOrder":4,"curCode":"  protected void startParticipant(String zkAddr, int i) {\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<String, TaskFactory>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, new TaskFactory() {\n      @Override public Task createNewTask(TaskCallbackContext context) {\n        return new MockTask(context);\n      }\n    });\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(zkAddr, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(\"Task\",\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","date":"2018-07-10 06:56:40","endLine":162,"groupId":"2622","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startParticipant","params":"(StringzkAddr@inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ca/b60ce43cb688117fa22d01871e2b89751837c6.src","preCode":"  protected void startParticipant(String zkAddr, int i) {\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<String, TaskFactory>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, new TaskFactory() {\n      @Override public Task createNewTask(TaskCallbackContext context) {\n        return new MockTask(context);\n      }\n    });\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(zkAddr, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(\"Task\",\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"N"},{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2018-07-14 02:20:49","endLine":63,"groupId":"1307","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/99/e4ce6d439a3e2bdd8533f9ec51134d333ebf38.src","preCode":"  public void beforeClass() throws Exception {\n    String namespace = \"/\" + CLUSTER_NAME;\n    _participants =  new MockParticipantManager[NUM_NODES];\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderFromCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  protected void startParticipant(String zkAddr, int i) {\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, MockTask::new);\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(zkAddr, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(\"Task\",\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","date":"2019-05-25 09:19:21","endLine":171,"groupId":"2622","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"startParticipant","params":"(StringzkAddr@inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/25/f043ac1b71c53328fadd5d257580c12a6c65a8.src","preCode":"  protected void startParticipant(String zkAddr, int i) {\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<String, TaskFactory>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, new TaskFactory() {\n      @Override public Task createNewTask(TaskCallbackContext context) {\n        return new MockTask(context);\n      }\n    });\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(zkAddr, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(\"Task\",\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2018-07-14 02:20:49","endLine":63,"groupId":"1307","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/99/e4ce6d439a3e2bdd8533f9ec51134d333ebf38.src","preCode":"  public void beforeClass() throws Exception {\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderFromCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2020-07-08 02:05:56","commitOrder":6,"curCode":"  protected void startParticipant(String zkAddr, int i) {\n    if (_participants[i] != null) {\n      stopParticipant(i);\n    }\n\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, MockTask::new);\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(zkAddr, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(TaskConstants.STATE_MODEL_NAME,\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","date":"2020-07-08 02:05:56","endLine":179,"groupId":"1307","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"startParticipant","params":"(StringzkAddr@inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c2/81b16feee834253e8b5e4134495c6e8a5a5593.src","preCode":"  protected void startParticipant(String zkAddr, int i) {\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, MockTask::new);\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(zkAddr, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(\"Task\",\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2018-07-14 02:20:49","endLine":63,"groupId":"1307","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/99/e4ce6d439a3e2bdd8533f9ec51134d333ebf38.src","preCode":"  public void beforeClass() throws Exception {\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderFromCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"}],"commitId":"3fc870815219d910c6e357b6b4ba843b2244c776","commitMessage":"@@@Shutdown the TaskStateModelFactory threads created in the tests. (#1140)\n\nThe TaskStateModelFactory initialization creates a thread pool. The expectation is that the application code closes the thread pool and the threads when the participant instance is shutting down. In most cases.  this means the JVM is going to be shutdown. So this operation is not a must. However.  in the test cases.  these thread pools leak thousands of threads.\nThis PR adds cleanup logic to shutdown thread pools that are created for the participant instances. Note that there is still thread leakage when the participants are created separately instead of using the general methods.","date":"2020-07-08 02:05:56","modifiedFileCount":"2","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-12-16 06:26:53","codes":[{"authorDate":"2020-07-08 02:05:56","commitOrder":7,"curCode":"  protected void startParticipant(String zkAddr, int i) {\n    if (_participants[i] != null) {\n      stopParticipant(i);\n    }\n\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, MockTask::new);\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(zkAddr, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(TaskConstants.STATE_MODEL_NAME,\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","date":"2020-07-08 02:05:56","endLine":179,"groupId":"1086","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"startParticipant","params":"(StringzkAddr@inti)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c2/81b16feee834253e8b5e4134495c6e8a5a5593.src","preCode":"  protected void startParticipant(String zkAddr, int i) {\n    if (_participants[i] != null) {\n      stopParticipant(i);\n    }\n\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, MockTask::new);\n    String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n    _participants[i] = new MockParticipantManager(zkAddr, CLUSTER_NAME, instanceName);\n\n    \r\n    StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n    stateMachine.registerStateModelFactory(TaskConstants.STATE_MODEL_NAME,\n        new TaskStateModelFactory(_participants[i], taskFactoryReg));\n    _participants[i].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"},{"authorDate":"2020-12-16 06:26:53","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n    taskFactoryReg.put(MockTask.TASK_COMMAND, MockTask::new);\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n      stateMachine.registerStateModelFactory(TaskConstants.STATE_MODEL_NAME,\n          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","date":"2020-12-22 07:00:24","endLine":118,"groupId":"1086","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e8/f4f82b2b4b8b162f1bb024e5e02f02493effac.src","preCode":"  public void beforeClass() throws Exception {\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n    _participants = new MockParticipantManager[NUM_NODES];\n    for (int i = 0; i < NUM_NODES; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    for (int i = 0; i < NUM_NODES; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"Admin\", InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ConfigAccessor _configAccessor = _manager.getConfigAccessor();\n    ClusterConfig clusterConfig = _configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.enableTargetExternalView(true);\n    _configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderFromCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"361e18da4152c0146daa9d9dc7929f1f2bdcd9dc","commitMessage":"@@@Participant-side Task Current State Migration (#1584)\n\nThe second part of the task current state migration. \nAll changes made in this commit are on the participant side.","date":"2020-12-22 07:00:24","modifiedFileCount":"10","status":"M","submitter":"Neal Sun"}]
