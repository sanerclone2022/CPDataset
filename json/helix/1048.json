[{"authorTime":"2013-08-03 07:45:36","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public static void disconnectSession(final ZkClient zkClient) throws Exception\n  {\n    IZkStateListener listener = new IZkStateListener()\n    {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception\n      {\n\r\n      }\n\n      @Override\n      public void handleNewSession() throws Exception\n      {\n        \r\n        zkClient.waitUntilConnected();\n\n        ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n        ZooKeeper curZookeeper = connection.getZookeeper();\n\n        LOG.info(\"handleNewSession. sessionId: \"\n            + Long.toHexString(curZookeeper.getSessionId()));\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher()\n    {\n      @Override\n      public void process(WatchedEvent event)\n      {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(),\n                      curZookeeper.getSessionTimeout(),\n                      watcher,\n                      curZookeeper.getSessionId(),\n                      curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED)\n    {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2013-04-06 08:30:58","endLine":119,"groupId":"1251","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"disconnectSession","params":"(finalZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a5/b5681a1543531aa4f4c6f1023c86a5710e33ed.src","preCode":"  public static void disconnectSession(final ZkClient zkClient) throws Exception\n  {\n    IZkStateListener listener = new IZkStateListener()\n    {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception\n      {\n\r\n      }\n\n      @Override\n      public void handleNewSession() throws Exception\n      {\n        \r\n        zkClient.waitUntilConnected();\n\n        ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n        ZooKeeper curZookeeper = connection.getZookeeper();\n\n        LOG.info(\"handleNewSession. sessionId: \"\n            + Long.toHexString(curZookeeper.getSessionId()));\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher()\n    {\n      @Override\n      public void process(WatchedEvent event)\n      {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(),\n                      curZookeeper.getSessionTimeout(),\n                      watcher,\n                      curZookeeper.getSessionId(),\n                      curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED)\n    {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"NB"},{"authorDate":"2013-08-03 07:45:36","commitOrder":2,"curCode":"  public static void asyncExpireSession(final ZkClient zkClient) throws Exception\n  {\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher()\n    {\n      @Override\n      public void process(WatchedEvent event)\n      {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(),\n                      curZookeeper.getSessionTimeout(),\n                      watcher,\n                      curZookeeper.getSessionId(),\n                      curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED)\n    {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2013-08-03 07:45:36","endLine":223,"groupId":"1251","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExpireSession","params":"(finalZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f6/e1f22f247d96955405768932896fb3071685b6.src","preCode":"  public static void asyncExpireSession(final ZkClient zkClient) throws Exception\n  {\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher()\n    {\n      @Override\n      public void process(WatchedEvent event)\n      {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(),\n                      curZookeeper.getSessionTimeout(),\n                      watcher,\n                      curZookeeper.getSessionId(),\n                      curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED)\n    {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"9bed09c17b2ce9a5d6ddb64b5004d5e9163cb7ca","commitMessage":"@@@HELIX-169: add test case for handling consecutive zk session expiry\n","date":"2013-08-03 07:45:36","modifiedFileCount":"9","status":"M","submitter":"zzhang"},{"authorTime":"2013-08-03 07:45:36","codes":[{"authorDate":"2016-01-12 14:28:17","commitOrder":3,"curCode":"  public static void disconnectSession(final ZkClient zkClient) throws Exception {\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession() throws Exception {\n        \r\n        zkClient.waitUntilConnected();\n\n        ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n        ZooKeeper curZookeeper = connection.getZookeeper();\n\n        LOG.info(\"handleNewSession. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2016-01-12 14:28:17","endLine":131,"groupId":"1251","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"disconnectSession","params":"(finalZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/63/18b676e71e36237f0e97028dd5a320aa09d3c7.src","preCode":"  public static void disconnectSession(final ZkClient zkClient) throws Exception {\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession() throws Exception {\n        \r\n        zkClient.waitUntilConnected();\n\n        ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n        ZooKeeper curZookeeper = connection.getZookeeper();\n\n        LOG.info(\"handleNewSession. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2013-08-03 07:45:36","commitOrder":3,"curCode":"  public static void asyncExpireSession(final ZkClient zkClient) throws Exception\n  {\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher()\n    {\n      @Override\n      public void process(WatchedEvent event)\n      {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(),\n                      curZookeeper.getSessionTimeout(),\n                      watcher,\n                      curZookeeper.getSessionId(),\n                      curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED)\n    {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2013-08-03 07:45:36","endLine":223,"groupId":"1251","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExpireSession","params":"(finalZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f6/e1f22f247d96955405768932896fb3071685b6.src","preCode":"  public static void asyncExpireSession(final ZkClient zkClient) throws Exception\n  {\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher()\n    {\n      @Override\n      public void process(WatchedEvent event)\n      {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(),\n                      curZookeeper.getSessionTimeout(),\n                      watcher,\n                      curZookeeper.getSessionId(),\n                      curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED)\n    {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"N"}],"commitId":"1dc2aae0dbbf37e68cf68e6f72b171057ecaff4a","commitMessage":"@@@Merge branch 'helix-0.6.x' of https://github.com/jicongrui/helix into helix-0.6.x\n","date":"2016-01-12 14:28:17","modifiedFileCount":"8","status":"M","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-08-03 07:45:36","codes":[{"authorDate":"2018-05-22 09:19:48","commitOrder":4,"curCode":"  public static void disconnectSession(final ZkClient zkClient) throws Exception {\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession() throws Exception {\n        \r\n        zkClient.waitUntilConnected(ZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.SECONDS);\n\n        ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n        ZooKeeper curZookeeper = connection.getZookeeper();\n\n        LOG.info(\"handleNewSession. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2018-07-14 04:56:56","endLine":135,"groupId":"1251","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"disconnectSession","params":"(finalZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b5/99a0a59888178ae2f5a7ff17047370bd4507ff.src","preCode":"  public static void disconnectSession(final ZkClient zkClient) throws Exception {\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession() throws Exception {\n        \r\n        zkClient.waitUntilConnected();\n\n        ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n        ZooKeeper curZookeeper = connection.getZookeeper();\n\n        LOG.info(\"handleNewSession. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2013-08-03 07:45:36","commitOrder":4,"curCode":"  public static void asyncExpireSession(final ZkClient zkClient) throws Exception\n  {\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher()\n    {\n      @Override\n      public void process(WatchedEvent event)\n      {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(),\n                      curZookeeper.getSessionTimeout(),\n                      watcher,\n                      curZookeeper.getSessionId(),\n                      curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED)\n    {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2013-08-03 07:45:36","endLine":223,"groupId":"1251","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExpireSession","params":"(finalZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f6/e1f22f247d96955405768932896fb3071685b6.src","preCode":"  public static void asyncExpireSession(final ZkClient zkClient) throws Exception\n  {\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher()\n    {\n      @Override\n      public void process(WatchedEvent event)\n      {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(),\n                      curZookeeper.getSessionTimeout(),\n                      watcher,\n                      curZookeeper.getSessionId(),\n                      curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED)\n    {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"N"}],"commitId":"f1a900e465725028ffd77a0699334c1290661fd7","commitMessage":"@@@Fix zkclient state related check and some potential bugs.\n\nChange the connection flapping check to tolerate high threshold. This feature is going to be deprecated in the future.\n\nAdditional changes\n1. Remove duplicate test TestZkManagerFlappingDetection that already covered by TestZkFlapping.\n","date":"2018-07-14 04:56:56","modifiedFileCount":"10","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2018-09-27 02:39:42","commitOrder":5,"curCode":"  public static void disconnectSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession() throws Exception {\n        \r\n        zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.SECONDS);\n\n        ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n        ZooKeeper curZookeeper = connection.getZookeeper();\n\n        LOG.info(\"handleNewSession. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2018-10-30 09:15:22","endLine":147,"groupId":"1251","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"disconnectSession","params":"(HelixZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/cd2e85873605eac077e1ba9014995cbc8ccf92.src","preCode":"  public static void disconnectSession(final ZkClient zkClient) throws Exception {\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession() throws Exception {\n        \r\n        zkClient.waitUntilConnected(ZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.SECONDS);\n\n        ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n        ZooKeeper curZookeeper = connection.getZookeeper();\n\n        LOG.info(\"handleNewSession. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2018-09-27 02:39:42","commitOrder":5,"curCode":"  public static void asyncExpireSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2018-10-30 09:15:22","endLine":246,"groupId":"1251","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExpireSession","params":"(HelixZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/cd2e85873605eac077e1ba9014995cbc8ccf92.src","preCode":"  public static void asyncExpireSession(final ZkClient zkClient) throws Exception {\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"9d7364d7abba3932a1b25e96e4eb9dd3e203cec9","commitMessage":"@@@Using HelixZkClient to replace ZkClient in helix-core and helix-rest.\n\n1. Replace as much usage as possible. For the raw ZkClient tests.  the usages are kept.\n2. For backward compatibility.  some public interfaces still returns ZkClient. Marks them as Deprecated.\n","date":"2018-10-30 09:15:22","modifiedFileCount":"60","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2019-12-17 07:21:10","commitOrder":6,"curCode":"  public static void disconnectSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession(final String sessionId) throws Exception {\n        \r\n        zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.SECONDS);\n\n        LOG.info(\"handleNewSession. sessionId: {}.\", sessionId);\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2019-12-17 07:21:10","endLine":145,"groupId":"1251","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"disconnectSession","params":"(HelixZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8a/5b7fe412d567efd5ae8ca073d5d6248a0c4e6b.src","preCode":"  public static void disconnectSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession() throws Exception {\n        \r\n        zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.SECONDS);\n\n        ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n        ZooKeeper curZookeeper = connection.getZookeeper();\n\n        LOG.info(\"handleNewSession. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2018-09-27 02:39:42","commitOrder":6,"curCode":"  public static void asyncExpireSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2018-10-30 09:15:22","endLine":246,"groupId":"1251","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExpireSession","params":"(HelixZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/cd2e85873605eac077e1ba9014995cbc8ccf92.src","preCode":"  public static void asyncExpireSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"N"}],"commitId":"660ae7c40463a9b4de1af7b0721c575e0c4337a3","commitMessage":"@@@Add new interface IZkStateListener to provide session aware handleNewSession for ZkHelixManager (#644)\n\nI0Itec IZkStateListener doesn't have an API handleNewSession(sessionId) to handle session aware operation. \nwhich is needed to fix session race condition for creating ephemeral node in ZkClient.\nSo this new IZkStateListener interface is introduced to provide session aware handleNewSession method for ZkHelixManager.\n\nChangelist:\n- Introduce new IZkStateListener to helix. The new IZkStateListener adds new method\nhandleNewSession(String sessionId).  and removes the old method handleNewSession().\n- Add default implementations I0ItecIZkStateListenerHelixImpl in IZkStateListener\nand IZkStateListenerI0ItecImpl in ZkClient for backward compatibility.\n- Add session id to ZkEvent as a private field to help debug ZkEvent.\n- Add unit tests to test subscribe/unsubscribe state changes.","date":"2019-12-17 07:21:10","modifiedFileCount":"11","status":"M","submitter":"Huizhi L"},{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2020-02-12 05:58:57","commitOrder":7,"curCode":"  public static void disconnectSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession(final String sessionId) throws Exception {\n        \r\n        zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.SECONDS);\n\n        LOG.info(\"handleNewSession. sessionId: {}.\", sessionId);\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = (ZkConnection) zkClient.getConnection();\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2020-02-12 05:58:57","endLine":147,"groupId":"1748","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"disconnectSession","params":"(HelixZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c2/b3d3558f0ae44f54cb6168050313d9654dc33f.src","preCode":"  public static void disconnectSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession(final String sessionId) throws Exception {\n        \r\n        zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.SECONDS);\n\n        LOG.info(\"handleNewSession. sessionId: {}.\", sessionId);\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2018-09-27 02:39:42","commitOrder":7,"curCode":"  public static void asyncExpireSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2018-10-30 09:15:22","endLine":246,"groupId":"1251","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExpireSession","params":"(HelixZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/cd2e85873605eac077e1ba9014995cbc8ccf92.src","preCode":"  public static void asyncExpireSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"N"}],"commitId":"b227b3b72b3ed0e347464f8d8e5279365a6e5acb","commitMessage":"@@@Add metrics-common.  zookeeper-api.  helix-common modules (#684)\n\nWe want to create a new module called zookeeper-api in order to decouple Helix's ZooKeeper APIs from helix-core. The goal is to enable non-Helix applications to use Helix's ZooKeeper APIs. This change also allows for better modularity and separation of concerns.","date":"2020-02-12 05:58:57","modifiedFileCount":"361","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-03-13 00:44:38","codes":[{"authorDate":"2020-02-12 05:58:57","commitOrder":8,"curCode":"  public static void disconnectSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession(final String sessionId) throws Exception {\n        \r\n        zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.SECONDS);\n\n        LOG.info(\"handleNewSession. sessionId: {}.\", sessionId);\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = (ZkConnection) zkClient.getConnection();\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2020-02-12 05:58:57","endLine":147,"groupId":"1048","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"disconnectSession","params":"(HelixZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c2/b3d3558f0ae44f54cb6168050313d9654dc33f.src","preCode":"  public static void disconnectSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    IZkStateListener listener = new IZkStateListener() {\n      @Override\n      public void handleStateChanged(KeeperState state) throws Exception {\n        \r\n      }\n\n      @Override\n      public void handleNewSession(final String sessionId) throws Exception {\n        \r\n        zkClient.waitUntilConnected(HelixZkClient.DEFAULT_CONNECTION_TIMEOUT, TimeUnit.SECONDS);\n\n        LOG.info(\"handleNewSession. sessionId: {}.\", sessionId);\n      }\n\n      @Override\n      public void handleSessionEstablishmentError(Throwable var1) throws Exception {\n      }\n    };\n\n    zkClient.subscribeStateChanges(listener);\n    ZkConnection connection = (ZkConnection) zkClient.getConnection();\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n    zkClient.unsubscribeStateChanges(listener);\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"},{"authorDate":"2020-03-13 00:44:38","commitOrder":8,"curCode":"  public static void asyncExpireSession(RealmAwareZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","date":"2020-04-09 08:23:30","endLine":244,"groupId":"1048","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExpireSession","params":"(RealmAwareZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/dded45513ce3f9b71db533db37b929ed48ed34.src","preCode":"  public static void asyncExpireSession(HelixZkClient client) throws Exception {\n    final ZkClient zkClient = (ZkClient) client;\n    ZkConnection connection = ((ZkConnection) zkClient.getConnection());\n    ZooKeeper curZookeeper = connection.getZookeeper();\n    LOG.info(\"Before expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n\n    Watcher watcher = new Watcher() {\n      @Override\n      public void process(WatchedEvent event) {\n        LOG.info(\"Process watchEvent: \" + event);\n      }\n    };\n\n    final ZooKeeper dupZookeeper =\n        new ZooKeeper(connection.getServers(), curZookeeper.getSessionTimeout(), watcher,\n            curZookeeper.getSessionId(), curZookeeper.getSessionPasswd());\n    \r\n    while (dupZookeeper.getState() != States.CONNECTED) {\n      Thread.sleep(10);\n    }\n    dupZookeeper.close();\n\n    connection = (ZkConnection) zkClient.getConnection();\n    curZookeeper = connection.getZookeeper();\n\n    \r\n    LOG.info(\"After expiry. sessionId: \" + Long.toHexString(curZookeeper.getSessionId()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"289085f1ce7d2d9665447e9b114c15645f618937","commitMessage":"@@@Make ZKHelixAdmin and ZKHelixManager Realm-aware (#846)\n\nTo make Helix Java APIs realm-aware.  we need to make both ZKHelixAdmin and ZKHelixManager realm-aware. This commit adds a Builder to set client config and connection config for building realm-aware ZkClients underneath.","date":"2020-04-09 08:23:30","modifiedFileCount":"14","status":"M","submitter":"Huizhi Lu"}]
