[{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-06-22 04:57:48","commitOrder":3,"curCode":"  public void addListenersToController(GenericHelixController controller)\n  {\n    try\n    {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      _messagingService.getExecutor()\n                       .registerMessageHandlerFactory(defaultControllerMsgHandlerFactory.getMessageType(),\n                                                      defaultControllerMsgHandlerFactory);\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      _messagingService.getExecutor()\n                       .registerMessageHandlerFactory(defaultSchedulerMsgHandlerFactory.getMessageType(),\n                                                      defaultSchedulerMsgHandlerFactory);\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n      _messagingService.getExecutor()\n                       .registerMessageHandlerFactory(defaultParticipantErrorMessageHandlerFactory.getMessageType(),\n       \n                           defaultParticipantErrorMessageHandlerFactory);\n      \n      \r\n\n      _manager.addConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      \r\n      \r\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e)\n    {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e)\n    {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2013-06-22 04:57:48","endLine":92,"groupId":"4842","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenersToController","params":"(GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d7/24095494cdca929ba6b8da7e257be858b080e1.src","preCode":"  public void addListenersToController(GenericHelixController controller)\n  {\n    try\n    {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      _messagingService.getExecutor()\n                       .registerMessageHandlerFactory(defaultControllerMsgHandlerFactory.getMessageType(),\n                                                      defaultControllerMsgHandlerFactory);\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      _messagingService.getExecutor()\n                       .registerMessageHandlerFactory(defaultSchedulerMsgHandlerFactory.getMessageType(),\n                                                      defaultSchedulerMsgHandlerFactory);\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n      _messagingService.getExecutor()\n                       .registerMessageHandlerFactory(defaultParticipantErrorMessageHandlerFactory.getMessageType(),\n       \n                           defaultParticipantErrorMessageHandlerFactory);\n      \n      \r\n\n      _manager.addConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      \r\n      \r\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e)\n    {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e)\n    {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ControllerManagerHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2013-04-06 08:30:58","commitOrder":3,"curCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller)\n  {\n    try\n    {\n      manager.addConfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      \r\n      \r\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e)\n    {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e)\n    {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2013-04-06 08:30:58","endLine":166,"groupId":"5381","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenersToController","params":"(HelixManagermanager@GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b5/958797fb20664c59d6099496c6fa6139ab5105.src","preCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller)\n  {\n    try\n    {\n      manager.addConfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      \r\n      \r\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e)\n    {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e)\n    {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/HelixControllerMain.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"NB"}],"commitId":"94367e1c7840b5c35a84f0ee440d443047c6dbaa","commitMessage":"@@@HELIX-134: refactor helix manager to handle zk session expiry more reliably\n","date":"2013-06-22 04:57:48","modifiedFileCount":"4","status":"M","submitter":"zzhang"},{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2017-10-04 03:13:50","commitOrder":4,"curCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      \r\n      \r\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2017-10-04 03:24:48","endLine":92,"groupId":"5381","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenersToController","params":"(GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6c/431935498c7db0c37046a83b26fd0249bb4e07.src","preCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      _messagingService.getExecutor().registerMessageHandlerFactory(\n          defaultControllerMsgHandlerFactory.getMessageType(), defaultControllerMsgHandlerFactory);\n\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      _messagingService.getExecutor().registerMessageHandlerFactory(\n          defaultSchedulerMsgHandlerFactory.getMessageType(), defaultSchedulerMsgHandlerFactory);\n\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n      _messagingService.getExecutor().registerMessageHandlerFactory(\n          defaultParticipantErrorMessageHandlerFactory.getMessageType(),\n\n          defaultParticipantErrorMessageHandlerFactory);\n\n      \r\n\n      _manager.addConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      \r\n      \r\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ControllerManagerHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2013-04-06 08:30:58","commitOrder":4,"curCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller)\n  {\n    try\n    {\n      manager.addConfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      \r\n      \r\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e)\n    {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e)\n    {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2013-04-06 08:30:58","endLine":166,"groupId":"5381","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenersToController","params":"(HelixManagermanager@GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b5/958797fb20664c59d6099496c6fa6139ab5105.src","preCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller)\n  {\n    try\n    {\n      manager.addConfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      \r\n      \r\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e)\n    {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e)\n    {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/HelixControllerMain.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"}],"commitId":"b9de8362bc75c98aa49110c78ce17edf9ef52456","commitMessage":"@@@[HELIX-669] State Transition Cancellation Client side change Part II\n\nIn Helix.  there are many different scenrios which could make some pending state transitions not valid any more.  for example.  a resource is deleted while it still has some pending transitions.  or Helix calculates a new ideal mapping while there are still some pending transitions not matching new mapping.  In such cases.  Helix controller should proactively cancell these pending transitions instead of waiting them to finish.\n\nIn this rb:\n1. Support MessageHandlerFactory can be registered by different message type.\n2. Refactor related API\n3. Add unit test for multi message type registeration.\n","date":"2017-10-04 03:24:48","modifiedFileCount":"36","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":91,"groupId":"5381","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenersToController","params":"(GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/72/6e3bc705695f91c9fdcede76485363a6620064.src","preCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      \r\n      \r\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ControllerManagerHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":147,"groupId":"5381","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenersToController","params":"(HelixManagermanager@GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/43/6d417e27b4bf000ca0ccd0423d8e918bff474f.src","preCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addConfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/HelixControllerMain.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-10-24 04:38:40","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":6,"curCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":91,"groupId":"5381","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenersToController","params":"(GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/72/6e3bc705695f91c9fdcede76485363a6620064.src","preCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ControllerManagerHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2017-10-24 04:38:40","commitOrder":6,"curCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addClusterfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2018-01-25 10:30:02","endLine":149,"groupId":"5381","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenersToController","params":"(HelixManagermanager@GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8d/42c6e8e1ad8c7a0150f6fed955552ab674562e.src","preCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/HelixControllerMain.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"b59344f1cfe162b34f7c49e5ab8e8757ec23e21c","commitMessage":"@@@Add cluster config listener in generic helix controller\n","date":"2018-01-25 10:30:02","modifiedFileCount":"3","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-10-24 04:38:40","codes":[{"authorDate":"2017-10-12 09:18:20","commitOrder":7,"curCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addClusterfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2018-01-25 10:30:10","endLine":93,"groupId":"5381","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenersToController","params":"(GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/55/4b09a75aa6bf65bba80c9f68d5a1247d477912.src","preCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ControllerManagerHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2017-10-24 04:38:40","commitOrder":7,"curCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addClusterfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2018-01-25 10:30:02","endLine":149,"groupId":"5381","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenersToController","params":"(HelixManagermanager@GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8d/42c6e8e1ad8c7a0150f6fed955552ab674562e.src","preCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addClusterfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/HelixControllerMain.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"31cec9114b77ee37f79da137ed914c7b330780f3","commitMessage":"@@@Batch API Implementation\n\nThis rb include\n1. The batch API define and batch API implementation and make old API backward compatible.\n2. The server changes the logic to determine which are the disabled instances for both batch API or old API.\n","date":"2018-01-25 10:30:10","modifiedFileCount":"18","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-10-24 04:38:40","codes":[{"authorDate":"2018-03-27 02:23:42","commitOrder":8,"curCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MultiTypeMessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addClusterfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2018-03-31 08:37:52","endLine":94,"groupId":"5381","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenersToController","params":"(GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1d/f53ecd09ea67f6b44b1f74ad22368330ed4b27.src","preCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addClusterfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ControllerManagerHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2017-10-24 04:38:40","commitOrder":8,"curCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addClusterfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2018-01-25 10:30:02","endLine":149,"groupId":"5381","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenersToController","params":"(HelixManagermanager@GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8d/42c6e8e1ad8c7a0150f6fed955552ab674562e.src","preCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addClusterfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/HelixControllerMain.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"6b6ba3c26ed413f3b35fd3cf10d7713d5d604ca7","commitMessage":"@@@Fix MessageHandlerFactory incompatible API\n","date":"2018-03-31 08:37:52","modifiedFileCount":"15","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-01-30 09:33:31","codes":[{"authorDate":"2019-01-30 09:33:31","commitOrder":9,"curCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MultiTypeMessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addControllerListener(controller);\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addClusterfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2019-01-31 03:26:21","endLine":94,"groupId":"5381","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenersToController","params":"(GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b8/202d9243346f841381f5ebfcbd1fc646e5d4fd.src","preCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MultiTypeMessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addClusterfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n      _manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ControllerManagerHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-01-30 09:33:31","commitOrder":9,"curCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addControllerListener(controller);\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addClusterfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2019-01-31 03:26:21","endLine":149,"groupId":"5381","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenersToController","params":"(HelixManagermanager@GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d8/e5a3fbabb6264bc3f2c6f9cd0dc067992b08e6.src","preCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addClusterfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n      manager.addControllerListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/HelixControllerMain.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"f9ec24e994afbf834a4454dcb2cbe48af71e24dd","commitMessage":"@@@Fix some race condition issues in MBean management classes. Fix the listener adding sequence.\n\nStabilized the TestClusterStatusMonitorLifecycle accordingly.\n","date":"2019-01-31 03:26:21","modifiedFileCount":"7","status":"M","submitter":"jiajunwang"},{"authorTime":"2019-01-30 09:33:31","codes":[{"authorDate":"2020-03-26 05:24:25","commitOrder":10,"curCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MultiTypeMessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addControllerListener(controller);\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addClusterfigChangeListener(controller);\n      _manager.addCustomizedStateConfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2020-04-24 03:27:36","endLine":94,"groupId":"10803","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"addListenersToController","params":"(GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ca/7210c05a11abee330ce217f976ed052fcedde2.src","preCode":"  public void addListenersToController(GenericHelixController controller) {\n    try {\n      \r\n\n      _manager.addControllerMessageListener(_messagingService.getExecutor());\n      MultiTypeMessageHandlerFactory defaultControllerMsgHandlerFactory =\n          new DefaultControllerMessageHandlerFactory();\n      for (String type : defaultControllerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultControllerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultSchedulerMsgHandlerFactory =\n          new DefaultSchedulerMessageHandlerFactory(_manager);\n      for (String type : defaultSchedulerMsgHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultSchedulerMsgHandlerFactory);\n      }\n\n      MultiTypeMessageHandlerFactory defaultParticipantErrorMessageHandlerFactory =\n          new DefaultParticipantErrorMessageHandlerFactory(_manager);\n\n      for (String type : defaultParticipantErrorMessageHandlerFactory.getMessageTypes()) {\n        _messagingService.getExecutor()\n            .registerMessageHandlerFactory(type, defaultParticipantErrorMessageHandlerFactory);\n      }\n\n      \r\n\n      _manager.addControllerListener(controller);\n      _manager.addInstanceConfigChangeListener(controller);\n      _manager.addResourceConfigChangeListener(controller);\n      _manager.addClusterfigChangeListener(controller);\n      _manager.addLiveInstanceChangeListener(controller);\n      _manager.addIdealStateChangeListener(controller);\n    } catch (ZkInterruptedException e) {\n      LOG.warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n          + e);\n    } catch (Exception e) {\n      LOG.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ControllerManagerHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-01-30 09:33:31","commitOrder":10,"curCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addControllerListener(controller);\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addClusterfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","date":"2019-01-31 03:26:21","endLine":149,"groupId":"10803","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"addListenersToController","params":"(HelixManagermanager@GenericHelixControllercontroller)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d8/e5a3fbabb6264bc3f2c6f9cd0dc067992b08e6.src","preCode":"  public static void addListenersToController(HelixManager manager,\n      GenericHelixController controller) {\n    try {\n      manager.addControllerListener(controller);\n      manager.addInstanceConfigChangeListener(controller);\n      manager.addResourceConfigChangeListener(controller);\n      manager.addClusterfigChangeListener(controller);\n      manager.addLiveInstanceChangeListener(controller);\n      manager.addIdealStateChangeListener(controller);\n    } catch (ZkInterruptedException e) {\n      logger\n          .warn(\"zk connection is interrupted during HelixManagerMain.addListenersToController(). \"\n              + e);\n    } catch (Exception e) {\n      logger.error(\"Error when creating HelixManagerContollerMonitor\", e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/HelixControllerMain.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"fc3dfdc9f7fd0ec2fbdd41846f847e948e651cdd","commitMessage":"@@@Add new stages in Helix generic controller for customized view aggregation. (#851)\n\nAdd extra stages and pipelines in controller for customized state computation and customized view aggregation.\nAdd refresh logic in resource data provider for customized view related data refresh.\nAdd customized state event handling in CallbackHandler.\nAdd integration test for customized view aggregation.\nModify existing tests to verify new logic.\n\nCo-authored-by: Meng Zhang <mnzhang@mnzhang-mn1.linkedin.biz>","date":"2020-04-24 03:27:36","modifiedFileCount":"18","status":"M","submitter":"zhangmeng916"}]
