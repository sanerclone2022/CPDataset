[{"authorTime":"2020-07-16 04:01:23","codes":[{"authorDate":"2020-07-16 04:01:23","commitOrder":7,"curCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n          expiredJobs.add(job);\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-07-16 04:01:23","endLine":744,"groupId":"2630","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getExpiredJobs","params":"(HelixDataAccessordataAccessor@HelixPropertyStore<ZNRecord>propertyStore@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ec/8d2164246e134585c67dd5ebb0e29e5193a736.src","preCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n          expiredJobs.add(job);\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"MB"},{"authorDate":"2020-07-16 04:01:23","commitOrder":7,"curCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n        expiredJobs.add(job);\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-07-16 04:01:23","endLine":771,"groupId":"2677","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getExpiredJobsFromCache","params":"(WorkflowControllerDataProviderworkflowControllerDataProvider@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ec/8d2164246e134585c67dd5ebb0e29e5193a736.src","preCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n        expiredJobs.add(job);\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":758,"status":"B"}],"commitId":"c7a97bdce66b21dab5522a4f100d08054ada99c2","commitMessage":"@@@Recover Workflow Garbage Collection Logic (#1076)\n\nRecover Workflow Garbage Collection Logic\n\nAdded back workflow garbage collection logic; changed garbage collection stage to calculate jobs/workflows to purge in main thread.  and do garbage collection in the async thread.","date":"2020-07-16 04:01:23","modifiedFileCount":"6","status":"M","submitter":"Neal Sun"},{"authorTime":"2020-07-16 04:01:23","codes":[{"authorDate":"2020-07-18 03:06:08","commitOrder":8,"curCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        if (jobConfig == null) {\n          LOG.error(String.format(\n              \"Job %s exists in JobDAG but JobConfig is missing! Job might have been deleted manually from the JobQueue: %s, or left in the DAG due to a failed clean-up attempt from last purge.\",\n              job, workflowConfig.getWorkflowId()));\n          \r\n          expiredJobs.add(job);\n          continue;\n        }\n        long expiry = jobConfig.getExpiry();\n        if (jobContext != null && jobStates.get(job) == TaskState.COMPLETED) {\n          if (jobContext.getFinishTime() != WorkflowContext.UNFINISHED\n              && System.currentTimeMillis() >= jobContext.getFinishTime() + expiry) {\n            expiredJobs.add(job);\n          }\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-07-18 03:06:08","endLine":756,"groupId":"2630","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getExpiredJobs","params":"(HelixDataAccessordataAccessor@HelixPropertyStore<ZNRecord>propertyStore@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/91/7a69b6acfee57f3467fa885b2cc0eb99f09b5b.src","preCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n          expiredJobs.add(job);\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"},{"authorDate":"2020-07-16 04:01:23","commitOrder":8,"curCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n        expiredJobs.add(job);\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-07-16 04:01:23","endLine":771,"groupId":"2677","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getExpiredJobsFromCache","params":"(WorkflowControllerDataProviderworkflowControllerDataProvider@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ec/8d2164246e134585c67dd5ebb0e29e5193a736.src","preCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n        expiredJobs.add(job);\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":758,"status":"N"}],"commitId":"fcfa37f199d587f3043f4fb9d1d289412c2f6750","commitMessage":"@@@Revert \"Recover Workflow Garbage Collection Logic (#1076)\" (#1155)\n\nThis reverts commit c7a97bdce66b21dab5522a4f100d08054ada99c2.","date":"2020-07-18 03:06:08","modifiedFileCount":"6","status":"M","submitter":"Neal Sun"},{"authorTime":"2020-07-16 04:01:23","codes":[{"authorDate":"2020-07-30 01:32:59","commitOrder":9,"curCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n          expiredJobs.add(job);\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-08-05 05:14:24","endLine":744,"groupId":"2630","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getExpiredJobs","params":"(HelixDataAccessordataAccessor@HelixPropertyStore<ZNRecord>propertyStore@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e6/e792fe3608a80796096e57f142e31934832634.src","preCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        if (jobConfig == null) {\n          LOG.error(String.format(\n              \"Job %s exists in JobDAG but JobConfig is missing! Job might have been deleted manually from the JobQueue: %s, or left in the DAG due to a failed clean-up attempt from last purge.\",\n              job, workflowConfig.getWorkflowId()));\n          \r\n          expiredJobs.add(job);\n          continue;\n        }\n        long expiry = jobConfig.getExpiry();\n        if (jobContext != null && jobStates.get(job) == TaskState.COMPLETED) {\n          if (jobContext.getFinishTime() != WorkflowContext.UNFINISHED\n              && System.currentTimeMillis() >= jobContext.getFinishTime() + expiry) {\n            expiredJobs.add(job);\n          }\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"},{"authorDate":"2020-07-16 04:01:23","commitOrder":9,"curCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n        expiredJobs.add(job);\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-07-16 04:01:23","endLine":771,"groupId":"2677","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getExpiredJobsFromCache","params":"(WorkflowControllerDataProviderworkflowControllerDataProvider@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ec/8d2164246e134585c67dd5ebb0e29e5193a736.src","preCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n        expiredJobs.add(job);\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":758,"status":"N"}],"commitId":"3501111a3b9cae27bb7b875fadbf49406a4b6cd0","commitMessage":"@@@Recover Workflow GC Logic (#1181)\n\nRecover Workflow Garbage Collection Logic\nRecover Workflow Garbage Collection Logic","date":"2020-08-05 05:14:24","modifiedFileCount":"7","status":"M","submitter":"Neal Sun"},{"authorTime":"2020-08-14 07:45:32","codes":[{"authorDate":"2020-08-14 07:45:32","commitOrder":10,"curCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        if (expiredJobs.contains(job)) {\n          continue;\n        }\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        TaskState jobState = jobStates.get(job);\n        if (isJobExpired(job, jobConfig, jobContext, jobState)) {\n          expiredJobs.add(job);\n\n          \r\n          if (jobState == TaskState.FAILED || jobState == TaskState.TIMED_OUT) {\n            Stack<String> childrenJobs = new Stack<>();\n            workflowConfig.getJobDag().getDirectChildren(job).forEach(childrenJobs::push);\n            while (!childrenJobs.isEmpty()) {\n              String childJob = childrenJobs.pop();\n              \r\n              if (!expiredJobs.contains(childJob) && jobStates.get(childJob) == TaskState.FAILED\n                  && TaskUtil.getJobContext(propertyStore, childJob) == null) {\n                expiredJobs.add(childJob);\n                workflowConfig.getJobDag().getDirectChildren(childJob).forEach(childrenJobs::push);\n              }\n            }\n          }\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-08-14 07:45:32","endLine":764,"groupId":"3884","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getExpiredJobs","params":"(HelixDataAccessordataAccessor@HelixPropertyStore<ZNRecord>propertyStore@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4f/8d74509dc47dcd01e763a5c80e2949caa398bd.src","preCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n          expiredJobs.add(job);\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":729,"status":"M"},{"authorDate":"2020-08-14 07:45:32","commitOrder":10,"curCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      if (expiredJobs.contains(job)) {\n        continue;\n      }\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      TaskState jobState = jobStates.get(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobState)) {\n        expiredJobs.add(job);\n\n        \r\n        if (jobState == TaskState.FAILED || jobState == TaskState.TIMED_OUT) {\n          Stack<String> childrenJobs = new Stack<>();\n          workflowConfig.getJobDag().getDirectChildren(job).forEach(childrenJobs::push);\n          while (!childrenJobs.isEmpty()) {\n            String childJob = childrenJobs.pop();\n            \r\n            if (!expiredJobs.contains(childJob) && jobStates.get(childJob) == TaskState.FAILED\n                && workflowControllerDataProvider.getJobContext(childJob) == null) {\n              expiredJobs.add(childJob);\n              workflowConfig.getJobDag().getDirectChildren(childJob).forEach(childrenJobs::push);\n            }\n          }\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-08-14 07:45:32","endLine":810,"groupId":"5849","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getExpiredJobsFromCache","params":"(WorkflowControllerDataProviderworkflowControllerDataProvider@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4f/8d74509dc47dcd01e763a5c80e2949caa398bd.src","preCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobStates.get(job))) {\n        expiredJobs.add(job);\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"M"}],"commitId":"e163efc4de07a67069fdbd4effd19729158fa832","commitMessage":"@@@Terminal State Job Purging (#1231)\n\nThis commit added a new field to JobConfig for terminal job expiries.  and added new logic to garbage collection stage to purge jobs in terminal states.\n","date":"2020-08-14 07:45:32","modifiedFileCount":"6","status":"M","submitter":"Neal Sun"},{"authorTime":"2020-10-22 06:31:01","codes":[{"authorDate":"2020-08-14 07:45:32","commitOrder":11,"curCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        if (expiredJobs.contains(job)) {\n          continue;\n        }\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        TaskState jobState = jobStates.get(job);\n        if (isJobExpired(job, jobConfig, jobContext, jobState)) {\n          expiredJobs.add(job);\n\n          \r\n          if (jobState == TaskState.FAILED || jobState == TaskState.TIMED_OUT) {\n            Stack<String> childrenJobs = new Stack<>();\n            workflowConfig.getJobDag().getDirectChildren(job).forEach(childrenJobs::push);\n            while (!childrenJobs.isEmpty()) {\n              String childJob = childrenJobs.pop();\n              \r\n              if (!expiredJobs.contains(childJob) && jobStates.get(childJob) == TaskState.FAILED\n                  && TaskUtil.getJobContext(propertyStore, childJob) == null) {\n                expiredJobs.add(childJob);\n                workflowConfig.getJobDag().getDirectChildren(childJob).forEach(childrenJobs::push);\n              }\n            }\n          }\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-08-14 07:45:32","endLine":764,"groupId":"10722","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getExpiredJobs","params":"(HelixDataAccessordataAccessor@HelixPropertyStore<ZNRecord>propertyStore@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4f/8d74509dc47dcd01e763a5c80e2949caa398bd.src","preCode":"  protected static Set<String> getExpiredJobs(HelixDataAccessor dataAccessor,\n      HelixPropertyStore<ZNRecord> propertyStore, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n\n    if (workflowContext != null) {\n      Map<String, TaskState> jobStates = workflowContext.getJobStates();\n      for (String job : workflowConfig.getJobDag().getAllNodes()) {\n        if (expiredJobs.contains(job)) {\n          continue;\n        }\n        JobConfig jobConfig = TaskUtil.getJobConfig(dataAccessor, job);\n        JobContext jobContext = TaskUtil.getJobContext(propertyStore, job);\n        TaskState jobState = jobStates.get(job);\n        if (isJobExpired(job, jobConfig, jobContext, jobState)) {\n          expiredJobs.add(job);\n\n          \r\n          if (jobState == TaskState.FAILED || jobState == TaskState.TIMED_OUT) {\n            Stack<String> childrenJobs = new Stack<>();\n            workflowConfig.getJobDag().getDirectChildren(job).forEach(childrenJobs::push);\n            while (!childrenJobs.isEmpty()) {\n              String childJob = childrenJobs.pop();\n              \r\n              if (!expiredJobs.contains(childJob) && jobStates.get(childJob) == TaskState.FAILED\n                  && TaskUtil.getJobContext(propertyStore, childJob) == null) {\n                expiredJobs.add(childJob);\n                workflowConfig.getJobDag().getDirectChildren(childJob).forEach(childrenJobs::push);\n              }\n            }\n          }\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":729,"status":"N"},{"authorDate":"2020-10-22 06:31:01","commitOrder":11,"curCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, HelixManager manager) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      if (expiredJobs.contains(job)) {\n        continue;\n      }\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      \r\n      if (jobConfig == null) {\n        jobConfig = TaskUtil.getJobConfig(manager, job);\n      }\n\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      TaskState jobState = jobStates.get(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobState)) {\n        expiredJobs.add(job);\n\n        \r\n        if (jobState == TaskState.FAILED || jobState == TaskState.TIMED_OUT) {\n          Stack<String> childrenJobs = new Stack<>();\n          workflowConfig.getJobDag().getDirectChildren(job).forEach(childrenJobs::push);\n          while (!childrenJobs.isEmpty()) {\n            String childJob = childrenJobs.pop();\n            \r\n            if (!expiredJobs.contains(childJob) && jobStates.get(childJob) == TaskState.FAILED\n                && workflowControllerDataProvider.getJobContext(childJob) == null) {\n              expiredJobs.add(childJob);\n              workflowConfig.getJobDag().getDirectChildren(childJob).forEach(childrenJobs::push);\n            }\n          }\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","date":"2020-10-22 06:31:01","endLine":827,"groupId":"10722","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getExpiredJobsFromCache","params":"(WorkflowControllerDataProviderworkflowControllerDataProvider@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@HelixManagermanager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/0b151b9337827ae8265875e419197cf1bf0e0a.src","preCode":"  public static Set<String> getExpiredJobsFromCache(\n      WorkflowControllerDataProvider workflowControllerDataProvider, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext) {\n    Set<String> expiredJobs = new HashSet<>();\n    Map<String, TaskState> jobStates = workflowContext.getJobStates();\n    for (String job : workflowConfig.getJobDag().getAllNodes()) {\n      if (expiredJobs.contains(job)) {\n        continue;\n      }\n      JobConfig jobConfig = workflowControllerDataProvider.getJobConfig(job);\n      JobContext jobContext = workflowControllerDataProvider.getJobContext(job);\n      TaskState jobState = jobStates.get(job);\n      if (isJobExpired(job, jobConfig, jobContext, jobState)) {\n        expiredJobs.add(job);\n\n        \r\n        if (jobState == TaskState.FAILED || jobState == TaskState.TIMED_OUT) {\n          Stack<String> childrenJobs = new Stack<>();\n          workflowConfig.getJobDag().getDirectChildren(job).forEach(childrenJobs::push);\n          while (!childrenJobs.isEmpty()) {\n            String childJob = childrenJobs.pop();\n            \r\n            if (!expiredJobs.contains(childJob) && jobStates.get(childJob) == TaskState.FAILED\n                && workflowControllerDataProvider.getJobContext(childJob) == null) {\n              expiredJobs.add(childJob);\n              workflowConfig.getJobDag().getDirectChildren(childJob).forEach(childrenJobs::push);\n            }\n          }\n        }\n      }\n    }\n    return expiredJobs;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/TaskUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":790,"status":"M"}],"commitId":"2c615543bd86e50d76dd4d7006d1c90e130e9755","commitMessage":"@@@ExpiredJob Workaround for Selective Update Race Conditions (#1470)\n\nThis PR implements a workaround for determining expired jobs\nthat avoids selective update race condition: if JobConfig doesn't\nexist in the cache.  check ZK directly.","date":"2020-10-22 06:31:01","modifiedFileCount":"3","status":"M","submitter":"Neal Sun"}]
