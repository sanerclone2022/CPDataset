[{"authorTime":"2017-05-24 03:27:23","codes":[{"authorDate":"2019-03-13 03:40:41","commitOrder":2,"curCode":"  public RESTConfig getRESTConfig(String clusterName) {\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new RESTConfig(record);\n  }\n","date":"2019-05-23 07:07:36","endLine":583,"groupId":"4386","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRESTConfig","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1d/4c5e84ed12ad994e5194232f18c1d9ec12045b.src","preCode":"  public RESTConfig getRESTConfig(String clusterName) {\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new RESTConfig(record);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/ConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"B"},{"authorDate":"2017-05-24 03:27:23","commitOrder":2,"curCode":"  public InstanceConfig getInstanceConfig(String clusterName, String instanceName) {\n    if (!ZKUtil.isInstanceSetup(zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"fail to get config. instance: \" + instanceName + \" is NOT setup in cluster: \"\n              + clusterName);\n    }\n\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(instanceName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new InstanceConfig(record);\n  }\n","date":"2017-05-24 03:27:23","endLine":704,"groupId":"4386","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getInstanceConfig","params":"(StringclusterName@StringinstanceName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/27/a30cbb79cfa55d3c558546eb7cd3d7e917dbc1.src","preCode":"  public InstanceConfig getInstanceConfig(String clusterName, String instanceName) {\n    if (!ZKUtil.isInstanceSetup(zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"fail to get config. instance: \" + instanceName + \" is NOT setup in cluster: \"\n              + clusterName);\n    }\n\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(instanceName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new InstanceConfig(record);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/ConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":686,"status":"NB"}],"commitId":"2d712e14f35d379af717b7e213853e0c98ae73c3","commitMessage":"@@@Dummy check for customized API\n\nFor this change.  it build the dummy check for customized API. It contains following changes:\n1. RESTConfig can setup the customized URL\n2. Define the end point of per participant and per partition.\n3. Add dummy logic that return true for all the check status of customized checks.\n\nRB=1596427\nBUG=HELIX-1678\nG=helix-reviewers\nA=jjwang\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-23 07:07:36","modifiedFileCount":"6","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-05-24 03:27:23","codes":[{"authorDate":"2019-05-03 08:45:08","commitOrder":3,"curCode":"  public RESTConfig getRESTConfig(String clusterName) {\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No rest config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new RESTConfig(record);\n  }\n","date":"2019-05-25 09:19:21","endLine":583,"groupId":"4386","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRESTConfig","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/ea4a05224f621755ff4d1d389cbe54fccf8d7d.src","preCode":"  public RESTConfig getRESTConfig(String clusterName) {\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new RESTConfig(record);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/ConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"},{"authorDate":"2017-05-24 03:27:23","commitOrder":3,"curCode":"  public InstanceConfig getInstanceConfig(String clusterName, String instanceName) {\n    if (!ZKUtil.isInstanceSetup(zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"fail to get config. instance: \" + instanceName + \" is NOT setup in cluster: \"\n              + clusterName);\n    }\n\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(instanceName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new InstanceConfig(record);\n  }\n","date":"2017-05-24 03:27:23","endLine":704,"groupId":"4386","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getInstanceConfig","params":"(StringclusterName@StringinstanceName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/27/a30cbb79cfa55d3c558546eb7cd3d7e917dbc1.src","preCode":"  public InstanceConfig getInstanceConfig(String clusterName, String instanceName) {\n    if (!ZKUtil.isInstanceSetup(zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"fail to get config. instance: \" + instanceName + \" is NOT setup in cluster: \"\n              + clusterName);\n    }\n\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(instanceName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new InstanceConfig(record);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/ConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":686,"status":"N"}],"commitId":"d93f05c6c750346c2ccfe80e89aaa0fee150a982","commitMessage":"@@@Integrate customRestClient health check with instance service main logic\n\nRB=1645567\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"15","status":"M","submitter":"Yi Wang"},{"authorTime":"2019-11-19 06:03:02","codes":[{"authorDate":"2019-05-03 08:45:08","commitOrder":4,"curCode":"  public RESTConfig getRESTConfig(String clusterName) {\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No rest config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new RESTConfig(record);\n  }\n","date":"2019-05-25 09:19:21","endLine":583,"groupId":"4386","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getRESTConfig","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/ea4a05224f621755ff4d1d389cbe54fccf8d7d.src","preCode":"  public RESTConfig getRESTConfig(String clusterName) {\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No rest config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new RESTConfig(record);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/ConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"N"},{"authorDate":"2019-11-19 06:03:02","commitOrder":4,"curCode":"  public InstanceConfig getInstanceConfig(String clusterName, String instanceName) {\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"fail to get config. instance: \" + instanceName + \" is NOT setup in cluster: \"\n              + clusterName);\n    }\n\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(instanceName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new InstanceConfig(record);\n  }\n","date":"2019-11-19 06:03:02","endLine":757,"groupId":"4386","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getInstanceConfig","params":"(StringclusterName@StringinstanceName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/fc9ec36df408d456a43fd3a0abefe6693eb679.src","preCode":"  public InstanceConfig getInstanceConfig(String clusterName, String instanceName) {\n    if (!ZKUtil.isInstanceSetup(zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"fail to get config. instance: \" + instanceName + \" is NOT setup in cluster: \"\n              + clusterName);\n    }\n\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(instanceName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new InstanceConfig(record);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/ConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"}],"commitId":"9ebdaf709d6b9ffd6dedef7f1aab4cae72ed7290","commitMessage":"@@@Add a ZkAddress-based constructor for ConfigAccessor (#592)\n\nIn order to allow users to not take on the burden of creating an instance of HelixZkClient to use Helix data access APIs (like ConfigAccessor).  we need to add a constructor that takes in a ZK connect string instead.\n\nThis approach has advantages such as 1) the user doesn't have to maintain the lifecycle of the ZkClient 2) add a layer of indirection between ZK and the user where Helix logic could be injected.\n\nAlso close() is added so that the user could close after use.","date":"2019-11-19 06:03:02","modifiedFileCount":"1","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-03-12 04:25:50","codes":[{"authorDate":"2020-03-12 04:25:50","commitOrder":5,"curCode":"  public RESTConfig getRESTConfig(String clusterName) {\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No rest config found at {}.\", scope.getZkPath());\n      return null;\n    }\n\n    return new RESTConfig(record);\n  }\n","date":"2020-03-12 04:25:50","endLine":605,"groupId":"10709","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getRESTConfig","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/96ee382d38607b49bd74d61ab1c9c56f4937ed.src","preCode":"  public RESTConfig getRESTConfig(String clusterName) {\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.REST).forCluster(clusterName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No rest config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new RESTConfig(record);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/ConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"},{"authorDate":"2020-03-12 04:25:50","commitOrder":5,"curCode":"  public InstanceConfig getInstanceConfig(String clusterName, String instanceName) {\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"fail to get config. instance: \" + instanceName + \" is NOT setup in cluster: \"\n              + clusterName);\n    }\n\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(instanceName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at {}.\", scope.getZkPath());\n      return null;\n    }\n\n    return new InstanceConfig(record);\n  }\n","date":"2020-03-12 04:25:50","endLine":761,"groupId":"10709","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getInstanceConfig","params":"(StringclusterName@StringinstanceName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/96ee382d38607b49bd74d61ab1c9c56f4937ed.src","preCode":"  public InstanceConfig getInstanceConfig(String clusterName, String instanceName) {\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"fail to get config. instance: \" + instanceName + \" is NOT setup in cluster: \"\n              + clusterName);\n    }\n\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(instanceName).build();\n    ZNRecord record = getConfigZnRecord(scope);\n\n    if (record == null) {\n      LOG.warn(\"No config found at \" + scope.getZkPath());\n      return null;\n    }\n\n    return new InstanceConfig(record);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/ConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"M"}],"commitId":"1651f9edddb86118834c7a1f47f47ed9f5a300ee","commitMessage":"@@@Standardize the logging message format in ClusterAccessor and ConfigAccessor (#886)\n\nThis PR takes advantage of parameterized message provided by slf4j to form logging messages in ClusterAccessor and ConfigAccessor. The parameterized message gives a clear syntax than simply concatenating the strings and variables.","date":"2020-03-12 04:25:50","modifiedFileCount":"2","status":"M","submitter":"Molly Gao"}]
