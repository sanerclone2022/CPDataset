[{"authorTime":"2019-01-30 09:33:31","codes":[{"authorDate":"2018-05-31 01:22:10","commitOrder":3,"curCode":"  protected boolean verifyState() {\n    try {\n      PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n      \r\n      ClusterDataCache cache = new ClusterDataCache();\n      cache.refresh(_accessor);\n\n      Map<String, IdealState> idealStates = new HashMap<>(cache.getIdealStates());\n\n      \r\n      Iterator<Map.Entry<String, IdealState>> it = idealStates.entrySet().iterator();\n      while (it.hasNext()) {\n        Map.Entry<String, IdealState> pair = it.next();\n        if (pair.getValue().getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)) {\n          it.remove();\n        }\n      }\n\n      \r\n      if (_expectLiveInstances != null && !_expectLiveInstances.isEmpty()) {\n        Set<String> actualLiveNodes = cache.getLiveInstances().keySet();\n        if (!_expectLiveInstances.equals(actualLiveNodes)) {\n          return false;\n        }\n      }\n\n      Map<String, ExternalView> extViews = _accessor.getChildValuesMap(keyBuilder.externalViews());\n      if (extViews == null) {\n        extViews = Collections.emptyMap();\n      }\n\n      \r\n      if (_resources != null && !_resources.isEmpty()) {\n        idealStates.keySet().retainAll(_resources);\n        extViews.keySet().retainAll(_resources);\n      }\n\n      \r\n      \r\n      for (String resource : extViews.keySet()) {\n        if (!idealStates.containsKey(resource)) {\n          idealStates.put(resource, new IdealState(resource));\n        }\n      }\n\n      for (String resourceName : idealStates.keySet()) {\n        ExternalView extView = extViews.get(resourceName);\n        IdealState idealState = idealStates.get(resourceName);\n        if (extView == null) {\n          if (idealState.isExternalViewDisabled()) {\n            continue;\n          } else {\n            LOG.debug(\"externalView for \" + resourceName + \" is not available\");\n            return false;\n          }\n        }\n\n        boolean result = verifyExternalView(cache, extView, idealState);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      LOG.error(\"exception in verification\", e);\n      return false;\n    }\n  }\n","date":"2018-07-12 06:23:03","endLine":232,"groupId":"6982","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/d12fabe045bbb88c8a7c3a5e05c74f5c1ec6c9.src","preCode":"  protected boolean verifyState() {\n    try {\n      PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n      \r\n      ClusterDataCache cache = new ClusterDataCache();\n      cache.refresh(_accessor);\n\n      Map<String, IdealState> idealStates = new HashMap<>(cache.getIdealStates());\n\n      \r\n      Iterator<Map.Entry<String, IdealState>> it = idealStates.entrySet().iterator();\n      while (it.hasNext()) {\n        Map.Entry<String, IdealState> pair = it.next();\n        if (pair.getValue().getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)) {\n          it.remove();\n        }\n      }\n\n      \r\n      if (_expectLiveInstances != null && !_expectLiveInstances.isEmpty()) {\n        Set<String> actualLiveNodes = cache.getLiveInstances().keySet();\n        if (!_expectLiveInstances.equals(actualLiveNodes)) {\n          return false;\n        }\n      }\n\n      Map<String, ExternalView> extViews = _accessor.getChildValuesMap(keyBuilder.externalViews());\n      if (extViews == null) {\n        extViews = Collections.emptyMap();\n      }\n\n      \r\n      if (_resources != null && !_resources.isEmpty()) {\n        idealStates.keySet().retainAll(_resources);\n        extViews.keySet().retainAll(_resources);\n      }\n\n      \r\n      \r\n      for (String resource : extViews.keySet()) {\n        if (!idealStates.containsKey(resource)) {\n          idealStates.put(resource, new IdealState(resource));\n        }\n      }\n\n      for (String resourceName : idealStates.keySet()) {\n        ExternalView extView = extViews.get(resourceName);\n        IdealState idealState = idealStates.get(resourceName);\n        if (extView == null) {\n          if (idealState.isExternalViewDisabled()) {\n            continue;\n          } else {\n            LOG.debug(\"externalView for \" + resourceName + \" is not available\");\n            return false;\n          }\n        }\n\n        boolean result = verifyExternalView(cache, extView, idealState);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      LOG.error(\"exception in verification\", e);\n      return false;\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"NB"},{"authorDate":"2019-01-30 09:33:31","commitOrder":3,"curCode":"  private void unregisterAllJobs() throws MalformedObjectNameException {\n    synchronized (_perTypeJobMonitorMap) {\n      Iterator<Map.Entry<String, JobMonitor>> jobIter = _perTypeJobMonitorMap.entrySet().iterator();\n      while (jobIter.hasNext()) {\n        Map.Entry<String, JobMonitor> jobEntry = jobIter.next();\n        unregister(getObjectName(getJobBeanName(jobEntry.getKey())));\n        jobIter.remove();\n      }\n    }\n  }\n","date":"2019-01-31 03:26:21","endLine":803,"groupId":"3784","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unregisterAllJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/14/5503224bbc9b2589d0b59141d3dfb13301db92.src","preCode":"  private void unregisterAllJobs() throws MalformedObjectNameException {\n    synchronized (_perTypeJobMonitorMap) {\n      Iterator<Map.Entry<String, JobMonitor>> jobIter = _perTypeJobMonitorMap.entrySet().iterator();\n      while (jobIter.hasNext()) {\n        Map.Entry<String, JobMonitor> jobEntry = jobIter.next();\n        unregister(getObjectName(getJobBeanName(jobEntry.getKey())));\n        jobIter.remove();\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":794,"status":"B"}],"commitId":"f9ec24e994afbf834a4454dcb2cbe48af71e24dd","commitMessage":"@@@Fix some race condition issues in MBean management classes. Fix the listener adding sequence.\n\nStabilized the TestClusterStatusMonitorLifecycle accordingly.\n","date":"2019-01-31 03:26:21","modifiedFileCount":"7","status":"M","submitter":"jiajunwang"},{"authorTime":"2019-01-30 09:33:31","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":4,"curCode":"  protected boolean verifyState() {\n    try {\n      PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n      \r\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(_accessor);\n\n      Map<String, IdealState> idealStates = new HashMap<>(cache.getIdealStates());\n\n      \r\n      Iterator<Map.Entry<String, IdealState>> it = idealStates.entrySet().iterator();\n      while (it.hasNext()) {\n        Map.Entry<String, IdealState> pair = it.next();\n        if (pair.getValue().getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)) {\n          it.remove();\n        }\n      }\n\n      \r\n      if (_expectLiveInstances != null && !_expectLiveInstances.isEmpty()) {\n        Set<String> actualLiveNodes = cache.getLiveInstances().keySet();\n        if (!_expectLiveInstances.equals(actualLiveNodes)) {\n          return false;\n        }\n      }\n\n      Map<String, ExternalView> extViews = _accessor.getChildValuesMap(keyBuilder.externalViews());\n      if (extViews == null) {\n        extViews = Collections.emptyMap();\n      }\n\n      \r\n      if (_resources != null && !_resources.isEmpty()) {\n        idealStates.keySet().retainAll(_resources);\n        extViews.keySet().retainAll(_resources);\n      }\n\n      \r\n      \r\n      for (String resource : extViews.keySet()) {\n        if (!idealStates.containsKey(resource)) {\n          idealStates.put(resource, new IdealState(resource));\n        }\n      }\n\n      for (String resourceName : idealStates.keySet()) {\n        ExternalView extView = extViews.get(resourceName);\n        IdealState idealState = idealStates.get(resourceName);\n        if (extView == null) {\n          if (idealState.isExternalViewDisabled()) {\n            continue;\n          } else {\n            LOG.debug(\"externalView for \" + resourceName + \" is not available\");\n            return false;\n          }\n        }\n\n        boolean result = verifyExternalView(cache, extView, idealState);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      LOG.error(\"exception in verification\", e);\n      return false;\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":237,"groupId":"6982","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fd/5afb8bcef862d53b4051e0f9a40bc688d83e07.src","preCode":"  protected boolean verifyState() {\n    try {\n      PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n      \r\n      ClusterDataCache cache = new ClusterDataCache();\n      cache.refresh(_accessor);\n\n      Map<String, IdealState> idealStates = new HashMap<>(cache.getIdealStates());\n\n      \r\n      Iterator<Map.Entry<String, IdealState>> it = idealStates.entrySet().iterator();\n      while (it.hasNext()) {\n        Map.Entry<String, IdealState> pair = it.next();\n        if (pair.getValue().getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)) {\n          it.remove();\n        }\n      }\n\n      \r\n      if (_expectLiveInstances != null && !_expectLiveInstances.isEmpty()) {\n        Set<String> actualLiveNodes = cache.getLiveInstances().keySet();\n        if (!_expectLiveInstances.equals(actualLiveNodes)) {\n          return false;\n        }\n      }\n\n      Map<String, ExternalView> extViews = _accessor.getChildValuesMap(keyBuilder.externalViews());\n      if (extViews == null) {\n        extViews = Collections.emptyMap();\n      }\n\n      \r\n      if (_resources != null && !_resources.isEmpty()) {\n        idealStates.keySet().retainAll(_resources);\n        extViews.keySet().retainAll(_resources);\n      }\n\n      \r\n      \r\n      for (String resource : extViews.keySet()) {\n        if (!idealStates.containsKey(resource)) {\n          idealStates.put(resource, new IdealState(resource));\n        }\n      }\n\n      for (String resourceName : idealStates.keySet()) {\n        ExternalView extView = extViews.get(resourceName);\n        IdealState idealState = idealStates.get(resourceName);\n        if (extView == null) {\n          if (idealState.isExternalViewDisabled()) {\n            continue;\n          } else {\n            LOG.debug(\"externalView for \" + resourceName + \" is not available\");\n            return false;\n          }\n        }\n\n        boolean result = verifyExternalView(cache, extView, idealState);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      LOG.error(\"exception in verification\", e);\n      return false;\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2019-01-30 09:33:31","commitOrder":4,"curCode":"  private void unregisterAllJobs() throws MalformedObjectNameException {\n    synchronized (_perTypeJobMonitorMap) {\n      Iterator<Map.Entry<String, JobMonitor>> jobIter = _perTypeJobMonitorMap.entrySet().iterator();\n      while (jobIter.hasNext()) {\n        Map.Entry<String, JobMonitor> jobEntry = jobIter.next();\n        unregister(getObjectName(getJobBeanName(jobEntry.getKey())));\n        jobIter.remove();\n      }\n    }\n  }\n","date":"2019-01-31 03:26:21","endLine":803,"groupId":"3784","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unregisterAllJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/14/5503224bbc9b2589d0b59141d3dfb13301db92.src","preCode":"  private void unregisterAllJobs() throws MalformedObjectNameException {\n    synchronized (_perTypeJobMonitorMap) {\n      Iterator<Map.Entry<String, JobMonitor>> jobIter = _perTypeJobMonitorMap.entrySet().iterator();\n      while (jobIter.hasNext()) {\n        Map.Entry<String, JobMonitor> jobEntry = jobIter.next();\n        unregister(getObjectName(getJobBeanName(jobEntry.getKey())));\n        jobIter.remove();\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":794,"status":"N"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2019-03-29 03:30:09","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":5,"curCode":"  protected boolean verifyState() {\n    try {\n      PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n      \r\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(_accessor);\n\n      Map<String, IdealState> idealStates = new HashMap<>(cache.getIdealStates());\n\n      \r\n      Iterator<Map.Entry<String, IdealState>> it = idealStates.entrySet().iterator();\n      while (it.hasNext()) {\n        Map.Entry<String, IdealState> pair = it.next();\n        if (pair.getValue().getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)) {\n          it.remove();\n        }\n      }\n\n      \r\n      if (_expectLiveInstances != null && !_expectLiveInstances.isEmpty()) {\n        Set<String> actualLiveNodes = cache.getLiveInstances().keySet();\n        if (!_expectLiveInstances.equals(actualLiveNodes)) {\n          return false;\n        }\n      }\n\n      Map<String, ExternalView> extViews = _accessor.getChildValuesMap(keyBuilder.externalViews());\n      if (extViews == null) {\n        extViews = Collections.emptyMap();\n      }\n\n      \r\n      if (_resources != null && !_resources.isEmpty()) {\n        idealStates.keySet().retainAll(_resources);\n        extViews.keySet().retainAll(_resources);\n      }\n\n      \r\n      \r\n      for (String resource : extViews.keySet()) {\n        if (!idealStates.containsKey(resource)) {\n          idealStates.put(resource, new IdealState(resource));\n        }\n      }\n\n      for (String resourceName : idealStates.keySet()) {\n        ExternalView extView = extViews.get(resourceName);\n        IdealState idealState = idealStates.get(resourceName);\n        if (extView == null) {\n          if (idealState.isExternalViewDisabled()) {\n            continue;\n          } else {\n            LOG.debug(\"externalView for \" + resourceName + \" is not available\");\n            return false;\n          }\n        }\n\n        boolean result = verifyExternalView(cache, extView, idealState);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      LOG.error(\"exception in verification\", e);\n      return false;\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":237,"groupId":"6982","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fd/5afb8bcef862d53b4051e0f9a40bc688d83e07.src","preCode":"  protected boolean verifyState() {\n    try {\n      PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n      \r\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(_accessor);\n\n      Map<String, IdealState> idealStates = new HashMap<>(cache.getIdealStates());\n\n      \r\n      Iterator<Map.Entry<String, IdealState>> it = idealStates.entrySet().iterator();\n      while (it.hasNext()) {\n        Map.Entry<String, IdealState> pair = it.next();\n        if (pair.getValue().getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)) {\n          it.remove();\n        }\n      }\n\n      \r\n      if (_expectLiveInstances != null && !_expectLiveInstances.isEmpty()) {\n        Set<String> actualLiveNodes = cache.getLiveInstances().keySet();\n        if (!_expectLiveInstances.equals(actualLiveNodes)) {\n          return false;\n        }\n      }\n\n      Map<String, ExternalView> extViews = _accessor.getChildValuesMap(keyBuilder.externalViews());\n      if (extViews == null) {\n        extViews = Collections.emptyMap();\n      }\n\n      \r\n      if (_resources != null && !_resources.isEmpty()) {\n        idealStates.keySet().retainAll(_resources);\n        extViews.keySet().retainAll(_resources);\n      }\n\n      \r\n      \r\n      for (String resource : extViews.keySet()) {\n        if (!idealStates.containsKey(resource)) {\n          idealStates.put(resource, new IdealState(resource));\n        }\n      }\n\n      for (String resourceName : idealStates.keySet()) {\n        ExternalView extView = extViews.get(resourceName);\n        IdealState idealState = idealStates.get(resourceName);\n        if (extView == null) {\n          if (idealState.isExternalViewDisabled()) {\n            continue;\n          } else {\n            LOG.debug(\"externalView for \" + resourceName + \" is not available\");\n            return false;\n          }\n        }\n\n        boolean result = verifyExternalView(cache, extView, idealState);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      LOG.error(\"exception in verification\", e);\n      return false;\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"N"},{"authorDate":"2019-03-29 03:30:09","commitOrder":5,"curCode":"  private void unregisterAllJobs() {\n    synchronized (_perTypeJobMonitorMap) {\n      Iterator<Map.Entry<String, JobMonitor>> jobIter = _perTypeJobMonitorMap.entrySet().iterator();\n      while (jobIter.hasNext()) {\n        Map.Entry<String, JobMonitor> jobEntry = jobIter.next();\n        jobEntry.getValue().unregister();\n        jobIter.remove();\n      }\n    }\n  }\n","date":"2019-03-29 03:30:14","endLine":817,"groupId":"3784","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unregisterAllJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1d/778ee79913602778e41451e424f0f9ac6b5292.src","preCode":"  private void unregisterAllJobs() throws MalformedObjectNameException {\n    synchronized (_perTypeJobMonitorMap) {\n      Iterator<Map.Entry<String, JobMonitor>> jobIter = _perTypeJobMonitorMap.entrySet().iterator();\n      while (jobIter.hasNext()) {\n        Map.Entry<String, JobMonitor> jobEntry = jobIter.next();\n        unregister(getObjectName(getJobBeanName(jobEntry.getKey())));\n        jobIter.remove();\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":808,"status":"M"}],"commitId":"8ba4c9c19981fffe3c958c6851e2b8b8bf90bfbb","commitMessage":"@@@TASK2.0: Add performance metrics to JobMonitor\n\n    We want to add more metrics to Task Framework so that the user could understand what's going on in case of a slowdown.  or get a general sense of how fast the workload is moving.\n    Changelist:\n    1. Add SubmissionToProcessDelay\n    2. Add SubmissionToScheduleDelay\n    3. Add ControllerInducedDelay (for testing)\n    4. Add JobLatencyGauge\n    5. Change regular metrics to Dynamic metrics in JobMonitor\n    6. Add an integration test: TestTaskPerformanceMetrics\n","date":"2019-03-29 03:30:14","modifiedFileCount":"6","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-03-29 03:30:09","codes":[{"authorDate":"2020-05-15 08:34:22","commitOrder":6,"curCode":"  protected boolean verifyState() {\n    try {\n      PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n      \r\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(_accessor);\n\n      Map<String, IdealState> idealStates = new HashMap<>(cache.getIdealStates());\n\n      \r\n      Iterator<Map.Entry<String, IdealState>> it = idealStates.entrySet().iterator();\n      while (it.hasNext()) {\n        Map.Entry<String, IdealState> pair = it.next();\n        if (pair.getValue().getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)) {\n          it.remove();\n        }\n      }\n\n      \r\n      if (_expectLiveInstances != null && !_expectLiveInstances.isEmpty()) {\n        Set<String> actualLiveNodes = cache.getLiveInstances().keySet();\n        if (!_expectLiveInstances.equals(actualLiveNodes)) {\n          return false;\n        }\n      }\n\n      Map<String, ExternalView> extViews =\n          _accessor.getChildValuesMap(keyBuilder.externalViews(), true);\n      if (extViews == null) {\n        extViews = Collections.emptyMap();\n      }\n\n      \r\n      if (_resources != null && !_resources.isEmpty()) {\n        idealStates.keySet().retainAll(_resources);\n        extViews.keySet().retainAll(_resources);\n      }\n\n      \r\n      \r\n      for (String resource : extViews.keySet()) {\n        if (!idealStates.containsKey(resource)) {\n          idealStates.put(resource, new IdealState(resource));\n        }\n      }\n\n      for (String resourceName : idealStates.keySet()) {\n        ExternalView extView = extViews.get(resourceName);\n        IdealState idealState = idealStates.get(resourceName);\n        if (extView == null) {\n          if (idealState.isExternalViewDisabled()) {\n            continue;\n          } else {\n            LOG.debug(\"externalView for \" + resourceName + \" is not available\");\n            return false;\n          }\n        }\n\n        boolean result = verifyExternalView(cache, extView, idealState);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      LOG.error(\"exception in verification\", e);\n      return false;\n    }\n  }\n","date":"2020-05-15 08:34:22","endLine":272,"groupId":"10672","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/41012c299e6fe9aa0e53018663d1963700cccb.src","preCode":"  protected boolean verifyState() {\n    try {\n      PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n      \r\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(_accessor);\n\n      Map<String, IdealState> idealStates = new HashMap<>(cache.getIdealStates());\n\n      \r\n      Iterator<Map.Entry<String, IdealState>> it = idealStates.entrySet().iterator();\n      while (it.hasNext()) {\n        Map.Entry<String, IdealState> pair = it.next();\n        if (pair.getValue().getStateModelDefRef().equals(TaskConstants.STATE_MODEL_NAME)) {\n          it.remove();\n        }\n      }\n\n      \r\n      if (_expectLiveInstances != null && !_expectLiveInstances.isEmpty()) {\n        Set<String> actualLiveNodes = cache.getLiveInstances().keySet();\n        if (!_expectLiveInstances.equals(actualLiveNodes)) {\n          return false;\n        }\n      }\n\n      Map<String, ExternalView> extViews = _accessor.getChildValuesMap(keyBuilder.externalViews());\n      if (extViews == null) {\n        extViews = Collections.emptyMap();\n      }\n\n      \r\n      if (_resources != null && !_resources.isEmpty()) {\n        idealStates.keySet().retainAll(_resources);\n        extViews.keySet().retainAll(_resources);\n      }\n\n      \r\n      \r\n      for (String resource : extViews.keySet()) {\n        if (!idealStates.containsKey(resource)) {\n          idealStates.put(resource, new IdealState(resource));\n        }\n      }\n\n      for (String resourceName : idealStates.keySet()) {\n        ExternalView extView = extViews.get(resourceName);\n        IdealState idealState = idealStates.get(resourceName);\n        if (extView == null) {\n          if (idealState.isExternalViewDisabled()) {\n            continue;\n          } else {\n            LOG.debug(\"externalView for \" + resourceName + \" is not available\");\n            return false;\n          }\n        }\n\n        boolean result = verifyExternalView(cache, extView, idealState);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      LOG.error(\"exception in verification\", e);\n      return false;\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2019-03-29 03:30:09","commitOrder":6,"curCode":"  private void unregisterAllJobs() {\n    synchronized (_perTypeJobMonitorMap) {\n      Iterator<Map.Entry<String, JobMonitor>> jobIter = _perTypeJobMonitorMap.entrySet().iterator();\n      while (jobIter.hasNext()) {\n        Map.Entry<String, JobMonitor> jobEntry = jobIter.next();\n        jobEntry.getValue().unregister();\n        jobIter.remove();\n      }\n    }\n  }\n","date":"2019-03-29 03:30:14","endLine":817,"groupId":"10672","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"unregisterAllJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1d/778ee79913602778e41451e424f0f9ac6b5292.src","preCode":"  private void unregisterAllJobs() {\n    synchronized (_perTypeJobMonitorMap) {\n      Iterator<Map.Entry<String, JobMonitor>> jobIter = _perTypeJobMonitorMap.entrySet().iterator();\n      while (jobIter.hasNext()) {\n        Map.Entry<String, JobMonitor> jobEntry = jobIter.next();\n        jobEntry.getValue().unregister();\n        jobIter.remove();\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":808,"status":"N"}],"commitId":"6ff99f5a181fb5fe91340968f93ca2cd5329a90a","commitMessage":"@@@Enforce result check for data accessors batch get calls to prevent partial batch read. (#974)\n\nThis will help to ensure the main Helix logic does not calculate based on incomplete input.","date":"2020-05-15 08:34:22","modifiedFileCount":"49","status":"M","submitter":"Jiajun Wang"}]
