[{"authorTime":"2018-03-09 08:51:37","codes":[{"authorDate":"2018-03-09 08:51:37","commitOrder":2,"curCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getPendingRecoveryRebalancePartitionGauge(), numPartition);\n    Assert.assertEquals(resourceMonitor.getRecoveryRebalanceThrottledPartitionGauge(),\n        numPartition - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-03-14 06:55:44","endLine":89,"groupId":"5784","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoveryRebalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/61/acdb5efd69b59ee761223bd7e965a7a1bc3b3c.src","preCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getPendingRecoveryRebalancePartitionGauge(), numPartition);\n    Assert.assertEquals(resourceMonitor.getRecoveryRebalanceThrottledPartitionGauge(),\n        numPartition - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"MB"},{"authorDate":"2018-03-09 08:51:37","commitOrder":2,"curCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n    runStage(event, new ReadClusterDataStage());\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getPendingLoadRebalancePartitionGauge();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getLoadRebalanceThrottledPartitionGauge(),\n        numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-03-14 06:55:44","endLine":145,"groupId":"5784","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadBalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/61/acdb5efd69b59ee761223bd7e965a7a1bc3b3c.src","preCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n    runStage(event, new ReadClusterDataStage());\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getPendingLoadRebalancePartitionGauge();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getLoadRebalanceThrottledPartitionGauge(),\n        numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"MB"}],"commitId":"b6fd8cb8396e1453afba404b669534883ce796a7","commitMessage":"@@@[HELIX-675] Refactor controller start/cleanup logic to ensure monitor register/reset is handled in any event orders.\n\nDue to different possible event process order.  controller init event might be processed later or earlier than expected.\nThis cause inconsistency when even handler thread process and record information in the cluster monitor.\nThis change ensures cluster monitor is off when the leadership changes to other node. So no extra metric data will be generated.\n\nAlso upgrade related test cases to verify MBean counts.\n","date":"2018-03-14 06:55:44","modifiedFileCount":"12","status":"M","submitter":"jiajunwang"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":3,"curCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getPendingRecoveryRebalancePartitionGauge(), numPartition);\n    Assert.assertEquals(resourceMonitor.getRecoveryRebalanceThrottledPartitionGauge(),\n        numPartition - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-02-26 09:36:00","endLine":90,"groupId":"5720","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoveryRebalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/16/77b6ac59c98851fe5ec302313ceeffb8918ea1.src","preCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getPendingRecoveryRebalancePartitionGauge(), numPartition);\n    Assert.assertEquals(resourceMonitor.getRecoveryRebalanceThrottledPartitionGauge(),\n        numPartition - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":3,"curCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n    runStage(event, new ReadClusterDataStage());\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getPendingLoadRebalancePartitionGauge();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getLoadRebalanceThrottledPartitionGauge(),\n        numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-02-26 09:36:00","endLine":147,"groupId":"6492","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadBalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/16/77b6ac59c98851fe5ec302313ceeffb8918ea1.src","preCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n    runStage(event, new ReadClusterDataStage());\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getPendingLoadRebalancePartitionGauge();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getLoadRebalanceThrottledPartitionGauge(),\n        numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2020-09-23 05:30:30","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":4,"curCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getPendingRecoveryRebalancePartitionGauge(), numPartition);\n    Assert.assertEquals(resourceMonitor.getRecoveryRebalanceThrottledPartitionGauge(),\n        numPartition - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-02-26 09:36:00","endLine":90,"groupId":"5720","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoveryRebalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/16/77b6ac59c98851fe5ec302313ceeffb8918ea1.src","preCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getPendingRecoveryRebalancePartitionGauge(), numPartition);\n    Assert.assertEquals(resourceMonitor.getRecoveryRebalanceThrottledPartitionGauge(),\n        numPartition - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2020-09-23 05:30:30","commitOrder":4,"curCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.clearCachedResourceAssignments();\n    runStage(event, new ReadClusterDataStage());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getPendingLoadRebalancePartitionGauge();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getLoadRebalanceThrottledPartitionGauge(),\n        numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-09-23 05:30:30","endLine":150,"groupId":"346","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadBalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/43/bc8b1dcc533e82a3556da32812dc9a2e08e784.src","preCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n    runStage(event, new ReadClusterDataStage());\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getPendingLoadRebalancePartitionGauge();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getLoadRebalanceThrottledPartitionGauge(),\n        numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"a28a31ebacadc5a6af7afd5e5ea06e9ecc6ce53b","commitMessage":"@@@Use the DelayedAutoRebalancer as the default rebalancer. (#1360)\n\nIf no rebalancer class name is specified.  use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever.  since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache.  it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration.  then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nIf the client application code is using BestPossibleExternalViewVerifier with AutoRebalancer and AutoRebalanceStrategy.  then to avoid the problem about this change.  please do either of the following 2 changes.\n- Explicitly configure the AutoRebalancer class in the resource IdealState.\n- Change to use StrictMatchExternalViewVerifier. Note that using this verifier requires PERSIST_BEST_POSSIBLE_ASSIGNMENT to be true in the cluster config.","date":"2020-09-23 05:30:30","modifiedFileCount":"17","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2021-05-26 01:19:08","codes":[{"authorDate":"2021-05-26 01:19:08","commitOrder":5,"curCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new ResourceMessageGenerationPhase());\n    runStage(event, new MessageSelectionStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getNumPendingRecoveryRebalanceReplicas(),\n        numPartition * numReplica - resourceMonitor.getNumPendingLoadRebalanceReplicas());\n    Assert.assertEquals(resourceMonitor.getNumRecoveryRebalanceThrottledReplicas(),\n        numPartition * numReplica - resourceMonitor.getNumPendingLoadRebalanceReplicas() - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-06-02 02:44:29","endLine":96,"groupId":"5720","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoveryRebalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cc/c14319da9bedcf581a84b8001daa0dfea78229.src","preCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getPendingRecoveryRebalancePartitionGauge(), numPartition);\n    Assert.assertEquals(resourceMonitor.getRecoveryRebalanceThrottledPartitionGauge(),\n        numPartition - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2021-05-26 01:19:08","commitOrder":5,"curCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.clearCachedResourceAssignments();\n    runStage(event, new ReadClusterDataStage());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new ResourceMessageGenerationPhase());\n    runStage(event, new MessageSelectionStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getNumPendingLoadRebalanceReplicas();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getNumLoadRebalanceThrottledReplicas(), numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-06-02 02:44:29","endLine":156,"groupId":"346","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadBalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cc/c14319da9bedcf581a84b8001daa0dfea78229.src","preCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.clearCachedResourceAssignments();\n    runStage(event, new ReadClusterDataStage());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getPendingLoadRebalancePartitionGauge();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getLoadRebalanceThrottledPartitionGauge(),\n        numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"f49986e24c27c49d8c877457753e32dcf8b540f4","commitMessage":"@@@[Replica Level Throttle] Make Pipeline in a correct order and fixes tests (#1750)\n\n* Make Pipeline in a correct order and fixes tests\n\n1. Make pipeline running in a correct order to process computation\n2. Add \"DROPPED\" case in the mapping to reflect the real case.\n3. Fixes test cases.","date":"2021-06-02 02:44:29","modifiedFileCount":"15","status":"M","submitter":"Junkai Xue"},{"authorTime":"2021-05-27 07:44:46","codes":[{"authorDate":"2021-05-27 07:44:46","commitOrder":6,"curCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new MessageGenerationPhase());\n    runStage(event, new MessageSelectionStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getNumPendingRecoveryRebalanceReplicas(),\n        numPartition * numReplica - resourceMonitor.getNumPendingLoadRebalanceReplicas());\n    Assert.assertEquals(resourceMonitor.getNumRecoveryRebalanceThrottledReplicas(),\n        numPartition * numReplica - resourceMonitor.getNumPendingLoadRebalanceReplicas() - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-06-02 02:44:29","endLine":96,"groupId":"1097","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testRecoveryRebalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/a3ad0bc834e81155529df8ea76d2b1019c04e6.src","preCode":"  public void testRecoveryRebalanceMetrics() {\n    System.out\n        .println(\"START testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new ResourceMessageGenerationPhase());\n    runStage(event, new MessageSelectionStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    Assert.assertEquals(resourceMonitor.getNumPendingRecoveryRebalanceReplicas(),\n        numPartition * numReplica - resourceMonitor.getNumPendingLoadRebalanceReplicas());\n    Assert.assertEquals(resourceMonitor.getNumRecoveryRebalanceThrottledReplicas(),\n        numPartition * numReplica - resourceMonitor.getNumPendingLoadRebalanceReplicas() - maxPending);\n\n    System.out\n        .println(\"END testRecoveryRebalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2021-05-27 07:44:46","commitOrder":6,"curCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.clearCachedResourceAssignments();\n    runStage(event, new ReadClusterDataStage());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new MessageGenerationPhase());\n    runStage(event, new MessageSelectionStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getNumPendingLoadRebalanceReplicas();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getNumLoadRebalanceThrottledReplicas(), numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-06-02 02:44:29","endLine":156,"groupId":"1097","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testLoadBalanceMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/a3ad0bc834e81155529df8ea76d2b1019c04e6.src","preCode":"  public void testLoadBalanceMetrics() {\n    System.out\n        .println(\"START testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n    String resource = \"testResourceName\";\n\n    int numPartition = 100;\n    int numReplica = 3;\n    int maxPending = 3;\n\n    setupIdealState(5, new String[] {resource}, numPartition,\n        numReplica, IdealState.RebalanceMode.FULL_AUTO,\n        BuiltInStateModelDefinitions.MasterSlave.name());\n    setupInstances(5);\n    setupLiveInstances(4);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[] {resource}, numPartition,\n            BuiltInStateModelDefinitions.MasterSlave.name());\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    ClusterStatusMonitor monitor = new ClusterStatusMonitor(_clusterName);\n    monitor.active();\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), monitor);\n\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, new BestPossibleStateCalcStage());\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    currentStateOutput = copyCurrentStateFromBestPossible(bestPossibleStateOutput, resource);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    setupLiveInstances(4);\n\n\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.clearCachedResourceAssignments();\n    runStage(event, new ReadClusterDataStage());\n    setupThrottleConfig(cache.getClusterConfig(),\n        StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE, maxPending);\n    runStage(event, new BestPossibleStateCalcStage());\n    runStage(event, new ResourceMessageGenerationPhase());\n    runStage(event, new MessageSelectionStage());\n    runStage(event, new IntermediateStateCalcStage());\n\n    ClusterStatusMonitor clusterStatusMonitor = event.getAttribute(AttributeName.clusterStatusMonitor.name());\n    ResourceMonitor resourceMonitor = clusterStatusMonitor.getResourceMonitor(resource);\n\n    long numPendingLoadBalance = resourceMonitor.getNumPendingLoadRebalanceReplicas();\n    Assert.assertTrue(numPendingLoadBalance > 0);\n    Assert.assertEquals(resourceMonitor.getNumLoadRebalanceThrottledReplicas(), numPendingLoadBalance - maxPending);\n\n    System.out\n        .println(\"END testLoadBalanceMetrics at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"17c52da9422fbde427eb5b1309ddeeda389c092c","commitMessage":"@@@Refactor/clean up code without logic change (#1760)\n\nThis commmit contains:\n1. Remove unused functions and logic\n2. Combine the Resource/Task message generation into one stage.  since they are both relying on best possible result.","date":"2021-06-02 02:44:29","modifiedFileCount":"11","status":"M","submitter":"Junkai Xue"}]
