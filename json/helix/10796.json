[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if(!type.equals(MessageType.CONTROLLER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"+_message.getMsgId()\n            +\" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\", \"msg \"+ _message.getMsgId() + \" from \"+_message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2012-10-25 07:14:36","endLine":80,"groupId":"2745","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7e/2a48f12d380ce4b4ea3ecad1d4f57a1c99cee1.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if(!type.equals(MessageType.CONTROLLER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"+_message.getMsgId()\n            +\" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\", \"msg \"+ _message.getMsgId() + \" from \"+_message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultControllerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"\n            + _message.getMsgId() + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\"))\n      {\n        try\n        {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields()\n              .get(\"TIMEOUT\"));\n        } catch (Exception e)\n        {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(\n          _message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\n          \"Criteria\"));\n      ObjectMapper mapper = new ObjectMapper();\n      Criteria recipientCriteria;\n      try\n      {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e)\n      {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n      \n      boolean waitAll = false;\n      if(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) !=null)\n      {\n        try\n        {\n          waitAll = Boolean.parseBoolean(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        }\n        catch(Exception e)\n        {\n          _logger.warn(\"\",e);\n        }\n      }\n      \r\n      \n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if(waitAll)\n      {\n        nMsgsSent = _manager.getMessagingService().sendAndWait(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      else\n      {\n        nMsgsSent = _manager.getMessagingService().send(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n      \n      ZNRecord statusUpdate = accessor.getProperty(\n          keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.toString(),\n              _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(\n          MessageType.SCHEDULER_MSG.toString(), _message.getMsgId()),\n          new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\n          \"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc()\n              + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2012-10-25 07:14:36","endLine":268,"groupId":"3255","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e9/64f443a773e64aa09a937af4736146e007463a.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"\n            + _message.getMsgId() + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\"))\n      {\n        try\n        {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields()\n              .get(\"TIMEOUT\"));\n        } catch (Exception e)\n        {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(\n          _message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\n          \"Criteria\"));\n      ObjectMapper mapper = new ObjectMapper();\n      Criteria recipientCriteria;\n      try\n      {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e)\n      {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n      \n      boolean waitAll = false;\n      if(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) !=null)\n      {\n        try\n        {\n          waitAll = Boolean.parseBoolean(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        }\n        catch(Exception e)\n        {\n          _logger.warn(\"\",e);\n        }\n      }\n      \r\n      \n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if(waitAll)\n      {\n        nMsgsSent = _manager.getMessagingService().sendAndWait(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      else\n      {\n        nMsgsSent = _manager.getMessagingService().send(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n      \n      ZNRecord statusUpdate = accessor.getProperty(\n          keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.toString(),\n              _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(\n          MessageType.SCHEDULER_MSG.toString(), _message.getMsgId()),\n          new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\n          \"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc()\n              + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultSchedulerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":2,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if(!type.equals(MessageType.CONTROLLER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"+_message.getMsgId()\n            +\" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\", \"msg \"+ _message.getMsgId() + \" from \"+_message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2012-10-25 07:14:36","endLine":80,"groupId":"2745","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7e/2a48f12d380ce4b4ea3ecad1d4f57a1c99cee1.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if(!type.equals(MessageType.CONTROLLER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"+_message.getMsgId()\n            +\" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\", \"msg \"+ _message.getMsgId() + \" from \"+_message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultControllerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"\n            + _message.getMsgId() + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\"))\n      {\n        try\n        {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields()\n              .get(\"TIMEOUT\"));\n        } catch (Exception e)\n        {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(\n          _message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\n          \"Criteria\"));\n      ObjectMapper mapper = new ObjectMapper();\n      Criteria recipientCriteria;\n      try\n      {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e)\n      {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n      \n      boolean waitAll = false;\n      if(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) !=null)\n      {\n        try\n        {\n          waitAll = Boolean.parseBoolean(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        }\n        catch(Exception e)\n        {\n          _logger.warn(\"\",e);\n        }\n      }\n      \n      \r\n      if(InstanceType.PARTICIPANT == recipientCriteria.getRecipientInstanceType())\n      {\n        handleMessageUsingScheduledTaskQueue(recipientCriteria, messageTemplate, _message.getMsgId());\n        result.setSuccess(true);\n        result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n        result.getTaskResultMap().put(\n            \"ControllerResult\",\n            \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc()\n                + \" processed\");\n        return result;\n      }\n      \n      _logger.info(\"Scheduler sending message to Controller\");\n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if(waitAll)\n      {\n        nMsgsSent = _manager.getMessagingService().sendAndWait(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      else\n      {\n        nMsgsSent = _manager.getMessagingService().send(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n      \n      ZNRecord statusUpdate = accessor.getProperty(\n          keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.toString(),\n              _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(\n          MessageType.SCHEDULER_MSG.toString(), _message.getMsgId()),\n          new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\n          \"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc()\n              + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2013-04-06 08:30:58","endLine":389,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/49/101c91ccf22ae4c72947ae25f4f6dd91b3cc39.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"\n            + _message.getMsgId() + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\"))\n      {\n        try\n        {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields()\n              .get(\"TIMEOUT\"));\n        } catch (Exception e)\n        {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(\n          _message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\n          \"Criteria\"));\n      ObjectMapper mapper = new ObjectMapper();\n      Criteria recipientCriteria;\n      try\n      {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e)\n      {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n      \n      boolean waitAll = false;\n      if(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) !=null)\n      {\n        try\n        {\n          waitAll = Boolean.parseBoolean(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        }\n        catch(Exception e)\n        {\n          _logger.warn(\"\",e);\n        }\n      }\n      \r\n      \n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if(waitAll)\n      {\n        nMsgsSent = _manager.getMessagingService().sendAndWait(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      else\n      {\n        nMsgsSent = _manager.getMessagingService().send(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n      \n      ZNRecord statusUpdate = accessor.getProperty(\n          keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.toString(),\n              _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(\n          MessageType.SCHEDULER_MSG.toString(), _message.getMsgId()),\n          new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\n          \"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc()\n              + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultSchedulerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"M","submitter":"Swaroop Jagadish"},{"authorTime":"2013-05-21 01:50:28","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":3,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if(!type.equals(MessageType.CONTROLLER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"+_message.getMsgId()\n            +\" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\", \"msg \"+ _message.getMsgId() + \" from \"+_message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2012-10-25 07:14:36","endLine":80,"groupId":"2745","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7e/2a48f12d380ce4b4ea3ecad1d4f57a1c99cee1.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if(!type.equals(MessageType.CONTROLLER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"+_message.getMsgId()\n            +\" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\", \"msg \"+ _message.getMsgId() + \" from \"+_message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultControllerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2013-05-21 01:50:28","commitOrder":3,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"\n            + _message.getMsgId() + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\"))\n      {\n        try\n        {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields()\n              .get(\"TIMEOUT\"));\n        } catch (Exception e)\n        {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(\n          _message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\n          \"Criteria\"));\n      ObjectMapper mapper = new ObjectMapper();\n      Criteria recipientCriteria;\n      try\n      {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e)\n      {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n      \n      boolean waitAll = false;\n      if(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) !=null)\n      {\n        try\n        {\n          waitAll = Boolean.parseBoolean(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        }\n        catch(Exception e)\n        {\n          _logger.warn(\"\",e);\n        }\n      }\n      boolean hasSchedulerTaskQueue = _message.getRecord().getSimpleFields().containsKey(SCHEDULER_TASK_QUEUE);\n      \r\n      if(InstanceType.PARTICIPANT == recipientCriteria.getRecipientInstanceType() && hasSchedulerTaskQueue)\n      {\n        handleMessageUsingScheduledTaskQueue(recipientCriteria, messageTemplate, _message.getMsgId());\n        result.setSuccess(true);\n        result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n        result.getTaskResultMap().put(\n            \"ControllerResult\",\n            \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc()\n                + \" processed\");\n        return result;\n      }\n      \n      _logger.info(\"Scheduler sending message to Controller\");\n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if(waitAll)\n      {\n        nMsgsSent = _manager.getMessagingService().sendAndWait(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      else\n      {\n        nMsgsSent = _manager.getMessagingService().send(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n      \n      ZNRecord statusUpdate = accessor.getProperty(\n          keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.toString(),\n              _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(\n          MessageType.SCHEDULER_MSG.toString(), _message.getMsgId()),\n          new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\n          \"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc()\n              + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2013-05-21 01:50:28","endLine":389,"groupId":"6862","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4f/e8750dceea496f1d429f908d11d6409ecb64fa.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException\n    {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.toString()))\n      {\n        throw new HelixException(\"Unexpected msg type for message \"\n            + _message.getMsgId() + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\"))\n      {\n        try\n        {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields()\n              .get(\"TIMEOUT\"));\n        } catch (Exception e)\n        {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(\n          _message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\n          \"Criteria\"));\n      ObjectMapper mapper = new ObjectMapper();\n      Criteria recipientCriteria;\n      try\n      {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e)\n      {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n      \n      boolean waitAll = false;\n      if(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) !=null)\n      {\n        try\n        {\n          waitAll = Boolean.parseBoolean(_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        }\n        catch(Exception e)\n        {\n          _logger.warn(\"\",e);\n        }\n      }\n      \n      \r\n      if(InstanceType.PARTICIPANT == recipientCriteria.getRecipientInstanceType())\n      {\n        handleMessageUsingScheduledTaskQueue(recipientCriteria, messageTemplate, _message.getMsgId());\n        result.setSuccess(true);\n        result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n        result.getTaskResultMap().put(\n            \"ControllerResult\",\n            \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc()\n                + \" processed\");\n        return result;\n      }\n      \n      _logger.info(\"Scheduler sending message to Controller\");\n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if(waitAll)\n      {\n        nMsgsSent = _manager.getMessagingService().sendAndWait(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      else\n      {\n        nMsgsSent = _manager.getMessagingService().send(recipientCriteria,\n            messageTemplate, \n            callback,\n            timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n      \n      ZNRecord statusUpdate = accessor.getProperty(\n          keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.toString(),\n              _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(\n          MessageType.SCHEDULER_MSG.toString(), _message.getMsgId()),\n          new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\n          \"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc()\n              + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultSchedulerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"d3d846b6c55b1819a99e812e2800e7ccbab6cdf8","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-05-21 01:50:28","modifiedFileCount":"3","status":"M","submitter":"Bob Schulman"},{"authorTime":"2017-10-04 03:13:50","codes":[{"authorDate":"2017-10-04 03:13:50","commitOrder":4,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.CONTROLLER_MSG.name())) {\n        throw new HelixException(\"Unexpected msg type for message \" + _message.getMsgId()\n            + \" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2017-10-04 03:24:48","endLine":82,"groupId":"4809","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6a/01ef2af90b21ced9f148f6f9836a50adb9340b.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.CONTROLLER_MSG.toString())) {\n        throw new HelixException(\"Unexpected msg type for message \" + _message.getMsgId()\n            + \" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultControllerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2017-10-04 03:13:50","commitOrder":4,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.name())) {\n        throw new HelixException(\"Unexpected msg type for message \" + _message.getMsgId()\n            + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\")) {\n        try {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields().get(\"TIMEOUT\"));\n        } catch (Exception e) {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(_message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\"Criteria\"));\n      ObjectMapper mapper = new ObjectMapper();\n      Criteria recipientCriteria;\n      try {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e) {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n\n      boolean waitAll = false;\n      if (_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) != null) {\n        try {\n          waitAll =\n              Boolean.parseBoolean(_message.getRecord().getSimpleField(\n                  DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        } catch (Exception e) {\n          _logger.warn(\"\", e);\n        }\n      }\n      boolean hasSchedulerTaskQueue =\n          _message.getRecord().getSimpleFields().containsKey(SCHEDULER_TASK_QUEUE);\n      \r\n      if (InstanceType.PARTICIPANT == recipientCriteria.getRecipientInstanceType()\n          && hasSchedulerTaskQueue) {\n        handleMessageUsingScheduledTaskQueue(recipientCriteria, messageTemplate,\n            _message.getMsgId());\n        result.setSuccess(true);\n        result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n        result.getTaskResultMap().put(\"ControllerResult\",\n            \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n        return result;\n      }\n\n      _logger.info(\"Scheduler sending message to Controller\");\n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if (waitAll) {\n        nMsgsSent =\n            _manager.getMessagingService().sendAndWait(recipientCriteria, messageTemplate,\n                callback, timeOut);\n      } else {\n        nMsgsSent =\n            _manager.getMessagingService().send(recipientCriteria, messageTemplate, callback,\n                timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n\n      ZNRecord statusUpdate =\n          accessor.getProperty(\n              keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.name(),\n                  _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.name(),\n          _message.getMsgId()), new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2017-10-04 03:24:48","endLine":347,"groupId":"6862","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/7ed732f7c4ac8f36ee041bd4703e525f0100bf.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.toString())) {\n        throw new HelixException(\"Unexpected msg type for message \" + _message.getMsgId()\n            + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\")) {\n        try {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields().get(\"TIMEOUT\"));\n        } catch (Exception e) {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(_message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\"Criteria\"));\n      ObjectMapper mapper = new ObjectMapper();\n      Criteria recipientCriteria;\n      try {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e) {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n\n      boolean waitAll = false;\n      if (_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) != null) {\n        try {\n          waitAll =\n              Boolean.parseBoolean(_message.getRecord().getSimpleField(\n                  DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        } catch (Exception e) {\n          _logger.warn(\"\", e);\n        }\n      }\n      boolean hasSchedulerTaskQueue =\n          _message.getRecord().getSimpleFields().containsKey(SCHEDULER_TASK_QUEUE);\n      \r\n      if (InstanceType.PARTICIPANT == recipientCriteria.getRecipientInstanceType()\n          && hasSchedulerTaskQueue) {\n        handleMessageUsingScheduledTaskQueue(recipientCriteria, messageTemplate,\n            _message.getMsgId());\n        result.setSuccess(true);\n        result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n        result.getTaskResultMap().put(\"ControllerResult\",\n            \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n        return result;\n      }\n\n      _logger.info(\"Scheduler sending message to Controller\");\n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if (waitAll) {\n        nMsgsSent =\n            _manager.getMessagingService().sendAndWait(recipientCriteria, messageTemplate,\n                callback, timeOut);\n      } else {\n        nMsgsSent =\n            _manager.getMessagingService().send(recipientCriteria, messageTemplate, callback,\n                timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n\n      ZNRecord statusUpdate =\n          accessor.getProperty(\n              keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.toString(),\n                  _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.toString(),\n          _message.getMsgId()), new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultSchedulerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"}],"commitId":"b9de8362bc75c98aa49110c78ce17edf9ef52456","commitMessage":"@@@[HELIX-669] State Transition Cancellation Client side change Part II\n\nIn Helix.  there are many different scenrios which could make some pending state transitions not valid any more.  for example.  a resource is deleted while it still has some pending transitions.  or Helix calculates a new ideal mapping while there are still some pending transitions not matching new mapping.  In such cases.  Helix controller should proactively cancell these pending transitions instead of waiting them to finish.\n\nIn this rb:\n1. Support MessageHandlerFactory can be registered by different message type.\n2. Refactor related API\n3. Add unit test for multi message type registeration.\n","date":"2017-10-04 03:24:48","modifiedFileCount":"36","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-08-21 10:06:09","codes":[{"authorDate":"2017-10-04 03:13:50","commitOrder":5,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.CONTROLLER_MSG.name())) {\n        throw new HelixException(\"Unexpected msg type for message \" + _message.getMsgId()\n            + \" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2017-10-04 03:24:48","endLine":82,"groupId":"10796","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6a/01ef2af90b21ced9f148f6f9836a50adb9340b.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.CONTROLLER_MSG.name())) {\n        throw new HelixException(\"Unexpected msg type for message \" + _message.getMsgId()\n            + \" type:\" + _message.getMsgType());\n      }\n      result.getTaskResultMap().put(\"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultControllerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2020-08-21 10:06:09","commitOrder":5,"curCode":"    public HelixTaskResult handleMessage() throws InterruptedException {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.name())) {\n        throw new HelixException(\"Unexpected msg type for message \" + _message.getMsgId()\n            + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\")) {\n        try {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields().get(\"TIMEOUT\"));\n        } catch (Exception e) {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(_message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\"Criteria\"));\n      Criteria recipientCriteria;\n      try {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e) {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n\n      boolean waitAll = false;\n      if (_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) != null) {\n        try {\n          waitAll =\n              Boolean.parseBoolean(_message.getRecord().getSimpleField(\n                  DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        } catch (Exception e) {\n          _logger.warn(\"\", e);\n        }\n      }\n      boolean hasSchedulerTaskQueue =\n          _message.getRecord().getSimpleFields().containsKey(SCHEDULER_TASK_QUEUE);\n      \r\n      if (InstanceType.PARTICIPANT == recipientCriteria.getRecipientInstanceType()\n          && hasSchedulerTaskQueue) {\n        handleMessageUsingScheduledTaskQueue(recipientCriteria, messageTemplate,\n            _message.getMsgId());\n        result.setSuccess(true);\n        result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n        result.getTaskResultMap().put(\"ControllerResult\",\n            \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n        return result;\n      }\n\n      _logger.info(\"Scheduler sending message to Controller\");\n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if (waitAll) {\n        nMsgsSent =\n            _manager.getMessagingService().sendAndWait(recipientCriteria, messageTemplate,\n                callback, timeOut);\n      } else {\n        nMsgsSent =\n            _manager.getMessagingService().send(recipientCriteria, messageTemplate, callback,\n                timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n\n      ZNRecord statusUpdate =\n          accessor.getProperty(\n              keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.name(),\n                  _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.name(),\n          _message.getMsgId()), new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","date":"2020-08-21 10:06:09","endLine":353,"groupId":"10796","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"handleMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/539f904e6f56da86306a549ac391c37711e8e1.src","preCode":"    public HelixTaskResult handleMessage() throws InterruptedException {\n      String type = _message.getMsgType();\n      HelixTaskResult result = new HelixTaskResult();\n      if (!type.equals(MessageType.SCHEDULER_MSG.name())) {\n        throw new HelixException(\"Unexpected msg type for message \" + _message.getMsgId()\n            + \" type:\" + _message.getMsgType());\n      }\n      \r\n      int timeOut = -1;\n      if (_message.getRecord().getSimpleFields().containsKey(\"TIMEOUT\")) {\n        try {\n          timeOut = Integer.parseInt(_message.getRecord().getSimpleFields().get(\"TIMEOUT\"));\n        } catch (Exception e) {\n        }\n      }\n\n      \r\n      ZNRecord record = new ZNRecord(\"templateMessage\");\n      record.getSimpleFields().putAll(_message.getRecord().getMapField(\"MessageTemplate\"));\n      Message messageTemplate = new Message(record);\n\n      \r\n      StringReader sr = new StringReader(_message.getRecord().getSimpleField(\"Criteria\"));\n      ObjectMapper mapper = new ObjectMapper();\n      Criteria recipientCriteria;\n      try {\n        recipientCriteria = mapper.readValue(sr, Criteria.class);\n      } catch (Exception e) {\n        _logger.error(\"\", e);\n        result.setException(e);\n        result.setSuccess(false);\n        return result;\n      }\n      _logger.info(\"Scheduler sending message, criteria:\" + recipientCriteria);\n\n      boolean waitAll = false;\n      if (_message.getRecord().getSimpleField(DefaultSchedulerMessageHandlerFactory.WAIT_ALL) != null) {\n        try {\n          waitAll =\n              Boolean.parseBoolean(_message.getRecord().getSimpleField(\n                  DefaultSchedulerMessageHandlerFactory.WAIT_ALL));\n        } catch (Exception e) {\n          _logger.warn(\"\", e);\n        }\n      }\n      boolean hasSchedulerTaskQueue =\n          _message.getRecord().getSimpleFields().containsKey(SCHEDULER_TASK_QUEUE);\n      \r\n      if (InstanceType.PARTICIPANT == recipientCriteria.getRecipientInstanceType()\n          && hasSchedulerTaskQueue) {\n        handleMessageUsingScheduledTaskQueue(recipientCriteria, messageTemplate,\n            _message.getMsgId());\n        result.setSuccess(true);\n        result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n        result.getTaskResultMap().put(\"ControllerResult\",\n            \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n        return result;\n      }\n\n      _logger.info(\"Scheduler sending message to Controller\");\n      int nMsgsSent = 0;\n      SchedulerAsyncCallback callback = new SchedulerAsyncCallback(_message, _manager);\n      if (waitAll) {\n        nMsgsSent =\n            _manager.getMessagingService().sendAndWait(recipientCriteria, messageTemplate,\n                callback, timeOut);\n      } else {\n        nMsgsSent =\n            _manager.getMessagingService().send(recipientCriteria, messageTemplate, callback,\n                timeOut);\n      }\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      Map<String, String> sendSummary = new HashMap<String, String>();\n      sendSummary.put(\"MessageCount\", \"\" + nMsgsSent);\n\n      ZNRecord statusUpdate =\n          accessor.getProperty(\n              keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.name(),\n                  _message.getMsgId())).getRecord();\n\n      statusUpdate.getMapFields().put(\"SentMessageCount\", sendSummary);\n\n      accessor.setProperty(keyBuilder.controllerTaskStatus(MessageType.SCHEDULER_MSG.name(),\n          _message.getMsgId()), new StatusUpdate(statusUpdate));\n\n      result.getTaskResultMap().put(\"ControllerResult\",\n          \"msg \" + _message.getMsgId() + \" from \" + _message.getMsgSrc() + \" processed\");\n      result.getTaskResultMap().put(SCHEDULER_MSG_ID, _message.getMsgId());\n      result.setSuccess(true);\n      return result;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/DefaultSchedulerMessageHandlerFactory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"cd552d9f122dbe3fa4b3648d38b2fc615f663b84","commitMessage":"@@@Replace org.codehaus.jackson with FasterXML.jackson (#1293)\n\nReplace org.codehaus.jackson with FasterXML.jackson","date":"2020-08-21 10:06:09","modifiedFileCount":"86","status":"M","submitter":"xyuanlu"}]
