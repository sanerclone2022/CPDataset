[{"authorTime":"2017-07-29 08:14:39","codes":[{"authorDate":"2017-07-29 08:14:39","commitOrder":3,"curCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","date":"2017-09-21 02:24:47","endLine":242,"groupId":"3425","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateStoppedQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/070d8f052ad7877587e265a93abb5e5abb7ba4.src","preCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"MB"},{"authorDate":"2017-07-29 08:14:39","commitOrder":3,"curCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n    int intervalSeconds = 3;\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    \r\n    workflowConfig.putSimpleConfig(WorkflowConfig.WorkflowConfigProperty.RecurrenceInterval.name(),\n        \"\" + intervalSeconds);\n    _driver.updateWorkflow(queueName, workflowConfig);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(intervalSeconds);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    final List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n      @Override public boolean verify() throws Exception {\n        WorkflowContext currentQueueCtx = _driver.getWorkflowContext(queueName);\n        if (currentQueueCtx == null) {\n          \r\n          for (String workflow : scheduledWorkflows) {\n            if (_driver.getWorkflowContext(workflow) != null) {\n              return false;\n            }\n          }\n          return true;\n        } else {\n          \r\n          \r\n          scheduledWorkflows.clear();\n          scheduledWorkflows.addAll(currentQueueCtx.getScheduledWorkflows());\n        }\n        return false;\n      }\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n  }\n","date":"2017-09-21 02:24:47","endLine":305,"groupId":"2391","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletingRecurrentQueueWithHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/070d8f052ad7877587e265a93abb5e5abb7ba4.src","preCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n    int intervalSeconds = 3;\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    \r\n    workflowConfig.putSimpleConfig(WorkflowConfig.WorkflowConfigProperty.RecurrenceInterval.name(),\n        \"\" + intervalSeconds);\n    _driver.updateWorkflow(queueName, workflowConfig);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(intervalSeconds);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    final List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n      @Override public boolean verify() throws Exception {\n        WorkflowContext currentQueueCtx = _driver.getWorkflowContext(queueName);\n        if (currentQueueCtx == null) {\n          \r\n          for (String workflow : scheduledWorkflows) {\n            if (_driver.getWorkflowContext(workflow) != null) {\n              return false;\n            }\n          }\n          return true;\n        } else {\n          \r\n          \r\n          scheduledWorkflows.clear();\n          scheduledWorkflows.addAll(currentQueueCtx.getScheduledWorkflows());\n        }\n        return false;\n      }\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"}],"commitId":"f8ee313ee5f6e0eb6fcbc584773f9ec3c1b01c6c","commitMessage":"@@@Record workflow scheduling history in recurrent workflows.\n\nAdd records of scheduling history.\nWhen deleting a recurrent workflow.  also remove all scheduled workflows that are finished.\n\nAlso add test case for deleting recurrent workflows with scheduling history.\n","date":"2017-09-21 02:24:47","modifiedFileCount":"3","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2017-02-11 09:28:40","codes":[{"authorDate":"2017-07-29 08:14:39","commitOrder":4,"curCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","date":"2017-09-21 02:24:47","endLine":242,"groupId":"3425","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateStoppedQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/070d8f052ad7877587e265a93abb5e5abb7ba4.src","preCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2017-02-11 09:28:40","commitOrder":4,"curCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n    int intervalSeconds = 3;\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    \r\n    workflowConfig.putSimpleConfig(WorkflowConfig.WorkflowConfigProperty.RecurrenceInterval.name(),\n        \"\" + intervalSeconds);\n    _driver.updateWorkflow(queueName, workflowConfig);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(intervalSeconds);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    final List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n    Assert.assertFalse(scheduledWorkflows.size() > 2);\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n      @Override public boolean verify() throws Exception {\n        WorkflowContext currentQueueCtx = _driver.getWorkflowContext(queueName);\n        if (currentQueueCtx == null) {\n          \r\n          for (String workflow : scheduledWorkflows) {\n            if (_driver.getWorkflowContext(workflow) != null) {\n              return false;\n            }\n          }\n          return true;\n        } else {\n          \r\n          \r\n          scheduledWorkflows.clear();\n          scheduledWorkflows.addAll(currentQueueCtx.getScheduledWorkflows());\n        }\n        return false;\n      }\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n  }\n","date":"2017-10-07 03:23:47","endLine":306,"groupId":"2391","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletingRecurrentQueueWithHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/53e18092537f2446d0719f65713cc267d4bed2.src","preCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n    int intervalSeconds = 3;\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    \r\n    workflowConfig.putSimpleConfig(WorkflowConfig.WorkflowConfigProperty.RecurrenceInterval.name(),\n        \"\" + intervalSeconds);\n    _driver.updateWorkflow(queueName, workflowConfig);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(intervalSeconds);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    final List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n      @Override public boolean verify() throws Exception {\n        WorkflowContext currentQueueCtx = _driver.getWorkflowContext(queueName);\n        if (currentQueueCtx == null) {\n          \r\n          for (String workflow : scheduledWorkflows) {\n            if (_driver.getWorkflowContext(workflow) != null) {\n              return false;\n            }\n          }\n          return true;\n        } else {\n          \r\n          \r\n          scheduledWorkflows.clear();\n          scheduledWorkflows.addAll(currentQueueCtx.getScheduledWorkflows());\n        }\n        return false;\n      }\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"}],"commitId":"1889699269597dd5cb8b10e2eb90dcbcf6c64622","commitMessage":"@@@Persist preference list into IdealState in full-auto mode and allow user to choose persisting either bestpossible or intermediate state mapping into the mapfield of IS.\n","date":"2017-10-07 03:23:47","modifiedFileCount":"8","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-07-29 08:14:39","commitOrder":5,"curCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","date":"2017-09-21 02:24:47","endLine":242,"groupId":"3425","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateStoppedQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/070d8f052ad7877587e265a93abb5e5abb7ba4.src","preCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(60000);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n    _driver.pollForWorkflowState(queueName, TaskState.STOPPED);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    List<String> scheduledWorkflows = new ArrayList<String>(wCtx.getScheduledWorkflows());\n    final String lastScheduledWorkflow = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n      @Override public boolean verify() throws Exception {\n        WorkflowContext wCtx = _driver.getWorkflowContext(queueName);\n        WorkflowContext lastWfCtx = _driver.getWorkflowContext(lastScheduledWorkflow);\n        return (wCtx == null && lastWfCtx == null);\n      }\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n\n    for (String scheduledWorkflow : scheduledWorkflows) {\n      WorkflowContext scheduledWorkflowCtx = _driver.getWorkflowContext(scheduledWorkflow);\n      WorkflowConfig scheduledWorkflowCfg = _driver.getWorkflowConfig(scheduledWorkflow);\n      Assert.assertNull(scheduledWorkflowCtx);\n      Assert.assertNull(scheduledWorkflowCfg);\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":294,"groupId":"3426","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletingRecurrentQueueWithHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c1/9e9200897ee33846473509f6739da61e365e0a.src","preCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n    int intervalSeconds = 3;\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    \r\n    workflowConfig.putSimpleConfig(WorkflowConfig.WorkflowConfigProperty.RecurrenceInterval.name(),\n        \"\" + intervalSeconds);\n    _driver.updateWorkflow(queueName, workflowConfig);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(intervalSeconds);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    final List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n    Assert.assertFalse(scheduledWorkflows.size() > 2);\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n      @Override public boolean verify() throws Exception {\n        WorkflowContext currentQueueCtx = _driver.getWorkflowContext(queueName);\n        if (currentQueueCtx == null) {\n          \r\n          for (String workflow : scheduledWorkflows) {\n            if (_driver.getWorkflowContext(workflow) != null) {\n              return false;\n            }\n          }\n          return true;\n        } else {\n          \r\n          \r\n          scheduledWorkflows.clear();\n          scheduledWorkflows.addAll(currentQueueCtx.getScheduledWorkflows());\n        }\n        return false;\n      }\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-03-29 03:31:25","codes":[{"authorDate":"2017-07-29 08:14:39","commitOrder":6,"curCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","date":"2017-09-21 02:24:47","endLine":242,"groupId":"3425","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateStoppedQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/070d8f052ad7877587e265a93abb5e5abb7ba4.src","preCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2019-03-29 03:31:25","commitOrder":6,"curCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(60000);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n    _driver.pollForWorkflowState(queueName, TaskState.STOPPED);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n    final String lastScheduledWorkflow = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n      @Override public boolean verify() throws Exception {\n        WorkflowContext wCtx = _driver.getWorkflowContext(queueName);\n        WorkflowContext lastWfCtx = _driver.getWorkflowContext(lastScheduledWorkflow);\n        return (wCtx == null && lastWfCtx == null);\n      }\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n\n    for (String scheduledWorkflow : scheduledWorkflows) {\n      WorkflowContext scheduledWorkflowCtx = _driver.getWorkflowContext(scheduledWorkflow);\n      WorkflowConfig scheduledWorkflowCfg = _driver.getWorkflowConfig(scheduledWorkflow);\n      Assert.assertNull(scheduledWorkflowCtx);\n      Assert.assertNull(scheduledWorkflowCfg);\n    }\n  }\n","date":"2019-03-29 03:31:25","endLine":302,"groupId":"3425","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletingRecurrentQueueWithHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6d/05d3848c91083ae807cfe9c3b974a9fa248221.src","preCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(60000);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n    _driver.pollForWorkflowState(queueName, TaskState.STOPPED);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    List<String> scheduledWorkflows = new ArrayList<String>(wCtx.getScheduledWorkflows());\n    final String lastScheduledWorkflow = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n      @Override public boolean verify() throws Exception {\n        WorkflowContext wCtx = _driver.getWorkflowContext(queueName);\n        WorkflowContext lastWfCtx = _driver.getWorkflowContext(lastScheduledWorkflow);\n        return (wCtx == null && lastWfCtx == null);\n      }\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n\n    for (String scheduledWorkflow : scheduledWorkflows) {\n      WorkflowContext scheduledWorkflowCtx = _driver.getWorkflowContext(scheduledWorkflow);\n      WorkflowConfig scheduledWorkflowCfg = _driver.getWorkflowConfig(scheduledWorkflow);\n      Assert.assertNull(scheduledWorkflowCtx);\n      Assert.assertNull(scheduledWorkflowCfg);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"0ad8af404908a54f7b98ee945bf2dda8e83f002f","commitMessage":"@@@TASK2.0: Job scheduling core pipeline fixes\n\nTask Framework 2.0 had stability issues and race conditions that weren't being handled correctly. Also.  integration with RuntimeJobDag had some loopholes that needed to be fixed. This diff includes such fixes and improvements that makes it really show performance gains and cuts down on redundant computation.\nChangelist:\n1. Race condition when a job is enqueued.  only the new JobConfig is updated and not the DAG\n    Add a two-way selective update which ensures consistency between JobConfigs and parent DAGs\n2. Moved where getNextJob() is called in scheduleJobs() in WorkflowDispatcher\n    This ensures that once a RuntimeJobDag is rebuilt.  update for jobs happens in one pipeline run.  which removes any extra delay or slowness\n3. Race condition where the job you got from getNextJob is for some reason not schedulable\n    This is due to deleting and enqueuing a job of the same name\n    RuntimeJobDag has the old job name.  which conflicts with the dependency in the new DAG\n    This fixes the test: TestTaskRebalancerStopResume so that it does not enqueue a job of the same name\n4. JobRebalancer was throwing an NPE when calling processJobStatusUpdateAndAssignment()\n    This was sometimes making the Controller hang\n    Added a null check for JobConfig (job could have been deleted/purged)\n5. Fix bug with isWorkflowStopped\n    TargetState comparison was done in the opposite way\n    This fixes the test: TestRecurringJobQueue's testDeletingRecurrentQueueWithHistory()\n    Sometimes contexts do not get deleted cleanly but this does not affect correctness\n6. Add TestEnqueueJobs\n7. Fix unstable TestGetLastScheduledTaskExecInfo\n8. Other minor style fixes\n","date":"2019-03-29 03:31:25","modifiedFileCount":"12","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-04-11 07:58:34","codes":[{"authorDate":"2017-07-29 08:14:39","commitOrder":7,"curCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","date":"2017-09-21 02:24:47","endLine":242,"groupId":"3425","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateStoppedQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/070d8f052ad7877587e265a93abb5e5abb7ba4.src","preCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2019-04-11 07:58:34","commitOrder":7,"curCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(60000L);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n    _driver.pollForWorkflowState(queueName, TaskState.STOPPED);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n    final String lastScheduledWorkflow = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    _driver.delete(queueName);\n\n    Thread.sleep(500L);\n    \r\n    boolean result = TestHelper.verify(() -> {\n      WorkflowContext wCtx1 = _driver.getWorkflowContext(queueName);\n      WorkflowContext lastWfCtx = _driver.getWorkflowContext(lastScheduledWorkflow);\n      return (wCtx1 == null && lastWfCtx == null);\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n\n    for (String scheduledWorkflow : scheduledWorkflows) {\n      WorkflowContext scheduledWorkflowCtx = _driver.getWorkflowContext(scheduledWorkflow);\n      WorkflowConfig scheduledWorkflowCfg = _driver.getWorkflowConfig(scheduledWorkflow);\n      Assert.assertNull(scheduledWorkflowCtx);\n      Assert.assertNull(scheduledWorkflowCfg);\n    }\n  }\n","date":"2019-05-25 09:19:21","endLine":298,"groupId":"5373","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletingRecurrentQueueWithHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/970a12f7be8dee7c5817ae15341f9af143b4e0.src","preCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(60000);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n    _driver.pollForWorkflowState(queueName, TaskState.STOPPED);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n    final String lastScheduledWorkflow = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    _driver.delete(queueName);\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n      @Override public boolean verify() throws Exception {\n        WorkflowContext wCtx = _driver.getWorkflowContext(queueName);\n        WorkflowContext lastWfCtx = _driver.getWorkflowContext(lastScheduledWorkflow);\n        return (wCtx == null && lastWfCtx == null);\n      }\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n\n    for (String scheduledWorkflow : scheduledWorkflows) {\n      WorkflowContext scheduledWorkflowCtx = _driver.getWorkflowContext(scheduledWorkflow);\n      WorkflowConfig scheduledWorkflowCfg = _driver.getWorkflowConfig(scheduledWorkflow);\n      Assert.assertNull(scheduledWorkflowCtx);\n      Assert.assertNull(scheduledWorkflowCfg);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"2457531e3361714d9b610a233298b63b50daacde","commitMessage":"@@@Fix TestRecurringJobQueue\n\nThis diff fixes TestRecurringJobQueue's testDeletingRecurrentQueueWithHistory\n\nRB=1627625\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"1","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-04-11 07:58:34","codes":[{"authorDate":"2020-05-05 01:37:43","commitOrder":8,"curCode":"  public void testCreateStoppedQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n      return wCtx.getLastScheduledSingleWorkflow() != null;\n    }, TestHelper.WAIT_DURATION));\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    _driver.pollForWorkflowState(wCtx.getLastScheduledSingleWorkflow(), TaskState.COMPLETED);\n  }\n","date":"2020-08-05 05:14:24","endLine":249,"groupId":"10530","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateStoppedQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/c53b14c82335b71d8f45216bff3b08c9e3e63e.src","preCode":"  public void testCreateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 600000,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2019-04-11 07:58:34","commitOrder":8,"curCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(60000L);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n    _driver.pollForWorkflowState(queueName, TaskState.STOPPED);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n    final String lastScheduledWorkflow = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    _driver.delete(queueName);\n\n    Thread.sleep(500L);\n    \r\n    boolean result = TestHelper.verify(() -> {\n      WorkflowContext wCtx1 = _driver.getWorkflowContext(queueName);\n      WorkflowContext lastWfCtx = _driver.getWorkflowContext(lastScheduledWorkflow);\n      return (wCtx1 == null && lastWfCtx == null);\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n\n    for (String scheduledWorkflow : scheduledWorkflows) {\n      WorkflowContext scheduledWorkflowCtx = _driver.getWorkflowContext(scheduledWorkflow);\n      WorkflowConfig scheduledWorkflowCfg = _driver.getWorkflowConfig(scheduledWorkflow);\n      Assert.assertNull(scheduledWorkflowCtx);\n      Assert.assertNull(scheduledWorkflowCfg);\n    }\n  }\n","date":"2019-05-25 09:19:21","endLine":298,"groupId":"10530","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletingRecurrentQueueWithHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/970a12f7be8dee7c5817ae15341f9af143b4e0.src","preCode":"  public void testDeletingRecurrentQueueWithHistory() throws Exception {\n    final String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60,\n        TargetState.STOP);\n    createAndEnqueueJob(queueBuild, 2);\n\n    _driver.createQueue(queueBuild.build());\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    WorkflowContext wCtx;\n    \r\n    do {\n      Thread.sleep(60000L);\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    } while (wCtx.getScheduledWorkflows().size() < 2);\n\n    \r\n    _driver.stop(queueName);\n    _driver.pollForWorkflowState(queueName, TaskState.STOPPED);\n\n    \r\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    List<String> scheduledWorkflows = new ArrayList<>(wCtx.getScheduledWorkflows());\n    final String lastScheduledWorkflow = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    _driver.delete(queueName);\n\n    Thread.sleep(500L);\n    \r\n    boolean result = TestHelper.verify(() -> {\n      WorkflowContext wCtx1 = _driver.getWorkflowContext(queueName);\n      WorkflowContext lastWfCtx = _driver.getWorkflowContext(lastScheduledWorkflow);\n      return (wCtx1 == null && lastWfCtx == null);\n    }, 5 * 1000);\n    Assert.assertTrue(result);\n\n    for (String scheduledWorkflow : scheduledWorkflows) {\n      WorkflowContext scheduledWorkflowCtx = _driver.getWorkflowContext(scheduledWorkflow);\n      WorkflowConfig scheduledWorkflowCfg = _driver.getWorkflowConfig(scheduledWorkflow);\n      Assert.assertNull(scheduledWorkflowCtx);\n      Assert.assertNull(scheduledWorkflowCfg);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"N"}],"commitId":"813e49ec8816d6fa2794353155891d341a2512c1","commitMessage":"@@@Fix the flaky test TestRecurringJobQueue.testCreateStoppedQueue (#983)\n\nIn this commit.  the necessary checks have been added to make sure\nwe do not hit NullPointerException when checking LastScheduledWorkflow.","date":"2020-08-05 05:14:24","modifiedFileCount":"1","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"}]
