[{"authorTime":"2020-06-06 10:55:06","codes":[{"authorDate":"2020-06-06 10:55:06","commitOrder":2,"curCode":"  private Stat getStat(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    final Stat stat;\n    try {\n      stat = retryUntilConnected(\n          () -> ((ZkConnection) getConnection()).getZookeeper().exists(path, watch));\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return stat;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"exists, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","date":"2020-06-25 06:08:23","endLine":1102,"groupId":"7118","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getStat","params":"(finalStringpath@finalbooleanwatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b7/98fbe13d078e034f5b1a53c8259170599d948d.src","preCode":"  private Stat getStat(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    final Stat stat;\n    try {\n      stat = retryUntilConnected(\n          () -> ((ZkConnection) getConnection()).getZookeeper().exists(path, watch));\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return stat;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"exists, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1085,"status":"MB"},{"authorDate":"2020-06-06 10:55:06","commitOrder":2,"curCode":"  private Stat installWatchOnlyPathExist(final String path) {\n    long startT = System.currentTimeMillis();\n    final Stat stat;\n    try {\n        stat = new Stat();\n        try {\n          LOG.debug(\"installWatchOnlyPathExist with path: {} \", path);\n          retryUntilConnected(() -> ((ZkConnection) getConnection()).getZookeeper().getData(path, true, stat));\n        } catch (ZkNoNodeException e) {\n          LOG.debug(\"installWatchOnlyPathExist path not existing: {}\", path);\n          record(path, null, startT, ZkClientMonitor.AccessType.READ);\n          return null;\n        }\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return stat;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"getData (installWatchOnlyPathExist), path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","date":"2020-06-25 06:08:23","endLine":1131,"groupId":"3897","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"installWatchOnlyPathExist","params":"(finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b7/98fbe13d078e034f5b1a53c8259170599d948d.src","preCode":"  private Stat installWatchOnlyPathExist(final String path) {\n    long startT = System.currentTimeMillis();\n    final Stat stat;\n    try {\n        stat = new Stat();\n        try {\n          LOG.debug(\"installWatchOnlyPathExist with path: {} \", path);\n          retryUntilConnected(() -> ((ZkConnection) getConnection()).getZookeeper().getData(path, true, stat));\n        } catch (ZkNoNodeException e) {\n          LOG.debug(\"installWatchOnlyPathExist path not existing: {}\", path);\n          record(path, null, startT, ZkClientMonitor.AccessType.READ);\n          return null;\n        }\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return stat;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"getData (installWatchOnlyPathExist), path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1107,"status":"B"}],"commitId":"842bf1f9290cf30e946ff2bc8377b3e2f6014554","commitMessage":"@@@Fix leaking Zk path watch and Callbackhandler issue (#1035)\n\nShort term fix #1034. Get rid of dangling CallbackHandlers and its\nrelated current state parent path in Zookeeper. Get rid of leaking\nof current state znode path due to async nature of deletion of\ncurrent state znode path to installatio of watcher in various\nthread in Helix.","date":"2020-06-25 06:08:23","modifiedFileCount":"10","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-09-24 05:46:09","codes":[{"authorDate":"2020-09-24 05:46:09","commitOrder":3,"curCode":"  private Stat getStat(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    final Stat stat;\n    try {\n      stat = retryUntilConnected(\n          () -> ((ZkConnection) getConnection()).getZookeeper().exists(path, watch));\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return stat;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"zkclient exists, path: {}, time: {} ms\", _uid, path, (endT - startT));\n      }\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":1152,"groupId":"101020","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getStat","params":"(finalStringpath@finalbooleanwatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/18/0fcdd4e9b16b81a61745538a443b9382a8b461.src","preCode":"  private Stat getStat(final String path, final boolean watch) {\n    long startT = System.currentTimeMillis();\n    final Stat stat;\n    try {\n      stat = retryUntilConnected(\n          () -> ((ZkConnection) getConnection()).getZookeeper().exists(path, watch));\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return stat;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"exists, path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1135,"status":"M"},{"authorDate":"2020-09-24 05:46:09","commitOrder":3,"curCode":"  private Stat installWatchOnlyPathExist(final String path) {\n    long startT = System.currentTimeMillis();\n    final Stat stat;\n    try {\n        stat = new Stat();\n        try {\n          LOG.debug(\"installWatchOnlyPathExist with path: {} \", path);\n          retryUntilConnected(() -> ((ZkConnection) getConnection()).getZookeeper().getData(path, true, stat));\n        } catch (ZkNoNodeException e) {\n          LOG.debug(\"installWatchOnlyPathExist path not existing: {}\", path);\n          record(path, null, startT, ZkClientMonitor.AccessType.READ);\n          return null;\n        }\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return stat;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"zkclient getData (installWatchOnlyPathExist), path: {}, time: {} ms\",\n            _uid, path, (endT - startT));\n      }\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":1182,"groupId":"101020","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"installWatchOnlyPathExist","params":"(finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/18/0fcdd4e9b16b81a61745538a443b9382a8b461.src","preCode":"  private Stat installWatchOnlyPathExist(final String path) {\n    long startT = System.currentTimeMillis();\n    final Stat stat;\n    try {\n        stat = new Stat();\n        try {\n          LOG.debug(\"installWatchOnlyPathExist with path: {} \", path);\n          retryUntilConnected(() -> ((ZkConnection) getConnection()).getZookeeper().getData(path, true, stat));\n        } catch (ZkNoNodeException e) {\n          LOG.debug(\"installWatchOnlyPathExist path not existing: {}\", path);\n          record(path, null, startT, ZkClientMonitor.AccessType.READ);\n          return null;\n        }\n      record(path, null, startT, ZkClientMonitor.AccessType.READ);\n      return stat;\n    } catch (Exception e) {\n      recordFailure(path, ZkClientMonitor.AccessType.READ);\n      throw e;\n    } finally {\n      long endT = System.currentTimeMillis();\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"getData (installWatchOnlyPathExist), path: \" + path + \", time: \" + (endT - startT) + \" ms\");\n      }\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1157,"status":"M"}],"commitId":"7028bf36a45b2c03d92193ef69d74324171db73d","commitMessage":"@@@Enhance logging for CallbackHandler and Zkclient (#1355)\n\nThis commit adds a unique id to each method's logging to help the\ncorrelation and track the callback handler and zkClient's life cycle.","date":"2020-09-24 05:46:09","modifiedFileCount":"2","status":"M","submitter":"kaisun2000"}]
