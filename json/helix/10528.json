[{"authorTime":"2015-03-20 16:52:41","codes":[{"authorDate":"2015-06-10 05:40:32","commitOrder":2,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2015-06-18 02:10:26","endLine":321,"groupId":"7025","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/01/1ed81cb5e73d0503c751e4058e36ff556070c3.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"B"},{"authorDate":"2015-03-20 16:52:41","commitOrder":2,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2015-03-20 16:52:41","endLine":469,"groupId":"7025","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fd/709d8959551f1115d09aa76d5fe9f8e2f91000.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"NB"}],"commitId":"2775e1566df7ceb67edd7587b81d4c245aedab38","commitMessage":"@@@[HELIX-600] Task scheduler fails to schedule a recurring workflow if the startTime is set to a future timestamp.\n","date":"2015-06-18 02:10:26","modifiedFileCount":"2","status":"M","submitter":"Lei Xia"},{"authorTime":"2015-03-20 16:52:41","codes":[{"authorDate":"2015-07-14 09:03:33","commitOrder":3,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2015-07-29 12:20:56","endLine":331,"groupId":"6448","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/46/56a2357a482f1b38ebdcddd9e60fcafc3f373a.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2015-03-20 16:52:41","commitOrder":3,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2015-03-20 16:52:41","endLine":469,"groupId":"7025","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fd/709d8959551f1115d09aa76d5fe9f8e2f91000.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"}],"commitId":"b72ff29d1fc2845affb9ee943396424c5a7e5721","commitMessage":"@@@[Helix-606] Add an option in IdealState to allow a resource to disable showing external view.\n\nAdd an option in IdealState to allow a resource to choose not showing external view. This will add flexibility for some resources that the client or application does not care about its external view (such as scheduled jobs).  and reduces the ZK traffic when there are a large number of external view listeners.\n","date":"2015-07-29 12:20:56","modifiedFileCount":"9","status":"M","submitter":"Lei Xia"},{"authorTime":"2015-03-20 16:52:41","codes":[{"authorDate":"2015-11-21 07:54:34","commitOrder":4,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2015-11-21 07:54:34","endLine":359,"groupId":"6448","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/c91137209c1cbba1de1e98397bc25789e2f427.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"},{"authorDate":"2015-03-20 16:52:41","commitOrder":4,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2015-03-20 16:52:41","endLine":469,"groupId":"7025","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fd/709d8959551f1115d09aa76d5fe9f8e2f91000.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"}],"commitId":"7bbb20be67a939a57f33d8f6d7c814b1dc246575","commitMessage":"@@@[HELIX-616] Change JobQueue to be subclass of Workflow instead of WorkflowConfig.\n","date":"2015-11-21 07:54:34","modifiedFileCount":"9","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-02-11 08:33:08","codes":[{"authorDate":"2016-02-11 08:33:08","commitOrder":5,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-04-14 01:43:23","endLine":318,"groupId":"6448","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/21ef73a78723c67114d30bc8937d76ca024be9.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"},{"authorDate":"2016-02-11 08:33:08","commitOrder":5,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-04-14 01:43:23","endLine":466,"groupId":"7025","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b6/7fa90391345d2cfb9171ba8bee857ac3fe73f0.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\")\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"}],"commitId":"d381a3a1cc69d129388896907b9cc696811650c7","commitMessage":"@@@Clean up unit tests for task framework.\n","date":"2016-04-14 01:43:23","modifiedFileCount":"9","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-01-20 10:15:07","codes":[{"authorDate":"2016-02-11 08:33:08","commitOrder":6,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-04-14 01:43:23","endLine":318,"groupId":"6448","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/21ef73a78723c67114d30bc8937d76ca024be9.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"},{"authorDate":"2016-01-20 10:15:07","commitOrder":6,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 05:33:42","endLine":456,"groupId":"7025","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/47/1d1301f2b9129d81154543efdcc8afb2b2d7ff.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      _driver.enqueueJob(queueName, jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"}],"commitId":"760f8e3caca39aeb53a171303ec24334cd59bf47","commitMessage":"@@@Fix task framework unit tests.\n","date":"2016-07-06 05:33:42","modifiedFileCount":"3","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-02-24 09:32:35","codes":[{"authorDate":"2016-02-24 09:32:35","commitOrder":7,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 05:44:32","endLine":315,"groupId":"6448","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/3d52dc89eea62e1af27c6cd586136f25e14126.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2016-02-24 09:32:35","commitOrder":7,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 05:44:32","endLine":455,"groupId":"7025","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/30/cb46064ce1c4d2d2e67f4de4e0d4a2f82b670c.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_manager, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_manager, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = TaskUtil.getJobContext(_manager, namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"}],"commitId":"579d82fd2aa8fdce8ec0e0c4d6da73cb8209729d","commitMessage":"@@@Refactor TaskUtil class to move as many as methods out of the class.  and make other methods in it as internal API as possible. Expose necessary APIs in TaskDriver instead.\n","date":"2016-07-06 05:44:32","modifiedFileCount":"16","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-02-24 09:32:35","codes":[{"authorDate":"2016-07-06 06:58:51","commitOrder":8,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 07:14:30","endLine":200,"groupId":"6448","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/65/ec458561dd37361299b986e3bff6e97ce33200.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2016-02-24 09:32:35","commitOrder":8,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 05:44:32","endLine":455,"groupId":"7025","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/30/cb46064ce1c4d2d2e67f4de4e0d4a2f82b670c.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"N"}],"commitId":"7f184839aebcb817e3c9b0626bcc2a9b44c6926c","commitMessage":"@@@Add a new task state (TASK_ABORTED) to TaskResult. This allows client to abort a task and let Helix not retry it even Task.RetryCount is bigger than 1.\n","date":"2016-07-06 07:14:30","modifiedFileCount":"10","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-05-11 02:44:25","codes":[{"authorDate":"2016-05-11 02:44:25","commitOrder":9,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 07:21:13","endLine":196,"groupId":"7036","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4d/4d96ab9716f4f6822905e56dc14746d84379f0.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n            TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2016-05-11 02:44:25","commitOrder":9,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 07:21:13","endLine":352,"groupId":"3409","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8e/1f47d4bf73c329ea125d790ad076a4edf27cd3.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    TaskTestUtil\n        .pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"}],"commitId":"183a26ae7857a7c35985b14df9742ba3f4a06566","commitMessage":"@@@Add pollForJobState and pollForWorkflowState function in TaskDriver\n\n1. Add pollForJobState and pollForWorkflowState functions in TaskDriver\n2. Add unit tests for poll completed states for those tasks.\n3. Refactor all tests using new functions.\n","date":"2016-07-06 07:21:13","modifiedFileCount":"20","status":"M","submitter":"Junkai Xue"},{"authorTime":"2016-05-11 02:44:25","codes":[{"authorDate":"2017-05-17 07:39:21","commitOrder":10,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2017-05-23 09:44:35","endLine":197,"groupId":"7036","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/49/83ed37b90fae6e92e1d3e02e985db63f1ba51e.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2016-05-11 02:44:25","commitOrder":10,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 07:21:13","endLine":352,"groupId":"3409","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8e/1f47d4bf73c329ea125d790ad076a4edf27cd3.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"N"}],"commitId":"8cf80a9f862ca0462001ca41e8d2929dd20aee1e","commitMessage":"@@@Test fixes for release\n","date":"2017-05-23 09:44:35","modifiedFileCount":"7","status":"M","submitter":"Junkai Xue"},{"authorTime":"2016-05-11 02:44:25","codes":[{"authorDate":"2017-07-29 08:14:39","commitOrder":11,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    List<String> currentJobNames = createAndEnqueueJob(queueBuilder, 5);\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2017-09-21 02:24:47","endLine":164,"groupId":"7036","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/070d8f052ad7877587e265a93abb5e5abb7ba4.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2016-05-11 02:44:25","commitOrder":11,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 07:21:13","endLine":352,"groupId":"3409","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8e/1f47d4bf73c329ea125d790ad076a4edf27cd3.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"N"}],"commitId":"f8ee313ee5f6e0eb6fcbc584773f9ec3c1b01c6c","commitMessage":"@@@Record workflow scheduling history in recurrent workflows.\n\nAdd records of scheduling history.\nWhen deleting a recurrent workflow.  also remove all scheduled workflows that are finished.\n\nAlso add test case for deleting recurrent workflows with scheduling history.\n","date":"2017-09-21 02:24:47","modifiedFileCount":"3","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2016-05-11 02:44:25","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":12,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    List<String> currentJobNames = createAndEnqueueJob(queueBuilder, 5);\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2017-11-08 08:48:26","endLine":163,"groupId":"7036","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c1/9e9200897ee33846473509f6739da61e365e0a.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    List<String> currentJobNames = createAndEnqueueJob(queueBuilder, 5);\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2016-05-11 02:44:25","commitOrder":12,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2016-07-06 07:21:13","endLine":352,"groupId":"3409","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8e/1f47d4bf73c329ea125d790ad076a4edf27cd3.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"N"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-04-21 07:11:27","codes":[{"authorDate":"2018-04-21 07:11:27","commitOrder":13,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.JOB_DELAY, String.valueOf(500));\n    Thread.sleep(100);\n    List<String> currentJobNames = createAndEnqueueJob(queueBuilder, 5);\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2018-04-25 03:45:43","endLine":164,"groupId":"7036","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/69453e0fe4562f57b549d313388b4ce3d5e4cb.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n    Thread.sleep(100);\n    List<String> currentJobNames = createAndEnqueueJob(queueBuilder, 5);\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2018-04-21 07:11:27","commitOrder":13,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.JOB_DELAY, String.valueOf(200));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2018-04-25 03:45:43","endLine":358,"groupId":"3409","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2f/5445b87e2b1f67d5c7f90f111c18320a95a8c0.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"d2fb22d1f3a3db602b27cba7ed8d814cb931622e","commitMessage":"@@@Fix a few of unstable integration tests.\n","date":"2018-04-25 03:45:43","modifiedFileCount":"18","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-21 07:11:27","codes":[{"authorDate":"2018-09-13 09:31:38","commitOrder":14,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.JOB_DELAY, String.valueOf(500));\n    Thread.sleep(100);\n    List<String> currentJobNames = createAndEnqueueJob(queueBuilder, 5);\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = null;\n    String scheduledQueue = null;\n\n    while (scheduledQueue == null) {\n      wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n      scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    }\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2018-10-30 09:05:06","endLine":168,"groupId":"10528","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/ba70a7065341057d9553ebddec4ce4372350d7.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName, 5);\n\n    \r\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.JOB_DELAY, String.valueOf(500));\n    Thread.sleep(100);\n    List<String> currentJobNames = createAndEnqueueJob(queueBuilder, 5);\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS,\n        TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2018-04-21 07:11:27","commitOrder":14,"curCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.JOB_DELAY, String.valueOf(200));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","date":"2018-04-25 03:45:43","endLine":358,"groupId":"10528","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"stopDeleteJobAndResumeRecurrentQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2f/5445b87e2b1f67d5c7f90f111c18320a95a8c0.src","preCode":"  public void stopDeleteJobAndResumeRecurrentQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.JOB_DELAY, String.valueOf(200));\n    for (int i = 0; i <= 4; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n              .setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n      LOG.info(\"Enqueuing job: \" + jobName);\n      queueBuilder.enqueueJob(jobName, job);\n      currentJobNames.add(i, jobName);\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String deletedJob1 = currentJobNames.get(0);\n    String namedSpaceDeletedJob1 = String.format(\"%s_%s\", scheduledQueue, deletedJob1);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + scheduledQueue);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue, namedSpaceDeletedJob1, TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob1);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob1);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob1);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.IN_PROGRESS);\n\n    \r\n    LOG.info(\"Pausing job-queue: \" + queueName);\n    _driver.stop(queueName);\n    _driver.pollForJobState(scheduledQueue,\n        String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(1)), TaskState.STOPPED);\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.STOPPED);\n\n    \r\n    String deletedJob2 = currentJobNames.get(2);\n    String namedSpaceDeletedJob2 = String.format(\"%s_%s\", scheduledQueue, deletedJob2);\n    TaskTestUtil.pollForEmptyJobState(_driver, scheduledQueue, namedSpaceDeletedJob2);\n\n    \r\n    _driver.deleteJob(queueName, deletedJob2);\n    verifyJobDeleted(queueName, namedSpaceDeletedJob2);\n    verifyJobDeleted(scheduledQueue, namedSpaceDeletedJob2);\n\n    LOG.info(\"Resuming job-queue: \" + queueName);\n    _driver.resume(queueName);\n\n    \r\n    currentJobNames.remove(deletedJob1);\n    currentJobNames.remove(deletedJob2);\n    long preJobFinish = 0;\n    for (int i = 0; i < currentJobNames.size(); i++) {\n      String namedSpaceJobName = String.format(\"%s_%s\", scheduledQueue, currentJobNames.get(i));\n      _driver.pollForJobState(scheduledQueue, namedSpaceJobName, TaskState.COMPLETED);\n\n      JobContext jobContext = _driver.getJobContext(namedSpaceJobName);\n      long jobStart = jobContext.getStartTime();\n      Assert.assertTrue(jobStart >= preJobFinish);\n      preJobFinish = jobContext.getFinishTime();\n    }\n    \r\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"N"}],"commitId":"0c3ac37b0b442f20d08eaba86da7d94ec1494d1f","commitMessage":"@@@Refactor WorkflowRebalancer to WorkflowHandler\n\nCurrent WorkflowRebalancer is a little bit messing that mixing workflow update and scheduling logic together. Refactor WorklfowRebalancer to WorkflowHandler which will schedule and update the status of the workflow independent from each other.\n\nAlso remove the redundant logics in existing pipeline.\n","date":"2018-10-30 09:05:06","modifiedFileCount":"7","status":"M","submitter":"Junkai Xue"}]
