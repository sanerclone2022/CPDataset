[{"authorTime":"2013-08-17 04:53:40","codes":[{"authorDate":"2013-08-17 04:53:40","commitOrder":1,"curCode":"  public void testSyncRemove()\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n    \n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    \n    boolean success = accessor.remove(path, 0);\n    Assert.assertFalse(success);\n    \n    success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n    Assert.assertFalse(_gZkClient.exists(path));\n    \n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-17 04:53:40","endLine":264,"groupId":"608","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSyncRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b1/2010582106956cb88c2303a9e00d034af8752e.src","preCode":"  public void testSyncRemove()\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n    \n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    \n    boolean success = accessor.remove(path, 0);\n    Assert.assertFalse(success);\n    \n    success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n    Assert.assertFalse(_gZkClient.exists(path));\n    \n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"B"},{"authorDate":"2013-08-17 04:53:40","commitOrder":1,"curCode":"  public void testSyncExist()\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n    \n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    \n    boolean success = accessor.exists(path, 0);\n    Assert.assertFalse(success);\n    \n    success = accessor.create(path, record, AccessOption.EPHEMERAL);\n    Assert.assertTrue(success);\n    \n    success = accessor.exists(path, 0);\n    Assert.assertTrue(success);\n    \n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-08-17 04:53:40","endLine":351,"groupId":"4592","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSyncExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b1/2010582106956cb88c2303a9e00d034af8752e.src","preCode":"  public void testSyncExist()\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n    \n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    \n    boolean success = accessor.exists(path, 0);\n    Assert.assertFalse(success);\n    \n    success = accessor.create(path, record, AccessOption.EPHEMERAL);\n    Assert.assertTrue(success);\n    \n    success = accessor.exists(path, 0);\n    Assert.assertTrue(success);\n    \n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"B"}],"commitId":"4a46ae055a877737c8eeda63e7c0917d48dc9d2b","commitMessage":"@@@[HELIX-210] Add support to set data with expect version in BaseDataAccessor.  rb=13581\n","date":"2013-08-17 04:53:40","modifiedFileCount":"6","status":"B","submitter":"zzhang"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testSyncRemove() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.remove(path, 0);\n    Assert.assertFalse(success);\n\n    success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n    Assert.assertFalse(_gZkClient.exists(path));\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":262,"groupId":"608","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSyncRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/7b9735c791b3f86a83a7ba7ab2cf5594075d9e.src","preCode":"  public void testSyncRemove() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.remove(path, 0);\n    Assert.assertFalse(success);\n\n    success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n    Assert.assertFalse(_gZkClient.exists(path));\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testSyncExist() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.exists(path, 0);\n    Assert.assertFalse(success);\n\n    success = accessor.create(path, record, AccessOption.EPHEMERAL);\n    Assert.assertTrue(success);\n\n    success = accessor.exists(path, 0);\n    Assert.assertTrue(success);\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 02:20:49","endLine":346,"groupId":"6457","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSyncExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/7b9735c791b3f86a83a7ba7ab2cf5594075d9e.src","preCode":"  public void testSyncExist() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.exists(path, 0);\n    Assert.assertFalse(success);\n\n    success = accessor.create(path, record, AccessOption.EPHEMERAL);\n    Assert.assertTrue(success);\n\n    success = accessor.exists(path, 0);\n    Assert.assertTrue(success);\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-08-29 03:18:27","commitOrder":3,"curCode":"  public void testSyncRemove() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    \r\n    boolean success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n\n    success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n    Assert.assertFalse(_gZkClient.exists(path));\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-10-30 04:47:54","endLine":261,"groupId":"110","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSyncRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/67/1ce8009a448e0cb6ddcb5525f2ced4b23cfa62.src","preCode":"  public void testSyncRemove() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.remove(path, 0);\n    Assert.assertFalse(success);\n\n    success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n    Assert.assertFalse(_gZkClient.exists(path));\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  public void testSyncExist() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.exists(path, 0);\n    Assert.assertFalse(success);\n\n    success = accessor.create(path, record, AccessOption.EPHEMERAL);\n    Assert.assertTrue(success);\n\n    success = accessor.exists(path, 0);\n    Assert.assertTrue(success);\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 02:20:49","endLine":346,"groupId":"6457","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSyncExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/7b9735c791b3f86a83a7ba7ab2cf5594075d9e.src","preCode":"  public void testSyncExist() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.exists(path, 0);\n    Assert.assertFalse(success);\n\n    success = accessor.create(path, record, AccessOption.EPHEMERAL);\n    Assert.assertTrue(success);\n\n    success = accessor.exists(path, 0);\n    Assert.assertTrue(success);\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"}],"commitId":"a6863937c7d404ffdf703d8f2f7a0735b41ea197","commitMessage":"@@@HELIX-1269: improve semantics for BaseDataAccessor.remove()\n","date":"2018-10-30 04:47:54","modifiedFileCount":"2","status":"M","submitter":"Harry Zhang"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2020-04-14 04:25:20","commitOrder":4,"curCode":"  public void testSyncRemove() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    \r\n    boolean success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n\n    success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    \r\n    \r\n    RealmAwareZkClient mockZkClient = Mockito.mock(RealmAwareZkClient.class);\n    Mockito.doThrow(new ZkException(\"Failed to delete \" + path)).when(mockZkClient)\n        .delete(path);\n    Mockito.doThrow(new ZkClientException(\"Failed to recursively delete \" + path)).when(mockZkClient)\n        .deleteRecursively(path);\n    ZkBaseDataAccessor<ZNRecord> accessorMock =\n        new ZkBaseDataAccessor<>(mockZkClient);\n    try {\n      Assert.assertFalse(accessorMock.remove(path, AccessOption.PERSISTENT),\n          \"Should return false because ZkClientException is thrown\");\n    } catch (ZkClientException e) {\n      Assert.fail(\"Should not throw ZkClientException because it should be caught.\");\n    }\n\n    success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n    Assert.assertFalse(_gZkClient.exists(path));\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-04-14 09:51:08","endLine":371,"groupId":"10249","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSyncRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9e/56b6e0be8a3f9dd05f0c6a5053943e4beed384.src","preCode":"  public void testSyncRemove() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    \r\n    boolean success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n\n    success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    success = accessor.remove(path, 0);\n    Assert.assertTrue(success);\n    Assert.assertFalse(_gZkClient.exists(path));\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void testSyncExist() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.exists(path, 0);\n    Assert.assertFalse(success);\n\n    success = accessor.create(path, record, AccessOption.EPHEMERAL);\n    Assert.assertTrue(success);\n\n    success = accessor.exists(path, 0);\n    Assert.assertTrue(success);\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 02:20:49","endLine":346,"groupId":"10249","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSyncExist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/7b9735c791b3f86a83a7ba7ab2cf5594075d9e.src","preCode":"  public void testSyncExist() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.exists(path, 0);\n    Assert.assertFalse(success);\n\n    success = accessor.create(path, record, AccessOption.EPHEMERAL);\n    Assert.assertTrue(success);\n\n    success = accessor.exists(path, 0);\n    Assert.assertTrue(success);\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"}],"commitId":"4dcf624777786fadcad5ed71471db27a775e36eb","commitMessage":"@@@Fix TestCrushAutoRebalanceNonRack failure of dropping instance\n","date":"2020-04-14 09:51:08","modifiedFileCount":"5","status":"M","submitter":"Huizhi Lu"}]
