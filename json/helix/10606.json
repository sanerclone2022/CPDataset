[{"authorTime":"2014-03-07 07:37:49","codes":[{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testResetPartitionState() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    try {\n      String command =\n          \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n              + \" localhost_12918 TestDB0 TestDB0_nonExist\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a non-exist partition\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    errPartitions.remove(\"SLAVE-MASTER\");\n    participants[0].setTransition(new ErrTransitionWithResetCnt(errPartitions));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_4\");\n    _errToOfflineInvoked = 0;\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_4\";\n\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Thread.sleep(200); \r\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a partition not in ERROR state\");\n    } catch (Exception e) {\n      \r\n    }\n\n    errStateMap.get(\"TestDB0\").remove(\"TestDB0_4\");\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 1);\n\n    \r\n    participants[0].setTransition(new ErrTransitionWithResetCnt(null));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_8\");\n\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_8\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 2, \"Should reset 2 partitions\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":180,"groupId":"7073","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetPartitionState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/7a5ea7220779895c0379b7681ba41931a6284a.src","preCode":"  public void testResetPartitionState() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    try {\n      String command =\n          \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n              + \" localhost_12918 TestDB0 TestDB0_nonExist\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a non-exist partition\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    errPartitions.remove(\"SLAVE-MASTER\");\n    participants[0].setTransition(new ErrTransitionWithResetCnt(errPartitions));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_4\");\n    _errToOfflineInvoked = 0;\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_4\";\n\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Thread.sleep(200); \r\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a partition not in ERROR state\");\n    } catch (Exception e) {\n      \r\n    }\n\n    errStateMap.get(\"TestDB0\").remove(\"TestDB0_4\");\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 1);\n\n    \r\n    participants[0].setTransition(new ErrTransitionWithResetCnt(null));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_8\");\n\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_8\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 2, \"Should reset 2 partitions\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetPartitionState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"NB"},{"authorDate":"2014-03-07 07:37:49","commitOrder":3,"curCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName); \n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String resourceName = \"TestDB0\";\n    String resourceUrl =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceName;\n\n    Map<String, String> paramMap = new HashMap<String, String>();\n    paramMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.resetResource);\n    TestHelixAdminScenariosRest.assertSuccessPostOperation(resourceUrl, paramMap, false);\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-03-07 09:50:46","endLine":117,"groupId":"7073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/64/ed24908807b5bfe2ba966aa8d1aa5f94ea7c8c.src","preCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName); \n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String resourceName = \"TestDB0\";\n    String resourceUrl =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceName;\n\n    Map<String, String> paramMap = new HashMap<String, String>();\n    paramMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.resetResource);\n    TestHelixAdminScenariosRest.assertSuccessPostOperation(resourceUrl, paramMap, false);\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestResetResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"}],"commitId":"24eacbc92f03b1b71528861a6b1ecf473c8c5231","commitMessage":"@@@[HELIX-398] Prevent helix-admin-webapp from running helix-core tests\n","date":"2014-03-07 09:50:46","modifiedFileCount":"1","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2014-03-07 07:37:49","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void testResetPartitionState() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    try {\n      String command =\n          \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n              + \" localhost_12918 TestDB0 TestDB0_nonExist\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a non-exist partition\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    errPartitions.remove(\"SLAVE-MASTER\");\n    participants[0].setTransition(new ErrTransitionWithResetCnt(errPartitions));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_4\");\n    _errToOfflineInvoked = 0;\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_4\";\n\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Thread.sleep(200); \r\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a partition not in ERROR state\");\n    } catch (Exception e) {\n      \r\n    }\n\n    errStateMap.get(\"TestDB0\").remove(\"TestDB0_4\");\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 1);\n\n    \r\n    participants[0].setTransition(new ErrTransitionWithResetCnt(null));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_8\");\n\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_8\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 2, \"Should reset 2 partitions\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 02:20:49","endLine":182,"groupId":"7073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetPartitionState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c1/e92a60a8fe3b8c478a448ef4b1534691740493.src","preCode":"  public void testResetPartitionState() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    try {\n      String command =\n          \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n              + \" localhost_12918 TestDB0 TestDB0_nonExist\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a non-exist partition\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    errPartitions.remove(\"SLAVE-MASTER\");\n    participants[0].setTransition(new ErrTransitionWithResetCnt(errPartitions));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_4\");\n    _errToOfflineInvoked = 0;\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_4\";\n\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Thread.sleep(200); \r\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a partition not in ERROR state\");\n    } catch (Exception e) {\n      \r\n    }\n\n    errStateMap.get(\"TestDB0\").remove(\"TestDB0_4\");\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 1);\n\n    \r\n    participants[0].setTransition(new ErrTransitionWithResetCnt(null));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_8\");\n\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_8\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 2, \"Should reset 2 partitions\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetPartitionState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2014-03-07 07:37:49","commitOrder":4,"curCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName); \n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String resourceName = \"TestDB0\";\n    String resourceUrl =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceName;\n\n    Map<String, String> paramMap = new HashMap<String, String>();\n    paramMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.resetResource);\n    TestHelixAdminScenariosRest.assertSuccessPostOperation(resourceUrl, paramMap, false);\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-03-07 09:50:46","endLine":117,"groupId":"7073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/64/ed24908807b5bfe2ba966aa8d1aa5f94ea7c8c.src","preCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName); \n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String resourceName = \"TestDB0\";\n    String resourceUrl =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceName;\n\n    Map<String, String> paramMap = new HashMap<String, String>();\n    paramMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.resetResource);\n    TestHelixAdminScenariosRest.assertSuccessPostOperation(resourceUrl, paramMap, false);\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestResetResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2014-03-07 07:37:49","codes":[{"authorDate":"2018-06-19 01:21:53","commitOrder":5,"curCode":"  public void testResetPartitionState() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    try {\n      String command =\n          \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n              + \" localhost_12918 TestDB0 TestDB0_nonExist\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a non-exist partition\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    errPartitions.remove(\"SLAVE-MASTER\");\n    participants[0].setTransition(new ErrTransitionWithResetCnt(errPartitions));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_4\");\n    _errToOfflineInvoked = 0;\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_4\";\n\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Thread.sleep(200); \r\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a partition not in ERROR state\");\n    } catch (Exception e) {\n      \r\n    }\n\n    errStateMap.get(\"TestDB0\").remove(\"TestDB0_4\");\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 1);\n\n    \r\n    participants[0].setTransition(new ErrTransitionWithResetCnt(null));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_8\");\n\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_8\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 2, \"Should reset 2 partitions\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 06:57:09","endLine":181,"groupId":"10606","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetPartitionState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/06/fbdd4ae95d38142e690d0c4ece9b002e7f5507.src","preCode":"  public void testResetPartitionState() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    try {\n      String command =\n          \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n              + \" localhost_12918 TestDB0 TestDB0_nonExist\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a non-exist partition\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    errPartitions.remove(\"SLAVE-MASTER\");\n    participants[0].setTransition(new ErrTransitionWithResetCnt(errPartitions));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_4\");\n    _errToOfflineInvoked = 0;\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_4\";\n\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Thread.sleep(200); \r\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"Should throw exception on reset a partition not in ERROR state\");\n    } catch (Exception e) {\n      \r\n    }\n\n    errStateMap.get(\"TestDB0\").remove(\"TestDB0_4\");\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 1);\n\n    \r\n    participants[0].setTransition(new ErrTransitionWithResetCnt(null));\n    clearStatusUpdate(clusterName, \"localhost_12918\", \"TestDB0\", \"TestDB0_8\");\n\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --resetPartition \" + clusterName\n            + \" localhost_12918 TestDB0 TestDB0_8\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n    Assert.assertEquals(_errToOfflineInvoked, 2, \"Should reset 2 partitions\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetPartitionState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2014-03-07 07:37:49","commitOrder":5,"curCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName); \n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String resourceName = \"TestDB0\";\n    String resourceUrl =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceName;\n\n    Map<String, String> paramMap = new HashMap<String, String>();\n    paramMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.resetResource);\n    TestHelixAdminScenariosRest.assertSuccessPostOperation(resourceUrl, paramMap, false);\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-03-07 09:50:46","endLine":117,"groupId":"10606","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/64/ed24908807b5bfe2ba966aa8d1aa5f94ea7c8c.src","preCode":"  public void testResetNode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    Map<String, Set<String>> errPartitions = new HashMap<String, Set<String>>() {\n      {\n        put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n        put(\"OFFLINE-SLAVE\", TestHelper.setOf(\"TestDB0_8\"));\n      }\n    };\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipantManager(ZK_ADDR, clusterName, instanceName); \n        participants[i].setTransition(new ErrTransition(errPartitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    \r\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_8\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName, errStateMap)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    participants[0].setTransition(null);\n    String resourceName = \"TestDB0\";\n    String resourceUrl =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceName;\n\n    Map<String, String> paramMap = new HashMap<String, String>();\n    paramMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.resetResource);\n    TestHelixAdminScenariosRest.assertSuccessPostOperation(resourceUrl, paramMap, false);\n\n    result =\n        ClusterStateVerifier\n            .verifyByZkCallback((new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName)));\n    Assert.assertTrue(result, \"Cluster verification fails\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestResetResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"4385d01a3673efa631d9837507c21ccab9f69be4","commitMessage":"@@@Refactor tests to use deleteCluster in test base class to deduplicate codes.\n","date":"2018-07-14 06:57:09","modifiedFileCount":"43","status":"M","submitter":"Lei Xia"}]
