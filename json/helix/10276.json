[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testMasterXfer()\n  {\n    System.out.println(\"START testMasterXfer at \" + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"MASTER\");\n\n    Map<String, String> pendingStates = new HashMap<String, String>();\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\",\n                                          \"SLAVE\",\n                                          \"MASTER\",\n                                          \"localhost_0\",\n                                          \"TestDB\",\n                                          \"TestDB_0\"));\n    messages.add(TestHelper.createMessage(\"msgId_1\",\n                                          \"MASTER\",\n                                          \"SLAVE\",\n                                          \"localhost_1\",\n                                          \"TestDB\",\n                                          \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances,\n                                                   currentStates,\n                                                   pendingStates,\n                                                   messages,\n                                                   stateConstraints,\n                                                   stateTransitionPriorities,\n                                                   \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 1);\n    Assert.assertEquals(selectedMsg.get(0).getMsgId(), \"msgId_1\");\n    System.out.println(\"END testMasterXfer at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":70,"groupId":"5262","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fd/9a7e27191bc0d410c7d315cf6bbb4a63f88031.src","preCode":"  public void testMasterXfer()\n  {\n    System.out.println(\"START testMasterXfer at \" + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"MASTER\");\n\n    Map<String, String> pendingStates = new HashMap<String, String>();\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\",\n                                          \"SLAVE\",\n                                          \"MASTER\",\n                                          \"localhost_0\",\n                                          \"TestDB\",\n                                          \"TestDB_0\"));\n    messages.add(TestHelper.createMessage(\"msgId_1\",\n                                          \"MASTER\",\n                                          \"SLAVE\",\n                                          \"localhost_1\",\n                                          \"TestDB\",\n                                          \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances,\n                                                   currentStates,\n                                                   pendingStates,\n                                                   messages,\n                                                   stateConstraints,\n                                                   stateTransitionPriorities,\n                                                   \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 1);\n    Assert.assertEquals(selectedMsg.get(0).getMsgId(), \"msgId_1\");\n    System.out.println(\"END testMasterXfer at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestMsgSelectionStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":21,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testMasterXferAfterMasterResume()\n  {\n    System.out.println(\"START testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"SLAVE\");\n\n    Map<String, String> pendingStates = new HashMap<String, String>();\n    pendingStates.put(\"localhost_1\", \"MASTER\");\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\",\n                                          \"SLAVE\",\n                                          \"MASTER\",\n                                          \"localhost_0\",\n                                          \"TestDB\",\n                                          \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances,\n                                                   currentStates,\n                                                   pendingStates,\n                                                   messages,\n                                                   stateConstraints,\n                                                   stateTransitionPriorities,\n                                                   \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 0);\n    System.out.println(\"END testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":117,"groupId":"3249","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMasterXferAfterMasterResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fd/9a7e27191bc0d410c7d315cf6bbb4a63f88031.src","preCode":"  public void testMasterXferAfterMasterResume()\n  {\n    System.out.println(\"START testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"SLAVE\");\n\n    Map<String, String> pendingStates = new HashMap<String, String>();\n    pendingStates.put(\"localhost_1\", \"MASTER\");\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\",\n                                          \"SLAVE\",\n                                          \"MASTER\",\n                                          \"localhost_0\",\n                                          \"TestDB\",\n                                          \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances,\n                                                   currentStates,\n                                                   pendingStates,\n                                                   messages,\n                                                   stateConstraints,\n                                                   stateTransitionPriorities,\n                                                   \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 0);\n    System.out.println(\"END testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestMsgSelectionStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2014-11-26 02:59:30","codes":[{"authorDate":"2014-11-26 02:59:30","commitOrder":2,"curCode":"  public void testMasterXfer() {\n    System.out.println(\"START testMasterXfer at \" + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"MASTER\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n    messages.add(TestHelper.createMessage(\"msgId_1\", \"MASTER\", \"SLAVE\", \"localhost_1\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, stateConstraints, stateTransitionPriorities, \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 1);\n    Assert.assertEquals(selectedMsg.get(0).getMsgId(), \"msgId_1\");\n    System.out.println(\"END testMasterXfer at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-11-26 02:59:30","endLine":94,"groupId":"5262","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/99/4e2fa16fe559dfb8c0566988ff43ffcfa90084.src","preCode":"  public void testMasterXfer() {\n    System.out.println(\"START testMasterXfer at \" + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"MASTER\");\n\n    Map<String, String> pendingStates = new HashMap<String, String>();\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n    messages.add(TestHelper.createMessage(\"msgId_1\", \"MASTER\", \"SLAVE\", \"localhost_1\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingStates,\n            messages, stateConstraints, stateTransitionPriorities, \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 1);\n    Assert.assertEquals(selectedMsg.get(0).getMsgId(), \"msgId_1\");\n    System.out.println(\"END testMasterXfer at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestMsgSelectionStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2014-11-26 02:59:30","commitOrder":2,"curCode":"  public void testMasterXferAfterMasterResume() {\n    System.out.println(\"START testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"SLAVE\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n    pendingMessages.put(\"localhost_1\", newMessage(\"TestDB\", \"TestDB_0\", \"localhost_1\", \"SLAVE\", \"MASTER\"));\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, stateConstraints, stateTransitionPriorities, \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 0);\n    System.out.println(\"END testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-11-26 02:59:30","endLine":131,"groupId":"2297","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMasterXferAfterMasterResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/99/4e2fa16fe559dfb8c0566988ff43ffcfa90084.src","preCode":"  public void testMasterXferAfterMasterResume() {\n    System.out.println(\"START testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"SLAVE\");\n\n    Map<String, String> pendingStates = new HashMap<String, String>();\n    pendingStates.put(\"localhost_1\", \"MASTER\");\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingStates,\n            messages, stateConstraints, stateTransitionPriorities, \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 0);\n    System.out.println(\"END testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestMsgSelectionStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"5378afab5646a6451665c1d8d3edb699daea5c64","commitMessage":"@@@[HELIX-541] Fix possible livelock in Helix controller.  rb=28413\n","date":"2014-11-26 02:59:30","modifiedFileCount":"11","status":"M","submitter":"zzhang"},{"authorTime":"2017-10-10 05:52:19","codes":[{"authorDate":"2017-10-10 05:52:19","commitOrder":3,"curCode":"  public void testMasterXfer() {\n    System.out.println(\"START testMasterXfer at \" + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"MASTER\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n    messages.add(TestHelper.createMessage(\"msgId_1\", \"MASTER\", \"SLAVE\", \"localhost_1\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, stateConstraints, stateTransitionPriorities,\n            BuiltInStateModelDefinitions.MasterSlave.getStateModelDefinition(), false);\n\n    Assert.assertEquals(selectedMsg.size(), 1);\n    Assert.assertEquals(selectedMsg.get(0).getMsgId(), \"msgId_1\");\n    System.out.println(\"END testMasterXfer at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-01-25 10:30:30","endLine":95,"groupId":"5262","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/201167e21f499191be5b975f0cc0423d39944c.src","preCode":"  public void testMasterXfer() {\n    System.out.println(\"START testMasterXfer at \" + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"MASTER\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n    messages.add(TestHelper.createMessage(\"msgId_1\", \"MASTER\", \"SLAVE\", \"localhost_1\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, stateConstraints, stateTransitionPriorities, \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 1);\n    Assert.assertEquals(selectedMsg.get(0).getMsgId(), \"msgId_1\");\n    System.out.println(\"END testMasterXfer at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestMsgSelectionStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2017-10-10 05:52:19","commitOrder":3,"curCode":"  public void testMasterXferAfterMasterResume() {\n    System.out.println(\"START testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"SLAVE\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n    pendingMessages.put(\"localhost_1\", newMessage(\"TestDB\", \"TestDB_0\", \"localhost_1\", \"SLAVE\", \"MASTER\"));\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, stateConstraints, stateTransitionPriorities,\n            BuiltInStateModelDefinitions.MasterSlave.getStateModelDefinition(), false);\n\n    Assert.assertEquals(selectedMsg.size(), 0);\n    System.out.println(\"END testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-01-25 10:30:30","endLine":133,"groupId":"2297","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMasterXferAfterMasterResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/201167e21f499191be5b975f0cc0423d39944c.src","preCode":"  public void testMasterXferAfterMasterResume() {\n    System.out.println(\"START testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"SLAVE\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n    pendingMessages.put(\"localhost_1\", newMessage(\"TestDB\", \"TestDB_0\", \"localhost_1\", \"SLAVE\", \"MASTER\"));\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, stateConstraints, stateTransitionPriorities, \"OFFLINE\");\n\n    Assert.assertEquals(selectedMsg.size(), 0);\n    System.out.println(\"END testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestMsgSelectionStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"d0a3c0d1ea3a467564ed5ffd20bcd6a8e5a56678","commitMessage":"@@@Add P2P (Participant-to-Participant) state-transition message support in Helix controller.\n","date":"2018-01-25 10:30:30","modifiedFileCount":"33","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-25 09:18:40","codes":[{"authorDate":"2018-04-25 09:18:40","commitOrder":4,"curCode":"  public void testMasterXfer() {\n    System.out.println(\"START testMasterXfer at \" + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"MASTER\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n    messages.add(TestHelper.createMessage(\"msgId_1\", \"MASTER\", \"SLAVE\", \"localhost_1\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, Collections.<Message>emptyList(), stateConstraints, stateTransitionPriorities,\n            BuiltInStateModelDefinitions.MasterSlave.getStateModelDefinition(), false);\n\n    Assert.assertEquals(selectedMsg.size(), 1);\n    Assert.assertEquals(selectedMsg.get(0).getMsgId(), \"msgId_1\");\n    System.out.println(\"END testMasterXfer at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-09-18 06:08:28","endLine":95,"groupId":"10276","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/e10627b8826270aad09e7f2d0cda4594c37119.src","preCode":"  public void testMasterXfer() {\n    System.out.println(\"START testMasterXfer at \" + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"MASTER\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n    messages.add(TestHelper.createMessage(\"msgId_1\", \"MASTER\", \"SLAVE\", \"localhost_1\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, stateConstraints, stateTransitionPriorities,\n            BuiltInStateModelDefinitions.MasterSlave.getStateModelDefinition(), false);\n\n    Assert.assertEquals(selectedMsg.size(), 1);\n    Assert.assertEquals(selectedMsg.get(0).getMsgId(), \"msgId_1\");\n    System.out.println(\"END testMasterXfer at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestMsgSelectionStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2018-04-25 09:18:40","commitOrder":4,"curCode":"  public void testMasterXferAfterMasterResume() {\n    System.out.println(\"START testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"SLAVE\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n    pendingMessages.put(\"localhost_1\", newMessage(\"TestDB\", \"TestDB_0\", \"localhost_1\", \"SLAVE\", \"MASTER\"));\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, Collections.<Message>emptyList(), stateConstraints, stateTransitionPriorities,\n            BuiltInStateModelDefinitions.MasterSlave.getStateModelDefinition(), false);\n\n    Assert.assertEquals(selectedMsg.size(), 0);\n    System.out.println(\"END testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-09-18 06:08:28","endLine":133,"groupId":"10276","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMasterXferAfterMasterResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/e10627b8826270aad09e7f2d0cda4594c37119.src","preCode":"  public void testMasterXferAfterMasterResume() {\n    System.out.println(\"START testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n\n    Map<String, LiveInstance> liveInstances = new HashMap<String, LiveInstance>();\n    liveInstances.put(\"localhost_0\", new LiveInstance(\"localhost_0\"));\n    liveInstances.put(\"localhost_1\", new LiveInstance(\"localhost_1\"));\n\n    Map<String, String> currentStates = new HashMap<String, String>();\n    currentStates.put(\"localhost_0\", \"SLAVE\");\n    currentStates.put(\"localhost_1\", \"SLAVE\");\n\n    Map<String, Message> pendingMessages = new HashMap<String, Message>();\n    pendingMessages.put(\"localhost_1\", newMessage(\"TestDB\", \"TestDB_0\", \"localhost_1\", \"SLAVE\", \"MASTER\"));\n\n    List<Message> messages = new ArrayList<Message>();\n    messages.add(TestHelper.createMessage(\"msgId_0\", \"SLAVE\", \"MASTER\", \"localhost_0\", \"TestDB\",\n        \"TestDB_0\"));\n\n    Map<String, Bounds> stateConstraints = new HashMap<String, Bounds>();\n    stateConstraints.put(\"MASTER\", new Bounds(0, 1));\n    stateConstraints.put(\"SLAVE\", new Bounds(0, 2));\n\n    Map<String, Integer> stateTransitionPriorities = new HashMap<String, Integer>();\n    stateTransitionPriorities.put(\"MASTER-SLAVE\", 0);\n    stateTransitionPriorities.put(\"SLAVE-MASTER\", 1);\n\n    List<Message> selectedMsg =\n        new MessageSelectionStage().selectMessages(liveInstances, currentStates, pendingMessages,\n            messages, stateConstraints, stateTransitionPriorities,\n            BuiltInStateModelDefinitions.MasterSlave.getStateModelDefinition(), false);\n\n    Assert.assertEquals(selectedMsg.size(), 0);\n    System.out.println(\"END testMasterXferAfterMasterResume at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestMsgSelectionStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"880f885121afecab4e186282fbf94a146a2cf04a","commitMessage":"@@@Fix P2P message logic in controller to avoid sending duplicated messages to participants.\n","date":"2018-09-18 06:08:28","modifiedFileCount":"21","status":"M","submitter":"Lei Xia"}]
