[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCount,\n      String masterState, int replica, int instances, int maxPerInstance) {\n    Map<String, Integer> masterPartitionsCountMap = new HashMap<String, Integer>();\n    for (String partitionName : externalView.getMapFields().keySet()) {\n      Map<String, String> assignmentMap = externalView.getMapField(partitionName);\n      \r\n      for (String instance : assignmentMap.keySet()) {\n        if (assignmentMap.get(instance).equals(masterState)) {\n          if (!masterPartitionsCountMap.containsKey(instance)) {\n            masterPartitionsCountMap.put(instance, 0);\n          }\n          masterPartitionsCountMap.put(instance, masterPartitionsCountMap.get(instance) + 1);\n        }\n      }\n    }\n\n    int perInstancePartition = partitionCount / instances;\n\n    int totalCount = 0;\n    for (String instanceName : masterPartitionsCountMap.keySet()) {\n      int instancePartitionCount = masterPartitionsCountMap.get(instanceName);\n      totalCount += instancePartitionCount;\n      if (!(instancePartitionCount == perInstancePartition\n          || instancePartitionCount == perInstancePartition + 1 || instancePartitionCount == maxPerInstance)) {\n        return false;\n      }\n      if (instancePartitionCount == maxPerInstance) {\n        continue;\n      }\n      if (instancePartitionCount == perInstancePartition + 1) {\n        if (partitionCount % instances == 0) {\n          return false;\n        }\n      }\n    }\n    if (totalCount == maxPerInstance * instances) {\n      return true;\n    }\n    if (partitionCount != totalCount) {\n      return false;\n    }\n    return true;\n\n  }\n","date":"2017-11-08 08:48:26","endLine":194,"groupId":"6622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyBalanceExternalView","params":"(ZNRecordexternalView@intpartitionCount@StringmasterState@intreplica@intinstances@intmaxPerInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/35/d57c408bcc4ce84f82bdd0abf40ff166016b04.src","preCode":"  static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCount,\n      String masterState, int replica, int instances, int maxPerInstance) {\n    Map<String, Integer> masterPartitionsCountMap = new HashMap<String, Integer>();\n    for (String partitionName : externalView.getMapFields().keySet()) {\n      Map<String, String> assignmentMap = externalView.getMapField(partitionName);\n      \r\n      for (String instance : assignmentMap.keySet()) {\n        if (assignmentMap.get(instance).equals(masterState)) {\n          if (!masterPartitionsCountMap.containsKey(instance)) {\n            masterPartitionsCountMap.put(instance, 0);\n          }\n          masterPartitionsCountMap.put(instance, masterPartitionsCountMap.get(instance) + 1);\n        }\n      }\n    }\n\n    int perInstancePartition = partitionCount / instances;\n\n    int totalCount = 0;\n    for (String instanceName : masterPartitionsCountMap.keySet()) {\n      int instancePartitionCount = masterPartitionsCountMap.get(instanceName);\n      totalCount += instancePartitionCount;\n      if (!(instancePartitionCount == perInstancePartition\n          || instancePartitionCount == perInstancePartition + 1 || instancePartitionCount == maxPerInstance)) {\n        return false;\n      }\n      if (instancePartitionCount == maxPerInstance) {\n        continue;\n      }\n      if (instancePartitionCount == perInstancePartition + 1) {\n        if (partitionCount % instances == 0) {\n          return false;\n        }\n      }\n    }\n    if (totalCount == maxPerInstance * instances) {\n      return true;\n    }\n    if (partitionCount != totalCount) {\n      return false;\n    }\n    return true;\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCount,\n      String masterState, int replica, int instances) {\n    if (externalView == null) {\n      return false;\n    }\n    Map<String, Integer> masterPartitionsCountMap = new HashMap<String, Integer>();\n    for (String partitionName : externalView.getMapFields().keySet()) {\n      Map<String, String> assignmentMap = externalView.getMapField(partitionName);\n      \r\n      for (String instance : assignmentMap.keySet()) {\n        if (assignmentMap.get(instance).equals(masterState)) {\n          if (!masterPartitionsCountMap.containsKey(instance)) {\n            masterPartitionsCountMap.put(instance, 0);\n          }\n          masterPartitionsCountMap.put(instance, masterPartitionsCountMap.get(instance) + 1);\n        }\n      }\n    }\n\n    int perInstancePartition = partitionCount / instances;\n\n    int totalCount = 0;\n    for (String instanceName : masterPartitionsCountMap.keySet()) {\n      int instancePartitionCount = masterPartitionsCountMap.get(instanceName);\n      totalCount += instancePartitionCount;\n      if (!(instancePartitionCount == perInstancePartition || instancePartitionCount == perInstancePartition + 1)) {\n        return false;\n      }\n      if (instancePartitionCount == perInstancePartition + 1) {\n        if (partitionCount % instances == 0) {\n          return false;\n        }\n      }\n    }\n    if (partitionCount != totalCount) {\n      return false;\n    }\n    return true;\n\n  }\n","date":"2017-11-08 08:48:26","endLine":229,"groupId":"6622","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyBalanceExternalView","params":"(ZNRecordexternalView@intpartitionCount@StringmasterState@intreplica@intinstances)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/02/54e0461e070a63b4f902f3e6bf7f39107c5b7c.src","preCode":"  static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCount,\n      String masterState, int replica, int instances) {\n    if (externalView == null) {\n      return false;\n    }\n    Map<String, Integer> masterPartitionsCountMap = new HashMap<String, Integer>();\n    for (String partitionName : externalView.getMapFields().keySet()) {\n      Map<String, String> assignmentMap = externalView.getMapField(partitionName);\n      \r\n      for (String instance : assignmentMap.keySet()) {\n        if (assignmentMap.get(instance).equals(masterState)) {\n          if (!masterPartitionsCountMap.containsKey(instance)) {\n            masterPartitionsCountMap.put(instance, 0);\n          }\n          masterPartitionsCountMap.put(instance, masterPartitionsCountMap.get(instance) + 1);\n        }\n      }\n    }\n\n    int perInstancePartition = partitionCount / instances;\n\n    int totalCount = 0;\n    for (String instanceName : masterPartitionsCountMap.keySet()) {\n      int instancePartitionCount = masterPartitionsCountMap.get(instanceName);\n      totalCount += instancePartitionCount;\n      if (!(instancePartitionCount == perInstancePartition || instancePartitionCount == perInstancePartition + 1)) {\n        return false;\n      }\n      if (instancePartitionCount == perInstancePartition + 1) {\n        if (partitionCount % instances == 0) {\n          return false;\n        }\n      }\n    }\n    if (partitionCount != totalCount) {\n      return false;\n    }\n    return true;\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":2,"curCode":"  private static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCount,\n      String masterState, int replica, int instances, int maxPerInstance) {\n    Map<String, Integer> masterPartitionsCountMap = new HashMap<>();\n    for (String partitionName : externalView.getMapFields().keySet()) {\n      Map<String, String> assignmentMap = externalView.getMapField(partitionName);\n      for (String instance : assignmentMap.keySet()) {\n        if (assignmentMap.get(instance).equals(masterState)) {\n          if (!masterPartitionsCountMap.containsKey(instance)) {\n            masterPartitionsCountMap.put(instance, 0);\n          }\n          masterPartitionsCountMap.put(instance, masterPartitionsCountMap.get(instance) + 1);\n        }\n      }\n    }\n\n    int perInstancePartition = partitionCount / instances;\n\n    int totalCount = 0;\n    for (String instanceName : masterPartitionsCountMap.keySet()) {\n      int instancePartitionCount = masterPartitionsCountMap.get(instanceName);\n      totalCount += instancePartitionCount;\n      if (!(instancePartitionCount == perInstancePartition\n          || instancePartitionCount == perInstancePartition + 1\n          || instancePartitionCount == maxPerInstance)) {\n        return false;\n      }\n      if (instancePartitionCount == maxPerInstance) {\n        continue;\n      }\n      if (instancePartitionCount == perInstancePartition + 1) {\n        if (partitionCount % instances == 0) {\n          return false;\n        }\n      }\n    }\n    if (totalCount == maxPerInstance * instances) {\n      return true;\n    }\n    return partitionCount == totalCount;\n  }\n","date":"2019-05-25 09:19:21","endLine":180,"groupId":"10370","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyBalanceExternalView","params":"(ZNRecordexternalView@intpartitionCount@StringmasterState@intreplica@intinstances@intmaxPerInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/34/e374da725d670c8195412999f6cc2042158ecc.src","preCode":"  static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCount,\n      String masterState, int replica, int instances, int maxPerInstance) {\n    Map<String, Integer> masterPartitionsCountMap = new HashMap<String, Integer>();\n    for (String partitionName : externalView.getMapFields().keySet()) {\n      Map<String, String> assignmentMap = externalView.getMapField(partitionName);\n      \r\n      for (String instance : assignmentMap.keySet()) {\n        if (assignmentMap.get(instance).equals(masterState)) {\n          if (!masterPartitionsCountMap.containsKey(instance)) {\n            masterPartitionsCountMap.put(instance, 0);\n          }\n          masterPartitionsCountMap.put(instance, masterPartitionsCountMap.get(instance) + 1);\n        }\n      }\n    }\n\n    int perInstancePartition = partitionCount / instances;\n\n    int totalCount = 0;\n    for (String instanceName : masterPartitionsCountMap.keySet()) {\n      int instancePartitionCount = masterPartitionsCountMap.get(instanceName);\n      totalCount += instancePartitionCount;\n      if (!(instancePartitionCount == perInstancePartition\n          || instancePartitionCount == perInstancePartition + 1 || instancePartitionCount == maxPerInstance)) {\n        return false;\n      }\n      if (instancePartitionCount == maxPerInstance) {\n        continue;\n      }\n      if (instancePartitionCount == perInstancePartition + 1) {\n        if (partitionCount % instances == 0) {\n          return false;\n        }\n      }\n    }\n    if (totalCount == maxPerInstance * instances) {\n      return true;\n    }\n    if (partitionCount != totalCount) {\n      return false;\n    }\n    return true;\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":2,"curCode":"  static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCount,\n      String masterState, int replica, int instances) {\n    if (externalView == null) {\n      return false;\n    }\n    Map<String, Integer> masterPartitionsCountMap = new HashMap<>();\n    for (String partitionName : externalView.getMapFields().keySet()) {\n      Map<String, String> assignmentMap = externalView.getMapField(partitionName);\n      \r\n      for (String instance : assignmentMap.keySet()) {\n        if (assignmentMap.get(instance).equals(masterState)) {\n          if (!masterPartitionsCountMap.containsKey(instance)) {\n            masterPartitionsCountMap.put(instance, 0);\n          }\n          masterPartitionsCountMap.put(instance, masterPartitionsCountMap.get(instance) + 1);\n        }\n      }\n    }\n\n    int perInstancePartition = partitionCount / instances;\n\n    int totalCount = 0;\n    for (String instanceName : masterPartitionsCountMap.keySet()) {\n      int instancePartitionCount = masterPartitionsCountMap.get(instanceName);\n      totalCount += instancePartitionCount;\n      if (!(instancePartitionCount == perInstancePartition\n          || instancePartitionCount == perInstancePartition + 1)) {\n        return false;\n      }\n      if (instancePartitionCount == perInstancePartition + 1) {\n        if (partitionCount % instances == 0) {\n          return false;\n        }\n      }\n    }\n    return partitionCount == totalCount;\n  }\n","date":"2019-05-25 09:19:21","endLine":229,"groupId":"10370","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyBalanceExternalView","params":"(ZNRecordexternalView@intpartitionCount@StringmasterState@intreplica@intinstances)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e7/d0b718ebe7b46852d85288ee8a8d5b249f6e72.src","preCode":"  static boolean verifyBalanceExternalView(ZNRecord externalView, int partitionCount,\n      String masterState, int replica, int instances) {\n    if (externalView == null) {\n      return false;\n    }\n    Map<String, Integer> masterPartitionsCountMap = new HashMap<String, Integer>();\n    for (String partitionName : externalView.getMapFields().keySet()) {\n      Map<String, String> assignmentMap = externalView.getMapField(partitionName);\n      \r\n      for (String instance : assignmentMap.keySet()) {\n        if (assignmentMap.get(instance).equals(masterState)) {\n          if (!masterPartitionsCountMap.containsKey(instance)) {\n            masterPartitionsCountMap.put(instance, 0);\n          }\n          masterPartitionsCountMap.put(instance, masterPartitionsCountMap.get(instance) + 1);\n        }\n      }\n    }\n\n    int perInstancePartition = partitionCount / instances;\n\n    int totalCount = 0;\n    for (String instanceName : masterPartitionsCountMap.keySet()) {\n      int instancePartitionCount = masterPartitionsCountMap.get(instanceName);\n      totalCount += instancePartitionCount;\n      if (!(instancePartitionCount == perInstancePartition || instancePartitionCount == perInstancePartition + 1)) {\n        return false;\n      }\n      if (instancePartitionCount == perInstancePartition + 1) {\n        if (partitionCount % instances == 0) {\n          return false;\n        }\n      }\n    }\n    if (partitionCount != totalCount) {\n      return false;\n    }\n    return true;\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
