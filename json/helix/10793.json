[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","date":"2012-10-25 07:14:36","endLine":323,"groupId":"477","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a6/7a79e1ab6a55ab13de1c0841b7dd03033593c7.src","preCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","date":"2012-10-25 07:14:36","endLine":362,"groupId":"477","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a6/7a79e1ab6a55ab13de1c0841b7dd03033593c7.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      logger.error(\"exception in handling data-change. path: \" + dataPath \n    \t\t  + \", listener: \" + _listener);\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","date":"2013-04-06 08:30:58","endLine":404,"groupId":"477","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c5/cc265a763a7dc410fa7308af568e048d37a896.src","preCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      logger.error(\"exception in handling child-change. instance: \" + _manager.getInstanceName() \n    \t\t  + \", parentPath: \" + parentPath + \", listener: \" + _listener);\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","date":"2013-04-06 08:30:58","endLine":455,"groupId":"477","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c5/cc265a763a7dc410fa7308af568e048d37a896.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"M"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"M","submitter":"Swaroop Jagadish"},{"authorTime":"2013-04-27 17:04:59","codes":[{"authorDate":"2013-04-27 17:04:59","commitOrder":3,"curCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      String msg = \"exception in handling data-change. path: \" + dataPath \n    \t\t  + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2013-04-27 17:04:59","endLine":419,"groupId":"477","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/42/65cc6aaa35390e878afa8fb00e3086124b5ad7.src","preCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      logger.error(\"exception in handling data-change. path: \" + dataPath \n    \t\t  + \", listener: \" + _listener);\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"},{"authorDate":"2013-04-27 17:04:59","commitOrder":3,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName() \n    \t\t  + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2013-04-27 17:04:59","endLine":471,"groupId":"477","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/42/65cc6aaa35390e878afa8fb00e3086124b5ad7.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      logger.error(\"exception in handling child-change. instance: \" + _manager.getInstanceName() \n    \t\t  + \", parentPath: \" + parentPath + \", listener: \" + _listener);\n      ZKExceptionHandler.getInstance().handle(e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"92be0aa548f2efd12ae635d474917464b07dfb29","commitMessage":"@@@[HELIX-92] Adding service discovery recipe\n","date":"2013-04-27 17:04:59","modifiedFileCount":"8","status":"M","submitter":"kishoreg"},{"authorTime":"2013-05-02 09:48:21","codes":[{"authorDate":"2013-04-27 17:04:59","commitOrder":4,"curCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      String msg = \"exception in handling data-change. path: \" + dataPath \n    \t\t  + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2013-04-27 17:04:59","endLine":419,"groupId":"477","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/42/65cc6aaa35390e878afa8fb00e3086124b5ad7.src","preCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      String msg = \"exception in handling data-change. path: \" + dataPath \n    \t\t  + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"N"},{"authorDate":"2013-05-02 09:48:21","commitOrder":4,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        \n        if (currentChilds == null) {\n          \r\n          if (parentPath.equals(_path)) {\n            \r\n            _manager.removeListener(_propertyKey, _listener);\n          }\n          changeContext.setType(NotificationContext.Type.FINALIZE);\n        } else {\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n        }\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName() \n    \t\t  + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2013-05-02 09:48:21","endLine":473,"groupId":"1366","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cf/e40c1b3d8280045bdc6d610973622617876426.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName() \n    \t\t  + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"}],"commitId":"cec747d68c5a13a827f35e25353a0ba003820942","commitMessage":"@@@fix listener leaking\n","date":"2013-05-02 09:48:21","modifiedFileCount":"1","status":"M","submitter":"zzhang"},{"authorTime":"2015-03-13 15:48:11","codes":[{"authorDate":"2013-04-27 17:04:59","commitOrder":5,"curCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      String msg = \"exception in handling data-change. path: \" + dataPath \n    \t\t  + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2013-04-27 17:04:59","endLine":419,"groupId":"477","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/42/65cc6aaa35390e878afa8fb00e3086124b5ad7.src","preCode":"  public void handleDataChange(String dataPath, Object data)\n  {\n    try\n    {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path))\n      {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    }\n    catch (Exception e)\n    {\n      String msg = \"exception in handling data-change. path: \" + dataPath \n    \t\t  + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"N"},{"authorDate":"2015-03-13 15:48:11","commitOrder":5,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          invoke(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n              + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2015-03-13 15:48:11","endLine":396,"groupId":"4107","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fd/59eccef18df6ef6700458698f9b9b3240425bb.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n\n        if (currentChilds == null) {\n          \r\n          if (parentPath.equals(_path)) {\n            \r\n            _manager.removeListener(_propertyKey, _listener);\n          }\n          changeContext.setType(NotificationContext.Type.FINALIZE);\n        } else {\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n        }\n        invoke(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n              + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"}],"commitId":"86b2b25acbe26286a52881c11539d343130bc4fa","commitMessage":"@@@[HELIX-575] Should not send FINALIZED callback when a bucketized resource is removed.  rb=32032\n","date":"2015-03-13 15:48:11","modifiedFileCount":"4","status":"M","submitter":"zzhang"},{"authorTime":"2017-03-25 01:48:05","codes":[{"authorDate":"2017-03-25 01:48:05","commitOrder":6,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2017-03-25 01:48:05","endLine":393,"groupId":"477","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/90/df56d96e27e43594183960b2f4e6c0227865ed.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        invoke(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"},{"authorDate":"2017-03-25 01:48:05","commitOrder":6,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName() + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2017-03-25 01:48:05","endLine":438,"groupId":"5597","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/90/df56d96e27e43594183960b2f4e6c0227865ed.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          invoke(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n              + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"384978a2e16ab0f4adb388e32c7e448c77996ca2","commitMessage":"@@@Adding support to batch ZK callback optionally by setting sys var asyncBatchModeEnabled=true\n","date":"2017-03-25 01:48:05","modifiedFileCount":"1","status":"M","submitter":"kishoreg"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":7,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    logger.debug(\"Data change callback: paths changed: \" + dataPath);\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":541,"groupId":"477","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/0cbbc12af430555db91a5f7ecabfc9b943d0e6.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":7,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    logger.debug(\"Data change callback: child changed, path: \" + parentPath + \", current childs: \"\n        + currentChilds);\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":595,"groupId":"1299","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/0cbbc12af430555db91a5f7ecabfc9b943d0e6.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName() + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":571,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-02-17 15:05:49","codes":[{"authorDate":"2018-02-17 15:05:49","commitOrder":8,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    logger.info(\"Data change callback: paths changed: \" + dataPath);\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-03-24 02:57:06","endLine":548,"groupId":"477","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c5/a035fc4539175de9d77676f9f9ac764b8a6bf5.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    logger.debug(\"Data change callback: paths changed: \" + dataPath);\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"M"},{"authorDate":"2018-02-17 15:05:49","commitOrder":8,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    logger.info(\"Data change callback: child changed, path: \" + parentPath + \", current child count: \"\n        + currentChilds.size());\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-03-24 02:57:06","endLine":599,"groupId":"1299","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c5/a035fc4539175de9d77676f9f9ac764b8a6bf5.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    logger.debug(\"Data change callback: child changed, path: \" + parentPath + \", current childs: \"\n        + currentChilds);\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"M"}],"commitId":"fb0b67471112e44b9fd416dca51a185359369308","commitMessage":"@@@Including version number in Participant and Controller history.  and add additional logs.\n","date":"2018-03-24 02:57:06","modifiedFileCount":"9","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-03-24 01:35:29","codes":[{"authorDate":"2018-03-24 01:35:29","commitOrder":9,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-03-24 03:12:44","endLine":558,"groupId":"477","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/66/3fa32c2308db3df14b371418c6d92c9e6897cf.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    logger.info(\"Data change callback: paths changed: \" + dataPath);\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"M"},{"authorDate":"2018-03-24 01:35:29","commitOrder":9,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Data change callback: child changed, path: \" + parentPath + \", current child count: \"\n              + currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-03-24 03:12:44","endLine":615,"groupId":"1299","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/66/3fa32c2308db3df14b371418c6d92c9e6897cf.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    logger.info(\"Data change callback: child changed, path: \" + parentPath + \", current child count: \"\n        + currentChilds.size());\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":588,"status":"M"}],"commitId":"90730bff49120fc1ca0103e8be2cbab90e6ceced","commitMessage":"@@@Wrap debug log statement in CallbackHandler and ZkClient to reduce GC pressure.\n","date":"2018-03-24 03:12:44","modifiedFileCount":"2","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-03-25 11:55:17","codes":[{"authorDate":"2018-03-24 01:35:29","commitOrder":10,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-03-24 03:12:44","endLine":558,"groupId":"477","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/66/3fa32c2308db3df14b371418c6d92c9e6897cf.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"N"},{"authorDate":"2018-03-25 11:55:17","commitOrder":10,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Data change callback: child changed, path: \" + parentPath + \", current child count: \"\n              + currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-04-06 07:56:55","endLine":675,"groupId":"1299","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/b8a4cf77e635623adcd70b022dc0c5c16efeb1.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Data change callback: child changed, path: \" + parentPath + \", current child count: \"\n              + currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":647,"status":"M"}],"commitId":"477264e72165e706719071fa2c91d13f77ccbea4","commitMessage":"@@@Improve CallbackHandler by avoiding unnessary re-subscripe to the data change event.Resubscribe to zk changes only when there is any child chanage.  with async subscription to ensure not missing any new child paths.\n","date":"2018-04-06 07:56:55","modifiedFileCount":"5","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-03 05:33:29","codes":[{"authorDate":"2018-03-24 01:35:29","commitOrder":11,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-03-24 03:12:44","endLine":558,"groupId":"477","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/66/3fa32c2308db3df14b371418c6d92c9e6897cf.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"N"},{"authorDate":"2018-04-03 05:33:29","commitOrder":11,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Data change callback: child changed, path: \" + parentPath + \", current child count: \" + (\n              currentChilds != null\n                  ? currentChilds.size()\n                  : 0));\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-04-17 02:22:40","endLine":684,"groupId":"1299","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/a1a461dfc950c82c473d5c70f91b028bc5e8e2.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Data change callback: child changed, path: \" + parentPath + \", current child count: \"\n              + currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"M"}],"commitId":"13fac7c77bb570631ff93e8ff83c5cdd2bcd903f","commitMessage":"@@@Wrap these high frequent called debug log statements with debug level check to reduce memory footprint.\n","date":"2018-04-17 02:22:40","modifiedFileCount":"12","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-17 02:38:26","codes":[{"authorDate":"2018-03-24 01:35:29","commitOrder":12,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-03-24 03:12:44","endLine":558,"groupId":"477","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/66/3fa32c2308db3df14b371418c6d92c9e6897cf.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"N"},{"authorDate":"2018-04-17 02:38:26","commitOrder":12,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Data change callback: child changed, path: \" + parentPath + \", current child count: \"\n              + currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-04-20 02:36:17","endLine":671,"groupId":"1299","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/58/90fb8ab2f5439baacbffc5698cc197d2debb15.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Data change callback: child changed, path: \" + parentPath + \", current child count: \" + (\n              currentChilds != null\n                  ? currentChilds.size()\n                  : 0));\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"M"}],"commitId":"82cfd15b5b324674f4f5c3a50e156378460228c5","commitMessage":"@@@Fix race-condition issue that could block ZkClient event thread in CallbackHandler.\n","date":"2018-04-20 02:36:17","modifiedFileCount":"3","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-07-10 03:16:56","codes":[{"authorDate":"2018-03-24 01:35:29","commitOrder":13,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-03-24 03:12:44","endLine":558,"groupId":"477","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/66/3fa32c2308db3df14b371418c6d92c9e6897cf.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"N"},{"authorDate":"2018-07-10 03:16:56","commitOrder":13,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: child changed, path: {} , current child count: {}\",\n          parentPath, currentChilds == null ? 0 : currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-07-10 03:16:56","endLine":671,"groupId":"1299","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cd/446e843e958992f8cf725273a9cb4d4aefdf27.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Data change callback: child changed, path: \" + parentPath + \", current child count: \"\n              + currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"M"}],"commitId":"542fbc840a167986a40bd57f3c5660d294acb63c","commitMessage":"@@@[HELIX-709] Move external view calculation to async stage and re-organize pipeline\n","date":"2018-07-10 03:16:56","modifiedFileCount":"5","status":"M","submitter":"Harry Zhang"},{"authorTime":"2018-07-10 03:16:56","codes":[{"authorDate":"2020-06-06 01:34:31","commitOrder":14,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: {}\", dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2020-06-06 01:34:31","endLine":714,"groupId":"477","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/21/92ca0a7d07252696c264de5e78d630fdb9ea1a.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: \" + dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":695,"status":"M"},{"authorDate":"2018-07-10 03:16:56","commitOrder":14,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: child changed, path: {} , current child count: {}\",\n          parentPath, currentChilds == null ? 0 : currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2018-07-10 03:16:56","endLine":671,"groupId":"1299","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cd/446e843e958992f8cf725273a9cb4d4aefdf27.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: child changed, path: {} , current child count: {}\",\n          parentPath, currentChilds == null ? 0 : currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"N"}],"commitId":"48da1680290b04f815f691c6d3e0c1f34db8550a","commitMessage":"@@@Add path exists check for customized state (#1033)\n\nRemove stack trace when customized state root does not exist and throws no node exception.\nChange logging in Callback handler to be parameterized logging.","date":"2020-06-06 01:34:31","modifiedFileCount":"2","status":"M","submitter":"Meng Zhang"},{"authorTime":"2020-06-06 10:55:06","codes":[{"authorDate":"2020-06-06 01:34:31","commitOrder":15,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: {}\", dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2020-06-06 01:34:31","endLine":714,"groupId":"477","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/21/92ca0a7d07252696c264de5e78d630fdb9ea1a.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: {}\", dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":695,"status":"N"},{"authorDate":"2020-06-06 10:55:06","commitOrder":15,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: child changed, path: {} , current child count: {}\",\n          parentPath, currentChilds == null ? 0 : currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          if (!isReady()) {\n            \r\n            logger.info(\"Callbackhandler {} with path {} is in reset state. Stop subscription to ZK client to avoid leaking\",\n                this, parentPath);\n            return;\n          }\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2020-06-25 06:08:23","endLine":797,"groupId":"3167","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/66aba4bbe3cd5e7473c2e815e668858b4d0662.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: child changed, path: {} , current child count: {}\",\n          parentPath, currentChilds == null ? 0 : currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":764,"status":"M"}],"commitId":"842bf1f9290cf30e946ff2bc8377b3e2f6014554","commitMessage":"@@@Fix leaking Zk path watch and Callbackhandler issue (#1035)\n\nShort term fix #1034. Get rid of dangling CallbackHandlers and its\nrelated current state parent path in Zookeeper. Get rid of leaking\nof current state znode path due to async nature of deletion of\ncurrent state znode path to installatio of watcher in various\nthread in Helix.","date":"2020-06-25 06:08:23","modifiedFileCount":"10","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-09-24 05:46:09","codes":[{"authorDate":"2020-09-24 05:46:09","commitOrder":16,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callbackhandler {}: paths changed: {}\", _uid, dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":737,"groupId":"477","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/8726d132030d88a0a798b89ea5907c5063b367.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: paths changed: {}\", dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":718,"status":"M"},{"authorDate":"2020-09-24 05:46:09","commitOrder":16,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: child changed, path: {} , current child count: {}\",\n          parentPath, currentChilds == null ? 0 : currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          boolean rt = _manager.removeListener(_propertyKey, _listener);\n          logger.info(\"CallbackHandler {} removed with status {}\", _uid, rt);\n        } else {\n          if (!isReady()) {\n            \r\n            logger.info(\"Callbackhandler {} with path {} is in reset state. Stop subscription to ZK client to avoid leaking\",\n                this, parentPath);\n            return;\n          }\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":801,"groupId":"5631","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/8726d132030d88a0a798b89ea5907c5063b367.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: child changed, path: {} , current child count: {}\",\n          parentPath, currentChilds == null ? 0 : currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          _manager.removeListener(_propertyKey, _listener);\n        } else {\n          if (!isReady()) {\n            \r\n            logger.info(\"Callbackhandler {} with path {} is in reset state. Stop subscription to ZK client to avoid leaking\",\n                this, parentPath);\n            return;\n          }\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":767,"status":"M"}],"commitId":"7028bf36a45b2c03d92193ef69d74324171db73d","commitMessage":"@@@Enhance logging for CallbackHandler and Zkclient (#1355)\n\nThis commit adds a unique id to each method's logging to help the\ncorrelation and track the callback handler and zkClient's life cycle.","date":"2020-09-24 05:46:09","modifiedFileCount":"2","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-11-10 03:50:29","codes":[{"authorDate":"2020-11-10 03:50:29","commitOrder":17,"curCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callbackhandler {}: paths changed: {}\", _uid, dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        changeContext.setIsChildChange(false);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2020-11-10 03:50:29","endLine":688,"groupId":"10793","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"handleDataChange","params":"(StringdataPath@Objectdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a5/7a678182f7725c56476b28c13e6121f728d7c3.src","preCode":"  public void handleDataChange(String dataPath, Object data) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callbackhandler {}: paths changed: {}\", _uid, dataPath);\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (dataPath != null && dataPath.startsWith(_path)) {\n        NotificationContext changeContext = new NotificationContext(_manager);\n        changeContext.setType(NotificationContext.Type.CALLBACK);\n        changeContext.setPathChanged(dataPath);\n        changeContext.setChangeType(_changeType);\n        enqueueTask(changeContext);\n      }\n    } catch (Exception e) {\n      String msg =\n          \"exception in handling data-change. path: \" + dataPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"},{"authorDate":"2020-11-10 03:50:29","commitOrder":17,"curCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: child changed, path: {} , current child count: {}\",\n          parentPath, currentChilds == null ? 0 : currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          boolean rt = _manager.removeListener(_propertyKey, _listener);\n          logger.info(\"CallbackHandler {} removed with status {}\", _uid, rt);\n        } else {\n          if (!isReady()) {\n            \r\n            logger.info(\"Callbackhandler {} with path {} is in reset state. Stop subscription to ZK client to avoid leaking\",\n                this, parentPath);\n            return;\n          }\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          changeContext.setIsChildChange(true);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","date":"2020-11-10 03:50:29","endLine":752,"groupId":"10793","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"handleChildChange","params":"(StringparentPath@List<String>currentChilds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a5/7a678182f7725c56476b28c13e6121f728d7c3.src","preCode":"  public void handleChildChange(String parentPath, List<String> currentChilds) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Data change callback: child changed, path: {} , current child count: {}\",\n          parentPath, currentChilds == null ? 0 : currentChilds.size());\n    }\n\n    try {\n      updateNotificationTime(System.nanoTime());\n      if (parentPath != null && parentPath.startsWith(_path)) {\n        if (currentChilds == null && parentPath.equals(_path)) {\n          \r\n          \r\n          boolean rt = _manager.removeListener(_propertyKey, _listener);\n          logger.info(\"CallbackHandler {} removed with status {}\", _uid, rt);\n        } else {\n          if (!isReady()) {\n            \r\n            logger.info(\"Callbackhandler {} with path {} is in reset state. Stop subscription to ZK client to avoid leaking\",\n                this, parentPath);\n            return;\n          }\n          NotificationContext changeContext = new NotificationContext(_manager);\n          changeContext.setType(NotificationContext.Type.CALLBACK);\n          changeContext.setPathChanged(parentPath);\n          changeContext.setChangeType(_changeType);\n          subscribeForChanges(changeContext.getType(), _path, _watchChild);\n          enqueueTask(changeContext);\n        }\n      }\n    } catch (Exception e) {\n      String msg = \"exception in handling child-change. instance: \" + _manager.getInstanceName()\n          + \", parentPath: \" + parentPath + \", listener: \" + _listener;\n      ZKExceptionHandler.getInstance().handle(msg, e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":718,"status":"M"}],"commitId":"11fa63ae3039cbf2dc56ca1c9596e8379751db0c","commitMessage":"@@@Remove duplicate subscribe in CallBackHandler (#1504)\n\nRemove duplicate subscribe in CallBackHandler.handleChildChange()\n\nDuplicate subscribes lead to longer time spend when process callbacks in zkClient.  which eventually leads to increased PendingCallback queue size. This PR removes duplicate subscribeForChanges in CallBackHandler to improve performance.","date":"2020-11-10 03:50:29","modifiedFileCount":"3","status":"M","submitter":"xyuanlu"}]
