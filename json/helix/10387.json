[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testResourceTaggedFirst() throws Exception {\n    final int NUM_PARTICIPANTS = 10;\n    final int NUM_PARTITIONS = 4;\n    final int NUM_REPLICAS = 2;\n    final String RESOURCE_NAME = \"TestDB0\";\n    final String TAG = \"ASSIGNABLE\";\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        NUM_PARTITIONS, \r\n        NUM_PARTICIPANTS, \r\n        NUM_REPLICAS, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, \r\n        true); \r\n\n    \r\n    HelixAdmin helixAdmin = new ZKHelixAdmin(ZK_ADDR);\n    IdealState idealState = helixAdmin.getResourceIdealState(clusterName, RESOURCE_NAME);\n    idealState.setInstanceGroupTag(TAG);\n    helixAdmin.setResourceIdealState(clusterName, RESOURCE_NAME, idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[NUM_PARTICIPANTS];\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    Thread.sleep(1000);\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new EmptyZkVerifier(clusterName, RESOURCE_NAME));\n    Assert.assertTrue(result, \"External view and current state must be empty\");\n\n    \r\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      participants[i].syncStop();\n    }\n    controller.syncStop();\n  }\n","date":"2017-11-08 08:48:26","endLine":222,"groupId":"4536","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResourceTaggedFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/81/3ee69e30aca41c0aad125015ddba101f8da23a.src","preCode":"  public void testResourceTaggedFirst() throws Exception {\n    final int NUM_PARTICIPANTS = 10;\n    final int NUM_PARTITIONS = 4;\n    final int NUM_REPLICAS = 2;\n    final String RESOURCE_NAME = \"TestDB0\";\n    final String TAG = \"ASSIGNABLE\";\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        NUM_PARTITIONS, \r\n        NUM_PARTICIPANTS, \r\n        NUM_REPLICAS, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, \r\n        true); \r\n\n    \r\n    HelixAdmin helixAdmin = new ZKHelixAdmin(ZK_ADDR);\n    IdealState idealState = helixAdmin.getResourceIdealState(clusterName, RESOURCE_NAME);\n    idealState.setInstanceGroupTag(TAG);\n    helixAdmin.setResourceIdealState(clusterName, RESOURCE_NAME, idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[NUM_PARTICIPANTS];\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    Thread.sleep(1000);\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new EmptyZkVerifier(clusterName, RESOURCE_NAME));\n    Assert.assertTrue(result, \"External view and current state must be empty\");\n\n    \r\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      participants[i].syncStop();\n    }\n    controller.syncStop();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestFullAutoNodeTagging.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testSafeAssignment() throws Exception {\n    final int NUM_PARTICIPANTS = 10;\n    final int NUM_PARTITIONS = 4;\n    final int NUM_REPLICAS = 2;\n    final String RESOURCE_NAME = \"TestDB0\";\n    final String TAG = \"ASSIGNABLE\";\n\n    final String[] TAGGED_NODES = {\n        \"localhost_12920\", \"localhost_12922\", \"localhost_12924\", \"localhost_12925\"\n    };\n    Set<String> taggedNodes = Sets.newHashSet(TAGGED_NODES);\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        NUM_PARTITIONS, \r\n        NUM_PARTICIPANTS, \r\n        NUM_REPLICAS, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, \r\n        true); \r\n\n    \r\n    HelixAdmin helixAdmin = new ZKHelixAdmin(ZK_ADDR);\n    for (String taggedNode : TAGGED_NODES) {\n      helixAdmin.addInstanceTag(clusterName, taggedNode, TAG);\n    }\n    IdealState idealState = helixAdmin.getResourceIdealState(clusterName, RESOURCE_NAME);\n    idealState.setInstanceGroupTag(TAG);\n    helixAdmin.setResourceIdealState(clusterName, RESOURCE_NAME, idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[NUM_PARTICIPANTS];\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n\n      \r\n      if (taggedNodes.contains(instanceName)) {\n        \r\n        Thread.sleep(500);\n        boolean result =\n            ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n        Assert.assertTrue(result);\n\n        \r\n        result =\n            ClusterStateVerifier.verifyByZkCallback(new TaggedZkVerifier(clusterName,\n                RESOURCE_NAME, TAGGED_NODES, false));\n        Assert.assertTrue(result, \"initial assignment with all tagged nodes live is invalid\");\n      }\n    }\n\n    \r\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      String participantName = participants[i].getInstanceName();\n      participants[i].syncStop();\n      if (taggedNodes.contains(participantName)) {\n        \r\n        taggedNodes.remove(participantName);\n        Thread.sleep(500);\n        boolean result =\n            ClusterStateVerifier.verifyByZkCallback(new TaggedZkVerifier(clusterName,\n                RESOURCE_NAME, TAGGED_NODES, taggedNodes.isEmpty()));\n        Assert.assertTrue(result, \"incorrect state after removing \" + participantName + \", \"\n            + taggedNodes + \" remain\");\n      }\n    }\n    controller.syncStop();\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":315,"groupId":"4536","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSafeAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/81/3ee69e30aca41c0aad125015ddba101f8da23a.src","preCode":"  public void testSafeAssignment() throws Exception {\n    final int NUM_PARTICIPANTS = 10;\n    final int NUM_PARTITIONS = 4;\n    final int NUM_REPLICAS = 2;\n    final String RESOURCE_NAME = \"TestDB0\";\n    final String TAG = \"ASSIGNABLE\";\n\n    final String[] TAGGED_NODES = {\n        \"localhost_12920\", \"localhost_12922\", \"localhost_12924\", \"localhost_12925\"\n    };\n    Set<String> taggedNodes = Sets.newHashSet(TAGGED_NODES);\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        NUM_PARTITIONS, \r\n        NUM_PARTICIPANTS, \r\n        NUM_REPLICAS, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, \r\n        true); \r\n\n    \r\n    HelixAdmin helixAdmin = new ZKHelixAdmin(ZK_ADDR);\n    for (String taggedNode : TAGGED_NODES) {\n      helixAdmin.addInstanceTag(clusterName, taggedNode, TAG);\n    }\n    IdealState idealState = helixAdmin.getResourceIdealState(clusterName, RESOURCE_NAME);\n    idealState.setInstanceGroupTag(TAG);\n    helixAdmin.setResourceIdealState(clusterName, RESOURCE_NAME, idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[NUM_PARTICIPANTS];\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n\n      \r\n      if (taggedNodes.contains(instanceName)) {\n        \r\n        Thread.sleep(500);\n        boolean result =\n            ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n        Assert.assertTrue(result);\n\n        \r\n        result =\n            ClusterStateVerifier.verifyByZkCallback(new TaggedZkVerifier(clusterName,\n                RESOURCE_NAME, TAGGED_NODES, false));\n        Assert.assertTrue(result, \"initial assignment with all tagged nodes live is invalid\");\n      }\n    }\n\n    \r\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      String participantName = participants[i].getInstanceName();\n      participants[i].syncStop();\n      if (taggedNodes.contains(participantName)) {\n        \r\n        taggedNodes.remove(participantName);\n        Thread.sleep(500);\n        boolean result =\n            ClusterStateVerifier.verifyByZkCallback(new TaggedZkVerifier(clusterName,\n                RESOURCE_NAME, TAGGED_NODES, taggedNodes.isEmpty()));\n        Assert.assertTrue(result, \"incorrect state after removing \" + participantName + \", \"\n            + taggedNodes + \" remain\");\n      }\n    }\n    controller.syncStop();\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestFullAutoNodeTagging.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testResourceTaggedFirst() throws Exception {\n    final int NUM_PARTICIPANTS = 10;\n    final int NUM_PARTITIONS = 4;\n    final int NUM_REPLICAS = 2;\n    final String RESOURCE_NAME = \"TestDB0\";\n    final String TAG = \"ASSIGNABLE\";\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        NUM_PARTITIONS, \r\n        NUM_PARTICIPANTS, \r\n        NUM_REPLICAS, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, \r\n        true); \r\n\n    \r\n    HelixAdmin helixAdmin = new ZKHelixAdmin(ZK_ADDR);\n    IdealState idealState = helixAdmin.getResourceIdealState(clusterName, RESOURCE_NAME);\n    idealState.setInstanceGroupTag(TAG);\n    helixAdmin.setResourceIdealState(clusterName, RESOURCE_NAME, idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[NUM_PARTICIPANTS];\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    Thread.sleep(1000);\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new EmptyZkVerifier(clusterName, RESOURCE_NAME));\n    Assert.assertTrue(result, \"External view and current state must be empty\");\n\n    \r\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      participants[i].syncStop();\n    }\n    controller.syncStop();\n    TestHelper.dropCluster(clusterName, _gZkClient);\n  }\n","date":"2018-07-14 02:20:49","endLine":231,"groupId":"10387","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResourceTaggedFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b9/66f868a87ba555f1c7a092acd4023a22e4bf65.src","preCode":"  public void testResourceTaggedFirst() throws Exception {\n    final int NUM_PARTICIPANTS = 10;\n    final int NUM_PARTITIONS = 4;\n    final int NUM_REPLICAS = 2;\n    final String RESOURCE_NAME = \"TestDB0\";\n    final String TAG = \"ASSIGNABLE\";\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        NUM_PARTITIONS, \r\n        NUM_PARTICIPANTS, \r\n        NUM_REPLICAS, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, \r\n        true); \r\n\n    \r\n    HelixAdmin helixAdmin = new ZKHelixAdmin(ZK_ADDR);\n    IdealState idealState = helixAdmin.getResourceIdealState(clusterName, RESOURCE_NAME);\n    idealState.setInstanceGroupTag(TAG);\n    helixAdmin.setResourceIdealState(clusterName, RESOURCE_NAME, idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[NUM_PARTICIPANTS];\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    Thread.sleep(1000);\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new EmptyZkVerifier(clusterName, RESOURCE_NAME));\n    Assert.assertTrue(result, \"External view and current state must be empty\");\n\n    \r\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      participants[i].syncStop();\n    }\n    controller.syncStop();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestFullAutoNodeTagging.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testSafeAssignment() throws Exception {\n    final int NUM_PARTICIPANTS = 10;\n    final int NUM_PARTITIONS = 4;\n    final int NUM_REPLICAS = 2;\n    final String RESOURCE_NAME = \"TestDB0\";\n    final String TAG = \"ASSIGNABLE\";\n\n    final String[] TAGGED_NODES = {\n        \"localhost_12920\", \"localhost_12922\", \"localhost_12924\", \"localhost_12925\"\n    };\n    Set<String> taggedNodes = Sets.newHashSet(TAGGED_NODES);\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        NUM_PARTITIONS, \r\n        NUM_PARTICIPANTS, \r\n        NUM_REPLICAS, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, \r\n        true); \r\n\n    \r\n    HelixAdmin helixAdmin = new ZKHelixAdmin(ZK_ADDR);\n    for (String taggedNode : TAGGED_NODES) {\n      helixAdmin.addInstanceTag(clusterName, taggedNode, TAG);\n    }\n    IdealState idealState = helixAdmin.getResourceIdealState(clusterName, RESOURCE_NAME);\n    idealState.setInstanceGroupTag(TAG);\n    helixAdmin.setResourceIdealState(clusterName, RESOURCE_NAME, idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[NUM_PARTICIPANTS];\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n\n      \r\n      if (taggedNodes.contains(instanceName)) {\n        \r\n        Thread.sleep(500);\n        boolean result =\n            ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n        Assert.assertTrue(result);\n\n        \r\n        result =\n            ClusterStateVerifier.verifyByZkCallback(new TaggedZkVerifier(clusterName,\n                RESOURCE_NAME, TAGGED_NODES, false));\n        Assert.assertTrue(result, \"initial assignment with all tagged nodes live is invalid\");\n      }\n    }\n\n    \r\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      String participantName = participants[i].getInstanceName();\n      participants[i].syncStop();\n      if (taggedNodes.contains(participantName)) {\n        \r\n        taggedNodes.remove(participantName);\n        Thread.sleep(500);\n        boolean result =\n            ClusterStateVerifier.verifyByZkCallback(new TaggedZkVerifier(clusterName,\n                RESOURCE_NAME, TAGGED_NODES, taggedNodes.isEmpty()));\n        Assert.assertTrue(result, \"incorrect state after removing \" + participantName + \", \"\n            + taggedNodes + \" remain\");\n      }\n    }\n    controller.syncStop();\n    TestHelper.dropCluster(clusterName, _gZkClient);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":325,"groupId":"10387","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSafeAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b9/66f868a87ba555f1c7a092acd4023a22e4bf65.src","preCode":"  public void testSafeAssignment() throws Exception {\n    final int NUM_PARTICIPANTS = 10;\n    final int NUM_PARTITIONS = 4;\n    final int NUM_REPLICAS = 2;\n    final String RESOURCE_NAME = \"TestDB0\";\n    final String TAG = \"ASSIGNABLE\";\n\n    final String[] TAGGED_NODES = {\n        \"localhost_12920\", \"localhost_12922\", \"localhost_12924\", \"localhost_12925\"\n    };\n    Set<String> taggedNodes = Sets.newHashSet(TAGGED_NODES);\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        NUM_PARTITIONS, \r\n        NUM_PARTICIPANTS, \r\n        NUM_REPLICAS, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, \r\n        true); \r\n\n    \r\n    HelixAdmin helixAdmin = new ZKHelixAdmin(ZK_ADDR);\n    for (String taggedNode : TAGGED_NODES) {\n      helixAdmin.addInstanceTag(clusterName, taggedNode, TAG);\n    }\n    IdealState idealState = helixAdmin.getResourceIdealState(clusterName, RESOURCE_NAME);\n    idealState.setInstanceGroupTag(TAG);\n    helixAdmin.setResourceIdealState(clusterName, RESOURCE_NAME, idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[NUM_PARTICIPANTS];\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n\n      \r\n      if (taggedNodes.contains(instanceName)) {\n        \r\n        Thread.sleep(500);\n        boolean result =\n            ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n        Assert.assertTrue(result);\n\n        \r\n        result =\n            ClusterStateVerifier.verifyByZkCallback(new TaggedZkVerifier(clusterName,\n                RESOURCE_NAME, TAGGED_NODES, false));\n        Assert.assertTrue(result, \"initial assignment with all tagged nodes live is invalid\");\n      }\n    }\n\n    \r\n    for (int i = 0; i < NUM_PARTICIPANTS; i++) {\n      String participantName = participants[i].getInstanceName();\n      participants[i].syncStop();\n      if (taggedNodes.contains(participantName)) {\n        \r\n        taggedNodes.remove(participantName);\n        Thread.sleep(500);\n        boolean result =\n            ClusterStateVerifier.verifyByZkCallback(new TaggedZkVerifier(clusterName,\n                RESOURCE_NAME, TAGGED_NODES, taggedNodes.isEmpty()));\n        Assert.assertTrue(result, \"incorrect state after removing \" + participantName + \", \"\n            + taggedNodes + \" remain\");\n      }\n    }\n    controller.syncStop();\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestFullAutoNodeTagging.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"}]
