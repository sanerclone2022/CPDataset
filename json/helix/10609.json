[{"authorTime":"2014-03-07 07:37:49","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":2,"curCode":"  private void clearStatusUpdate(String clusterName,\n                                 String instance,\n                                 String resource,\n                                 String partition)\n  {\n    \r\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(instance));\n    accessor.removeProperty(keyBuilder.stateTransitionStatus(instance,\n                                                             liveInstance.getSessionId(),\n                                                             resource,\n                                                             partition));\n\n  }\n","date":"2012-10-25 07:14:36","endLine":222,"groupId":"3211","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"clearStatusUpdate","params":"(StringclusterName@Stringinstance@Stringresource@Stringpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/48/607788d1253ec7e2261f8e78100e39dcdf2abc.src","preCode":"  private void clearStatusUpdate(String clusterName,\n                                 String instance,\n                                 String resource,\n                                 String partition)\n  {\n    \r\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(instance));\n    accessor.removeProperty(keyBuilder.stateTransitionStatus(instance,\n                                                             liveInstance.getSessionId(),\n                                                             resource,\n                                                             partition));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetPartitionState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"NB"},{"authorDate":"2014-03-07 07:37:49","commitOrder":2,"curCode":"  private void clearStatusUpdate(String clusterName, String instance, String resource,\n      String partition) {\n    \r\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(instance));\n    accessor.removeProperty(keyBuilder.stateTransitionStatus(instance, liveInstance.getSessionId(),\n        resource, partition));\n\n  }\n","date":"2014-03-07 09:50:46","endLine":191,"groupId":"3211","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"clearStatusUpdate","params":"(StringclusterName@Stringinstance@Stringresource@Stringpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dd/f2ec117c4437c31154a9819b25b284b7b479e3.src","preCode":"  private void clearStatusUpdate(String clusterName, String instance, String resource,\n      String partition) {\n    \r\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(instance));\n    accessor.removeProperty(keyBuilder.stateTransitionStatus(instance, liveInstance.getSessionId(),\n        resource, partition));\n\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestResetPartitionState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"24eacbc92f03b1b71528861a6b1ecf473c8c5231","commitMessage":"@@@[HELIX-398] Prevent helix-admin-webapp from running helix-core tests\n","date":"2014-03-07 09:50:46","modifiedFileCount":"1","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2019-06-18 05:37:02","codes":[{"authorDate":"2019-06-18 05:37:02","commitOrder":3,"curCode":"  private void clearStatusUpdate(String clusterName, String instance, String resource,\n      String partition) {\n    \r\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(instance));\n    accessor.removeProperty(keyBuilder.stateTransitionStatus(instance, liveInstance.getEphemeralOwner(),\n        resource, partition));\n\n  }\n","date":"2019-06-25 07:46:15","endLine":195,"groupId":"10609","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"clearStatusUpdate","params":"(StringclusterName@Stringinstance@Stringresource@Stringpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f9/a6111c90c9e74013406589c256b1f812a4ae3c.src","preCode":"  private void clearStatusUpdate(String clusterName, String instance, String resource,\n      String partition) {\n    \r\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(instance));\n    accessor.removeProperty(keyBuilder.stateTransitionStatus(instance, liveInstance.getSessionId(),\n        resource, partition));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResetPartitionState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"},{"authorDate":"2019-06-18 05:37:02","commitOrder":3,"curCode":"  private void clearStatusUpdate(String clusterName, String instance, String resource,\n      String partition) {\n    \r\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(instance));\n    accessor.removeProperty(keyBuilder.stateTransitionStatus(instance, liveInstance.getEphemeralOwner(),\n        resource, partition));\n\n  }\n","date":"2019-06-25 07:46:15","endLine":192,"groupId":"10609","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"clearStatusUpdate","params":"(StringclusterName@Stringinstance@Stringresource@Stringpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8d/994e878ce3f519565276d7d35c49ec589b171e.src","preCode":"  private void clearStatusUpdate(String clusterName, String instance, String resource,\n      String partition) {\n    \r\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(instance));\n    accessor.removeProperty(keyBuilder.stateTransitionStatus(instance, liveInstance.getSessionId(),\n        resource, partition));\n\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestResetPartitionState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"ad0c2edb31a4d0e5c455d1fa0f96658bac1382d5","commitMessage":"@@@Always try reading from EphemeralOwner state first while reading the session ID from a live instance node.\n\nThis is to avoid inconsistent session ID in the node content and the emphemeral owner state.\nNote that in order to ensure backward compatiblity and some test cases.  the newly introduced method will still read from the node content if the ephemeral owner state is empty (-1 or 0).\n\nRB=1704942\nBUG=HELIX-1969\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-06-25 07:46:15","modifiedFileCount":"33","status":"M","submitter":"Jiajun Wang"}]
