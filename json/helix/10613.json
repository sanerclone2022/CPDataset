[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2018-08-04 08:55:04","commitOrder":2,"curCode":"  public void TestMessageSimpleSendReceiveAsync() throws Exception {\n    String hostDest = \"localhost_\" + (START_PORT + 1);\n\n    TestMessagingHandlerFactory factory = new TestMessagingHandlerFactory();\n    _participants[1].getMessagingService()\n        .registerMessageHandlerFactory(factory.getMessageTypes(), factory);\n    _participants[0].getMessagingService()\n        .registerMessageHandlerFactory(factory.getMessageTypes(), factory);\n\n    String msgId = new UUID(123, 456).toString();\n    Message msg = new Message(factory.getMessageTypes().get(0), msgId);\n    msg.setMsgId(msgId);\n    msg.setSrcName(_hostSrc);\n    msg.setTgtSessionId(\"*\");\n    msg.setMsgState(MessageState.NEW);\n    String para = \"Testing messaging para\";\n    msg.getRecord().setSimpleField(\"TestMessagingPara\", para);\n\n    Criteria cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setClusterName(CLUSTER_NAME);\n\n    TestAsyncCallback callback = new TestAsyncCallback(60000);\n\n    _adminController.getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    TestAsyncCallback callback2 = new TestAsyncCallback(500);\n    _adminController.getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n    cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setDataSource(DataSource.IDEALSTATES);\n    cr.setClusterName(CLUSTER_NAME);\n\n    callback = new TestAsyncCallback(60000);\n\n    _adminController.getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    callback2 = new TestAsyncCallback(500);\n    _adminController.getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n  }\n","date":"2018-09-22 05:17:45","endLine":173,"groupId":"6097","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"TestMessageSimpleSendReceiveAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fe/38c6dbd1aaf6c7df71e5ea0a9e0d9bf0840db1.src","preCode":"  public void TestMessageSimpleSendReceiveAsync() throws Exception {\n    String hostDest = \"localhost_\" + (START_PORT + 1);\n\n    TestMessagingHandlerFactory factory = new TestMessagingHandlerFactory();\n    _participants[1].getMessagingService()\n        .registerMessageHandlerFactory(factory.getMessageTypes(), factory);\n    _participants[0].getMessagingService()\n        .registerMessageHandlerFactory(factory.getMessageTypes(), factory);\n\n    String msgId = new UUID(123, 456).toString();\n    Message msg = new Message(factory.getMessageTypes().get(0), msgId);\n    msg.setMsgId(msgId);\n    msg.setSrcName(_hostSrc);\n    msg.setTgtSessionId(\"*\");\n    msg.setMsgState(MessageState.NEW);\n    String para = \"Testing messaging para\";\n    msg.getRecord().setSimpleField(\"TestMessagingPara\", para);\n\n    Criteria cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setClusterName(CLUSTER_NAME);\n\n    TestAsyncCallback callback = new TestAsyncCallback(60000);\n\n    _adminController.getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    TestAsyncCallback callback2 = new TestAsyncCallback(500);\n    _adminController.getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n    cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setDataSource(DataSource.IDEALSTATES);\n    cr.setClusterName(CLUSTER_NAME);\n\n    callback = new TestAsyncCallback(60000);\n\n    _adminController.getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    callback2 = new TestAsyncCallback(500);\n    _adminController.getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestCrossClusterMessagingService.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":2,"curCode":"  public void TestMessageSimpleSendReceiveAsync() throws Exception {\n    String hostSrc = \"localhost_\" + START_PORT;\n    String hostDest = \"localhost_\" + (START_PORT + 1);\n\n    TestMessagingHandlerFactory factory = new TestMessagingHandlerFactory();\n    _participants[1].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n\n    _participants[0].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n\n    String msgId = new UUID(123, 456).toString();\n    Message msg = new Message(factory.getMessageTypes().get(0), msgId);\n    msg.setMsgId(msgId);\n    msg.setSrcName(hostSrc);\n\n    msg.setTgtSessionId(\"*\");\n    msg.setMsgState(MessageState.NEW);\n    String para = \"Testing messaging para\";\n    msg.getRecord().setSimpleField(\"TestMessagingPara\", para);\n\n    Criteria cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n\n    TestAsyncCallback callback = new TestAsyncCallback(60000);\n\n    _participants[0].getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    \r\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    TestAsyncCallback callback2 = new TestAsyncCallback(500);\n    _participants[0].getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    \r\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n    cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setDataSource(DataSource.IDEALSTATES);\n\n    callback = new TestAsyncCallback(60000);\n\n    _participants[0].getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    \r\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    callback2 = new TestAsyncCallback(500);\n    _participants[0].getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    \r\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n  }\n","date":"2017-11-08 08:48:26","endLine":250,"groupId":"475","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"TestMessageSimpleSendReceiveAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9b/184209def6c5198d523bb3f171c5ceaf59f765.src","preCode":"  public void TestMessageSimpleSendReceiveAsync() throws Exception {\n    String hostSrc = \"localhost_\" + START_PORT;\n    String hostDest = \"localhost_\" + (START_PORT + 1);\n\n    TestMessagingHandlerFactory factory = new TestMessagingHandlerFactory();\n    _participants[1].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n\n    _participants[0].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n\n    String msgId = new UUID(123, 456).toString();\n    Message msg = new Message(factory.getMessageTypes().get(0), msgId);\n    msg.setMsgId(msgId);\n    msg.setSrcName(hostSrc);\n\n    msg.setTgtSessionId(\"*\");\n    msg.setMsgState(MessageState.NEW);\n    String para = \"Testing messaging para\";\n    msg.getRecord().setSimpleField(\"TestMessagingPara\", para);\n\n    Criteria cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n\n    TestAsyncCallback callback = new TestAsyncCallback(60000);\n\n    _participants[0].getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    \r\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    TestAsyncCallback callback2 = new TestAsyncCallback(500);\n    _participants[0].getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    \r\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n    cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setDataSource(DataSource.IDEALSTATES);\n\n    callback = new TestAsyncCallback(60000);\n\n    _participants[0].getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    \r\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    callback2 = new TestAsyncCallback(500);\n    _participants[0].getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    \r\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestMessagingService.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"NB"}],"commitId":"b91d6eee47598842707c109a8bc47bfb1390ec78","commitMessage":"@@@Supporting cross cluster message service.\n\nThis feature is for supporting a complex application scenario. This application is deployed as 2 Helix clusters. The brains that manage business logic are controlled in a CONTROLLER Helix cluster.  while the workers are managered in a separate WORKER Helix cluster. This brain nodes of the application rely on Helix messaging service to send commands. Due to the communication requirement between these 2 Helix clusters.  Helix needs to support cross cluster messaging.\n\nIn this change.  we introduced target_cluster_name field into message criteria. Once specified.  the messaging node will send message to the specified cluster scope. The other features.  like reply.  work in the same way as before. The sender node in Cluster A will get message reply from Cluster B nodes.\n\nNote that we are not supporting cross ZK messaging. Also.  relay message won't cross cluster as well.\n","date":"2018-09-22 05:17:45","modifiedFileCount":"6","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"  public void TestMessageSimpleSendReceiveAsync() throws Exception {\n    String hostDest = \"localhost_\" + (START_PORT + 1);\n\n    TestMessagingHandlerFactory factory = new TestMessagingHandlerFactory();\n    _participants[1].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n    _participants[0].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n\n    String msgId = new UUID(123, 456).toString();\n    Message msg = new Message(factory.getMessageTypes().get(0), msgId);\n    msg.setMsgId(msgId);\n    msg.setSrcName(_hostSrc);\n    msg.setTgtSessionId(\"*\");\n    msg.setMsgState(MessageState.NEW);\n    String para = \"Testing messaging para\";\n    msg.getRecord().setSimpleField(\"TestMessagingPara\", para);\n\n    Criteria cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setClusterName(CLUSTER_NAME);\n\n    TestAsyncCallback callback = new TestAsyncCallback(60000);\n\n    _adminController.getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertEquals(callback.getMessageReplied().size(), 1);\n\n    TestAsyncCallback callback2 = new TestAsyncCallback(500);\n    _adminController.getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n    cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setDataSource(DataSource.IDEALSTATES);\n    cr.setClusterName(CLUSTER_NAME);\n\n    callback = new TestAsyncCallback(60000);\n\n    _adminController.getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertEquals(callback.getMessageReplied().size(), 1);\n\n    callback2 = new TestAsyncCallback(500);\n    _adminController.getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n  }\n","date":"2019-05-25 09:19:21","endLine":172,"groupId":"10613","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"TestMessageSimpleSendReceiveAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/64/dbbea9c7620e7d127563786dfaad19bffadf75.src","preCode":"  public void TestMessageSimpleSendReceiveAsync() throws Exception {\n    String hostDest = \"localhost_\" + (START_PORT + 1);\n\n    TestMessagingHandlerFactory factory = new TestMessagingHandlerFactory();\n    _participants[1].getMessagingService()\n        .registerMessageHandlerFactory(factory.getMessageTypes(), factory);\n    _participants[0].getMessagingService()\n        .registerMessageHandlerFactory(factory.getMessageTypes(), factory);\n\n    String msgId = new UUID(123, 456).toString();\n    Message msg = new Message(factory.getMessageTypes().get(0), msgId);\n    msg.setMsgId(msgId);\n    msg.setSrcName(_hostSrc);\n    msg.setTgtSessionId(\"*\");\n    msg.setMsgState(MessageState.NEW);\n    String para = \"Testing messaging para\";\n    msg.getRecord().setSimpleField(\"TestMessagingPara\", para);\n\n    Criteria cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setClusterName(CLUSTER_NAME);\n\n    TestAsyncCallback callback = new TestAsyncCallback(60000);\n\n    _adminController.getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    TestAsyncCallback callback2 = new TestAsyncCallback(500);\n    _adminController.getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n    cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setDataSource(DataSource.IDEALSTATES);\n    cr.setClusterName(CLUSTER_NAME);\n\n    callback = new TestAsyncCallback(60000);\n\n    _adminController.getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    callback2 = new TestAsyncCallback(500);\n    _adminController.getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestCrossClusterMessagingService.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  public void TestMessageSimpleSendReceiveAsync() throws Exception {\n    String hostSrc = \"localhost_\" + START_PORT;\n    String hostDest = \"localhost_\" + (START_PORT + 1);\n\n    TestMessagingHandlerFactory factory = new TestMessagingHandlerFactory();\n    _participants[1].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n\n    _participants[0].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n\n    String msgId = new UUID(123, 456).toString();\n    Message msg = new Message(factory.getMessageTypes().get(0), msgId);\n    msg.setMsgId(msgId);\n    msg.setSrcName(hostSrc);\n\n    msg.setTgtSessionId(\"*\");\n    msg.setMsgState(MessageState.NEW);\n    String para = \"Testing messaging para\";\n    msg.getRecord().setSimpleField(\"TestMessagingPara\", para);\n\n    Criteria cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n\n    TestAsyncCallback callback = new TestAsyncCallback(60000);\n\n    _participants[0].getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    \r\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    TestAsyncCallback callback2 = new TestAsyncCallback(500);\n    _participants[0].getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    \r\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n    cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setDataSource(DataSource.IDEALSTATES);\n\n    callback = new TestAsyncCallback(60000);\n\n    _participants[0].getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    \r\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    callback2 = new TestAsyncCallback(500);\n    _participants[0].getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    \r\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n  }\n","date":"2017-11-08 08:48:26","endLine":250,"groupId":"10613","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"TestMessageSimpleSendReceiveAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9b/184209def6c5198d523bb3f171c5ceaf59f765.src","preCode":"  public void TestMessageSimpleSendReceiveAsync() throws Exception {\n    String hostSrc = \"localhost_\" + START_PORT;\n    String hostDest = \"localhost_\" + (START_PORT + 1);\n\n    TestMessagingHandlerFactory factory = new TestMessagingHandlerFactory();\n    _participants[1].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n\n    _participants[0].getMessagingService().registerMessageHandlerFactory(factory.getMessageTypes(),\n        factory);\n\n    String msgId = new UUID(123, 456).toString();\n    Message msg = new Message(factory.getMessageTypes().get(0), msgId);\n    msg.setMsgId(msgId);\n    msg.setSrcName(hostSrc);\n\n    msg.setTgtSessionId(\"*\");\n    msg.setMsgState(MessageState.NEW);\n    String para = \"Testing messaging para\";\n    msg.getRecord().setSimpleField(\"TestMessagingPara\", para);\n\n    Criteria cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n\n    TestAsyncCallback callback = new TestAsyncCallback(60000);\n\n    _participants[0].getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    \r\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    TestAsyncCallback callback2 = new TestAsyncCallback(500);\n    _participants[0].getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    \r\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n    cr = new Criteria();\n    cr.setInstanceName(hostDest);\n    cr.setRecipientInstanceType(InstanceType.PARTICIPANT);\n    cr.setSessionSpecific(false);\n    cr.setDataSource(DataSource.IDEALSTATES);\n\n    callback = new TestAsyncCallback(60000);\n\n    _participants[0].getMessagingService().send(cr, msg, callback, 60000);\n\n    Thread.sleep(2000);\n    \r\n    AssertJUnit.assertTrue(TestAsyncCallback._replyedMessageContents.contains(\"TestReplyMessage\"));\n    AssertJUnit.assertTrue(callback.getMessageReplied().size() == 1);\n\n    callback2 = new TestAsyncCallback(500);\n    _participants[0].getMessagingService().send(cr, msg, callback2, 500);\n\n    Thread.sleep(3000);\n    \r\n    AssertJUnit.assertTrue(callback2.isTimedOut());\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestMessagingService.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
