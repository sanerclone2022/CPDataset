[{"authorTime":"2020-03-04 09:37:15","codes":[{"authorDate":"2020-03-04 09:37:15","commitOrder":3,"curCode":"  public boolean addShardingKey(String namespace, String realm, String shardingKey) {\n    if (!_routingDataWriterMap.containsKey(namespace)) {\n      \r\n      \r\n      throw new NoSuchElementException(\n          \"Failed to add sharding key: Namespace \" + namespace + \" is not found!\");\n    }\n    synchronized (this) {\n      if (_routingDataMap.containsKey(namespace) && _routingDataMap.get(namespace)\n          .containsKeyRealmPair(shardingKey, realm)) {\n        return true;\n      }\n      if (_routingDataMap.containsKey(namespace) && !_routingDataMap.get(namespace)\n          .isShardingKeyInsertionValid(shardingKey)) {\n        throw new IllegalArgumentException(\n            \"Failed to add sharding key: Adding sharding key \" + shardingKey\n                + \" makes routing data invalid!\");\n      }\n      boolean result = _routingDataWriterMap.get(namespace).addShardingKey(realm, shardingKey);\n      refreshRoutingData(namespace);\n      return result;\n    }\n  }\n","date":"2020-04-09 08:23:30","endLine":270,"groupId":"1853","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addShardingKey","params":"(Stringnamespace@Stringrealm@StringshardingKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c8/3245f614f6c706950ef9b73ebee9ef65408ef7.src","preCode":"  public boolean addShardingKey(String namespace, String realm, String shardingKey) {\n    if (!_routingDataWriterMap.containsKey(namespace)) {\n      \r\n      \r\n      throw new NoSuchElementException(\n          \"Failed to add sharding key: Namespace \" + namespace + \" is not found!\");\n    }\n    synchronized (this) {\n      if (_routingDataMap.containsKey(namespace) && _routingDataMap.get(namespace)\n          .containsKeyRealmPair(shardingKey, realm)) {\n        return true;\n      }\n      if (_routingDataMap.containsKey(namespace) && !_routingDataMap.get(namespace)\n          .isShardingKeyInsertionValid(shardingKey)) {\n        throw new IllegalArgumentException(\n            \"Failed to add sharding key: Adding sharding key \" + shardingKey\n                + \" makes routing data invalid!\");\n      }\n      boolean result = _routingDataWriterMap.get(namespace).addShardingKey(realm, shardingKey);\n      refreshRoutingData(namespace);\n      return result;\n    }\n  }\n","realPath":"helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"MB"},{"authorDate":"2020-03-04 09:37:15","commitOrder":3,"curCode":"  public boolean deleteShardingKey(String namespace, String realm, String shardingKey) {\n    if (!_routingDataWriterMap.containsKey(namespace)) {\n      \r\n      \r\n      throw new NoSuchElementException(\n          \"Failed to delete sharding key: Namespace \" + namespace + \" is not found!\");\n    }\n    synchronized (this) {\n      boolean result = _routingDataWriterMap.get(namespace).deleteShardingKey(realm, shardingKey);\n      refreshRoutingData(namespace);\n      return result;\n    }\n  }\n","date":"2020-04-09 08:23:30","endLine":285,"groupId":"1853","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteShardingKey","params":"(Stringnamespace@Stringrealm@StringshardingKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c8/3245f614f6c706950ef9b73ebee9ef65408ef7.src","preCode":"  public boolean deleteShardingKey(String namespace, String realm, String shardingKey) {\n    if (!_routingDataWriterMap.containsKey(namespace)) {\n      \r\n      \r\n      throw new NoSuchElementException(\n          \"Failed to delete sharding key: Namespace \" + namespace + \" is not found!\");\n    }\n    synchronized (this) {\n      boolean result = _routingDataWriterMap.get(namespace).deleteShardingKey(realm, shardingKey);\n      refreshRoutingData(namespace);\n      return result;\n    }\n  }\n","realPath":"helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"B"}],"commitId":"1f0d278995dba8527a1f7d6161c979bbaaae4d59","commitMessage":"@@@Implement setRoutingData for MetadataStoreDirectoryService (#844)\n\nImplement setRoutingData endpoint. Modify TrieRoutingData construction in MetadataStoreDirectory. Fix race conditions among writing operations in MetadataStoreDirectory.","date":"2020-04-09 08:23:30","modifiedFileCount":"13","status":"M","submitter":"Neal Sun"},{"authorTime":"2020-04-23 09:59:38","codes":[{"authorDate":"2020-04-23 09:59:38","commitOrder":4,"curCode":"  public boolean addShardingKey(String namespace, String realm, String shardingKey) {\n    if (!_routingDataWriterMap.containsKey(namespace)) {\n      \r\n      \r\n      throw new NoSuchElementException(\n          \"Failed to add sharding key: Namespace \" + namespace + \" is not found!\");\n    }\n    synchronized (this) {\n      if (_routingDataMap.containsKey(namespace) && _routingDataMap.get(namespace)\n          .containsKeyRealmPair(shardingKey, realm)) {\n        return true;\n      }\n      if (_routingDataMap.containsKey(namespace) && !_routingDataMap.get(namespace)\n          .isShardingKeyInsertionValid(shardingKey)) {\n        throw new IllegalArgumentException(\n            \"Failed to add sharding key: Adding sharding key \" + shardingKey\n                + \" makes routing data invalid!\");\n      }\n      if (!_routingDataWriterMap.get(namespace).addShardingKey(realm, shardingKey)) {\n        return false;\n      }\n      refreshRoutingData(namespace);\n      return true;\n    }\n  }\n","date":"2020-04-23 09:59:38","endLine":287,"groupId":"101112","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"addShardingKey","params":"(Stringnamespace@Stringrealm@StringshardingKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/37/395e1d57a34bce915723722e6b2df44d616654.src","preCode":"  public boolean addShardingKey(String namespace, String realm, String shardingKey) {\n    if (!_routingDataWriterMap.containsKey(namespace)) {\n      \r\n      \r\n      throw new NoSuchElementException(\n          \"Failed to add sharding key: Namespace \" + namespace + \" is not found!\");\n    }\n    synchronized (this) {\n      if (_routingDataMap.containsKey(namespace) && _routingDataMap.get(namespace)\n          .containsKeyRealmPair(shardingKey, realm)) {\n        return true;\n      }\n      if (_routingDataMap.containsKey(namespace) && !_routingDataMap.get(namespace)\n          .isShardingKeyInsertionValid(shardingKey)) {\n        throw new IllegalArgumentException(\n            \"Failed to add sharding key: Adding sharding key \" + shardingKey\n                + \" makes routing data invalid!\");\n      }\n      boolean result = _routingDataWriterMap.get(namespace).addShardingKey(realm, shardingKey);\n      refreshRoutingData(namespace);\n      return result;\n    }\n  }\n","realPath":"helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"},{"authorDate":"2020-04-23 09:59:38","commitOrder":4,"curCode":"  public boolean deleteShardingKey(String namespace, String realm, String shardingKey) {\n    if (!_routingDataWriterMap.containsKey(namespace)) {\n      \r\n      \r\n      throw new NoSuchElementException(\n          \"Failed to delete sharding key: Namespace \" + namespace + \" is not found!\");\n    }\n    synchronized (this) {\n      if (!_routingDataWriterMap.get(namespace).deleteShardingKey(realm, shardingKey)) {\n        return false;\n      }\n      refreshRoutingData(namespace);\n      return true;\n    }\n  }\n","date":"2020-04-23 09:59:38","endLine":304,"groupId":"101112","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteShardingKey","params":"(Stringnamespace@Stringrealm@StringshardingKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/37/395e1d57a34bce915723722e6b2df44d616654.src","preCode":"  public boolean deleteShardingKey(String namespace, String realm, String shardingKey) {\n    if (!_routingDataWriterMap.containsKey(namespace)) {\n      \r\n      \r\n      throw new NoSuchElementException(\n          \"Failed to delete sharding key: Namespace \" + namespace + \" is not found!\");\n    }\n    synchronized (this) {\n      boolean result = _routingDataWriterMap.get(namespace).deleteShardingKey(realm, shardingKey);\n      refreshRoutingData(namespace);\n      return result;\n    }\n  }\n","realPath":"helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"9106e884802a45722e7dc2068c3c51f2b730f90c","commitMessage":"@@@Fix routing data refreshing in MSDS (#955)\n\ntestSetNamespaceRoutingData is flaky because namespace is removed when refreshing routing data. It is caused by race condition between the read request after updating and data change callback to refresh routing. And routing data cache should not be refreshed if writing routing to ZK fails.\n","date":"2020-04-23 09:59:38","modifiedFileCount":"5","status":"M","submitter":"Huizhi Lu"}]
