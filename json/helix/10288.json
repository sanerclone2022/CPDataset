[{"authorTime":"2013-08-16 07:21:52","codes":[{"authorDate":"2013-08-16 07:21:52","commitOrder":1,"curCode":"  public void testSemiAutoModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[]{ \"testResourceName\" };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.AUTO);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.toString(),\n        resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.toString(),\n        currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output = event\n        .getAttribute(AttributeName.BEST_POSSIBLE_STATE.toString());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertEquals(\n          \"MASTER\",\n          output.getInstanceStateMap(\"testResourceName\", resource).get(\n              \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-16 07:21:52","endLine":75,"groupId":"4072","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSemiAutoModeCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ba/0d3d731deaecbe7a54f03aa963483bf1e5a756.src","preCode":"  public void testSemiAutoModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[]{ \"testResourceName\" };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.AUTO);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.toString(),\n        resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.toString(),\n        currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output = event\n        .getAttribute(AttributeName.BEST_POSSIBLE_STATE.toString());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertEquals(\n          \"MASTER\",\n          output.getInstanceStateMap(\"testResourceName\", resource).get(\n              \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"},{"authorDate":"2013-08-16 07:21:52","commitOrder":1,"curCode":"  public void testCustomModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[]{ \"testResourceName\" };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.CUSTOMIZED);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.toString(),\n        resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.toString(),\n        currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output = event\n        .getAttribute(AttributeName.BEST_POSSIBLE_STATE.toString());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertNull(\n          output.getInstanceStateMap(\"testResourceName\", resource).get(\n              \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-16 07:21:52","endLine":109,"groupId":"6103","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomModeCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ba/0d3d731deaecbe7a54f03aa963483bf1e5a756.src","preCode":"  public void testCustomModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[]{ \"testResourceName\" };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.CUSTOMIZED);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.toString(),\n        resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.toString(),\n        currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output = event\n        .getAttribute(AttributeName.BEST_POSSIBLE_STATE.toString());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertNull(\n          output.getInstanceStateMap(\"testResourceName\", resource).get(\n              \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"13d19e914e7deec29c5cd665e75df12eafbce1b1","commitMessage":"@@@HELIX-166: Rename modes to auto.  semi-auto.  and custom.  rb=13444\n","date":"2013-08-16 07:21:52","modifiedFileCount":"39","status":"B","submitter":"zzhang"},{"authorTime":"2017-01-07 08:31:38","codes":[{"authorDate":"2017-01-07 08:31:38","commitOrder":2,"curCode":"  public void testSemiAutoModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.AUTO);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertEquals(\"MASTER\", output.getInstanceStateMap(\"testResourceName\", resource)\n          .get(\"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-10-03 10:06:26","endLine":73,"groupId":"4072","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSemiAutoModeCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/a93acfaa06aa31275ea71d3c2d9c2331993884.src","preCode":"  public void testSemiAutoModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.AUTO);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.toString(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.toString(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.toString());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertEquals(\"MASTER\", output.getInstanceStateMap(\"testResourceName\", resource)\n          .get(\"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2017-01-07 08:31:38","commitOrder":2,"curCode":"  public void testCustomModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.CUSTOMIZED);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertNull(output.getInstanceStateMap(\"testResourceName\", resource).get(\n          \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-10-03 10:06:26","endLine":106,"groupId":"301","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomModeCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/a93acfaa06aa31275ea71d3c2d9c2331993884.src","preCode":"  public void testCustomModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.CUSTOMIZED);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.toString(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.toString(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.toString());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertNull(output.getInstanceStateMap(\"testResourceName\", resource).get(\n          \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"4e4871967db07cee191debb9d26bfcd53c401945","commitMessage":"@@@Add state transition throttling logic into intermediateStateCalcStage.\n","date":"2017-10-03 10:06:26","modifiedFileCount":"30","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  public void testSemiAutoModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.AUTO);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertEquals(\"MASTER\", output.getInstanceStateMap(\"testResourceName\", resource)\n          .get(\"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":74,"groupId":"4072","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSemiAutoModeCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/70e9c9f660e12f3e391c8d3b3ab8491fcf77f8.src","preCode":"  public void testSemiAutoModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.AUTO);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertEquals(\"MASTER\", output.getInstanceStateMap(\"testResourceName\", resource)\n          .get(\"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  public void testCustomModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.CUSTOMIZED);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertNull(output.getInstanceStateMap(\"testResourceName\", resource).get(\n          \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":108,"groupId":"301","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomModeCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/70e9c9f660e12f3e391c8d3b3ab8491fcf77f8.src","preCode":"  public void testCustomModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.CUSTOMIZED);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertNull(output.getInstanceStateMap(\"testResourceName\", resource).get(\n          \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":4,"curCode":"  public void testSemiAutoModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.AUTO);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertEquals(\"MASTER\", output.getInstanceStateMap(\"testResourceName\", resource)\n          .get(\"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-02-26 09:36:00","endLine":76,"groupId":"10288","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSemiAutoModeCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b5/4cab6b4eb5f81d7fe949299d84884a99c5cb46.src","preCode":"  public void testSemiAutoModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.AUTO);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertEquals(\"MASTER\", output.getInstanceStateMap(\"testResourceName\", resource)\n          .get(\"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":4,"curCode":"  public void testCustomModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.CUSTOMIZED);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertNull(output.getInstanceStateMap(\"testResourceName\", resource).get(\n          \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-02-26 09:36:00","endLine":112,"groupId":"10288","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomModeCompatibility","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b5/4cab6b4eb5f81d7fe949299d84884a99c5cb46.src","preCode":"  public void testCustomModeCompatibility() {\n    System.out.println(\"START TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n\n    String[] resources = new String[] {\n      \"testResourceName\"\n    };\n    setupIdealStateDeprecated(5, resources, 10, 1, IdealStateModeProperty.CUSTOMIZED);\n    setupLiveInstances(5);\n    setupStateModel();\n\n    Map<String, Resource> resourceMap = getResourceMap();\n    CurrentStateOutput currentStateOutput = new CurrentStateOutput();\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    ReadClusterDataStage stage1 = new ReadClusterDataStage();\n    runStage(event, stage1);\n    BestPossibleStateCalcStage stage2 = new BestPossibleStateCalcStage();\n    runStage(event, stage2);\n\n    BestPossibleStateOutput output =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n    for (int p = 0; p < 5; p++) {\n      Partition resource = new Partition(\"testResourceName_\" + p);\n      AssertJUnit.assertNull(output.getInstanceStateMap(\"testResourceName\", resource).get(\n          \"localhost_\" + (p + 1) % 5));\n    }\n    System.out.println(\"END TestBestPossibleStateCalcStage at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"}]
