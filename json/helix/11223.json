[{"authorTime":"2013-08-22 04:42:57","codes":[{"authorDate":"2013-08-22 04:42:57","commitOrder":1,"curCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathConfig.getPath(PropertyType.CURRENTSTATES, _clusterName,\n                  \"localhost_8901\", \"session_0\", \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n\n        boolean[] success = _accessor.createChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        \r\n        for (int i = 1; i < 5; i++) {\n          Assert.assertEquals(success[i], success[0], \"Should be either all succeed of all fail\");\n        }\n      }\n\n      return true;\n    }\n","date":"2013-08-22 04:42:57","endLine":94,"groupId":"5543","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"call","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/0bd2b098a900050ed189c30fdb07088c1bf26a.src","preCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathConfig.getPath(PropertyType.CURRENTSTATES, _clusterName,\n                  \"localhost_8901\", \"session_0\", \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n\n        boolean[] success = _accessor.createChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        \r\n        for (int i = 1; i < 5; i++) {\n          Assert.assertEquals(success[i], success[0], \"Should be either all succeed of all fail\");\n        }\n      }\n\n      return true;\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2013-08-22 04:42:57","commitOrder":1,"curCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathConfig.getPath(PropertyType.EXTERNALVIEW, _clusterName, \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n        boolean[] success = _accessor.setChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        for (int i = 0; i < 5; i++) {\n          Assert.assertEquals(success[i], true);\n        }\n      }\n\n      return true;\n    }\n","date":"2013-08-22 04:42:57","endLine":191,"groupId":"5666","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"call","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/0bd2b098a900050ed189c30fdb07088c1bf26a.src","preCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathConfig.getPath(PropertyType.EXTERNALVIEW, _clusterName, \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n        boolean[] success = _accessor.setChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        for (int i = 0; i < 5; i++) {\n          Assert.assertEquals(success[i], true);\n        }\n      }\n\n      return true;\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"}],"commitId":"f414aad4c9b26fc767eaf373f7691f8e0487a598","commitMessage":"@@@[HELIX-198] Unify helix code style.  rb=13710\n","date":"2013-08-22 04:42:57","modifiedFileCount":"597","status":"B","submitter":"zzhang"},{"authorTime":"2017-01-29 08:55:24","codes":[{"authorDate":"2017-01-29 08:55:24","commitOrder":2,"curCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathBuilder.getPath(PropertyType.CURRENTSTATES, _clusterName,\n                  \"localhost_8901\", \"session_0\", \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n\n        boolean[] success = _accessor.createChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        \r\n        for (int i = 1; i < 5; i++) {\n          Assert.assertEquals(success[i], success[0], \"Should be either all succeed of all fail\");\n        }\n      }\n\n      return true;\n    }\n","date":"2017-02-02 12:19:43","endLine":92,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"call","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dd/e054cedf090040d71ad04d701e7960ea890cc9.src","preCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathConfig.getPath(PropertyType.CURRENTSTATES, _clusterName,\n                  \"localhost_8901\", \"session_0\", \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n\n        boolean[] success = _accessor.createChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        \r\n        for (int i = 1; i < 5; i++) {\n          Assert.assertEquals(success[i], success[0], \"Should be either all succeed of all fail\");\n        }\n      }\n\n      return true;\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2017-01-29 08:55:24","commitOrder":2,"curCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathBuilder.getPath(PropertyType.EXTERNALVIEW, _clusterName, \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n        boolean[] success = _accessor.setChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        for (int i = 0; i < 5; i++) {\n          Assert.assertEquals(success[i], true);\n        }\n      }\n\n      return true;\n    }\n","date":"2017-02-02 12:19:43","endLine":189,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"call","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dd/e054cedf090040d71ad04d701e7960ea890cc9.src","preCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathConfig.getPath(PropertyType.EXTERNALVIEW, _clusterName, \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n        boolean[] success = _accessor.setChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        for (int i = 0; i < 5; i++) {\n          Assert.assertEquals(success[i], true);\n        }\n      }\n\n      return true;\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"0b7a1a0fc93bf1f4699c45b7427663a17e94fc99","commitMessage":"@@@Rename PropertyPathConfig to PropertyPathBuilder\n","date":"2017-02-02 12:19:43","modifiedFileCount":"33","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path = PropertyPathBuilder.instanceCurrentState(\n              _clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n\n        boolean[] success = _accessor.createChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        \r\n        for (int i = 1; i < 5; i++) {\n          Assert.assertEquals(success[i], success[0], \"Should be either all succeed of all fail\");\n        }\n      }\n\n      return true;\n    }\n","date":"2017-11-08 08:48:26","endLine":91,"groupId":"5543","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"call","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a6/58b620b5aeef5128815831a0c488fdcf20d69d.src","preCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathBuilder.getPath(PropertyType.CURRENTSTATES, _clusterName,\n                  \"localhost_8901\", \"session_0\", \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n\n        boolean[] success = _accessor.createChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        \r\n        for (int i = 1; i < 5; i++) {\n          Assert.assertEquals(success[i], success[0], \"Should be either all succeed of all fail\");\n        }\n      }\n\n      return true;\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path = PropertyPathBuilder.externalView(_clusterName, \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n        boolean[] success = _accessor.setChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        for (int i = 0; i < 5; i++) {\n          Assert.assertEquals(success[i], true);\n        }\n      }\n\n      return true;\n    }\n","date":"2017-11-08 08:48:26","endLine":186,"groupId":"149","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"call","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a6/58b620b5aeef5128815831a0c488fdcf20d69d.src","preCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path =\n              PropertyPathBuilder.getPath(PropertyType.EXTERNALVIEW, _clusterName, \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n        boolean[] success = _accessor.setChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        for (int i = 0; i < 5; i++) {\n          Assert.assertEquals(success[i], true);\n        }\n      }\n\n      return true;\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":4,"curCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<>();\n      List<ZNRecord> records = new ArrayList<>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path = PropertyPathBuilder.instanceCurrentState(_clusterName, \"localhost_8901\",\n              \"session_0\", \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n\n        boolean[] success = _accessor.createChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        \r\n        for (int i = 1; i < 5; i++) {\n          Assert.assertEquals(success[i], success[0], \"Should be either all succeed of all fail\");\n        }\n      }\n\n      return true;\n    }\n","date":"2019-05-25 09:19:21","endLine":89,"groupId":"11223","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"call","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/0507eb06cb4e0711764b04f4839a8821fd96cd.src","preCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path = PropertyPathBuilder.instanceCurrentState(\n              _clusterName, \"localhost_8901\", \"session_0\", \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n\n        boolean[] success = _accessor.createChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        \r\n        for (int i = 1; i < 5; i++) {\n          Assert.assertEquals(success[i], success[0], \"Should be either all succeed of all fail\");\n        }\n      }\n\n      return true;\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":4,"curCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<>();\n      List<ZNRecord> records = new ArrayList<>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path = PropertyPathBuilder.externalView(_clusterName, \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n        boolean[] success = _accessor.setChildren(paths, records, AccessOption.PERSISTENT);\n\n        for (int i = 0; i < 5; i++) {\n          Assert.assertTrue(success[i]);\n        }\n      }\n\n      return true;\n    }\n","date":"2019-05-25 09:19:21","endLine":183,"groupId":"11223","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"call","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/0507eb06cb4e0711764b04f4839a8821fd96cd.src","preCode":"    public Boolean call() throws Exception {\n      \r\n      List<String> paths = new ArrayList<String>();\n      List<ZNRecord> records = new ArrayList<ZNRecord>();\n      for (int j = 0; j < 2; j++) {\n        paths.clear();\n        records.clear();\n\n        if (_id == 1 && j == 0) {\n          \r\n          Thread.sleep(30);\n        }\n\n        if (_id == 0 && j == 1) {\n          \r\n          Thread.sleep(100);\n        }\n\n        for (int i = 0; i < 5; i++) {\n          int k = j * 5 + i;\n          String path = PropertyPathBuilder.externalView(_clusterName, \"TestDB\" + k);\n          ZNRecord record = new ZNRecord(\"TestDB\" + k);\n\n          paths.add(path);\n          records.add(record);\n        }\n        boolean[] success = _accessor.setChildren(paths, records, AccessOption.PERSISTENT);\n        \r\n\n        for (int i = 0; i < 5; i++) {\n          Assert.assertEquals(success[i], true);\n        }\n      }\n\n      return true;\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
