[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void afterClass() throws Exception {\n    \r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    _setupTool.deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":341,"groupId":"7073","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"afterClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/81/7c2071bd85399b794f8429f2d3d396e0931315.src","preCode":"  public void afterClass() throws Exception {\n    \r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    _setupTool.deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNbOfChilds > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":356,"groupId":"7073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParticipantIncompatibleWithBatchMsg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bd/44ca3ef844f430bf8cc27f229529802dbfa87c.src","preCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNbOfChilds > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void afterClass() throws Exception {\n    \r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    _gSetupTool.deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":334,"groupId":"7073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"afterClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/92/da126b08d47b5b3b7a142861393882fb98df7d.src","preCode":"  public void afterClass() throws Exception {\n    \r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    _setupTool.deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNbOfChilds > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":365,"groupId":"7073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParticipantIncompatibleWithBatchMsg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f2/c4622304c8f2b353c3c87602410eb689379648.src","preCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNbOfChilds > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-19 01:21:53","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  public void afterClass() throws Exception {\n    \r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    _gSetupTool.deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":334,"groupId":"7073","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"afterClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/92/da126b08d47b5b3b7a142861393882fb98df7d.src","preCode":"  public void afterClass() throws Exception {\n    \r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    _gSetupTool.deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"},{"authorDate":"2018-06-19 01:21:53","commitOrder":3,"curCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNbOfChilds > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:57:09","endLine":364,"groupId":"7073","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParticipantIncompatibleWithBatchMsg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/52/a4a9e8639aaf76905bd3880018deebdcf92768.src","preCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNbOfChilds > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"4385d01a3673efa631d9837507c21ccab9f69be4","commitMessage":"@@@Refactor tests to use deleteCluster in test base class to deduplicate codes.\n","date":"2018-07-14 06:57:09","modifiedFileCount":"43","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-11-17 09:07:21","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void afterClass() throws Exception {\n    \r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    _gSetupTool.deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":334,"groupId":"7073","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"afterClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/92/da126b08d47b5b3b7a142861393882fb98df7d.src","preCode":"  public void afterClass() throws Exception {\n    \r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    _gSetupTool.deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"},{"authorDate":"2019-11-17 09:07:21","commitOrder":4,"curCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNumberOfChildren > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-11-17 09:07:21","endLine":367,"groupId":"7073","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testParticipantIncompatibleWithBatchMsg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ea/c8860cb7fb2e6d67a88ca61f4f3eeabc1cfcb7.src","preCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNbOfChilds > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"52cb22282b7c93ed05ee6e582bbb641c2900992f","commitMessage":"@@@Fix NullPointerException in TestBatchMessage. (#580)\n\nNullPointerException in TestBatchMessage when currentChildren is null and currentChildren.size() is called.\nChangelist:\nAdd a null check in handleChildChange().","date":"2019-11-17 09:07:21","modifiedFileCount":"1","status":"M","submitter":"Huizhi L"},{"authorTime":"2019-11-17 09:07:21","codes":[{"authorDate":"2020-07-04 15:59:19","commitOrder":5,"curCode":"  public void afterClass() throws Exception {\n    if (_clusterVerifier != null) {\n      _clusterVerifier.close();\n    }\n    \r\n\r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-07-04 15:59:19","endLine":338,"groupId":"7073","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"afterClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/39/6590a8622a37df1742186ffe9664469b6615fb.src","preCode":"  public void afterClass() throws Exception {\n    \r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    _gSetupTool.deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"},{"authorDate":"2019-11-17 09:07:21","commitOrder":5,"curCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNumberOfChildren > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-11-17 09:07:21","endLine":367,"groupId":"7073","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testParticipantIncompatibleWithBatchMsg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ea/c8860cb7fb2e6d67a88ca61f4f3eeabc1cfcb7.src","preCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNumberOfChildren > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"N"}],"commitId":"bacb137f6fa8182cd063cbfd52305a32edc8f92c","commitMessage":"@@@Cleanup test code and adding finalize method to avoid ZkClient leakage in the Helix-core tests. (#1138)\n\nThe ZkClient leakage is currently blocking the whole test suite to finish. This change cleans up some leaking tests and adding the finalize method to the critical ZkClient resource holders. Since we have enforced GC between test classes.  these finalize methods will help to release a major part of the leakage.\n\nNote that this fix still cannot eliminate all the undesired leakages.","date":"2020-07-04 15:59:19","modifiedFileCount":"40","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-11-18 08:52:35","codes":[{"authorDate":"2020-07-04 15:59:19","commitOrder":6,"curCode":"  public void afterClass() throws Exception {\n    if (_clusterVerifier != null) {\n      _clusterVerifier.close();\n    }\n    \r\n\r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-07-04 15:59:19","endLine":338,"groupId":"10432","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"afterClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/39/6590a8622a37df1742186ffe9664469b6615fb.src","preCode":"  public void afterClass() throws Exception {\n    if (_clusterVerifier != null) {\n      _clusterVerifier.close();\n    }\n    \r\n\r\n\n    _controller.syncStop();\n    for (MockParticipantManager participant : _participants) {\n      participant.syncStop();\n    }\n    deleteCluster(CLUSTER_NAME);\n    System.out.println(\"END \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"N"},{"authorDate":"2020-11-18 08:52:35","commitOrder":6,"curCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    BestPossAndExtViewZkVerifier verifier = new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName);\n    try {\n      boolean result = ClusterStateVerifier\n          .verifyByZkCallback(verifier);\n      Assert.assertTrue(result);\n      Assert.assertTrue(listener._maxNumberOfChildren > 16,\n          \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n    } finally {\n      verifier.close();\n    }\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-11-18 08:52:35","endLine":389,"groupId":"10432","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testParticipantIncompatibleWithBatchMsg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dd/c9fb1e4006915d530e8a5d380c94f1689f9325.src","preCode":"  public void testParticipantIncompatibleWithBatchMsg() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--addResourceProperty\", clusterName, \"TestDB0\",\n        HelixPropertyAttribute.BATCH_MESSAGE_MODE.toString(), \"true\"\n    });\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    TestZkChildListener listener = new TestZkChildListener();\n    _gZkClient.subscribeChildChanges(keyBuilder.messages(\"localhost_12918\").getPath(), listener);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"false\"\n    });\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    \r\n    LiveInstance liveInstance = accessor.getProperty(keyBuilder.liveInstance(\"localhost_12918\"));\n    liveInstance.setHelixVersion(\"0.5\");\n    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--enableCluster\", clusterName, \"true\"\n    });\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n    Assert.assertTrue(listener._maxNumberOfChildren > 16,\n        \"Should see more than 16 messages at the same time (32 O->S and 32 S->M)\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"}],"commitId":"540c53bd9913471baaaf8fade8489a5fffb1dc37","commitMessage":"@@@Fix several tests with resource leakage (#1534)\n\nFix several tests with resource leakage.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-11-18 08:52:35","modifiedFileCount":"7","status":"M","submitter":"kaisun2000"}]
