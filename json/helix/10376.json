[{"authorTime":"2018-04-17 09:32:58","codes":[{"authorDate":"2018-04-17 09:32:58","commitOrder":1,"curCode":"    public void onIdealStateChange(List<IdealState> idealStates, NotificationContext changeContext)\n        throws InterruptedException {\n      if (!trackEnabled) {\n        return;\n      }\n      for (IdealState is : idealStates) {\n        int replica = is.getReplicaCount(NUM_NODE);\n        for (String p : is.getPartitionSet()) {\n          Map<String, String> stateMap = is.getRecord().getMapField(p);\n          verifyPartitionCount(is.getResourceName(), p, stateMap, replica, \"IS\");\n        }\n      }\n    }\n","date":"2018-06-27 08:52:19","endLine":176,"groupId":"6428","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onIdealStateChange","params":"(List<IdealState>idealStates@NotificationContextchangeContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cb/d1c247bed4dee451cabab9efe082ac2dd58f90.src","preCode":"    public void onIdealStateChange(List<IdealState> idealStates, NotificationContext changeContext)\n        throws InterruptedException {\n      if (!trackEnabled) {\n        return;\n      }\n      for (IdealState is : idealStates) {\n        int replica = is.getReplicaCount(NUM_NODE);\n        for (String p : is.getPartitionSet()) {\n          Map<String, String> stateMap = is.getRecord().getMapField(p);\n          verifyPartitionCount(is.getResourceName(), p, stateMap, replica, \"IS\");\n        }\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/PartitionMigration/TestPartitionMigrationBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"},{"authorDate":"2018-04-17 09:32:58","commitOrder":1,"curCode":"    public void onExternalViewChange(List<ExternalView> externalViewList, NotificationContext changeContext) {\n      if (!trackEnabled) {\n        return;\n      }\n      for (ExternalView ev : externalViewList) {\n        IdealState is = _resourceMap.get(ev.getResourceName());\n        if (is == null) {\n          continue;\n        }\n        int replica = is.getReplicaCount(NUM_NODE);\n        for (String p : is.getPartitionSet()) {\n          Map<String, String> stateMap = ev.getStateMap(p);\n          verifyPartitionCount(is.getResourceName(), p, stateMap, replica, \"EV\");\n        }\n      }\n    }\n","date":"2018-06-27 08:52:19","endLine":194,"groupId":"6428","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onExternalViewChange","params":"(List<ExternalView>externalViewList@NotificationContextchangeContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cb/d1c247bed4dee451cabab9efe082ac2dd58f90.src","preCode":"    public void onExternalViewChange(List<ExternalView> externalViewList, NotificationContext changeContext) {\n      if (!trackEnabled) {\n        return;\n      }\n      for (ExternalView ev : externalViewList) {\n        IdealState is = _resourceMap.get(ev.getResourceName());\n        if (is == null) {\n          continue;\n        }\n        int replica = is.getReplicaCount(NUM_NODE);\n        for (String p : is.getPartitionSet()) {\n          Map<String, String> stateMap = ev.getStateMap(p);\n          verifyPartitionCount(is.getResourceName(), p, stateMap, replica, \"EV\");\n        }\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/PartitionMigration/TestPartitionMigrationBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"94ac4253bb6a35f8ad895200ba6b050a576d4198","commitMessage":"@@@Add integration tests to test Helix's partition migration strategy during cluster expansion and idealstate rebalance strategy change.\n","date":"2018-06-27 08:52:19","modifiedFileCount":"5","status":"B","submitter":"Lei Xia"},{"authorTime":"2018-06-29 05:27:32","codes":[{"authorDate":"2018-06-29 05:27:32","commitOrder":2,"curCode":"    public void onIdealStateChange(List<IdealState> idealStates, NotificationContext changeContext)\n        throws InterruptedException {\n      if (!trackEnabled) {\n        return;\n      }\n      for (IdealState is : idealStates) {\n        int replica = is.getReplicaCount(NUM_NODE);\n        for (String p : is.getPartitionSet()) {\n          Map<String, String> stateMap = is.getRecord().getMapField(p);\n          verifyPartitionCount(is.getResourceName(), p, stateMap, replica, \"IS\",\n              is.getMinActiveReplicas());\n        }\n      }\n    }\n","date":"2018-06-29 08:40:21","endLine":188,"groupId":"10376","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onIdealStateChange","params":"(List<IdealState>idealStates@NotificationContextchangeContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2b/7996c760e8f66404ddbd17e13a9612b2d91e22.src","preCode":"    public void onIdealStateChange(List<IdealState> idealStates, NotificationContext changeContext)\n        throws InterruptedException {\n      if (!trackEnabled) {\n        return;\n      }\n      for (IdealState is : idealStates) {\n        int replica = is.getReplicaCount(NUM_NODE);\n        for (String p : is.getPartitionSet()) {\n          Map<String, String> stateMap = is.getRecord().getMapField(p);\n          verifyPartitionCount(is.getResourceName(), p, stateMap, replica, \"IS\");\n        }\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/PartitionMigration/TestPartitionMigrationBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2018-06-29 05:27:32","commitOrder":2,"curCode":"    public void onExternalViewChange(List<ExternalView> externalViewList,\n        NotificationContext changeContext) {\n      if (!trackEnabled) {\n        return;\n      }\n      for (ExternalView ev : externalViewList) {\n        IdealState is = _resourceMap.get(ev.getResourceName());\n        if (is == null) {\n          continue;\n        }\n        int replica = is.getReplicaCount(NUM_NODE);\n        for (String p : is.getPartitionSet()) {\n          Map<String, String> stateMap = ev.getStateMap(p);\n          verifyPartitionCount(is.getResourceName(), p, stateMap, replica, \"EV\",\n              is.getMinActiveReplicas());\n        }\n      }\n    }\n","date":"2018-06-29 08:40:21","endLine":208,"groupId":"10376","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onExternalViewChange","params":"(List<ExternalView>externalViewList@NotificationContextchangeContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2b/7996c760e8f66404ddbd17e13a9612b2d91e22.src","preCode":"    public void onExternalViewChange(List<ExternalView> externalViewList, NotificationContext changeContext) {\n      if (!trackEnabled) {\n        return;\n      }\n      for (ExternalView ev : externalViewList) {\n        IdealState is = _resourceMap.get(ev.getResourceName());\n        if (is == null) {\n          continue;\n        }\n        int replica = is.getReplicaCount(NUM_NODE);\n        for (String p : is.getPartitionSet()) {\n          Map<String, String> stateMap = ev.getStateMap(p);\n          verifyPartitionCount(is.getResourceName(), p, stateMap, replica, \"EV\");\n        }\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/PartitionMigration/TestPartitionMigrationBase.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"c97a97508c9c45a0bf51177988dca7f48e49ea32","commitMessage":"@@@Change migration strategy to N -> N+1 -> N model\n\n    Currently Helix takes N->2N->N strategy when migrating a partition.  where N equals to DB's replica count. When Helix decides to move a partition to N new instances.  it brings up all replicas in new instances first before drop all replicas in old instances (so there will be 2N replica existing at certain period of time). This approach gurantees the availability during migration but may require bigger disk footprint. It may also cause a partition having more than 6 replicas if the cluster topology keeps changing during migration.\n    What we proposed here is N -> N+1 -> N strategy.  where Helix will bootstrap a new replica in one of new instance.  then drop one from old instances. It then repeats the process until all replicas are moved to new instances. This will reduce disk usage.  but meanwhile still maintain at least N active replica during the process. The new strategy can also avoid partition having excessive replicas even there is toplogy changes during the migration.\n","date":"2018-06-29 08:40:21","modifiedFileCount":"14","status":"M","submitter":"Junkai Xue"}]
