[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"    public boolean verify() {\n      HelixDataAccessor accessor =\n          new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n      int numberOfPartitions =\n          accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n              .size();\n      ClusterDataCache cache = new ClusterDataCache();\n      cache.refresh(accessor);\n      String masterValue =\n          cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n              .getStatesPriorityList().get(0);\n      int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n      return verifyBalanceExternalView(accessor.getProperty(keyBuilder.externalView(_resourceName))\n          .getRecord(), numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n          cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n    }\n","date":"2017-11-08 08:48:26","endLine":222,"groupId":"6799","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/35/d57c408bcc4ce84f82bdd0abf40ff166016b04.src","preCode":"    public boolean verify() {\n      HelixDataAccessor accessor =\n          new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n      int numberOfPartitions =\n          accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n              .size();\n      ClusterDataCache cache = new ClusterDataCache();\n      cache.refresh(accessor);\n      String masterValue =\n          cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n              .getStatesPriorityList().get(0);\n      int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n      return verifyBalanceExternalView(accessor.getProperty(keyBuilder.externalView(_resourceName))\n          .getRecord(), numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n          cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"    public boolean verify() {\n      try {\n        HelixDataAccessor accessor =\n            new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_client));\n        Builder keyBuilder = accessor.keyBuilder();\n        int numberOfPartitions =\n            accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n                .size();\n        ClusterDataCache cache = new ClusterDataCache();\n        cache.refresh(accessor);\n        String masterValue =\n            cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n                .getStatesPriorityList().get(0);\n        int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n        String instanceGroupTag = cache.getIdealState(_resourceName).getInstanceGroupTag();\n        int instances = 0;\n        for (String liveInstanceName : cache.getLiveInstances().keySet()) {\n          if (cache.getInstanceConfigMap().get(liveInstanceName).containsTag(instanceGroupTag)) {\n            instances++;\n          }\n        }\n        if (instances == 0) {\n          instances = cache.getLiveInstances().size();\n        }\n        return verifyBalanceExternalView(\n            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n            numberOfPartitions, masterValue, replicas, instances);\n      } catch (Exception e) {\n        return false;\n      }\n    }\n","date":"2017-11-08 08:48:26","endLine":153,"groupId":"6799","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/af/2b5a1d6540d3bf7f519a5f3d8db17b55e1c751.src","preCode":"    public boolean verify() {\n      try {\n        HelixDataAccessor accessor =\n            new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_client));\n        Builder keyBuilder = accessor.keyBuilder();\n        int numberOfPartitions =\n            accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n                .size();\n        ClusterDataCache cache = new ClusterDataCache();\n        cache.refresh(accessor);\n        String masterValue =\n            cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n                .getStatesPriorityList().get(0);\n        int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n        String instanceGroupTag = cache.getIdealState(_resourceName).getInstanceGroupTag();\n        int instances = 0;\n        for (String liveInstanceName : cache.getLiveInstances().keySet()) {\n          if (cache.getInstanceConfigMap().get(liveInstanceName).containsTag(instanceGroupTag)) {\n            instances++;\n          }\n        }\n        if (instances == 0) {\n          instances = cache.getLiveInstances().size();\n        }\n        return verifyBalanceExternalView(\n            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n            numberOfPartitions, masterValue, replicas, instances);\n      } catch (Exception e) {\n        return false;\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestCustomizedIdealStateRebalancer.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":2,"curCode":"    public boolean verify() {\n      HelixDataAccessor accessor =\n          new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n      int numberOfPartitions =\n          accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n              .size();\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(accessor);\n      String masterValue =\n          cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n              .getStatesPriorityList().get(0);\n      int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n      return verifyBalanceExternalView(accessor.getProperty(keyBuilder.externalView(_resourceName))\n          .getRecord(), numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n          cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n    }\n","date":"2019-02-26 09:36:00","endLine":219,"groupId":"6799","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d4/621ac5f3ed8bebc9ad424cc40b8bd36485eec5.src","preCode":"    public boolean verify() {\n      HelixDataAccessor accessor =\n          new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n      int numberOfPartitions =\n          accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n              .size();\n      ClusterDataCache cache = new ClusterDataCache();\n      cache.refresh(accessor);\n      String masterValue =\n          cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n              .getStatesPriorityList().get(0);\n      int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n      return verifyBalanceExternalView(accessor.getProperty(keyBuilder.externalView(_resourceName))\n          .getRecord(), numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n          cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":2,"curCode":"    public boolean verify() {\n      try {\n        HelixDataAccessor accessor =\n            new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_client));\n        Builder keyBuilder = accessor.keyBuilder();\n        int numberOfPartitions =\n            accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n                .size();\n        ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n        cache.refresh(accessor);\n        String masterValue =\n            cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n                .getStatesPriorityList().get(0);\n        int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n        String instanceGroupTag = cache.getIdealState(_resourceName).getInstanceGroupTag();\n        int instances = 0;\n        for (String liveInstanceName : cache.getLiveInstances().keySet()) {\n          if (cache.getInstanceConfigMap().get(liveInstanceName).containsTag(instanceGroupTag)) {\n            instances++;\n          }\n        }\n        if (instances == 0) {\n          instances = cache.getLiveInstances().size();\n        }\n        return verifyBalanceExternalView(\n            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n            numberOfPartitions, masterValue, replicas, instances);\n      } catch (Exception e) {\n        return false;\n      }\n    }\n","date":"2019-02-26 09:36:00","endLine":154,"groupId":"6799","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f3/b972502895f488ef7d9111ae5e74b682709b6f.src","preCode":"    public boolean verify() {\n      try {\n        HelixDataAccessor accessor =\n            new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_client));\n        Builder keyBuilder = accessor.keyBuilder();\n        int numberOfPartitions =\n            accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n                .size();\n        ClusterDataCache cache = new ClusterDataCache();\n        cache.refresh(accessor);\n        String masterValue =\n            cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n                .getStatesPriorityList().get(0);\n        int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n        String instanceGroupTag = cache.getIdealState(_resourceName).getInstanceGroupTag();\n        int instances = 0;\n        for (String liveInstanceName : cache.getLiveInstances().keySet()) {\n          if (cache.getInstanceConfigMap().get(liveInstanceName).containsTag(instanceGroupTag)) {\n            instances++;\n          }\n        }\n        if (instances == 0) {\n          instances = cache.getLiveInstances().size();\n        }\n        return verifyBalanceExternalView(\n            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n            numberOfPartitions, masterValue, replicas, instances);\n      } catch (Exception e) {\n        return false;\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestCustomizedIdealStateRebalancer.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"    public boolean verify() {\n      HelixDataAccessor accessor =\n          new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n      int numberOfPartitions = accessor.getProperty(keyBuilder.idealStates(_resourceName))\n          .getRecord().getListFields().size();\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(accessor);\n      String masterValue =\n          cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n              .getStatesPriorityList().get(0);\n      int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n      return verifyBalanceExternalView(\n          accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n          numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n          cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n    }\n","date":"2019-05-25 09:19:21","endLine":210,"groupId":"6799","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"verify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/34/e374da725d670c8195412999f6cc2042158ecc.src","preCode":"    public boolean verify() {\n      HelixDataAccessor accessor =\n          new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n      int numberOfPartitions =\n          accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n              .size();\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(accessor);\n      String masterValue =\n          cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n              .getStatesPriorityList().get(0);\n      int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n      return verifyBalanceExternalView(accessor.getProperty(keyBuilder.externalView(_resourceName))\n          .getRecord(), numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n          cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":3,"curCode":"    public boolean verify() {\n      try {\n        HelixDataAccessor accessor =\n            new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_client));\n        Builder keyBuilder = accessor.keyBuilder();\n        int numberOfPartitions =\n            accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n                .size();\n        ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n        cache.refresh(accessor);\n        String masterValue =\n            cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n                .getStatesPriorityList().get(0);\n        int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n        String instanceGroupTag = cache.getIdealState(_resourceName).getInstanceGroupTag();\n        int instances = 0;\n        for (String liveInstanceName : cache.getLiveInstances().keySet()) {\n          if (cache.getInstanceConfigMap().get(liveInstanceName).containsTag(instanceGroupTag)) {\n            instances++;\n          }\n        }\n        if (instances == 0) {\n          instances = cache.getLiveInstances().size();\n        }\n        return verifyBalanceExternalView(\n            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n            numberOfPartitions, masterValue, replicas, instances);\n      } catch (Exception e) {\n        return false;\n      }\n    }\n","date":"2019-02-26 09:36:00","endLine":154,"groupId":"6799","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f3/b972502895f488ef7d9111ae5e74b682709b6f.src","preCode":"    public boolean verify() {\n      try {\n        HelixDataAccessor accessor =\n            new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_client));\n        Builder keyBuilder = accessor.keyBuilder();\n        int numberOfPartitions =\n            accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n                .size();\n        ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n        cache.refresh(accessor);\n        String masterValue =\n            cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n                .getStatesPriorityList().get(0);\n        int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n        String instanceGroupTag = cache.getIdealState(_resourceName).getInstanceGroupTag();\n        int instances = 0;\n        for (String liveInstanceName : cache.getLiveInstances().keySet()) {\n          if (cache.getInstanceConfigMap().get(liveInstanceName).containsTag(instanceGroupTag)) {\n            instances++;\n          }\n        }\n        if (instances == 0) {\n          instances = cache.getLiveInstances().size();\n        }\n        return verifyBalanceExternalView(\n            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n            numberOfPartitions, masterValue, replicas, instances);\n      } catch (Exception e) {\n        return false;\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestCustomizedIdealStateRebalancer.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"N"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2020-09-24 12:18:37","commitOrder":4,"curCode":"    public boolean verify() {\n      HelixDataAccessor accessor =\n          new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n      int numberOfPartitions = accessor.getProperty(keyBuilder.idealStates(_resourceName))\n          .getRecord().getListFields().size();\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(accessor);\n      String masterValue =\n          cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n              .getStatesPriorityList().get(0);\n      int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n      try {\n        return verifyBalanceExternalView(\n            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n            numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n            cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n      } catch (Exception e) {\n        LOG.debug(\"Verify failed due to {}\", e.getStackTrace());\n        return false;\n      }\n    }\n","date":"2020-09-24 12:18:37","endLine":231,"groupId":"10372","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"verify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/66fb6824d34cf8544b8f52a42aed29917e9d7c.src","preCode":"    public boolean verify() {\n      HelixDataAccessor accessor =\n          new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n      int numberOfPartitions = accessor.getProperty(keyBuilder.idealStates(_resourceName))\n          .getRecord().getListFields().size();\n      ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n      cache.refresh(accessor);\n      String masterValue =\n          cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n              .getStatesPriorityList().get(0);\n      int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n      return verifyBalanceExternalView(\n          accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n          numberOfPartitions, masterValue, replicas, cache.getLiveInstances().size(),\n          cache.getIdealState(_resourceName).getMaxPartitionsPerInstance());\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalancePartitionLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":4,"curCode":"    public boolean verify() {\n      try {\n        HelixDataAccessor accessor =\n            new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_client));\n        Builder keyBuilder = accessor.keyBuilder();\n        int numberOfPartitions =\n            accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n                .size();\n        ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n        cache.refresh(accessor);\n        String masterValue =\n            cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n                .getStatesPriorityList().get(0);\n        int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n        String instanceGroupTag = cache.getIdealState(_resourceName).getInstanceGroupTag();\n        int instances = 0;\n        for (String liveInstanceName : cache.getLiveInstances().keySet()) {\n          if (cache.getInstanceConfigMap().get(liveInstanceName).containsTag(instanceGroupTag)) {\n            instances++;\n          }\n        }\n        if (instances == 0) {\n          instances = cache.getLiveInstances().size();\n        }\n        return verifyBalanceExternalView(\n            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n            numberOfPartitions, masterValue, replicas, instances);\n      } catch (Exception e) {\n        return false;\n      }\n    }\n","date":"2019-02-26 09:36:00","endLine":154,"groupId":"10372","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"verify","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f3/b972502895f488ef7d9111ae5e74b682709b6f.src","preCode":"    public boolean verify() {\n      try {\n        HelixDataAccessor accessor =\n            new ZKHelixDataAccessor(_clusterName, new ZkBaseDataAccessor<ZNRecord>(_client));\n        Builder keyBuilder = accessor.keyBuilder();\n        int numberOfPartitions =\n            accessor.getProperty(keyBuilder.idealStates(_resourceName)).getRecord().getListFields()\n                .size();\n        ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n        cache.refresh(accessor);\n        String masterValue =\n            cache.getStateModelDef(cache.getIdealState(_resourceName).getStateModelDefRef())\n                .getStatesPriorityList().get(0);\n        int replicas = Integer.parseInt(cache.getIdealState(_resourceName).getReplicas());\n        String instanceGroupTag = cache.getIdealState(_resourceName).getInstanceGroupTag();\n        int instances = 0;\n        for (String liveInstanceName : cache.getLiveInstances().keySet()) {\n          if (cache.getInstanceConfigMap().get(liveInstanceName).containsTag(instanceGroupTag)) {\n            instances++;\n          }\n        }\n        if (instances == 0) {\n          instances = cache.getLiveInstances().size();\n        }\n        return verifyBalanceExternalView(\n            accessor.getProperty(keyBuilder.externalView(_resourceName)).getRecord(),\n            numberOfPartitions, masterValue, replicas, instances);\n      } catch (Exception e) {\n        return false;\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestCustomizedIdealStateRebalancer.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"N"}],"commitId":"be91eff5c3543ebc427e64ffcf8fc5f5dc25d0f7","commitMessage":"@@@Mark AutoRebalancer as deprecated and convert the default test logic to not use AutoRebalancer (#1401)\n\n","date":"2020-09-24 12:18:37","modifiedFileCount":"6","status":"M","submitter":"Jiajun Wang"}]
