[{"authorTime":"2017-09-29 08:37:38","codes":[{"authorDate":"2017-05-24 04:58:24","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2017-05-24 04:58:24","endLine":75,"groupId":"6615","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2a/9dc6958d532b7d641725ea45b326940de872a1.src","preCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"},{"authorDate":"2017-09-29 08:37:38","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n  }\n","date":"2018-01-25 10:29:15","endLine":101,"groupId":"6615","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0d/f817d4ff6caaf39c54b11ceb3138378e9ba722.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"31458fa97f0b0b4e67310c539247c71d6c61aec9","commitMessage":"@@@Alerting application when rebalancing cannot be done.\n\nGenerating error message in the controller node when best possible state cannot be calculated in unexpected situations.\nAlso emitting a Gauge metric in ClusterStatusMonitor to indicate rebalancing error.\n\nAdditional change: fix 2 tests.  which caused by previous changes. TestClusterStatusMonitorLifecycle.  TestSkipBestPossibleCalculation.\n","date":"2018-01-25 10:29:15","modifiedFileCount":"10","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2018-03-09 06:04:42","codes":[{"authorDate":"2018-03-09 06:04:42","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2018-03-20 07:43:31","endLine":78,"groupId":"6615","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/de/bd92302d745b9cb1694c83f80a2a7f27c10ee3.src","preCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2018-03-09 06:04:42","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n  }\n","date":"2018-03-20 07:43:31","endLine":101,"groupId":"6615","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/94/6eb1c75f5b8e333cd51f874aa7b2b150a0ef6f.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"0e849035379a04b079ac1274bb8aaab473df1572","commitMessage":"@@@[HELIX-679] consolidate semantics of recursively delete path in ZkClient\n","date":"2018-03-20 07:43:31","modifiedFileCount":"57","status":"M","submitter":"hrzhang"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2018-07-14 02:20:49","endLine":73,"groupId":"6615","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/9ce0ef1977a9ad6bb04e42d1f45fa02c148c4e.src","preCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n  }\n","date":"2018-07-14 02:20:49","endLine":96,"groupId":"6615","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cd/535527b52fbbee28ec30d7db6f91ef2c275b5a.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    \r\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-10-06 07:26:11","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2018-07-14 02:20:49","endLine":73,"groupId":"6615","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/9ce0ef1977a9ad6bb04e42d1f45fa02c148c4e.src","preCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2018-10-06 07:26:11","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","date":"2018-11-02 05:38:36","endLine":100,"groupId":"6615","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7d/efef41ad4e5bfa04b61eb9c96639aa95d3c044.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"2f39f381b0981503d7c204aabbeaa09153292e15","commitMessage":"@@@Emitting per resource rebalance status for possible calculation failure.\n\nThe status in MBean will be string for debug purposes only.\nThe resource rebalance state attribute will be in one of the following state:\n1. NORMAL\n2. BEST_POSSIBLE_STATE_CAL_FAILED: calculation failed or no possible allocation found.\n3. INTERMEDIATE_STATE_CAL_FAILED: Intermediate state calculation failed. (not include throttled case)\n4. UNKNOWN: the resource is not rebalanced or newly created.\n\nAdditional related changes:\n1. Fix a cluster level metric related bug to generate the right metrics data.\n2. Fix a resource monitoring bug that DISABLE_MONITORING is not working.\n","date":"2018-11-02 05:38:36","modifiedFileCount":"11","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2018-07-14 02:20:49","endLine":73,"groupId":"6615","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/9ce0ef1977a9ad6bb04e42d1f45fa02c148c4e.src","preCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2019-05-04 08:52:17","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    for (ObjectName mbean : _server.queryNames(null, null)) {\n      try {\n        _server.unregisterMBean(mbean);\n      } catch (Exception e) {\n        \r\n      }\n    }\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","date":"2019-05-25 09:19:21","endLine":111,"groupId":"6615","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/e32660e02e0e1e4bdc97dcb17580e210589753.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":8,"curCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2018-07-14 02:20:49","endLine":73,"groupId":"10433","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/9ce0ef1977a9ad6bb04e42d1f45fa02c148c4e.src","preCode":"  public void beforeClass() throws Exception {\n    \r\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2020-10-08 07:58:42","commitOrder":8,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    for (ObjectName mbean : _server.queryNames(null, null)) {\n      try {\n        _server.unregisterMBean(mbean);\n      } catch (Exception e) {\n        \r\n      }\n    }\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)\n            .setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n  }\n","date":"2020-10-08 07:58:42","endLine":116,"groupId":"10433","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2f/1dee269fa9fb73698e4caad33ddc1e613e5642.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    for (ObjectName mbean : _server.queryNames(null, null)) {\n      try {\n        _server.unregisterMBean(mbean);\n      } catch (Exception e) {\n        \r\n      }\n    }\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NODE_NR; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _instanceNames.add(instanceName);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n    errorNodeKey = accessor.keyBuilder().controllerTaskError(RebalanceResourceFailure.name());\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"}]
