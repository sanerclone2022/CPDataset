[{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2020-03-31 05:26:57","commitOrder":5,"curCode":"  public void testCachedCustomizedViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STARTED\");\n    accessor\n        .setProperty(keyBuilder.customizedState(INSTANCE_NAME, \"customizedState1\", RESOURCE_NAME),\n            customizedState);\n\n    CustomizedViewAggregationStage customizedViewComputeStage =\n        new CustomizedViewAggregationStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, customizedViewComputeStage);\n    Assert.assertEquals(cache.getCustomizedViewCacheMap().size(),\n        accessor.getChildNames(accessor.keyBuilder().customizedViews()).size());\n\n    \r\n    List<CustomizedView> oldCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews());\n    runStage(event, customizedViewComputeStage);\n    List<CustomizedView> newCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews());\n    Assert.assertEquals(oldCustomizedViews, newCustomizedViews);\n    for (int i = 0; i < oldCustomizedViews.size(); i++) {\n      Assert.assertEquals(oldCustomizedViews.get(i).getStat().getVersion(),\n          newCustomizedViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","date":"2020-04-24 03:27:36","endLine":114,"groupId":"3511","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCachedCustomizedViews","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/04dafbaaec193fd9845f129663f5ec829e4685.src","preCode":"  public void testCachedCustomizedViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STARTED\");\n    accessor\n        .setProperty(keyBuilder.customizedState(INSTANCE_NAME, \"customizedState1\", RESOURCE_NAME),\n            customizedState);\n\n    CustomizedViewAggregationStage customizedViewComputeStage =\n        new CustomizedViewAggregationStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, customizedViewComputeStage);\n    Assert.assertEquals(cache.getCustomizedViewCacheMap().size(),\n        accessor.getChildNames(accessor.keyBuilder().customizedViews()).size());\n\n    \r\n    List<CustomizedView> oldCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews());\n    runStage(event, customizedViewComputeStage);\n    List<CustomizedView> newCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews());\n    Assert.assertEquals(oldCustomizedViews, newCustomizedViews);\n    for (int i = 0; i < oldCustomizedViews.size(); i++) {\n      Assert.assertEquals(oldCustomizedViews.get(i).getStat().getVersion(),\n          newCustomizedViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCustomizedViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"MB"},{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  public void testCachedExternalViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    ExternalViewComputeStage externalViewComputeStage = new ExternalViewComputeStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CurrentStateComputationStage());\n    runStage(event, externalViewComputeStage);\n    Assert.assertEquals(cache.getExternalViews().values(),\n        accessor.getChildValues(accessor.keyBuilder().externalViews()));\n\n    \r\n    List<ExternalView> oldExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews());\n    runStage(event, externalViewComputeStage);\n    List<ExternalView> newExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews());\n    Assert.assertEquals(oldExternalViews, newExternalViews);\n    for (int i = 0; i < oldExternalViews.size(); i++) {\n      Assert.assertEquals(oldExternalViews.get(i).getStat().getVersion(),\n          newExternalViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","date":"2019-05-25 09:19:21","endLine":88,"groupId":"4890","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCachedExternalViews","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/e334b176e488352ab9fa946a89ea6ee6cc5a07.src","preCode":"  public void testCachedExternalViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    ExternalViewComputeStage externalViewComputeStage = new ExternalViewComputeStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CurrentStateComputationStage());\n    runStage(event, externalViewComputeStage);\n    Assert.assertEquals(cache.getExternalViews().values(),\n        accessor.getChildValues(accessor.keyBuilder().externalViews()));\n\n    \r\n    List<ExternalView> oldExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews());\n    runStage(event, externalViewComputeStage);\n    List<ExternalView> newExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews());\n    Assert.assertEquals(oldExternalViews, newExternalViews);\n    for (int i = 0; i < oldExternalViews.size(); i++) {\n      Assert.assertEquals(oldExternalViews.get(i).getStat().getVersion(),\n          newExternalViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestExternalViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"NB"}],"commitId":"fc78947a4c42b3e2f905861ac697a3b301e52b3b","commitMessage":"@@@minor fix for customized view aggregation (#917)\n\nFix minor issues in customized view aggregation logic and add some more tests.\n\nCo-authored-by: Meng Zhang <mnzhang@mnzhang-mn1.linkedin.biz>","date":"2020-04-24 03:27:36","modifiedFileCount":"5","status":"M","submitter":"zhangmeng916"},{"authorTime":"2020-05-15 08:34:22","codes":[{"authorDate":"2020-05-15 08:34:22","commitOrder":6,"curCode":"  public void testCachedCustomizedViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STARTED\");\n    accessor\n        .setProperty(keyBuilder.customizedState(INSTANCE_NAME, \"customizedState1\", RESOURCE_NAME),\n            customizedState);\n\n    CustomizedViewAggregationStage customizedViewComputeStage =\n        new CustomizedViewAggregationStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, customizedViewComputeStage);\n    Assert.assertEquals(cache.getCustomizedViewCacheMap().size(),\n        accessor.getChildNames(accessor.keyBuilder().customizedViews()).size());\n\n    \r\n    List<CustomizedView> oldCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews(), true);\n    runStage(event, customizedViewComputeStage);\n    List<CustomizedView> newCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews(), true);\n    Assert.assertEquals(oldCustomizedViews, newCustomizedViews);\n    for (int i = 0; i < oldCustomizedViews.size(); i++) {\n      Assert.assertEquals(oldCustomizedViews.get(i).getStat().getVersion(),\n          newCustomizedViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","date":"2020-05-15 08:34:22","endLine":114,"groupId":"3511","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCachedCustomizedViews","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3b/061f00880bae8f79a6082358a2e6bea9eaf189.src","preCode":"  public void testCachedCustomizedViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STARTED\");\n    accessor\n        .setProperty(keyBuilder.customizedState(INSTANCE_NAME, \"customizedState1\", RESOURCE_NAME),\n            customizedState);\n\n    CustomizedViewAggregationStage customizedViewComputeStage =\n        new CustomizedViewAggregationStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, customizedViewComputeStage);\n    Assert.assertEquals(cache.getCustomizedViewCacheMap().size(),\n        accessor.getChildNames(accessor.keyBuilder().customizedViews()).size());\n\n    \r\n    List<CustomizedView> oldCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews());\n    runStage(event, customizedViewComputeStage);\n    List<CustomizedView> newCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews());\n    Assert.assertEquals(oldCustomizedViews, newCustomizedViews);\n    for (int i = 0; i < oldCustomizedViews.size(); i++) {\n      Assert.assertEquals(oldCustomizedViews.get(i).getStat().getVersion(),\n          newCustomizedViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCustomizedViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-05-15 08:34:22","commitOrder":6,"curCode":"  public void testCachedExternalViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    ExternalViewComputeStage externalViewComputeStage = new ExternalViewComputeStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CurrentStateComputationStage());\n    runStage(event, externalViewComputeStage);\n    Assert.assertEquals(cache.getExternalViews().values(),\n        accessor.getChildValues(accessor.keyBuilder().externalViews(), true));\n\n    \r\n    List<ExternalView> oldExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews(), true);\n    runStage(event, externalViewComputeStage);\n    List<ExternalView> newExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews(), true);\n    Assert.assertEquals(oldExternalViews, newExternalViews);\n    for (int i = 0; i < oldExternalViews.size(); i++) {\n      Assert.assertEquals(oldExternalViews.get(i).getStat().getVersion(),\n          newExternalViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","date":"2020-05-15 08:34:22","endLine":89,"groupId":"5314","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCachedExternalViews","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b4/8c8664b56782a19aa51b565e84f8a5db12cf37.src","preCode":"  public void testCachedExternalViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    ExternalViewComputeStage externalViewComputeStage = new ExternalViewComputeStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CurrentStateComputationStage());\n    runStage(event, externalViewComputeStage);\n    Assert.assertEquals(cache.getExternalViews().values(),\n        accessor.getChildValues(accessor.keyBuilder().externalViews()));\n\n    \r\n    List<ExternalView> oldExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews());\n    runStage(event, externalViewComputeStage);\n    List<ExternalView> newExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews());\n    Assert.assertEquals(oldExternalViews, newExternalViews);\n    for (int i = 0; i < oldExternalViews.size(); i++) {\n      Assert.assertEquals(oldExternalViews.get(i).getStat().getVersion(),\n          newExternalViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestExternalViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"6ff99f5a181fb5fe91340968f93ca2cd5329a90a","commitMessage":"@@@Enforce result check for data accessors batch get calls to prevent partial batch read. (#974)\n\nThis will help to ensure the main Helix logic does not calculate based on incomplete input.","date":"2020-05-15 08:34:22","modifiedFileCount":"49","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-10-07 10:43:50","codes":[{"authorDate":"2020-10-07 10:43:50","commitOrder":7,"curCode":"  public void testCachedCustomizedViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STARTED\");\n    accessor\n        .setProperty(keyBuilder.customizedState(INSTANCE_NAME, \"customizedState1\", RESOURCE_NAME),\n            customizedState);\n\n    CustomizedViewAggregationStage customizedViewComputeStage =\n        new CustomizedViewAggregationStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh, false);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, customizedViewComputeStage);\n    Assert.assertEquals(cache.getCustomizedViewCacheMap().size(),\n        accessor.getChildNames(accessor.keyBuilder().customizedViews()).size());\n\n    \r\n    List<CustomizedView> oldCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews(), true);\n    runStage(event, customizedViewComputeStage);\n    List<CustomizedView> newCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews(), true);\n    Assert.assertEquals(oldCustomizedViews, newCustomizedViews);\n    for (int i = 0; i < oldCustomizedViews.size(); i++) {\n      Assert.assertEquals(oldCustomizedViews.get(i).getStat().getVersion(),\n          newCustomizedViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","date":"2020-10-07 10:43:50","endLine":114,"groupId":"10289","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testCachedCustomizedViews","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/44/bd623188490a781aa9487fe97b8367237fe518.src","preCode":"  public void testCachedCustomizedViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STARTED\");\n    accessor\n        .setProperty(keyBuilder.customizedState(INSTANCE_NAME, \"customizedState1\", RESOURCE_NAME),\n            customizedState);\n\n    CustomizedViewAggregationStage customizedViewComputeStage =\n        new CustomizedViewAggregationStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, customizedViewComputeStage);\n    Assert.assertEquals(cache.getCustomizedViewCacheMap().size(),\n        accessor.getChildNames(accessor.keyBuilder().customizedViews()).size());\n\n    \r\n    List<CustomizedView> oldCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews(), true);\n    runStage(event, customizedViewComputeStage);\n    List<CustomizedView> newCustomizedViews =\n        accessor.getChildValues(accessor.keyBuilder().customizedViews(), true);\n    Assert.assertEquals(oldCustomizedViews, newCustomizedViews);\n    for (int i = 0; i < oldCustomizedViews.size(); i++) {\n      Assert.assertEquals(oldCustomizedViews.get(i).getStat().getVersion(),\n          newCustomizedViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCustomizedViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-10-07 10:43:50","commitOrder":7,"curCode":"  public void testCachedExternalViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    ExternalViewComputeStage externalViewComputeStage = new ExternalViewComputeStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh, false);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CurrentStateComputationStage());\n    runStage(event, externalViewComputeStage);\n    Assert.assertEquals(cache.getExternalViews().values(),\n        accessor.getChildValues(accessor.keyBuilder().externalViews(), true));\n\n    \r\n    List<ExternalView> oldExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews(), true);\n    runStage(event, externalViewComputeStage);\n    List<ExternalView> newExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews(), true);\n    Assert.assertEquals(oldExternalViews, newExternalViews);\n    for (int i = 0; i < oldExternalViews.size(); i++) {\n      Assert.assertEquals(oldExternalViews.get(i).getStat().getVersion(),\n          newExternalViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","date":"2020-10-07 10:43:50","endLine":89,"groupId":"10289","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testCachedExternalViews","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0c/84d8d1878e1d0db12c76f32cdc73fa6927233b.src","preCode":"  public void testCachedExternalViews() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, new String[] {\n        \"TestDB\"\n    }, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    ExternalViewComputeStage externalViewComputeStage = new ExternalViewComputeStage();\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CurrentStateComputationStage());\n    runStage(event, externalViewComputeStage);\n    Assert.assertEquals(cache.getExternalViews().values(),\n        accessor.getChildValues(accessor.keyBuilder().externalViews(), true));\n\n    \r\n    List<ExternalView> oldExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews(), true);\n    runStage(event, externalViewComputeStage);\n    List<ExternalView> newExternalViews =\n        accessor.getChildValues(accessor.keyBuilder().externalViews(), true);\n    Assert.assertEquals(oldExternalViews, newExternalViews);\n    for (int i = 0; i < oldExternalViews.size(); i++) {\n      Assert.assertEquals(oldExternalViews.get(i).getStat().getVersion(),\n          newExternalViews.get(i).getStat().getVersion());\n    }\n\n    if (manager.isConnected()) {\n      manager.disconnect(); \r\n    }\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestExternalViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"fa8f4b676fc8cd81a80b2f8d8aa97d2cf5c5087f","commitMessage":"@@@Prevent parallel controller pipelines run causing two master replicas (#1066)\n\nThere is a case that after controller leader switches.  pipelines of both old Helix controller leader and new leader are running in parallel.\nDifferent assignment decisions are sent to different participants so there are double masters for a single partition.\n\nThe commit addresses this issue by blocking non-leader controller to send messages to ZK.","date":"2020-10-07 10:43:50","modifiedFileCount":"17","status":"M","submitter":"Huizhi Lu"}]
