[{"authorTime":"2013-08-22 04:42:57","codes":[{"authorDate":"2013-01-03 14:42:49","commitOrder":2,"curCode":"  public static String[] parseStates(String clusterName, StateModelDefinition stateModDef)\n  {\n    String[] result = new String[2];\n    String masterStateValue = null, slaveStateValue = null;\n\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    for (String state : statePriorityList)\n    {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\"))\n      {\n        if (masterStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"R\"))\n      {\n        if (slaveStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"N\"))\n      {\n        if (!(masterStateValue == null && slaveStateValue == null))\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null)\n    {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null)\n    {\n      masterStateValue = slaveStateValue;\n    }\n    result[0] = masterStateValue;\n    result[1] = slaveStateValue;\n    return result;\n  }\n","date":"2013-01-03 14:42:49","endLine":145,"groupId":"3390","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseStates","params":"(StringclusterName@StateModelDefinitionstateModDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f6/b02e827db5c7f447bb1a0f9b33458be7e4d70c.src","preCode":"  public static String[] parseStates(String clusterName, StateModelDefinition stateModDef)\n  {\n    String[] result = new String[2];\n    String masterStateValue = null, slaveStateValue = null;\n\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    for (String state : statePriorityList)\n    {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\"))\n      {\n        if (masterStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"R\"))\n      {\n        if (slaveStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"N\"))\n      {\n        if (!(masterStateValue == null && slaveStateValue == null))\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null)\n    {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null)\n    {\n      masterStateValue = slaveStateValue;\n    }\n    result[0] = masterStateValue;\n    result[1] = slaveStateValue;\n    return result;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/util/RebalanceUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"NB"},{"authorDate":"2013-08-22 04:42:57","commitOrder":2,"curCode":"  void rebalance(String clusterName, String resourceName, int replica, String keyPrefix,\n      List<String> instanceNames, String groupId) {\n    \r\n    Collections.sort(instanceNames);\n\n    IdealState idealState = getResourceIdealState(clusterName, resourceName);\n    if (idealState == null) {\n      throw new HelixException(\"Resource: \" + resourceName + \" has NOT been added yet\");\n    }\n\n    if (groupId != null && groupId.length() > 0) {\n      idealState.setInstanceGroupTag(groupId);\n    }\n    idealState.setReplicas(Integer.toString(replica));\n    int partitions = idealState.getNumPartitions();\n    String stateModelName = idealState.getStateModelDefRef();\n    StateModelDefinition stateModDef = getStateModelDef(clusterName, stateModelName);\n\n    if (stateModDef == null) {\n      throw new HelixException(\"cannot find state model: \" + stateModelName);\n    }\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    String masterStateValue = null;\n    String slaveStateValue = null;\n    replica--;\n\n    for (String state : statePriorityList) {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\")) {\n        if (masterStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      } else if (count.equalsIgnoreCase(\"R\")) {\n        if (slaveStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      } else if (count.equalsIgnoreCase(\"N\")) {\n        if (!(masterStateValue == null && slaveStateValue == null)) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        replica = instanceNames.size() - 1;\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null) {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null) {\n      masterStateValue = slaveStateValue;\n    }\n    if (idealState.getRebalanceMode() != RebalanceMode.FULL_AUTO) {\n      ZNRecord newIdealState =\n          DefaultIdealStateCalculator.calculateIdealState(instanceNames, partitions, replica,\n              keyPrefix, masterStateValue, slaveStateValue);\n\n      \r\n      if (idealState.getRebalanceMode() == RebalanceMode.SEMI_AUTO\n          || idealState.getRebalanceMode() == RebalanceMode.USER_DEFINED) {\n        idealState.getRecord().setListFields(newIdealState.getListFields());\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n      if (idealState.getRebalanceMode() == RebalanceMode.CUSTOMIZED) {\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n    } else {\n      for (int i = 0; i < partitions; i++) {\n        String partitionName = keyPrefix + \"_\" + i;\n        idealState.getRecord().setMapField(partitionName, new HashMap<String, String>());\n        idealState.getRecord().setListField(partitionName, new ArrayList<String>());\n      }\n    }\n    setResourceIdealState(clusterName, resourceName, idealState);\n  }\n","date":"2013-08-22 04:42:57","endLine":1048,"groupId":"5690","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"rebalance","params":"(StringclusterName@StringresourceName@intreplica@StringkeyPrefix@List<String>instanceNames@StringgroupId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/08/a820810365456b99f97e24f021009a75433f4e.src","preCode":"  void rebalance(String clusterName, String resourceName, int replica, String keyPrefix,\n      List<String> instanceNames, String groupId) {\n    \r\n    Collections.sort(instanceNames);\n\n    IdealState idealState = getResourceIdealState(clusterName, resourceName);\n    if (idealState == null) {\n      throw new HelixException(\"Resource: \" + resourceName + \" has NOT been added yet\");\n    }\n\n    if (groupId != null && groupId.length() > 0) {\n      idealState.setInstanceGroupTag(groupId);\n    }\n    idealState.setReplicas(Integer.toString(replica));\n    int partitions = idealState.getNumPartitions();\n    String stateModelName = idealState.getStateModelDefRef();\n    StateModelDefinition stateModDef = getStateModelDef(clusterName, stateModelName);\n\n    if (stateModDef == null) {\n      throw new HelixException(\"cannot find state model: \" + stateModelName);\n    }\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    String masterStateValue = null;\n    String slaveStateValue = null;\n    replica--;\n\n    for (String state : statePriorityList) {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\")) {\n        if (masterStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      } else if (count.equalsIgnoreCase(\"R\")) {\n        if (slaveStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      } else if (count.equalsIgnoreCase(\"N\")) {\n        if (!(masterStateValue == null && slaveStateValue == null)) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        replica = instanceNames.size() - 1;\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null) {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null) {\n      masterStateValue = slaveStateValue;\n    }\n    if (idealState.getRebalanceMode() != RebalanceMode.FULL_AUTO) {\n      ZNRecord newIdealState =\n          DefaultIdealStateCalculator.calculateIdealState(instanceNames, partitions, replica,\n              keyPrefix, masterStateValue, slaveStateValue);\n\n      \r\n      if (idealState.getRebalanceMode() == RebalanceMode.SEMI_AUTO\n          || idealState.getRebalanceMode() == RebalanceMode.USER_DEFINED) {\n        idealState.getRecord().setListFields(newIdealState.getListFields());\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n      if (idealState.getRebalanceMode() == RebalanceMode.CUSTOMIZED) {\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n    } else {\n      for (int i = 0; i < partitions; i++) {\n        String partitionName = keyPrefix + \"_\" + i;\n        idealState.getRecord().setMapField(partitionName, new HashMap<String, String>());\n        idealState.getRecord().setListField(partitionName, new ArrayList<String>());\n      }\n    }\n    setResourceIdealState(clusterName, resourceName, idealState);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":970,"status":"B"}],"commitId":"f414aad4c9b26fc767eaf373f7691f8e0487a598","commitMessage":"@@@[HELIX-198] Unify helix code style.  rb=13710\n","date":"2013-08-22 04:42:57","modifiedFileCount":"597","status":"M","submitter":"zzhang"},{"authorTime":"2014-03-27 08:33:13","codes":[{"authorDate":"2013-01-03 14:42:49","commitOrder":3,"curCode":"  public static String[] parseStates(String clusterName, StateModelDefinition stateModDef)\n  {\n    String[] result = new String[2];\n    String masterStateValue = null, slaveStateValue = null;\n\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    for (String state : statePriorityList)\n    {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\"))\n      {\n        if (masterStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"R\"))\n      {\n        if (slaveStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"N\"))\n      {\n        if (!(masterStateValue == null && slaveStateValue == null))\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null)\n    {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null)\n    {\n      masterStateValue = slaveStateValue;\n    }\n    result[0] = masterStateValue;\n    result[1] = slaveStateValue;\n    return result;\n  }\n","date":"2013-01-03 14:42:49","endLine":145,"groupId":"3390","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parseStates","params":"(StringclusterName@StateModelDefinitionstateModDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f6/b02e827db5c7f447bb1a0f9b33458be7e4d70c.src","preCode":"  public static String[] parseStates(String clusterName, StateModelDefinition stateModDef)\n  {\n    String[] result = new String[2];\n    String masterStateValue = null, slaveStateValue = null;\n\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    for (String state : statePriorityList)\n    {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\"))\n      {\n        if (masterStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"R\"))\n      {\n        if (slaveStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"N\"))\n      {\n        if (!(masterStateValue == null && slaveStateValue == null))\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null)\n    {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null)\n    {\n      masterStateValue = slaveStateValue;\n    }\n    result[0] = masterStateValue;\n    result[1] = slaveStateValue;\n    return result;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/util/RebalanceUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2014-03-27 08:33:13","commitOrder":3,"curCode":"  void rebalance(String clusterName, String resourceName, int replica, String keyPrefix,\n      List<String> instanceNames, String groupId) {\n    \r\n    Collections.sort(instanceNames);\n\n    IdealState idealState = getResourceIdealState(clusterName, resourceName);\n    if (idealState == null) {\n      throw new HelixException(\"Resource: \" + resourceName + \" has NOT been added yet\");\n    }\n\n    if (groupId != null && groupId.length() > 0) {\n      idealState.setInstanceGroupTag(groupId);\n    }\n    idealState.setReplicas(Integer.toString(replica));\n    int partitions = idealState.getNumPartitions();\n    String stateModelName = idealState.getStateModelDefRef();\n    StateModelDefinition stateModDef = getStateModelDef(clusterName, stateModelName);\n\n    if (stateModDef == null) {\n      throw new HelixException(\"cannot find state model: \" + stateModelName);\n    }\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    String masterStateValue = null;\n    String slaveStateValue = null;\n    replica--;\n\n    for (String state : statePriorityList) {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\")) {\n        if (masterStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      } else if (count.equalsIgnoreCase(\"R\")) {\n        if (slaveStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      } else if (count.equalsIgnoreCase(\"N\")) {\n        if (!(masterStateValue == null && slaveStateValue == null)) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        replica = instanceNames.size() - 1;\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null) {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null) {\n      masterStateValue = slaveStateValue;\n    }\n    if (idealState.getRebalanceMode() != RebalanceMode.FULL_AUTO\n        && idealState.getRebalanceMode() != RebalanceMode.USER_DEFINED) {\n      ZNRecord newIdealState =\n          DefaultIdealStateCalculator.calculateIdealState(instanceNames, partitions, replica,\n              keyPrefix, masterStateValue, slaveStateValue);\n\n      \r\n      if (idealState.getRebalanceMode() == RebalanceMode.SEMI_AUTO) {\n        idealState.getRecord().setListFields(newIdealState.getListFields());\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n      if (idealState.getRebalanceMode() == RebalanceMode.CUSTOMIZED) {\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n    } else {\n      for (int i = 0; i < partitions; i++) {\n        String partitionName = keyPrefix + \"_\" + i;\n        idealState.getRecord().setMapField(partitionName, new HashMap<String, String>());\n        idealState.getRecord().setListField(partitionName, new ArrayList<String>());\n      }\n    }\n    setResourceIdealState(clusterName, resourceName, idealState);\n  }\n","date":"2014-03-27 08:33:13","endLine":1042,"groupId":"261","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"rebalance","params":"(StringclusterName@StringresourceName@intreplica@StringkeyPrefix@List<String>instanceNames@StringgroupId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ff/501181fb8f307abe0ca1edd65055cd05bbec5c.src","preCode":"  void rebalance(String clusterName, String resourceName, int replica, String keyPrefix,\n      List<String> instanceNames, String groupId) {\n    \r\n    Collections.sort(instanceNames);\n\n    IdealState idealState = getResourceIdealState(clusterName, resourceName);\n    if (idealState == null) {\n      throw new HelixException(\"Resource: \" + resourceName + \" has NOT been added yet\");\n    }\n\n    if (groupId != null && groupId.length() > 0) {\n      idealState.setInstanceGroupTag(groupId);\n    }\n    idealState.setReplicas(Integer.toString(replica));\n    int partitions = idealState.getNumPartitions();\n    String stateModelName = idealState.getStateModelDefRef();\n    StateModelDefinition stateModDef = getStateModelDef(clusterName, stateModelName);\n\n    if (stateModDef == null) {\n      throw new HelixException(\"cannot find state model: \" + stateModelName);\n    }\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    String masterStateValue = null;\n    String slaveStateValue = null;\n    replica--;\n\n    for (String state : statePriorityList) {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\")) {\n        if (masterStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      } else if (count.equalsIgnoreCase(\"R\")) {\n        if (slaveStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      } else if (count.equalsIgnoreCase(\"N\")) {\n        if (!(masterStateValue == null && slaveStateValue == null)) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        replica = instanceNames.size() - 1;\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null) {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null) {\n      masterStateValue = slaveStateValue;\n    }\n    if (idealState.getRebalanceMode() != RebalanceMode.FULL_AUTO) {\n      ZNRecord newIdealState =\n          DefaultIdealStateCalculator.calculateIdealState(instanceNames, partitions, replica,\n              keyPrefix, masterStateValue, slaveStateValue);\n\n      \r\n      if (idealState.getRebalanceMode() == RebalanceMode.SEMI_AUTO\n          || idealState.getRebalanceMode() == RebalanceMode.USER_DEFINED) {\n        idealState.getRecord().setListFields(newIdealState.getListFields());\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n      if (idealState.getRebalanceMode() == RebalanceMode.CUSTOMIZED) {\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n    } else {\n      for (int i = 0; i < partitions; i++) {\n        String partitionName = keyPrefix + \"_\" + i;\n        idealState.getRecord().setMapField(partitionName, new HashMap<String, String>());\n        idealState.getRecord().setListField(partitionName, new ArrayList<String>());\n      }\n    }\n    setResourceIdealState(clusterName, resourceName, idealState);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":964,"status":"M"}],"commitId":"1e017f16a8a694c819edb0c3eddeecee3245f6b8","commitMessage":"@@@[HELIX-336] Add support for task framework.  0.6.x merge\n","date":"2014-03-27 08:33:13","modifiedFileCount":"19","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2018-04-20 09:19:51","codes":[{"authorDate":"2013-01-03 14:42:49","commitOrder":4,"curCode":"  public static String[] parseStates(String clusterName, StateModelDefinition stateModDef)\n  {\n    String[] result = new String[2];\n    String masterStateValue = null, slaveStateValue = null;\n\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    for (String state : statePriorityList)\n    {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\"))\n      {\n        if (masterStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"R\"))\n      {\n        if (slaveStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"N\"))\n      {\n        if (!(masterStateValue == null && slaveStateValue == null))\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null)\n    {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null)\n    {\n      masterStateValue = slaveStateValue;\n    }\n    result[0] = masterStateValue;\n    result[1] = slaveStateValue;\n    return result;\n  }\n","date":"2013-01-03 14:42:49","endLine":145,"groupId":"12788","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"parseStates","params":"(StringclusterName@StateModelDefinitionstateModDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f6/b02e827db5c7f447bb1a0f9b33458be7e4d70c.src","preCode":"  public static String[] parseStates(String clusterName, StateModelDefinition stateModDef)\n  {\n    String[] result = new String[2];\n    String masterStateValue = null, slaveStateValue = null;\n\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    for (String state : statePriorityList)\n    {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\"))\n      {\n        if (masterStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"R\"))\n      {\n        if (slaveStateValue != null)\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      }\n      else if (count.equalsIgnoreCase(\"N\"))\n      {\n        if (!(masterStateValue == null && slaveStateValue == null))\n        {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null)\n    {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null)\n    {\n      masterStateValue = slaveStateValue;\n    }\n    result[0] = masterStateValue;\n    result[1] = slaveStateValue;\n    return result;\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/util/RebalanceUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2018-04-20 09:19:51","commitOrder":4,"curCode":"  void rebalance(String clusterName, String resourceName, int replica, String keyPrefix,\n      List<String> instanceNames, String groupId) {\n    logger.info(\"Rebalance resource {} with replica {} in cluster {}.\", resourceName, replica,\n        clusterName);\n    \r\n    Collections.sort(instanceNames);\n\n    IdealState idealState = getResourceIdealState(clusterName, resourceName);\n    if (idealState == null) {\n      throw new HelixException(\"Resource: \" + resourceName + \" has NOT been added yet\");\n    }\n\n    if (groupId != null && groupId.length() > 0) {\n      idealState.setInstanceGroupTag(groupId);\n    }\n    idealState.setReplicas(Integer.toString(replica));\n    int partitions = idealState.getNumPartitions();\n    String stateModelName = idealState.getStateModelDefRef();\n    StateModelDefinition stateModDef = getStateModelDef(clusterName, stateModelName);\n\n    if (stateModDef == null) {\n      throw new HelixException(\"cannot find state model: \" + stateModelName);\n    }\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    String masterStateValue = null;\n    String slaveStateValue = null;\n    replica--;\n\n    for (String state : statePriorityList) {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\")) {\n        if (masterStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      } else if (count.equalsIgnoreCase(\"R\")) {\n        if (slaveStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      } else if (count.equalsIgnoreCase(\"N\")) {\n        if (!(masterStateValue == null && slaveStateValue == null)) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        replica = instanceNames.size() - 1;\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null) {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null) {\n      masterStateValue = slaveStateValue;\n    }\n    if (idealState.getRebalanceMode() != RebalanceMode.FULL_AUTO\n        && idealState.getRebalanceMode() != RebalanceMode.USER_DEFINED) {\n      ZNRecord newIdealState = DefaultIdealStateCalculator\n          .calculateIdealState(instanceNames, partitions, replica, keyPrefix, masterStateValue,\n              slaveStateValue);\n\n      \r\n      if (idealState.getRebalanceMode() == RebalanceMode.SEMI_AUTO) {\n        idealState.getRecord().setListFields(newIdealState.getListFields());\n        \r\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n      if (idealState.getRebalanceMode() == RebalanceMode.CUSTOMIZED) {\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n    } else {\n      for (int i = 0; i < partitions; i++) {\n        String partitionName = keyPrefix + \"_\" + i;\n        idealState.getRecord().setMapField(partitionName, new HashMap<String, String>());\n        idealState.getRecord().setListField(partitionName, new ArrayList<String>());\n      }\n    }\n    setResourceIdealState(clusterName, resourceName, idealState);\n  }\n","date":"2018-04-20 09:19:51","endLine":1070,"groupId":"12788","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"rebalance","params":"(StringclusterName@StringresourceName@intreplica@StringkeyPrefix@List<String>instanceNames@StringgroupId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/708e567f1eb033b6d41cf6dc98340befa6b83c.src","preCode":"  void rebalance(String clusterName, String resourceName, int replica, String keyPrefix,\n      List<String> instanceNames, String groupId) {\n    \r\n    Collections.sort(instanceNames);\n\n    IdealState idealState = getResourceIdealState(clusterName, resourceName);\n    if (idealState == null) {\n      throw new HelixException(\"Resource: \" + resourceName + \" has NOT been added yet\");\n    }\n\n    if (groupId != null && groupId.length() > 0) {\n      idealState.setInstanceGroupTag(groupId);\n    }\n    idealState.setReplicas(Integer.toString(replica));\n    int partitions = idealState.getNumPartitions();\n    String stateModelName = idealState.getStateModelDefRef();\n    StateModelDefinition stateModDef = getStateModelDef(clusterName, stateModelName);\n\n    if (stateModDef == null) {\n      throw new HelixException(\"cannot find state model: \" + stateModelName);\n    }\n    \r\n\n    List<String> statePriorityList = stateModDef.getStatesPriorityList();\n\n    String masterStateValue = null;\n    String slaveStateValue = null;\n    replica--;\n\n    for (String state : statePriorityList) {\n      String count = stateModDef.getNumInstancesPerState(state);\n      if (count.equals(\"1\")) {\n        if (masterStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        masterStateValue = state;\n      } else if (count.equalsIgnoreCase(\"R\")) {\n        if (slaveStateValue != null) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        slaveStateValue = state;\n      } else if (count.equalsIgnoreCase(\"N\")) {\n        if (!(masterStateValue == null && slaveStateValue == null)) {\n          throw new HelixException(\"Invalid or unsupported state model definition\");\n        }\n        replica = instanceNames.size() - 1;\n        masterStateValue = slaveStateValue = state;\n      }\n    }\n    if (masterStateValue == null && slaveStateValue == null) {\n      throw new HelixException(\"Invalid or unsupported state model definition\");\n    }\n\n    if (masterStateValue == null) {\n      masterStateValue = slaveStateValue;\n    }\n    if (idealState.getRebalanceMode() != RebalanceMode.FULL_AUTO\n        && idealState.getRebalanceMode() != RebalanceMode.USER_DEFINED) {\n      ZNRecord newIdealState = DefaultIdealStateCalculator\n          .calculateIdealState(instanceNames, partitions, replica, keyPrefix, masterStateValue,\n              slaveStateValue);\n\n      \r\n      if (idealState.getRebalanceMode() == RebalanceMode.SEMI_AUTO) {\n        idealState.getRecord().setListFields(newIdealState.getListFields());\n        \r\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n      if (idealState.getRebalanceMode() == RebalanceMode.CUSTOMIZED) {\n        idealState.getRecord().setMapFields(newIdealState.getMapFields());\n      }\n    } else {\n      for (int i = 0; i < partitions; i++) {\n        String partitionName = keyPrefix + \"_\" + i;\n        idealState.getRecord().setMapField(partitionName, new HashMap<String, String>());\n        idealState.getRecord().setListField(partitionName, new ArrayList<String>());\n      }\n    }\n    setResourceIdealState(clusterName, resourceName, idealState);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":989,"status":"M"}],"commitId":"a6bdb3c2252a11a51939e1e06083a24ccf5a2ac2","commitMessage":"@@@Add logs for RoutingTableProvider and HelixAdmin\n","date":"2018-04-20 09:19:51","modifiedFileCount":"1","status":"M","submitter":"Junkai Xue"}]
