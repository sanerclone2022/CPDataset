[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testUpdateConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String key = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(key);\n    record.getSimpleFields().clear();\n    record.setSimpleField(key, value + \"--updated\");\n\n    key = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(key);\n    list.remove(0);\n    list.add(\"newValue--updated\");\n    record.getListFields().clear();\n    record.setListField(key, list);\n\n    key = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(key);\n    Iterator it = map.entrySet().iterator();\n    it.next();\n    it.remove();\n    map.put(\"newKey--updated\", \"newValue--updated\");\n    record.getMapFields().clear();\n    record.setMapField(key, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.update);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    prevConfig.getRecord().update(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig,\n        \"cluster config from response: \" + newConfig + \" vs cluster config actually: \" + prevConfig);\n  }\n","date":"2017-11-08 08:48:26","endLine":138,"groupId":"3999","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateConfigFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/95/d1951bd014a6f76c0d8f9958a3c688013df755.src","preCode":"  public void testUpdateConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String key = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(key);\n    record.getSimpleFields().clear();\n    record.setSimpleField(key, value + \"--updated\");\n\n    key = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(key);\n    list.remove(0);\n    list.add(\"newValue--updated\");\n    record.getListFields().clear();\n    record.setListField(key, list);\n\n    key = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(key);\n    Iterator it = map.entrySet().iterator();\n    it.next();\n    it.remove();\n    map.put(\"newKey--updated\", \"newValue--updated\");\n    record.getMapFields().clear();\n    record.setMapField(key, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.update);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    prevConfig.getRecord().update(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig,\n        \"cluster config from response: \" + newConfig + \" vs cluster config actually: \" + prevConfig);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testDeleteConfigFields()\n      throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String simpleKey = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(simpleKey);\n    record.getSimpleFields().clear();\n    record.setSimpleField(simpleKey, value);\n\n    String listKey = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(listKey);\n    record.getListFields().clear();\n    record.setListField(listKey, list);\n\n    String mapKey = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(mapKey);\n    record.getMapFields().clear();\n    record.setMapField(mapKey, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.delete);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(simpleKey),\n        \"Failed to delete key \" + simpleKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getListFields().containsKey(listKey),\n        \"Failed to delete key \" + listKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(mapKey),\n        \"Failed to delete key \" + mapKey + \" from cluster config\");\n\n    prevConfig.getRecord().subtract(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig,\n        \"cluster config from response: \" + newConfig + \" vs cluster config actually: \"\n            + prevConfig);\n  }\n","date":"2017-11-08 08:48:26","endLine":179,"groupId":"4271","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteConfigFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/95/d1951bd014a6f76c0d8f9958a3c688013df755.src","preCode":"  public void testDeleteConfigFields()\n      throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String simpleKey = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(simpleKey);\n    record.getSimpleFields().clear();\n    record.setSimpleField(simpleKey, value);\n\n    String listKey = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(listKey);\n    record.getListFields().clear();\n    record.setListField(listKey, list);\n\n    String mapKey = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(mapKey);\n    record.getMapFields().clear();\n    record.setMapField(mapKey, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.delete);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(simpleKey),\n        \"Failed to delete key \" + simpleKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getListFields().containsKey(listKey),\n        \"Failed to delete key \" + listKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(mapKey),\n        \"Failed to delete key \" + mapKey + \" from cluster config\");\n\n    prevConfig.getRecord().subtract(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig,\n        \"cluster config from response: \" + newConfig + \" vs cluster config actually: \"\n            + prevConfig);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2019-08-06 07:25:03","codes":[{"authorDate":"2019-08-06 07:25:03","commitOrder":2,"curCode":"  public void testUpdateConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String key = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(key);\n    record.getSimpleFields().clear();\n    record.setSimpleField(key, value + \"--updated\");\n\n    key = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(key);\n    list.remove(0);\n    list.add(\"newValue--updated\");\n    record.getListFields().clear();\n    record.setListField(key, list);\n\n    key = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(key);\n    Iterator it = map.entrySet().iterator();\n    it.next();\n    it.remove();\n    map.put(\"newKey--updated\", \"newValue--updated\");\n    record.getMapFields().clear();\n    record.setMapField(key, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.update);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    prevConfig.getRecord().update(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig, \"cluster config from response: \" + newConfig\n        + \" vs cluster config actually: \" + prevConfig);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":187,"groupId":"3999","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateConfigFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ee/a004c8be2e5eec34df7b1fd7eac7e5b37a2499.src","preCode":"  public void testUpdateConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String key = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(key);\n    record.getSimpleFields().clear();\n    record.setSimpleField(key, value + \"--updated\");\n\n    key = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(key);\n    list.remove(0);\n    list.add(\"newValue--updated\");\n    record.getListFields().clear();\n    record.setListField(key, list);\n\n    key = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(key);\n    Iterator it = map.entrySet().iterator();\n    it.next();\n    it.remove();\n    map.put(\"newKey--updated\", \"newValue--updated\");\n    record.getMapFields().clear();\n    record.setMapField(key, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.update);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    prevConfig.getRecord().update(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig, \"cluster config from response: \" + newConfig\n        + \" vs cluster config actually: \" + prevConfig);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2019-08-06 07:25:03","commitOrder":2,"curCode":"  public void testDeleteConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String simpleKey = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(simpleKey);\n    record.getSimpleFields().clear();\n    record.setSimpleField(simpleKey, value);\n\n    String listKey = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(listKey);\n    record.getListFields().clear();\n    record.setListField(listKey, list);\n\n    String mapKey = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(mapKey);\n    record.getMapFields().clear();\n    record.setMapField(mapKey, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.delete);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(simpleKey),\n        \"Failed to delete key \" + simpleKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getListFields().containsKey(listKey),\n        \"Failed to delete key \" + listKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(mapKey),\n        \"Failed to delete key \" + mapKey + \" from cluster config\");\n\n    prevConfig.getRecord().subtract(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig, \"cluster config from response: \" + newConfig\n        + \" vs cluster config actually: \" + prevConfig);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":227,"groupId":"4271","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteConfigFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ee/a004c8be2e5eec34df7b1fd7eac7e5b37a2499.src","preCode":"  public void testDeleteConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String simpleKey = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(simpleKey);\n    record.getSimpleFields().clear();\n    record.setSimpleField(simpleKey, value);\n\n    String listKey = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(listKey);\n    record.getListFields().clear();\n    record.setListField(listKey, list);\n\n    String mapKey = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(mapKey);\n    record.getMapFields().clear();\n    record.setMapField(mapKey, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.delete);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(simpleKey),\n        \"Failed to delete key \" + simpleKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getListFields().containsKey(listKey),\n        \"Failed to delete key \" + listKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(mapKey),\n        \"Failed to delete key \" + mapKey + \" from cluster config\");\n\n    prevConfig.getRecord().subtract(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig, \"cluster config from response: \" + newConfig\n        + \" vs cluster config actually: \" + prevConfig);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"af00b8df4f9ea432a8186b4c50c3a5bc3ddf035b","commitMessage":"@@@Stablize the REST tests\n\nStablize the REST tests by following changes:\n1. Remove temporary cluster which impact the ClusterAccessor test\n2. Add all start/end message for test debug purpose.\n3. Disable unstable monitoring test for default MBeans. Sometimes we can query it sometimes not. It is not critical test path. Let's make it stable later.\n","date":"2019-08-08 05:10:37","modifiedFileCount":"10","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-08-06 07:25:03","codes":[{"authorDate":"2020-12-08 07:57:30","commitOrder":3,"curCode":"  public void testUpdateConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = \"TestCluster_1\";\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String key = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(key);\n    record.getSimpleFields().clear();\n    record.setSimpleField(key, value + \"--updated\");\n\n    key = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(key);\n    list.remove(0);\n    list.add(\"newValue--updated\");\n    record.getListFields().clear();\n    record.setListField(key, list);\n\n    key = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(key);\n    Iterator it = map.entrySet().iterator();\n    it.next();\n    it.remove();\n    map.put(\"newKey--updated\", \"newValue--updated\");\n    record.getMapFields().clear();\n    record.setMapField(key, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.update);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    prevConfig.getRecord().update(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig, \"cluster config from response: \" + newConfig\n        + \" vs cluster config actually: \" + prevConfig);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2020-12-08 07:57:30","endLine":287,"groupId":"101086","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateConfigFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f7/3738f3607bf1ea3e88af05d6cc5bb46b5f0510.src","preCode":"  public void testUpdateConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String key = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(key);\n    record.getSimpleFields().clear();\n    record.setSimpleField(key, value + \"--updated\");\n\n    key = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(key);\n    list.remove(0);\n    list.add(\"newValue--updated\");\n    record.getListFields().clear();\n    record.setListField(key, list);\n\n    key = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(key);\n    Iterator it = map.entrySet().iterator();\n    it.next();\n    it.remove();\n    map.put(\"newKey--updated\", \"newValue--updated\");\n    record.getMapFields().clear();\n    record.setMapField(key, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.update);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    prevConfig.getRecord().update(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig, \"cluster config from response: \" + newConfig\n        + \" vs cluster config actually: \" + prevConfig);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"},{"authorDate":"2019-08-06 07:25:03","commitOrder":3,"curCode":"  public void testDeleteConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String simpleKey = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(simpleKey);\n    record.getSimpleFields().clear();\n    record.setSimpleField(simpleKey, value);\n\n    String listKey = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(listKey);\n    record.getListFields().clear();\n    record.setListField(listKey, list);\n\n    String mapKey = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(mapKey);\n    record.getMapFields().clear();\n    record.setMapField(mapKey, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.delete);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(simpleKey),\n        \"Failed to delete key \" + simpleKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getListFields().containsKey(listKey),\n        \"Failed to delete key \" + listKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(mapKey),\n        \"Failed to delete key \" + mapKey + \" from cluster config\");\n\n    prevConfig.getRecord().subtract(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig, \"cluster config from response: \" + newConfig\n        + \" vs cluster config actually: \" + prevConfig);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":227,"groupId":"101086","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteConfigFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ee/a004c8be2e5eec34df7b1fd7eac7e5b37a2499.src","preCode":"  public void testDeleteConfigFields() throws IOException {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    String cluster = _clusters.iterator().next();\n    ClusterConfig config = getClusterConfigFromRest(cluster);\n\n    ZNRecord record = config.getRecord();\n\n    String simpleKey = record.getSimpleFields().keySet().iterator().next();\n    String value = record.getSimpleField(simpleKey);\n    record.getSimpleFields().clear();\n    record.setSimpleField(simpleKey, value);\n\n    String listKey = record.getListFields().keySet().iterator().next();\n    List<String> list = record.getListField(listKey);\n    record.getListFields().clear();\n    record.setListField(listKey, list);\n\n    String mapKey = record.getMapFields().keySet().iterator().next();\n    Map<String, String> map = record.getMapField(mapKey);\n    record.getMapFields().clear();\n    record.setMapField(mapKey, map);\n\n    ClusterConfig prevConfig = getClusterConfigFromRest(cluster);\n    updateClusterConfigFromRest(cluster, config, Command.delete);\n    ClusterConfig newConfig = getClusterConfigFromRest(cluster);\n\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(simpleKey),\n        \"Failed to delete key \" + simpleKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getListFields().containsKey(listKey),\n        \"Failed to delete key \" + listKey + \" from cluster config\");\n    Assert.assertFalse(newConfig.getRecord().getSimpleFields().containsKey(mapKey),\n        \"Failed to delete key \" + mapKey + \" from cluster config\");\n\n    prevConfig.getRecord().subtract(config.getRecord());\n    Assert.assertEquals(newConfig, prevConfig, \"cluster config from response: \" + newConfig\n        + \" vs cluster config actually: \" + prevConfig);\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestClusterAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"N"}],"commitId":"c4c930421b8c0c077c1612ace98f60fe60118136","commitMessage":"@@@fix test Helix-rest testAddConfigFields (#1560)\n\nFix test Helix-rest testAddConfigFields\n\n","date":"2020-12-08 07:57:30","modifiedFileCount":"1","status":"M","submitter":"xyuanlu"}]
