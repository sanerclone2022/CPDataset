[{"authorTime":"2015-04-03 06:40:09","codes":[{"authorDate":"2015-06-10 05:40:32","commitOrder":2,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2015-06-18 02:10:26","endLine":374,"groupId":"3165","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/01/1ed81cb5e73d0503c751e4058e36ff556070c3.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"B"},{"authorDate":"2015-04-03 06:40:09","commitOrder":2,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2015-04-03 06:40:09","endLine":521,"groupId":"3165","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8a/4467241089b5d68fdc078c0ba7d4a7ce3217af.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"NB"}],"commitId":"2775e1566df7ceb67edd7587b81d4c245aedab38","commitMessage":"@@@[HELIX-600] Task scheduler fails to schedule a recurring workflow if the startTime is set to a future timestamp.\n","date":"2015-06-18 02:10:26","modifiedFileCount":"2","status":"M","submitter":"Lei Xia"},{"authorTime":"2015-04-03 06:40:09","codes":[{"authorDate":"2015-11-21 07:54:34","commitOrder":3,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2015-11-21 07:54:34","endLine":414,"groupId":"2248","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/c91137209c1cbba1de1e98397bc25789e2f427.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"M"},{"authorDate":"2015-04-03 06:40:09","commitOrder":3,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2015-04-03 06:40:09","endLine":521,"groupId":"3165","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8a/4467241089b5d68fdc078c0ba7d4a7ce3217af.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"N"}],"commitId":"7bbb20be67a939a57f33d8f6d7c814b1dc246575","commitMessage":"@@@[HELIX-616] Change JobQueue to be subclass of Workflow instead of WorkflowConfig.\n","date":"2015-11-21 07:54:34","modifiedFileCount":"9","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-02-11 08:33:08","codes":[{"authorDate":"2016-02-11 08:33:08","commitOrder":4,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-04-14 01:43:23","endLine":373,"groupId":"4775","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/21ef73a78723c67114d30bc8937d76ca024be9.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2016-02-11 08:33:08","commitOrder":4,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-04-14 01:43:23","endLine":517,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b6/7fa90391345d2cfb9171ba8bee857ac3fe73f0.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(\"Reindex\").setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":469,"status":"M"}],"commitId":"d381a3a1cc69d129388896907b9cc696811650c7","commitMessage":"@@@Clean up unit tests for task framework.\n","date":"2016-04-14 01:43:23","modifiedFileCount":"9","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-01-20 10:15:07","codes":[{"authorDate":"2016-02-11 08:33:08","commitOrder":5,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-04-14 01:43:23","endLine":373,"groupId":"4775","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/21ef73a78723c67114d30bc8937d76ca024be9.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"N"},{"authorDate":"2016-01-20 10:15:07","commitOrder":5,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n\n    int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(jobName);\n    }\n\n    for (int i = 0; i < JOB_COUNTS -1; i++) {\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-07-06 05:33:42","endLine":507,"groupId":"4775","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/47/1d1301f2b9129d81154543efdcc8afb2b2d7ff.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = buildRecurrentJobQueue(queueName);\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      _driver.enqueueJob(queueName, jobNames.get(i), jobs.get(i));\n    }\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"}],"commitId":"760f8e3caca39aeb53a171303ec24334cd59bf47","commitMessage":"@@@Fix task framework unit tests.\n","date":"2016-07-06 05:33:42","modifiedFileCount":"3","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-02-24 09:32:35","codes":[{"authorDate":"2016-02-24 09:32:35","commitOrder":6,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-07-06 05:44:32","endLine":370,"groupId":"4775","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/3d52dc89eea62e1af27c6cd586136f25e14126.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setJobCommandConfigMap(commandConfig)\n              .setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n              .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2016-02-24 09:32:35","commitOrder":6,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n\n    int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(jobName);\n    }\n\n    for (int i = 0; i < JOB_COUNTS -1; i++) {\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-07-06 05:44:32","endLine":506,"groupId":"4775","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/30/cb46064ce1c4d2d2e67f4de4e0d4a2f82b670c.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n\n    int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(jobName);\n    }\n\n    for (int i = 0; i < JOB_COUNTS -1; i++) {\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_manager, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_manager, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"}],"commitId":"579d82fd2aa8fdce8ec0e0c4d6da73cb8209729d","commitMessage":"@@@Refactor TaskUtil class to move as many as methods out of the class.  and make other methods in it as internal API as possible. Expose necessary APIs in TaskDriver instead.\n","date":"2016-07-06 05:44:32","modifiedFileCount":"16","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-02-24 09:32:35","codes":[{"authorDate":"2016-07-06 06:58:51","commitOrder":7,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-07-06 07:14:30","endLine":254,"groupId":"4775","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/65/ec458561dd37361299b986e3bff6e97ce33200.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2016-02-24 09:32:35","commitOrder":7,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n\n    int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(jobName);\n    }\n\n    for (int i = 0; i < JOB_COUNTS -1; i++) {\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-07-06 05:44:32","endLine":506,"groupId":"4775","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/30/cb46064ce1c4d2d2e67f4de4e0d4a2f82b670c.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n\n    int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(jobName);\n    }\n\n    for (int i = 0; i < JOB_COUNTS -1; i++) {\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"N"}],"commitId":"7f184839aebcb817e3c9b0626bcc2a9b44c6926c","commitMessage":"@@@Add a new task state (TASK_ABORTED) to TaskResult. This allows client to abort a task and let Helix not retry it even Task.RetryCount is bigger than 1.\n","date":"2016-07-06 07:14:30","modifiedFileCount":"10","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-05-11 02:44:25","codes":[{"authorDate":"2016-05-11 02:44:25","commitOrder":8,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    _driver.pollForJobState(scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-07-06 07:21:13","endLine":250,"groupId":"4775","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4d/4d96ab9716f4f6822905e56dc14746d84379f0.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2016-05-11 02:44:25","commitOrder":8,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n\n    int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(jobName);\n    }\n\n    for (int i = 0; i < JOB_COUNTS -1; i++) {\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    _driver.pollForJobState(scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2016-07-06 07:21:13","endLine":403,"groupId":"4775","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8e/1f47d4bf73c329ea125d790ad076a4edf27cd3.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n\n    int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(jobName);\n    }\n\n    for (int i = 0; i < JOB_COUNTS -1; i++) {\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    TaskTestUtil.pollForJobState(_driver, scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"}],"commitId":"183a26ae7857a7c35985b14df9742ba3f4a06566","commitMessage":"@@@Add pollForJobState and pollForWorkflowState function in TaskDriver\n\n1. Add pollForJobState and pollForWorkflowState functions in TaskDriver\n2. Add unit tests for poll completed states for those tasks.\n3. Refactor all tests using new functions.\n","date":"2016-07-06 07:21:13","modifiedFileCount":"20","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-04-21 07:11:27","codes":[{"authorDate":"2018-04-21 07:11:27","commitOrder":9,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.JOB_DELAY, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    _driver.pollForJobState(scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2018-04-25 03:45:43","endLine":218,"groupId":"10529","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/69453e0fe4562f57b549d313388b4ce3d5e4cb.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    \r\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.TIMEOUT_CONFIG, String.valueOf(500));\n\n    final int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(targetPartition.toLowerCase() + \"Job\" + i);\n    }\n\n    \r\n    for (int i = 0; i < JOB_COUNTS - 1; ++i) {\n      LOG.info(\"Enqueuing job: \" + jobNames.get(i));\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    _driver.pollForJobState(scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n    _driver.stop(queueName);\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName,\n        String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2018-04-21 07:11:27","commitOrder":9,"curCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(MockTask.JOB_DELAY, String.valueOf(200));\n\n\n    int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(jobName);\n    }\n\n    for (int i = 0; i < JOB_COUNTS -1; i++) {\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    _driver.pollForJobState(scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","date":"2018-04-25 03:45:43","endLine":409,"groupId":"10529","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteJobFromRecurrentQueueNotStarted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2f/5445b87e2b1f67d5c7f90f111c18320a95a8c0.src","preCode":"  public void deleteJobFromRecurrentQueueNotStarted() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildRecurrentJobQueue(queueName);\n\n    List<JobConfig.Builder> jobs = new ArrayList<JobConfig.Builder>();\n    List<String> jobNames = new ArrayList<String>();\n    Map<String, String> commandConfig = ImmutableMap.of(TIMEOUT_CONFIG, String.valueOf(500));\n\n\n    int JOB_COUNTS = 3;\n    for (int i = 0; i < JOB_COUNTS; i++) {\n      String targetPartition = (i == 0) ? \"MASTER\" : \"SLAVE\";\n      String jobName = targetPartition.toLowerCase() + \"Job\" + i;\n\n      JobConfig.Builder job = new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND)\n          .setJobCommandConfigMap(commandConfig).setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n          .setTargetPartitionStates(Sets.newHashSet(targetPartition));\n      jobs.add(job);\n      jobNames.add(jobName);\n    }\n\n    for (int i = 0; i < JOB_COUNTS -1; i++) {\n      queueBuilder.enqueueJob(jobNames.get(i), jobs.get(i));\n    }\n\n    _driver.createQueue(queueBuilder.build());\n\n    String currentLastJob = jobNames.get(JOB_COUNTS - 2);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    \r\n    String namedSpaceJob = String.format(\"%s_%s\", scheduledQueue, currentLastJob);\n    _driver.pollForJobState(scheduledQueue, namedSpaceJob, TaskState.COMPLETED);\n\n    \r\n    LOG.info(\"Enqueuing job: \" + jobNames.get(JOB_COUNTS - 1));\n    _driver.enqueueJob(queueName, jobNames.get(JOB_COUNTS - 1), jobs.get(JOB_COUNTS - 1));\n\n    \r\n    _driver.deleteJob(queueName, jobNames.get(JOB_COUNTS - 1));\n\n    \r\n    verifyJobDeleted(queueName, String.format(\"%s_%s\", scheduledQueue, jobNames.get(JOB_COUNTS - 1)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"d2fb22d1f3a3db602b27cba7ed8d814cb931622e","commitMessage":"@@@Fix a few of unstable integration tests.\n","date":"2018-04-25 03:45:43","modifiedFileCount":"18","status":"M","submitter":"Lei Xia"}]
