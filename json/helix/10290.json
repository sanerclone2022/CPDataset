[{"authorTime":"2020-08-26 12:44:14","codes":[{"authorDate":"2020-08-26 12:44:14","commitOrder":2,"curCode":"  public void testLatencyMetricReporting() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterStatusMonitor clusterStatusMonitor = new ClusterStatusMonitor(clusterName);\n    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    cache.setAsyncTasksThreadPool(executor);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), clusterStatusMonitor);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STATE\");\n    customizedState.setStartTime(PARTITION_NAME, 1);\n    accessor.setProperty(\n        keyBuilder.customizedState(INSTANCE_NAME, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n        customizedState);\n\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, new CustomizedViewAggregationStage());\n\n    ObjectName objectName = new ObjectName(String\n        .format(\"%s:%s=%s,%s=%s\", MonitorDomainNames.AggregatedView.name(), \"Type\",\n            \"CustomizedView\", \"Cluster\", clusterName));\n    Field customizedViewMonitor =\n        ClusterStatusMonitor.class.getDeclaredField(\"_customizedViewMonitor\");\n    Assert.assertNotNull(customizedViewMonitor);\n\n    boolean hasLatencyReported = TestHelper.verify(() -> (long) _server.getAttribute(objectName,\n        CustomizedViewMonitor.UPDATE_TO_AGGREGATION_LATENCY_GAUGE + \".Max\") != 0,\n        TestHelper.WAIT_DURATION);\n    Assert.assertTrue(hasLatencyReported);\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    executor.shutdownNow();\n  }\n","date":"2020-08-26 12:44:14","endLine":176,"groupId":"4430","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLatencyMetricReporting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/46a993ee8eee01b4fb4825503a1aebff2f17b8.src","preCode":"  public void testLatencyMetricReporting() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterStatusMonitor clusterStatusMonitor = new ClusterStatusMonitor(clusterName);\n    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    cache.setAsyncTasksThreadPool(executor);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), clusterStatusMonitor);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STATE\");\n    customizedState.setStartTime(PARTITION_NAME, 1);\n    accessor.setProperty(\n        keyBuilder.customizedState(INSTANCE_NAME, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n        customizedState);\n\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, new CustomizedViewAggregationStage());\n\n    ObjectName objectName = new ObjectName(String\n        .format(\"%s:%s=%s,%s=%s\", MonitorDomainNames.AggregatedView.name(), \"Type\",\n            \"CustomizedView\", \"Cluster\", clusterName));\n    Field customizedViewMonitor =\n        ClusterStatusMonitor.class.getDeclaredField(\"_customizedViewMonitor\");\n    Assert.assertNotNull(customizedViewMonitor);\n\n    boolean hasLatencyReported = TestHelper.verify(() -> (long) _server.getAttribute(objectName,\n        CustomizedViewMonitor.UPDATE_TO_AGGREGATION_LATENCY_GAUGE + \".Max\") != 0,\n        TestHelper.WAIT_DURATION);\n    Assert.assertTrue(hasLatencyReported);\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    executor.shutdownNow();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCustomizedViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"MB"},{"authorDate":"2020-08-26 12:44:14","commitOrder":2,"curCode":"  public void testLatencyCalculationWithEmptyTimestamp() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterStatusMonitor clusterStatusMonitor = new ClusterStatusMonitor(clusterName);\n    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    cache.setAsyncTasksThreadPool(executor);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), clusterStatusMonitor);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STATE\");\n    accessor.setProperty(\n        keyBuilder.customizedState(INSTANCE_NAME, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n        customizedState);\n\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, new CustomizedViewAggregationStage());\n\n    ObjectName objectName = new ObjectName(String\n        .format(\"%s:%s=%s,%s=%s\", MonitorDomainNames.AggregatedView.name(), \"Type\",\n            \"CustomizedView\", \"Cluster\", clusterName));\n    Field customizedViewMonitor =\n        ClusterStatusMonitor.class.getDeclaredField(\"_customizedViewMonitor\");\n    Assert.assertNotNull(customizedViewMonitor);\n\n    boolean hasLatencyReported = TestHelper.verify(() -> (long) _server.getAttribute(objectName,\n        CustomizedViewMonitor.UPDATE_TO_AGGREGATION_LATENCY_GAUGE + \".Max\") != 0,\n        TestHelper.WAIT_DURATION);\n    Assert.assertFalse(hasLatencyReported);\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    executor.shutdownNow();\n  }\n","date":"2020-08-26 12:44:14","endLine":235,"groupId":"6970","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLatencyCalculationWithEmptyTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/46a993ee8eee01b4fb4825503a1aebff2f17b8.src","preCode":"  public void testLatencyCalculationWithEmptyTimestamp() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterStatusMonitor clusterStatusMonitor = new ClusterStatusMonitor(clusterName);\n    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    cache.setAsyncTasksThreadPool(executor);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), clusterStatusMonitor);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STATE\");\n    accessor.setProperty(\n        keyBuilder.customizedState(INSTANCE_NAME, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n        customizedState);\n\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, new CustomizedViewAggregationStage());\n\n    ObjectName objectName = new ObjectName(String\n        .format(\"%s:%s=%s,%s=%s\", MonitorDomainNames.AggregatedView.name(), \"Type\",\n            \"CustomizedView\", \"Cluster\", clusterName));\n    Field customizedViewMonitor =\n        ClusterStatusMonitor.class.getDeclaredField(\"_customizedViewMonitor\");\n    Assert.assertNotNull(customizedViewMonitor);\n\n    boolean hasLatencyReported = TestHelper.verify(() -> (long) _server.getAttribute(objectName,\n        CustomizedViewMonitor.UPDATE_TO_AGGREGATION_LATENCY_GAUGE + \".Max\") != 0,\n        TestHelper.WAIT_DURATION);\n    Assert.assertFalse(hasLatencyReported);\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    executor.shutdownNow();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCustomizedViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"767d055d050a6bfc6a467996ef9c6075386582fb","commitMessage":"@@@Fix customized view aggregation latency calculation (#1314)\n\nFix customized view aggregation latency calculation","date":"2020-08-26 12:44:14","modifiedFileCount":"3","status":"M","submitter":"Molly Gao"},{"authorTime":"2020-10-07 10:43:50","codes":[{"authorDate":"2020-10-07 10:43:50","commitOrder":3,"curCode":"  public void testLatencyMetricReporting() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterStatusMonitor clusterStatusMonitor = new ClusterStatusMonitor(clusterName);\n    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    cache.setAsyncTasksThreadPool(executor);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), clusterStatusMonitor);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STATE\");\n    customizedState.setStartTime(PARTITION_NAME, 1);\n    accessor.setProperty(\n        keyBuilder.customizedState(INSTANCE_NAME, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n        customizedState);\n\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh, false);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, new CustomizedViewAggregationStage());\n\n    ObjectName objectName = new ObjectName(String\n        .format(\"%s:%s=%s,%s=%s\", MonitorDomainNames.AggregatedView.name(), \"Type\",\n            \"CustomizedView\", \"Cluster\", clusterName));\n    Field customizedViewMonitor =\n        ClusterStatusMonitor.class.getDeclaredField(\"_customizedViewMonitor\");\n    Assert.assertNotNull(customizedViewMonitor);\n\n    boolean hasLatencyReported = TestHelper.verify(() -> (long) _server.getAttribute(objectName,\n        CustomizedViewMonitor.UPDATE_TO_AGGREGATION_LATENCY_GAUGE + \".Max\") != 0,\n        TestHelper.WAIT_DURATION);\n    Assert.assertTrue(hasLatencyReported);\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    executor.shutdownNow();\n  }\n","date":"2020-10-07 10:43:50","endLine":176,"groupId":"10290","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testLatencyMetricReporting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/44/bd623188490a781aa9487fe97b8367237fe518.src","preCode":"  public void testLatencyMetricReporting() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    \r\n    \r\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterStatusMonitor clusterStatusMonitor = new ClusterStatusMonitor(clusterName);\n    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    cache.setAsyncTasksThreadPool(executor);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), clusterStatusMonitor);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STATE\");\n    customizedState.setStartTime(PARTITION_NAME, 1);\n    accessor.setProperty(\n        keyBuilder.customizedState(INSTANCE_NAME, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n        customizedState);\n\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, new CustomizedViewAggregationStage());\n\n    ObjectName objectName = new ObjectName(String\n        .format(\"%s:%s=%s,%s=%s\", MonitorDomainNames.AggregatedView.name(), \"Type\",\n            \"CustomizedView\", \"Cluster\", clusterName));\n    Field customizedViewMonitor =\n        ClusterStatusMonitor.class.getDeclaredField(\"_customizedViewMonitor\");\n    Assert.assertNotNull(customizedViewMonitor);\n\n    boolean hasLatencyReported = TestHelper.verify(() -> (long) _server.getAttribute(objectName,\n        CustomizedViewMonitor.UPDATE_TO_AGGREGATION_LATENCY_GAUGE + \".Max\") != 0,\n        TestHelper.WAIT_DURATION);\n    Assert.assertTrue(hasLatencyReported);\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    executor.shutdownNow();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCustomizedViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2020-10-07 10:43:50","commitOrder":3,"curCode":"  public void testLatencyCalculationWithEmptyTimestamp() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterStatusMonitor clusterStatusMonitor = new ClusterStatusMonitor(clusterName);\n    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    cache.setAsyncTasksThreadPool(executor);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), clusterStatusMonitor);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STATE\");\n    accessor.setProperty(\n        keyBuilder.customizedState(INSTANCE_NAME, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n        customizedState);\n\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh, false);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, new CustomizedViewAggregationStage());\n\n    ObjectName objectName = new ObjectName(String\n        .format(\"%s:%s=%s,%s=%s\", MonitorDomainNames.AggregatedView.name(), \"Type\",\n            \"CustomizedView\", \"Cluster\", clusterName));\n    Field customizedViewMonitor =\n        ClusterStatusMonitor.class.getDeclaredField(\"_customizedViewMonitor\");\n    Assert.assertNotNull(customizedViewMonitor);\n\n    boolean hasLatencyReported = TestHelper.verify(() -> (long) _server.getAttribute(objectName,\n        CustomizedViewMonitor.UPDATE_TO_AGGREGATION_LATENCY_GAUGE + \".Max\") != 0,\n        TestHelper.WAIT_DURATION);\n    Assert.assertFalse(hasLatencyReported);\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    executor.shutdownNow();\n  }\n","date":"2020-10-07 10:43:50","endLine":235,"groupId":"10290","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testLatencyCalculationWithEmptyTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/44/bd623188490a781aa9487fe97b8367237fe518.src","preCode":"  public void testLatencyCalculationWithEmptyTimestamp() throws Exception {\n    String clusterName = \"CLUSTER_\" + TestHelper.getTestMethodName();\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n\n    setupIdealState(clusterName, new int[]{0, 1}, new String[]{\"TestDB\"}, 1, 2);\n    setupLiveInstances(clusterName, new int[]{0, 1});\n    setupStateModel(clusterName);\n\n    ClusterStatusMonitor clusterStatusMonitor = new ClusterStatusMonitor(clusterName);\n    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider(clusterName);\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    cache.setAsyncTasksThreadPool(executor);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.clusterStatusMonitor.name(), clusterStatusMonitor);\n\n    CustomizedStateConfig config = new CustomizedStateConfig();\n    List<String> aggregationEnabledTypes = new ArrayList<>();\n    aggregationEnabledTypes.add(CUSTOMIZED_STATE_NAME);\n    config.setAggregationEnabledTypes(aggregationEnabledTypes);\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.customizedStateConfig(), config);\n\n    CustomizedState customizedState = new CustomizedState(RESOURCE_NAME);\n    customizedState.setState(PARTITION_NAME, \"STATE\");\n    accessor.setProperty(\n        keyBuilder.customizedState(INSTANCE_NAME, CUSTOMIZED_STATE_NAME, RESOURCE_NAME),\n        customizedState);\n\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n    runPipeline(event, dataRefresh);\n    runStage(event, new ResourceComputationStage());\n    runStage(event, new CustomizedStateComputationStage());\n    runStage(event, new CustomizedViewAggregationStage());\n\n    ObjectName objectName = new ObjectName(String\n        .format(\"%s:%s=%s,%s=%s\", MonitorDomainNames.AggregatedView.name(), \"Type\",\n            \"CustomizedView\", \"Cluster\", clusterName));\n    Field customizedViewMonitor =\n        ClusterStatusMonitor.class.getDeclaredField(\"_customizedViewMonitor\");\n    Assert.assertNotNull(customizedViewMonitor);\n\n    boolean hasLatencyReported = TestHelper.verify(() -> (long) _server.getAttribute(objectName,\n        CustomizedViewMonitor.UPDATE_TO_AGGREGATION_LATENCY_GAUGE + \".Max\") != 0,\n        TestHelper.WAIT_DURATION);\n    Assert.assertFalse(hasLatencyReported);\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    executor.shutdownNow();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCustomizedViewStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"fa8f4b676fc8cd81a80b2f8d8aa97d2cf5c5087f","commitMessage":"@@@Prevent parallel controller pipelines run causing two master replicas (#1066)\n\nThere is a case that after controller leader switches.  pipelines of both old Helix controller leader and new leader are running in parallel.\nDifferent assignment decisions are sent to different participants so there are double masters for a single partition.\n\nThe commit addresses this issue by blocking non-leader controller to send messages to ZK.","date":"2020-10-07 10:43:50","modifiedFileCount":"17","status":"M","submitter":"Huizhi Lu"}]
