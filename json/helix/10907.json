[{"authorTime":"2018-11-29 05:35:02","codes":[{"authorDate":"2018-11-29 05:35:02","commitOrder":1,"curCode":"  private void refreshInstanceConfigs(final HelixDataAccessor accessor) {\n    if (_propertyDataChangedMap.get(HelixConstants.ChangeType.INSTANCE_CONFIG)) {\n      _propertyDataChangedMap.put(HelixConstants.ChangeType.INSTANCE_CONFIG, false);\n      _instanceConfigCache.refresh(accessor);\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"Reloaded InstanceConfig for cluster %s, %s pipeline. Keys: %s\", _clusterName,\n              getPipelineName(), _instanceConfigCache.getPropertyMap().keySet()));\n    } else {\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"No instance config change for %s cluster, %s pipeline\", _clusterName,\n              getPipelineName()));\n    }\n  }\n","date":"2019-02-26 09:37:03","endLine":254,"groupId":"4607","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refreshInstanceConfigs","params":"(finalHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/cf763896d37a3ff60f72abba34940e95f63b33.src","preCode":"  private void refreshInstanceConfigs(final HelixDataAccessor accessor) {\n    if (_propertyDataChangedMap.get(HelixConstants.ChangeType.INSTANCE_CONFIG)) {\n      _propertyDataChangedMap.put(HelixConstants.ChangeType.INSTANCE_CONFIG, false);\n      _instanceConfigCache.refresh(accessor);\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"Reloaded InstanceConfig for cluster %s, %s pipeline. Keys: %s\", _clusterName,\n              getPipelineName(), _instanceConfigCache.getPropertyMap().keySet()));\n    } else {\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"No instance config change for %s cluster, %s pipeline\", _clusterName,\n              getPipelineName()));\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"},{"authorDate":"2018-11-29 05:35:02","commitOrder":1,"curCode":"  private void refreshResourceConfig(final HelixDataAccessor accessor) {\n    if (_propertyDataChangedMap.get(HelixConstants.ChangeType.RESOURCE_CONFIG)) {\n      _propertyDataChangedMap.put(HelixConstants.ChangeType.RESOURCE_CONFIG, false);\n      _resourceConfigCache.refresh(accessor);\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"Reloaded ResourceConfig for cluster %s, %s pipeline. Cnt: %s\", _clusterName,\n              getPipelineName(), _resourceConfigCache.getPropertyMap().keySet().size()));\n    } else {\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"No resource config change for %s cluster, %s pipeline\", _clusterName,\n              getPipelineName()));\n    }\n  }\n","date":"2019-02-26 09:37:03","endLine":268,"groupId":"4607","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshResourceConfig","params":"(finalHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/cf763896d37a3ff60f72abba34940e95f63b33.src","preCode":"  private void refreshResourceConfig(final HelixDataAccessor accessor) {\n    if (_propertyDataChangedMap.get(HelixConstants.ChangeType.RESOURCE_CONFIG)) {\n      _propertyDataChangedMap.put(HelixConstants.ChangeType.RESOURCE_CONFIG, false);\n      _resourceConfigCache.refresh(accessor);\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"Reloaded ResourceConfig for cluster %s, %s pipeline. Cnt: %s\", _clusterName,\n              getPipelineName(), _resourceConfigCache.getPropertyMap().keySet().size()));\n    } else {\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"No resource config change for %s cluster, %s pipeline\", _clusterName,\n              getPipelineName()));\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"B"}],"commitId":"4dedd7e4caf0cda5064ca8649d82246a0fa69a8c","commitMessage":"@@@Create specific package for data providers\n","date":"2019-02-26 09:37:03","modifiedFileCount":"85","status":"B","submitter":"Harry Zhang"},{"authorTime":"2019-07-31 05:41:32","codes":[{"authorDate":"2019-07-31 05:41:32","commitOrder":2,"curCode":"  private void refreshInstanceConfigs(final HelixDataAccessor accessor,\n      Set<HelixConstants.ChangeType> refreshedType) {\n    if (_propertyDataChangedMap.get(HelixConstants.ChangeType.INSTANCE_CONFIG).getAndSet(false)) {\n      _instanceConfigCache.refresh(accessor);\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"Reloaded InstanceConfig for cluster %s, %s pipeline. Keys: %s\", _clusterName,\n              getPipelineName(), _instanceConfigCache.getPropertyMap().keySet()));\n      refreshedType.add(HelixConstants.ChangeType.INSTANCE_CONFIG);\n    } else {\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"No instance config change for %s cluster, %s pipeline\", _clusterName,\n              getPipelineName()));\n    }\n  }\n","date":"2019-07-31 05:41:32","endLine":261,"groupId":"10907","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"refreshInstanceConfigs","params":"(finalHelixDataAccessoraccessor@Set<HelixConstants.ChangeType>refreshedType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/b6077516267ac9a5cff7e89ac8d43a9227db9d.src","preCode":"  private void refreshInstanceConfigs(final HelixDataAccessor accessor) {\n    if (_propertyDataChangedMap.get(HelixConstants.ChangeType.INSTANCE_CONFIG)) {\n      _propertyDataChangedMap.put(HelixConstants.ChangeType.INSTANCE_CONFIG, false);\n      _instanceConfigCache.refresh(accessor);\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"Reloaded InstanceConfig for cluster %s, %s pipeline. Keys: %s\", _clusterName,\n              getPipelineName(), _instanceConfigCache.getPropertyMap().keySet()));\n    } else {\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"No instance config change for %s cluster, %s pipeline\", _clusterName,\n              getPipelineName()));\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2019-07-31 05:41:32","commitOrder":2,"curCode":"  private void refreshResourceConfig(final HelixDataAccessor accessor,\n      Set<HelixConstants.ChangeType> refreshedType) {\n    if (_propertyDataChangedMap.get(HelixConstants.ChangeType.RESOURCE_CONFIG).getAndSet(false)) {\n      _resourceConfigCache.refresh(accessor);\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"Reloaded ResourceConfig for cluster %s, %s pipeline. Cnt: %s\", _clusterName,\n              getPipelineName(), _resourceConfigCache.getPropertyMap().keySet().size()));\n      refreshedType.add(HelixConstants.ChangeType.RESOURCE_CONFIG);\n    } else {\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"No resource config change for %s cluster, %s pipeline\", _clusterName,\n              getPipelineName()));\n    }\n  }\n","date":"2019-07-31 05:41:32","endLine":276,"groupId":"10907","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"refreshResourceConfig","params":"(finalHelixDataAccessoraccessor@Set<HelixConstants.ChangeType>refreshedType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/b6077516267ac9a5cff7e89ac8d43a9227db9d.src","preCode":"  private void refreshResourceConfig(final HelixDataAccessor accessor) {\n    if (_propertyDataChangedMap.get(HelixConstants.ChangeType.RESOURCE_CONFIG)) {\n      _propertyDataChangedMap.put(HelixConstants.ChangeType.RESOURCE_CONFIG, false);\n      _resourceConfigCache.refresh(accessor);\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"Reloaded ResourceConfig for cluster %s, %s pipeline. Cnt: %s\", _clusterName,\n              getPipelineName(), _resourceConfigCache.getPropertyMap().keySet().size()));\n    } else {\n      LogUtil.logInfo(logger, getClusterEventId(), String\n          .format(\"No resource config change for %s cluster, %s pipeline\", _clusterName,\n              getPipelineName()));\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"c188ec7ff2fbac22ac677fdf8c64ab3f6b40f404","commitMessage":"@@@Fix the race condition while Helix refresh cluster status cache. (#363)\n\n* Fix the race condition while Helix refresh cluster status cache.\n\nThis change fix issue #331.\nThe design is ensuring one read only to avoid locking during the change notification. However.  a later update introduced addition read. The result is that two reads may have different results because notification is lock free. This leads the cache to be in an inconsistent state. The impact is that the expected rebalance might not happen.","date":"2019-07-31 05:41:32","modifiedFileCount":"3","status":"M","submitter":"jiajunwang"}]
