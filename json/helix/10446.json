[{"authorTime":"2019-03-29 03:27:52","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2018-07-14 06:55:35","endLine":218,"groupId":"7073","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/874bea55780c4af387100e5733a2bb6d1862d7.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"NB"},{"authorDate":"2019-03-29 03:27:52","commitOrder":4,"curCode":"  private void setThrottleConfigForLoadBalance() {\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 0));\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.INSTANCE, 0));\n\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    _accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2019-03-29 03:27:52","endLine":277,"groupId":"7073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setThrottleConfigForLoadBalance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/bdcf8ae6aceee73d68e970ef3b87760ccf6cef.src","preCode":"  private void setThrottleConfigForLoadBalance() {\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 0));\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.INSTANCE, 0));\n\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    _accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"B"}],"commitId":"de38fa1a4e13939807427694a538ea468f8abb36","commitMessage":"@@@HELIX: Recovery balance partitions with disabled top-state replicas\n\n    Previously.  disabling of partitions or disabled instances did not affect Helix's throttling logic. This was problematic because the ability to disable was designed in in order to move partitons/replicas out of the given instance as a measure to deal with unhealthy partitions/instances. This allows.  for partitions that are disabled.  to go into recovery balance.  and when the user has not set any throttling configs for recovery balance.  these types of state transitions will go through unthrottled.  avoiding downtime.\n    Changelist:\n    1. Add a check for determining rebalance type for a given partition\n    2. Add an integration test\n","date":"2019-03-29 03:27:52","modifiedFileCount":"1","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-03-29 03:27:52","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    String resourceNamePrefix = \"TestDB\";\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2019-05-25 09:19:21","endLine":215,"groupId":"7073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f1/628f602412eb824847ce91fad1f57ca9e354d8.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2019-03-29 03:27:52","commitOrder":5,"curCode":"  private void setThrottleConfigForLoadBalance() {\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 0));\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.INSTANCE, 0));\n\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    _accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2019-03-29 03:27:52","endLine":277,"groupId":"7073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setThrottleConfigForLoadBalance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/bdcf8ae6aceee73d68e970ef3b87760ccf6cef.src","preCode":"  private void setThrottleConfigForLoadBalance() {\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 0));\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.INSTANCE, 0));\n\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    _accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2021-05-26 01:19:08","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    String resourceNamePrefix = \"TestDB\";\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2019-05-25 09:19:21","endLine":215,"groupId":"10446","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f1/628f602412eb824847ce91fad1f57ca9e354d8.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    String resourceNamePrefix = \"TestDB\";\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"},{"authorDate":"2021-05-26 01:19:08","commitOrder":6,"curCode":"  private void setThrottleConfigForLoadBalance(int maxReplicas) {\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, maxReplicas));\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.INSTANCE, maxReplicas));\n\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    _accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2021-06-02 02:44:29","endLine":403,"groupId":"10446","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setThrottleConfigForLoadBalance","params":"(intmaxReplicas)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/98/dd281b5e5dafe774e84e072301c3d956358e19.src","preCode":"  private void setThrottleConfigForLoadBalance() {\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 0));\n\n    \r\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.INSTANCE, 0));\n\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    _accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"f49986e24c27c49d8c877457753e32dcf8b540f4","commitMessage":"@@@[Replica Level Throttle] Make Pipeline in a correct order and fixes tests (#1750)\n\n* Make Pipeline in a correct order and fixes tests\n\n1. Make pipeline running in a correct order to process computation\n2. Add \"DROPPED\" case in the mapping to reflect the real case.\n3. Fixes test cases.","date":"2021-06-02 02:44:29","modifiedFileCount":"15","status":"M","submitter":"Junkai Xue"}]
