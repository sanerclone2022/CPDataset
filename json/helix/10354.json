[{"authorTime":"2017-11-17 05:26:06","codes":[{"authorDate":"2017-11-17 05:26:06","commitOrder":1,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-01-25 10:31:40","endLine":88,"groupId":"504","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/58/036f0087d15b923a35948532ac516d41e9194a.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2017-11-17 05:26:06","commitOrder":1,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","date":"2018-01-25 10:31:40","endLine":113,"groupId":"504","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e0/3ee14e9dd5e8428146512267227ccd3bf1e4ef.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"de2e3e8be366984461c0b43c8dc6a28048c66157","commitMessage":"@@@Fix two tests for maintenance mode\n","date":"2018-01-25 10:31:40","modifiedFileCount":"0","status":"B","submitter":"Junkai Xue"},{"authorTime":"2018-03-09 06:04:42","codes":[{"authorDate":"2018-03-09 06:04:42","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-03-20 07:43:31","endLine":88,"groupId":"504","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/97/69021803572439c7e82008dcb12e77096c68af.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2018-03-09 06:04:42","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","date":"2018-03-20 07:43:31","endLine":113,"groupId":"504","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ea/ac6bca3ba838e664c0900c458e7fbe7ecd3478.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"0e849035379a04b079ac1274bb8aaab473df1572","commitMessage":"@@@[HELIX-679] consolidate semantics of recursively delete path in ZkClient\n","date":"2018-03-20 07:43:31","modifiedFileCount":"57","status":"M","submitter":"hrzhang"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-07-14 02:20:49","endLine":83,"groupId":"504","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/ef8fa7d7e3d986ceefb04594981007830f97f5.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","date":"2018-07-14 02:20:49","endLine":107,"groupId":"504","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f6/3769bfd2531478c3612551028b82cb1697c1c5.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-07-14 02:20:49","endLine":83,"groupId":"504","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/ef8fa7d7e3d986ceefb04594981007830f97f5.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","date":"2018-07-14 06:55:35","endLine":106,"groupId":"504","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/90/2effa994986f2c5d048215f6cc43232b9aa26b.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-07-14 02:20:49","endLine":83,"groupId":"504","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/ef8fa7d7e3d986ceefb04594981007830f97f5.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ZkHelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n  }\n","date":"2019-05-25 09:19:21","endLine":107,"groupId":"1540","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/68aaaa90f59ac3002469ca31e7bf2aaa03e9cf.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-08-06 10:47:55","codes":[{"authorDate":"2020-08-06 10:47:55","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2020-08-06 10:47:55","endLine":83,"groupId":"504","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c8/3752a18ccd4c8cf4c90eef45c933f04ec14644.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2020-08-06 10:47:55","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ZkHelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n  }\n","date":"2020-08-06 10:47:55","endLine":109,"groupId":"504","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/06/d8bcdf285ba095d923ab65c117bb8f2ec02471.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ZkHelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"56cf1259add5d00bb13fefb018a5de9679a1c6a7","commitMessage":"@@@Fix ZkHelixClusterVerifier related resource leakage (#1185)\n\nZkHelixClusterVerifier and its subclass built with ZK addres would\ncreate an internal ZkClient. Without properly closing the ZkClient\nor using global ZkClient in the test base. There would be four\nthreads and one ZooKeeper client object leaked. The leaked threads\nwould be in thousands and thus be one of the main contributor\npreventing the unit test from finishing. This pull request addresses\nthis issue.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-08-06 10:47:55","modifiedFileCount":"30","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2020-10-08 07:58:42","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2020-10-08 07:58:42","endLine":86,"groupId":"10354","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/92/85f38fc446aeec6de4f4a4866580374d52620a.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingMaxPartition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-10-08 07:58:42","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ZkHelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n  }\n","date":"2020-10-08 07:58:42","endLine":111,"groupId":"10354","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/54af0f790085f1320a979fee11eb81efd4b97a.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instanceName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    ZkHelixClusterVerifier clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n    _dataAccessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(_maxOfflineInstancesAllowed);\n    configAccessor.setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    for (int i = 0; i < 3; i++) {\n      String db = \"Test-DB-\" + i++;\n      createResourceWithDelayedRebalance(CLUSTER_NAME, db,\n          BuiltInStateModelDefinitions.MasterSlave.name(), _PARTITIONS, 3, 3, -1);\n    }\n    Thread.sleep(100);\n    Assert.assertTrue(clusterVerifier.verifyByPolling());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/TestClusterInMaintenanceModeWhenReachingOfflineInstancesLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"}]
