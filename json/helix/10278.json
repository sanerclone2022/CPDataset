[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testMultipleResources() throws Exception\n  {\n\r\n    String[] resources = new String[]\n        { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n  }\n","date":"2012-10-25 07:14:36","endLine":113,"groupId":"3148","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/a247257d29b76eea6cf57741a72cafb4b2e1f5.src","preCode":"  public void testMultipleResources() throws Exception\n  {\n\r\n    String[] resources = new String[]\n        { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception\n  {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++)\n    {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[]\n    { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++)\n    {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record = IdealStateCalculatorForStorageNode\n          .calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      \n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName),\n                                            idealState);\n\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n    \n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName),\n                                          liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n                                          currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getStateModelDefRef(), currentState.getStateModelDefRef());\n    AssertJUnit\n        .assertEquals(resourceMap.get(oldResource).getPartitions()\n            .size(), currentState.getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","date":"2012-10-25 07:14:36","endLine":201,"groupId":"41","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleResourcesWithSomeDropped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/a247257d29b76eea6cf57741a72cafb4b2e1f5.src","preCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception\n  {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++)\n    {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[]\n    { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++)\n    {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record = IdealStateCalculatorForStorageNode\n          .calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      \n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName),\n                                            idealState);\n\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n    \n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName),\n                                          liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n                                          currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getStateModelDefRef(), currentState.getStateModelDefRef());\n    AssertJUnit\n        .assertEquals(resourceMap.get(oldResource).getPartitions()\n            .size(), currentState.getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-01-03 14:42:49","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":2,"curCode":"  public void testMultipleResources() throws Exception\n  {\n\r\n    String[] resources = new String[]\n        { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n  }\n","date":"2012-10-25 07:14:36","endLine":113,"groupId":"3148","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/a247257d29b76eea6cf57741a72cafb4b2e1f5.src","preCode":"  public void testMultipleResources() throws Exception\n  {\n\r\n    String[] resources = new String[]\n        { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2013-01-03 14:42:49","commitOrder":2,"curCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception\n  {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++)\n    {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[]\n    { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++)\n    {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record = DefaultIdealStateCalculator\n          .calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      \n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName),\n                                            idealState);\n\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n    \n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName),\n                                          liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n                                          currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getStateModelDefRef(), currentState.getStateModelDefRef());\n    AssertJUnit\n        .assertEquals(resourceMap.get(oldResource).getPartitions()\n            .size(), currentState.getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","date":"2013-01-03 14:42:49","endLine":205,"groupId":"41","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleResourcesWithSomeDropped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c0/b65289317ac9453e5da21121569c0ebafa5431.src","preCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception\n  {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++)\n    {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[]\n    { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++)\n    {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record = IdealStateCalculatorForStorageNode\n          .calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      \n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName),\n                                            idealState);\n\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n    \n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName),\n                                          liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n                                          currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getStateModelDefRef(), currentState.getStateModelDefRef());\n    AssertJUnit\n        .assertEquals(resourceMap.get(oldResource).getPartitions()\n            .size(), currentState.getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"80e9c4a9866d5a72cdbcf8509d74a86b5091253a","commitMessage":"@@@[HELIX-18] Moving some rebalancing methods to HelixAdmin from clustersetup\n","date":"2013-01-03 14:42:49","modifiedFileCount":"14","status":"M","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-01-03 14:42:49","codes":[{"authorDate":"2013-08-16 07:21:52","commitOrder":3,"curCode":"  public void testMultipleResources() throws Exception\n  {\n\r\n    String[] resources = new String[]\n        { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1, RebalanceMode.SEMI_AUTO);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n  }\n","date":"2013-08-16 07:21:52","endLine":118,"groupId":"3148","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/71/013a1659772d8f82c5048b3105b677926ad51c.src","preCode":"  public void testMultipleResources() throws Exception\n  {\n\r\n    String[] resources = new String[]\n        { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2013-01-03 14:42:49","commitOrder":3,"curCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception\n  {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++)\n    {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[]\n    { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++)\n    {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record = DefaultIdealStateCalculator\n          .calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      \n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName),\n                                            idealState);\n\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n    \n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName),\n                                          liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n                                          currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getStateModelDefRef(), currentState.getStateModelDefRef());\n    AssertJUnit\n        .assertEquals(resourceMap.get(oldResource).getPartitions()\n            .size(), currentState.getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","date":"2013-01-03 14:42:49","endLine":205,"groupId":"41","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleResourcesWithSomeDropped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c0/b65289317ac9453e5da21121569c0ebafa5431.src","preCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception\n  {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++)\n    {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[]\n    { \"testResource1\", \"testResource2\" };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++)\n    {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record = DefaultIdealStateCalculator\n          .calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      \n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName),\n                                            idealState);\n\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n    \n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName),\n                                          liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n                                          currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event\n        .getAttribute(AttributeName.RESOURCES.toString());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++)\n    {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getStateModelDefRef(), idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName)\n          .getPartitions().size(), idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource)\n        .getStateModelDefRef(), currentState.getStateModelDefRef());\n    AssertJUnit\n        .assertEquals(resourceMap.get(oldResource).getPartitions()\n            .size(), currentState.getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"N"}],"commitId":"13d19e914e7deec29c5cd665e75df12eafbce1b1","commitMessage":"@@@HELIX-166: Rename modes to auto.  semi-auto.  and custom.  rb=13444\n","date":"2013-08-16 07:21:52","modifiedFileCount":"39","status":"M","submitter":"zzhang"},{"authorTime":"2017-01-07 08:31:38","codes":[{"authorDate":"2017-01-07 08:31:38","commitOrder":4,"curCode":"  public void testMultipleResources() throws Exception {\n    \r\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1, RebalanceMode.SEMI_AUTO);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n  }\n","date":"2017-10-03 10:06:26","endLine":107,"groupId":"3148","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/87/c051607cf78719a967ba07797fc3cb442c7f72.src","preCode":"  public void testMultipleResources() throws Exception {\n    \r\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1, RebalanceMode.SEMI_AUTO);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2017-01-07 08:31:38","commitOrder":4,"curCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++) {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++) {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record =\n          DefaultIdealStateCalculator.calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n\n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName), idealState);\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n        currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getStateModelDefRef(),\n        currentState.getStateModelDefRef());\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getPartitions().size(), currentState\n        .getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","date":"2017-10-03 10:06:26","endLine":185,"groupId":"7249","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleResourcesWithSomeDropped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/87/c051607cf78719a967ba07797fc3cb442c7f72.src","preCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++) {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++) {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record =\n          DefaultIdealStateCalculator.calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n\n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName), idealState);\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n        currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getStateModelDefRef(),\n        currentState.getStateModelDefRef());\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getPartitions().size(), currentState\n        .getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"4e4871967db07cee191debb9d26bfcd53c401945","commitMessage":"@@@Add state transition throttling logic into intermediateStateCalcStage.\n","date":"2017-10-03 10:06:26","modifiedFileCount":"30","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-01-07 08:31:38","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testMultipleResources() throws Exception {\n    \r\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1, RebalanceMode.SEMI_AUTO);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":103,"groupId":"3148","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/7f2f530d943645dab1bfaecf4354359d41cb89.src","preCode":"  public void testMultipleResources() throws Exception {\n    \r\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1, RebalanceMode.SEMI_AUTO);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2017-01-07 08:31:38","commitOrder":5,"curCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++) {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++) {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record =\n          DefaultIdealStateCalculator.calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n\n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName), idealState);\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n        currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getStateModelDefRef(),\n        currentState.getStateModelDefRef());\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getPartitions().size(), currentState\n        .getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","date":"2017-10-03 10:06:26","endLine":185,"groupId":"7249","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleResourcesWithSomeDropped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/87/c051607cf78719a967ba07797fc3cb442c7f72.src","preCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++) {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++) {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record =\n          DefaultIdealStateCalculator.calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n\n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName), idealState);\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n        currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getStateModelDefRef(),\n        currentState.getStateModelDefRef());\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getPartitions().size(), currentState\n        .getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":6,"curCode":"  public void testMultipleResources() throws Exception {\n    \r\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1, RebalanceMode.SEMI_AUTO);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":107,"groupId":"3148","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/e7d0eba3eb59eff2c5f4ce3015704904a6392d.src","preCode":"  public void testMultipleResources() throws Exception {\n    \r\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1, RebalanceMode.SEMI_AUTO);\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":6,"curCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++) {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++) {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record =\n          DefaultIdealStateCalculator.calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n\n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName), idealState);\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n        currentState);\n\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getStateModelDefRef(),\n        currentState.getStateModelDefRef());\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getPartitions().size(), currentState\n        .getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","date":"2019-02-26 09:36:00","endLine":187,"groupId":"3148","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleResourcesWithSomeDropped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/e7d0eba3eb59eff2c5f4ce3015704904a6392d.src","preCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++) {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++) {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record =\n          DefaultIdealStateCalculator.calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n\n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName), idealState);\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n        currentState);\n\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getStateModelDefRef(),\n        currentState.getStateModelDefRef());\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getPartitions().size(), currentState\n        .getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2020-12-09 06:31:12","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":7,"curCode":"  public void testMultipleResources() throws Exception {\n    \r\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1, RebalanceMode.SEMI_AUTO);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":107,"groupId":"10278","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/e7d0eba3eb59eff2c5f4ce3015704904a6392d.src","preCode":"  public void testMultipleResources() throws Exception {\n    \r\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = setupIdealState(5, resources, 10, 1, RebalanceMode.SEMI_AUTO);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    AssertJUnit.assertEquals(resources.length, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"},{"authorDate":"2020-12-09 06:31:12","commitOrder":7,"curCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++) {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++) {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record =\n          DefaultIdealStateCalculator.calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n\n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName), idealState);\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n        currentState);\n\n    String oldTaskResource = \"testTaskResourceOld\";\n    CurrentState taskCurrentState = new CurrentState(oldTaskResource);\n    taskCurrentState.setState(\"testTaskResourceOld_0\", \"RUNNING\");\n    taskCurrentState.setState(\"testTaskResourceOld_1\", \"FINISHED\");\n    taskCurrentState.setStateModelDefRef(\"Task\");\n    accessor.setProperty(keyBuilder.taskCurrentState(instanceName, sessionId, oldTaskResource),\n        taskCurrentState);\n\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getStateModelDefRef(),\n        currentState.getStateModelDefRef());\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getPartitions().size(), currentState\n        .getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new WorkflowControllerDataProvider());\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    \r\n    AssertJUnit.assertEquals(resources.length + 2, resourceMap.size());\n\n    Resource taskResource = resourceMap.get(oldTaskResource);\n    AssertJUnit.assertNotNull(taskResource);\n    AssertJUnit.assertEquals(taskResource.getResourceName(), oldTaskResource);\n    AssertJUnit\n        .assertEquals(taskResource.getStateModelDefRef(), taskCurrentState.getStateModelDefRef());\n    AssertJUnit.assertEquals(taskResource.getPartitions().size(),\n        taskCurrentState.getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(taskResource.getPartition(\"testTaskResourceOld_0\"));\n    AssertJUnit.assertNotNull(taskResource.getPartition(\"testTaskResourceOld_1\"));\n  }\n","date":"2020-12-22 07:00:24","endLine":216,"groupId":"10278","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testMultipleResourcesWithSomeDropped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6b/6f28e5ed56dbe44e845ed741f1a1eb03b45e1c.src","preCode":"  public void testMultipleResourcesWithSomeDropped() throws Exception {\n    int nodes = 5;\n    List<String> instances = new ArrayList<String>();\n    for (int i = 0; i < nodes; i++) {\n      instances.add(\"localhost_\" + i);\n    }\n    String[] resources = new String[] {\n        \"testResource1\", \"testResource2\"\n    };\n    List<IdealState> idealStates = new ArrayList<IdealState>();\n    for (int i = 0; i < resources.length; i++) {\n      int partitions = 10;\n      int replicas = 1;\n      String resourceName = resources[i];\n      ZNRecord record =\n          DefaultIdealStateCalculator.calculateIdealState(instances, partitions, replicas,\n              resourceName, \"MASTER\", \"SLAVE\");\n      IdealState idealState = new IdealState(record);\n      idealState.setStateModelDefRef(\"MasterSlave\");\n\n      HelixDataAccessor accessor = manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n      accessor.setProperty(keyBuilder.idealStates(resourceName), idealState);\n\n      idealStates.add(idealState);\n    }\n    \r\n    \r\n    String instanceName = \"localhost_\" + 3;\n    LiveInstance liveInstance = new LiveInstance(instanceName);\n    String sessionId = UUID.randomUUID().toString();\n    liveInstance.setSessionId(sessionId);\n\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n\n    String oldResource = \"testResourceOld\";\n    CurrentState currentState = new CurrentState(oldResource);\n    currentState.setState(\"testResourceOld_0\", \"OFFLINE\");\n    currentState.setState(\"testResourceOld_1\", \"SLAVE\");\n    currentState.setState(\"testResourceOld_2\", \"MASTER\");\n    currentState.setStateModelDefRef(\"MasterSlave\");\n    accessor.setProperty(keyBuilder.currentState(instanceName, sessionId, oldResource),\n        currentState);\n\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    ResourceComputationStage stage = new ResourceComputationStage();\n    runStage(event, new ReadClusterDataStage());\n    runStage(event, stage);\n\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    \r\n    AssertJUnit.assertEquals(resources.length + 1, resourceMap.size());\n\n    for (int i = 0; i < resources.length; i++) {\n      String resourceName = resources[i];\n      IdealState idealState = idealStates.get(i);\n      AssertJUnit.assertTrue(resourceMap.containsKey(resourceName));\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getResourceName(), resourceName);\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getStateModelDefRef(),\n          idealState.getStateModelDefRef());\n      AssertJUnit.assertEquals(resourceMap.get(resourceName).getPartitions().size(),\n          idealState.getNumPartitions());\n    }\n    \r\n    AssertJUnit.assertTrue(resourceMap.containsKey(oldResource));\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getResourceName(), oldResource);\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getStateModelDefRef(),\n        currentState.getStateModelDefRef());\n    AssertJUnit.assertEquals(resourceMap.get(oldResource).getPartitions().size(), currentState\n        .getPartitionStateMap().size());\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_0\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_1\"));\n    AssertJUnit.assertNotNull(resourceMap.get(oldResource).getPartition(\"testResourceOld_2\"));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"a18deb06c28e25e79a9a773069a79ce21a2399b3","commitMessage":"@@@Controller-side Task Current State Migration (#1550)\n\nFirst part of task current state migration. \nAll changes made in this PR are on the controller side \nand are directly pipeline-impacting.","date":"2020-12-22 07:00:24","modifiedFileCount":"25","status":"M","submitter":"Neal Sun"}]
