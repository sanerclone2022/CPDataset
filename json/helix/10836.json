[{"authorTime":"2016-06-17 03:06:34","codes":[{"authorDate":"2014-05-23 02:08:01","commitOrder":3,"curCode":"  public void addInstanceTag(String clusterName, String instanceName, String tag) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\"cluster \" + clusterName + \" instance \" + instanceName\n          + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.addTag(tag);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","date":"2014-05-23 02:08:01","endLine":1096,"groupId":"3820","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addInstanceTag","params":"(StringclusterName@StringinstanceName@Stringtag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/2d61749a74281f739788469f46ad2621c0c845.src","preCode":"  public void addInstanceTag(String clusterName, String instanceName, String tag) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\"cluster \" + clusterName + \" instance \" + instanceName\n          + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.addTag(tag);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1080,"status":"NB"},{"authorDate":"2016-06-17 03:06:34","commitOrder":3,"curCode":"  public void setInstanceZoneId(String clusterName, String instanceName, String zoneId) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\"cluster \" + clusterName + \" instance \" + instanceName\n          + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    PropertyKey configKey = keyBuilder.instanceConfig(instanceName);\n    InstanceConfig config = accessor.getProperty(configKey);\n    config.setZoneId(zoneId);\n    accessor.setProperty(configKey, config);\n  }\n","date":"2016-09-13 01:06:33","endLine":1188,"groupId":"2055","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setInstanceZoneId","params":"(StringclusterName@StringinstanceName@StringzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/f2cbbc741bb27190575db29c6e374495a30c1a.src","preCode":"  public void setInstanceZoneId(String clusterName, String instanceName, String zoneId) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\"cluster \" + clusterName + \" instance \" + instanceName\n          + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    PropertyKey configKey = keyBuilder.instanceConfig(instanceName);\n    InstanceConfig config = accessor.getProperty(configKey);\n    config.setZoneId(zoneId);\n    accessor.setProperty(configKey, config);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1171,"status":"B"}],"commitId":"7147ec874e912f27905c299fefe0d09ca31ebd42","commitMessage":"@@@[HELIX-568] Add new topology aware (rack-aware) rebalance strategy based on CRUSH algorithm.\nDesign doc is available at: https://cwiki.apache.org/confluence/display/HELIX/Helix+Topology-aware+Rebalance+Strategy\n","date":"2016-09-13 01:06:33","modifiedFileCount":"12","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2014-05-23 02:08:01","commitOrder":4,"curCode":"  public void addInstanceTag(String clusterName, String instanceName, String tag) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\"cluster \" + clusterName + \" instance \" + instanceName\n          + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.addTag(tag);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","date":"2014-05-23 02:08:01","endLine":1096,"groupId":"3820","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addInstanceTag","params":"(StringclusterName@StringinstanceName@Stringtag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/2d61749a74281f739788469f46ad2621c0c845.src","preCode":"  public void addInstanceTag(String clusterName, String instanceName, String tag) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\"cluster \" + clusterName + \" instance \" + instanceName\n          + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.addTag(tag);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1080,"status":"N"},{"authorDate":"2017-11-08 08:48:26","commitOrder":4,"curCode":"  public void setInstanceZoneId(String clusterName, String instanceName, String zoneId) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\"cluster \" + clusterName + \" instance \" + instanceName\n          + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.setZoneId(zoneId);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","date":"2017-11-08 08:48:26","endLine":1201,"groupId":"3820","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setInstanceZoneId","params":"(StringclusterName@StringinstanceName@StringzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/de59a5ead36321001d9584b6a382df5fd98e1c.src","preCode":"  public void setInstanceZoneId(String clusterName, String instanceName, String zoneId) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\"cluster \" + clusterName + \" instance \" + instanceName\n          + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    PropertyKey configKey = keyBuilder.instanceConfig(instanceName);\n    InstanceConfig config = accessor.getProperty(configKey);\n    config.setZoneId(zoneId);\n    accessor.setProperty(configKey, config);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1185,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-04-20 09:19:51","codes":[{"authorDate":"2018-04-20 09:19:51","commitOrder":5,"curCode":"  public void addInstanceTag(String clusterName, String instanceName, String tag) {\n    logger\n        .info(\"Add instance tag {} for instance {} in cluster {}.\", tag, instanceName, clusterName);\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\"cluster \" + clusterName + \" instance \" + instanceName + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.addTag(tag);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","date":"2018-04-20 09:19:51","endLine":1258,"groupId":"3820","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addInstanceTag","params":"(StringclusterName@StringinstanceName@Stringtag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/708e567f1eb033b6d41cf6dc98340befa6b83c.src","preCode":"  public void addInstanceTag(String clusterName, String instanceName, String tag) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"cluster \" + clusterName + \" instance \" + instanceName + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.addTag(tag);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1241,"status":"M"},{"authorDate":"2018-04-20 09:19:51","commitOrder":5,"curCode":"  public void setInstanceZoneId(String clusterName, String instanceName, String zoneId) {\n    logger.info(\"Set instance zoneId {} for instance {} in cluster {}.\", zoneId, instanceName,\n        clusterName);\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"cluster \" + clusterName + \" instance \" + instanceName + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.setZoneId(zoneId);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","date":"2018-04-20 09:19:51","endLine":1300,"groupId":"3820","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setInstanceZoneId","params":"(StringclusterName@StringinstanceName@StringzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/708e567f1eb033b6d41cf6dc98340befa6b83c.src","preCode":"  public void setInstanceZoneId(String clusterName, String instanceName, String zoneId) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"cluster \" + clusterName + \" instance \" + instanceName + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.setZoneId(zoneId);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1282,"status":"M"}],"commitId":"a6bdb3c2252a11a51939e1e06083a24ccf5a2ac2","commitMessage":"@@@Add logs for RoutingTableProvider and HelixAdmin\n","date":"2018-04-20 09:19:51","modifiedFileCount":"1","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-03-13 00:44:38","codes":[{"authorDate":"2020-03-13 00:44:38","commitOrder":6,"curCode":"  public void addInstanceTag(String clusterName, String instanceName, String tag) {\n    logger\n        .info(\"Add instance tag {} for instance {} in cluster {}.\", tag, instanceName, clusterName);\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"cluster \" + clusterName + \" instance \" + instanceName + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.addTag(tag);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","date":"2020-04-09 08:23:30","endLine":1517,"groupId":"10836","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addInstanceTag","params":"(StringclusterName@StringinstanceName@Stringtag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/eaed8be08f73a58f86cc95cf521969f43a962f.src","preCode":"  public void addInstanceTag(String clusterName, String instanceName, String tag) {\n    logger\n        .info(\"Add instance tag {} for instance {} in cluster {}.\", tag, instanceName, clusterName);\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"cluster \" + clusterName + \" instance \" + instanceName + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.addTag(tag);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1499,"status":"M"},{"authorDate":"2020-03-13 00:44:38","commitOrder":6,"curCode":"  public void setInstanceZoneId(String clusterName, String instanceName, String zoneId) {\n    logger.info(\"Set instance zoneId {} for instance {} in cluster {}.\", zoneId, instanceName,\n        clusterName);\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"cluster \" + clusterName + \" instance \" + instanceName + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.setZoneId(zoneId);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","date":"2020-04-09 08:23:30","endLine":1559,"groupId":"10836","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setInstanceZoneId","params":"(StringclusterName@StringinstanceName@StringzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/eaed8be08f73a58f86cc95cf521969f43a962f.src","preCode":"  public void setInstanceZoneId(String clusterName, String instanceName, String zoneId) {\n    logger.info(\"Set instance zoneId {} for instance {} in cluster {}.\", zoneId, instanceName,\n        clusterName);\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n\n    if (!ZKUtil.isInstanceSetup(_zkClient, clusterName, instanceName, InstanceType.PARTICIPANT)) {\n      throw new HelixException(\n          \"cluster \" + clusterName + \" instance \" + instanceName + \" is not setup yet\");\n    }\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    config.setZoneId(zoneId);\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), config);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1541,"status":"M"}],"commitId":"289085f1ce7d2d9665447e9b114c15645f618937","commitMessage":"@@@Make ZKHelixAdmin and ZKHelixManager Realm-aware (#846)\n\nTo make Helix Java APIs realm-aware.  we need to make both ZKHelixAdmin and ZKHelixManager realm-aware. This commit adds a Builder to set client config and connection config for building realm-aware ZkClients underneath.","date":"2020-04-09 08:23:30","modifiedFileCount":"14","status":"M","submitter":"Huizhi Lu"}]
