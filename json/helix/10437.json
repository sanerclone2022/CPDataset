[{"authorTime":"2019-03-29 03:27:52","codes":[{"authorDate":"2019-03-29 03:27:52","commitOrder":1,"curCode":"  public void testDisablingPartitionOnInstance() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","date":"2019-03-29 03:27:52","endLine":162,"groupId":"1600","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablingPartitionOnInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/bdcf8ae6aceee73d68e970ef3b87760ccf6cef.src","preCode":"  public void testDisablingPartitionOnInstance() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2019-03-29 03:27:52","commitOrder":1,"curCode":"  public void testDisablingPartitionOnInstanceWithRecoveryThrottle() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n    setThrottleConfigForRecoveryBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertTrue(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","date":"2019-03-29 03:27:52","endLine":220,"groupId":"1600","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablingPartitionOnInstanceWithRecoveryThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/bdcf8ae6aceee73d68e970ef3b87760ccf6cef.src","preCode":"  public void testDisablingPartitionOnInstanceWithRecoveryThrottle() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n    setThrottleConfigForRecoveryBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertTrue(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"de38fa1a4e13939807427694a538ea468f8abb36","commitMessage":"@@@HELIX: Recovery balance partitions with disabled top-state replicas\n\n    Previously.  disabling of partitions or disabled instances did not affect Helix's throttling logic. This was problematic because the ability to disable was designed in in order to move partitons/replicas out of the given instance as a measure to deal with unhealthy partitions/instances. This allows.  for partitions that are disabled.  to go into recovery balance.  and when the user has not set any throttling configs for recovery balance.  these types of state transitions will go through unthrottled.  avoiding downtime.\n    Changelist:\n    1. Add a check for determining rebalance type for a given partition\n    2. Add an integration test\n","date":"2019-03-29 03:27:52","modifiedFileCount":"1","status":"B","submitter":"Hunter Lee"},{"authorTime":"2019-03-29 03:29:16","codes":[{"authorDate":"2019-03-29 03:27:52","commitOrder":2,"curCode":"  public void testDisablingPartitionOnInstance() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","date":"2019-03-29 03:27:52","endLine":162,"groupId":"1600","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablingPartitionOnInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/bdcf8ae6aceee73d68e970ef3b87760ccf6cef.src","preCode":"  public void testDisablingPartitionOnInstance() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"},{"authorDate":"2019-03-29 03:29:16","commitOrder":2,"curCode":"  public void testDisablingPartitionOnInstanceWithRecoveryThrottle() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n    setThrottleConfigForRecoveryBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","date":"2019-03-29 03:29:16","endLine":222,"groupId":"1600","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablingPartitionOnInstanceWithRecoveryThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fa/0fe6ea7cbaeb975e02b9a5d56423b68b323cf4.src","preCode":"  public void testDisablingPartitionOnInstanceWithRecoveryThrottle() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n    setThrottleConfigForRecoveryBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertTrue(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"ddfc933e1469906d49fcccb08a66352d4b77ccd0","commitMessage":"@@@HELIX: Bypass throttling for disabled partitions\n\n    This diff allows all state transitions linked to disabled instances/partitions to bypass throttling constraints.\n    Changelist:\n    1. Modify logic in IntermediateStateCalcStage\n    2. Add more integration tests\n","date":"2019-03-29 03:29:16","modifiedFileCount":"2","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-06-18 05:37:02","codes":[{"authorDate":"2019-06-18 05:37:02","commitOrder":3,"curCode":"  public void testDisablingPartitionOnInstance() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getEphemeralOwner();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","date":"2019-06-25 07:46:15","endLine":163,"groupId":"1600","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablingPartitionOnInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/50/d789e23356fc7b72ea586fc3b3d22d11cd68a4.src","preCode":"  public void testDisablingPartitionOnInstance() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2019-06-18 05:37:02","commitOrder":3,"curCode":"  public void testDisablingPartitionOnInstanceWithRecoveryThrottle() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n    setThrottleConfigForRecoveryBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getEphemeralOwner();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","date":"2019-06-25 07:46:15","endLine":222,"groupId":"1600","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablingPartitionOnInstanceWithRecoveryThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/50/d789e23356fc7b72ea586fc3b3d22d11cd68a4.src","preCode":"  public void testDisablingPartitionOnInstanceWithRecoveryThrottle() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n    setThrottleConfigForRecoveryBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getSessionId();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"ad0c2edb31a4d0e5c455d1fa0f96658bac1382d5","commitMessage":"@@@Always try reading from EphemeralOwner state first while reading the session ID from a live instance node.\n\nThis is to avoid inconsistent session ID in the node content and the emphemeral owner state.\nNote that in order to ensure backward compatiblity and some test cases.  the newly introduced method will still read from the node content if the ephemeral owner state is empty (-1 or 0).\n\nRB=1704942\nBUG=HELIX-1969\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-06-25 07:46:15","modifiedFileCount":"33","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-05-15 08:34:22","codes":[{"authorDate":"2020-05-15 08:34:22","commitOrder":4,"curCode":"  public void testDisablingPartitionOnInstance() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getEphemeralOwner();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId),\n          true);\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","date":"2020-05-15 08:34:22","endLine":166,"groupId":"10437","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablingPartitionOnInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/24/9a458b31f7582538556980142980b83fb4cabb.src","preCode":"  public void testDisablingPartitionOnInstance() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getEphemeralOwner();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2020-05-15 08:34:22","commitOrder":4,"curCode":"  public void testDisablingPartitionOnInstanceWithRecoveryThrottle() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n    setThrottleConfigForRecoveryBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getEphemeralOwner();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId),\n          true);\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","date":"2020-05-15 08:34:22","endLine":226,"groupId":"10437","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablingPartitionOnInstanceWithRecoveryThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/24/9a458b31f7582538556980142980b83fb4cabb.src","preCode":"  public void testDisablingPartitionOnInstanceWithRecoveryThrottle() throws Exception {\n    int participantCount = 5;\n    setupEnvironment(participantCount);\n\n    \r\n    setThrottleConfigForLoadBalance();\n    setThrottleConfigForRecoveryBalance();\n\n    \r\n    disablePartitionOnInstance(_participants[0], _resourceName + \"0\", \"TestDB0_2\");\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    controller.syncStart();\n    Thread.sleep(500L);\n\n    \r\n    PropertyKey liveInstanceKey =\n        _accessor.keyBuilder().liveInstance(_participants[0].getInstanceName());\n    LiveInstance liveInstance = _accessor.getProperty(liveInstanceKey);\n    if (liveInstance != null) {\n      String sessionId = liveInstance.getEphemeralOwner();\n      List<CurrentState> currentStates = _accessor.getChildValues(\n          _accessor.keyBuilder().currentStates(_participants[0].getInstanceName(), sessionId));\n      for (CurrentState currentState : currentStates) {\n        for (Map.Entry<String, String> partitionState : currentState.getPartitionStateMap()\n            .entrySet()) {\n          if (partitionState.getKey().equals(\"TestDB0_2\")) {\n            Assert.assertFalse(partitionState.getValue().equals(\"MASTER\"));\n          }\n        }\n      }\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      _participants[i].syncStop();\n    }\n    deleteCluster(_clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNoThrottleDisabledPartitions.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"6ff99f5a181fb5fe91340968f93ca2cd5329a90a","commitMessage":"@@@Enforce result check for data accessors batch get calls to prevent partial batch read. (#974)\n\nThis will help to ensure the main Helix logic does not calculate based on incomplete input.","date":"2020-05-15 08:34:22","modifiedFileCount":"49","status":"M","submitter":"Jiajun Wang"}]
