[{"authorTime":"2018-08-04 02:18:59","codes":[{"authorDate":"2018-07-25 05:06:20","commitOrder":2,"curCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<String, String>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","date":"2018-07-25 08:45:50","endLine":209,"groupId":"6022","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchedulingUndefinedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/db/471ffaf5a2ce34b67afa61a688b43fb0600900.src","preCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<String, String>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestQuotaBasedScheduling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"NB"},{"authorDate":"2018-08-04 02:18:59","commitOrder":2,"curCode":"  public void testStopTask() throws InterruptedException {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<String, String>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<String, String>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(_driver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n  }\n","date":"2018-09-22 06:41:56","endLine":95,"groupId":"6022","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStopTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4a/25a5794cf3f414d428ded2308d65339e0e4fff.src","preCode":"  public void testStopTask() throws InterruptedException {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<String, String>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<String, String>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(_driver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestStopWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"41ff38670345e03c3274cb5f56468513026eacb8","commitMessage":"@@@Fix a bug in stopping workflows\n\nThere was an edge case that came to our attention lately in the stop-workflow logic. The symptom we observed was that when a workflow is cancelled via TaskDriver.  its tasks would flip-flop between STOPPED and RUNNING states. This was reproducible. Upon analysis.  what was happening was that in AbstractTaskDispatcher.  when the current Task's state is STOPPED.  sometimes the Participant would try to process a message going to COMPLETE/ERROR state.  and since there is no direct transition in the Task state model going from STOPPED to COMPLETE/ERROR.  it was first going to the intermediate state of RUNNING. In short.  STOPPED->RUNNING was taking place.  and when it hits the RUNNING state.  the Controller would send it back to STOPPED since the target state for the workflow is STOP.\n\nThe fix for it was to simply add a check on the current Task state and the target state of the parent workflow before we pass the requested state assignment in AbstractTaskDispatcher. A test was added to ensure that workflows' tasks are stopped properly when stopped via TaskDriver.\n\nChangelist:\n    1. Add a check in AbstractTaskDispatcher before passing the requested state transition assignment that if the current Task state is STOPPED and the target state for the workflow is STOP.  do not make the assignment and just continue (NOP)\n    2. Add tests in TestStopWorkflow\n    3. Ensure that quota resource is released at stop time for tasks\n    4. Identify a unreachable code snippet\n","date":"2018-09-22 06:41:56","modifiedFileCount":"2","status":"M","submitter":"Hunter Lee"},{"authorTime":"2018-08-04 02:18:59","codes":[{"authorDate":"2019-03-30 03:08:07","commitOrder":3,"curCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","date":"2019-05-25 09:19:21","endLine":193,"groupId":"2769","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchedulingUndefinedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/06269bd95b7d7523634c6b67b1554ed96138bb.src","preCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<String, String>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestQuotaBasedScheduling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2018-08-04 02:18:59","commitOrder":3,"curCode":"  public void testStopTask() throws InterruptedException {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<String, String>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<String, String>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(_driver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n  }\n","date":"2018-09-22 06:41:56","endLine":95,"groupId":"6022","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStopTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4a/25a5794cf3f414d428ded2308d65339e0e4fff.src","preCode":"  public void testStopTask() throws InterruptedException {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<String, String>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<String, String>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(_driver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestStopWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"a8e2cf7b76a802a5b005d32082699d4c9e39875a","commitMessage":"@@@Task Framework code style change\n\nThis diff includes style changes using Java 8 features.\n\nRB=1613441\nBUG=HELIX-1742\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"6","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-03-30 03:08:07","commitOrder":4,"curCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","date":"2019-05-25 09:19:21","endLine":193,"groupId":"2769","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchedulingUndefinedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/06269bd95b7d7523634c6b67b1554ed96138bb.src","preCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestQuotaBasedScheduling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2019-05-04 08:52:17","commitOrder":4,"curCode":"  public void testStopTask() throws InterruptedException {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(TaskDriver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n  }\n","date":"2019-05-25 09:19:21","endLine":113,"groupId":"2769","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStopTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/8a08d5a87dc5f176821f43dcd4b8033db6cd40.src","preCode":"  public void testStopTask() throws InterruptedException {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<String, String>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<String, String>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(_driver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestStopWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-17 08:40:34","codes":[{"authorDate":"2019-03-30 03:08:07","commitOrder":5,"curCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","date":"2019-05-25 09:19:21","endLine":193,"groupId":"2769","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchedulingUndefinedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/06269bd95b7d7523634c6b67b1554ed96138bb.src","preCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestQuotaBasedScheduling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2019-05-17 08:40:34","commitOrder":5,"curCode":"  public void testStopTask() throws InterruptedException {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(TaskDriver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n\n    cleanupParticipants(1);\n  }\n","date":"2019-05-25 09:19:21","endLine":119,"groupId":"2769","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStopTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/33/788df1f39ea30f52d13bce72234056c87f69f7.src","preCode":"  public void testStopTask() throws InterruptedException {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(TaskDriver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestStopWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"f7b1cf0434c685b71052ec7c09864e9e8120eeb7","commitMessage":"@@@TEST: Further fix Helix test suite\n\nThis diff does the following:\n1. Replace Thread.sleep statements with TestHelper.verify (polling with conditions)\n2. Increases GC pause between tests to 4 seconds\n3. Improve ZKHelixClusterVerifier's verifyByPolling method by adding invokeRebalance() method\n\nRB=1669831\n\nRB=1669831\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"19","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-11-27 01:59:09","codes":[{"authorDate":"2019-03-30 03:08:07","commitOrder":6,"curCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","date":"2019-05-25 09:19:21","endLine":193,"groupId":"10502","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchedulingUndefinedTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/06269bd95b7d7523634c6b67b1554ed96138bb.src","preCode":"  public void testSchedulingUndefinedTypes() throws InterruptedException {\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.resetTaskQuotaRatioMap();\n    clusterConfig.setTaskQuotaRatio(DEFAULT_QUOTA_TYPE, 1);\n    clusterConfig.setTaskQuotaRatio(\"A\", 1);\n    clusterConfig.setTaskQuotaRatio(\"B\", 1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    _availableQuotaTypes = clusterConfig.getTaskQuotaRatioMap().keySet();\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 10; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"ShortTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider =\n          new JobConfig.Builder().setCommand(JOB_COMMAND).addTaskConfigs(taskConfigs)\n              .setJobCommandConfigMap(_jobCommandMap).setJobType(\"UNDEFINED\");\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    \r\n    Assert.assertEquals((int) _quotaTypeExecutionCount.get(\"DEFAULT\"), 10);\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"A\"));\n    Assert.assertFalse(_quotaTypeExecutionCount.containsKey(\"B\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestQuotaBasedScheduling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2019-11-27 01:59:09","commitOrder":6,"curCode":"  public void testStopTask() throws Exception {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(TaskDriver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n\n    cleanupParticipants(1);\n  }\n","date":"2019-11-27 01:59:09","endLine":120,"groupId":"10502","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStopTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/84/ce042fb0828e70acff1ea4f2f92638ed201842.src","preCode":"  public void testStopTask() throws InterruptedException {\n    stopTestSetup(1);\n\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 1; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<>();\n      taskConfigs.add(new TaskConfig(\"StopTask\", new HashMap<>()));\n      JobConfig.Builder jobConfigBulider = new JobConfig.Builder().setCommand(\"Dummy\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(new HashMap<>());\n      workflowBuilder.addJob(\"JOB\" + i, jobConfigBulider);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.IN_PROGRESS);\n\n    \r\n    _driver.stop(workflowName);\n    _driver.pollForWorkflowState(workflowName, TaskState.STOPPED);\n\n    Assert.assertEquals(TaskDriver.getWorkflowContext(_manager, workflowName).getWorkflowState(),\n        TaskState.STOPPED);\n\n    cleanupParticipants(1);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestStopWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"9280f2201db9572b2582270e8e5663c2520b15c1","commitMessage":"@@@Stabilize 5 unstable tests (#624)\n\nIn this commit three test that were unstable for some time has been stabilized.\n1- TestWorkflowControllerDataProvider:\nThis test were rely on thread sleep. This has been changed to TestHelper.verify.\n2-TestDrop:\nThis test were rely on thread sleep. This has been changed to TestHelper.verify.\n3-TestGetLastScheduledTaskExecInfo:\nThis test were rely on thread sleep. This has been changed to TestHelper.verify.\nAlso a check has been added to measure the scheduled tasks and compared the\nresult with the expected number of tasks that should be scheduled.\nAlso in this test some of the hard coded strings for queue namning\nhas been removed and replaced with TestHelper.getTestMethodName().\n4- TestStopWorkflow:\nAt the beggining of each test.  participant have started and at the end of the\ntest.  participants have stopped. Hence dependency between the tests added to\navoid potential conflicts between individual tests. Also one global varible\nhas been use among the task to stop which has been changed to local variable.\nAlso Thread.sleep has been eliminated.\n5- TestClusterVerifier:\nIn this test.  Thread.sleep has been removed.","date":"2019-11-27 01:59:09","modifiedFileCount":"5","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"}]
