[{"authorTime":"2014-02-22 06:13:21","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":2,"curCode":"  private void sendNopMessage()\n  {\n    if (_manager.isConnected())\n    {\n      try\n      {\n        Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n        nopMsg.setSrcName(_manager.getInstanceName());\n\n        HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n        Builder keyBuilder = accessor.keyBuilder();\n\n        if (_manager.getInstanceType() == InstanceType.CONTROLLER\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT)\n        {\n          nopMsg.setTgtName(\"Controller\");\n          accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n        }\n\n        if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT)\n        {\n          nopMsg.setTgtName(_manager.getInstanceName());\n          accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()),\n                               nopMsg);\n        }\n        logger.info(\"Send NO_OP message to \" + nopMsg.getTgtName() + \", msgId: \"\n            + nopMsg.getId());\n      }\n      catch (Exception e)\n      {\n        logger.error(e);\n      }\n    }\n  }\n","date":"2012-10-25 07:14:36","endLine":155,"groupId":"2162","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sendNopMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/64/d278e640ea5d86100da41c33ab1bd03d42c352.src","preCode":"  private void sendNopMessage()\n  {\n    if (_manager.isConnected())\n    {\n      try\n      {\n        Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n        nopMsg.setSrcName(_manager.getInstanceName());\n\n        HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n        Builder keyBuilder = accessor.keyBuilder();\n\n        if (_manager.getInstanceType() == InstanceType.CONTROLLER\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT)\n        {\n          nopMsg.setTgtName(\"Controller\");\n          accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n        }\n\n        if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT)\n        {\n          nopMsg.setTgtName(_manager.getInstanceName());\n          accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()),\n                               nopMsg);\n        }\n        logger.info(\"Send NO_OP message to \" + nopMsg.getTgtName() + \", msgId: \"\n            + nopMsg.getId());\n      }\n      catch (Exception e)\n      {\n        logger.error(e);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/participant/HelixStateMachineEngine.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"NB"},{"authorDate":"2014-02-22 06:13:21","commitOrder":2,"curCode":"  private void sendNopMessageInternal() {\n    try {\n      Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n      nopMsg.setSrcName(_manager.getInstanceName());\n\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      if (_manager.getInstanceType() == InstanceType.CONTROLLER\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(\"Controller\");\n        accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n      }\n\n      if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(_manager.getInstanceName());\n        accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n      }\n    } catch (Exception e) {\n      _logger.error(e);\n    }\n  }\n","date":"2014-03-12 04:22:01","endLine":289,"groupId":"2162","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sendNopMessageInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/11/21689e17ddbbd9676f7e04646af7d11b6b32f2.src","preCode":"  private void sendNopMessageInternal() {\n    try {\n      Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n      nopMsg.setSrcName(_manager.getInstanceName());\n\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      if (_manager.getInstanceType() == InstanceType.CONTROLLER\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(\"Controller\");\n        accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n      }\n\n      if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(_manager.getInstanceName());\n        accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n      }\n    } catch (Exception e) {\n      _logger.error(e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"B"}],"commitId":"b6b7807dd1f5b14727feeab1e7001a5d12aa256e","commitMessage":"@@@[HELIX-390] Force message handler registration even when ZK connection state is flaky\n","date":"2014-03-12 04:22:01","modifiedFileCount":"2","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2017-10-18 08:25:24","codes":[{"authorDate":"2017-10-18 08:25:24","commitOrder":3,"curCode":"  private void sendNopMessage() {\n    if (_manager.isConnected()) {\n      try {\n        Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n        nopMsg.setSrcName(_manager.getInstanceName());\n\n        HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n        Builder keyBuilder = accessor.keyBuilder();\n\n        if (_manager.getInstanceType() == InstanceType.CONTROLLER\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n          nopMsg.setTgtName(\"Controller\");\n          accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n        }\n\n        if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n          nopMsg.setTgtName(_manager.getInstanceName());\n          accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n        }\n        logger.info(\"Send NO_OP message to \" + nopMsg.getTgtName() + \", msgId: \" + nopMsg.getId());\n      } catch (Exception e) {\n        logger.error(e.toString());\n      }\n    }\n  }\n","date":"2018-01-25 10:29:54","endLine":144,"groupId":"2162","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sendNopMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cd/424f862d20820f7d08c99197ff8c539a0321f6.src","preCode":"  private void sendNopMessage() {\n    if (_manager.isConnected()) {\n      try {\n        Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n        nopMsg.setSrcName(_manager.getInstanceName());\n\n        HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n        Builder keyBuilder = accessor.keyBuilder();\n\n        if (_manager.getInstanceType() == InstanceType.CONTROLLER\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n          nopMsg.setTgtName(\"Controller\");\n          accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n        }\n\n        if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n          nopMsg.setTgtName(_manager.getInstanceName());\n          accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n        }\n        logger.info(\"Send NO_OP message to \" + nopMsg.getTgtName() + \", msgId: \" + nopMsg.getId());\n      } catch (Exception e) {\n        logger.error(e);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/participant/HelixStateMachineEngine.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2017-10-18 08:25:24","commitOrder":3,"curCode":"  private void sendNopMessageInternal() {\n    try {\n      Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n      nopMsg.setSrcName(_manager.getInstanceName());\n\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      if (_manager.getInstanceType() == InstanceType.CONTROLLER\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(\"Controller\");\n        accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n      }\n\n      if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(_manager.getInstanceName());\n        accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n      }\n    } catch (Exception e) {\n      _logger.error(e.toString());\n    }\n  }\n","date":"2018-01-25 10:29:54","endLine":313,"groupId":"2162","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sendNopMessageInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e7/76dc2b95ce054c7aca3b504fed5a3cc77f58ac.src","preCode":"  private void sendNopMessageInternal() {\n    try {\n      Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n      nopMsg.setSrcName(_manager.getInstanceName());\n\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      if (_manager.getInstanceType() == InstanceType.CONTROLLER\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(\"Controller\");\n        accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n      }\n\n      if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(_manager.getInstanceName());\n        accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n      }\n    } catch (Exception e) {\n      _logger.error(e);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"}],"commitId":"f8a0f320a4ec4fb4d4f107d65131d903a09a297a","commitMessage":"@@@Use slf4j for helix\n","date":"2018-01-25 10:29:54","modifiedFileCount":"283","status":"M","submitter":"Harry Zhang"},{"authorTime":"2017-11-14 16:38:44","codes":[{"authorDate":"2017-11-14 16:38:44","commitOrder":4,"curCode":"  private void sendNopMessage() {\n    if (_manager.isConnected()) {\n      try {\n        Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n        nopMsg.setSrcName(_manager.getInstanceName());\n\n        HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n        Builder keyBuilder = accessor.keyBuilder();\n\n        if (_manager.getInstanceType() == InstanceType.CONTROLLER\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n          nopMsg.setTgtName(InstanceType.CONTROLLER.name());\n          accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n        }\n\n        if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n          nopMsg.setTgtName(_manager.getInstanceName());\n          accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n        }\n        logger.info(\"Send NO_OP message to \" + nopMsg.getTgtName() + \", msgId: \" + nopMsg.getId());\n      } catch (Exception e) {\n        logger.error(e.toString());\n      }\n    }\n  }\n","date":"2018-01-25 10:32:52","endLine":144,"groupId":"10637","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"sendNopMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3a/1318078f0cb91648965bd41bd40ab24433ff0b.src","preCode":"  private void sendNopMessage() {\n    if (_manager.isConnected()) {\n      try {\n        Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n        nopMsg.setSrcName(_manager.getInstanceName());\n\n        HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n        Builder keyBuilder = accessor.keyBuilder();\n\n        if (_manager.getInstanceType() == InstanceType.CONTROLLER\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n          nopMsg.setTgtName(\"Controller\");\n          accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n        }\n\n        if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n            || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n          nopMsg.setTgtName(_manager.getInstanceName());\n          accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n        }\n        logger.info(\"Send NO_OP message to \" + nopMsg.getTgtName() + \", msgId: \" + nopMsg.getId());\n      } catch (Exception e) {\n        logger.error(e.toString());\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/participant/HelixStateMachineEngine.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2017-11-14 16:38:44","commitOrder":4,"curCode":"  private void sendNopMessageInternal() {\n    try {\n      Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n      nopMsg.setSrcName(_manager.getInstanceName());\n\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      if (_manager.getInstanceType() == InstanceType.CONTROLLER\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(InstanceType.CONTROLLER.name());\n        accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n      }\n\n      if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(_manager.getInstanceName());\n        accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n      }\n    } catch (Exception e) {\n      _logger.error(e.toString());\n    }\n  }\n","date":"2018-01-25 10:32:52","endLine":313,"groupId":"10637","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"sendNopMessageInternal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/84fd7d053e62b3146e400cf33531602c77af8d.src","preCode":"  private void sendNopMessageInternal() {\n    try {\n      Message nopMsg = new Message(MessageType.NO_OP, UUID.randomUUID().toString());\n      nopMsg.setSrcName(_manager.getInstanceName());\n\n      HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n      Builder keyBuilder = accessor.keyBuilder();\n\n      if (_manager.getInstanceType() == InstanceType.CONTROLLER\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(\"Controller\");\n        accessor.setProperty(keyBuilder.controllerMessage(nopMsg.getId()), nopMsg);\n      }\n\n      if (_manager.getInstanceType() == InstanceType.PARTICIPANT\n          || _manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n        nopMsg.setTgtName(_manager.getInstanceName());\n        accessor.setProperty(keyBuilder.message(nopMsg.getTgtName(), nopMsg.getId()), nopMsg);\n      }\n    } catch (Exception e) {\n      _logger.error(e.toString());\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"}],"commitId":"5ffab62fc96007cb636a6da97be0e62ddb63cd91","commitMessage":"@@@Remove all legacy dependencies on \"controller\" as the controller nodes' name.\n\nShould check instance type for the instance information instead of relying on the name. Name can be configured as any string.\n","date":"2018-01-25 10:32:52","modifiedFileCount":"8","status":"M","submitter":"Jiajun Wang"}]
