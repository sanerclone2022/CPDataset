[{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":1,"curCode":"  public void setConstraint(String clusterName,\n                            final ConstraintType constraintType,\n                            final String constraintId,\n                            final ConstraintItem constraintItem)\n  {\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>()\n    {\n      @Override\n      public ZNRecord update(ZNRecord currentData)\n      {\n        ClusterConstraints constraints = currentData == null? \n            new ClusterConstraints(constraintType) : new ClusterConstraints(currentData);\n\n        constraints.addConstraintItem(constraintId, constraintItem);\n        return constraints.getRecord();\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","date":"2013-04-06 08:30:58","endLine":1359,"groupId":"5853","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setConstraint","params":"(StringclusterName@finalConstraintTypeconstraintType@finalStringconstraintId@finalConstraintItemconstraintItem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ca/80a1ecbb8b997f62c4b68f9c8f225af9eb53fc.src","preCode":"  public void setConstraint(String clusterName,\n                            final ConstraintType constraintType,\n                            final String constraintId,\n                            final ConstraintItem constraintItem)\n  {\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>()\n    {\n      @Override\n      public ZNRecord update(ZNRecord currentData)\n      {\n        ClusterConstraints constraints = currentData == null? \n            new ClusterConstraints(constraintType) : new ClusterConstraints(currentData);\n\n        constraints.addConstraintItem(constraintId, constraintItem);\n        return constraints.getRecord();\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1336,"status":"B"},{"authorDate":"2013-04-06 08:30:58","commitOrder":1,"curCode":"  public void removeConstraint(String clusterName, \n                               final ConstraintType constraintType,\n                               final String constraintId)\n  {\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>()\n    {\n      @Override\n      public ZNRecord update(ZNRecord currentData)\n      {\n        if (currentData != null) {\n          ClusterConstraints constraints = new ClusterConstraints(currentData);\n\n          constraints.removeConstraintItem(constraintId);\n          return constraints.getRecord();\n        }\n        return null;\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","date":"2013-04-06 08:30:58","endLine":1386,"groupId":"5853","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"removeConstraint","params":"(StringclusterName@finalConstraintTypeconstraintType@finalStringconstraintId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ca/80a1ecbb8b997f62c4b68f9c8f225af9eb53fc.src","preCode":"  public void removeConstraint(String clusterName, \n                               final ConstraintType constraintType,\n                               final String constraintId)\n  {\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>()\n    {\n      @Override\n      public ZNRecord update(ZNRecord currentData)\n      {\n        if (currentData != null) {\n          ClusterConstraints constraints = new ClusterConstraints(currentData);\n\n          constraints.removeConstraintItem(constraintId);\n          return constraints.getRecord();\n        }\n        return null;\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1362,"status":"B"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"B","submitter":"Swaroop Jagadish"},{"authorTime":"2014-05-23 02:08:01","codes":[{"authorDate":"2014-05-23 02:08:01","commitOrder":2,"curCode":"  public void setConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId, final ConstraintItem constraintItem) {\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        ClusterConstraints constraints =\n            currentData == null ? new ClusterConstraints(constraintType) : new ClusterConstraints(\n                currentData);\n\n        constraints.addConstraintItem(constraintId, constraintItem);\n        return constraints.getRecord();\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","date":"2014-05-23 02:08:01","endLine":986,"groupId":"5853","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setConstraint","params":"(StringclusterName@finalConstraintTypeconstraintType@finalStringconstraintId@finalConstraintItemconstraintItem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/2d61749a74281f739788469f46ad2621c0c845.src","preCode":"  public void setConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId, final ConstraintItem constraintItem) {\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        ClusterConstraints constraints =\n            currentData == null ? new ClusterConstraints(constraintType) : new ClusterConstraints(\n                currentData);\n\n        constraints.addConstraintItem(constraintId, constraintItem);\n        return constraints.getRecord();\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":968,"status":"M"},{"authorDate":"2014-05-23 02:08:01","commitOrder":2,"curCode":"  public void removeConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId) {\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        if (currentData != null) {\n          ClusterConstraints constraints = new ClusterConstraints(currentData);\n\n          constraints.removeConstraintItem(constraintId);\n          return constraints.getRecord();\n        }\n        return null;\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","date":"2014-05-23 02:08:01","endLine":1008,"groupId":"5853","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"removeConstraint","params":"(StringclusterName@finalConstraintTypeconstraintType@finalStringconstraintId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/2d61749a74281f739788469f46ad2621c0c845.src","preCode":"  public void removeConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId) {\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        if (currentData != null) {\n          ClusterConstraints constraints = new ClusterConstraints(currentData);\n\n          constraints.removeConstraintItem(constraintId);\n          return constraints.getRecord();\n        }\n        return null;\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":989,"status":"M"}],"commitId":"4ff7e3888561b46ca6d9c590bdf425b0d2e0716b","commitMessage":"@@@Merge branch 'helix-0.6.x' of https://git-wip-us.apache.org/repos/asf/helix into helix-0.6.x\n","date":"2014-05-23 02:08:01","modifiedFileCount":"57","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2018-04-20 09:19:51","codes":[{"authorDate":"2018-04-20 09:19:51","commitOrder":3,"curCode":"  public void setConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId, final ConstraintItem constraintItem) {\n    logger.info(\"Set constraint type {} with constraint id {} for cluster {}.\", constraintType,\n        constraintId, clusterName);\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        ClusterConstraints constraints = currentData == null\n            ? new ClusterConstraints(constraintType)\n            : new ClusterConstraints(currentData);\n\n        constraints.addConstraintItem(constraintId, constraintItem);\n        return constraints.getRecord();\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","date":"2018-04-20 09:19:51","endLine":1139,"groupId":"5853","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setConstraint","params":"(StringclusterName@finalConstraintTypeconstraintType@finalStringconstraintId@finalConstraintItemconstraintItem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/708e567f1eb033b6d41cf6dc98340befa6b83c.src","preCode":"  public void setConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId, final ConstraintItem constraintItem) {\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        ClusterConstraints constraints = currentData == null\n            ? new ClusterConstraints(constraintType)\n            : new ClusterConstraints(currentData);\n\n        constraints.addConstraintItem(constraintId, constraintItem);\n        return constraints.getRecord();\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1119,"status":"M"},{"authorDate":"2018-04-20 09:19:51","commitOrder":3,"curCode":"  public void removeConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId) {\n    logger.info(\"Remove constraint type {} with constraint id {} for cluster {}.\", constraintType,\n        constraintId, clusterName);\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        if (currentData != null) {\n          ClusterConstraints constraints = new ClusterConstraints(currentData);\n\n          constraints.removeConstraintItem(constraintId);\n          return constraints.getRecord();\n        }\n        return null;\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","date":"2018-04-20 09:19:51","endLine":1163,"groupId":"5853","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"removeConstraint","params":"(StringclusterName@finalConstraintTypeconstraintType@finalStringconstraintId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/708e567f1eb033b6d41cf6dc98340befa6b83c.src","preCode":"  public void removeConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId) {\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        if (currentData != null) {\n          ClusterConstraints constraints = new ClusterConstraints(currentData);\n\n          constraints.removeConstraintItem(constraintId);\n          return constraints.getRecord();\n        }\n        return null;\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1142,"status":"M"}],"commitId":"a6bdb3c2252a11a51939e1e06083a24ccf5a2ac2","commitMessage":"@@@Add logs for RoutingTableProvider and HelixAdmin\n","date":"2018-04-20 09:19:51","modifiedFileCount":"1","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-03-13 00:44:38","codes":[{"authorDate":"2020-03-13 00:44:38","commitOrder":4,"curCode":"  public void setConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId, final ConstraintItem constraintItem) {\n    logger.info(\"Set constraint type {} with constraint id {} for cluster {}.\", constraintType,\n        constraintId, clusterName);\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    PropertyKey.Builder keyBuilder = new PropertyKey.Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        ClusterConstraints constraints =\n            currentData == null ? new ClusterConstraints(constraintType)\n                : new ClusterConstraints(currentData);\n\n        constraints.addConstraintItem(constraintId, constraintItem);\n        return constraints.getRecord();\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","date":"2020-04-09 08:23:30","endLine":1399,"groupId":"10834","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setConstraint","params":"(StringclusterName@finalConstraintTypeconstraintType@finalStringconstraintId@finalConstraintItemconstraintItem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/eaed8be08f73a58f86cc95cf521969f43a962f.src","preCode":"  public void setConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId, final ConstraintItem constraintItem) {\n    logger.info(\"Set constraint type {} with constraint id {} for cluster {}.\", constraintType,\n        constraintId, clusterName);\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        ClusterConstraints constraints =\n            currentData == null ? new ClusterConstraints(constraintType)\n                : new ClusterConstraints(currentData);\n\n        constraints.addConstraintItem(constraintId, constraintItem);\n        return constraints.getRecord();\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1379,"status":"M"},{"authorDate":"2020-03-13 00:44:38","commitOrder":4,"curCode":"  public void removeConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId) {\n    logger.info(\"Remove constraint type {} with constraint id {} for cluster {}.\", constraintType,\n        constraintId, clusterName);\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    PropertyKey.Builder keyBuilder = new PropertyKey.Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        if (currentData != null) {\n          ClusterConstraints constraints = new ClusterConstraints(currentData);\n\n          constraints.removeConstraintItem(constraintId);\n          return constraints.getRecord();\n        }\n        return null;\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","date":"2020-04-09 08:23:30","endLine":1423,"groupId":"10834","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"removeConstraint","params":"(StringclusterName@finalConstraintTypeconstraintType@finalStringconstraintId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/eaed8be08f73a58f86cc95cf521969f43a962f.src","preCode":"  public void removeConstraint(String clusterName, final ConstraintType constraintType,\n      final String constraintId) {\n    logger.info(\"Remove constraint type {} with constraint id {} for cluster {}.\", constraintType,\n        constraintId, clusterName);\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_zkClient);\n\n    Builder keyBuilder = new Builder(clusterName);\n    String path = keyBuilder.constraint(constraintType.toString()).getPath();\n\n    baseAccessor.update(path, new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        if (currentData != null) {\n          ClusterConstraints constraints = new ClusterConstraints(currentData);\n\n          constraints.removeConstraintItem(constraintId);\n          return constraints.getRecord();\n        }\n        return null;\n      }\n    }, AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1402,"status":"M"}],"commitId":"289085f1ce7d2d9665447e9b114c15645f618937","commitMessage":"@@@Make ZKHelixAdmin and ZKHelixManager Realm-aware (#846)\n\nTo make Helix Java APIs realm-aware.  we need to make both ZKHelixAdmin and ZKHelixManager realm-aware. This commit adds a Builder to set client config and connection config for building realm-aware ZkClients underneath.","date":"2020-04-09 08:23:30","modifiedFileCount":"14","status":"M","submitter":"Huizhi Lu"}]
