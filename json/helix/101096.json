[{"authorTime":"2018-03-27 05:12:11","codes":[{"authorDate":"2018-03-27 05:12:11","commitOrder":1,"curCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1 = {\"MASTER\", \"SLAVE\", \"ERROR\"};\n    String[] p2 = {\"ERROR\", \"SLAVE\", \"SLAVE\"};\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\",\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus = OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>(){});\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n  }\n","date":"2018-03-28 07:14:22","endLine":189,"groupId":"3952","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartitionHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e8/888a2c3cbb224c918f1e64a81a3c6d107481aa.src","preCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1 = {\"MASTER\", \"SLAVE\", \"ERROR\"};\n    String[] p2 = {\"ERROR\", \"SLAVE\", \"SLAVE\"};\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\",\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus = OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>(){});\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2018-03-27 05:12:11","commitOrder":1,"curCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1_1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2_1 = {\"MASTER\", \"SLAVE\", \"ERROR\"};\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams, partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1_2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2_2 = {\"ERROR\", \"SLAVE\", \"ERROR\"};\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams, partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", Response.Status.OK.getStatusCode(),\n        true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus = OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>(){});\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n  }\n","date":"2018-03-28 07:14:22","endLine":249,"groupId":"2672","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e8/888a2c3cbb224c918f1e64a81a3c6d107481aa.src","preCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1_1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2_1 = {\"MASTER\", \"SLAVE\", \"ERROR\"};\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams, partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1_2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2_2 = {\"ERROR\", \"SLAVE\", \"ERROR\"};\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams, partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", Response.Status.OK.getStatusCode(),\n        true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus = OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>(){});\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"}],"commitId":"f4942c492fd8ef0ca63631521b2f9e31bc510f64","commitMessage":"@@@[HELIX-684] Add health status API in ResourceAccessor\n\nThe getResourceHealth method returns the status of all resources in a given cluster. The getPartitionHealth method returns the status of all partitions of a given resource.\n","date":"2018-03-28 07:14:22","modifiedFileCount":"2","status":"B","submitter":"narendly"},{"authorTime":"2019-02-21 06:23:08","codes":[{"authorDate":"2019-02-21 06:23:08","commitOrder":2,"curCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1 = {\"MASTER\", \"SLAVE\", \"ERROR\"};\n    String[] p2 = {\"ERROR\", \"SLAVE\", \"SLAVE\"};\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus = OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>(){});\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n  }\n","date":"2019-05-23 07:02:20","endLine":196,"groupId":"3952","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartitionHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a9/0de7bec03e5ed52b18d9445b7acec1e9414ffd.src","preCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1 = {\"MASTER\", \"SLAVE\", \"ERROR\"};\n    String[] p2 = {\"ERROR\", \"SLAVE\", \"SLAVE\"};\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\",\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus = OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>(){});\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2019-02-21 06:23:08","commitOrder":2,"curCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1_1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2_1 = {\"MASTER\", \"SLAVE\", \"ERROR\"};\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams, partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1_2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2_2 = {\"ERROR\", \"SLAVE\", \"ERROR\"};\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams, partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", null, Response.Status.OK.getStatusCode(),\n        true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus = OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>(){});\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n  }\n","date":"2019-05-23 07:02:20","endLine":256,"groupId":"2672","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a9/0de7bec03e5ed52b18d9445b7acec1e9414ffd.src","preCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1_1 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2_1 = {\"MASTER\", \"SLAVE\", \"ERROR\"};\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams, partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p1_2 = {\"MASTER\", \"SLAVE\", \"SLAVE\"};\n    String[] p2_2 = {\"ERROR\", \"SLAVE\", \"ERROR\"};\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams, partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", Response.Status.OK.getStatusCode(),\n        true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus = OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>(){});\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"babc471bbd81907da73f5f33b2f9f5a035e20177","commitMessage":"@@@get instance's pending messages with state model def parameter\n\nUpdate the get() method in AbstractTestClass in order to take the correct QueryParam\nBUGS=HELIX-1645\n\nRB=1570393\nBUG=HELIX-1645\nG=helix-reviewers\nA=hulee. jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-23 07:02:20","modifiedFileCount":"9","status":"M","submitter":"ywang4"},{"authorTime":"2019-08-06 07:25:03","codes":[{"authorDate":"2019-08-06 07:25:03","commitOrder":3,"curCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    String[] p2 = {\n        \"ERROR\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":209,"groupId":"3952","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartitionHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ac/c6ce48586b4a1ee5eaafc439acda3837871090.src","preCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    String[] p2 = {\n        \"ERROR\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-08-06 07:25:03","commitOrder":3,"curCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams,\n        partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_2 = {\n        \"ERROR\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams,\n        partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":292,"groupId":"2672","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ac/c6ce48586b4a1ee5eaafc439acda3837871090.src","preCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams,\n        partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_2 = {\n        \"ERROR\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams,\n        partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"}],"commitId":"af00b8df4f9ea432a8186b4c50c3a5bc3ddf035b","commitMessage":"@@@Stablize the REST tests\n\nStablize the REST tests by following changes:\n1. Remove temporary cluster which impact the ClusterAccessor test\n2. Add all start/end message for test debug purpose.\n3. Disable unstable monitoring test for default MBeans. Sometimes we can query it sometimes not. It is not critical test path. Let's make it stable later.\n","date":"2019-08-08 05:10:37","modifiedFileCount":"10","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-04-09 08:34:35","codes":[{"authorDate":"2020-04-09 08:34:35","commitOrder":4,"curCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    \r\n    \r\n    stopClustersControllers();\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    String[] p2 = {\n        \"ERROR\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n    \r\n    startClustersControllers();\n  }\n","date":"2020-04-09 08:34:35","endLine":216,"groupId":"3952","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartitionHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9f/5b980852c503d603ce7d9db696ce25d37ed5f0.src","preCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    String[] p2 = {\n        \"ERROR\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2020-04-09 08:34:35","commitOrder":4,"curCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    \r\n    \r\n    stopClustersControllers();\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams,\n        partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_2 = {\n        \"ERROR\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams,\n        partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n    \r\n    startClustersControllers();\n  }\n","date":"2020-04-09 08:34:35","endLine":304,"groupId":"2672","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9f/5b980852c503d603ce7d9db696ce25d37ed5f0.src","preCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams,\n        partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_2 = {\n        \"ERROR\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams,\n        partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"66c99644da57286ee545a999078096a362184c08","commitMessage":"@@@Fix flaky resource accessor tests (#935)\n\nThis PR fixes the flaky tests in TestResourceAccessor.  namely testPartitionHealth and testResourceHealth. The tests have been failing because the external views created during the tests could be sometimes removed before the health check.  causing health checks to fail. How to reproduce: add time delay before health check calls will always fail the test cases.\n\nWe believe that the reason behind external view removal is due to the controllers.  and disabling the controllers on the test clusters has made the tests pass even with the time delay.","date":"2020-04-09 08:34:35","modifiedFileCount":"1","status":"M","submitter":"Neal Sun"},{"authorTime":"2020-04-22 03:49:56","codes":[{"authorDate":"2020-04-22 03:49:56","commitOrder":5,"curCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, false);\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    String[] p2 = {\n        \"ERROR\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, true);\n  }\n","date":"2020-04-22 03:49:56","endLine":216,"groupId":"3952","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartitionHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ee/949aae146a0e625cf21c09e1e61155b7f6e726.src","preCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    \r\n    \r\n    stopClustersControllers();\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    String[] p2 = {\n        \"ERROR\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n    \r\n    startClustersControllers();\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2020-04-22 03:49:56","commitOrder":5,"curCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, false);\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams,\n        partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_2 = {\n        \"ERROR\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams,\n        partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, true);\n  }\n","date":"2020-04-22 03:49:56","endLine":305,"groupId":"2672","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ee/949aae146a0e625cf21c09e1e61155b7f6e726.src","preCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n    \r\n    \r\n    stopClustersControllers();\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams,\n        partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_2 = {\n        \"ERROR\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams,\n        partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n    \r\n    startClustersControllers();\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"38b4fa3dc5c9973ba3a13e07163b48adc4ba7c4a","commitMessage":"@@@Fix Regression on Flaky Tests in TestResourceAccessor (#959)\n\nThe previous fix to TestResourceAccessor (stopping all mock controllers) might have affected other tests. A better approach.  instead of stopping all controllers.  is to pause the clusters instead.","date":"2020-04-22 03:49:56","modifiedFileCount":"1","status":"M","submitter":"Neal Sun"},{"authorTime":"2020-08-21 10:06:09","codes":[{"authorDate":"2020-08-21 10:06:09","commitOrder":6,"curCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, false);\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    String[] p2 = {\n        \"ERROR\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.convertValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, true);\n  }\n","date":"2020-08-21 10:06:09","endLine":216,"groupId":"101096","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartitionHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e2/e81a215a3c48df09ba1203e4a46b2ee4a3a6f8.src","preCode":"  public void testPartitionHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    String resourceName = clusterName + \"_db_0\";\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, false);\n\n    \r\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    String[] p2 = {\n        \"ERROR\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceName, idealStateParams, partitionReplicaStates);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/\" + resourceName + \"/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(\"p0\"), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p1\"), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(\"p2\"), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, true);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2020-08-21 10:06:09","commitOrder":6,"curCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, false);\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams,\n        partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_2 = {\n        \"ERROR\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams,\n        partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.convertValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, true);\n  }\n","date":"2020-08-21 10:06:09","endLine":305,"groupId":"101096","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceHealth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e2/e81a215a3c48df09ba1203e4a46b2ee4a3a6f8.src","preCode":"  public void testResourceHealth() throws Exception {\n    System.out.println(\"Start test :\" + TestHelper.getTestMethodName());\n\n    String clusterName = \"TestCluster_1\";\n    Map<String, String> idealStateParams = new HashMap<>();\n    idealStateParams.put(\"MinActiveReplicas\", \"2\");\n    idealStateParams.put(\"StateModelDefRef\", \"MasterSlave\");\n    idealStateParams.put(\"MaxPartitionsPerInstance\", \"3\");\n    idealStateParams.put(\"Replicas\", \"3\");\n    idealStateParams.put(\"NumPartitions\", \"3\");\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, false);\n\n    \r\n    String resourceNameHealthy = clusterName + \"_db_0\";\n    Map<String, List<String>> partitionReplicaStates = new LinkedHashMap<>();\n    String[] p0 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    partitionReplicaStates.put(\"p0\", Arrays.asList(p0));\n    partitionReplicaStates.put(\"p1\", Arrays.asList(p1));\n    partitionReplicaStates.put(\"p2\", Arrays.asList(p2));\n\n    createDummyMapping(clusterName, resourceNameHealthy, idealStateParams, partitionReplicaStates);\n\n    \r\n    String resourceNamePartiallyHealthy = clusterName + \"_db_1\";\n    Map<String, List<String>> partitionReplicaStates_1 = new LinkedHashMap<>();\n    String[] p0_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_1 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_1 = {\n        \"MASTER\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_1.put(\"p0\", Arrays.asList(p0_1));\n    partitionReplicaStates_1.put(\"p1\", Arrays.asList(p1_1));\n    partitionReplicaStates_1.put(\"p2\", Arrays.asList(p2_1));\n\n    createDummyMapping(clusterName, resourceNamePartiallyHealthy, idealStateParams,\n        partitionReplicaStates_1);\n\n    \r\n    String resourceNameUnhealthy = clusterName + \"_db_2\";\n    Map<String, List<String>> partitionReplicaStates_2 = new LinkedHashMap<>();\n    String[] p0_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p1_2 = {\n        \"MASTER\", \"SLAVE\", \"SLAVE\"\n    };\n    String[] p2_2 = {\n        \"ERROR\", \"SLAVE\", \"ERROR\"\n    };\n    partitionReplicaStates_2.put(\"p0\", Arrays.asList(p0_2));\n    partitionReplicaStates_2.put(\"p1\", Arrays.asList(p1_2));\n    partitionReplicaStates_2.put(\"p2\", Arrays.asList(p2_2));\n\n    createDummyMapping(clusterName, resourceNameUnhealthy, idealStateParams,\n        partitionReplicaStates_2);\n\n    \r\n    String body = get(\"clusters/\" + clusterName + \"/resources/health\", null,\n        Response.Status.OK.getStatusCode(), true);\n\n    JsonNode node = OBJECT_MAPPER.readTree(body);\n    Map<String, String> healthStatus =\n        OBJECT_MAPPER.readValue(node, new TypeReference<Map<String, String>>() {\n        });\n\n    Assert.assertEquals(healthStatus.get(resourceNameHealthy), \"HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNamePartiallyHealthy), \"PARTIAL_HEALTHY\");\n    Assert.assertEquals(healthStatus.get(resourceNameUnhealthy), \"UNHEALTHY\");\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n\n    \r\n    _gSetupTool.getClusterManagementTool().enableCluster(clusterName, true);\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"cd552d9f122dbe3fa4b3648d38b2fc615f663b84","commitMessage":"@@@Replace org.codehaus.jackson with FasterXML.jackson (#1293)\n\nReplace org.codehaus.jackson with FasterXML.jackson","date":"2020-08-21 10:06:09","modifiedFileCount":"86","status":"M","submitter":"xyuanlu"}]
