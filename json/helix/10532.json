[{"authorTime":"2016-10-26 04:27:55","codes":[{"authorDate":"2016-10-26 04:27:55","commitOrder":1,"curCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupJobQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","date":"2016-10-29 11:33:21","endLine":57,"groupId":"1125","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJobQueueCleanUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/71/fed4904c93ce42f9a0c3d83fbedb52a8c9e6b5.src","preCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupJobQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2016-10-26 04:27:55","commitOrder":1,"curCode":"  @Test public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000L\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupJobQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","date":"2016-10-29 11:33:21","endLine":76,"groupId":"5968","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobQueueNotCleanupRunningJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/71/fed4904c93ce42f9a0c3d83fbedb52a8c9e6b5.src","preCode":"  @Test public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000L\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupJobQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"33dae525a8b31cae4d6a80a89f1d08190db0beda","commitMessage":"@@@[HELIX-636] Add Java API and REST API for clean up JobQueue\n\nTo clean up the jobs in the final states.  provide a Java API and REST API in helix.\n","date":"2016-10-29 11:33:21","modifiedFileCount":"8","status":"B","submitter":"Junkai Xue"},{"authorTime":"2017-01-31 07:02:24","codes":[{"authorDate":"2017-01-31 07:02:24","commitOrder":2,"curCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","date":"2017-10-07 03:23:47","endLine":57,"groupId":"1125","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJobQueueCleanUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a0/a16179ba65b5eefc21cb4abf2df2516bb3927f.src","preCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupJobQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2017-01-31 07:02:24","commitOrder":2,"curCode":"  @Test public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000L\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","date":"2017-10-07 03:23:47","endLine":76,"groupId":"5968","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobQueueNotCleanupRunningJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a0/a16179ba65b5eefc21cb4abf2df2516bb3927f.src","preCode":"  @Test public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000L\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupJobQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"e530bf5183e7ad2f3a27d0e75448b88e8554efe8","commitMessage":"@@@Clean up jobs in a jobqueue automatically after the job completes and passes its expiry time.\n","date":"2017-10-07 03:23:47","modifiedFileCount":"15","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-01-31 07:02:24","commitOrder":3,"curCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","date":"2017-10-07 03:23:47","endLine":57,"groupId":"1125","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJobQueueCleanUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a0/a16179ba65b5eefc21cb4abf2df2516bb3927f.src","preCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  @Test public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","date":"2017-11-08 08:48:26","endLine":80,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobQueueNotCleanupRunningJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dc/eee8f923d12fef5ba08c3bf2236c7375f5b04b.src","preCode":"  @Test public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000L\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-04-21 07:11:27","codes":[{"authorDate":"2017-01-31 07:02:24","commitOrder":4,"curCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","date":"2017-10-07 03:23:47","endLine":57,"groupId":"1125","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJobQueueCleanUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a0/a16179ba65b5eefc21cb4abf2df2516bb3927f.src","preCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2018-04-21 07:11:27","commitOrder":4,"curCode":"  @Test public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","date":"2018-04-25 03:45:43","endLine":80,"groupId":"6446","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobQueueNotCleanupRunningJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/a495c83dee764210890c2de86a20942df6ab47.src","preCode":"  @Test public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"d2fb22d1f3a3db602b27cba7ed8d814cb931622e","commitMessage":"@@@Fix a few of unstable integration tests.\n","date":"2018-04-25 03:45:43","modifiedFileCount":"18","status":"M","submitter":"Lei Xia"},{"authorTime":"2020-08-14 07:45:32","codes":[{"authorDate":"2017-01-31 07:02:24","commitOrder":5,"curCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","date":"2017-10-07 03:23:47","endLine":57,"groupId":"10532","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testJobQueueCleanUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a0/a16179ba65b5eefc21cb4abf2df2516bb3927f.src","preCode":"  public void testJobQueueCleanUp() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.SUCCESS_COUNT_BEFORE_FAIL, \"2\"));\n    for (int i = 0; i < 5; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 4),\n        TaskState.FAILED);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2020-08-14 07:45:32","commitOrder":5,"curCode":"  public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","date":"2020-08-14 07:45:32","endLine":81,"groupId":"10532","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testJobQueueNotCleanupRunningJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/18/ec2de8e5f8609bf22199b49ae03440f8fcc7a2.src","preCode":"  @Test public void testJobQueueNotCleanupRunningJobs() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2);\n    for (int i = 0; i < 3; i++) {\n      builder.enqueueJob(\"JOB\" + i, jobBuilder);\n    }\n    builder.enqueueJob(\"JOB\" + 3,\n        jobBuilder.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\")));\n    builder.enqueueJob(\"JOB\" + 4, jobBuilder);\n    _driver.start(builder.build());\n    _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + 3),\n        TaskState.IN_PROGRESS);\n    _driver.cleanupQueue(queueName);\n    Assert.assertEquals(_driver.getWorkflowConfig(queueName).getJobDag().size(), 2);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"e163efc4de07a67069fdbd4effd19729158fa832","commitMessage":"@@@Terminal State Job Purging (#1231)\n\nThis commit added a new field to JobConfig for terminal job expiries.  and added new logic to garbage collection stage to purge jobs in terminal states.\n","date":"2020-08-14 07:45:32","modifiedFileCount":"6","status":"M","submitter":"Neal Sun"}]
