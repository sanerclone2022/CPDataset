[{"authorTime":"2021-02-06 06:16:40","codes":[{"authorDate":"2020-03-10 03:04:13","commitOrder":2,"curCode":"  public void TestOFFLINEToDROPPED() throws Exception {\n\n    ClusterEvent event = new ClusterEvent(TEST_CLUSTER, ClusterEventType.Unknown);\n\n\n    \r\n    CurrentStateOutput currentStateOutput = mock(CurrentStateOutput.class);\n    Partition partition = mock(Partition.class);\n    when(partition.getPartitionName()).thenReturn(TEST_PARTITION);\n    when(currentStateOutput.getCurrentState(TEST_RESOURCE, partition, TEST_INSTANCE)).thenReturn(null);\n    Message message = mock(Message.class);\n    when(message.getFromState()).thenReturn(\"OFFLINE\");\n    when(message.getToState()).thenReturn(\"SLAVE\");\n    when(currentStateOutput.getPendingMessage(TEST_RESOURCE, partition, TEST_INSTANCE)).thenReturn(message);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    \r\n    event.addAttribute(AttributeName.helixmanager.name(), mock(HelixManager.class));\n\n    \r\n    BaseControllerDataProvider cache = mock(BaseControllerDataProvider.class);\n    StateModelDefinition stateModelDefinition = new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    when(cache.getStateModelDef(TaskConstants.STATE_MODEL_NAME)).thenReturn(stateModelDefinition);\n    Map<String, LiveInstance> liveInstances= mock(Map.class);\n    LiveInstance mockLiveInstance = mock(LiveInstance.class);\n    when(mockLiveInstance.getInstanceName()).thenReturn(TEST_INSTANCE);\n    when(mockLiveInstance.getEphemeralOwner()).thenReturn(\"TEST\");\n    when(liveInstances.values()).thenReturn(Arrays.asList(mockLiveInstance));\n    when(cache.getLiveInstances()).thenReturn(liveInstances);\n    ClusterConfig clusterConfig = mock(ClusterConfig.class);\n    when(cache.getClusterConfig()).thenReturn(clusterConfig);\n    when(clusterConfig.isStateTransitionCancelEnabled()).thenReturn(true);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n\n    \r\n    Map<String, Resource> resourceMap = new HashMap<>();\n    Resource resource = mock(Resource.class);\n    when(resource.getResourceName()).thenReturn(TEST_RESOURCE);\n    List<Partition> partitions = Arrays.asList(partition);\n    when(resource.getPartitions()).thenReturn(partitions);\n    when(resource.getStateModelDefRef()).thenReturn(TaskConstants.STATE_MODEL_NAME);\n    resourceMap.put(TEST_RESOURCE, resource);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n\n    \r\n    ResourcesStateMap resourcesStateMap = new ResourcesStateMap();\n    PartitionStateMap partitionStateMap = new PartitionStateMap(TEST_RESOURCE);\n    Map<Partition, Map<String, String>> stateMap = partitionStateMap.getStateMap();\n    Map<String, String> instanceStateMap = new HashMap<>();\n    instanceStateMap.put(TEST_INSTANCE, HelixDefinedState.DROPPED.name());\n    stateMap.put(partition, instanceStateMap);\n    resourcesStateMap.setState(TEST_RESOURCE, partition, instanceStateMap);\n\n    processEvent(event, resourcesStateMap);\n    MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name());\n    Assert.assertEquals(output.getMessages(TEST_RESOURCE, partition).size(), 1);\n  }\n","date":"2020-03-10 03:04:13","endLine":96,"groupId":"2662","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"TestOFFLINEToDROPPED","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6d/7c4aeaef24f0436261a6cda4956e7ec82fdf94.src","preCode":"  public void TestOFFLINEToDROPPED() throws Exception {\n\n    ClusterEvent event = new ClusterEvent(TEST_CLUSTER, ClusterEventType.Unknown);\n\n\n    \r\n    CurrentStateOutput currentStateOutput = mock(CurrentStateOutput.class);\n    Partition partition = mock(Partition.class);\n    when(partition.getPartitionName()).thenReturn(TEST_PARTITION);\n    when(currentStateOutput.getCurrentState(TEST_RESOURCE, partition, TEST_INSTANCE)).thenReturn(null);\n    Message message = mock(Message.class);\n    when(message.getFromState()).thenReturn(\"OFFLINE\");\n    when(message.getToState()).thenReturn(\"SLAVE\");\n    when(currentStateOutput.getPendingMessage(TEST_RESOURCE, partition, TEST_INSTANCE)).thenReturn(message);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    \r\n    event.addAttribute(AttributeName.helixmanager.name(), mock(HelixManager.class));\n\n    \r\n    BaseControllerDataProvider cache = mock(BaseControllerDataProvider.class);\n    StateModelDefinition stateModelDefinition = new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    when(cache.getStateModelDef(TaskConstants.STATE_MODEL_NAME)).thenReturn(stateModelDefinition);\n    Map<String, LiveInstance> liveInstances= mock(Map.class);\n    LiveInstance mockLiveInstance = mock(LiveInstance.class);\n    when(mockLiveInstance.getInstanceName()).thenReturn(TEST_INSTANCE);\n    when(mockLiveInstance.getEphemeralOwner()).thenReturn(\"TEST\");\n    when(liveInstances.values()).thenReturn(Arrays.asList(mockLiveInstance));\n    when(cache.getLiveInstances()).thenReturn(liveInstances);\n    ClusterConfig clusterConfig = mock(ClusterConfig.class);\n    when(cache.getClusterConfig()).thenReturn(clusterConfig);\n    when(clusterConfig.isStateTransitionCancelEnabled()).thenReturn(true);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n\n    \r\n    Map<String, Resource> resourceMap = new HashMap<>();\n    Resource resource = mock(Resource.class);\n    when(resource.getResourceName()).thenReturn(TEST_RESOURCE);\n    List<Partition> partitions = Arrays.asList(partition);\n    when(resource.getPartitions()).thenReturn(partitions);\n    when(resource.getStateModelDefRef()).thenReturn(TaskConstants.STATE_MODEL_NAME);\n    resourceMap.put(TEST_RESOURCE, resource);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n\n    \r\n    ResourcesStateMap resourcesStateMap = new ResourcesStateMap();\n    PartitionStateMap partitionStateMap = new PartitionStateMap(TEST_RESOURCE);\n    Map<Partition, Map<String, String>> stateMap = partitionStateMap.getStateMap();\n    Map<String, String> instanceStateMap = new HashMap<>();\n    instanceStateMap.put(TEST_INSTANCE, HelixDefinedState.DROPPED.name());\n    stateMap.put(partition, instanceStateMap);\n    resourcesStateMap.setState(TEST_RESOURCE, partition, instanceStateMap);\n\n    processEvent(event, resourcesStateMap);\n    MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name());\n    Assert.assertEquals(output.getMessages(TEST_RESOURCE, partition).size(), 1);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCancellationMessageGeneration.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"NB"},{"authorDate":"2021-02-06 06:16:40","commitOrder":2,"curCode":"  private List<Message> generateMessages(String currentState, String fromState, String toState)\n      throws Exception {\n    ClusterEvent event = new ClusterEvent(TEST_CLUSTER, ClusterEventType.Unknown);\n\n    \r\n    CurrentStateOutput currentStateOutput = mock(CurrentStateOutput.class);\n    Partition partition = mock(Partition.class);\n    when(partition.getPartitionName()).thenReturn(TEST_PARTITION);\n    when(currentStateOutput.getCurrentState(TEST_RESOURCE, partition, TEST_INSTANCE))\n        .thenReturn(currentState);\n\n    \r\n    Message pendingMessage = mock(Message.class);\n    when(pendingMessage.getFromState()).thenReturn(fromState);\n    when(pendingMessage.getToState()).thenReturn(toState);\n    when(currentStateOutput.getPendingMessage(TEST_RESOURCE, partition, TEST_INSTANCE))\n        .thenReturn(pendingMessage);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    \r\n    event.addAttribute(AttributeName.helixmanager.name(), mock(HelixManager.class));\n\n    StateModelDefinition stateModelDefinition = new StateModelDefinition.Builder(\"TestStateModel\")\n        .addState(\"ONLINE\", 1).addState(\"OFFLINE\")\n        .addState(\"DROPPED\").addState(\"ERROR\")\n        .initialState(\"OFFLINE\")\n        .addTransition(\"ERROR\", \"OFFLINE\", 1).addTransition(\"ONLINE\", \"OFFLINE\", 2)\n        .addTransition(\"OFFLINE\", \"DROPPED\", 3).addTransition(\"OFFLINE\", \"ONLINE\", 4)\n        .build();\n\n    \r\n    BaseControllerDataProvider cache = mock(BaseControllerDataProvider.class);\n    when(cache.getStateModelDef(TaskConstants.STATE_MODEL_NAME)).thenReturn(stateModelDefinition);\n    Map<String, LiveInstance> liveInstances = mock(Map.class);\n    LiveInstance mockLiveInstance = mock(LiveInstance.class);\n    when(mockLiveInstance.getInstanceName()).thenReturn(TEST_INSTANCE);\n    when(mockLiveInstance.getEphemeralOwner()).thenReturn(\"TEST\");\n    when(liveInstances.values()).thenReturn(Collections.singletonList(mockLiveInstance));\n    when(cache.getLiveInstances()).thenReturn(liveInstances);\n    ClusterConfig clusterConfig = mock(ClusterConfig.class);\n    when(cache.getClusterConfig()).thenReturn(clusterConfig);\n    when(clusterConfig.isStateTransitionCancelEnabled()).thenReturn(true);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    \r\n    Map<String, Resource> resourceMap = new HashMap<>();\n    Resource resource = mock(Resource.class);\n    when(resource.getResourceName()).thenReturn(TEST_RESOURCE);\n    List<Partition> partitions = Collections.singletonList(partition);\n    when(resource.getPartitions()).thenReturn(partitions);\n    when(resource.getStateModelDefRef()).thenReturn(TaskConstants.STATE_MODEL_NAME);\n    resourceMap.put(TEST_RESOURCE, resource);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n\n    \r\n    ResourcesStateMap resourcesStateMap = new ResourcesStateMap();\n    PartitionStateMap partitionStateMap = new PartitionStateMap(TEST_RESOURCE);\n    Map<Partition, Map<String, String>> stateMap = partitionStateMap.getStateMap();\n    Map<String, String> instanceStateMap = new HashMap<>();\n    instanceStateMap.put(TEST_INSTANCE, currentState);\n    stateMap.put(partition, instanceStateMap);\n    resourcesStateMap.setState(TEST_RESOURCE, partition, instanceStateMap);\n\n    \r\n    processEvent(event, resourcesStateMap);\n    MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name());\n\n    return output.getMessages(TEST_RESOURCE, partition);\n  }\n","date":"2021-02-06 06:16:40","endLine":210,"groupId":"6091","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateMessages","params":"(StringcurrentState@StringfromState@StringtoState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b2/31e6d901d3849875d808e4cf57f30230a76fbf.src","preCode":"  private List<Message> generateMessages(String currentState, String fromState, String toState)\n      throws Exception {\n    ClusterEvent event = new ClusterEvent(TEST_CLUSTER, ClusterEventType.Unknown);\n\n    \r\n    CurrentStateOutput currentStateOutput = mock(CurrentStateOutput.class);\n    Partition partition = mock(Partition.class);\n    when(partition.getPartitionName()).thenReturn(TEST_PARTITION);\n    when(currentStateOutput.getCurrentState(TEST_RESOURCE, partition, TEST_INSTANCE))\n        .thenReturn(currentState);\n\n    \r\n    Message pendingMessage = mock(Message.class);\n    when(pendingMessage.getFromState()).thenReturn(fromState);\n    when(pendingMessage.getToState()).thenReturn(toState);\n    when(currentStateOutput.getPendingMessage(TEST_RESOURCE, partition, TEST_INSTANCE))\n        .thenReturn(pendingMessage);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    \r\n    event.addAttribute(AttributeName.helixmanager.name(), mock(HelixManager.class));\n\n    StateModelDefinition stateModelDefinition = new StateModelDefinition.Builder(\"TestStateModel\")\n        .addState(\"ONLINE\", 1).addState(\"OFFLINE\")\n        .addState(\"DROPPED\").addState(\"ERROR\")\n        .initialState(\"OFFLINE\")\n        .addTransition(\"ERROR\", \"OFFLINE\", 1).addTransition(\"ONLINE\", \"OFFLINE\", 2)\n        .addTransition(\"OFFLINE\", \"DROPPED\", 3).addTransition(\"OFFLINE\", \"ONLINE\", 4)\n        .build();\n\n    \r\n    BaseControllerDataProvider cache = mock(BaseControllerDataProvider.class);\n    when(cache.getStateModelDef(TaskConstants.STATE_MODEL_NAME)).thenReturn(stateModelDefinition);\n    Map<String, LiveInstance> liveInstances = mock(Map.class);\n    LiveInstance mockLiveInstance = mock(LiveInstance.class);\n    when(mockLiveInstance.getInstanceName()).thenReturn(TEST_INSTANCE);\n    when(mockLiveInstance.getEphemeralOwner()).thenReturn(\"TEST\");\n    when(liveInstances.values()).thenReturn(Collections.singletonList(mockLiveInstance));\n    when(cache.getLiveInstances()).thenReturn(liveInstances);\n    ClusterConfig clusterConfig = mock(ClusterConfig.class);\n    when(cache.getClusterConfig()).thenReturn(clusterConfig);\n    when(clusterConfig.isStateTransitionCancelEnabled()).thenReturn(true);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    \r\n    Map<String, Resource> resourceMap = new HashMap<>();\n    Resource resource = mock(Resource.class);\n    when(resource.getResourceName()).thenReturn(TEST_RESOURCE);\n    List<Partition> partitions = Collections.singletonList(partition);\n    when(resource.getPartitions()).thenReturn(partitions);\n    when(resource.getStateModelDefRef()).thenReturn(TaskConstants.STATE_MODEL_NAME);\n    resourceMap.put(TEST_RESOURCE, resource);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n\n    \r\n    ResourcesStateMap resourcesStateMap = new ResourcesStateMap();\n    PartitionStateMap partitionStateMap = new PartitionStateMap(TEST_RESOURCE);\n    Map<Partition, Map<String, String>> stateMap = partitionStateMap.getStateMap();\n    Map<String, String> instanceStateMap = new HashMap<>();\n    instanceStateMap.put(TEST_INSTANCE, currentState);\n    stateMap.put(partition, instanceStateMap);\n    resourcesStateMap.setState(TEST_RESOURCE, partition, instanceStateMap);\n\n    \r\n    processEvent(event, resourcesStateMap);\n    MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name());\n\n    return output.getMessages(TEST_RESOURCE, partition);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCancellationMessageGeneration.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"}],"commitId":"0b83e8eff099db6b87a9fb3e4678cfea190bedcb","commitMessage":"@@@Skip cancellation for partition reset pending message (#1637)\n\nWhen admin or participant resets partition with ERROR -> OFFLINE state transition.  helix controller determines it is an unnecessary state transition so it cancels the state transition. The ensure partition reset is successful.  helix controller should skip cancelling the ERROR -> OFFLINE state transition.\n\nThis commit adds a logic: Helix controller should not cancel the pending ST if the pending ST is ERROR -> initialState","date":"2021-02-06 06:16:40","modifiedFileCount":"2","status":"M","submitter":"Huizhi Lu"},{"authorTime":"2021-05-27 07:44:46","codes":[{"authorDate":"2021-05-27 07:44:46","commitOrder":3,"curCode":"  public void TestOFFLINEToDROPPED() throws Exception {\n\n    ClusterEvent event = new ClusterEvent(TEST_CLUSTER, ClusterEventType.Unknown);\n\n\n    \r\n    CurrentStateOutput currentStateOutput = mock(CurrentStateOutput.class);\n    Partition partition = mock(Partition.class);\n    when(partition.getPartitionName()).thenReturn(TEST_PARTITION);\n    when(currentStateOutput.getCurrentState(TEST_RESOURCE, partition, TEST_INSTANCE)).thenReturn(null);\n    Message message = mock(Message.class);\n    when(message.getFromState()).thenReturn(\"OFFLINE\");\n    when(message.getToState()).thenReturn(\"SLAVE\");\n    when(currentStateOutput.getPendingMessage(TEST_RESOURCE, partition, TEST_INSTANCE)).thenReturn(message);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    \r\n    event.addAttribute(AttributeName.helixmanager.name(), mock(HelixManager.class));\n\n    \r\n    BaseControllerDataProvider cache = mock(BaseControllerDataProvider.class);\n    StateModelDefinition stateModelDefinition = new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    when(cache.getStateModelDef(TaskConstants.STATE_MODEL_NAME)).thenReturn(stateModelDefinition);\n    Map<String, LiveInstance> liveInstances= mock(Map.class);\n    LiveInstance mockLiveInstance = mock(LiveInstance.class);\n    when(mockLiveInstance.getInstanceName()).thenReturn(TEST_INSTANCE);\n    when(mockLiveInstance.getEphemeralOwner()).thenReturn(\"TEST\");\n    when(liveInstances.values()).thenReturn(Arrays.asList(mockLiveInstance));\n    when(cache.getLiveInstances()).thenReturn(liveInstances);\n    ClusterConfig clusterConfig = mock(ClusterConfig.class);\n    when(cache.getClusterConfig()).thenReturn(clusterConfig);\n    when(clusterConfig.isStateTransitionCancelEnabled()).thenReturn(true);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n\n    \r\n    Map<String, Resource> resourceMap = new HashMap<>();\n    Resource resource = mock(Resource.class);\n    when(resource.getResourceName()).thenReturn(TEST_RESOURCE);\n    List<Partition> partitions = Arrays.asList(partition);\n    when(resource.getPartitions()).thenReturn(partitions);\n    when(resource.getStateModelDefRef()).thenReturn(TaskConstants.STATE_MODEL_NAME);\n    resourceMap.put(TEST_RESOURCE, resource);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    PartitionStateMap partitionStateMap = new PartitionStateMap(TEST_RESOURCE);\n    Map<Partition, Map<String, String>> stateMap = partitionStateMap.getStateMap();\n    Map<String, String> instanceStateMap = new HashMap<>();\n    instanceStateMap.put(TEST_INSTANCE, HelixDefinedState.DROPPED.name());\n    stateMap.put(partition, instanceStateMap);\n    bestPossibleStateOutput.setState(TEST_RESOURCE, partition, instanceStateMap);\n\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    process(event);\n    MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name());\n    Assert.assertEquals(output.getMessages(TEST_RESOURCE, partition).size(), 1);\n  }\n","date":"2021-06-02 02:44:29","endLine":115,"groupId":"10283","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"TestOFFLINEToDROPPED","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2f/cfc3e59c6ec2b219f5bc9ca8f9bbaf35092d43.src","preCode":"  public void TestOFFLINEToDROPPED() throws Exception {\n\n    ClusterEvent event = new ClusterEvent(TEST_CLUSTER, ClusterEventType.Unknown);\n\n\n    \r\n    CurrentStateOutput currentStateOutput = mock(CurrentStateOutput.class);\n    Partition partition = mock(Partition.class);\n    when(partition.getPartitionName()).thenReturn(TEST_PARTITION);\n    when(currentStateOutput.getCurrentState(TEST_RESOURCE, partition, TEST_INSTANCE)).thenReturn(null);\n    Message message = mock(Message.class);\n    when(message.getFromState()).thenReturn(\"OFFLINE\");\n    when(message.getToState()).thenReturn(\"SLAVE\");\n    when(currentStateOutput.getPendingMessage(TEST_RESOURCE, partition, TEST_INSTANCE)).thenReturn(message);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    \r\n    event.addAttribute(AttributeName.helixmanager.name(), mock(HelixManager.class));\n\n    \r\n    BaseControllerDataProvider cache = mock(BaseControllerDataProvider.class);\n    StateModelDefinition stateModelDefinition = new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    when(cache.getStateModelDef(TaskConstants.STATE_MODEL_NAME)).thenReturn(stateModelDefinition);\n    Map<String, LiveInstance> liveInstances= mock(Map.class);\n    LiveInstance mockLiveInstance = mock(LiveInstance.class);\n    when(mockLiveInstance.getInstanceName()).thenReturn(TEST_INSTANCE);\n    when(mockLiveInstance.getEphemeralOwner()).thenReturn(\"TEST\");\n    when(liveInstances.values()).thenReturn(Arrays.asList(mockLiveInstance));\n    when(cache.getLiveInstances()).thenReturn(liveInstances);\n    ClusterConfig clusterConfig = mock(ClusterConfig.class);\n    when(cache.getClusterConfig()).thenReturn(clusterConfig);\n    when(clusterConfig.isStateTransitionCancelEnabled()).thenReturn(true);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n\n    \r\n    Map<String, Resource> resourceMap = new HashMap<>();\n    Resource resource = mock(Resource.class);\n    when(resource.getResourceName()).thenReturn(TEST_RESOURCE);\n    List<Partition> partitions = Arrays.asList(partition);\n    when(resource.getPartitions()).thenReturn(partitions);\n    when(resource.getStateModelDefRef()).thenReturn(TaskConstants.STATE_MODEL_NAME);\n    resourceMap.put(TEST_RESOURCE, resource);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n\n    \r\n    ResourcesStateMap resourcesStateMap = new ResourcesStateMap();\n    PartitionStateMap partitionStateMap = new PartitionStateMap(TEST_RESOURCE);\n    Map<Partition, Map<String, String>> stateMap = partitionStateMap.getStateMap();\n    Map<String, String> instanceStateMap = new HashMap<>();\n    instanceStateMap.put(TEST_INSTANCE, HelixDefinedState.DROPPED.name());\n    stateMap.put(partition, instanceStateMap);\n    resourcesStateMap.setState(TEST_RESOURCE, partition, instanceStateMap);\n\n    processEvent(event, resourcesStateMap);\n    MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name());\n    Assert.assertEquals(output.getMessages(TEST_RESOURCE, partition).size(), 1);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCancellationMessageGeneration.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-05-27 07:44:46","commitOrder":3,"curCode":"  private List<Message> generateMessages(String currentState, String fromState, String toState)\n      throws Exception {\n    ClusterEvent event = new ClusterEvent(TEST_CLUSTER, ClusterEventType.Unknown);\n\n    \r\n    CurrentStateOutput currentStateOutput = mock(CurrentStateOutput.class);\n    Partition partition = mock(Partition.class);\n    when(partition.getPartitionName()).thenReturn(TEST_PARTITION);\n    when(currentStateOutput.getCurrentState(TEST_RESOURCE, partition, TEST_INSTANCE))\n        .thenReturn(currentState);\n\n    \r\n    Message pendingMessage = mock(Message.class);\n    when(pendingMessage.getFromState()).thenReturn(fromState);\n    when(pendingMessage.getToState()).thenReturn(toState);\n    when(currentStateOutput.getPendingMessage(TEST_RESOURCE, partition, TEST_INSTANCE))\n        .thenReturn(pendingMessage);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    \r\n    event.addAttribute(AttributeName.helixmanager.name(), mock(HelixManager.class));\n\n    StateModelDefinition stateModelDefinition = new StateModelDefinition.Builder(\"TestStateModel\")\n        .addState(\"ONLINE\", 1).addState(\"OFFLINE\")\n        .addState(\"DROPPED\").addState(\"ERROR\")\n        .initialState(\"OFFLINE\")\n        .addTransition(\"ERROR\", \"OFFLINE\", 1).addTransition(\"ONLINE\", \"OFFLINE\", 2)\n        .addTransition(\"OFFLINE\", \"DROPPED\", 3).addTransition(\"OFFLINE\", \"ONLINE\", 4)\n        .build();\n\n    \r\n    BaseControllerDataProvider cache = mock(BaseControllerDataProvider.class);\n    when(cache.getStateModelDef(TaskConstants.STATE_MODEL_NAME)).thenReturn(stateModelDefinition);\n    Map<String, LiveInstance> liveInstances = mock(Map.class);\n    LiveInstance mockLiveInstance = mock(LiveInstance.class);\n    when(mockLiveInstance.getInstanceName()).thenReturn(TEST_INSTANCE);\n    when(mockLiveInstance.getEphemeralOwner()).thenReturn(\"TEST\");\n    when(liveInstances.values()).thenReturn(Collections.singletonList(mockLiveInstance));\n    when(cache.getLiveInstances()).thenReturn(liveInstances);\n    ClusterConfig clusterConfig = mock(ClusterConfig.class);\n    when(cache.getClusterConfig()).thenReturn(clusterConfig);\n    when(clusterConfig.isStateTransitionCancelEnabled()).thenReturn(true);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    \r\n    Map<String, Resource> resourceMap = new HashMap<>();\n    Resource resource = mock(Resource.class);\n    when(resource.getResourceName()).thenReturn(TEST_RESOURCE);\n    List<Partition> partitions = Collections.singletonList(partition);\n    when(resource.getPartitions()).thenReturn(partitions);\n    when(resource.getStateModelDefRef()).thenReturn(TaskConstants.STATE_MODEL_NAME);\n    resourceMap.put(TEST_RESOURCE, resource);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n\n    \r\n    BestPossibleStateOutput bestPossibleStateOutput = new BestPossibleStateOutput();\n    PartitionStateMap partitionStateMap = new PartitionStateMap(TEST_RESOURCE);\n    Map<Partition, Map<String, String>> stateMap = partitionStateMap.getStateMap();\n    Map<String, String> instanceStateMap = new HashMap<>();\n    instanceStateMap.put(TEST_INSTANCE, currentState);\n    stateMap.put(partition, instanceStateMap);\n    bestPossibleStateOutput.setState(TEST_RESOURCE, partition, instanceStateMap);\n\n    \r\n    event.addAttribute(AttributeName.BEST_POSSIBLE_STATE.name(), bestPossibleStateOutput);\n    process(event);\n    MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name());\n\n    return output.getMessages(TEST_RESOURCE, partition);\n  }\n","date":"2021-06-02 02:44:29","endLine":212,"groupId":"10283","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"generateMessages","params":"(StringcurrentState@StringfromState@StringtoState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2f/cfc3e59c6ec2b219f5bc9ca8f9bbaf35092d43.src","preCode":"  private List<Message> generateMessages(String currentState, String fromState, String toState)\n      throws Exception {\n    ClusterEvent event = new ClusterEvent(TEST_CLUSTER, ClusterEventType.Unknown);\n\n    \r\n    CurrentStateOutput currentStateOutput = mock(CurrentStateOutput.class);\n    Partition partition = mock(Partition.class);\n    when(partition.getPartitionName()).thenReturn(TEST_PARTITION);\n    when(currentStateOutput.getCurrentState(TEST_RESOURCE, partition, TEST_INSTANCE))\n        .thenReturn(currentState);\n\n    \r\n    Message pendingMessage = mock(Message.class);\n    when(pendingMessage.getFromState()).thenReturn(fromState);\n    when(pendingMessage.getToState()).thenReturn(toState);\n    when(currentStateOutput.getPendingMessage(TEST_RESOURCE, partition, TEST_INSTANCE))\n        .thenReturn(pendingMessage);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    \r\n    event.addAttribute(AttributeName.helixmanager.name(), mock(HelixManager.class));\n\n    StateModelDefinition stateModelDefinition = new StateModelDefinition.Builder(\"TestStateModel\")\n        .addState(\"ONLINE\", 1).addState(\"OFFLINE\")\n        .addState(\"DROPPED\").addState(\"ERROR\")\n        .initialState(\"OFFLINE\")\n        .addTransition(\"ERROR\", \"OFFLINE\", 1).addTransition(\"ONLINE\", \"OFFLINE\", 2)\n        .addTransition(\"OFFLINE\", \"DROPPED\", 3).addTransition(\"OFFLINE\", \"ONLINE\", 4)\n        .build();\n\n    \r\n    BaseControllerDataProvider cache = mock(BaseControllerDataProvider.class);\n    when(cache.getStateModelDef(TaskConstants.STATE_MODEL_NAME)).thenReturn(stateModelDefinition);\n    Map<String, LiveInstance> liveInstances = mock(Map.class);\n    LiveInstance mockLiveInstance = mock(LiveInstance.class);\n    when(mockLiveInstance.getInstanceName()).thenReturn(TEST_INSTANCE);\n    when(mockLiveInstance.getEphemeralOwner()).thenReturn(\"TEST\");\n    when(liveInstances.values()).thenReturn(Collections.singletonList(mockLiveInstance));\n    when(cache.getLiveInstances()).thenReturn(liveInstances);\n    ClusterConfig clusterConfig = mock(ClusterConfig.class);\n    when(cache.getClusterConfig()).thenReturn(clusterConfig);\n    when(clusterConfig.isStateTransitionCancelEnabled()).thenReturn(true);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    \r\n    Map<String, Resource> resourceMap = new HashMap<>();\n    Resource resource = mock(Resource.class);\n    when(resource.getResourceName()).thenReturn(TEST_RESOURCE);\n    List<Partition> partitions = Collections.singletonList(partition);\n    when(resource.getPartitions()).thenReturn(partitions);\n    when(resource.getStateModelDefRef()).thenReturn(TaskConstants.STATE_MODEL_NAME);\n    resourceMap.put(TEST_RESOURCE, resource);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n\n    \r\n    ResourcesStateMap resourcesStateMap = new ResourcesStateMap();\n    PartitionStateMap partitionStateMap = new PartitionStateMap(TEST_RESOURCE);\n    Map<Partition, Map<String, String>> stateMap = partitionStateMap.getStateMap();\n    Map<String, String> instanceStateMap = new HashMap<>();\n    instanceStateMap.put(TEST_INSTANCE, currentState);\n    stateMap.put(partition, instanceStateMap);\n    resourcesStateMap.setState(TEST_RESOURCE, partition, instanceStateMap);\n\n    \r\n    processEvent(event, resourcesStateMap);\n    MessageOutput output = event.getAttribute(AttributeName.MESSAGES_ALL.name());\n\n    return output.getMessages(TEST_RESOURCE, partition);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestCancellationMessageGeneration.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"17c52da9422fbde427eb5b1309ddeeda389c092c","commitMessage":"@@@Refactor/clean up code without logic change (#1760)\n\nThis commmit contains:\n1. Remove unused functions and logic\n2. Combine the Resource/Task message generation into one stage.  since they are both relying on best possible result.","date":"2021-06-02 02:44:29","modifiedFileCount":"11","status":"M","submitter":"Junkai Xue"}]
