[{"authorTime":"2018-05-12 03:11:09","codes":[{"authorDate":"2018-05-12 03:11:09","commitOrder":1,"curCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n\n    List<String> resources = accessor.getChildNames(externalViewsKey(keyBuilder));\n    for (String resource : resources) {\n      currentPropertyKeys.add(externalViewKey(keyBuilder, resource));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, ExternalView> cachedExternalViewMap = Maps.newHashMap();\n    for (String resource : _externalViewCache.keySet()) {\n      PropertyKey key = externalViewKey(keyBuilder, resource);\n      cachedKeys.add(key);\n      cachedExternalViewMap.put(key, _externalViewCache.get(resource));\n    }\n    cachedKeys.retainAll(currentPropertyKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, ExternalView> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedExternalViewMap);\n    Map<String, ExternalView> newExternalViewMap = Maps.newHashMap();\n    for (ExternalView externalView : updatedMap.values()) {\n      newExternalViewMap.put(externalView.getResourceName(), externalView);\n    }\n\n    _externalViewCache = new HashMap<>(newExternalViewMap);\n    _externalViewMap = new HashMap<>(newExternalViewMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\"Refresh \" + _externalViewMap.size() + \" ExternalViews for cluster \" + _clusterName\n        + \", took \" + (endTime - startTime) + \" ms\");\n  }\n","date":"2018-07-12 06:28:06","endLine":108,"groupId":"4706","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(HelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/94/c2b16f776c4393e085c36698813336aa52a995.src","preCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n\n    List<String> resources = accessor.getChildNames(externalViewsKey(keyBuilder));\n    for (String resource : resources) {\n      currentPropertyKeys.add(externalViewKey(keyBuilder, resource));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, ExternalView> cachedExternalViewMap = Maps.newHashMap();\n    for (String resource : _externalViewCache.keySet()) {\n      PropertyKey key = externalViewKey(keyBuilder, resource);\n      cachedKeys.add(key);\n      cachedExternalViewMap.put(key, _externalViewCache.get(resource));\n    }\n    cachedKeys.retainAll(currentPropertyKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, ExternalView> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedExternalViewMap);\n    Map<String, ExternalView> newExternalViewMap = Maps.newHashMap();\n    for (ExternalView externalView : updatedMap.values()) {\n      newExternalViewMap.put(externalView.getResourceName(), externalView);\n    }\n\n    _externalViewCache = new HashMap<>(newExternalViewMap);\n    _externalViewMap = new HashMap<>(newExternalViewMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\"Refresh \" + _externalViewMap.size() + \" ExternalViews for cluster \" + _clusterName\n        + \", took \" + (endTime - startTime) + \" ms\");\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/common/caches/ExternalViewCache.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2018-05-12 03:11:09","commitOrder":1,"curCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentIdealStateKeys = new HashSet<>();\n    for (String idealState : accessor.getChildNames(keyBuilder.idealStates())) {\n      currentIdealStateKeys.add(keyBuilder.idealStates(idealState));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, IdealState> cachedIdealStateMap = Maps.newHashMap();\n    for (String idealState : _idealStateCache.keySet()) {\n      cachedKeys.add(keyBuilder.idealStates(idealState));\n      cachedIdealStateMap\n          .put(keyBuilder.idealStates(idealState), _idealStateCache.get(idealState));\n    }\n    cachedKeys.retainAll(currentIdealStateKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentIdealStateKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, IdealState> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedIdealStateMap);\n    Map<String, IdealState> newIdealStateMap = Maps.newHashMap();\n    for (IdealState idealState : updatedMap.values()) {\n      newIdealStateMap.put(idealState.getResourceName(), idealState);\n    }\n\n    _idealStateCache = new HashMap<>(newIdealStateMap);\n    _idealStateMap = new HashMap<>(newIdealStateMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\n        \"Refresh \" + _idealStateMap.size() + \" idealStates for cluster \" + _clusterName + \", took \"\n            + (endTime - startTime) + \" ms\");\n  }\n","date":"2018-07-12 06:28:06","endLine":98,"groupId":"212","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"refresh","params":"(HelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/12/056e4185ece2c7cd57aeb83f354571c3f739f7.src","preCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentIdealStateKeys = new HashSet<>();\n    for (String idealState : accessor.getChildNames(keyBuilder.idealStates())) {\n      currentIdealStateKeys.add(keyBuilder.idealStates(idealState));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, IdealState> cachedIdealStateMap = Maps.newHashMap();\n    for (String idealState : _idealStateCache.keySet()) {\n      cachedKeys.add(keyBuilder.idealStates(idealState));\n      cachedIdealStateMap\n          .put(keyBuilder.idealStates(idealState), _idealStateCache.get(idealState));\n    }\n    cachedKeys.retainAll(currentIdealStateKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentIdealStateKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, IdealState> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedIdealStateMap);\n    Map<String, IdealState> newIdealStateMap = Maps.newHashMap();\n    for (IdealState idealState : updatedMap.values()) {\n      newIdealStateMap.put(idealState.getResourceName(), idealState);\n    }\n\n    _idealStateCache = new HashMap<>(newIdealStateMap);\n    _idealStateMap = new HashMap<>(newIdealStateMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\n        \"Refresh \" + _idealStateMap.size() + \" idealStates for cluster \" + _clusterName + \", took \"\n            + (endTime - startTime) + \" ms\");\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/common/caches/IdealStateCache.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"d02083e652797673e4826a45fc19896f610803c2","commitMessage":"@@@Change RoutingDataCache to use zk version based selective update when reading the ExternalViews and TargetExternalView.\n\nRB=1317410\nBUG=HELIX-929\nG=helix-reviewers\nA=jxue\n","date":"2018-07-12 06:28:06","modifiedFileCount":"10","status":"B","submitter":"Lei Xia"},{"authorTime":"2018-07-13 08:01:27","codes":[{"authorDate":"2018-05-12 03:11:09","commitOrder":2,"curCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n\n    List<String> resources = accessor.getChildNames(externalViewsKey(keyBuilder));\n    for (String resource : resources) {\n      currentPropertyKeys.add(externalViewKey(keyBuilder, resource));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, ExternalView> cachedExternalViewMap = Maps.newHashMap();\n    for (String resource : _externalViewCache.keySet()) {\n      PropertyKey key = externalViewKey(keyBuilder, resource);\n      cachedKeys.add(key);\n      cachedExternalViewMap.put(key, _externalViewCache.get(resource));\n    }\n    cachedKeys.retainAll(currentPropertyKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, ExternalView> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedExternalViewMap);\n    Map<String, ExternalView> newExternalViewMap = Maps.newHashMap();\n    for (ExternalView externalView : updatedMap.values()) {\n      newExternalViewMap.put(externalView.getResourceName(), externalView);\n    }\n\n    _externalViewCache = new HashMap<>(newExternalViewMap);\n    _externalViewMap = new HashMap<>(newExternalViewMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\"Refresh \" + _externalViewMap.size() + \" ExternalViews for cluster \" + _clusterName\n        + \", took \" + (endTime - startTime) + \" ms\");\n  }\n","date":"2018-07-12 06:28:06","endLine":108,"groupId":"4706","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(HelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/94/c2b16f776c4393e085c36698813336aa52a995.src","preCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n\n    List<String> resources = accessor.getChildNames(externalViewsKey(keyBuilder));\n    for (String resource : resources) {\n      currentPropertyKeys.add(externalViewKey(keyBuilder, resource));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, ExternalView> cachedExternalViewMap = Maps.newHashMap();\n    for (String resource : _externalViewCache.keySet()) {\n      PropertyKey key = externalViewKey(keyBuilder, resource);\n      cachedKeys.add(key);\n      cachedExternalViewMap.put(key, _externalViewCache.get(resource));\n    }\n    cachedKeys.retainAll(currentPropertyKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, ExternalView> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedExternalViewMap);\n    Map<String, ExternalView> newExternalViewMap = Maps.newHashMap();\n    for (ExternalView externalView : updatedMap.values()) {\n      newExternalViewMap.put(externalView.getResourceName(), externalView);\n    }\n\n    _externalViewCache = new HashMap<>(newExternalViewMap);\n    _externalViewMap = new HashMap<>(newExternalViewMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\"Refresh \" + _externalViewMap.size() + \" ExternalViews for cluster \" + _clusterName\n        + \", took \" + (endTime - startTime) + \" ms\");\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/common/caches/ExternalViewCache.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2018-07-13 08:01:27","commitOrder":2,"curCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentIdealStateKeys = new HashSet<>();\n    for (String idealState : accessor.getChildNames(keyBuilder.idealStates())) {\n      currentIdealStateKeys.add(keyBuilder.idealStates(idealState));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, IdealState> cachedIdealStateMap = Maps.newHashMap();\n    for (String idealState : _idealStateCache.keySet()) {\n      cachedKeys.add(keyBuilder.idealStates(idealState));\n      cachedIdealStateMap\n          .put(keyBuilder.idealStates(idealState), _idealStateCache.get(idealState));\n    }\n    cachedKeys.retainAll(currentIdealStateKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentIdealStateKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, IdealState> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedIdealStateMap);\n    Map<String, IdealState> newIdealStateMap = Maps.newHashMap();\n    for (IdealState idealState : updatedMap.values()) {\n      newIdealStateMap.put(idealState.getResourceName(), idealState);\n    }\n\n    _idealStateCache = new HashMap<>(newIdealStateMap);\n    _idealStateMap = new HashMap<>(newIdealStateMap);\n\n    long endTime = System.currentTimeMillis();\n    LogUtil.logInfo(LOG, getEventId(),\n        \"Refresh \" + _idealStateMap.size() + \" idealStates for cluster \" + _clusterName + \", took \"\n            + (endTime - startTime) + \" ms\");\n  }\n","date":"2018-07-13 08:01:27","endLine":99,"groupId":"212","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"refresh","params":"(HelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/99/de0bc5fc24e57c22f1751800a6eecca2576ba3.src","preCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentIdealStateKeys = new HashSet<>();\n    for (String idealState : accessor.getChildNames(keyBuilder.idealStates())) {\n      currentIdealStateKeys.add(keyBuilder.idealStates(idealState));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, IdealState> cachedIdealStateMap = Maps.newHashMap();\n    for (String idealState : _idealStateCache.keySet()) {\n      cachedKeys.add(keyBuilder.idealStates(idealState));\n      cachedIdealStateMap\n          .put(keyBuilder.idealStates(idealState), _idealStateCache.get(idealState));\n    }\n    cachedKeys.retainAll(currentIdealStateKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentIdealStateKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, IdealState> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedIdealStateMap);\n    Map<String, IdealState> newIdealStateMap = Maps.newHashMap();\n    for (IdealState idealState : updatedMap.values()) {\n      newIdealStateMap.put(idealState.getResourceName(), idealState);\n    }\n\n    _idealStateCache = new HashMap<>(newIdealStateMap);\n    _idealStateMap = new HashMap<>(newIdealStateMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\n        \"Refresh \" + _idealStateMap.size() + \" idealStates for cluster \" + _clusterName + \", took \"\n            + (endTime - startTime) + \" ms\");\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/common/caches/IdealStateCache.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"092b3f1097bf7d3a97d2308db0e9da510d1bcb4c","commitMessage":"@@@Support event differentiated logging\n\nExisting task pipeline log are combined with regular pipeline logs which make debugging hard. To have a event tied logs can benefit for future debugging purposes.\n","date":"2018-07-13 08:01:27","modifiedFileCount":"20","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2018-05-12 03:11:09","commitOrder":3,"curCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n\n    List<String> resources = accessor.getChildNames(externalViewsKey(keyBuilder));\n    for (String resource : resources) {\n      currentPropertyKeys.add(externalViewKey(keyBuilder, resource));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, ExternalView> cachedExternalViewMap = Maps.newHashMap();\n    for (String resource : _externalViewCache.keySet()) {\n      PropertyKey key = externalViewKey(keyBuilder, resource);\n      cachedKeys.add(key);\n      cachedExternalViewMap.put(key, _externalViewCache.get(resource));\n    }\n    cachedKeys.retainAll(currentPropertyKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, ExternalView> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedExternalViewMap);\n    Map<String, ExternalView> newExternalViewMap = Maps.newHashMap();\n    for (ExternalView externalView : updatedMap.values()) {\n      newExternalViewMap.put(externalView.getResourceName(), externalView);\n    }\n\n    _externalViewCache = new HashMap<>(newExternalViewMap);\n    _externalViewMap = new HashMap<>(newExternalViewMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\"Refresh \" + _externalViewMap.size() + \" ExternalViews for cluster \" + _clusterName\n        + \", took \" + (endTime - startTime) + \" ms\");\n  }\n","date":"2018-07-12 06:28:06","endLine":108,"groupId":"4706","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(HelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/94/c2b16f776c4393e085c36698813336aa52a995.src","preCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n\n    List<String> resources = accessor.getChildNames(externalViewsKey(keyBuilder));\n    for (String resource : resources) {\n      currentPropertyKeys.add(externalViewKey(keyBuilder, resource));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, ExternalView> cachedExternalViewMap = Maps.newHashMap();\n    for (String resource : _externalViewCache.keySet()) {\n      PropertyKey key = externalViewKey(keyBuilder, resource);\n      cachedKeys.add(key);\n      cachedExternalViewMap.put(key, _externalViewCache.get(resource));\n    }\n    cachedKeys.retainAll(currentPropertyKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, ExternalView> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedExternalViewMap);\n    Map<String, ExternalView> newExternalViewMap = Maps.newHashMap();\n    for (ExternalView externalView : updatedMap.values()) {\n      newExternalViewMap.put(externalView.getResourceName(), externalView);\n    }\n\n    _externalViewCache = new HashMap<>(newExternalViewMap);\n    _externalViewMap = new HashMap<>(newExternalViewMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\"Refresh \" + _externalViewMap.size() + \" ExternalViews for cluster \" + _clusterName\n        + \", took \" + (endTime - startTime) + \" ms\");\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/common/caches/ExternalViewCache.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2019-02-26 09:36:00","commitOrder":3,"curCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentIdealStateKeys = new HashSet<>();\n    for (String idealState : accessor.getChildNames(keyBuilder.idealStates())) {\n      currentIdealStateKeys.add(keyBuilder.idealStates(idealState));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, IdealState> cachedIdealStateMap = Maps.newHashMap();\n    for (String idealState : _idealStateCache.keySet()) {\n      cachedKeys.add(keyBuilder.idealStates(idealState));\n      cachedIdealStateMap\n          .put(keyBuilder.idealStates(idealState), _idealStateCache.get(idealState));\n    }\n    cachedKeys.retainAll(currentIdealStateKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentIdealStateKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, IdealState> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedIdealStateMap);\n    Map<String, IdealState> newIdealStateMap = Maps.newHashMap();\n    for (IdealState idealState : updatedMap.values()) {\n      newIdealStateMap.put(idealState.getResourceName(), idealState);\n    }\n\n    _idealStateCache = new HashMap<>(newIdealStateMap);\n    _idealStateMap = new HashMap<>(newIdealStateMap);\n\n    long endTime = System.currentTimeMillis();\n    LogUtil.logInfo(LOG, _controlContextProvider.getClusterEventId(),\n        \"Refresh \" + _idealStateMap.size() + \" idealStates for cluster \" + _clusterName + \", took \"\n            + (endTime - startTime) + \" ms\");\n  }\n","date":"2019-02-26 09:36:00","endLine":102,"groupId":"212","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"refresh","params":"(HelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/01/b16e44b53936609305f069e34f34e145e23f80.src","preCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentIdealStateKeys = new HashSet<>();\n    for (String idealState : accessor.getChildNames(keyBuilder.idealStates())) {\n      currentIdealStateKeys.add(keyBuilder.idealStates(idealState));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, IdealState> cachedIdealStateMap = Maps.newHashMap();\n    for (String idealState : _idealStateCache.keySet()) {\n      cachedKeys.add(keyBuilder.idealStates(idealState));\n      cachedIdealStateMap\n          .put(keyBuilder.idealStates(idealState), _idealStateCache.get(idealState));\n    }\n    cachedKeys.retainAll(currentIdealStateKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentIdealStateKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, IdealState> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedIdealStateMap);\n    Map<String, IdealState> newIdealStateMap = Maps.newHashMap();\n    for (IdealState idealState : updatedMap.values()) {\n      newIdealStateMap.put(idealState.getResourceName(), idealState);\n    }\n\n    _idealStateCache = new HashMap<>(newIdealStateMap);\n    _idealStateMap = new HashMap<>(newIdealStateMap);\n\n    long endTime = System.currentTimeMillis();\n    LogUtil.logInfo(LOG, getEventId(),\n        \"Refresh \" + _idealStateMap.size() + \" idealStates for cluster \" + _clusterName + \", took \"\n            + (endTime - startTime) + \" ms\");\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/common/caches/IdealStateCache.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2019-08-07 02:58:16","codes":[{"authorDate":"2019-08-07 02:58:16","commitOrder":4,"curCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n\n    List<String> resources = accessor.getChildNames(externalViewsKey(keyBuilder));\n    for (String resource : resources) {\n      currentPropertyKeys.add(externalViewKey(keyBuilder, resource));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, ExternalView> cachedExternalViewMap = Maps.newHashMap();\n    for (String resource : _externalViewCache.keySet()) {\n      PropertyKey key = externalViewKey(keyBuilder, resource);\n      cachedKeys.add(key);\n      cachedExternalViewMap.put(key, _externalViewCache.get(resource));\n    }\n    cachedKeys.retainAll(currentPropertyKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, ExternalView> updatedMap =\n        refreshProperties(accessor, reloadKeys, new ArrayList<>(cachedKeys),\n            cachedExternalViewMap, new HashSet<>());\n    Map<String, ExternalView> newExternalViewMap = Maps.newHashMap();\n    for (ExternalView externalView : updatedMap.values()) {\n      newExternalViewMap.put(externalView.getResourceName(), externalView);\n    }\n\n    _externalViewCache = new HashMap<>(newExternalViewMap);\n    _externalViewMap = new HashMap<>(newExternalViewMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\"Refresh \" + _externalViewMap.size() + \" ExternalViews for cluster \" + _clusterName\n        + \", took \" + (endTime - startTime) + \" ms\");\n  }\n","date":"2019-08-07 02:58:15","endLine":111,"groupId":"10689","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"refresh","params":"(HelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/49/be1e6757d09fd0d52c07269dd05f1bb6ee4364.src","preCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentPropertyKeys = new HashSet<>();\n\n    List<String> resources = accessor.getChildNames(externalViewsKey(keyBuilder));\n    for (String resource : resources) {\n      currentPropertyKeys.add(externalViewKey(keyBuilder, resource));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, ExternalView> cachedExternalViewMap = Maps.newHashMap();\n    for (String resource : _externalViewCache.keySet()) {\n      PropertyKey key = externalViewKey(keyBuilder, resource);\n      cachedKeys.add(key);\n      cachedExternalViewMap.put(key, _externalViewCache.get(resource));\n    }\n    cachedKeys.retainAll(currentPropertyKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentPropertyKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, ExternalView> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedExternalViewMap);\n    Map<String, ExternalView> newExternalViewMap = Maps.newHashMap();\n    for (ExternalView externalView : updatedMap.values()) {\n      newExternalViewMap.put(externalView.getResourceName(), externalView);\n    }\n\n    _externalViewCache = new HashMap<>(newExternalViewMap);\n    _externalViewMap = new HashMap<>(newExternalViewMap);\n\n    long endTime = System.currentTimeMillis();\n    LOG.info(\"Refresh \" + _externalViewMap.size() + \" ExternalViews for cluster \" + _clusterName\n        + \", took \" + (endTime - startTime) + \" ms\");\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/common/caches/ExternalViewCache.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2019-08-07 02:58:16","commitOrder":4,"curCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentIdealStateKeys = new HashSet<>();\n    for (String idealState : accessor.getChildNames(keyBuilder.idealStates())) {\n      currentIdealStateKeys.add(keyBuilder.idealStates(idealState));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, IdealState> cachedIdealStateMap = Maps.newHashMap();\n    for (String idealState : _idealStateCache.keySet()) {\n      cachedKeys.add(keyBuilder.idealStates(idealState));\n      cachedIdealStateMap\n          .put(keyBuilder.idealStates(idealState), _idealStateCache.get(idealState));\n    }\n    cachedKeys.retainAll(currentIdealStateKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentIdealStateKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, IdealState> updatedMap =\n        refreshProperties(accessor, reloadKeys, new ArrayList<>(cachedKeys),\n            cachedIdealStateMap, new HashSet<>());\n    Map<String, IdealState> newIdealStateMap = Maps.newHashMap();\n    for (IdealState idealState : updatedMap.values()) {\n      newIdealStateMap.put(idealState.getResourceName(), idealState);\n    }\n\n    _idealStateCache = new HashMap<>(newIdealStateMap);\n    _idealStateMap = new HashMap<>(newIdealStateMap);\n\n    long endTime = System.currentTimeMillis();\n    LogUtil.logInfo(LOG, _controlContextProvider.getClusterEventId(),\n        \"Refresh \" + _idealStateMap.size() + \" idealStates for cluster \" + _clusterName + \", took \"\n            + (endTime - startTime) + \" ms\");\n  }\n","date":"2019-08-07 02:58:15","endLine":102,"groupId":"10689","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"refresh","params":"(HelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0d/2bf96e126c4bde42e609268762b17076083805.src","preCode":"  public void refresh(HelixDataAccessor accessor) {\n    long startTime = System.currentTimeMillis();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    Set<PropertyKey> currentIdealStateKeys = new HashSet<>();\n    for (String idealState : accessor.getChildNames(keyBuilder.idealStates())) {\n      currentIdealStateKeys.add(keyBuilder.idealStates(idealState));\n    }\n\n    Set<PropertyKey> cachedKeys = new HashSet<>();\n    Map<PropertyKey, IdealState> cachedIdealStateMap = Maps.newHashMap();\n    for (String idealState : _idealStateCache.keySet()) {\n      cachedKeys.add(keyBuilder.idealStates(idealState));\n      cachedIdealStateMap\n          .put(keyBuilder.idealStates(idealState), _idealStateCache.get(idealState));\n    }\n    cachedKeys.retainAll(currentIdealStateKeys);\n\n    Set<PropertyKey> reloadKeys = new HashSet<>(currentIdealStateKeys);\n    reloadKeys.removeAll(cachedKeys);\n\n    Map<PropertyKey, IdealState> updatedMap =\n        refreshProperties(accessor, new LinkedList<>(reloadKeys), new ArrayList<>(cachedKeys),\n            cachedIdealStateMap);\n    Map<String, IdealState> newIdealStateMap = Maps.newHashMap();\n    for (IdealState idealState : updatedMap.values()) {\n      newIdealStateMap.put(idealState.getResourceName(), idealState);\n    }\n\n    _idealStateCache = new HashMap<>(newIdealStateMap);\n    _idealStateMap = new HashMap<>(newIdealStateMap);\n\n    long endTime = System.currentTimeMillis();\n    LogUtil.logInfo(LOG, _controlContextProvider.getClusterEventId(),\n        \"Refresh \" + _idealStateMap.size() + \" idealStates for cluster \" + _clusterName + \", took \"\n            + (endTime - startTime) + \" ms\");\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/common/caches/IdealStateCache.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"909f9621f22892238802417a32a6261ac9b8e6be","commitMessage":"@@@Fix RoutingTableProvider statePropagationLatency metric reporting bug (#365)\n\nIssue:\n\nCurrentStateCache updating snapshot would miss all the existing partitions that having state change.\n\nRoutingTableProvider callback on the main event thread. Time is not accounted in log.\n\nDescription:\nfix the bug by updating the snapshot with the correct reloadkeys.\n\nenhanced log to accout for user callback code separately.\n\nTests:\nmvn test passed.","date":"2019-08-07 02:58:15","modifiedFileCount":"7","status":"M","submitter":"kaisun2000"}]
