[{"authorTime":"2020-02-08 07:56:34","codes":[{"authorDate":"2020-02-08 07:56:34","commitOrder":1,"curCode":"  public void testSubscribeDataChange() throws Exception {\n    String existPath = \"/existPath\";\n    _zkClient.createPersistent(existPath);\n    final CountDownLatch deleteCondition = new CountDownLatch(1);\n    final IZkDataListener dataListener = new IZkDataListener() {\n      @Override\n      public void handleDataChange(String s, Object o) throws Exception {\n\n      }\n\n      @Override\n      public void handleDataDeleted(String path) throws Exception {\n        deleteCondition.countDown();\n        _zkClient.unsubscribeDataChanges(path, this);\n      }\n    };\n    _zkClient.subscribeDataChanges(existPath, dataListener);\n\n    Assert.assertEquals(_zkClient.numberOfListeners(), 1);\n    Map<String, List<String>> zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n    \r\n    _zkClient.delete(existPath);\n    deleteCondition.await();\n    zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n\n    Assert.assertEquals(_zkClient.numberOfListeners(), 0);\n  }\n","date":"2020-02-08 07:56:34","endLine":82,"groupId":"3848","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubscribeDataChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9d/247d497e40579c85a487e9dd4ef26e7761a899.src","preCode":"  public void testSubscribeDataChange() throws Exception {\n    String existPath = \"/existPath\";\n    _zkClient.createPersistent(existPath);\n    final CountDownLatch deleteCondition = new CountDownLatch(1);\n    final IZkDataListener dataListener = new IZkDataListener() {\n      @Override\n      public void handleDataChange(String s, Object o) throws Exception {\n\n      }\n\n      @Override\n      public void handleDataDeleted(String path) throws Exception {\n        deleteCondition.countDown();\n        _zkClient.unsubscribeDataChanges(path, this);\n      }\n    };\n    _zkClient.subscribeDataChanges(existPath, dataListener);\n\n    Assert.assertEquals(_zkClient.numberOfListeners(), 1);\n    Map<String, List<String>> zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n    \r\n    _zkClient.delete(existPath);\n    deleteCondition.await();\n    zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n\n    Assert.assertEquals(_zkClient.numberOfListeners(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKWatch.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2020-02-08 07:56:34","commitOrder":1,"curCode":"  public void testSubscribeDataChangeOnNonExistPath() throws Exception {\n    String nonExistPath = \"/nonExistPath\";\n    IZkDataListener dataListener = new IZkDataListener() {\n      @Override\n      public void handleDataChange(String s, Object o) throws Exception {\n\n      }\n\n      @Override\n      public void handleDataDeleted(String s) throws Exception {\n\n      }\n    };\n    _zkClient.subscribeDataChanges(nonExistPath, dataListener);\n    Map<String, List<String>> zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n    \r\n    _zkClient.unsubscribeDataChanges(nonExistPath, dataListener);\n    zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n  }\n","date":"2020-02-08 07:56:34","endLine":152,"groupId":"3850","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubscribeDataChangeOnNonExistPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9d/247d497e40579c85a487e9dd4ef26e7761a899.src","preCode":"  public void testSubscribeDataChangeOnNonExistPath() throws Exception {\n    String nonExistPath = \"/nonExistPath\";\n    IZkDataListener dataListener = new IZkDataListener() {\n      @Override\n      public void handleDataChange(String s, Object o) throws Exception {\n\n      }\n\n      @Override\n      public void handleDataDeleted(String s) throws Exception {\n\n      }\n    };\n    _zkClient.subscribeDataChanges(nonExistPath, dataListener);\n    Map<String, List<String>> zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n    \r\n    _zkClient.unsubscribeDataChanges(nonExistPath, dataListener);\n    zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKWatch.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"85f246a65348914eee4cd1097e492cf6e50d12af","commitMessage":"@@@Fix the watcher leakage issue (#688)\n\nFix the zk watcher leakage issue when znode is deleted\n    - Leverage the EventType (NodeDeleted) to verify if the path is deleted\n    - If it's deleted.  no need to re-install the watcher","date":"2020-02-08 07:56:34","modifiedFileCount":"2","status":"B","submitter":"Yi Wang"},{"authorTime":"2020-02-08 07:56:34","codes":[{"authorDate":"2020-02-13 02:53:01","commitOrder":2,"curCode":"  public void testSubscribeDataChange() throws Exception {\n    String existPath = \"/existPath\";\n    _zkClient.createPersistent(existPath);\n    final CountDownLatch deleteCondition = new CountDownLatch(1);\n    final IZkDataListener dataListener = new IZkDataListener() {\n      @Override\n      public void handleDataChange(String s, Object o) throws Exception {\n\n      }\n\n      @Override\n      public void handleDataDeleted(String path) throws Exception {\n        _zkClient.unsubscribeDataChanges(path, this);\n        deleteCondition.countDown();\n      }\n    };\n    _zkClient.subscribeDataChanges(existPath, dataListener);\n\n    Assert.assertEquals(_zkClient.numberOfListeners(), 1);\n    Map<String, List<String>> zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n    \r\n    _zkClient.delete(existPath);\n    deleteCondition.await();\n    zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n\n    Assert.assertEquals(_zkClient.numberOfListeners(), 0);\n  }\n","date":"2020-02-13 02:53:01","endLine":82,"groupId":"10221","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubscribeDataChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1b/6d54388f2d04ed6d78ade95ec39c998d317844.src","preCode":"  public void testSubscribeDataChange() throws Exception {\n    String existPath = \"/existPath\";\n    _zkClient.createPersistent(existPath);\n    final CountDownLatch deleteCondition = new CountDownLatch(1);\n    final IZkDataListener dataListener = new IZkDataListener() {\n      @Override\n      public void handleDataChange(String s, Object o) throws Exception {\n\n      }\n\n      @Override\n      public void handleDataDeleted(String path) throws Exception {\n        deleteCondition.countDown();\n        _zkClient.unsubscribeDataChanges(path, this);\n      }\n    };\n    _zkClient.subscribeDataChanges(existPath, dataListener);\n\n    Assert.assertEquals(_zkClient.numberOfListeners(), 1);\n    Map<String, List<String>> zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n    \r\n    _zkClient.delete(existPath);\n    deleteCondition.await();\n    zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n\n    Assert.assertEquals(_zkClient.numberOfListeners(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKWatch.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-02-08 07:56:34","commitOrder":2,"curCode":"  public void testSubscribeDataChangeOnNonExistPath() throws Exception {\n    String nonExistPath = \"/nonExistPath\";\n    IZkDataListener dataListener = new IZkDataListener() {\n      @Override\n      public void handleDataChange(String s, Object o) throws Exception {\n\n      }\n\n      @Override\n      public void handleDataDeleted(String s) throws Exception {\n\n      }\n    };\n    _zkClient.subscribeDataChanges(nonExistPath, dataListener);\n    Map<String, List<String>> zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n    \r\n    _zkClient.unsubscribeDataChanges(nonExistPath, dataListener);\n    zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n  }\n","date":"2020-02-08 07:56:34","endLine":152,"groupId":"10221","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubscribeDataChangeOnNonExistPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9d/247d497e40579c85a487e9dd4ef26e7761a899.src","preCode":"  public void testSubscribeDataChangeOnNonExistPath() throws Exception {\n    String nonExistPath = \"/nonExistPath\";\n    IZkDataListener dataListener = new IZkDataListener() {\n      @Override\n      public void handleDataChange(String s, Object o) throws Exception {\n\n      }\n\n      @Override\n      public void handleDataDeleted(String s) throws Exception {\n\n      }\n    };\n    _zkClient.subscribeDataChanges(nonExistPath, dataListener);\n    Map<String, List<String>> zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n    \r\n    _zkClient.unsubscribeDataChanges(nonExistPath, dataListener);\n    zkWatch = ZkTestHelper.getZkWatch(_zkClient);\n    Assert.assertEquals(zkWatch.get(\"dataWatches\").size(), 0);\n    Assert.assertEquals(zkWatch.get(\"existWatches\").size(), 1);\n    Assert.assertEquals(zkWatch.get(\"childWatches\").size(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKWatch.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"}],"commitId":"afc62ab7efe74342702451f074740674cf25eda0","commitMessage":"@@@Fix the flaky test (#749)\n\nFix the unstable TestZkWatch\n\nThe root cause of the instability is due to the incorrect condition notify time: it should notify other threads after zkClient finishes the unsubscribing the listener","date":"2020-02-13 02:53:01","modifiedFileCount":"1","status":"M","submitter":"Yi Wang"}]
