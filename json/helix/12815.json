[{"authorTime":"2014-05-23 02:08:01","codes":[{"authorDate":"2015-05-12 02:35:20","commitOrder":3,"curCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = HelixUtil.getStateModelDefinitionPath(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\"Operation.State Model directory exists:\" + stateModelPath +\n            \", remove and recreate.\");\n        _zkClient.deleteRecursive(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModel.getId()), stateModel);\n  }\n","date":"2015-05-13 04:43:30","endLine":744,"groupId":"342","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addStateModelDef","params":"(StringclusterName@StringstateModelDef@StateModelDefinitionstateModel@booleanrecreateIfExists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ec/f84f8e6c876b36dad9a19fbf3fb4f450365566.src","preCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = HelixUtil.getStateModelDefinitionPath(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\"Operation.State Model directory exists:\" + stateModelPath +\n            \", remove and recreate.\");\n        _zkClient.deleteRecursive(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModel.getId()), stateModel);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"B"},{"authorDate":"2014-05-23 02:08:01","commitOrder":3,"curCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster \" + clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursive(root);\n  }\n","date":"2014-05-23 02:08:01","endLine":756,"groupId":"342","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"dropCluster","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/2d61749a74281f739788469f46ad2621c0c845.src","preCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster \" + clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursive(root);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"NB"}],"commitId":"3b13ce4cca610c344b000568df2b599e1c4aaa93","commitMessage":"@@@[HELIX-592] addCluster should respect overwriteExisitng when adding stateModel Definations.\n","date":"2015-05-13 04:43:30","modifiedFileCount":"6","status":"M","submitter":"Lei Xia"},{"authorTime":"2014-05-23 02:08:01","codes":[{"authorDate":"2016-12-17 07:26:22","commitOrder":4,"curCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = HelixUtil.getStateModelDefinitionPath(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\"Operation.State Model directory exists:\" + stateModelPath +\n            \", remove and recreate.\");\n        _zkClient.deleteRecursive(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModelDef), stateModel);\n  }\n","date":"2016-12-17 07:26:22","endLine":767,"groupId":"342","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addStateModelDef","params":"(StringclusterName@StringstateModelDef@StateModelDefinitionstateModel@booleanrecreateIfExists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/fa2aefe4857a8abc8a55c4903bbd2b83ea5b1f.src","preCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = HelixUtil.getStateModelDefinitionPath(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\"Operation.State Model directory exists:\" + stateModelPath +\n            \", remove and recreate.\");\n        _zkClient.deleteRecursive(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModel.getId()), stateModel);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":745,"status":"M"},{"authorDate":"2014-05-23 02:08:01","commitOrder":4,"curCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster \" + clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursive(root);\n  }\n","date":"2014-05-23 02:08:01","endLine":756,"groupId":"342","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"dropCluster","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/2d61749a74281f739788469f46ad2621c0c845.src","preCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster \" + clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursive(root);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"N"}],"commitId":"4c3fc7f6613e04ba85b88f5acbd6a16044331847","commitMessage":"@@@[HELIX-649] Fix StateModelDef name is not consistent\n\nThe StateModelDef is not consistent as the user provided since it use the ZNRecord id of StateModel\n","date":"2016-12-17 07:26:22","modifiedFileCount":"1","status":"M","submitter":"Junkai Xue"},{"authorTime":"2014-05-23 02:08:01","codes":[{"authorDate":"2017-01-29 09:06:46","commitOrder":5,"curCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = PropertyPathBuilder.stateModelDef(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\"Operation.State Model directory exists:\" + stateModelPath +\n            \", remove and recreate.\");\n        _zkClient.deleteRecursive(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModelDef), stateModel);\n  }\n","date":"2017-02-02 12:19:43","endLine":791,"groupId":"342","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addStateModelDef","params":"(StringclusterName@StringstateModelDef@StateModelDefinitionstateModel@booleanrecreateIfExists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/aa3c632d5aebae092989252889183d32dfd23d.src","preCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = HelixUtil.getStateModelDefinitionPath(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\"Operation.State Model directory exists:\" + stateModelPath +\n            \", remove and recreate.\");\n        _zkClient.deleteRecursive(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModelDef), stateModel);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":769,"status":"M"},{"authorDate":"2014-05-23 02:08:01","commitOrder":5,"curCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster \" + clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursive(root);\n  }\n","date":"2014-05-23 02:08:01","endLine":756,"groupId":"342","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"dropCluster","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/2d61749a74281f739788469f46ad2621c0c845.src","preCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster \" + clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursive(root);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"N"}],"commitId":"1b3c5c286c3656c141e8449570bad63fc4b30a8f","commitMessage":"@@@Move HelixUtil.get*Path to PropertyPathBuilder\n","date":"2017-02-02 12:19:43","modifiedFileCount":"11","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-03-09 06:04:42","codes":[{"authorDate":"2018-03-09 06:04:42","commitOrder":6,"curCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = PropertyPathBuilder.stateModelDef(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\n            \"Operation.State Model directory exists:\" + stateModelPath + \", remove and recreate.\");\n        _zkClient.deleteRecursively(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModelDef), stateModel);\n  }\n","date":"2018-03-20 07:43:31","endLine":821,"groupId":"342","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addStateModelDef","params":"(StringclusterName@StringstateModelDef@StateModelDefinitionstateModel@booleanrecreateIfExists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9e/44797d679de8a9d95ac1456c338f2ba11541c0.src","preCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = PropertyPathBuilder.stateModelDef(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\n            \"Operation.State Model directory exists:\" + stateModelPath + \", remove and recreate.\");\n        _zkClient.deleteRecursive(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModelDef), stateModel);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":799,"status":"M"},{"authorDate":"2018-03-09 06:04:42","commitOrder":6,"curCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster \" + clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursively(root);\n  }\n","date":"2018-03-20 07:43:31","endLine":866,"groupId":"342","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"dropCluster","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9e/44797d679de8a9d95ac1456c338f2ba11541c0.src","preCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster \" + clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursive(root);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"M"}],"commitId":"0e849035379a04b079ac1274bb8aaab473df1572","commitMessage":"@@@[HELIX-679] consolidate semantics of recursively delete path in ZkClient\n","date":"2018-03-20 07:43:31","modifiedFileCount":"57","status":"M","submitter":"hrzhang"},{"authorTime":"2018-04-20 09:19:51","codes":[{"authorDate":"2018-04-20 09:19:51","commitOrder":7,"curCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    logger\n        .info(\"Add StateModelDef {} in cluster {} with StateModel {}.\", stateModelDef, clusterName,\n            stateModel == null ? \"NULL\" : stateModel.toString());\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = PropertyPathBuilder.stateModelDef(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\n            \"Operation.State Model directory exists:\" + stateModelPath + \", remove and recreate.\");\n        _zkClient.deleteRecursively(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModelDef), stateModel);\n  }\n","date":"2018-04-20 09:19:51","endLine":854,"groupId":"342","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addStateModelDef","params":"(StringclusterName@StringstateModelDef@StateModelDefinitionstateModel@booleanrecreateIfExists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/708e567f1eb033b6d41cf6dc98340befa6b83c.src","preCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = PropertyPathBuilder.stateModelDef(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\n            \"Operation.State Model directory exists:\" + stateModelPath + \", remove and recreate.\");\n        _zkClient.deleteRecursively(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModelDef), stateModel);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":829,"status":"M"},{"authorDate":"2018-04-20 09:19:51","commitOrder":7,"curCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster {}.\", clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursively(root);\n  }\n","date":"2018-04-20 09:19:51","endLine":900,"groupId":"342","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"dropCluster","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/708e567f1eb033b6d41cf6dc98340befa6b83c.src","preCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster \" + clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursively(root);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":883,"status":"M"}],"commitId":"a6bdb3c2252a11a51939e1e06083a24ccf5a2ac2","commitMessage":"@@@Add logs for RoutingTableProvider and HelixAdmin\n","date":"2018-04-20 09:19:51","modifiedFileCount":"1","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-03-13 00:44:38","codes":[{"authorDate":"2020-03-13 00:44:38","commitOrder":8,"curCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    logger\n        .info(\"Add StateModelDef {} in cluster {} with StateModel {}.\", stateModelDef, clusterName,\n            stateModel == null ? \"NULL\" : stateModel.toString());\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = PropertyPathBuilder.stateModelDef(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\n            \"Operation.State Model directory exists:\" + stateModelPath + \", remove and recreate.\");\n        _zkClient.deleteRecursively(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModelDef), stateModel);\n  }\n","date":"2020-04-09 08:23:30","endLine":1087,"groupId":"12815","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addStateModelDef","params":"(StringclusterName@StringstateModelDef@StateModelDefinitionstateModel@booleanrecreateIfExists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/eaed8be08f73a58f86cc95cf521969f43a962f.src","preCode":"  public void addStateModelDef(String clusterName, String stateModelDef,\n      StateModelDefinition stateModel, boolean recreateIfExists) {\n    logger\n        .info(\"Add StateModelDef {} in cluster {} with StateModel {}.\", stateModelDef, clusterName,\n            stateModel == null ? \"NULL\" : stateModel.toString());\n    if (!ZKUtil.isClusterSetup(clusterName, _zkClient)) {\n      throw new HelixException(\"cluster \" + clusterName + \" is not setup yet\");\n    }\n    String stateModelDefPath = PropertyPathBuilder.stateModelDef(clusterName);\n    String stateModelPath = stateModelDefPath + \"/\" + stateModelDef;\n    if (_zkClient.exists(stateModelPath)) {\n      if (recreateIfExists) {\n        logger.info(\n            \"Operation.State Model directory exists:\" + stateModelPath + \", remove and recreate.\");\n        _zkClient.deleteRecursively(stateModelPath);\n      } else {\n        logger.info(\"Skip the operation. State Model directory exists:\" + stateModelPath);\n        return;\n      }\n    }\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(stateModelDef), stateModel);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1062,"status":"M"},{"authorDate":"2020-03-13 00:44:38","commitOrder":8,"curCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster {}.\", clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursively(root);\n  }\n","date":"2020-04-09 08:23:30","endLine":1159,"groupId":"12815","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"dropCluster","params":"(StringclusterName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/eaed8be08f73a58f86cc95cf521969f43a962f.src","preCode":"  public void dropCluster(String clusterName) {\n    logger.info(\"Deleting cluster {}.\", clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    String root = \"/\" + clusterName;\n    if (accessor.getChildNames(keyBuilder.liveInstances()).size() > 0) {\n      throw new HelixException(\n          \"There are still live instances in the cluster, shut them down first.\");\n    }\n\n    if (accessor.getProperty(keyBuilder.controllerLeader()) != null) {\n      throw new HelixException(\"There are still LEADER in the cluster, shut them down first.\");\n    }\n\n    _zkClient.deleteRecursively(root);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1142,"status":"M"}],"commitId":"289085f1ce7d2d9665447e9b114c15645f618937","commitMessage":"@@@Make ZKHelixAdmin and ZKHelixManager Realm-aware (#846)\n\nTo make Helix Java APIs realm-aware.  we need to make both ZKHelixAdmin and ZKHelixManager realm-aware. This commit adds a Builder to set client config and connection config for building realm-aware ZkClients underneath.","date":"2020-04-09 08:23:30","modifiedFileCount":"14","status":"M","submitter":"Huizhi Lu"}]
