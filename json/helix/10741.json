[{"authorTime":"2019-03-29 03:30:09","codes":[{"authorDate":"2019-03-29 03:30:09","commitOrder":1,"curCode":"  private static void reportSubmissionToScheduleDelay(BaseControllerDataProvider dataProvider,\n      final ClusterStatusMonitor clusterStatusMonitor, final WorkflowConfig workflowConfig,\n      final JobConfig jobConfig, final long currentTimestamp) {\n    AbstractBaseStage.asyncExecute(dataProvider.getAsyncTasksThreadPool(), new Callable<Object>() {\n      @Override\n      public Object call() {\n        \r\n        JobMonitor jobMonitor = clusterStatusMonitor\n            .getJobMonitor(TaskAssignmentCalculator.getQuotaType(workflowConfig, jobConfig));\n        if (jobMonitor == null) {\n          return null;\n        }\n\n        \r\n        long submissionToStartDelay = currentTimestamp - jobConfig.getStat().getCreationTime();\n        jobMonitor.updateSubmissionToScheduleDelayGauge(submissionToStartDelay);\n        return null;\n      }\n    });\n  }\n","date":"2019-03-29 03:30:14","endLine":1277,"groupId":"5190","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reportSubmissionToScheduleDelay","params":"(BaseControllerDataProviderdataProvider@finalClusterStatusMonitorclusterStatusMonitor@finalWorkflowConfigworkflowConfig@finalJobConfigjobConfig@finallongcurrentTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4d/e811251ef6b5177e22da8cc84b42e7deb1075b.src","preCode":"  private static void reportSubmissionToScheduleDelay(BaseControllerDataProvider dataProvider,\n      final ClusterStatusMonitor clusterStatusMonitor, final WorkflowConfig workflowConfig,\n      final JobConfig jobConfig, final long currentTimestamp) {\n    AbstractBaseStage.asyncExecute(dataProvider.getAsyncTasksThreadPool(), new Callable<Object>() {\n      @Override\n      public Object call() {\n        \r\n        JobMonitor jobMonitor = clusterStatusMonitor\n            .getJobMonitor(TaskAssignmentCalculator.getQuotaType(workflowConfig, jobConfig));\n        if (jobMonitor == null) {\n          return null;\n        }\n\n        \r\n        long submissionToStartDelay = currentTimestamp - jobConfig.getStat().getCreationTime();\n        jobMonitor.updateSubmissionToScheduleDelayGauge(submissionToStartDelay);\n        return null;\n      }\n    });\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1258,"status":"B"},{"authorDate":"2019-03-29 03:30:09","commitOrder":1,"curCode":"  private static void reportControllerInducedDelay(BaseControllerDataProvider dataProvider,\n      final ClusterStatusMonitor clusterStatusMonitor, final WorkflowConfig workflowConfig,\n      final JobConfig jobConfig, final long currentTimestamp) {\n    AbstractBaseStage.asyncExecute(dataProvider.getAsyncTasksThreadPool(), new Callable<Object>() {\n      @Override\n      public Object call() {\n        \r\n        JobMonitor jobMonitor = clusterStatusMonitor\n            .getJobMonitor(TaskAssignmentCalculator.getQuotaType(workflowConfig, jobConfig));\n        if (jobMonitor == null) {\n          return null;\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        String firstTask = jobConfig.getTaskConfigMap().keySet().iterator().next();\n        if (jobConfig.getTaskConfig(firstTask).getConfigMap().containsKey(TASK_LATENCY_TAG)) {\n          long taskDuration =\n              Long.valueOf(jobConfig.getTaskConfig(firstTask).getConfigMap().get(TASK_LATENCY_TAG));\n          long controllerInducedDelay =\n              currentTimestamp - jobConfig.getStat().getCreationTime() - taskDuration;\n          jobMonitor.updateControllerInducedDelayGauge(controllerInducedDelay);\n        }\n        return null;\n      }\n    });\n  }\n","date":"2019-03-29 03:30:14","endLine":1318,"groupId":"5190","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reportControllerInducedDelay","params":"(BaseControllerDataProviderdataProvider@finalClusterStatusMonitorclusterStatusMonitor@finalWorkflowConfigworkflowConfig@finalJobConfigjobConfig@finallongcurrentTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4d/e811251ef6b5177e22da8cc84b42e7deb1075b.src","preCode":"  private static void reportControllerInducedDelay(BaseControllerDataProvider dataProvider,\n      final ClusterStatusMonitor clusterStatusMonitor, final WorkflowConfig workflowConfig,\n      final JobConfig jobConfig, final long currentTimestamp) {\n    AbstractBaseStage.asyncExecute(dataProvider.getAsyncTasksThreadPool(), new Callable<Object>() {\n      @Override\n      public Object call() {\n        \r\n        JobMonitor jobMonitor = clusterStatusMonitor\n            .getJobMonitor(TaskAssignmentCalculator.getQuotaType(workflowConfig, jobConfig));\n        if (jobMonitor == null) {\n          return null;\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        String firstTask = jobConfig.getTaskConfigMap().keySet().iterator().next();\n        if (jobConfig.getTaskConfig(firstTask).getConfigMap().containsKey(TASK_LATENCY_TAG)) {\n          long taskDuration =\n              Long.valueOf(jobConfig.getTaskConfig(firstTask).getConfigMap().get(TASK_LATENCY_TAG));\n          long controllerInducedDelay =\n              currentTimestamp - jobConfig.getStat().getCreationTime() - taskDuration;\n          jobMonitor.updateControllerInducedDelayGauge(controllerInducedDelay);\n        }\n        return null;\n      }\n    });\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1288,"status":"B"}],"commitId":"8ba4c9c19981fffe3c958c6851e2b8b8bf90bfbb","commitMessage":"@@@TASK2.0: Add performance metrics to JobMonitor\n\n    We want to add more metrics to Task Framework so that the user could understand what's going on in case of a slowdown.  or get a general sense of how fast the workload is moving.\n    Changelist:\n    1. Add SubmissionToProcessDelay\n    2. Add SubmissionToScheduleDelay\n    3. Add ControllerInducedDelay (for testing)\n    4. Add JobLatencyGauge\n    5. Change regular metrics to Dynamic metrics in JobMonitor\n    6. Add an integration test: TestTaskPerformanceMetrics\n","date":"2019-03-29 03:30:14","modifiedFileCount":"6","status":"B","submitter":"Hunter Lee"},{"authorTime":"2019-03-30 03:08:07","codes":[{"authorDate":"2019-03-30 03:08:07","commitOrder":2,"curCode":"  private static void reportSubmissionToScheduleDelay(BaseControllerDataProvider dataProvider,\n      final ClusterStatusMonitor clusterStatusMonitor, final WorkflowConfig workflowConfig,\n      final JobConfig jobConfig, final long currentTimestamp) {\n    AbstractBaseStage.asyncExecute(dataProvider.getAsyncTasksThreadPool(), () -> {\n      \r\n      JobMonitor jobMonitor = clusterStatusMonitor\n          .getJobMonitor(TaskAssignmentCalculator.getQuotaType(workflowConfig, jobConfig));\n      if (jobMonitor == null) {\n        return null;\n      }\n\n      \r\n      long submissionToStartDelay = currentTimestamp - jobConfig.getStat().getCreationTime();\n      jobMonitor.updateSubmissionToScheduleDelayGauge(submissionToStartDelay);\n      return null;\n    });\n  }\n","date":"2019-05-25 09:19:21","endLine":1270,"groupId":"10741","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reportSubmissionToScheduleDelay","params":"(BaseControllerDataProviderdataProvider@finalClusterStatusMonitorclusterStatusMonitor@finalWorkflowConfigworkflowConfig@finalJobConfigjobConfig@finallongcurrentTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/69/8730e1d40096a4222e8c8152f25453e4c11790.src","preCode":"  private static void reportSubmissionToScheduleDelay(BaseControllerDataProvider dataProvider,\n      final ClusterStatusMonitor clusterStatusMonitor, final WorkflowConfig workflowConfig,\n      final JobConfig jobConfig, final long currentTimestamp) {\n    AbstractBaseStage.asyncExecute(dataProvider.getAsyncTasksThreadPool(), new Callable<Object>() {\n      @Override\n      public Object call() {\n        \r\n        JobMonitor jobMonitor = clusterStatusMonitor\n            .getJobMonitor(TaskAssignmentCalculator.getQuotaType(workflowConfig, jobConfig));\n        if (jobMonitor == null) {\n          return null;\n        }\n\n        \r\n        long submissionToStartDelay = currentTimestamp - jobConfig.getStat().getCreationTime();\n        jobMonitor.updateSubmissionToScheduleDelayGauge(submissionToStartDelay);\n        return null;\n      }\n    });\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1254,"status":"M"},{"authorDate":"2019-03-30 03:08:07","commitOrder":2,"curCode":"  private static void reportControllerInducedDelay(BaseControllerDataProvider dataProvider,\n      final ClusterStatusMonitor clusterStatusMonitor, final WorkflowConfig workflowConfig,\n      final JobConfig jobConfig, final long currentTimestamp) {\n    AbstractBaseStage.asyncExecute(dataProvider.getAsyncTasksThreadPool(), () -> {\n      \r\n      JobMonitor jobMonitor = clusterStatusMonitor\n          .getJobMonitor(TaskAssignmentCalculator.getQuotaType(workflowConfig, jobConfig));\n      if (jobMonitor == null) {\n        return null;\n      }\n\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      String firstTask = jobConfig.getTaskConfigMap().keySet().iterator().next();\n      if (jobConfig.getTaskConfig(firstTask).getConfigMap().containsKey(TASK_LATENCY_TAG)) {\n        long taskDuration =\n            Long.valueOf(jobConfig.getTaskConfig(firstTask).getConfigMap().get(TASK_LATENCY_TAG));\n        long controllerInducedDelay =\n            currentTimestamp - jobConfig.getStat().getCreationTime() - taskDuration;\n        jobMonitor.updateControllerInducedDelayGauge(controllerInducedDelay);\n      }\n      return null;\n    });\n  }\n","date":"2019-05-25 09:19:21","endLine":1308,"groupId":"10741","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reportControllerInducedDelay","params":"(BaseControllerDataProviderdataProvider@finalClusterStatusMonitorclusterStatusMonitor@finalWorkflowConfigworkflowConfig@finalJobConfigjobConfig@finallongcurrentTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/69/8730e1d40096a4222e8c8152f25453e4c11790.src","preCode":"  private static void reportControllerInducedDelay(BaseControllerDataProvider dataProvider,\n      final ClusterStatusMonitor clusterStatusMonitor, final WorkflowConfig workflowConfig,\n      final JobConfig jobConfig, final long currentTimestamp) {\n    AbstractBaseStage.asyncExecute(dataProvider.getAsyncTasksThreadPool(), new Callable<Object>() {\n      @Override\n      public Object call() {\n        \r\n        JobMonitor jobMonitor = clusterStatusMonitor\n            .getJobMonitor(TaskAssignmentCalculator.getQuotaType(workflowConfig, jobConfig));\n        if (jobMonitor == null) {\n          return null;\n        }\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        String firstTask = jobConfig.getTaskConfigMap().keySet().iterator().next();\n        if (jobConfig.getTaskConfig(firstTask).getConfigMap().containsKey(TASK_LATENCY_TAG)) {\n          long taskDuration =\n              Long.valueOf(jobConfig.getTaskConfig(firstTask).getConfigMap().get(TASK_LATENCY_TAG));\n          long controllerInducedDelay =\n              currentTimestamp - jobConfig.getStat().getCreationTime() - taskDuration;\n          jobMonitor.updateControllerInducedDelayGauge(controllerInducedDelay);\n        }\n        return null;\n      }\n    });\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1281,"status":"M"}],"commitId":"a8e2cf7b76a802a5b005d32082699d4c9e39875a","commitMessage":"@@@Task Framework code style change\n\nThis diff includes style changes using Java 8 features.\n\nRB=1613441\nBUG=HELIX-1742\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"6","status":"M","submitter":"Hunter Lee"}]
