[{"authorTime":"2016-09-10 04:31:14","codes":[{"authorDate":"2016-09-10 04:31:14","commitOrder":2,"curCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Thread.sleep(500);\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    _participants[0].syncStop();\n\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    Thread.sleep(2000);\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2017-02-09 01:53:22","endLine":119,"groupId":"5182","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/2ef1b2e0613ee2797793a8d247da1bb887ddea.src","preCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Thread.sleep(500);\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    _participants[0].syncStop();\n\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    Thread.sleep(2000);\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"MB"},{"authorDate":"2016-09-10 04:31:14","commitOrder":2,"curCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistAssignment(true);\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Boolean result = ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n\n    idealState = _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2017-02-09 01:53:22","endLine":159,"groupId":"5183","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/2ef1b2e0613ee2797793a8d247da1bb887ddea.src","preCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistAssignment(true);\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Boolean result = ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n\n    idealState = _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"MB"}],"commitId":"8c58cf34df1c72b58609f75b78d0b14a3b219fc3","commitMessage":"@@@Persist assignment map using specific format for MasterSlave resources (This is a short-term solution.  we should get rid of this asap).\n","date":"2017-02-09 01:53:22","modifiedFileCount":"2","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-09-13 07:42:17","codes":[{"authorDate":"2016-09-10 04:31:14","commitOrder":3,"curCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Thread.sleep(500);\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    _participants[0].syncStop();\n\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    Thread.sleep(2000);\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2017-02-09 01:53:22","endLine":119,"groupId":"5182","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/2ef1b2e0613ee2797793a8d247da1bb887ddea.src","preCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Thread.sleep(500);\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    _participants[0].syncStop();\n\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    Thread.sleep(2000);\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2016-09-13 07:42:17","commitOrder":3,"curCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Boolean result = ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n\n    idealState = _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2017-02-09 01:53:43","endLine":155,"groupId":"5183","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/04/74a106bd6abf86ef118ed6102df904a35769cf.src","preCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistAssignment(true);\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Boolean result = ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n\n    idealState = _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"b0d1122841be3bd09276a546cfa3c5433ffefea9","commitMessage":"@@@New DelayedAutoRebalancer featured with delayed partition movements during rebalancing.\n","date":"2017-02-09 01:53:43","modifiedFileCount":"19","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-05-24 04:58:24","codes":[{"authorDate":"2017-05-24 04:58:24","commitOrder":4,"curCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2017-05-24 04:58:24","endLine":117,"groupId":"4278","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2a/9dc6958d532b7d641725ea45b326940de872a1.src","preCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Thread.sleep(500);\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    _participants[0].syncStop();\n\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    Thread.sleep(2000);\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2017-05-24 04:58:24","commitOrder":4,"curCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    idealState = _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2017-05-24 04:58:24","endLine":159,"groupId":"1713","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2a/9dc6958d532b7d641725ea45b326940de872a1.src","preCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb))).build();\n    Assert.assertTrue(verifier.verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Boolean result = ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n\n    idealState = _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"8ba068e7b78aedf4743f2da57670384534d1d4f8","commitMessage":"@@@Allow user to enable persisting preference list and best possible state map into IdealState in full-auto mode.\n","date":"2017-05-24 04:58:24","modifiedFileCount":"5","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":5,"curCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2018-07-14 02:20:49","endLine":115,"groupId":"4278","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/9ce0ef1977a9ad6bb04e42d1f45fa02c148c4e.src","preCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":5,"curCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    idealState = _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2018-07-14 02:20:49","endLine":157,"groupId":"1713","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/9ce0ef1977a9ad6bb04e42d1f45fa02c148c4e.src","preCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _setupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _setupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    idealState = _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _setupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":6,"curCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2018-07-14 06:55:35","endLine":112,"groupId":"4278","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7d/eac3d1d4cb73b7a1501e78a591ee533743eb72.src","preCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":6,"curCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    idealState = _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2018-07-14 06:55:35","endLine":154,"groupId":"1713","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7d/eac3d1d4cb73b7a1501e78a591ee533743eb72.src","preCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verify());\n\n    idealState = _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":7,"curCode":"  public void testDisablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2019-05-25 09:19:21","endLine":116,"groupId":"1712","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6f/72748fa7e4e22b9c156114ce4c6e4946c05bfe.src","preCode":"  public void testDisablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":7,"curCode":"  public void testEnablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    idealState = _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2019-05-25 09:19:21","endLine":159,"groupId":"1713","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6f/72748fa7e4e22b9c156114ce4c6e4946c05bfe.src","preCode":"  public void testEnablePersist(RebalanceMode rebalanceMode)\n      throws Exception {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<String>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<String>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<String>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    idealState = _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<String>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-09-23 05:30:30","codes":[{"authorDate":"2020-09-23 05:30:30","commitOrder":8,"curCode":"  public void testDisablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name(),\n        rebalanceMode.equals(RebalanceMode.FULL_AUTO) ? CrushEdRebalanceStrategy.class.getName()\n            : RebalanceStrategy.DEFAULT_REBALANCE_STRATEGY);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2020-09-23 05:30:30","endLine":121,"groupId":"1712","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/03/cf1942f8746927c404c0e7827efb80ca916ee3.src","preCode":"  public void testDisablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-09-23 05:30:30","commitOrder":8,"curCode":"  public void testEnablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name(),\n        rebalanceMode.equals(RebalanceMode.FULL_AUTO) ? CrushEdRebalanceStrategy.class.getName()\n            : RebalanceStrategy.DEFAULT_REBALANCE_STRATEGY);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    idealState = _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2020-09-23 05:30:30","endLine":166,"groupId":"1713","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/03/cf1942f8746927c404c0e7827efb80ca916ee3.src","preCode":"  public void testEnablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name());\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    idealState = _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"a28a31ebacadc5a6af7afd5e5ea06e9ecc6ce53b","commitMessage":"@@@Use the DelayedAutoRebalancer as the default rebalancer. (#1360)\n\nIf no rebalancer class name is specified.  use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever.  since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache.  it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration.  then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nIf the client application code is using BestPossibleExternalViewVerifier with AutoRebalancer and AutoRebalanceStrategy.  then to avoid the problem about this change.  please do either of the following 2 changes.\n- Explicitly configure the AutoRebalancer class in the resource IdealState.\n- Change to use StrictMatchExternalViewVerifier. Note that using this verifier requires PERSIST_BEST_POSSIBLE_ASSIGNMENT to be true in the cluster config.","date":"2020-09-23 05:30:30","modifiedFileCount":"17","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2020-10-08 07:58:42","commitOrder":9,"curCode":"  public void testDisablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name(),\n        rebalanceMode.equals(RebalanceMode.FULL_AUTO) ? CrushEdRebalanceStrategy.class.getName()\n            : RebalanceStrategy.DEFAULT_REBALANCE_STRATEGY);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setResources(new HashSet<>(Collections.singleton(testDb)))\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME);\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2020-10-08 07:58:42","endLine":123,"groupId":"10434","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testDisablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/4b89cc469d59ac96cfa09f9a81b95281e3399d.src","preCode":"  public void testDisablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB2-\" + rebalanceMode.name();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name(),\n        rebalanceMode.equals(RebalanceMode.FULL_AUTO) ? CrushEdRebalanceStrategy.class.getName()\n            : RebalanceStrategy.DEFAULT_REBALANCE_STRATEGY);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistDisabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-10-08 07:58:42","commitOrder":9,"curCode":"  public void testEnablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name(),\n        rebalanceMode.equals(RebalanceMode.FULL_AUTO) ? CrushEdRebalanceStrategy.class.getName()\n            : RebalanceStrategy.DEFAULT_REBALANCE_STRATEGY);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setResources(new HashSet<>(Collections.singleton(testDb)))\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME);\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    idealState = _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","date":"2020-10-08 07:58:42","endLine":169,"groupId":"10434","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testEnablePersist","params":"(RebalanceModerebalanceMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/4b89cc469d59ac96cfa09f9a81b95281e3399d.src","preCode":"  public void testEnablePersist(RebalanceMode rebalanceMode) {\n    String testDb = \"TestDB1-\" + rebalanceMode.name();\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n        BuiltInStateModelDefinitions.LeaderStandby.name(), rebalanceMode.name(),\n        rebalanceMode.equals(RebalanceMode.FULL_AUTO) ? CrushEdRebalanceStrategy.class.getName()\n            : RebalanceStrategy.DEFAULT_REBALANCE_STRATEGY);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, testDb, 3);\n\n    BestPossibleExternalViewVerifier.Builder verifierBuilder =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setResources(new HashSet<>(Collections.singleton(testDb)));\n\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, new HashSet<>());\n\n    \r\n    _participants[0].syncStop();\n\n    Set<String> liveInstances = new HashSet<>(_instanceNames);\n    liveInstances.remove(_participants[0].getInstanceName());\n    verifierBuilder.setExpectLiveInstances(liveInstances);\n    Assert.assertTrue(verifierBuilder.build().verifyByPolling());\n\n    idealState = _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, testDb);\n    \r\n\n    Set<String> excludedInstances = new HashSet<>();\n    excludedInstances.add(_participants[0].getInstanceName());\n    verifyAssignmentInIdealStateWithPersistEnabled(idealState, excludedInstances);\n\n    \r\n    _gSetupTool.getClusterManagementTool().dropResource(CLUSTER_NAME, testDb);\n    _participants[0] =\n        new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _participants[0].getInstanceName());\n    _participants[0].syncStart();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"}]
