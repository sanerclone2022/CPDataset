[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer()\n  {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++)\n    {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++)\n    {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++)\n    {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try\n    {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try\n    {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\",\n                                                              \"session_1\",\n                                                              \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed =\n        accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":181,"groupId":"4589","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bf/85bb2b8b689c4bffc1d5f934ad682e5703690f.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer()\n  {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++)\n    {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++)\n    {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++)\n    {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try\n    {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try\n    {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\",\n                                                              \"session_1\",\n                                                              \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed =\n        accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer()\n  {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++)\n    {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++)\n    {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++)\n    {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try\n    {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try\n    {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n\r\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed =\n        accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"),\n                                                              idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed =\n        accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"),\n                                                              idealState);\n    Assert.assertTrue(succeed);\n    record =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 900; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed =\n        accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"),\n                                                                 idealState);\n    Assert.assertFalse(succeed);\n    recordNew =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2012-10-25 07:14:36","endLine":327,"groupId":"4589","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordStreamingSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bf/85bb2b8b689c4bffc1d5f934ad682e5703690f.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer()\n  {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++)\n    {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++)\n    {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++)\n    {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try\n    {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try\n    {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n\r\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed =\n        accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"),\n                                                              idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed =\n        accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"),\n                                                              idealState);\n    Assert.assertTrue(succeed);\n    record =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 900; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed =\n        accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"),\n                                                                 idealState);\n    Assert.assertFalse(succeed);\n    recordNew =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-08-16 07:21:52","codes":[{"authorDate":"2013-08-16 07:21:52","commitOrder":2,"curCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer()\n  {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++)\n    {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++)\n    {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++)\n    {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try\n    {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try\n    {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\",\n                                                              \"session_1\",\n                                                              \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed =\n        accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-16 07:21:52","endLine":186,"groupId":"999","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/8a70576986626275b36453ad5677f26547ac4f.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer()\n  {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++)\n    {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++)\n    {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++)\n    {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try\n    {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try\n    {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\",\n                                                              \"session_1\",\n                                                              \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed =\n        accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2013-08-16 07:21:52","commitOrder":2,"curCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer()\n  {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++)\n    {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++)\n    {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++)\n    {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try\n    {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try\n    {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n\r\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed =\n        accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"),\n                                                              idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed =\n        accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"),\n                                                              idealState);\n    Assert.assertTrue(succeed);\n    record =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 900; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed =\n        accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"),\n                                                                 idealState);\n    Assert.assertFalse(succeed);\n    recordNew =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-08-16 07:21:52","endLine":332,"groupId":"1000","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordStreamingSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/8a70576986626275b36453ad5677f26547ac4f.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer()\n  {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++)\n    {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++)\n    {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++)\n    {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try\n    {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try\n    {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    }\n    catch (HelixException e)\n    {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n\r\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed =\n        accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"),\n                                                              idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed =\n        accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"),\n                                                              idealState);\n    Assert.assertTrue(succeed);\n    record =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setIdealStateMode(\"AUTO\");\n    idealState.setNumPartitions(10);\n\n    for (int i = 900; i < 1024; i++)\n    {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed =\n        accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"),\n                                                                 idealState);\n    Assert.assertFalse(succeed);\n    recordNew =\n        accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"13d19e914e7deec29c5cd665e75df12eafbce1b1","commitMessage":"@@@HELIX-166: Rename modes to auto.  semi-auto.  and custom.  rb=13444\n","date":"2013-08-16 07:21:52","modifiedFileCount":"39","status":"M","submitter":"zzhang"},{"authorTime":"2017-05-17 07:39:21","codes":[{"authorDate":"2017-05-17 07:39:21","commitOrder":3,"curCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try {\n      zkClient.writeData(path2, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNotNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try {\n      zkClient.writeData(path1, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertTrue(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\",\n            \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-05-23 09:44:35","endLine":165,"groupId":"1461","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/ea0dfb7bb80d454ee4d00bb859c36ab84ced3a.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\",\n            \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2017-05-17 07:39:21","commitOrder":3,"curCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try {\n      zkClient.writeData(path2, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNotNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try {\n      zkClient.writeData(path1, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n    Assert.assertTrue(succeed);\n    HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n    Assert.assertNotNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n    Assert.assertTrue(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2017-05-23 09:44:35","endLine":287,"groupId":"1462","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordStreamingSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c7/ea0dfb7bb80d454ee4d00bb859c36ab84ced3a.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try {\n      zkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try {\n      zkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"8cf80a9f862ca0462001ca41e8d2929dd20aee1e","commitMessage":"@@@Test fixes for release\n","date":"2017-05-23 09:44:35","modifiedFileCount":"7","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2018-09-27 02:39:42","commitOrder":4,"curCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    _gZkClient.createPersistent(path1, true);\n    _gZkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = _gZkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    _gZkClient.createPersistent(path2, true);\n    try {\n      _gZkClient.writeData(path2, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    record = _gZkClient.readData(path2);\n    Assert.assertNotNull(record);\n\n    \r\n    record = _gZkClient.readData(path1);\n    try {\n      _gZkClient.writeData(path1, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    ZNRecord recordNew = _gZkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertTrue(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\",\n            \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-10-30 09:15:22","endLine":160,"groupId":"1461","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bc/cb42556ec12d43f0af47570fe84ff9270c3d65.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try {\n      zkClient.writeData(path2, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNotNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try {\n      zkClient.writeData(path1, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertTrue(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\",\n            \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2018-09-27 02:39:42","commitOrder":4,"curCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(serializer);\n      String root = className;\n      byte[] buf = new byte[1024];\n      for (int i = 0; i < 1024; i++) {\n        buf[i] = 'a';\n      }\n      String bufStr = new String(buf);\n\n      \r\n      \r\n      \r\n      final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n      smallRecord.getSimpleFields().clear();\n      for (int i = 0; i < 900; i++) {\n        smallRecord.setSimpleField(i + \"\", bufStr);\n      }\n\n      String path1 = \"/\" + root + \"/test1\";\n      zkClient.createPersistent(path1, true);\n      zkClient.writeData(path1, smallRecord);\n\n      ZNRecord record = zkClient.readData(path1);\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      \r\n      final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n      largeRecord.getSimpleFields().clear();\n      for (int i = 0; i < 1024; i++) {\n        largeRecord.setSimpleField(i + \"\", bufStr);\n      }\n      String path2 = \"/\" + root + \"/test2\";\n      zkClient.createPersistent(path2, true);\n      try {\n        zkClient.writeData(path2, largeRecord);\n      } catch (HelixException e) {\n        Assert\n            .fail(\"Should not fail because data size is larger than 1M since compression applied\");\n      }\n      record = zkClient.readData(path2);\n      Assert.assertNotNull(record);\n\n      \r\n      record = zkClient.readData(path1);\n      try {\n        zkClient.writeData(path1, largeRecord);\n      } catch (HelixException e) {\n        Assert\n            .fail(\"Should not fail because data size is larger than 1M since compression applied\");\n      }\n      ZNRecord recordNew = zkClient.readData(path1);\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n      \r\n      ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n      admin.addCluster(className, true);\n      InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n      admin.addInstance(className, instanceConfig);\n\n      \r\n      ZKHelixDataAccessor accessor =\n          new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      IdealState idealState = new IdealState(\"currentState\");\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n      Assert.assertTrue(succeed);\n      HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n      Assert.assertNotNull(property);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 900; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 900; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      \r\n      succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      arr = serializer.serialize(record);\n      arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n    } catch (HelixException ex) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    } finally {\n      zkClient.close();\n    }\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n  }\n","date":"2018-10-30 09:15:22","endLine":291,"groupId":"1462","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordStreamingSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bc/cb42556ec12d43f0af47570fe84ff9270c3d65.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    ZkClient zkClient = new ZkClient(ZK_ADDR);\n    zkClient.setZkSerializer(serializer);\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    zkClient.createPersistent(path1, true);\n    zkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = zkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    zkClient.createPersistent(path2, true);\n    try {\n      zkClient.writeData(path2, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    record = zkClient.readData(path2);\n    Assert.assertNotNull(record);\n\n    \r\n    record = zkClient.readData(path1);\n    try {\n      zkClient.writeData(path1, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    ZNRecord recordNew = zkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n    Assert.assertTrue(succeed);\n    HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n    Assert.assertNotNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n    Assert.assertTrue(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"9d7364d7abba3932a1b25e96e4eb9dd3e203cec9","commitMessage":"@@@Using HelixZkClient to replace ZkClient in helix-core and helix-rest.\n\n1. Replace as much usage as possible. For the raw ZkClient tests.  the usages are kept.\n2. For backward compatibility.  some public interfaces still returns ZkClient. Marks them as Deprecated.\n","date":"2018-10-30 09:15:22","modifiedFileCount":"60","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2019-05-10 06:59:59","codes":[{"authorDate":"2019-05-10 06:59:59","commitOrder":5,"curCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    _gZkClient.createPersistent(path1, true);\n    _gZkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = _gZkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    _gZkClient.createPersistent(path2, true);\n    try {\n      _gZkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    record = _gZkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = _gZkClient.readData(path1);\n    try {\n      _gZkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    ZNRecord recordNew = _gZkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\",\n            \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":162,"groupId":"999","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/36/e26e74480350d24b5713e0f99f9da361c9692d.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    _gZkClient.createPersistent(path1, true);\n    _gZkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = _gZkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    _gZkClient.createPersistent(path2, true);\n    try {\n      _gZkClient.writeData(path2, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    record = _gZkClient.readData(path2);\n    Assert.assertNotNull(record);\n\n    \r\n    record = _gZkClient.readData(path1);\n    try {\n      _gZkClient.writeData(path1, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    ZNRecord recordNew = _gZkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertTrue(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\",\n            \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2019-05-10 06:59:59","commitOrder":5,"curCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    HelixZkClient zkClient =\n        SharedZkClientFactory.getInstance().buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(serializer);\n      String root = className;\n      byte[] buf = new byte[1024];\n      for (int i = 0; i < 1024; i++) {\n        buf[i] = 'a';\n      }\n      String bufStr = new String(buf);\n\n      \r\n      \r\n      \r\n      final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n      smallRecord.getSimpleFields().clear();\n      for (int i = 0; i < 900; i++) {\n        smallRecord.setSimpleField(i + \"\", bufStr);\n      }\n\n      String path1 = \"/\" + root + \"/test1\";\n      zkClient.createPersistent(path1, true);\n      zkClient.writeData(path1, smallRecord);\n\n      ZNRecord record = zkClient.readData(path1);\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      \r\n      final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n      largeRecord.getSimpleFields().clear();\n      for (int i = 0; i < 1024; i++) {\n        largeRecord.setSimpleField(i + \"\", bufStr);\n      }\n      String path2 = \"/\" + root + \"/test2\";\n      zkClient.createPersistent(path2, true);\n      try {\n        zkClient.writeData(path2, largeRecord);\n        Assert.fail(\"Should fail because data size is larger than 1M\");\n      } catch (HelixException e) {\n        \r\n      }\n      record = zkClient.readData(path2);\n      Assert.assertNull(record);\n\n      \r\n      record = zkClient.readData(path1);\n      try {\n        zkClient.writeData(path1, largeRecord);\n        Assert.fail(\"Should fail because data size is larger than 1M\");\n      } catch (HelixException e) {\n        \r\n      }\n      ZNRecord recordNew = zkClient.readData(path1);\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n      \r\n      ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n      admin.addCluster(className, true);\n      InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n      admin.addInstance(className, instanceConfig);\n\n      \r\n      ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      IdealState idealState = new IdealState(\"currentState\");\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n      Assert.assertFalse(succeed);\n      HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n      Assert.assertNull(property);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 900; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 900; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      \r\n      succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertFalse(succeed);\n      recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      arr = serializer.serialize(record);\n      arrNew = serializer.serialize(recordNew);\n      Assert.assertTrue(Arrays.equals(arr, arrNew));\n    } finally {\n      zkClient.close();\n    }\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":290,"groupId":"1000","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordStreamingSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/36/e26e74480350d24b5713e0f99f9da361c9692d.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(serializer);\n      String root = className;\n      byte[] buf = new byte[1024];\n      for (int i = 0; i < 1024; i++) {\n        buf[i] = 'a';\n      }\n      String bufStr = new String(buf);\n\n      \r\n      \r\n      \r\n      final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n      smallRecord.getSimpleFields().clear();\n      for (int i = 0; i < 900; i++) {\n        smallRecord.setSimpleField(i + \"\", bufStr);\n      }\n\n      String path1 = \"/\" + root + \"/test1\";\n      zkClient.createPersistent(path1, true);\n      zkClient.writeData(path1, smallRecord);\n\n      ZNRecord record = zkClient.readData(path1);\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      \r\n      final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n      largeRecord.getSimpleFields().clear();\n      for (int i = 0; i < 1024; i++) {\n        largeRecord.setSimpleField(i + \"\", bufStr);\n      }\n      String path2 = \"/\" + root + \"/test2\";\n      zkClient.createPersistent(path2, true);\n      try {\n        zkClient.writeData(path2, largeRecord);\n      } catch (HelixException e) {\n        Assert\n            .fail(\"Should not fail because data size is larger than 1M since compression applied\");\n      }\n      record = zkClient.readData(path2);\n      Assert.assertNotNull(record);\n\n      \r\n      record = zkClient.readData(path1);\n      try {\n        zkClient.writeData(path1, largeRecord);\n      } catch (HelixException e) {\n        Assert\n            .fail(\"Should not fail because data size is larger than 1M since compression applied\");\n      }\n      ZNRecord recordNew = zkClient.readData(path1);\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n      \r\n      ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n      admin.addCluster(className, true);\n      InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n      admin.addInstance(className, instanceConfig);\n\n      \r\n      ZKHelixDataAccessor accessor =\n          new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      IdealState idealState = new IdealState(\"currentState\");\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n      Assert.assertTrue(succeed);\n      HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n      Assert.assertNotNull(property);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 900; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 900; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      \r\n      succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      arr = serializer.serialize(record);\n      arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n    } catch (HelixException ex) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    } finally {\n      zkClient.close();\n    }\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"cd821cd620b6821cbe3d4ccf7072efeb3b924d32","commitMessage":"@@@Fix critical Task Framework throttle bug\n\nTask throttling feature had a logical bug where it wouldn't count any of the pending task assignments.  which was breaking task throttling. This diff fixes it.\n\nRB=1661127\nBUG=HELIX-1875\nG=helix-reviewers\nA=jjwang\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"7","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + className + \"/test1\";\n    _gZkClient.createPersistent(path1, true);\n    _gZkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = _gZkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + className + \"/test2\";\n    _gZkClient.createPersistent(path2, true);\n    try {\n      _gZkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    record = _gZkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = _gZkClient.readData(path1);\n    try {\n      _gZkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    ZNRecord recordNew = _gZkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor<>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property = accessor.getProperty(\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\", \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    deleteCluster(className);\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":157,"groupId":"0","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/6ee5e9000cdd347ff03367676d4e4bd0ae7685.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    _gZkClient.createPersistent(path1, true);\n    _gZkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = _gZkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    _gZkClient.createPersistent(path2, true);\n    try {\n      _gZkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    record = _gZkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = _gZkClient.readData(path1);\n    try {\n      _gZkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    ZNRecord recordNew = _gZkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\",\n            \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(serializer);\n      byte[] buf = new byte[1024];\n      for (int i = 0; i < 1024; i++) {\n        buf[i] = 'a';\n      }\n      String bufStr = new String(buf);\n\n      \r\n      \r\n      \r\n      final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n      smallRecord.getSimpleFields().clear();\n      for (int i = 0; i < 900; i++) {\n        smallRecord.setSimpleField(i + \"\", bufStr);\n      }\n\n      String path1 = \"/\" + className + \"/test1\";\n      zkClient.createPersistent(path1, true);\n      zkClient.writeData(path1, smallRecord);\n\n      ZNRecord record = zkClient.readData(path1);\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      \r\n      final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n      largeRecord.getSimpleFields().clear();\n      for (int i = 0; i < 1024; i++) {\n        largeRecord.setSimpleField(i + \"\", bufStr);\n      }\n      String path2 = \"/\" + className + \"/test2\";\n      zkClient.createPersistent(path2, true);\n      try {\n        zkClient.writeData(path2, largeRecord);\n        Assert.fail(\"Should fail because data size is larger than 1M\");\n      } catch (HelixException e) {\n        \r\n      }\n      record = zkClient.readData(path2);\n      Assert.assertNull(record);\n\n      \r\n      record = zkClient.readData(path1);\n      try {\n        zkClient.writeData(path1, largeRecord);\n        Assert.fail(\"Should fail because data size is larger than 1M\");\n      } catch (HelixException e) {\n        \r\n      }\n      ZNRecord recordNew = zkClient.readData(path1);\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n      \r\n      ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n      admin.addCluster(className, true);\n      InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n      admin.addInstance(className, instanceConfig);\n\n      \r\n      ZKHelixDataAccessor accessor =\n          new ZKHelixDataAccessor(className, new ZkBaseDataAccessor<>(zkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      IdealState idealState = new IdealState(\"currentState\");\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n      Assert.assertFalse(succeed);\n      HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n      Assert.assertNull(property);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 900; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 900; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      \r\n      succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertFalse(succeed);\n      recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      arr = serializer.serialize(record);\n      arrNew = serializer.serialize(recordNew);\n      Assert.assertTrue(Arrays.equals(arr, arrNew));\n    } finally {\n      zkClient.close();\n    }\n\n    deleteCluster(className);\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":286,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordStreamingSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/6ee5e9000cdd347ff03367676d4e4bd0ae7685.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    HelixZkClient zkClient =\n        SharedZkClientFactory.getInstance().buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(serializer);\n      String root = className;\n      byte[] buf = new byte[1024];\n      for (int i = 0; i < 1024; i++) {\n        buf[i] = 'a';\n      }\n      String bufStr = new String(buf);\n\n      \r\n      \r\n      \r\n      final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n      smallRecord.getSimpleFields().clear();\n      for (int i = 0; i < 900; i++) {\n        smallRecord.setSimpleField(i + \"\", bufStr);\n      }\n\n      String path1 = \"/\" + root + \"/test1\";\n      zkClient.createPersistent(path1, true);\n      zkClient.writeData(path1, smallRecord);\n\n      ZNRecord record = zkClient.readData(path1);\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      \r\n      final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n      largeRecord.getSimpleFields().clear();\n      for (int i = 0; i < 1024; i++) {\n        largeRecord.setSimpleField(i + \"\", bufStr);\n      }\n      String path2 = \"/\" + root + \"/test2\";\n      zkClient.createPersistent(path2, true);\n      try {\n        zkClient.writeData(path2, largeRecord);\n        Assert.fail(\"Should fail because data size is larger than 1M\");\n      } catch (HelixException e) {\n        \r\n      }\n      record = zkClient.readData(path2);\n      Assert.assertNull(record);\n\n      \r\n      record = zkClient.readData(path1);\n      try {\n        zkClient.writeData(path1, largeRecord);\n        Assert.fail(\"Should fail because data size is larger than 1M\");\n      } catch (HelixException e) {\n        \r\n      }\n      ZNRecord recordNew = zkClient.readData(path1);\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n      \r\n      ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n      admin.addCluster(className, true);\n      InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n      admin.addInstance(className, instanceConfig);\n\n      \r\n      ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      IdealState idealState = new IdealState(\"currentState\");\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n      Assert.assertFalse(succeed);\n      HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n      Assert.assertNull(property);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 900; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 900; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      \r\n      succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertFalse(succeed);\n      recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      arr = serializer.serialize(record);\n      arrNew = serializer.serialize(recordNew);\n      Assert.assertTrue(Arrays.equals(arr, arrNew));\n    } finally {\n      zkClient.close();\n    }\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-29 02:25:05","codes":[{"authorDate":"2019-05-29 02:25:05","commitOrder":7,"curCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    _gZkClient.createPersistent(path1, true);\n    _gZkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = _gZkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    _gZkClient.createPersistent(path2, true);\n    try {\n      _gZkClient.writeData(path2, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    record = _gZkClient.readData(path2);\n    Assert.assertNotNull(record);\n\n    \r\n    record = _gZkClient.readData(path1);\n    try {\n      _gZkClient.writeData(path1, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    ZNRecord recordNew = _gZkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertTrue(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\",\n            \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-29 02:25:05","endLine":160,"groupId":"1461","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bc/cb42556ec12d43f0af47570fe84ff9270c3d65.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + className + \"/test1\";\n    _gZkClient.createPersistent(path1, true);\n    _gZkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = _gZkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + className + \"/test2\";\n    _gZkClient.createPersistent(path2, true);\n    try {\n      _gZkClient.writeData(path2, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    record = _gZkClient.readData(path2);\n    Assert.assertNull(record);\n\n    \r\n    record = _gZkClient.readData(path1);\n    try {\n      _gZkClient.writeData(path1, largeRecord);\n      Assert.fail(\"Should fail because data size is larger than 1M\");\n    } catch (HelixException e) {\n      \r\n    }\n    ZNRecord recordNew = _gZkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor<>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertFalse(succeed);\n    HelixProperty property = accessor.getProperty(\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\", \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertFalse(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n    deleteCluster(className);\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2019-05-29 02:25:05","commitOrder":7,"curCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(serializer);\n      String root = className;\n      byte[] buf = new byte[1024];\n      for (int i = 0; i < 1024; i++) {\n        buf[i] = 'a';\n      }\n      String bufStr = new String(buf);\n\n      \r\n      \r\n      \r\n      final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n      smallRecord.getSimpleFields().clear();\n      for (int i = 0; i < 900; i++) {\n        smallRecord.setSimpleField(i + \"\", bufStr);\n      }\n\n      String path1 = \"/\" + root + \"/test1\";\n      zkClient.createPersistent(path1, true);\n      zkClient.writeData(path1, smallRecord);\n\n      ZNRecord record = zkClient.readData(path1);\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      \r\n      final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n      largeRecord.getSimpleFields().clear();\n      for (int i = 0; i < 1024; i++) {\n        largeRecord.setSimpleField(i + \"\", bufStr);\n      }\n      String path2 = \"/\" + root + \"/test2\";\n      zkClient.createPersistent(path2, true);\n      try {\n        zkClient.writeData(path2, largeRecord);\n      } catch (HelixException e) {\n        Assert\n            .fail(\"Should not fail because data size is larger than 1M since compression applied\");\n      }\n      record = zkClient.readData(path2);\n      Assert.assertNotNull(record);\n\n      \r\n      record = zkClient.readData(path1);\n      try {\n        zkClient.writeData(path1, largeRecord);\n      } catch (HelixException e) {\n        Assert\n            .fail(\"Should not fail because data size is larger than 1M since compression applied\");\n      }\n      ZNRecord recordNew = zkClient.readData(path1);\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n      \r\n      ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n      admin.addCluster(className, true);\n      InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n      admin.addInstance(className, instanceConfig);\n\n      \r\n      ZKHelixDataAccessor accessor =\n          new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      IdealState idealState = new IdealState(\"currentState\");\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n      Assert.assertTrue(succeed);\n      HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n      Assert.assertNotNull(property);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 900; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 900; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      \r\n      succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      arr = serializer.serialize(record);\n      arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n    } catch (HelixException ex) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    } finally {\n      zkClient.close();\n    }\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n  }\n","date":"2019-05-29 02:25:05","endLine":291,"groupId":"1462","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordStreamingSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bc/cb42556ec12d43f0af47570fe84ff9270c3d65.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(serializer);\n      byte[] buf = new byte[1024];\n      for (int i = 0; i < 1024; i++) {\n        buf[i] = 'a';\n      }\n      String bufStr = new String(buf);\n\n      \r\n      \r\n      \r\n      final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n      smallRecord.getSimpleFields().clear();\n      for (int i = 0; i < 900; i++) {\n        smallRecord.setSimpleField(i + \"\", bufStr);\n      }\n\n      String path1 = \"/\" + className + \"/test1\";\n      zkClient.createPersistent(path1, true);\n      zkClient.writeData(path1, smallRecord);\n\n      ZNRecord record = zkClient.readData(path1);\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      \r\n      final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n      largeRecord.getSimpleFields().clear();\n      for (int i = 0; i < 1024; i++) {\n        largeRecord.setSimpleField(i + \"\", bufStr);\n      }\n      String path2 = \"/\" + className + \"/test2\";\n      zkClient.createPersistent(path2, true);\n      try {\n        zkClient.writeData(path2, largeRecord);\n        Assert.fail(\"Should fail because data size is larger than 1M\");\n      } catch (HelixException e) {\n        \r\n      }\n      record = zkClient.readData(path2);\n      Assert.assertNull(record);\n\n      \r\n      record = zkClient.readData(path1);\n      try {\n        zkClient.writeData(path1, largeRecord);\n        Assert.fail(\"Should fail because data size is larger than 1M\");\n      } catch (HelixException e) {\n        \r\n      }\n      ZNRecord recordNew = zkClient.readData(path1);\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertTrue(Arrays.equals(arr, arrNew));\n\n      \r\n      ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n      admin.addCluster(className, true);\n      InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n      admin.addInstance(className, instanceConfig);\n\n      \r\n      ZKHelixDataAccessor accessor =\n          new ZKHelixDataAccessor(className, new ZkBaseDataAccessor<>(zkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      IdealState idealState = new IdealState(\"currentState\");\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n      Assert.assertFalse(succeed);\n      HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n      Assert.assertNull(property);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 900; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 900; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      \r\n      succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertFalse(succeed);\n      recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      arr = serializer.serialize(record);\n      arrNew = serializer.serialize(recordNew);\n      Assert.assertTrue(Arrays.equals(arr, arrNew));\n    } finally {\n      zkClient.close();\n    }\n\n    deleteCluster(className);\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"04eefd5942e267667fa4161954f3a8f94656ec5f","commitMessage":"@@@Fix TestZNRecordSizeLimit\n\nThis diff fixes TestZNRecordSizeLimit so that it considers the default behavior to be auto-compression of ZNodes enabled.\n","date":"2019-05-29 02:25:05","modifiedFileCount":"1","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-05-27 14:37:16","codes":[{"authorDate":"2020-05-27 14:37:16","commitOrder":8,"curCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \" + new Date(\n        System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    _gZkClient.createPersistent(path1, true);\n    _gZkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = _gZkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    _gZkClient.createPersistent(path2, true);\n    try {\n      _gZkClient.writeData(path2, largeRecord);\n    } catch (ZkMarshallingError e) {\n      Assert.fail(ASSERTION_MESSAGE + e);\n    }\n    record = _gZkClient.readData(path2);\n    Assert.assertNotNull(record);\n\n    \r\n    record = _gZkClient.readData(path1);\n    try {\n      _gZkClient.writeData(path1, largeRecord);\n    } catch (ZkMarshallingError e) {\n      Assert.fail(ASSERTION_MESSAGE + e);\n    }\n    ZNRecord recordNew = _gZkClient.readData(path1);\n    try {\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n    } catch (ZkMarshallingError e) {\n      Assert.fail(ASSERTION_MESSAGE + e);\n    }\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertTrue(succeed);\n    HelixProperty property = accessor.getProperty(\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\", \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    try {\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n    } catch (ZkMarshallingError e) {\n      Assert.fail(ASSERTION_MESSAGE + e);\n    }\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    try {\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n    } catch (ZkMarshallingError e) {\n      Assert.fail(ASSERTION_MESSAGE + e);\n    }\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \" + new Date(\n        System.currentTimeMillis()));\n  }\n","date":"2020-05-27 14:37:16","endLine":179,"groupId":"10239","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/da/f99bb9e3c0356234c0eb6cf811046222bd0c9e.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n\n    ZNRecordSerializer serializer = new ZNRecordSerializer();\n\n    String root = className;\n    byte[] buf = new byte[1024];\n    for (int i = 0; i < 1024; i++) {\n      buf[i] = 'a';\n    }\n    String bufStr = new String(buf);\n\n    \r\n    \r\n    \r\n    final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n    smallRecord.getSimpleFields().clear();\n    for (int i = 0; i < 900; i++) {\n      smallRecord.setSimpleField(i + \"\", bufStr);\n    }\n\n    String path1 = \"/\" + root + \"/test1\";\n    _gZkClient.createPersistent(path1, true);\n    _gZkClient.writeData(path1, smallRecord);\n\n    ZNRecord record = _gZkClient.readData(path1);\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    \r\n    final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n    largeRecord.getSimpleFields().clear();\n    for (int i = 0; i < 1024; i++) {\n      largeRecord.setSimpleField(i + \"\", bufStr);\n    }\n    String path2 = \"/\" + root + \"/test2\";\n    _gZkClient.createPersistent(path2, true);\n    try {\n      _gZkClient.writeData(path2, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    record = _gZkClient.readData(path2);\n    Assert.assertNotNull(record);\n\n    \r\n    record = _gZkClient.readData(path1);\n    try {\n      _gZkClient.writeData(path1, largeRecord);\n    } catch (HelixException e) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    }\n    ZNRecord recordNew = _gZkClient.readData(path1);\n    byte[] arr = serializer.serialize(record);\n    byte[] arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    \r\n    ZKHelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.addCluster(className, true);\n    InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n    admin.addInstance(className, instanceConfig);\n\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n\n    IdealState idealState = new IdealState(\"currentState\");\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n    Assert.assertTrue(succeed);\n    HelixProperty property =\n        accessor.getProperty(keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_1\",\n            \"partition_1\"));\n    Assert.assertNull(property);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n\n    for (int i = 0; i < 900; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    record = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n    \r\n    idealState.getRecord().getSimpleFields().clear();\n    idealState.setStateModelDefRef(\"MasterSlave\");\n    idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n    idealState.setNumPartitions(10);\n    for (int i = 900; i < 1024; i++) {\n      idealState.getRecord().setSimpleField(i + \"\", bufStr);\n    }\n    \r\n    succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB1\"), idealState);\n    Assert.assertTrue(succeed);\n    recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB1\")).getRecord();\n    arr = serializer.serialize(record);\n    arrNew = serializer.serialize(recordNew);\n    Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordSerializer at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-05-27 14:37:16","commitOrder":8,"curCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(serializer);\n      String root = className;\n      byte[] buf = new byte[1024];\n      for (int i = 0; i < 1024; i++) {\n        buf[i] = 'a';\n      }\n      String bufStr = new String(buf);\n\n      \r\n      \r\n      \r\n      final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n      smallRecord.getSimpleFields().clear();\n      for (int i = 0; i < 900; i++) {\n        smallRecord.setSimpleField(i + \"\", bufStr);\n      }\n\n      String path1 = \"/\" + root + \"/test1\";\n      zkClient.createPersistent(path1, true);\n      zkClient.writeData(path1, smallRecord);\n\n      ZNRecord record = zkClient.readData(path1);\n      try {\n        Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n      } catch (ZkMarshallingError e) {\n        Assert.fail(ASSERTION_MESSAGE + e);\n      }\n\n      \r\n      \r\n      final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n      largeRecord.getSimpleFields().clear();\n      for (int i = 0; i < 1024; i++) {\n        largeRecord.setSimpleField(i + \"\", bufStr);\n      }\n      String path2 = \"/\" + root + \"/test2\";\n      zkClient.createPersistent(path2, true);\n      try {\n        zkClient.writeData(path2, largeRecord);\n      } catch (ZkMarshallingError e) {\n        Assert.fail(ASSERTION_MESSAGE + e);\n      }\n      record = zkClient.readData(path2);\n      Assert.assertNotNull(record);\n\n      \r\n      record = zkClient.readData(path1);\n      try {\n        zkClient.writeData(path1, largeRecord);\n      } catch (ZkMarshallingError e) {\n        Assert.fail(ASSERTION_MESSAGE + e);\n      }\n      ZNRecord recordNew = zkClient.readData(path1);\n      try {\n        byte[] arr = serializer.serialize(record);\n        byte[] arrNew = serializer.serialize(recordNew);\n        Assert.assertFalse(Arrays.equals(arr, arrNew));\n      } catch (ZkMarshallingError e) {\n        Assert.fail(ASSERTION_MESSAGE + e);\n      }\n\n      \r\n      ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n      admin.addCluster(className, true);\n      InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n      admin.addInstance(className, instanceConfig);\n\n      \r\n      ZKHelixDataAccessor accessor =\n          new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      IdealState idealState = new IdealState(\"currentState\");\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n      Assert.assertTrue(succeed);\n      HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n      Assert.assertNotNull(property);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 900; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 900; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      \r\n      succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      try {\n        byte[] arr = serializer.serialize(record);\n        byte[] arrNew = serializer.serialize(recordNew);\n        Assert.assertFalse(Arrays.equals(arr, arrNew));\n      } catch (ZkMarshallingError e) {\n        Assert.fail(ASSERTION_MESSAGE + e);\n      }\n    } finally {\n      zkClient.close();\n    }\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n  }\n","date":"2020-05-27 14:37:16","endLine":318,"groupId":"10239","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testZNRecordSizeLimitUseZNRecordStreamingSerializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/da/f99bb9e3c0356234c0eb6cf811046222bd0c9e.src","preCode":"  public void testZNRecordSizeLimitUseZNRecordStreamingSerializer() {\n    String className = getShortClassName();\n    System.out.println(\"START testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n\n    ZNRecordStreamingSerializer serializer = new ZNRecordStreamingSerializer();\n    HelixZkClient zkClient = SharedZkClientFactory.getInstance()\n        .buildZkClient(new HelixZkClient.ZkConnectionConfig(ZK_ADDR));\n\n    try {\n      zkClient.setZkSerializer(serializer);\n      String root = className;\n      byte[] buf = new byte[1024];\n      for (int i = 0; i < 1024; i++) {\n        buf[i] = 'a';\n      }\n      String bufStr = new String(buf);\n\n      \r\n      \r\n      \r\n      final ZNRecord smallRecord = new ZNRecord(\"normalsize\");\n      smallRecord.getSimpleFields().clear();\n      for (int i = 0; i < 900; i++) {\n        smallRecord.setSimpleField(i + \"\", bufStr);\n      }\n\n      String path1 = \"/\" + root + \"/test1\";\n      zkClient.createPersistent(path1, true);\n      zkClient.writeData(path1, smallRecord);\n\n      ZNRecord record = zkClient.readData(path1);\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      \r\n      final ZNRecord largeRecord = new ZNRecord(\"oversize\");\n      largeRecord.getSimpleFields().clear();\n      for (int i = 0; i < 1024; i++) {\n        largeRecord.setSimpleField(i + \"\", bufStr);\n      }\n      String path2 = \"/\" + root + \"/test2\";\n      zkClient.createPersistent(path2, true);\n      try {\n        zkClient.writeData(path2, largeRecord);\n      } catch (HelixException e) {\n        Assert\n            .fail(\"Should not fail because data size is larger than 1M since compression applied\");\n      }\n      record = zkClient.readData(path2);\n      Assert.assertNotNull(record);\n\n      \r\n      record = zkClient.readData(path1);\n      try {\n        zkClient.writeData(path1, largeRecord);\n      } catch (HelixException e) {\n        Assert\n            .fail(\"Should not fail because data size is larger than 1M since compression applied\");\n      }\n      ZNRecord recordNew = zkClient.readData(path1);\n      byte[] arr = serializer.serialize(record);\n      byte[] arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n\n      \r\n      ZKHelixAdmin admin = new ZKHelixAdmin(zkClient);\n      admin.addCluster(className, true);\n      InstanceConfig instanceConfig = new InstanceConfig(\"localhost_12918\");\n      admin.addInstance(className, instanceConfig);\n\n      \r\n      ZKHelixDataAccessor accessor =\n          new ZKHelixDataAccessor(className, new ZkBaseDataAccessor(zkClient));\n      Builder keyBuilder = accessor.keyBuilder();\n\n      \r\n      IdealState idealState = new IdealState(\"currentState\");\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      boolean succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_1\"), idealState);\n      Assert.assertTrue(succeed);\n      HelixProperty property = accessor.getProperty(keyBuilder.idealStates(\"TestDB_1\"));\n      Assert.assertNotNull(property);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 0; i < 900; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      succeed = accessor.setProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      record = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      Assert.assertTrue(serializer.serialize(record).length > 900 * 1024);\n\n      \r\n      idealState.getRecord().getSimpleFields().clear();\n      idealState.setStateModelDefRef(\"MasterSlave\");\n      idealState.setRebalanceMode(RebalanceMode.SEMI_AUTO);\n      idealState.setNumPartitions(10);\n\n      for (int i = 900; i < 1024; i++) {\n        idealState.getRecord().setSimpleField(i + \"\", bufStr);\n      }\n      \r\n      succeed = accessor.updateProperty(keyBuilder.idealStates(\"TestDB_2\"), idealState);\n      Assert.assertTrue(succeed);\n      recordNew = accessor.getProperty(keyBuilder.idealStates(\"TestDB_2\")).getRecord();\n      arr = serializer.serialize(record);\n      arrNew = serializer.serialize(recordNew);\n      Assert.assertFalse(Arrays.equals(arr, arrNew));\n    } catch (HelixException ex) {\n      Assert.fail(\"Should not fail because data size is larger than 1M since compression applied\");\n    } finally {\n      zkClient.close();\n    }\n\n    System.out.println(\"END testZNRecordSizeLimitUseZNRecordStreamingSerializer at \" + new Date(\n        System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZNRecordSizeLimit.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"d7f7cfcc12f0ff6f5eaa2b5c8e36104105134af3","commitMessage":"@@@Fix incorrect exception type and confusing assertion messages (#976)\n\nIn TestZNRecordSizeLimit.  the assertion message should indicate the data is smaller than 1 MB threshold. HelixException should be ZkMarshallingError because the exception type is changed in ZNRecord serializer.","date":"2020-05-27 14:37:16","modifiedFileCount":"1","status":"M","submitter":"Huizhi Lu"}]
