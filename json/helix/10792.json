[{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":1,"curCode":"  private void subscribeChildChange(String path, NotificationContext context)\n  {\n\t  NotificationContext.Type type = context.getType();\n      if (type == NotificationContext.Type.INIT || type == NotificationContext.Type.CALLBACK)\n      {\n        logger.info(_manager.getInstanceName() + \" subscribes child-change. path: \" \n        \t\t+ path + \", listener: \" + _listener);\n        _zkClient.subscribeChildChanges(path, this);\n      }\n      else if (type == NotificationContext.Type.FINALIZE)\n      {\n        logger.info(_manager.getInstanceName() + \" unsubscribe child-change. path: \" \n        \t\t+ path + \", listener: \" + _listener);\n        _zkClient.unsubscribeChildChanges(path, this);\n      }\n  }\n","date":"2013-04-06 08:30:58","endLine":259,"groupId":"472","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c5/cc265a763a7dc410fa7308af568e048d37a896.src","preCode":"  private void subscribeChildChange(String path, NotificationContext context)\n  {\n\t  NotificationContext.Type type = context.getType();\n      if (type == NotificationContext.Type.INIT || type == NotificationContext.Type.CALLBACK)\n      {\n        logger.info(_manager.getInstanceName() + \" subscribes child-change. path: \" \n        \t\t+ path + \", listener: \" + _listener);\n        _zkClient.subscribeChildChanges(path, this);\n      }\n      else if (type == NotificationContext.Type.FINALIZE)\n      {\n        logger.info(_manager.getInstanceName() + \" unsubscribe child-change. path: \" \n        \t\t+ path + \", listener: \" + _listener);\n        _zkClient.unsubscribeChildChanges(path, this);\n      }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"},{"authorDate":"2013-04-06 08:30:58","commitOrder":1,"curCode":"  private void subscribeDataChange(String path, NotificationContext context)\n  {\n    \tNotificationContext.Type type = context.getType();\n        if (type == NotificationContext.Type.INIT\n            || type == NotificationContext.Type.CALLBACK)\n        {\n          if (logger.isDebugEnabled())\n          {\n            logger.debug(_manager.getInstanceName() + \" subscribe data-change. path: \" \n            \t\t+ path + \", listener: \" + _listener);\n          }\n          _zkClient.subscribeDataChanges(path, this);\n\n        }\n        else if (type == NotificationContext.Type.FINALIZE)\n        {\n          logger.info(_manager.getInstanceName() + \" unsubscribe data-change. path: \" \n        \t\t  + path + \", listener: \" + _listener);\n          _zkClient.unsubscribeDataChanges(path, this);\n        }\n  }\n","date":"2013-04-06 08:30:58","endLine":281,"groupId":"472","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c5/cc265a763a7dc410fa7308af568e048d37a896.src","preCode":"  private void subscribeDataChange(String path, NotificationContext context)\n  {\n    \tNotificationContext.Type type = context.getType();\n        if (type == NotificationContext.Type.INIT\n            || type == NotificationContext.Type.CALLBACK)\n        {\n          if (logger.isDebugEnabled())\n          {\n            logger.debug(_manager.getInstanceName() + \" subscribe data-change. path: \" \n            \t\t+ path + \", listener: \" + _listener);\n          }\n          _zkClient.subscribeDataChanges(path, this);\n\n        }\n        else if (type == NotificationContext.Type.FINALIZE)\n        {\n          logger.info(_manager.getInstanceName() + \" unsubscribe data-change. path: \" \n        \t\t  + path + \", listener: \" + _listener);\n          _zkClient.unsubscribeDataChanges(path, this);\n        }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"B"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"B","submitter":"Swaroop Jagadish"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  private void subscribeChildChange(String path, NotificationContext context)\n  {\n\t  NotificationContext.Type type = context.getType();\n      if (type == NotificationContext.Type.INIT || type == NotificationContext.Type.CALLBACK)\n      {\n        logger.info(_manager.getInstanceName() + \" subscribes child-change. path: \" \n        \t\t+ path + \", listener: \" + _listener);\n        _zkClient.subscribeChildChanges(path, this);\n      }\n      else if (type == NotificationContext.Type.FINALIZE)\n      {\n        logger.info(_manager.getInstanceName() + \" unsubscribe child-change. path: \" \n        \t\t+ path + \", listener: \" + _listener);\n        _zkClient.unsubscribeChildChanges(path, this);\n      }\n  }\n","date":"2013-04-06 08:30:58","endLine":259,"groupId":"472","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c5/cc265a763a7dc410fa7308af568e048d37a896.src","preCode":"  private void subscribeChildChange(String path, NotificationContext context)\n  {\n\t  NotificationContext.Type type = context.getType();\n      if (type == NotificationContext.Type.INIT || type == NotificationContext.Type.CALLBACK)\n      {\n        logger.info(_manager.getInstanceName() + \" subscribes child-change. path: \" \n        \t\t+ path + \", listener: \" + _listener);\n        _zkClient.subscribeChildChanges(path, this);\n      }\n      else if (type == NotificationContext.Type.FINALIZE)\n      {\n        logger.info(_manager.getInstanceName() + \" unsubscribe child-change. path: \" \n        \t\t+ path + \", listener: \" + _listener);\n        _zkClient.unsubscribeChildChanges(path, this);\n      }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"},{"authorDate":"2017-11-08 08:48:26","commitOrder":2,"curCode":"  private void subscribeDataChange(String path, NotificationContext context) {\n    NotificationContext.Type type = context.getType();\n    if (type == NotificationContext.Type.INIT || type == NotificationContext.Type.CALLBACK) {\n      logger.info(\n          _manager.getInstanceName() + \" subscribe data-change. path: \" + path + \", listener: \"\n              + _listener);\n      _zkClient.subscribeDataChanges(path, this);\n\n    } else if (type == NotificationContext.Type.FINALIZE) {\n      logger.info(\n          _manager.getInstanceName() + \" unsubscribe data-change. path: \" + path + \", listener: \"\n              + _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":430,"groupId":"472","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/0cbbc12af430555db91a5f7ecabfc9b943d0e6.src","preCode":"  private void subscribeDataChange(String path, NotificationContext context) {\n    NotificationContext.Type type = context.getType();\n    if (type == NotificationContext.Type.INIT || type == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(_manager.getInstanceName() + \" subscribe data-change. path: \" + path + \", listener: \" + _listener);\n      }\n      _zkClient.subscribeDataChanges(path, this);\n\n    } else if (type == NotificationContext.Type.FINALIZE) {\n      logger.info(_manager.getInstanceName() + \" unsubscribe data-change. path: \" + path + \", listener: \" + _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-03-25 11:55:17","codes":[{"authorDate":"2018-03-25 11:55:17","commitOrder":3,"curCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      logger.info(\n          _manager.getInstanceName() + \" subscribes child-change. path: \" + path + \", listener: \" + _listener);\n      _zkClient.subscribeChildChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\n          _manager.getInstanceName() + \" unsubscribe child-change. path: \" + path + \", listener: \" + _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","date":"2018-04-06 07:56:55","endLine":470,"groupId":"472","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/b8a4cf77e635623adcd70b022dc0c5c16efeb1.src","preCode":"  private void subscribeChildChange(String path, NotificationContext context) {\n    NotificationContext.Type type = context.getType();\n    if (type == NotificationContext.Type.INIT || type == NotificationContext.Type.CALLBACK) {\n      logger.info(\n          _manager.getInstanceName() + \" subscribes child-change. path: \" + path + \", listener: \" + _listener);\n      _zkClient.subscribeChildChanges(path, this);\n    } else if (type == NotificationContext.Type.FINALIZE) {\n      logger.info(\n          _manager.getInstanceName() + \" unsubscribe child-change. path: \" + path + \", listener: \" + _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"},{"authorDate":"2018-03-25 11:55:17","commitOrder":3,"curCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      logger.info(\n          _manager.getInstanceName() + \" subscribe data-change. path: \" + path + \", listener: \"\n              + _listener);\n      _zkClient.subscribeDataChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\n          _manager.getInstanceName() + \" unsubscribe data-change. path: \" + path + \", listener: \"\n              + _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","date":"2018-04-06 07:56:55","endLine":486,"groupId":"472","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/b8a4cf77e635623adcd70b022dc0c5c16efeb1.src","preCode":"  private void subscribeDataChange(String path, NotificationContext context) {\n    NotificationContext.Type type = context.getType();\n    if (type == NotificationContext.Type.INIT || type == NotificationContext.Type.CALLBACK) {\n      logger.info(\n          _manager.getInstanceName() + \" subscribe data-change. path: \" + path + \", listener: \"\n              + _listener);\n      _zkClient.subscribeDataChanges(path, this);\n    } else if (type == NotificationContext.Type.FINALIZE) {\n      logger.info(\n          _manager.getInstanceName() + \" unsubscribe data-change. path: \" + path + \", listener: \"\n              + _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"}],"commitId":"477264e72165e706719071fa2c91d13f77ccbea4","commitMessage":"@@@Improve CallbackHandler by avoiding unnessary re-subscripe to the data change event.Resubscribe to zk changes only when there is any child chanage.  with async subscription to ensure not missing any new child paths.\n","date":"2018-04-06 07:56:55","modifiedFileCount":"5","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-03 05:33:29","codes":[{"authorDate":"2018-04-03 05:33:29","commitOrder":4,"curCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" subscribes child-change. path: \" + path + \", listener: \" + _listener);\n      }\n      _zkClient.subscribeChildChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" unsubscribe child-change. path: \" + path + \", listener: \"\n                + _listener);\n      }\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","date":"2018-04-17 02:22:40","endLine":474,"groupId":"472","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/a1a461dfc950c82c473d5c70f91b028bc5e8e2.src","preCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      logger.info(\n          _manager.getInstanceName() + \" subscribes child-change. path: \" + path + \", listener: \" + _listener);\n      _zkClient.subscribeChildChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\n          _manager.getInstanceName() + \" unsubscribe child-change. path: \" + path + \", listener: \" + _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"},{"authorDate":"2018-04-03 05:33:29","commitOrder":4,"curCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" subscribe data-change. path: \" + path + \", listener: \"\n                + _listener);\n      }\n      _zkClient.subscribeDataChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" unsubscribe data-change. path: \" + path + \", listener: \"\n                + _listener);\n      }\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","date":"2018-04-17 02:22:40","endLine":493,"groupId":"472","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/a1a461dfc950c82c473d5c70f91b028bc5e8e2.src","preCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      logger.info(\n          _manager.getInstanceName() + \" subscribe data-change. path: \" + path + \", listener: \"\n              + _listener);\n      _zkClient.subscribeDataChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\n          _manager.getInstanceName() + \" unsubscribe data-change. path: \" + path + \", listener: \"\n              + _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":476,"status":"M"}],"commitId":"13fac7c77bb570631ff93e8ff83c5cdd2bcd903f","commitMessage":"@@@Wrap these high frequent called debug log statements with debug level check to reduce memory footprint.\n","date":"2018-04-17 02:22:40","modifiedFileCount":"12","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-17 02:38:26","codes":[{"authorDate":"2018-04-17 02:38:26","commitOrder":5,"curCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" subscribes child-change. path: \" + path + \", listener: \" + _listener);\n      }\n      _zkClient.subscribeChildChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\n          _manager.getInstanceName() + \" unsubscribe child-change. path: \" + path + \", listener: \" + _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","date":"2018-04-20 02:36:17","endLine":460,"groupId":"472","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/58/90fb8ab2f5439baacbffc5698cc197d2debb15.src","preCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" subscribes child-change. path: \" + path + \", listener: \" + _listener);\n      }\n      _zkClient.subscribeChildChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" unsubscribe child-change. path: \" + path + \", listener: \"\n                + _listener);\n      }\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":446,"status":"M"},{"authorDate":"2018-04-17 02:38:26","commitOrder":5,"curCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" subscribe data-change. path: \" + path + \", listener: \"\n                + _listener);\n      }\n      _zkClient.subscribeDataChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\n          _manager.getInstanceName() + \" unsubscribe data-change. path: \" + path + \", listener: \"\n              + _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","date":"2018-04-20 02:36:17","endLine":478,"groupId":"472","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/58/90fb8ab2f5439baacbffc5698cc197d2debb15.src","preCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" subscribe data-change. path: \" + path + \", listener: \"\n                + _listener);\n      }\n      _zkClient.subscribeDataChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\n            _manager.getInstanceName() + \" unsubscribe data-change. path: \" + path + \", listener: \"\n                + _listener);\n      }\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"}],"commitId":"82cfd15b5b324674f4f5c3a50e156378460228c5","commitMessage":"@@@Fix race-condition issue that could block ZkClient event thread in CallbackHandler.\n","date":"2018-04-20 02:36:17","modifiedFileCount":"3","status":"M","submitter":"Lei Xia"},{"authorTime":"2020-06-06 01:34:31","codes":[{"authorDate":"2020-06-06 01:34:31","commitOrder":6,"curCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"{} subscribes child-change. path: {} , listener: {}\",\n            _manager.getInstanceName(), path, _listener );\n      }\n      _zkClient.subscribeChildChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"{} unsubscribe child-change. path: {}, listener: {}\", _manager.getInstanceName(),\n          path, _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","date":"2020-06-06 01:34:31","endLine":549,"groupId":"2359","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/21/92ca0a7d07252696c264de5e78d630fdb9ea1a.src","preCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(_manager.getInstanceName() + \" subscribes child-change. path: \" + path\n            + \", listener: \" + _listener);\n      }\n      _zkClient.subscribeChildChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(_manager.getInstanceName() + \" unsubscribe child-change. path: \" + path\n          + \", listener: \" + _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"M"},{"authorDate":"2020-06-06 01:34:31","commitOrder":6,"curCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"{} subscribe data-change. path: {}, listener: {}\", _manager.getInstanceName(),\n            path, _listener);\n      }\n      _zkClient.subscribeDataChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"{} unsubscribe data-change. path: {}, listener: {}\",\n          _manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","date":"2020-06-06 01:34:31","endLine":565,"groupId":"2359","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/21/92ca0a7d07252696c264de5e78d630fdb9ea1a.src","preCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(_manager.getInstanceName() + \" subscribe data-change. path: \" + path\n            + \", listener: \" + _listener);\n      }\n      _zkClient.subscribeDataChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(_manager.getInstanceName() + \" unsubscribe data-change. path: \" + path\n          + \", listener: \" + _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"M"}],"commitId":"48da1680290b04f815f691c6d3e0c1f34db8550a","commitMessage":"@@@Add path exists check for customized state (#1033)\n\nRemove stack trace when customized state root does not exist and throws no node exception.\nChange logging in Callback handler to be parameterized logging.","date":"2020-06-06 01:34:31","modifiedFileCount":"2","status":"M","submitter":"Meng Zhang"},{"authorTime":"2020-06-06 10:55:06","codes":[{"authorDate":"2020-06-06 10:55:06","commitOrder":7,"curCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"{} subscribes child-change. path: {} , listener: {}\",\n            _manager.getInstanceName(), path, _listener );\n      }\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      ChildrenSubscribeResult childrenSubscribeResult = _zkClient.subscribeChildChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", this, path,\n          childrenSubscribeResult.isInstalled());\n      if (!childrenSubscribeResult.isInstalled()) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", this, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"{} unsubscribe child-change. path: {}, listener: {}\", _manager.getInstanceName(),\n          path, _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","date":"2020-06-25 06:08:23","endLine":564,"groupId":"2359","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/66aba4bbe3cd5e7473c2e815e668858b4d0662.src","preCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"{} subscribes child-change. path: {} , listener: {}\",\n            _manager.getInstanceName(), path, _listener );\n      }\n      _zkClient.subscribeChildChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"{} unsubscribe child-change. path: {}, listener: {}\", _manager.getInstanceName(),\n          path, _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"M"},{"authorDate":"2020-06-06 10:55:06","commitOrder":7,"curCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"{} subscribe data-change. path: {}, listener: {}\", _manager.getInstanceName(),\n            path, _listener);\n      }\n      boolean subStatus = _zkClient.subscribeDataChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", this, path, subStatus);\n      if (!subStatus) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", this, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"{} unsubscribe data-change. path: {}, listener: {}\",\n          _manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","date":"2020-06-25 06:08:23","endLine":584,"groupId":"3163","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/66aba4bbe3cd5e7473c2e815e668858b4d0662.src","preCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"{} subscribe data-change. path: {}, listener: {}\", _manager.getInstanceName(),\n            path, _listener);\n      }\n      _zkClient.subscribeDataChanges(path, this);\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"{} unsubscribe data-change. path: {}, listener: {}\",\n          _manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"842bf1f9290cf30e946ff2bc8377b3e2f6014554","commitMessage":"@@@Fix leaking Zk path watch and Callbackhandler issue (#1035)\n\nShort term fix #1034. Get rid of dangling CallbackHandlers and its\nrelated current state parent path in Zookeeper. Get rid of leaking\nof current state znode path due to async nature of deletion of\ncurrent state znode path to installatio of watcher in various\nthread in Helix.","date":"2020-06-25 06:08:23","modifiedFileCount":"10","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-09-24 05:46:09","codes":[{"authorDate":"2020-09-24 05:46:09","commitOrder":8,"curCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribes child-change. path: {} , listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener );\n      }\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      ChildrenSubscribeResult childrenSubscribeResult = _zkClient.subscribeChildChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path,\n          childrenSubscribeResult.isInstalled());\n      if (!childrenSubscribeResult.isInstalled()) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe child-change. path: {}, listener: {}\",\n          _uid ,_manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":568,"groupId":"5625","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/8726d132030d88a0a798b89ea5907c5063b367.src","preCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"{} subscribes child-change. path: {} , listener: {}\",\n            _manager.getInstanceName(), path, _listener );\n      }\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      ChildrenSubscribeResult childrenSubscribeResult = _zkClient.subscribeChildChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", this, path,\n          childrenSubscribeResult.isInstalled());\n      if (!childrenSubscribeResult.isInstalled()) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", this, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"{} unsubscribe child-change. path: {}, listener: {}\", _manager.getInstanceName(),\n          path, _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":541,"status":"M"},{"authorDate":"2020-09-24 05:46:09","commitOrder":8,"curCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribe data-change. path: {}, listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener);\n      }\n      boolean subStatus = _zkClient.subscribeDataChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path, subStatus);\n      if (!subStatus) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe data-change. path: {}, listener: {}\",\n          _uid, _manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":588,"groupId":"5627","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/8726d132030d88a0a798b89ea5907c5063b367.src","preCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"{} subscribe data-change. path: {}, listener: {}\", _manager.getInstanceName(),\n            path, _listener);\n      }\n      boolean subStatus = _zkClient.subscribeDataChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", this, path, subStatus);\n      if (!subStatus) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", this, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"{} unsubscribe data-change. path: {}, listener: {}\",\n          _manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"}],"commitId":"7028bf36a45b2c03d92193ef69d74324171db73d","commitMessage":"@@@Enhance logging for CallbackHandler and Zkclient (#1355)\n\nThis commit adds a unique id to each method's logging to help the\ncorrelation and track the callback handler and zkClient's life cycle.","date":"2020-09-24 05:46:09","modifiedFileCount":"2","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-09-24 05:46:09","codes":[{"authorDate":"2020-09-25 14:40:41","commitOrder":9,"curCode":"  private List<String> subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribes child-change. path: {} , listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener );\n      }\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      ChildrenSubscribeResult childrenSubscribeResult =\n          _zkClient.subscribeChildChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path,\n          childrenSubscribeResult.isInstalled());\n      if (!childrenSubscribeResult.isInstalled()) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n      \r\n      return childrenSubscribeResult.getChildren();\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe child-change. path: {}, listener: {}\",\n          _uid ,_manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n\n    \r\n    return _zkClient.getChildren(path);\n  }\n","date":"2020-09-25 14:40:41","endLine":579,"groupId":"5625","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/de/ce3de0f458157dbf7c6f31f9afaac66129a431.src","preCode":"  private void subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribes child-change. path: {} , listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener );\n      }\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      ChildrenSubscribeResult childrenSubscribeResult = _zkClient.subscribeChildChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path,\n          childrenSubscribeResult.isInstalled());\n      if (!childrenSubscribeResult.isInstalled()) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe child-change. path: {}, listener: {}\",\n          _uid ,_manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"M"},{"authorDate":"2020-09-24 05:46:09","commitOrder":9,"curCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribe data-change. path: {}, listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener);\n      }\n      boolean subStatus = _zkClient.subscribeDataChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path, subStatus);\n      if (!subStatus) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe data-change. path: {}, listener: {}\",\n          _uid, _manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":588,"groupId":"5627","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/8726d132030d88a0a798b89ea5907c5063b367.src","preCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribe data-change. path: {}, listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener);\n      }\n      boolean subStatus = _zkClient.subscribeDataChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path, subStatus);\n      if (!subStatus) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe data-change. path: {}, listener: {}\",\n          _uid, _manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"N"}],"commitId":"b0b9911d803227c2595d19a0c1d894f996848ce6","commitMessage":"@@@Reduce unnecessary getChildren call in subscribeForChanges (#1344)\n\nIn CallbackHanlder's subscribeForChanges().  children names need to be fetched. subscribeChildChange() does actually have the children list.  but it doesn't return.  and later getChildren() is called again.\nIt wastes one zk call: not only wasting time in handling a callback.  but also adds more read pressure to zk server.\nThis commit uses the return result from subscribeChildChange() and saves one getChildren() call.","date":"2020-09-25 14:40:41","modifiedFileCount":"1","status":"M","submitter":"Huizhi Lu"},{"authorTime":"2020-09-24 05:46:09","codes":[{"authorDate":"2020-12-09 06:31:12","commitOrder":10,"curCode":"  private List<String> subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribes child-change. path: {} , listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener );\n      }\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      ChildrenSubscribeResult childrenSubscribeResult =\n          _zkClient.subscribeChildChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path,\n          childrenSubscribeResult.isInstalled());\n      if (!childrenSubscribeResult.isInstalled()) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n      \r\n      return childrenSubscribeResult.getChildren();\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe child-change. path: {}, listener: {}\",\n          _uid ,_manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n\n    try {\n      return _zkClient.getChildren(path);\n    } catch (ZkNoNodeException e) {\n      return null;\n    }\n  }\n","date":"2020-12-22 07:00:24","endLine":548,"groupId":"10792","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeChildChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/24/b42af0ece82414565e3df7925b4579d24b0a15.src","preCode":"  private List<String> subscribeChildChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribes child-change. path: {} , listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener );\n      }\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      ChildrenSubscribeResult childrenSubscribeResult =\n          _zkClient.subscribeChildChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path,\n          childrenSubscribeResult.isInstalled());\n      if (!childrenSubscribeResult.isInstalled()) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n      \r\n      return childrenSubscribeResult.getChildren();\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe child-change. path: {}, listener: {}\",\n          _uid ,_manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeChildChanges(path, this);\n    }\n\n    \r\n    return _zkClient.getChildren(path);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"},{"authorDate":"2020-09-24 05:46:09","commitOrder":10,"curCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribe data-change. path: {}, listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener);\n      }\n      boolean subStatus = _zkClient.subscribeDataChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path, subStatus);\n      if (!subStatus) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe data-change. path: {}, listener: {}\",\n          _uid, _manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","date":"2020-09-24 05:46:09","endLine":588,"groupId":"10792","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeDataChange","params":"(Stringpath@NotificationContext.TypecallbackType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/8726d132030d88a0a798b89ea5907c5063b367.src","preCode":"  private void subscribeDataChange(String path, NotificationContext.Type callbackType) {\n    if (callbackType == NotificationContext.Type.INIT\n        || callbackType == NotificationContext.Type.CALLBACK) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"CallbackHandler {}, {} subscribe data-change. path: {}, listener: {}\",\n            _uid, _manager.getInstanceName(), path, _listener);\n      }\n      boolean subStatus = _zkClient.subscribeDataChanges(path, this, callbackType != Type.INIT);\n      logger.debug(\"CallbackHandler {} subscribe data path {} result {}\", _uid, path, subStatus);\n      if (!subStatus) {\n        logger.info(\"CallbackHandler {} subscribe data path {} failed!\", _uid, path);\n      }\n    } else if (callbackType == NotificationContext.Type.FINALIZE) {\n      logger.info(\"CallbackHandler{}, {} unsubscribe data-change. path: {}, listener: {}\",\n          _uid, _manager.getInstanceName(), path, _listener);\n\n      _zkClient.unsubscribeDataChanges(path, this);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"N"}],"commitId":"a18deb06c28e25e79a9a773069a79ce21a2399b3","commitMessage":"@@@Controller-side Task Current State Migration (#1550)\n\nFirst part of task current state migration. \nAll changes made in this PR are on the controller side \nand are directly pipeline-impacting.","date":"2020-12-22 07:00:24","modifiedFileCount":"25","status":"M","submitter":"Neal Sun"}]
