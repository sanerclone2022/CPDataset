[{"authorTime":"2019-02-26 10:05:34","codes":[{"authorDate":"2019-02-26 10:05:34","commitOrder":1,"curCode":"  public void testAutoExitMaintenanceMode() throws InterruptedException {\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(2);\n    clusterConfig.setNumOfflineInstancesForAutoExit(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _manager.getHelixDataAccessor()\n        .getProperty(_manager.getHelixDataAccessor().keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _manager.getHelixDataAccessor()\n        .getProperty(_manager.getHelixDataAccessor().keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n  }\n","date":"2019-02-27 02:27:11","endLine":162,"groupId":"3220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAutoExitMaintenanceMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/51/0cfe16b15313c5673df0667ef904654c09d04b.src","preCode":"  public void testAutoExitMaintenanceMode() throws InterruptedException {\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(2);\n    clusterConfig.setNumOfflineInstancesForAutoExit(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _manager.getHelixDataAccessor()\n        .getProperty(_manager.getHelixDataAccessor().keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _manager.getHelixDataAccessor()\n        .getProperty(_manager.getHelixDataAccessor().keyBuilder().maintenance());\n    Assert.assertNull(maintenanceSignal);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterMaintenanceMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"},{"authorDate":"2019-02-26 10:05:34","commitOrder":1,"curCode":"  public void testNoAutoExitWhenManuallyPutInMaintenance() throws InterruptedException {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, true, null, null);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _manager.getHelixDataAccessor()\n        .getProperty(_manager.getHelixDataAccessor().keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n  }\n","date":"2019-02-27 02:27:11","endLine":187,"groupId":"4570","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoAutoExitWhenManuallyPutInMaintenance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/51/0cfe16b15313c5673df0667ef904654c09d04b.src","preCode":"  public void testNoAutoExitWhenManuallyPutInMaintenance() throws InterruptedException {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, true, null, null);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _manager.getHelixDataAccessor()\n        .getProperty(_manager.getHelixDataAccessor().keyBuilder().maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterMaintenanceMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"B"}],"commitId":"313affc2e020068a1e5e7c5e92224d3299b1a404","commitMessage":"@@@[HELIX-798] HELIX: Implement auto-exit of maintenance mode\n\nThis diff contains the implementation and integration of a feature addition for Helix: auto-exit of maintenance mode.\nChangelist:\n1. BestPossibleCalcStage logic was modified so that it will use a new API\n2. IntermediateCalcStage logic was modified to check if the cluster is in maintenance first\n3. enableMaintenance() API was deprecated and replaced with auto/manual APIs while preserving backward-compatibility\n4. An async stage (MaintenanceRecoveryStage) was created and added to the resource pipeline\n5. A series of integration tests were added for various exit/non-exit scenarios\n","date":"2019-02-27 02:27:11","modifiedFileCount":"12","status":"B","submitter":"narendly"},{"authorTime":"2019-02-26 10:09:08","codes":[{"authorDate":"2019-02-26 10:09:08","commitOrder":2,"curCode":"  public void testAutoExitMaintenanceMode() throws InterruptedException {\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(2);\n    clusterConfig.setNumOfflineInstancesForAutoExit(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n  }\n","date":"2019-02-27 02:27:11","endLine":171,"groupId":"3220","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAutoExitMaintenanceMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cc/f7c12854818da58733a7b98570b16dd9b7cb74.src","preCode":"  public void testAutoExitMaintenanceMode() throws InterruptedException {\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(2);\n    clusterConfig.setNumOfflineInstancesForAutoExit(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterMaintenanceMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"MB"},{"authorDate":"2019-02-26 10:09:08","commitOrder":2,"curCode":"  public void testNoAutoExitWhenManuallyPutInMaintenance() throws InterruptedException {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, true, null, null);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n  }\n","date":"2019-02-27 02:27:11","endLine":195,"groupId":"4570","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoAutoExitWhenManuallyPutInMaintenance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cc/f7c12854818da58733a7b98570b16dd9b7cb74.src","preCode":"  public void testNoAutoExitWhenManuallyPutInMaintenance() throws InterruptedException {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, true, null, null);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterMaintenanceMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"MB"}],"commitId":"4f863c3549631b5e9fccc6f40b513fff6fe435fa","commitMessage":"@@@[HELIX-801] HELIX: Implement maintenance history for maintenance mode\n\nThis diff implements maintenance history for entering and exiting maintenance mode.\nChangelist:\n1. Implement a separate DataUpdater for LeaderHistory ZNode update\n2. Implement recording of maintenance history in LeaderHistory ZNode\n3. Fix the bug where only the last few history entries are kept\n","date":"2019-02-27 02:27:11","modifiedFileCount":"10","status":"M","submitter":"narendly"},{"authorTime":"2021-06-11 08:45:03","codes":[{"authorDate":"2021-06-11 08:45:03","commitOrder":3,"curCode":"  public void testAutoExitMaintenanceMode() throws Exception {\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(2);\n    clusterConfig.setNumOfflineInstancesForAutoExit(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    TestHelper.verify(() -> _dataAccessor.getChildNames(_keyBuilder.liveInstances()).size() == 0, 2000L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    TestHelper.verify(() -> _dataAccessor.getChildNames(_keyBuilder.liveInstances()).size() == 3, 2000L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n  }\n","date":"2021-06-11 08:45:03","endLine":194,"groupId":"10573","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testAutoExitMaintenanceMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/eb/fb03e8a0251f66d6bf1fcbe2f1c8241165d76d.src","preCode":"  public void testAutoExitMaintenanceMode() throws InterruptedException {\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    clusterConfig.setMaxOfflineInstancesAllowed(2);\n    clusterConfig.setNumOfflineInstancesForAutoExit(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterMaintenanceMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2021-06-11 08:45:03","commitOrder":3,"curCode":"  public void testNoAutoExitWhenManuallyPutInMaintenance() throws Exception {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, true, null,\n        null);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      _participants[i].syncStop();\n    }\n    TestHelper.verify(() -> _dataAccessor.getChildNames(_keyBuilder.liveInstances()).size() == 0, 2000L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    TestHelper.verify(() -> _dataAccessor.getChildNames(_keyBuilder.liveInstances()).size() == 3, 2000L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n  }\n","date":"2021-06-11 08:45:03","endLine":219,"groupId":"10573","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testNoAutoExitWhenManuallyPutInMaintenance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/eb/fb03e8a0251f66d6bf1fcbe2f1c8241165d76d.src","preCode":"  public void testNoAutoExitWhenManuallyPutInMaintenance() throws InterruptedException {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, true, null,\n        null);\n\n    \r\n    for (int i = 0; i < 2; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterMaintenanceMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"146adff02e3622fb7ea0f8815312dca7c04323ae","commitMessage":"@@@Fix MaintenanceRecoveryStage Hanging (#1792)\n\nThe mainteance recovery stage should be in the order after IntermediateStage since it requires the output from IntermediateStage.","date":"2021-06-11 08:45:03","modifiedFileCount":"2","status":"M","submitter":"Junkai Xue"}]
