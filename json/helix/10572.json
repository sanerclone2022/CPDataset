[{"authorTime":"2019-02-26 10:09:08","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  private void checkRebalanceFailureGauge(final boolean expectFailure) throws Exception {\n    boolean result = TestHelper.verify(() -> {\n      try {\n        Long value =\n            (Long) _server.getAttribute(getMbeanName(CLUSTER_NAME), \"RebalanceFailureGauge\");\n        return value != null && (value == 1) == expectFailure;\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n  }\n","date":"2019-05-25 09:19:21","endLine":293,"groupId":"5670","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkRebalanceFailureGauge","params":"(finalbooleanexpectFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/e32660e02e0e1e4bdc97dcb17580e210589753.src","preCode":"  private void checkRebalanceFailureGauge(final boolean expectFailure) throws Exception {\n    boolean result = TestHelper.verify(() -> {\n      try {\n        Long value =\n            (Long) _server.getAttribute(getMbeanName(CLUSTER_NAME), \"RebalanceFailureGauge\");\n        return value != null && (value == 1) == expectFailure;\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"MB"},{"authorDate":"2019-02-26 10:09:08","commitOrder":5,"curCode":"  public void testMaxPartitionLimit() throws InterruptedException {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, false, null,\n        null);\n    Thread.sleep(500L);\n\n    \r\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    \r\n    \r\n    clusterConfig.setMaxPartitionsPerInstance(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_PARTITION_PER_INSTANCE_EXCEEDED);\n  }\n","date":"2019-02-27 02:27:11","endLine":310,"groupId":"3220","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxPartitionLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cc/f7c12854818da58733a7b98570b16dd9b7cb74.src","preCode":"  public void testMaxPartitionLimit() throws InterruptedException {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, false, null,\n        null);\n    Thread.sleep(500L);\n\n    \r\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    \r\n    \r\n    clusterConfig.setMaxPartitionsPerInstance(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_PARTITION_PER_INSTANCE_EXCEEDED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterMaintenanceMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"NB"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2021-02-18 02:14:15","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  private void checkRebalanceFailureGauge(final boolean expectFailure) throws Exception {\n    boolean result = TestHelper.verify(() -> {\n      try {\n        Long value =\n            (Long) _server.getAttribute(getMbeanName(CLUSTER_NAME), \"RebalanceFailureGauge\");\n        return value != null && (value == 1) == expectFailure;\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n  }\n","date":"2019-05-25 09:19:21","endLine":293,"groupId":"5670","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkRebalanceFailureGauge","params":"(finalbooleanexpectFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/e32660e02e0e1e4bdc97dcb17580e210589753.src","preCode":"  private void checkRebalanceFailureGauge(final boolean expectFailure) throws Exception {\n    boolean result = TestHelper.verify(() -> {\n      try {\n        Long value =\n            (Long) _server.getAttribute(getMbeanName(CLUSTER_NAME), \"RebalanceFailureGauge\");\n        return value != null && (value == 1) == expectFailure;\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"N"},{"authorDate":"2021-02-18 02:14:15","commitOrder":6,"curCode":"  public void testMaxPartitionLimit() throws Exception {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, false, null,\n        null);\n    Thread.sleep(500L);\n\n    \r\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    \r\n    \r\n    clusterConfig.setMaxPartitionsPerInstance(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_PARTITION_PER_INSTANCE_EXCEEDED);\n\n    \r\n    boolean result = TestHelper.verify(() -> {\n      try {\n        Long value =\n            (Long) _server.getAttribute(getMbeanName(CLUSTER_NAME), \"RebalanceFailureCounter\");\n        return value != null && (value > 0);\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(() -> {\n      try {\n        Long value = (Long) _server\n            .getAttribute(getMbeanName(CLUSTER_NAME), \"ContinuousTaskRebalanceFailureCount\");\n        return value != null && (value == 0);\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(() -> {\n      try {\n        Long value = (Long) _server\n            .getAttribute(getMbeanName(CLUSTER_NAME), \"ContinuousResourceRebalanceFailureCount\");\n        return value != null && (value > 0);\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n  }\n","date":"2021-02-18 02:14:15","endLine":372,"groupId":"3220","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxPartitionLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/1729e0caf74607bb8da5f83dd4b77ba677a076.src","preCode":"  public void testMaxPartitionLimit() throws InterruptedException {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, false, null,\n        null);\n    Thread.sleep(500L);\n\n    \r\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    \r\n    \r\n    clusterConfig.setMaxPartitionsPerInstance(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_PARTITION_PER_INSTANCE_EXCEEDED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterMaintenanceMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"}],"commitId":"75435094d1aebab8a087000b9ffe499173250b19","commitMessage":"@@@Add metrics for continuous resource/task rebalance failure count (#1649)\n\nAdd metrics for continuous resource/task rebalance failure count.","date":"2021-02-18 02:14:15","modifiedFileCount":"4","status":"M","submitter":"xyuanlu"},{"authorTime":"2021-06-11 08:45:03","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":7,"curCode":"  private void checkRebalanceFailureGauge(final boolean expectFailure) throws Exception {\n    boolean result = TestHelper.verify(() -> {\n      try {\n        Long value =\n            (Long) _server.getAttribute(getMbeanName(CLUSTER_NAME), \"RebalanceFailureGauge\");\n        return value != null && (value == 1) == expectFailure;\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n  }\n","date":"2019-05-25 09:19:21","endLine":293,"groupId":"10572","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkRebalanceFailureGauge","params":"(finalbooleanexpectFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/e32660e02e0e1e4bdc97dcb17580e210589753.src","preCode":"  private void checkRebalanceFailureGauge(final boolean expectFailure) throws Exception {\n    boolean result = TestHelper.verify(() -> {\n      try {\n        Long value =\n            (Long) _server.getAttribute(getMbeanName(CLUSTER_NAME), \"RebalanceFailureGauge\");\n        return value != null && (value == 1) == expectFailure;\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"N"},{"authorDate":"2021-06-11 08:45:03","commitOrder":7,"curCode":"  public void testMaxPartitionLimit() throws Exception {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, false, null,\n        null);\n    TestHelper.verify(() -> _dataAccessor.getProperty(_keyBuilder.maintenance()) != null, 2000L);\n\n    \r\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    TestHelper.verify(() -> _dataAccessor.getChildNames(_keyBuilder.liveInstances()).size() == 3, 2000L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    TestHelper.verify(() -> _dataAccessor.getChildNames(_keyBuilder.liveInstances()).size() == 0, 2000L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    \r\n    \r\n    clusterConfig.setMaxPartitionsPerInstance(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    TestHelper.verify(\n        () -> ((ClusterConfig) _dataAccessor.getProperty(_keyBuilder.clusterConfig())).getMaxPartitionsPerInstance() == 1,\n        2000L);\n\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    TestHelper.verify(() -> _dataAccessor.getChildNames(_keyBuilder.liveInstances()).size() == 3, 2000L);\n\n    \r\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_PARTITION_PER_INSTANCE_EXCEEDED);\n\n    \r\n    boolean result = TestHelper.verify(() -> {\n      try {\n        Long value =\n            (Long) _server.getAttribute(getMbeanName(CLUSTER_NAME), \"RebalanceFailureCounter\");\n        return value != null && (value > 0);\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(() -> {\n      try {\n        Long value = (Long) _server\n            .getAttribute(getMbeanName(CLUSTER_NAME), \"ContinuousTaskRebalanceFailureCount\");\n        return value != null && (value == 0);\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(() -> {\n      try {\n        Long value = (Long) _server\n            .getAttribute(getMbeanName(CLUSTER_NAME), \"ContinuousResourceRebalanceFailureCount\");\n        return value != null && (value > 0);\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n  }\n","date":"2021-06-11 08:45:03","endLine":374,"groupId":"10572","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testMaxPartitionLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/eb/fb03e8a0251f66d6bf1fcbe2f1c8241165d76d.src","preCode":"  public void testMaxPartitionLimit() throws Exception {\n    \r\n    _gSetupTool.getClusterManagementTool().manuallyEnableMaintenanceMode(CLUSTER_NAME, false, null,\n        null);\n    Thread.sleep(500L);\n\n    \r\n    \r\n    MaintenanceSignal maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNull(maintenanceSignal);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      _participants[i].syncStop();\n    }\n    Thread.sleep(500L);\n\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_OFFLINE_INSTANCES_EXCEEDED);\n\n    \r\n    ClusterConfig clusterConfig = _manager.getConfigAccessor().getClusterConfig(CLUSTER_NAME);\n    \r\n    \r\n    clusterConfig.setMaxPartitionsPerInstance(1);\n    _manager.getConfigAccessor().setClusterConfig(CLUSTER_NAME, clusterConfig);\n    Thread.sleep(500L);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].syncStart();\n    }\n    Thread.sleep(500L);\n\n    \r\n    \r\n    maintenanceSignal = _dataAccessor.getProperty(_keyBuilder.maintenance());\n    Assert.assertNotNull(maintenanceSignal);\n    Assert.assertEquals(maintenanceSignal.getTriggeringEntity(),\n        MaintenanceSignal.TriggeringEntity.CONTROLLER);\n    Assert.assertEquals(maintenanceSignal.getAutoTriggerReason(),\n        MaintenanceSignal.AutoTriggerReason.MAX_PARTITION_PER_INSTANCE_EXCEEDED);\n\n    \r\n    boolean result = TestHelper.verify(() -> {\n      try {\n        Long value =\n            (Long) _server.getAttribute(getMbeanName(CLUSTER_NAME), \"RebalanceFailureCounter\");\n        return value != null && (value > 0);\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(() -> {\n      try {\n        Long value = (Long) _server\n            .getAttribute(getMbeanName(CLUSTER_NAME), \"ContinuousTaskRebalanceFailureCount\");\n        return value != null && (value == 0);\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(() -> {\n      try {\n        Long value = (Long) _server\n            .getAttribute(getMbeanName(CLUSTER_NAME), \"ContinuousResourceRebalanceFailureCount\");\n        return value != null && (value > 0);\n      } catch (Exception e) {\n        return false;\n      }\n    }, TIMEOUT);\n    Assert.assertTrue(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterMaintenanceMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"}],"commitId":"146adff02e3622fb7ea0f8815312dca7c04323ae","commitMessage":"@@@Fix MaintenanceRecoveryStage Hanging (#1792)\n\nThe mainteance recovery stage should be in the order after IntermediateStage since it requires the output from IntermediateStage.","date":"2021-06-11 08:45:03","modifiedFileCount":"2","status":"M","submitter":"Junkai Xue"}]
