[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testCreateOrReplace()\n  {\n    String path = PropertyPathConfig.getPath(PropertyType.CONFIGS, clusterName,\n        ConfigScopeProperty.PARTICIPANT.toString(), \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","date":"2012-10-25 07:14:36","endLine":162,"groupId":"3925","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateOrReplace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/07/fa06a3b61aa2a09f9264b0b9d264b2908ed8c4.src","preCode":"  public void testCreateOrReplace()\n  {\n    String path = PropertyPathConfig.getPath(PropertyType.CONFIGS, clusterName,\n        ConfigScopeProperty.PARTICIPANT.toString(), \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testCreateOrUpdate()\n  {\n    String path = PropertyPathConfig.getPath(PropertyType.CONFIGS, clusterName,\n        ConfigScopeProperty.PARTICIPANT.toString(), \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n  }\n","date":"2012-10-25 07:14:36","endLine":147,"groupId":"3927","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateOrUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/07/fa06a3b61aa2a09f9264b0b9d264b2908ed8c4.src","preCode":"  public void testCreateOrUpdate()\n  {\n    String path = PropertyPathConfig.getPath(PropertyType.CONFIGS, clusterName,\n        ConfigScopeProperty.PARTICIPANT.toString(), \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2017-01-29 08:55:24","codes":[{"authorDate":"2017-01-29 08:55:24","commitOrder":2,"curCode":"  public void testCreateOrReplace() {\n    String path =\n        PropertyPathBuilder.getPath(PropertyType.CONFIGS, clusterName,\n            ConfigScopeProperty.PARTICIPANT.toString(), \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","date":"2017-02-02 12:19:43","endLine":157,"groupId":"3925","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateOrReplace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ed/604fa06f100c5ae66918764bbd3b99c101ff97.src","preCode":"  public void testCreateOrReplace() {\n    String path =\n        PropertyPathConfig.getPath(PropertyType.CONFIGS, clusterName,\n            ConfigScopeProperty.PARTICIPANT.toString(), \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2017-01-29 08:55:24","commitOrder":2,"curCode":"  public void testCreateOrUpdate() {\n    String path =\n        PropertyPathBuilder.getPath(PropertyType.CONFIGS, clusterName,\n            ConfigScopeProperty.PARTICIPANT.toString(), \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n  }\n","date":"2017-02-02 12:19:43","endLine":142,"groupId":"3927","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateOrUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ed/604fa06f100c5ae66918764bbd3b99c101ff97.src","preCode":"  public void testCreateOrUpdate() {\n    String path =\n        PropertyPathConfig.getPath(PropertyType.CONFIGS, clusterName,\n            ConfigScopeProperty.PARTICIPANT.toString(), \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"0b7a1a0fc93bf1f4699c45b7427663a17e94fc99","commitMessage":"@@@Rename PropertyPathConfig to PropertyPathBuilder\n","date":"2017-02-02 12:19:43","modifiedFileCount":"33","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-05-24 03:27:23","codes":[{"authorDate":"2017-05-24 03:27:23","commitOrder":3,"curCode":"  public void testCreateOrReplace() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","date":"2017-05-24 03:27:23","endLine":169,"groupId":"3925","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateOrReplace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/d30a67bacbec3f4a4b111fa59c40bc9378a7ac.src","preCode":"  public void testCreateOrReplace() {\n    String path =\n        PropertyPathBuilder.getPath(PropertyType.CONFIGS, clusterName,\n            ConfigScopeProperty.PARTICIPANT.toString(), \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2017-05-24 03:27:23","commitOrder":3,"curCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2017-05-24 03:27:23","endLine":208,"groupId":"6077","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateOrUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/d30a67bacbec3f4a4b111fa59c40bc9378a7ac.src","preCode":"  public void testCreateOrUpdate() {\n    String path =\n        PropertyPathBuilder.getPath(PropertyType.CONFIGS, clusterName,\n            ConfigScopeProperty.PARTICIPANT.toString(), \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"7c92bf543571daac555f5d8b933805dddced7ca5","commitMessage":"@@@Add support of setting/updating Cluster/Resource/Instance configs in ConfigAccessor.\n","date":"2017-05-24 03:27:23","modifiedFileCount":"7","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-05-24 03:27:23","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":4,"curCode":"  public void testCreateOrReplace() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","date":"2017-11-08 08:48:26","endLine":174,"groupId":"3925","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateOrReplace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fe/ee3e35884a1696097880a3681cdd2f9a2a1aca.src","preCode":"  public void testCreateOrReplace() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2017-05-24 03:27:23","commitOrder":4,"curCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2017-05-24 03:27:23","endLine":208,"groupId":"6077","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateOrUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/d30a67bacbec3f4a4b111fa59c40bc9378a7ac.src","preCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"N"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void testCreateOrReplace() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_gZkClient, path, record, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_gZkClient, path, record, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","date":"2018-07-14 06:55:35","endLine":163,"groupId":"3925","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateOrReplace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/29/86748058c13c0289f464893b1c9ffa9a6bf457.src","preCode":"  public void testCreateOrReplace() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_zkClient, path, record, true);\n    record = _zkClient.<ZNRecord> readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2018-07-14 06:55:35","endLine":202,"groupId":"6077","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateOrUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/29/86748058c13c0289f464893b1c9ffa9a6bf457.src","preCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-18 08:43:40","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":6,"curCode":"  public void testCreateOrReplace() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_gZkClient, path, record, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_gZkClient, path, record, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","date":"2018-07-14 06:55:35","endLine":163,"groupId":"10252","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateOrReplace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/29/86748058c13c0289f464893b1c9ffa9a6bf457.src","preCode":"  public void testCreateOrReplace() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id8\");\n    ZNRecord record = new ZNRecord(\"id8\");\n    ZKUtil.createOrReplace(_gZkClient, path, record, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id8\", record.getId());\n    record = new ZNRecord(\"id9\");\n    ZKUtil.createOrReplace(_gZkClient, path, record, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"},{"authorDate":"2019-05-18 08:43:40","commitOrder":6,"curCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id9\");\n    ZNRecord record = new ZNRecord(\"id9\");\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n\n    record = new ZNRecord(\"id9\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id9\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id9\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2019-05-25 09:19:21","endLine":202,"groupId":"10252","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateOrUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/caaf36794fa3598ffb3f897a9dd28e646875ab.src","preCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"df80d269764e13703ea1297c7b98d82ae127fc0f","commitMessage":"@@@Fix unstable test for TestZKUtil\n\nSince tests run parallel.  it caused race condition for data messed up in ZK. Fix it with different id.\n\nRB=1671516\n\nRB=1671516\nG=helix-reviewers\nA=hulee\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"1","status":"M","submitter":"Junkai Xue"}]
