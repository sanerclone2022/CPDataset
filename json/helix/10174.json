[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testConfigChangeListeners() throws Exception {\n    TestConfigListener listener = new TestConfigListener();\n    listener.reset();\n    _manager.addInstanceConfigChangeListener(listener);\n    Assert.assertTrue(listener._instanceConfigChanged,\n        \"Should get initial instanceConfig callback invoked\");\n    Assert.assertEquals(listener._instanceConfigs.size(), _numNodes,\n        \"Instance Config size does not match\");\n\n    listener.reset();\n    _manager.addClusterfigChangeListener(listener);\n    Assert.assertTrue(listener._clusterConfigChanged,\n        \"Should get initial clusterConfig callback invoked\");\n    Assert.assertNotNull(listener._clusterConfig, \"Cluster Config size should not be null\");\n\n    listener.reset();\n    _manager.addResourceConfigChangeListener(listener);\n    Assert.assertTrue(listener._resourceConfigChanged,\n        \"Should get initial resourceConfig callback invoked\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 0,\n        \"Instance Config size does not match\");\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    String instanceName = \"localhost_12918\";\n    HelixProperty value = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._instanceConfigChanged,\n        \"Should get instanceConfig callback invoked since we change instanceConfig\");\n    Assert.assertEquals(listener._instanceConfigs.size(), _numNodes,\n        \"Instance Config size does not match\");\n\n    value = accessor.getProperty(keyBuilder.clusterConfig());\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.clusterConfig(), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._clusterConfigChanged,\n        \"Should get clusterConfig callback invoked since we change clusterConfig\");\n    Assert.assertNotNull(listener._clusterConfig, \"Cluster Config size should not be null\");\n\n\n    String resourceName = \"TestDB_0\";\n    value = new HelixProperty(resourceName);\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.resourceConfig(resourceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._resourceConfigChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 1, \"Resource config size does not match\");\n\n    listener.reset();\n    accessor.removeProperty(keyBuilder.resourceConfig(resourceName));\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._resourceConfigChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 0, \"Instance Config size does not match\");\n  }\n","date":"2017-11-08 08:48:26","endLine":195,"groupId":"878","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConfigChangeListeners","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e6/249a5945c73b5436574436a9e41a55b59cec8c.src","preCode":"  public void testConfigChangeListeners() throws Exception {\n    TestConfigListener listener = new TestConfigListener();\n    listener.reset();\n    _manager.addInstanceConfigChangeListener(listener);\n    Assert.assertTrue(listener._instanceConfigChanged,\n        \"Should get initial instanceConfig callback invoked\");\n    Assert.assertEquals(listener._instanceConfigs.size(), _numNodes,\n        \"Instance Config size does not match\");\n\n    listener.reset();\n    _manager.addClusterfigChangeListener(listener);\n    Assert.assertTrue(listener._clusterConfigChanged,\n        \"Should get initial clusterConfig callback invoked\");\n    Assert.assertNotNull(listener._clusterConfig, \"Cluster Config size should not be null\");\n\n    listener.reset();\n    _manager.addResourceConfigChangeListener(listener);\n    Assert.assertTrue(listener._resourceConfigChanged,\n        \"Should get initial resourceConfig callback invoked\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 0,\n        \"Instance Config size does not match\");\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    String instanceName = \"localhost_12918\";\n    HelixProperty value = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._instanceConfigChanged,\n        \"Should get instanceConfig callback invoked since we change instanceConfig\");\n    Assert.assertEquals(listener._instanceConfigs.size(), _numNodes,\n        \"Instance Config size does not match\");\n\n    value = accessor.getProperty(keyBuilder.clusterConfig());\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.clusterConfig(), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._clusterConfigChanged,\n        \"Should get clusterConfig callback invoked since we change clusterConfig\");\n    Assert.assertNotNull(listener._clusterConfig, \"Cluster Config size should not be null\");\n\n\n    String resourceName = \"TestDB_0\";\n    value = new HelixProperty(resourceName);\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.resourceConfig(resourceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._resourceConfigChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 1, \"Resource config size does not match\");\n\n    listener.reset();\n    accessor.removeProperty(keyBuilder.resourceConfig(resourceName));\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._resourceConfigChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 0, \"Instance Config size does not match\");\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestListenerCallback.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testScopedConfigChangeListener() throws Exception {\n    TestScopedConfigListener listener = new TestScopedConfigListener();\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n    Assert.assertTrue(listener._configChanged, \"Should get initial clusterConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n    Assert\n        .assertTrue(listener._configChanged, \"Should get initial resourceConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, 0, \"Resource Config size does not match\");\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.PARTICIPANT);\n    Assert\n        .assertTrue(listener._configChanged, \"Should get initial instanceConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, _numNodes, \"Instance Config size does not match\");\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    String instanceName = \"localhost_12918\";\n    HelixProperty value = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get instanceConfig callback invoked since we change instanceConfig\");\n    Assert.assertEquals(listener._configSize, _numNodes, \"Instance Config size does not match\");\n\n    value = accessor.getProperty(keyBuilder.clusterConfig());\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newClusterValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.clusterConfig(), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get clusterConfig callback invoked since we change clusterConfig\");\n    Assert.assertEquals(listener._configSize, 1, \"Cluster Config size does not match\");\n\n    String resourceName = \"TestDB_0\";\n    value = new HelixProperty(resourceName);\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.resourceConfig(resourceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._configSize, 1, \"Resource Config size does not match\");\n\n    listener.reset();\n    accessor.removeProperty(keyBuilder.resourceConfig(resourceName));\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._configSize, 0, \"Resource Config size does not match\");\n  }\n","date":"2017-11-08 08:48:26","endLine":256,"groupId":"878","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScopedConfigChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e6/249a5945c73b5436574436a9e41a55b59cec8c.src","preCode":"  public void testScopedConfigChangeListener() throws Exception {\n    TestScopedConfigListener listener = new TestScopedConfigListener();\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n    Assert.assertTrue(listener._configChanged, \"Should get initial clusterConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n    Assert\n        .assertTrue(listener._configChanged, \"Should get initial resourceConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, 0, \"Resource Config size does not match\");\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.PARTICIPANT);\n    Assert\n        .assertTrue(listener._configChanged, \"Should get initial instanceConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, _numNodes, \"Instance Config size does not match\");\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    String instanceName = \"localhost_12918\";\n    HelixProperty value = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get instanceConfig callback invoked since we change instanceConfig\");\n    Assert.assertEquals(listener._configSize, _numNodes, \"Instance Config size does not match\");\n\n    value = accessor.getProperty(keyBuilder.clusterConfig());\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newClusterValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.clusterConfig(), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get clusterConfig callback invoked since we change clusterConfig\");\n    Assert.assertEquals(listener._configSize, 1, \"Cluster Config size does not match\");\n\n    String resourceName = \"TestDB_0\";\n    value = new HelixProperty(resourceName);\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.resourceConfig(resourceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._configSize, 1, \"Resource Config size does not match\");\n\n    listener.reset();\n    accessor.removeProperty(keyBuilder.resourceConfig(resourceName));\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._configSize, 0, \"Resource Config size does not match\");\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestListenerCallback.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2020-10-08 08:12:34","codes":[{"authorDate":"2020-10-08 08:12:34","commitOrder":2,"curCode":"  public void testConfigChangeListeners() throws Exception {\n    TestConfigListener listener = new TestConfigListener();\n    listener.reset();\n    _manager.addInstanceConfigChangeListener(listener);\n    boolean result = TestHelper.verify(()-> {\n      return listener._instanceConfigChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result, \"Should get initial instanceConfig callback invoked\");\n    Assert.assertEquals(listener._instanceConfigs.size(), _numNodes,\n        \"Instance Config size does not match\");\n\n    listener.reset();\n    _manager.addClusterfigChangeListener(listener);\n    result = TestHelper.verify(()-> {\n      return listener._clusterConfigChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result, \"Should get initial clusterConfig callback invoked\");\n    Assert.assertNotNull(listener._clusterConfig, \"Cluster Config size should not be null\");\n\n    listener.reset();\n    _manager.addResourceConfigChangeListener(listener);\n    result = TestHelper.verify(()-> {\n      return listener._resourceConfigChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result, \"Should get initial resourceConfig callback invoked\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 0, \"resource config size does not match\");\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    String instanceName = \"localhost_12918\";\n    HelixProperty value = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), value);\n    result = TestHelper.verify(()-> {\n      return listener._instanceConfigChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result, \"Should get instanceConfig callback invoked since we change instanceConfig\");\n    Assert.assertEquals(listener._instanceConfigs.size(), _numNodes,\n        \"Instance Config size does not match\");\n\n    value = accessor.getProperty(keyBuilder.clusterConfig());\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.clusterConfig(), value);\n    result = TestHelper.verify(()-> {\n      return listener._clusterConfigChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result, \"Should get clusterConfig callback invoked since we change clusterConfig\");\n    Assert.assertNotNull(listener._clusterConfig, \"Cluster Config size should not be null\");\n\n    String resourceName = \"TestDB_0\";\n    value = new HelixProperty(resourceName);\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.resourceConfig(resourceName), value);\n    result = TestHelper.verify(()-> {\n      return listener._resourceConfigChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result, \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 1, \"Resource config size does not match\");\n\n    listener.reset();\n    accessor.removeProperty(keyBuilder.resourceConfig(resourceName));\n    result = TestHelper.verify(()-> {\n      return listener._resourceConfigChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result, \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 0, \"Instance Config size does not match\");\n  }\n","date":"2020-10-08 08:12:34","endLine":200,"groupId":"10174","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testConfigChangeListeners","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/14b82e4a9be965ac74dbd89ef15edc5ff9eb75.src","preCode":"  public void testConfigChangeListeners() throws Exception {\n    TestConfigListener listener = new TestConfigListener();\n    listener.reset();\n    _manager.addInstanceConfigChangeListener(listener);\n    Assert.assertTrue(listener._instanceConfigChanged,\n        \"Should get initial instanceConfig callback invoked\");\n    Assert.assertEquals(listener._instanceConfigs.size(), _numNodes,\n        \"Instance Config size does not match\");\n\n    listener.reset();\n    _manager.addClusterfigChangeListener(listener);\n    Assert.assertTrue(listener._clusterConfigChanged,\n        \"Should get initial clusterConfig callback invoked\");\n    Assert.assertNotNull(listener._clusterConfig, \"Cluster Config size should not be null\");\n\n    listener.reset();\n    _manager.addResourceConfigChangeListener(listener);\n    Assert.assertTrue(listener._resourceConfigChanged,\n        \"Should get initial resourceConfig callback invoked\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 0, \"Instance Config size does not match\");\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    String instanceName = \"localhost_12918\";\n    HelixProperty value = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._instanceConfigChanged,\n        \"Should get instanceConfig callback invoked since we change instanceConfig\");\n    Assert.assertEquals(listener._instanceConfigs.size(), _numNodes,\n        \"Instance Config size does not match\");\n\n    value = accessor.getProperty(keyBuilder.clusterConfig());\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.clusterConfig(), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._clusterConfigChanged,\n        \"Should get clusterConfig callback invoked since we change clusterConfig\");\n    Assert.assertNotNull(listener._clusterConfig, \"Cluster Config size should not be null\");\n\n    String resourceName = \"TestDB_0\";\n    value = new HelixProperty(resourceName);\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.resourceConfig(resourceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._resourceConfigChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 1, \"Resource config size does not match\");\n\n    listener.reset();\n    accessor.removeProperty(keyBuilder.resourceConfig(resourceName));\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._resourceConfigChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._resourceConfigs.size(), 0, \"Instance Config size does not match\");\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestListenerCallback.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2020-10-08 08:12:34","commitOrder":2,"curCode":"  public void testScopedConfigChangeListener() throws Exception {\n    TestScopedConfigListener listener = new TestScopedConfigListener();\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n    boolean result = TestHelper.verify(()-> {\n      return listener._configChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result,\"Should get initial clusterConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n    result = TestHelper.verify(()-> {\n      return listener._configChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result,\n        \"Should get initial resourceConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, 0, \"Resource Config size does not match\");\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.PARTICIPANT);\n    result = TestHelper.verify(()-> {\n      return listener._configChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result,\"Should get initial resourceConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, _numNodes, \"Instance Config size does not match\");\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    String instanceName = \"localhost_12918\";\n    HelixProperty value = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), value);\n    result = TestHelper.verify(()-> {\n      return listener._configChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result,\n        \"Should get instanceConfig callback invoked since we change instanceConfig\");\n    Assert.assertEquals(listener._configSize, _numNodes, \"Instance Config size does not match\");\n\n    value = accessor.getProperty(keyBuilder.clusterConfig());\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newClusterValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.clusterConfig(), value);\n    result = TestHelper.verify(()-> {\n      return listener._configChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result,\n        \"Should get clusterConfig callback invoked since we change clusterConfig\");\n    Assert.assertEquals(listener._configSize, 1, \"Cluster Config size does not match\");\n\n    String resourceName = \"TestDB_0\";\n    value = new HelixProperty(resourceName);\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.resourceConfig(resourceName), value);\n    result = TestHelper.verify(()-> {\n      return listener._configChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._configSize, 1, \"Resource Config size does not match\");\n\n    listener.reset();\n    accessor.removeProperty(keyBuilder.resourceConfig(resourceName));\n    result = TestHelper.verify(()-> {\n      return listener._configChanged;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._configSize, 0, \"Resource Config size does not match\");\n  }\n","date":"2020-10-08 08:12:34","endLine":277,"groupId":"10174","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testScopedConfigChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/14b82e4a9be965ac74dbd89ef15edc5ff9eb75.src","preCode":"  public void testScopedConfigChangeListener() throws Exception {\n    TestScopedConfigListener listener = new TestScopedConfigListener();\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.CLUSTER);\n    Assert.assertTrue(listener._configChanged, \"Should get initial clusterConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, 1, \"Cluster Config size should be 1\");\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.RESOURCE);\n    Assert.assertTrue(listener._configChanged,\n        \"Should get initial resourceConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, 0, \"Resource Config size does not match\");\n\n    listener.reset();\n    _manager.addConfigChangeListener(listener, ConfigScopeProperty.PARTICIPANT);\n    Assert.assertTrue(listener._configChanged,\n        \"Should get initial instanceConfig callback invoked\");\n    Assert.assertEquals(listener._configSize, _numNodes, \"Instance Config size does not match\");\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    Builder keyBuilder = accessor.keyBuilder();\n    String instanceName = \"localhost_12918\";\n    HelixProperty value = accessor.getProperty(keyBuilder.instanceConfig(instanceName));\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.instanceConfig(instanceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get instanceConfig callback invoked since we change instanceConfig\");\n    Assert.assertEquals(listener._configSize, _numNodes, \"Instance Config size does not match\");\n\n    value = accessor.getProperty(keyBuilder.clusterConfig());\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newClusterValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.clusterConfig(), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get clusterConfig callback invoked since we change clusterConfig\");\n    Assert.assertEquals(listener._configSize, 1, \"Cluster Config size does not match\");\n\n    String resourceName = \"TestDB_0\";\n    value = new HelixProperty(resourceName);\n    value._record.setSimpleField(\"\" + System.currentTimeMillis(), \"newValue\");\n    listener.reset();\n    accessor.setProperty(keyBuilder.resourceConfig(resourceName), value);\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._configSize, 1, \"Resource Config size does not match\");\n\n    listener.reset();\n    accessor.removeProperty(keyBuilder.resourceConfig(resourceName));\n    Thread.sleep(500); \r\n    Assert.assertTrue(listener._configChanged,\n        \"Should get resourceConfig callback invoked since we add resourceConfig\");\n    Assert.assertEquals(listener._configSize, 0, \"Resource Config size does not match\");\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestListenerCallback.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"aaa6a7c900408ff7becfe49449e038bf09cb72f4","commitMessage":"@@@Replace Thread.sleep() with TestHelper.verify() to fix the flaky unit tests (#1447)\n\nQuite some unit test still use Thread.sleep(xxx) to wait for a condition to happen. This is a source of falkiness of test. This may also make the test running unnecessarily long. We address this issue with TestHelper.verify() method.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-10-08 08:12:34","modifiedFileCount":"8","status":"M","submitter":"kaisun2000"}]
