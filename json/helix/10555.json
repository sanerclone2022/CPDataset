[{"authorTime":"2013-08-03 07:45:36","codes":[{"authorDate":"2015-05-12 01:54:27","commitOrder":3,"curCode":"    public void run() {\n      try {\n        StateMachineEngine stateMach = getStateMachineEngine();\n        MockProcess.MockOnlineOfflineStateModelFactory\n            ofModelFactory =\n            new MockProcess.MockOnlineOfflineStateModelFactory(10, _resourceName, _instanceGroup,\n                getInstanceName());\n        stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n        connect();\n        _startCountDown.countDown();\n\n        _stopCountDown.await();\n      } catch (InterruptedException e) {\n        String msg =\n            \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n                + \" is interrupted\";\n        LOG.info(msg);\n      } catch (Exception e) {\n        LOG.error(\"exception running participant-manager\", e);\n      } finally {\n        _startCountDown.countDown();\n\n        disconnect();\n        _waitStopCompleteCountDown.countDown();\n      }\n    }\n","date":"2015-07-10 13:37:54","endLine":453,"groupId":"908","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/34/66b2f5791be0f37fe940ade331fd84a8303c91.src","preCode":"    public void run() {\n      try {\n        StateMachineEngine stateMach = getStateMachineEngine();\n        MockProcess.MockOnlineOfflineStateModelFactory\n            ofModelFactory =\n            new MockProcess.MockOnlineOfflineStateModelFactory(10, _resourceName, _instanceGroup,\n                getInstanceName());\n        stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n        connect();\n        _startCountDown.countDown();\n\n        _stopCountDown.await();\n      } catch (InterruptedException e) {\n        String msg =\n            \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n                + \" is interrupted\";\n        LOG.info(msg);\n      } catch (Exception e) {\n        LOG.error(\"exception running participant-manager\", e);\n      } finally {\n        _startCountDown.countDown();\n\n        disconnect();\n        _waitStopCompleteCountDown.countDown();\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"B"},{"authorDate":"2013-08-03 07:45:36","commitOrder":3,"curCode":"  public void run()\n  {\n    try\n    {\n      StateMachineEngine stateMach = getStateMachineEngine();\n      stateMach.registerStateModelFactory(\"MasterSlave\", _msModelFactory);\n\n      DummyLeaderStandbyStateModelFactory lsModelFactory =\n          new DummyLeaderStandbyStateModelFactory(10);\n      DummyOnlineOfflineStateModelFactory ofModelFactory =\n          new DummyOnlineOfflineStateModelFactory(10);\n      stateMach.registerStateModelFactory(\"LeaderStandby\", lsModelFactory);\n      stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n      MockSchemataModelFactory schemataFactory = new MockSchemataModelFactory();\n      stateMach.registerStateModelFactory(\"STORAGE_DEFAULT_SM_SCHEMATA\", schemataFactory);\n\n      connect();\n      _startCountDown.countDown();\n\n      _stopCountDown.await();\n    }\n    catch (InterruptedException e)\n    {\n      String msg =\n          \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n              + \" is interrupted\";\n      LOG.info(msg);\n    }\n    catch (Exception e)\n    {\n      LOG.error(\"exception running participant-manager\", e);\n    }\n    finally\n    {\n      _startCountDown.countDown();\n\n      disconnect();\n      _waitStopCompleteCountDown.countDown();\n    }\n  }\n","date":"2013-08-03 07:45:36","endLine":124,"groupId":"908","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d9/3804c1a866664e3f1f61fb6a93718c22ecbd7f.src","preCode":"  public void run()\n  {\n    try\n    {\n      StateMachineEngine stateMach = getStateMachineEngine();\n      stateMach.registerStateModelFactory(\"MasterSlave\", _msModelFactory);\n\n      DummyLeaderStandbyStateModelFactory lsModelFactory =\n          new DummyLeaderStandbyStateModelFactory(10);\n      DummyOnlineOfflineStateModelFactory ofModelFactory =\n          new DummyOnlineOfflineStateModelFactory(10);\n      stateMach.registerStateModelFactory(\"LeaderStandby\", lsModelFactory);\n      stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n      MockSchemataModelFactory schemataFactory = new MockSchemataModelFactory();\n      stateMach.registerStateModelFactory(\"STORAGE_DEFAULT_SM_SCHEMATA\", schemataFactory);\n\n      connect();\n      _startCountDown.countDown();\n\n      _stopCountDown.await();\n    }\n    catch (InterruptedException e)\n    {\n      String msg =\n          \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n              + \" is interrupted\";\n      LOG.info(msg);\n    }\n    catch (Exception e)\n    {\n      LOG.error(\"exception running participant-manager\", e);\n    }\n    finally\n    {\n      _startCountDown.countDown();\n\n      disconnect();\n      _waitStopCompleteCountDown.countDown();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"NB"}],"commitId":"a23beb7cf79a3f1da104a55477c7eddb594fa68b","commitMessage":"@@@[HELIX-599] Support creating/maintaining/routing resources with same names in different instance groups.\n","date":"2015-07-10 13:37:54","modifiedFileCount":"9","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-06-17 03:06:34","codes":[{"authorDate":"2015-05-12 01:54:27","commitOrder":4,"curCode":"    public void run() {\n      try {\n        StateMachineEngine stateMach = getStateMachineEngine();\n        MockProcess.MockOnlineOfflineStateModelFactory\n            ofModelFactory =\n            new MockProcess.MockOnlineOfflineStateModelFactory(10, _resourceName, _instanceGroup,\n                getInstanceName());\n        stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n        connect();\n        _startCountDown.countDown();\n\n        _stopCountDown.await();\n      } catch (InterruptedException e) {\n        String msg =\n            \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n                + \" is interrupted\";\n        LOG.info(msg);\n      } catch (Exception e) {\n        LOG.error(\"exception running participant-manager\", e);\n      } finally {\n        _startCountDown.countDown();\n\n        disconnect();\n        _waitStopCompleteCountDown.countDown();\n      }\n    }\n","date":"2015-07-10 13:37:54","endLine":453,"groupId":"908","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/34/66b2f5791be0f37fe940ade331fd84a8303c91.src","preCode":"    public void run() {\n      try {\n        StateMachineEngine stateMach = getStateMachineEngine();\n        MockProcess.MockOnlineOfflineStateModelFactory\n            ofModelFactory =\n            new MockProcess.MockOnlineOfflineStateModelFactory(10, _resourceName, _instanceGroup,\n                getInstanceName());\n        stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n        connect();\n        _startCountDown.countDown();\n\n        _stopCountDown.await();\n      } catch (InterruptedException e) {\n        String msg =\n            \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n                + \" is interrupted\";\n        LOG.info(msg);\n      } catch (Exception e) {\n        LOG.error(\"exception running participant-manager\", e);\n      } finally {\n        _startCountDown.countDown();\n\n        disconnect();\n        _waitStopCompleteCountDown.countDown();\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"N"},{"authorDate":"2016-06-17 03:06:34","commitOrder":4,"curCode":"  public void run() {\n    try {\n      StateMachineEngine stateMach = getStateMachineEngine();\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.MasterSlave.name(),\n          _msModelFactory);\n\n      DummyLeaderStandbyStateModelFactory lsModelFactory =\n          new DummyLeaderStandbyStateModelFactory(10);\n      DummyOnlineOfflineStateModelFactory ofModelFactory =\n          new DummyOnlineOfflineStateModelFactory(10);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.LeaderStandby.name(),\n          lsModelFactory);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.OnlineOffline.name(),\n          ofModelFactory);\n\n      MockSchemataModelFactory schemataFactory = new MockSchemataModelFactory();\n      stateMach.registerStateModelFactory(\"STORAGE_DEFAULT_SM_SCHEMATA\", schemataFactory);\n\n      connect();\n      _startCountDown.countDown();\n\n      _stopCountDown.await();\n    } catch (InterruptedException e) {\n      String msg =\n          \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n              + \" is interrupted\";\n      LOG.info(msg);\n    } catch (Exception e) {\n      LOG.error(\"exception running participant-manager\", e);\n    } finally {\n      _startCountDown.countDown();\n\n      disconnect();\n      _waitStopCompleteCountDown.countDown();\n    }\n  }\n","date":"2016-09-13 01:06:33","endLine":109,"groupId":"908","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/51/dd19d0060299d29bcb01acc5709af28180ab6c.src","preCode":"  public void run() {\n    try {\n      StateMachineEngine stateMach = getStateMachineEngine();\n      stateMach.registerStateModelFactory(\"MasterSlave\", _msModelFactory);\n\n      DummyLeaderStandbyStateModelFactory lsModelFactory =\n          new DummyLeaderStandbyStateModelFactory(10);\n      DummyOnlineOfflineStateModelFactory ofModelFactory =\n          new DummyOnlineOfflineStateModelFactory(10);\n      stateMach.registerStateModelFactory(\"LeaderStandby\", lsModelFactory);\n      stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n      MockSchemataModelFactory schemataFactory = new MockSchemataModelFactory();\n      stateMach.registerStateModelFactory(\"STORAGE_DEFAULT_SM_SCHEMATA\", schemataFactory);\n\n      connect();\n      _startCountDown.countDown();\n\n      _stopCountDown.await();\n    } catch (InterruptedException e) {\n      String msg =\n          \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n              + \" is interrupted\";\n      LOG.info(msg);\n    } catch (Exception e) {\n      LOG.error(\"exception running participant-manager\", e);\n    } finally {\n      _startCountDown.countDown();\n\n      disconnect();\n      _waitStopCompleteCountDown.countDown();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"7147ec874e912f27905c299fefe0d09ca31ebd42","commitMessage":"@@@[HELIX-568] Add new topology aware (rack-aware) rebalance strategy based on CRUSH algorithm.\nDesign doc is available at: https://cwiki.apache.org/confluence/display/HELIX/Helix+Topology-aware+Rebalance+Strategy\n","date":"2016-09-13 01:06:33","modifiedFileCount":"12","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2015-05-12 01:54:27","commitOrder":5,"curCode":"    public void run() {\n      try {\n        StateMachineEngine stateMach = getStateMachineEngine();\n        MockProcess.MockOnlineOfflineStateModelFactory\n            ofModelFactory =\n            new MockProcess.MockOnlineOfflineStateModelFactory(10, _resourceName, _instanceGroup,\n                getInstanceName());\n        stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n        connect();\n        _startCountDown.countDown();\n\n        _stopCountDown.await();\n      } catch (InterruptedException e) {\n        String msg =\n            \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n                + \" is interrupted\";\n        LOG.info(msg);\n      } catch (Exception e) {\n        LOG.error(\"exception running participant-manager\", e);\n      } finally {\n        _startCountDown.countDown();\n\n        disconnect();\n        _waitStopCompleteCountDown.countDown();\n      }\n    }\n","date":"2015-07-10 13:37:54","endLine":453,"groupId":"908","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/34/66b2f5791be0f37fe940ade331fd84a8303c91.src","preCode":"    public void run() {\n      try {\n        StateMachineEngine stateMach = getStateMachineEngine();\n        MockProcess.MockOnlineOfflineStateModelFactory\n            ofModelFactory =\n            new MockProcess.MockOnlineOfflineStateModelFactory(10, _resourceName, _instanceGroup,\n                getInstanceName());\n        stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n        connect();\n        _startCountDown.countDown();\n\n        _stopCountDown.await();\n      } catch (InterruptedException e) {\n        String msg =\n            \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n                + \" is interrupted\";\n        LOG.info(msg);\n      } catch (Exception e) {\n        LOG.error(\"exception running participant-manager\", e);\n      } finally {\n        _startCountDown.countDown();\n\n        disconnect();\n        _waitStopCompleteCountDown.countDown();\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"N"},{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void run() {\n    try {\n      StateMachineEngine stateMach = getStateMachineEngine();\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.MasterSlave.name(),\n          _msModelFactory);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.LeaderStandby.name(),\n          _lsModelFactory);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.OnlineOffline.name(),\n          _ofModelFactory);\n\n      MockSchemataModelFactory schemataFactory = new MockSchemataModelFactory();\n      stateMach.registerStateModelFactory(\"STORAGE_DEFAULT_SM_SCHEMATA\", schemataFactory);\n\n      connect();\n      _startCountDown.countDown();\n\n      _stopCountDown.await();\n    } catch (InterruptedException e) {\n      String msg =\n          \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n              + \" is interrupted\";\n      LOG.info(msg);\n    } catch (Exception e) {\n      LOG.error(\"exception running participant-manager\", e);\n    } finally {\n      _startCountDown.countDown();\n\n      disconnect();\n      _waitStopCompleteCountDown.countDown();\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":119,"groupId":"908","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/35/0ecd142aeb62ca540e81b33b00845db03a3c9f.src","preCode":"  public void run() {\n    try {\n      StateMachineEngine stateMach = getStateMachineEngine();\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.MasterSlave.name(),\n          _msModelFactory);\n\n      DummyLeaderStandbyStateModelFactory lsModelFactory =\n          new DummyLeaderStandbyStateModelFactory(10);\n      DummyOnlineOfflineStateModelFactory ofModelFactory =\n          new DummyOnlineOfflineStateModelFactory(10);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.LeaderStandby.name(),\n          lsModelFactory);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.OnlineOffline.name(),\n          ofModelFactory);\n\n      MockSchemataModelFactory schemataFactory = new MockSchemataModelFactory();\n      stateMach.registerStateModelFactory(\"STORAGE_DEFAULT_SM_SCHEMATA\", schemataFactory);\n\n      connect();\n      _startCountDown.countDown();\n\n      _stopCountDown.await();\n    } catch (InterruptedException e) {\n      String msg =\n          \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n              + \" is interrupted\";\n      LOG.info(msg);\n    } catch (Exception e) {\n      LOG.error(\"exception running participant-manager\", e);\n    } finally {\n      _startCountDown.countDown();\n\n      disconnect();\n      _waitStopCompleteCountDown.countDown();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-06-06 10:55:06","codes":[{"authorDate":"2015-05-12 01:54:27","commitOrder":6,"curCode":"    public void run() {\n      try {\n        StateMachineEngine stateMach = getStateMachineEngine();\n        MockProcess.MockOnlineOfflineStateModelFactory\n            ofModelFactory =\n            new MockProcess.MockOnlineOfflineStateModelFactory(10, _resourceName, _instanceGroup,\n                getInstanceName());\n        stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n        connect();\n        _startCountDown.countDown();\n\n        _stopCountDown.await();\n      } catch (InterruptedException e) {\n        String msg =\n            \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n                + \" is interrupted\";\n        LOG.info(msg);\n      } catch (Exception e) {\n        LOG.error(\"exception running participant-manager\", e);\n      } finally {\n        _startCountDown.countDown();\n\n        disconnect();\n        _waitStopCompleteCountDown.countDown();\n      }\n    }\n","date":"2015-07-10 13:37:54","endLine":453,"groupId":"10555","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/34/66b2f5791be0f37fe940ade331fd84a8303c91.src","preCode":"    public void run() {\n      try {\n        StateMachineEngine stateMach = getStateMachineEngine();\n        MockProcess.MockOnlineOfflineStateModelFactory\n            ofModelFactory =\n            new MockProcess.MockOnlineOfflineStateModelFactory(10, _resourceName, _instanceGroup,\n                getInstanceName());\n        stateMach.registerStateModelFactory(\"OnlineOffline\", ofModelFactory);\n\n        connect();\n        _startCountDown.countDown();\n\n        _stopCountDown.await();\n      } catch (InterruptedException e) {\n        String msg =\n            \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n                + \" is interrupted\";\n        LOG.info(msg);\n      } catch (Exception e) {\n        LOG.error(\"exception running participant-manager\", e);\n      } finally {\n        _startCountDown.countDown();\n\n        disconnect();\n        _waitStopCompleteCountDown.countDown();\n      }\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"N"},{"authorDate":"2020-06-06 10:55:06","commitOrder":6,"curCode":"  public void run() {\n    try {\n      StateMachineEngine stateMach = getStateMachineEngine();\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.MasterSlave.name(),\n          _msModelFactory);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.LeaderStandby.name(),\n          _lsModelFactory);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.OnlineOffline.name(),\n          _ofModelFactory);\n\n      MockSchemataModelFactory schemataFactory = new MockSchemataModelFactory();\n      stateMach.registerStateModelFactory(\"STORAGE_DEFAULT_SM_SCHEMATA\", schemataFactory);\n\n      connect();\n      _startCountDown.countDown();\n\n      _stopCountDown.await();\n    } catch (InterruptedException e) {\n      String msg =\n          \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n              + \" is interrupted\";\n      LOG.info(msg);\n    } catch (Exception e) {\n      LOG.error(\"exception running participant-manager\", e);\n    } finally {\n      _startCountDown.countDown();\n\n      disconnect();\n      _waitStopFinishCountDown.countDown();\n    }\n  }\n","date":"2020-06-25 06:08:23","endLine":115,"groupId":"10555","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/1983a8e843153524f5a9883f2db2db545e9e3c.src","preCode":"  public void run() {\n    try {\n      StateMachineEngine stateMach = getStateMachineEngine();\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.MasterSlave.name(),\n          _msModelFactory);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.LeaderStandby.name(),\n          _lsModelFactory);\n      stateMach.registerStateModelFactory(BuiltInStateModelDefinitions.OnlineOffline.name(),\n          _ofModelFactory);\n\n      MockSchemataModelFactory schemataFactory = new MockSchemataModelFactory();\n      stateMach.registerStateModelFactory(\"STORAGE_DEFAULT_SM_SCHEMATA\", schemataFactory);\n\n      connect();\n      _startCountDown.countDown();\n\n      _stopCountDown.await();\n    } catch (InterruptedException e) {\n      String msg =\n          \"participant: \" + getInstanceName() + \", \" + Thread.currentThread().getName()\n              + \" is interrupted\";\n      LOG.info(msg);\n    } catch (Exception e) {\n      LOG.error(\"exception running participant-manager\", e);\n    } finally {\n      _startCountDown.countDown();\n\n      disconnect();\n      _waitStopCompleteCountDown.countDown();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"842bf1f9290cf30e946ff2bc8377b3e2f6014554","commitMessage":"@@@Fix leaking Zk path watch and Callbackhandler issue (#1035)\n\nShort term fix #1034. Get rid of dangling CallbackHandlers and its\nrelated current state parent path in Zookeeper. Get rid of leaking\nof current state znode path due to async nature of deletion of\ncurrent state znode path to installatio of watcher in various\nthread in Helix.","date":"2020-06-25 06:08:23","modifiedFileCount":"10","status":"M","submitter":"kaisun2000"}]
