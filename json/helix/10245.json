[{"authorTime":"2013-08-17 04:53:40","codes":[{"authorDate":"2013-08-17 04:53:40","commitOrder":1,"curCode":"  public void testSyncSet()\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n    \n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    BaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    \n    boolean success = accessor.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n    \n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-08-17 04:53:40","endLine":69,"groupId":"4588","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSyncSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b1/2010582106956cb88c2303a9e00d034af8752e.src","preCode":"  public void testSyncSet()\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n    \n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    BaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    \n    boolean success = accessor.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n    \n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2013-08-17 04:53:40","commitOrder":1,"curCode":"  public void testSyncGet()\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n    \n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    \n    Stat stat = new Stat();\n    ZNRecord getRecord = accessor.get(path, stat, 0);\n    Assert.assertNull(getRecord);\n    \n    try {\n      accessor.get(path, stat, AccessOption.THROW_EXCEPTION_IFNOTEXIST);\n      Assert.fail(\"Should throw exception if not exist\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    boolean success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n\n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n    Assert.assertEquals(stat.getVersion(), 0);\n    \n    record.setSimpleField(\"key0\", \"value0\");\n    success = accessor.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    \n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(record.getSimpleFields().size(), 1);\n    Assert.assertNotNull(getRecord.getSimpleField(\"key0\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key0\"), \"value0\");\n    Assert.assertEquals(stat.getVersion(), 1);\n    \n    ZNRecord newRecord = new ZNRecord(\"msg_0\");\n    newRecord.setSimpleField(\"key1\", \"value1\");\n    success = accessor.update(path, new ZNRecordUpdater(newRecord), AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    \n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getSimpleFields().size(), 2);\n    Assert.assertNotNull(getRecord.getSimpleField(\"key0\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key0\"), \"value0\");\n    Assert.assertNotNull(getRecord.getSimpleField(\"key1\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key1\"), \"value1\");\n    Assert.assertEquals(stat.getVersion(), 2);\n    \n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-17 04:53:40","endLine":325,"groupId":"6456","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSyncGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b1/2010582106956cb88c2303a9e00d034af8752e.src","preCode":"  public void testSyncGet()\n  {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n    \n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    \n    Stat stat = new Stat();\n    ZNRecord getRecord = accessor.get(path, stat, 0);\n    Assert.assertNull(getRecord);\n    \n    try {\n      accessor.get(path, stat, AccessOption.THROW_EXCEPTION_IFNOTEXIST);\n      Assert.fail(\"Should throw exception if not exist\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    boolean success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n\n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n    Assert.assertEquals(stat.getVersion(), 0);\n    \n    record.setSimpleField(\"key0\", \"value0\");\n    success = accessor.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    \n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(record.getSimpleFields().size(), 1);\n    Assert.assertNotNull(getRecord.getSimpleField(\"key0\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key0\"), \"value0\");\n    Assert.assertEquals(stat.getVersion(), 1);\n    \n    ZNRecord newRecord = new ZNRecord(\"msg_0\");\n    newRecord.setSimpleField(\"key1\", \"value1\");\n    success = accessor.update(path, new ZNRecordUpdater(newRecord), AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    \n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getSimpleFields().size(), 2);\n    Assert.assertNotNull(getRecord.getSimpleField(\"key0\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key0\"), \"value0\");\n    Assert.assertNotNull(getRecord.getSimpleField(\"key1\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key1\"), \"value1\");\n    Assert.assertEquals(stat.getVersion(), 2);\n    \n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"B"}],"commitId":"4a46ae055a877737c8eeda63e7c0917d48dc9d2b","commitMessage":"@@@[HELIX-210] Add support to set data with expect version in BaseDataAccessor.  rb=13581\n","date":"2013-08-17 04:53:40","modifiedFileCount":"6","status":"B","submitter":"zzhang"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testSyncSet() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    BaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":79,"groupId":"10245","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSyncSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/7b9735c791b3f86a83a7ba7ab2cf5594075d9e.src","preCode":"  public void testSyncSet() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    BaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    boolean success = accessor.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n    ZNRecord getRecord = _gZkClient.readData(path);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testSyncGet() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", _rootPath, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    Stat stat = new Stat();\n    ZNRecord getRecord = accessor.get(path, stat, 0);\n    Assert.assertNull(getRecord);\n\n    try {\n      accessor.get(path, stat, AccessOption.THROW_EXCEPTION_IFNOTEXIST);\n      Assert.fail(\"Should throw exception if not exist\");\n    } catch (Exception e) {\n      \r\n    }\n\n    boolean success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n\n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n    Assert.assertEquals(stat.getVersion(), 0);\n\n    record.setSimpleField(\"key0\", \"value0\");\n    success = accessor.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n\n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(record.getSimpleFields().size(), 1);\n    Assert.assertNotNull(getRecord.getSimpleField(\"key0\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key0\"), \"value0\");\n    Assert.assertEquals(stat.getVersion(), 1);\n\n    ZNRecord newRecord = new ZNRecord(\"msg_0\");\n    newRecord.setSimpleField(\"key1\", \"value1\");\n    success = accessor.update(path, new ZNRecordUpdater(newRecord), AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n\n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getSimpleFields().size(), 2);\n    Assert.assertNotNull(getRecord.getSimpleField(\"key0\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key0\"), \"value0\");\n    Assert.assertNotNull(getRecord.getSimpleField(\"key1\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key1\"), \"value1\");\n    Assert.assertEquals(stat.getVersion(), 2);\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":321,"groupId":"10245","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSyncGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/7b9735c791b3f86a83a7ba7ab2cf5594075d9e.src","preCode":"  public void testSyncGet() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String testName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String path = String.format(\"/%s/%s\", testName, \"msg_0\");\n    ZNRecord record = new ZNRecord(\"msg_0\");\n    ZkBaseDataAccessor<ZNRecord> accessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    Stat stat = new Stat();\n    ZNRecord getRecord = accessor.get(path, stat, 0);\n    Assert.assertNull(getRecord);\n\n    try {\n      accessor.get(path, stat, AccessOption.THROW_EXCEPTION_IFNOTEXIST);\n      Assert.fail(\"Should throw exception if not exist\");\n    } catch (Exception e) {\n      \r\n    }\n\n    boolean success = accessor.create(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n\n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getId(), \"msg_0\");\n    Assert.assertEquals(stat.getVersion(), 0);\n\n    record.setSimpleField(\"key0\", \"value0\");\n    success = accessor.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n\n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(record.getSimpleFields().size(), 1);\n    Assert.assertNotNull(getRecord.getSimpleField(\"key0\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key0\"), \"value0\");\n    Assert.assertEquals(stat.getVersion(), 1);\n\n    ZNRecord newRecord = new ZNRecord(\"msg_0\");\n    newRecord.setSimpleField(\"key1\", \"value1\");\n    success = accessor.update(path, new ZNRecordUpdater(newRecord), AccessOption.PERSISTENT);\n    Assert.assertTrue(success);\n\n    getRecord = accessor.get(path, stat, 0);\n    Assert.assertNotNull(getRecord);\n    Assert.assertEquals(getRecord.getSimpleFields().size(), 2);\n    Assert.assertNotNull(getRecord.getSimpleField(\"key0\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key0\"), \"value0\");\n    Assert.assertNotNull(getRecord.getSimpleField(\"key1\"));\n    Assert.assertEquals(getRecord.getSimpleField(\"key1\"), \"value1\");\n    Assert.assertEquals(stat.getVersion(), 2);\n\n    System.out.println(\"END \" + testName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"}]
