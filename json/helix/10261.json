[{"authorTime":"2018-04-28 00:50:22","codes":[{"authorDate":"2017-10-10 05:52:19","commitOrder":2,"curCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled) throws Exception {\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[]{db}, numPartition, BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig,\n            null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput = populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance =\n        getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageSelectionStageOutput messageOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p), MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","date":"2018-01-25 10:30:30","endLine":137,"groupId":"1878","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testP2PMessage","params":"(ClusterConfigclusterConfig@Booleanp2pMessageEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1a/21ef98faaae813187118ed0c5010e1284aaaac.src","preCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled) throws Exception {\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[]{db}, numPartition, BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig,\n            null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput = populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance =\n        getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageSelectionStageOutput messageOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p), MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PStateTransitionMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"NB"},{"authorDate":"2018-04-28 00:50:22","commitOrder":2,"curCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ClusterDataCache();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ClusterDataCache.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new MessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2018-06-27 06:46:59","endLine":106,"groupId":"3402","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"preSetup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/84117b8a79441ba86ec47b567b47ceae791cff.src","preCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ClusterDataCache();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ClusterDataCache.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new MessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessagesAvoidDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"266b8bb1ae30c23c4310886c111f826e225205f4","commitMessage":"@@@Add test to validate no duplicated state transition message sent when p2p message is enabled.\n","date":"2018-06-27 06:46:59","modifiedFileCount":"1","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-28 00:50:22","codes":[{"authorDate":"2018-04-25 09:18:40","commitOrder":3,"curCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageSelectionStageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","date":"2018-09-18 06:08:28","endLine":326,"groupId":"3757","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testP2PMessage","params":"(ClusterConfigclusterConfig@Booleanp2pMessageEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c8/048fab5620ba8067d460a5ecb20ab06959725e.src","preCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled) throws Exception {\n    Map<String, Resource> resourceMap =\n        getResourceMap(new String[]{db}, numPartition, BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig,\n            null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput = populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance =\n        getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageSelectionStageOutput messageOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p), MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PStateTransitionMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2018-04-28 00:50:22","commitOrder":3,"curCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ClusterDataCache();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ClusterDataCache.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new MessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2018-06-27 06:46:59","endLine":106,"groupId":"3402","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"preSetup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/84117b8a79441ba86ec47b567b47ceae791cff.src","preCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ClusterDataCache();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ClusterDataCache.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new MessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessagesAvoidDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"880f885121afecab4e186282fbf94a146a2cf04a","commitMessage":"@@@Fix P2P message logic in controller to avoid sending duplicated messages to participants.\n","date":"2018-09-18 06:08:28","modifiedFileCount":"21","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-28 00:50:22","codes":[{"authorDate":"2018-08-07 04:59:36","commitOrder":4,"curCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","date":"2018-09-22 05:08:40","endLine":326,"groupId":"3757","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testP2PMessage","params":"(ClusterConfigclusterConfig@Booleanp2pMessageEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b8/4333151fd4838578b489989f3b00f56bff839e.src","preCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageSelectionStageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PStateTransitionMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2018-04-28 00:50:22","commitOrder":4,"curCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ClusterDataCache();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ClusterDataCache.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new MessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2018-06-27 06:46:59","endLine":106,"groupId":"3402","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"preSetup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/84117b8a79441ba86ec47b567b47ceae791cff.src","preCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ClusterDataCache();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ClusterDataCache.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new MessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessagesAvoidDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"a4e0cdd28a3d70195a0f69021b77cde580dc7d50","commitMessage":"@@@Refactoring MessageGenerationOutput and MessageSelectStageOutput\n\nSince these two outputs share same functionality and APIs. Refactor them into one class MessageOutput class.\n","date":"2018-09-22 05:08:40","modifiedFileCount":"8","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-07-21 06:37:23","codes":[{"authorDate":"2018-08-07 04:59:36","commitOrder":5,"curCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","date":"2018-09-22 05:08:40","endLine":326,"groupId":"3757","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testP2PMessage","params":"(ClusterConfigclusterConfig@Booleanp2pMessageEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b8/4333151fd4838578b489989f3b00f56bff839e.src","preCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PStateTransitionMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"N"},{"authorDate":"2018-07-21 06:37:23","commitOrder":5,"curCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ClusterDataCache();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ClusterDataCache.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new ResourceMessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new ResourceMessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2018-09-22 05:09:25","endLine":104,"groupId":"3402","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"preSetup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/81/b8cf28201860393c469ed81939fec76b25c484.src","preCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ClusterDataCache();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ClusterDataCache.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new MessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessagesAvoidDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"65533eae6966d7c10e23810d233c2ee0250909ec","commitMessage":"@@@Create abstract stages for shared stages between two pipelines\n\nWhen we try to remove the redundant stages for task framework.  we need to make two unconnected stages can be compatible. So we need to have abstract stages for both regular pipeline and task pipeline.\n","date":"2018-09-22 05:09:25","modifiedFileCount":"8","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":6,"curCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":328,"groupId":"6892","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testP2PMessage","params":"(ClusterConfigclusterConfig@Booleanp2pMessageEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/50/232cee958647c363713ba02fc4c66eca98961d.src","preCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ClusterDataCache cache = event.getAttribute(AttributeName.ClusterDataCache.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PStateTransitionMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":6,"curCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ResourceControllerDataProvider();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new ResourceMessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new ResourceMessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2019-02-26 09:36:00","endLine":103,"groupId":"5063","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"preSetup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cf/5e95a8b29a5d78f4e4581e5baae8b8e9dbc64f.src","preCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ClusterDataCache();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ClusterDataCache.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new ResourceMessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new ResourceMessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessagesAvoidDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2021-05-26 01:19:08","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":7,"curCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":328,"groupId":"6892","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testP2PMessage","params":"(ClusterConfigclusterConfig@Booleanp2pMessageEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/50/232cee958647c363713ba02fc4c66eca98961d.src","preCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PStateTransitionMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"N"},{"authorDate":"2021-05-26 01:19:08","commitOrder":7,"curCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ResourceControllerDataProvider();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new ResourceMessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new ResourceMessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new IntermediateStateCalcStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2021-06-02 02:44:29","endLine":105,"groupId":"5063","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"preSetup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1d/164c544c12338150d19d4293d9837d871c9064.src","preCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ResourceControllerDataProvider();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new ResourceMessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new ResourceMessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessagesAvoidDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"f49986e24c27c49d8c877457753e32dcf8b540f4","commitMessage":"@@@[Replica Level Throttle] Make Pipeline in a correct order and fixes tests (#1750)\n\n* Make Pipeline in a correct order and fixes tests\n\n1. Make pipeline running in a correct order to process computation\n2. Add \"DROPPED\" case in the mapping to reflect the real case.\n3. Fixes test cases.","date":"2021-06-02 02:44:29","modifiedFileCount":"15","status":"M","submitter":"Junkai Xue"},{"authorTime":"2021-05-27 07:44:46","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":8,"curCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":328,"groupId":"10261","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testP2PMessage","params":"(ClusterConfigclusterConfig@Booleanp2pMessageEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/50/232cee958647c363713ba02fc4c66eca98961d.src","preCode":"  private void testP2PMessage(ClusterConfig clusterConfig, Boolean p2pMessageEnabled)\n      throws Exception {\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { db }, numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n\n    Pipeline pipeline = createPipeline();\n    pipeline.handle(event);\n\n    BestPossibleStateOutput bestPossibleStateOutput =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    CurrentStateOutput currentStateOutput =\n        populateCurrentStateFromBestPossible(bestPossibleStateOutput);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n\n    Partition p = new Partition(db + \"_0\");\n\n    String masterInstance = getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n        MasterSlaveSMD.States.MASTER.name());\n    Assert.assertNotNull(masterInstance);\n\n    admin.enableInstance(_clusterName, masterInstance, false);\n    ResourceControllerDataProvider cache = event.getAttribute(AttributeName.ControllerDataProvider.name());\n    cache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n\n    pipeline = createPipeline();\n    pipeline.handle(event);\n\n    bestPossibleStateOutput = event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n\n    MessageOutput messageOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages = messageOutput.getMessages(db, p);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getTgtName(), masterInstance);\n    Assert.assertEquals(message.getFromState(), MasterSlaveSMD.States.MASTER.name());\n    Assert.assertEquals(message.getToState(), MasterSlaveSMD.States.SLAVE.name());\n\n    if (p2pMessageEnabled) {\n      Assert.assertEquals(message.getRelayMessages().entrySet().size(), 1);\n      String newMasterInstance =\n          getTopStateInstance(bestPossibleStateOutput.getInstanceStateMap(db, p),\n              MasterSlaveSMD.States.MASTER.name());\n\n      Message relayMessage = message.getRelayMessage(newMasterInstance);\n      Assert.assertNotNull(relayMessage);\n      Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n      Assert.assertEquals(relayMessage.getTgtName(), newMasterInstance);\n      Assert.assertEquals(relayMessage.getRelaySrcHost(), masterInstance);\n      Assert.assertEquals(relayMessage.getFromState(), MasterSlaveSMD.States.SLAVE.name());\n      Assert.assertEquals(relayMessage.getToState(), MasterSlaveSMD.States.MASTER.name());\n    } else {\n      Assert.assertTrue(message.getRelayMessages().entrySet().isEmpty());\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PStateTransitionMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"N"},{"authorDate":"2021-05-27 07:44:46","commitOrder":8,"curCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ResourceControllerDataProvider();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new MessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new MessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new IntermediateStateCalcStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2021-06-02 02:44:29","endLine":105,"groupId":"10261","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"preSetup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/40/d5c9774d201f9c0abd4142f7331db12e4b43c9.src","preCode":"  private void preSetup() throws Exception {\n    setupIdealState(3, new String[] { _db }, _numPartition, _numReplica,\n        IdealState.RebalanceMode.SEMI_AUTO, BuiltInStateModelDefinitions.MasterSlave.name());\n    setupStateModel();\n    setupInstances(3);\n    setupLiveInstances(3);\n\n    ClusterConfig clusterConfig = new ClusterConfig(_clusterName);\n    clusterConfig.enableP2PMessage(true);\n    setClusterConfig(clusterConfig);\n\n    Map<String, Resource> resourceMap = getResourceMap(new String[] { _db }, _numPartition,\n        BuiltInStateModelDefinitions.MasterSlave.name(), clusterConfig, null);\n\n    _dataCache = new ResourceControllerDataProvider();\n    _dataCache.setAsyncTasksThreadPool(Executors.newSingleThreadExecutor());\n\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), _dataCache);\n    event.addAttribute(AttributeName.RESOURCES.name(), resourceMap);\n    event.addAttribute(AttributeName.RESOURCES_TO_REBALANCE.name(), resourceMap);\n    event.addAttribute(AttributeName.CURRENT_STATE.name(), new CurrentStateOutput());\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    _fullPipeline = new Pipeline(\"FullPipeline\");\n    _fullPipeline.addStage(new ReadClusterDataStage());\n    _fullPipeline.addStage(new BestPossibleStateCalcStage());\n    _fullPipeline.addStage(new ResourceMessageGenerationPhase());\n    _fullPipeline.addStage(new MessageSelectionStage());\n    _fullPipeline.addStage(new IntermediateStateCalcStage());\n    _fullPipeline.addStage(new MessageThrottleStage());\n\n    _messagePipeline = new Pipeline(\"MessagePipeline\");\n    _messagePipeline.addStage(new ResourceMessageGenerationPhase());\n    _messagePipeline.addStage(new MessageSelectionStage());\n    _messagePipeline.addStage(new IntermediateStateCalcStage());\n    _messagePipeline.addStage(new MessageThrottleStage());\n\n\n    _fullPipeline.handle(event);\n    _bestpossibleState =\n        event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessagesAvoidDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"17c52da9422fbde427eb5b1309ddeeda389c092c","commitMessage":"@@@Refactor/clean up code without logic change (#1760)\n\nThis commmit contains:\n1. Remove unused functions and logic\n2. Combine the Resource/Task message generation into one stage.  since they are both relying on best possible result.","date":"2021-06-02 02:44:29","modifiedFileCount":"11","status":"M","submitter":"Junkai Xue"}]
