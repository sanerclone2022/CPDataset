[{"authorTime":"2013-10-22 01:34:03","codes":[{"authorDate":"2013-10-22 01:34:03","commitOrder":1,"curCode":"  public Representation post(Representation entity) {\n    try {\n      String clusterName = (String) getRequest().getAttributes().get(\"clusterName\");\n      ZkClient zkClient =\n          (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n      ClusterSetup setupTool = new ClusterSetup(zkClient);\n\n      JsonParameters jsonParameters = new JsonParameters(entity);\n      String command = jsonParameters.getCommand();\n\n      if (command == null) {\n        throw new HelixException(\"Could NOT find 'command' in parameterMap: \"\n            + jsonParameters._parameterMap);\n      } else if (command.equalsIgnoreCase(ClusterSetup.activateCluster)\n          || JsonParameters.CLUSTERSETUP_COMMAND_ALIASES.get(ClusterSetup.activateCluster)\n              .contains(command)) {\n        jsonParameters.verifyCommand(ClusterSetup.activateCluster);\n\n        boolean enabled = true;\n        if (jsonParameters.getParameter(JsonParameters.ENABLED) != null) {\n          enabled = Boolean.parseBoolean(jsonParameters.getParameter(JsonParameters.ENABLED));\n        }\n\n        String grandCluster = jsonParameters.getParameter(JsonParameters.GRAND_CLUSTER);\n\n        setupTool.activateCluster(clusterName, grandCluster, enabled);\n      } else if (command.equalsIgnoreCase(ClusterSetup.expandCluster)) {\n        setupTool.expandCluster(clusterName);\n      } else {\n        throw new HelixException(\"Unsupported command: \" + command + \". Should be one of [\"\n            + ClusterSetup.activateCluster + \", \" + ClusterSetup.expandCluster + \"]\");\n      }\n      getResponse().setEntity(getClusterRepresentation(clusterName));\n      getResponse().setStatus(Status.SUCCESS_OK);\n    } catch (Exception e) {\n      getResponse().setEntity(ClusterRepresentationUtil.getErrorAsJsonStringFromException(e),\n          MediaType.APPLICATION_JSON);\n      getResponse().setStatus(Status.SUCCESS_OK);\n    }\n    return getResponseEntity();\n  }\n","date":"2013-10-22 01:39:26","endLine":144,"groupId":"4288","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"post","params":"(Representationentity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b2/2d801674b1a860516559360c7bc8899615d7b2.src","preCode":"  public Representation post(Representation entity) {\n    try {\n      String clusterName = (String) getRequest().getAttributes().get(\"clusterName\");\n      ZkClient zkClient =\n          (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n      ClusterSetup setupTool = new ClusterSetup(zkClient);\n\n      JsonParameters jsonParameters = new JsonParameters(entity);\n      String command = jsonParameters.getCommand();\n\n      if (command == null) {\n        throw new HelixException(\"Could NOT find 'command' in parameterMap: \"\n            + jsonParameters._parameterMap);\n      } else if (command.equalsIgnoreCase(ClusterSetup.activateCluster)\n          || JsonParameters.CLUSTERSETUP_COMMAND_ALIASES.get(ClusterSetup.activateCluster)\n              .contains(command)) {\n        jsonParameters.verifyCommand(ClusterSetup.activateCluster);\n\n        boolean enabled = true;\n        if (jsonParameters.getParameter(JsonParameters.ENABLED) != null) {\n          enabled = Boolean.parseBoolean(jsonParameters.getParameter(JsonParameters.ENABLED));\n        }\n\n        String grandCluster = jsonParameters.getParameter(JsonParameters.GRAND_CLUSTER);\n\n        setupTool.activateCluster(clusterName, grandCluster, enabled);\n      } else if (command.equalsIgnoreCase(ClusterSetup.expandCluster)) {\n        setupTool.expandCluster(clusterName);\n      } else {\n        throw new HelixException(\"Unsupported command: \" + command + \". Should be one of [\"\n            + ClusterSetup.activateCluster + \", \" + ClusterSetup.expandCluster + \"]\");\n      }\n      getResponse().setEntity(getClusterRepresentation(clusterName));\n      getResponse().setStatus(Status.SUCCESS_OK);\n    } catch (Exception e) {\n      getResponse().setEntity(ClusterRepresentationUtil.getErrorAsJsonStringFromException(e),\n          MediaType.APPLICATION_JSON);\n      getResponse().setStatus(Status.SUCCESS_OK);\n    }\n    return getResponseEntity();\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ClusterResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2013-10-22 01:34:03","commitOrder":1,"curCode":"  public Representation post(Representation entity) {\n    try {\n      String clusterName = (String) getRequest().getAttributes().get(\"clusterName\");\n      ZkClient zkClient =\n          (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n      ClusterSetup setupTool = new ClusterSetup(zkClient);\n\n      JsonParameters jsonParameters = new JsonParameters(entity);\n      String command = jsonParameters.getCommand();\n\n      if (command == null) {\n        throw new HelixException(\"Could NOT find 'command' in parameterMap: \"\n            + jsonParameters._parameterMap);\n      } else if (command.equalsIgnoreCase(ClusterSetup.enableCluster)) {\n        boolean enabled = Boolean.parseBoolean(jsonParameters.getParameter(JsonParameters.ENABLED));\n\n        setupTool.getClusterManagementTool().enableCluster(clusterName, enabled);\n      } else {\n        throw new HelixException(\"Unsupported command: \" + command + \". Should be one of [\"\n            + ClusterSetup.enableCluster + \"]\");\n      }\n\n      getResponse().setEntity(getControllerRepresentation(clusterName));\n      getResponse().setStatus(Status.SUCCESS_OK);\n\n    } catch (Exception e) {\n      getResponse().setEntity(ClusterRepresentationUtil.getErrorAsJsonStringFromException(e),\n          MediaType.APPLICATION_JSON);\n      getResponse().setStatus(Status.SUCCESS_OK);\n    }\n    \n    return null;\n  }\n","date":"2013-10-22 01:39:26","endLine":140,"groupId":"531","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"post","params":"(Representationentity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ea/7be424691356c9b5bb42cb48b4126dc209e5d7.src","preCode":"  public Representation post(Representation entity) {\n    try {\n      String clusterName = (String) getRequest().getAttributes().get(\"clusterName\");\n      ZkClient zkClient =\n          (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n      ClusterSetup setupTool = new ClusterSetup(zkClient);\n\n      JsonParameters jsonParameters = new JsonParameters(entity);\n      String command = jsonParameters.getCommand();\n\n      if (command == null) {\n        throw new HelixException(\"Could NOT find 'command' in parameterMap: \"\n            + jsonParameters._parameterMap);\n      } else if (command.equalsIgnoreCase(ClusterSetup.enableCluster)) {\n        boolean enabled = Boolean.parseBoolean(jsonParameters.getParameter(JsonParameters.ENABLED));\n\n        setupTool.getClusterManagementTool().enableCluster(clusterName, enabled);\n      } else {\n        throw new HelixException(\"Unsupported command: \" + command + \". Should be one of [\"\n            + ClusterSetup.enableCluster + \"]\");\n      }\n\n      getResponse().setEntity(getControllerRepresentation(clusterName));\n      getResponse().setStatus(Status.SUCCESS_OK);\n\n    } catch (Exception e) {\n      getResponse().setEntity(ClusterRepresentationUtil.getErrorAsJsonStringFromException(e),\n          MediaType.APPLICATION_JSON);\n      getResponse().setStatus(Status.SUCCESS_OK);\n    }\n    \n    return null;\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ControllerResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"96adfbf1555326620ec01b56251ef5a911ce6b8c","commitMessage":"@@@[HELIX-257] Upgraded restlet from 1.1.10 to 2.1.4 (merged pull request from mrietveld)\n","date":"2013-10-22 01:39:26","modifiedFileCount":"33","status":"B","submitter":"Kanak Biscuitwala"},{"authorTime":"2014-12-03 10:26:02","codes":[{"authorDate":"2014-12-03 10:26:02","commitOrder":2,"curCode":"  public Representation post(Representation entity) {\n    try {\n      String clusterName =\n          ResourceUtil.getAttributeFromRequest(getRequest(), ResourceUtil.RequestKey.CLUSTER_NAME);\n      ZkClient zkClient =\n          ResourceUtil.getAttributeFromCtx(getContext(), ResourceUtil.ContextKey.ZKCLIENT);\n      ClusterSetup setupTool = new ClusterSetup(zkClient);\n\n      JsonParameters jsonParameters = new JsonParameters(entity);\n      String command = jsonParameters.getCommand();\n\n      if (command == null) {\n        throw new HelixException(\"Could NOT find 'command' in parameterMap: \"\n            + jsonParameters._parameterMap);\n      } else if (command.equalsIgnoreCase(ClusterSetup.activateCluster)\n          || JsonParameters.CLUSTERSETUP_COMMAND_ALIASES.get(ClusterSetup.activateCluster)\n              .contains(command)) {\n        jsonParameters.verifyCommand(ClusterSetup.activateCluster);\n\n        boolean enabled = true;\n        if (jsonParameters.getParameter(JsonParameters.ENABLED) != null) {\n          enabled = Boolean.parseBoolean(jsonParameters.getParameter(JsonParameters.ENABLED));\n        }\n\n        String grandCluster = jsonParameters.getParameter(JsonParameters.GRAND_CLUSTER);\n\n        setupTool.activateCluster(clusterName, grandCluster, enabled);\n      } else if (command.equalsIgnoreCase(ClusterSetup.expandCluster)) {\n        setupTool.expandCluster(clusterName);\n      } else {\n        throw new HelixException(\"Unsupported command: \" + command + \". Should be one of [\"\n            + ClusterSetup.activateCluster + \", \" + ClusterSetup.expandCluster + \"]\");\n      }\n      getResponse().setEntity(getClusterRepresentation(clusterName));\n      getResponse().setStatus(Status.SUCCESS_OK);\n    } catch (Exception e) {\n      getResponse().setEntity(ClusterRepresentationUtil.getErrorAsJsonStringFromException(e),\n          MediaType.APPLICATION_JSON);\n      getResponse().setStatus(Status.SUCCESS_OK);\n    }\n    return getResponseEntity();\n  }\n","date":"2014-12-03 10:26:02","endLine":162,"groupId":"10949","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"post","params":"(Representationentity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ea/8b8dbf427fa34e8c85fedca723045396f9e173.src","preCode":"  public Representation post(Representation entity) {\n    try {\n      String clusterName = (String) getRequest().getAttributes().get(\"clusterName\");\n      ZkClient zkClient =\n          (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n      ClusterSetup setupTool = new ClusterSetup(zkClient);\n\n      JsonParameters jsonParameters = new JsonParameters(entity);\n      String command = jsonParameters.getCommand();\n\n      if (command == null) {\n        throw new HelixException(\"Could NOT find 'command' in parameterMap: \"\n            + jsonParameters._parameterMap);\n      } else if (command.equalsIgnoreCase(ClusterSetup.activateCluster)\n          || JsonParameters.CLUSTERSETUP_COMMAND_ALIASES.get(ClusterSetup.activateCluster)\n              .contains(command)) {\n        jsonParameters.verifyCommand(ClusterSetup.activateCluster);\n\n        boolean enabled = true;\n        if (jsonParameters.getParameter(JsonParameters.ENABLED) != null) {\n          enabled = Boolean.parseBoolean(jsonParameters.getParameter(JsonParameters.ENABLED));\n        }\n\n        String grandCluster = jsonParameters.getParameter(JsonParameters.GRAND_CLUSTER);\n\n        setupTool.activateCluster(clusterName, grandCluster, enabled);\n      } else if (command.equalsIgnoreCase(ClusterSetup.expandCluster)) {\n        setupTool.expandCluster(clusterName);\n      } else {\n        throw new HelixException(\"Unsupported command: \" + command + \". Should be one of [\"\n            + ClusterSetup.activateCluster + \", \" + ClusterSetup.expandCluster + \"]\");\n      }\n      getResponse().setEntity(getClusterRepresentation(clusterName));\n      getResponse().setStatus(Status.SUCCESS_OK);\n    } catch (Exception e) {\n      getResponse().setEntity(ClusterRepresentationUtil.getErrorAsJsonStringFromException(e),\n          MediaType.APPLICATION_JSON);\n      getResponse().setStatus(Status.SUCCESS_OK);\n    }\n    return getResponseEntity();\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ClusterResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2014-12-03 10:26:02","commitOrder":2,"curCode":"  public Representation post(Representation entity) {\n    try {\n      String clusterName =\n          ResourceUtil.getAttributeFromRequest(getRequest(), ResourceUtil.RequestKey.CLUSTER_NAME);\n      ZkClient zkClient =\n          ResourceUtil.getAttributeFromCtx(getContext(), ResourceUtil.ContextKey.ZKCLIENT);\n      ClusterSetup setupTool = new ClusterSetup(zkClient);\n\n      JsonParameters jsonParameters = new JsonParameters(entity);\n      String command = jsonParameters.getCommand();\n\n      if (command == null) {\n        throw new HelixException(\"Could NOT find 'command' in parameterMap: \"\n            + jsonParameters._parameterMap);\n      } else if (command.equalsIgnoreCase(ClusterSetup.enableCluster)) {\n        boolean enabled = Boolean.parseBoolean(jsonParameters.getParameter(JsonParameters.ENABLED));\n\n        setupTool.getClusterManagementTool().enableCluster(clusterName, enabled);\n      } else {\n        throw new HelixException(\"Unsupported command: \" + command + \". Should be one of [\"\n            + ClusterSetup.enableCluster + \"]\");\n      }\n\n      getResponse().setEntity(getControllerRepresentation(clusterName));\n      getResponse().setStatus(Status.SUCCESS_OK);\n\n    } catch (Exception e) {\n      getResponse().setEntity(ClusterRepresentationUtil.getErrorAsJsonStringFromException(e),\n          MediaType.APPLICATION_JSON);\n      getResponse().setStatus(Status.SUCCESS_OK);\n    }\n\n    return null;\n  }\n","date":"2014-12-03 10:26:02","endLine":158,"groupId":"10949","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"post","params":"(Representationentity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/62/88ab7b5e214ff3df4a7458bb1a850d1a319853.src","preCode":"  public Representation post(Representation entity) {\n    try {\n      String clusterName = (String) getRequest().getAttributes().get(\"clusterName\");\n      ZkClient zkClient =\n          (ZkClient) getContext().getAttributes().get(RestAdminApplication.ZKCLIENT);\n      ClusterSetup setupTool = new ClusterSetup(zkClient);\n\n      JsonParameters jsonParameters = new JsonParameters(entity);\n      String command = jsonParameters.getCommand();\n\n      if (command == null) {\n        throw new HelixException(\"Could NOT find 'command' in parameterMap: \"\n            + jsonParameters._parameterMap);\n      } else if (command.equalsIgnoreCase(ClusterSetup.enableCluster)) {\n        boolean enabled = Boolean.parseBoolean(jsonParameters.getParameter(JsonParameters.ENABLED));\n\n        setupTool.getClusterManagementTool().enableCluster(clusterName, enabled);\n      } else {\n        throw new HelixException(\"Unsupported command: \" + command + \". Should be one of [\"\n            + ClusterSetup.enableCluster + \"]\");\n      }\n\n      getResponse().setEntity(getControllerRepresentation(clusterName));\n      getResponse().setStatus(Status.SUCCESS_OK);\n\n    } catch (Exception e) {\n      getResponse().setEntity(ClusterRepresentationUtil.getErrorAsJsonStringFromException(e),\n          MediaType.APPLICATION_JSON);\n      getResponse().setStatus(Status.SUCCESS_OK);\n    }\n    \n    return null;\n  }\n","realPath":"helix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/ControllerResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"9a5dbeaa624715e76486ae908eab48e503d28ceb","commitMessage":"@@@[HELIX-546] Add REST API for Helix job queue management - third part.  rb=28620\n","date":"2014-12-03 10:26:02","modifiedFileCount":"10","status":"M","submitter":"zzhang"}]
