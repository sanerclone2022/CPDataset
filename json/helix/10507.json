[{"authorTime":"2018-04-12 01:28:22","codes":[{"authorDate":"2018-04-12 01:28:22","commitOrder":2,"curCode":"  public void testDeleteWorkflow() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"100000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"), TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, true);\n    _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n\n    \r\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-20 05:18:16","endLine":70,"groupId":"3299","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/51827c0c056049085a484ca1919c71914f3e9f.src","preCode":"  public void testDeleteWorkflow() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"100000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"), TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, true);\n    _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n\n    \r\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"MB"},{"authorDate":"2018-04-12 01:28:22","commitOrder":2,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-20 05:18:16","endLine":115,"groupId":"786","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/51827c0c056049085a484ca1919c71914f3e9f.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"b8355b9a6b1071c149305f147bdb524d8a67f2d2","commitMessage":"@@@Add forcefully workflow and job delete API into HelixAdmin and Helix Rest.\n","date":"2018-04-20 05:18:16","modifiedFileCount":"5","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-21 07:11:27","codes":[{"authorDate":"2018-04-21 07:11:27","commitOrder":3,"curCode":"  public void testDeleteWorkflow() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"100000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"), TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, true);\n    _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n\n    \r\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-25 03:45:43","endLine":68,"groupId":"3299","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/7ba950a0b20a6ef3f09984ea86fbdabb2a6b49.src","preCode":"  public void testDeleteWorkflow() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"100000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"), TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, true);\n    _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n\n    \r\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2018-04-21 07:11:27","commitOrder":3,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-25 03:45:43","endLine":113,"groupId":"786","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/7ba950a0b20a6ef3f09984ea86fbdabb2a6b49.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"d2fb22d1f3a3db602b27cba7ed8d814cb931622e","commitMessage":"@@@Fix a few of unstable integration tests.\n","date":"2018-04-25 03:45:43","modifiedFileCount":"18","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-04-21 07:11:27","codes":[{"authorDate":"2018-10-24 02:30:33","commitOrder":4,"curCode":"  public void testDeleteWorkflow() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"100000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"), TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n    Thread.sleep(1000);\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, true);\n    _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n\n    \r\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2019-02-26 08:30:23","endLine":68,"groupId":"786","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6a/859e147ac5dc7d79946a7907e4dd97a6192c01.src","preCode":"  public void testDeleteWorkflow() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"100000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"), TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, true);\n    _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n\n    \r\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2018-04-21 07:11:27","commitOrder":4,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-25 03:45:43","endLine":113,"groupId":"786","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/7ba950a0b20a6ef3f09984ea86fbdabb2a6b49.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"af3fb00093df9311d63e62f7f85561de906ded1b","commitMessage":"@@@Implement Job looping strategy\n\nLast change already made the task scheduling by looping all the workflows. In that case.  we still need to integrate the job looping strategy with new workflow looping strategy. With this change.  the quota restriction can be applied.\n","date":"2019-02-26 08:30:23","modifiedFileCount":"11","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-09-15 05:40:00","codes":[{"authorDate":"2020-09-15 05:40:00","commitOrder":5,"curCode":"  public void testDeleteWorkflow() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"100000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n    Thread.sleep(1000);\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\n          \"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, true);\n    _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n\n    \r\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n  }\n","date":"2020-09-15 05:40:00","endLine":86,"groupId":"10507","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8d/11b12c2ca9b114e8009a0724d5eac27618b262.src","preCode":"  public void testDeleteWorkflow() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"100000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n    Thread.sleep(1000);\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\n          \"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, true);\n    _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n\n    \r\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-09-15 05:40:00","commitOrder":5,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n    Thread.sleep(1000);\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\n          \"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2020-09-15 05:40:00","endLine":127,"groupId":"10507","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8d/11b12c2ca9b114e8009a0724d5eac27618b262.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\n          \"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"027481f2906cc9d2a5ee104f9e844d0ec8d06e3d","commitMessage":"@@@Task Framework IdealState Removal (#1326)\n\nThis commit removes IdealState usage from Task Framework. \nThe TaskDriver no longer creates IdealState when workflows/jobs are created. \nThe controller-side no longer reads/create IdealState to create resources for Task Framework.","date":"2020-09-15 05:40:00","modifiedFileCount":"16","status":"M","submitter":"Neal Sun"}]
