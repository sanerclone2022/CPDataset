[{"authorTime":"2014-04-18 02:11:35","codes":[{"authorDate":"2014-04-18 02:11:35","commitOrder":1,"curCode":"  private static void removeInstanceFromPreferences(HelixDataAccessor accessor,\n      final String instanceName, final String resourceName, final String partitionName) {\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        List<String> preferenceList = currentData.getListField(partitionName);\n        int numReplicas =\n            Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n        currentData.setListField(partitionName,\n            removeInstanceFromPreferenceList(preferenceList, instanceName, numReplicas));\n        return currentData;\n      }\n    };\n\n    \r\n    String instanceConfigPath = keyBuilder.instanceConfig(instanceName).getPath();\n    DataUpdater<ZNRecord> instanceConfigUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        \r\n        return currentData;\n      }\n    };\n    List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n    updaters.add(idealStateUpdater);\n    updaters.add(instanceConfigUpdater);\n    accessor.updateChildren(Arrays.asList(idealStatePath, instanceConfigPath), updaters,\n        AccessOption.PERSISTENT);\n  }\n","date":"2014-04-18 02:11:35","endLine":311,"groupId":"1692","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"removeInstanceFromPreferences","params":"(HelixDataAccessoraccessor@finalStringinstanceName@finalStringresourceName@finalStringpartitionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/63/3d04625a2af3dc7acf3290f727f68f89ad2011.src","preCode":"  private static void removeInstanceFromPreferences(HelixDataAccessor accessor,\n      final String instanceName, final String resourceName, final String partitionName) {\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        List<String> preferenceList = currentData.getListField(partitionName);\n        int numReplicas =\n            Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n        currentData.setListField(partitionName,\n            removeInstanceFromPreferenceList(preferenceList, instanceName, numReplicas));\n        return currentData;\n      }\n    };\n\n    \r\n    String instanceConfigPath = keyBuilder.instanceConfig(instanceName).getPath();\n    DataUpdater<ZNRecord> instanceConfigUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        \r\n        return currentData;\n      }\n    };\n    List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n    updaters.add(idealStateUpdater);\n    updaters.add(instanceConfigUpdater);\n    accessor.updateChildren(Arrays.asList(idealStatePath, instanceConfigPath), updaters,\n        AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestPreferenceListAsQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"B"},{"authorDate":"2014-04-18 02:11:35","commitOrder":1,"curCode":"  private static void addInstanceToPreferences(HelixDataAccessor accessor,\n      final String instanceName, final String resourceName, final List<String> partitions) {\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        for (String partitionName : partitions) {\n          List<String> preferenceList = currentData.getListField(partitionName);\n          int numReplicas =\n              Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n          currentData.setListField(partitionName,\n              addInstanceToPreferenceList(preferenceList, instanceName, numReplicas));\n        }\n        return currentData;\n      }\n    };\n\n    \r\n    String instanceConfigPath = keyBuilder.instanceConfig(instanceName).getPath();\n    DataUpdater<ZNRecord> instanceConfigUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        \r\n        return currentData;\n      }\n    };\n\n    \r\n    List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n    updaters.add(idealStateUpdater);\n    updaters.add(instanceConfigUpdater);\n    accessor.updateChildren(Arrays.asList(idealStatePath, instanceConfigPath), updaters,\n        AccessOption.PERSISTENT);\n  }\n","date":"2014-04-18 02:11:35","endLine":356,"groupId":"1692","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addInstanceToPreferences","params":"(HelixDataAccessoraccessor@finalStringinstanceName@finalStringresourceName@finalList<String>partitions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/63/3d04625a2af3dc7acf3290f727f68f89ad2011.src","preCode":"  private static void addInstanceToPreferences(HelixDataAccessor accessor,\n      final String instanceName, final String resourceName, final List<String> partitions) {\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        for (String partitionName : partitions) {\n          List<String> preferenceList = currentData.getListField(partitionName);\n          int numReplicas =\n              Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n          currentData.setListField(partitionName,\n              addInstanceToPreferenceList(preferenceList, instanceName, numReplicas));\n        }\n        return currentData;\n      }\n    };\n\n    \r\n    String instanceConfigPath = keyBuilder.instanceConfig(instanceName).getPath();\n    DataUpdater<ZNRecord> instanceConfigUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        \r\n        return currentData;\n      }\n    };\n\n    \r\n    List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n    updaters.add(idealStateUpdater);\n    updaters.add(instanceConfigUpdater);\n    accessor.updateChildren(Arrays.asList(idealStatePath, instanceConfigPath), updaters,\n        AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestPreferenceListAsQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"B"}],"commitId":"4aa54eb427d441fbd4445ddc842300c4800a17c1","commitMessage":"@@@Merge branch 'helix-0.6.x' of https://git-wip-us.apache.org/repos/asf/helix into helix-0.6.x\n","date":"2014-04-18 02:11:35","modifiedFileCount":"0","status":"B","submitter":"Kanak Biscuitwala"},{"authorTime":"2014-08-05 05:43:05","codes":[{"authorDate":"2014-08-05 05:43:05","commitOrder":2,"curCode":"  private void removeInstanceFromPreferences(HelixDataAccessor accessor, final String instanceName,\n      final String resourceName, final String partitionName) {\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    synchronized (_prefListHistory) {\n      \r\n      final List<String> prefList = Lists.newLinkedList();\n      DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n        @Override\n        public ZNRecord update(ZNRecord currentData) {\n          List<String> preferenceList = currentData.getListField(partitionName);\n          int numReplicas =\n              Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n          List<String> newPrefList =\n              removeInstanceFromPreferenceList(preferenceList, instanceName, numReplicas);\n          currentData.setListField(partitionName, newPrefList);\n          prefList.clear();\n          prefList.addAll(newPrefList);\n          return currentData;\n        }\n      };\n      List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n      updaters.add(idealStateUpdater);\n      accessor.updateChildren(Arrays.asList(idealStatePath), updaters, AccessOption.PERSISTENT);\n      _prefListHistory.add(prefList);\n    }\n  }\n","date":"2014-08-06 02:14:38","endLine":336,"groupId":"553","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"removeInstanceFromPreferences","params":"(HelixDataAccessoraccessor@finalStringinstanceName@finalStringresourceName@finalStringpartitionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/6bacabd18da20aeb3f24c3260787f6ffe6a9cd.src","preCode":"  private static void removeInstanceFromPreferences(HelixDataAccessor accessor,\n      final String instanceName, final String resourceName, final String partitionName) {\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        List<String> preferenceList = currentData.getListField(partitionName);\n        int numReplicas =\n            Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n        currentData.setListField(partitionName,\n            removeInstanceFromPreferenceList(preferenceList, instanceName, numReplicas));\n        return currentData;\n      }\n    };\n\n    \r\n    String instanceConfigPath = keyBuilder.instanceConfig(instanceName).getPath();\n    DataUpdater<ZNRecord> instanceConfigUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        \r\n        return currentData;\n      }\n    };\n    List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n    updaters.add(idealStateUpdater);\n    updaters.add(instanceConfigUpdater);\n    accessor.updateChildren(Arrays.asList(idealStatePath, instanceConfigPath), updaters,\n        AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestPreferenceListAsQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2014-08-05 05:43:05","commitOrder":2,"curCode":"  private void addInstanceToPreferences(HelixDataAccessor accessor, final String instanceName,\n      final String resourceName, final List<String> partitions) {\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    synchronized (_prefListHistory) {\n      \r\n      final List<String> prefList = Lists.newLinkedList();\n      DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n        @Override\n        public ZNRecord update(ZNRecord currentData) {\n          for (String partitionName : partitions) {\n            List<String> preferenceList = currentData.getListField(partitionName);\n            int numReplicas =\n                Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n            List<String> newPrefList =\n                addInstanceToPreferenceList(preferenceList, instanceName, numReplicas);\n            currentData.setListField(partitionName, newPrefList);\n            prefList.clear();\n            prefList.addAll(newPrefList);\n          }\n          return currentData;\n        }\n      };\n\n      \r\n      List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n      updaters.add(idealStateUpdater);\n      accessor.updateChildren(Arrays.asList(idealStatePath), updaters, AccessOption.PERSISTENT);\n      _prefListHistory.add(prefList);\n    }\n  }\n","date":"2014-08-06 02:14:38","endLine":376,"groupId":"553","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addInstanceToPreferences","params":"(HelixDataAccessoraccessor@finalStringinstanceName@finalStringresourceName@finalList<String>partitions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/6bacabd18da20aeb3f24c3260787f6ffe6a9cd.src","preCode":"  private static void addInstanceToPreferences(HelixDataAccessor accessor,\n      final String instanceName, final String resourceName, final List<String> partitions) {\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        for (String partitionName : partitions) {\n          List<String> preferenceList = currentData.getListField(partitionName);\n          int numReplicas =\n              Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n          currentData.setListField(partitionName,\n              addInstanceToPreferenceList(preferenceList, instanceName, numReplicas));\n        }\n        return currentData;\n      }\n    };\n\n    \r\n    String instanceConfigPath = keyBuilder.instanceConfig(instanceName).getPath();\n    DataUpdater<ZNRecord> instanceConfigUpdater = new DataUpdater<ZNRecord>() {\n      @Override\n      public ZNRecord update(ZNRecord currentData) {\n        \r\n        return currentData;\n      }\n    };\n\n    \r\n    List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n    updaters.add(idealStateUpdater);\n    updaters.add(instanceConfigUpdater);\n    accessor.updateChildren(Arrays.asList(idealStatePath, instanceConfigPath), updaters,\n        AccessOption.PERSISTENT);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestPreferenceListAsQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"}],"commitId":"1a4bec71f82285b32820c14e6e68de96dd4d9372","commitMessage":"@@@[HELIX-495] Make TestPreferenceListAsQueue non-flaky\n","date":"2014-08-06 02:14:38","modifiedFileCount":"1","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"  private void removeInstanceFromPreferences(HelixDataAccessor accessor, final String instanceName,\n      final String resourceName, final String partitionName) {\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    synchronized (_prefListHistory) {\n      \r\n      final List<String> prefList = Lists.newLinkedList();\n      DataUpdater<ZNRecord> idealStateUpdater = currentData -> {\n        List<String> preferenceList = currentData.getListField(partitionName);\n        int numReplicas =\n            Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n        List<String> newPrefList =\n            removeInstanceFromPreferenceList(preferenceList, instanceName, numReplicas);\n        currentData.setListField(partitionName, newPrefList);\n        prefList.clear();\n        prefList.addAll(newPrefList);\n        return currentData;\n      };\n      List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n      updaters.add(idealStateUpdater);\n      accessor.updateChildren(Collections.singletonList(idealStatePath), updaters,\n          AccessOption.PERSISTENT);\n      _prefListHistory.add(prefList);\n    }\n  }\n","date":"2019-05-25 09:19:21","endLine":339,"groupId":"10583","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"removeInstanceFromPreferences","params":"(HelixDataAccessoraccessor@finalStringinstanceName@finalStringresourceName@finalStringpartitionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/54/d9ae6b8bfcd47110c9a24698f1a2707eeba8b6.src","preCode":"  private void removeInstanceFromPreferences(HelixDataAccessor accessor, final String instanceName,\n      final String resourceName, final String partitionName) {\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    synchronized (_prefListHistory) {\n      \r\n      final List<String> prefList = Lists.newLinkedList();\n      DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n        @Override\n        public ZNRecord update(ZNRecord currentData) {\n          List<String> preferenceList = currentData.getListField(partitionName);\n          int numReplicas =\n              Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n          List<String> newPrefList =\n              removeInstanceFromPreferenceList(preferenceList, instanceName, numReplicas);\n          currentData.setListField(partitionName, newPrefList);\n          prefList.clear();\n          prefList.addAll(newPrefList);\n          return currentData;\n        }\n      };\n      List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n      updaters.add(idealStateUpdater);\n      accessor.updateChildren(Arrays.asList(idealStatePath), updaters, AccessOption.PERSISTENT);\n      _prefListHistory.add(prefList);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestPreferenceListAsQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"  private void addInstanceToPreferences(HelixDataAccessor accessor, final String instanceName,\n      final String resourceName, final List<String> partitions) {\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    synchronized (_prefListHistory) {\n      \r\n      final List<String> prefList = Lists.newLinkedList();\n      DataUpdater<ZNRecord> idealStateUpdater = currentData -> {\n        for (String partitionName : partitions) {\n          List<String> preferenceList = currentData.getListField(partitionName);\n          int numReplicas =\n              Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n          List<String> newPrefList =\n              addInstanceToPreferenceList(preferenceList, instanceName, numReplicas);\n          currentData.setListField(partitionName, newPrefList);\n          prefList.clear();\n          prefList.addAll(newPrefList);\n        }\n        return currentData;\n      };\n\n      \r\n      List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n      updaters.add(idealStateUpdater);\n      accessor.updateChildren(Collections.singletonList(idealStatePath), updaters,\n          AccessOption.PERSISTENT);\n      _prefListHistory.add(prefList);\n    }\n  }\n","date":"2019-05-25 09:19:21","endLine":377,"groupId":"10583","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addInstanceToPreferences","params":"(HelixDataAccessoraccessor@finalStringinstanceName@finalStringresourceName@finalList<String>partitions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/54/d9ae6b8bfcd47110c9a24698f1a2707eeba8b6.src","preCode":"  private void addInstanceToPreferences(HelixDataAccessor accessor, final String instanceName,\n      final String resourceName, final List<String> partitions) {\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    String idealStatePath = keyBuilder.idealStates(resourceName).getPath();\n    synchronized (_prefListHistory) {\n      \r\n      final List<String> prefList = Lists.newLinkedList();\n      DataUpdater<ZNRecord> idealStateUpdater = new DataUpdater<ZNRecord>() {\n        @Override\n        public ZNRecord update(ZNRecord currentData) {\n          for (String partitionName : partitions) {\n            List<String> preferenceList = currentData.getListField(partitionName);\n            int numReplicas =\n                Integer.valueOf(currentData.getSimpleField(IdealStateProperty.REPLICAS.toString()));\n            List<String> newPrefList =\n                addInstanceToPreferenceList(preferenceList, instanceName, numReplicas);\n            currentData.setListField(partitionName, newPrefList);\n            prefList.clear();\n            prefList.addAll(newPrefList);\n          }\n          return currentData;\n        }\n      };\n\n      \r\n      List<DataUpdater<ZNRecord>> updaters = Lists.newArrayList();\n      updaters.add(idealStateUpdater);\n      accessor.updateChildren(Arrays.asList(idealStatePath), updaters, AccessOption.PERSISTENT);\n      _prefListHistory.add(prefList);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestPreferenceListAsQueue.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
