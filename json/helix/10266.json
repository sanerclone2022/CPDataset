[{"authorTime":"2019-06-05 08:15:17","codes":[{"authorDate":"2019-06-05 08:15:17","commitOrder":1,"curCode":"  public void testP2PWithErrorState() throws Exception {\n    reset(_initialStateMap);\n    \r\n    \r\n\n    \r\n    admin.enableInstance(_clusterName, _initialMaster, false);\n    _dataCache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n    _fullPipeline.handle(event);\n\n    ResourcesStateMap bestpossibleState =\n        event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    List<Message> messages = getMessages(_initialMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message toSlaveMessage = messages.get(0);\n\n    \r\n    Assert.assertEquals(toSlaveMessage.getRelayMessages().entrySet().size(), 1);\n    String secondMaster =\n        getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n            MasterSlaveSMD.States.MASTER.name());\n    Message relayMessage = toSlaveMessage.getRelayMessage(secondMaster);\n    Assert.assertNotNull(relayMessage);\n    Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n    Assert.assertEquals(relayMessage.getTgtName(), secondMaster);\n\n    \r\n    \r\n    \r\n    String session = _dataCache.getLiveInstances().get(_initialMaster).getSessionId();\n    PropertyKey currentStateKey =\n        new PropertyKey.Builder(_clusterName).currentState(_initialMaster, session, _db);\n    CurrentState currentState = accessor.getProperty(currentStateKey);\n    currentState\n        .setPreviousState(_partition.getPartitionName(), MasterSlaveSMD.States.MASTER.name());\n    currentState.setState(_partition.getPartitionName(), HelixDefinedState.ERROR.name());\n    currentState.setEndTime(_partition.getPartitionName(), System.currentTimeMillis());\n    accessor.setProperty(currentStateKey, currentState);\n\n    PropertyKey messageKey =\n        new PropertyKey.Builder(_clusterName).message(_initialMaster, messages.get(0).getMsgId());\n    accessor.removeProperty(messageKey);\n\n    _fullPipeline.handle(event);\n\n    messages = getMessages(secondMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Assert.assertEquals(messages.get(0).getTgtName(), secondMaster);\n    Assert.assertEquals(messages.get(0).getFromState(), MasterSlaveSMD.States.SLAVE.name());\n    Assert.assertEquals(messages.get(0).getToState(), MasterSlaveSMD.States.MASTER.name());\n  }\n","date":"2019-06-25 07:45:28","endLine":242,"groupId":"5806","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testP2PWithErrorState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/11/5acd602b12ff23e50820352159c5b5fd13cb5a.src","preCode":"  public void testP2PWithErrorState() throws Exception {\n    reset(_initialStateMap);\n    \r\n    \r\n\n    \r\n    admin.enableInstance(_clusterName, _initialMaster, false);\n    _dataCache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n    _fullPipeline.handle(event);\n\n    ResourcesStateMap bestpossibleState =\n        event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    List<Message> messages = getMessages(_initialMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message toSlaveMessage = messages.get(0);\n\n    \r\n    Assert.assertEquals(toSlaveMessage.getRelayMessages().entrySet().size(), 1);\n    String secondMaster =\n        getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n            MasterSlaveSMD.States.MASTER.name());\n    Message relayMessage = toSlaveMessage.getRelayMessage(secondMaster);\n    Assert.assertNotNull(relayMessage);\n    Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n    Assert.assertEquals(relayMessage.getTgtName(), secondMaster);\n\n    \r\n    \r\n    \r\n    String session = _dataCache.getLiveInstances().get(_initialMaster).getSessionId();\n    PropertyKey currentStateKey =\n        new PropertyKey.Builder(_clusterName).currentState(_initialMaster, session, _db);\n    CurrentState currentState = accessor.getProperty(currentStateKey);\n    currentState\n        .setPreviousState(_partition.getPartitionName(), MasterSlaveSMD.States.MASTER.name());\n    currentState.setState(_partition.getPartitionName(), HelixDefinedState.ERROR.name());\n    currentState.setEndTime(_partition.getPartitionName(), System.currentTimeMillis());\n    accessor.setProperty(currentStateKey, currentState);\n\n    PropertyKey messageKey =\n        new PropertyKey.Builder(_clusterName).message(_initialMaster, messages.get(0).getMsgId());\n    accessor.removeProperty(messageKey);\n\n    _fullPipeline.handle(event);\n\n    messages = getMessages(secondMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Assert.assertEquals(messages.get(0).getTgtName(), secondMaster);\n    Assert.assertEquals(messages.get(0).getFromState(), MasterSlaveSMD.States.SLAVE.name());\n    Assert.assertEquals(messages.get(0).getToState(), MasterSlaveSMD.States.MASTER.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"},{"authorDate":"2019-06-05 08:15:17","commitOrder":1,"curCode":"  public void testP2PWithInstanceOffline() throws Exception {\n    reset(_initialStateMap);\n    \r\n    \r\n\n    \r\n    admin.enableInstance(_clusterName, _initialMaster, false);\n    _dataCache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n    _fullPipeline.handle(event);\n\n    ResourcesStateMap bestpossibleState =\n        event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    List<Message> messages = getMessages(_initialMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message toSlaveMessage = messages.get(0);\n    ;\n\n    \r\n    Assert.assertEquals(toSlaveMessage.getRelayMessages().entrySet().size(), 1);\n    String secondMaster =\n        getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n            MasterSlaveSMD.States.MASTER.name());\n    Message relayMessage = toSlaveMessage.getRelayMessage(secondMaster);\n    Assert.assertNotNull(relayMessage);\n    Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n    Assert.assertEquals(relayMessage.getTgtName(), secondMaster);\n\n    \r\n    \r\n    \r\n    handleMessage(_initialMaster, _db);\n    _fullPipeline.handle(event);\n    messages = getMessages(secondMaster);\n    Assert.assertEquals(messages.size(), 0);\n\n    \r\n    PropertyKey liveInstanceKey = new PropertyKey.Builder(_clusterName).liveInstance(secondMaster);\n    accessor.removeProperty(liveInstanceKey);\n    _dataCache.requireFullRefresh();\n\n    _fullPipeline.handle(event);\n\n    bestpossibleState = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n    String thirdMaster = getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n        MasterSlaveSMD.States.MASTER.name());\n\n    Assert.assertTrue(secondMaster != thirdMaster);\n    messages = getMessages(thirdMaster);\n    Assert.assertEquals(messages.size(), 1);\n    Assert.assertEquals(messages.get(0).getTgtName(), thirdMaster);\n    Assert.assertEquals(messages.get(0).getFromState(), MasterSlaveSMD.States.SLAVE.name());\n    Assert.assertEquals(messages.get(0).getToState(), MasterSlaveSMD.States.MASTER.name());\n  }\n","date":"2019-06-25 07:45:28","endLine":299,"groupId":"4100","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testP2PWithInstanceOffline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/11/5acd602b12ff23e50820352159c5b5fd13cb5a.src","preCode":"  public void testP2PWithInstanceOffline() throws Exception {\n    reset(_initialStateMap);\n    \r\n    \r\n\n    \r\n    admin.enableInstance(_clusterName, _initialMaster, false);\n    _dataCache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n    _fullPipeline.handle(event);\n\n    ResourcesStateMap bestpossibleState =\n        event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    List<Message> messages = getMessages(_initialMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message toSlaveMessage = messages.get(0);\n    ;\n\n    \r\n    Assert.assertEquals(toSlaveMessage.getRelayMessages().entrySet().size(), 1);\n    String secondMaster =\n        getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n            MasterSlaveSMD.States.MASTER.name());\n    Message relayMessage = toSlaveMessage.getRelayMessage(secondMaster);\n    Assert.assertNotNull(relayMessage);\n    Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n    Assert.assertEquals(relayMessage.getTgtName(), secondMaster);\n\n    \r\n    \r\n    \r\n    handleMessage(_initialMaster, _db);\n    _fullPipeline.handle(event);\n    messages = getMessages(secondMaster);\n    Assert.assertEquals(messages.size(), 0);\n\n    \r\n    PropertyKey liveInstanceKey = new PropertyKey.Builder(_clusterName).liveInstance(secondMaster);\n    accessor.removeProperty(liveInstanceKey);\n    _dataCache.requireFullRefresh();\n\n    _fullPipeline.handle(event);\n\n    bestpossibleState = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n    String thirdMaster = getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n        MasterSlaveSMD.States.MASTER.name());\n\n    Assert.assertTrue(secondMaster != thirdMaster);\n    messages = getMessages(thirdMaster);\n    Assert.assertEquals(messages.size(), 1);\n    Assert.assertEquals(messages.get(0).getTgtName(), thirdMaster);\n    Assert.assertEquals(messages.get(0).getFromState(), MasterSlaveSMD.States.SLAVE.name());\n    Assert.assertEquals(messages.get(0).getToState(), MasterSlaveSMD.States.MASTER.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"}],"commitId":"5db99fb6df198a57315b2f371186f6e9c64c1dda","commitMessage":"@@@Remove relay message from controller's message cache immediately if the partition on relay host turned to ERROR state while transits off from top-state.\n\nRB=1689771\nBUG=HELIX-1900\nG=helix-reviewers\nA=hulee\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-06-25 07:45:28","modifiedFileCount":"3","status":"B","submitter":"Lei Xia"},{"authorTime":"2019-06-05 08:15:17","codes":[{"authorDate":"2019-06-18 05:37:02","commitOrder":2,"curCode":"  public void testP2PWithErrorState() throws Exception {\n    reset(_initialStateMap);\n    \r\n    \r\n\n    \r\n    admin.enableInstance(_clusterName, _initialMaster, false);\n    _dataCache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n    _fullPipeline.handle(event);\n\n    ResourcesStateMap bestpossibleState =\n        event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    List<Message> messages = getMessages(_initialMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message toSlaveMessage = messages.get(0);\n\n    \r\n    Assert.assertEquals(toSlaveMessage.getRelayMessages().entrySet().size(), 1);\n    String secondMaster =\n        getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n            MasterSlaveSMD.States.MASTER.name());\n    Message relayMessage = toSlaveMessage.getRelayMessage(secondMaster);\n    Assert.assertNotNull(relayMessage);\n    Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n    Assert.assertEquals(relayMessage.getTgtName(), secondMaster);\n\n    \r\n    \r\n    \r\n    String session = _dataCache.getLiveInstances().get(_initialMaster).getEphemeralOwner();\n    PropertyKey currentStateKey =\n        new PropertyKey.Builder(_clusterName).currentState(_initialMaster, session, _db);\n    CurrentState currentState = accessor.getProperty(currentStateKey);\n    currentState\n        .setPreviousState(_partition.getPartitionName(), MasterSlaveSMD.States.MASTER.name());\n    currentState.setState(_partition.getPartitionName(), HelixDefinedState.ERROR.name());\n    currentState.setEndTime(_partition.getPartitionName(), System.currentTimeMillis());\n    accessor.setProperty(currentStateKey, currentState);\n\n    PropertyKey messageKey =\n        new PropertyKey.Builder(_clusterName).message(_initialMaster, messages.get(0).getMsgId());\n    accessor.removeProperty(messageKey);\n\n    _fullPipeline.handle(event);\n\n    messages = getMessages(secondMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Assert.assertEquals(messages.get(0).getTgtName(), secondMaster);\n    Assert.assertEquals(messages.get(0).getFromState(), MasterSlaveSMD.States.SLAVE.name());\n    Assert.assertEquals(messages.get(0).getToState(), MasterSlaveSMD.States.MASTER.name());\n  }\n","date":"2019-06-25 07:46:15","endLine":242,"groupId":"10266","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testP2PWithErrorState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/72/f110cc5642061dffe4768aae525720735c5767.src","preCode":"  public void testP2PWithErrorState() throws Exception {\n    reset(_initialStateMap);\n    \r\n    \r\n\n    \r\n    admin.enableInstance(_clusterName, _initialMaster, false);\n    _dataCache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n    _fullPipeline.handle(event);\n\n    ResourcesStateMap bestpossibleState =\n        event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    List<Message> messages = getMessages(_initialMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message toSlaveMessage = messages.get(0);\n\n    \r\n    Assert.assertEquals(toSlaveMessage.getRelayMessages().entrySet().size(), 1);\n    String secondMaster =\n        getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n            MasterSlaveSMD.States.MASTER.name());\n    Message relayMessage = toSlaveMessage.getRelayMessage(secondMaster);\n    Assert.assertNotNull(relayMessage);\n    Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n    Assert.assertEquals(relayMessage.getTgtName(), secondMaster);\n\n    \r\n    \r\n    \r\n    String session = _dataCache.getLiveInstances().get(_initialMaster).getSessionId();\n    PropertyKey currentStateKey =\n        new PropertyKey.Builder(_clusterName).currentState(_initialMaster, session, _db);\n    CurrentState currentState = accessor.getProperty(currentStateKey);\n    currentState\n        .setPreviousState(_partition.getPartitionName(), MasterSlaveSMD.States.MASTER.name());\n    currentState.setState(_partition.getPartitionName(), HelixDefinedState.ERROR.name());\n    currentState.setEndTime(_partition.getPartitionName(), System.currentTimeMillis());\n    accessor.setProperty(currentStateKey, currentState);\n\n    PropertyKey messageKey =\n        new PropertyKey.Builder(_clusterName).message(_initialMaster, messages.get(0).getMsgId());\n    accessor.removeProperty(messageKey);\n\n    _fullPipeline.handle(event);\n\n    messages = getMessages(secondMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Assert.assertEquals(messages.get(0).getTgtName(), secondMaster);\n    Assert.assertEquals(messages.get(0).getFromState(), MasterSlaveSMD.States.SLAVE.name());\n    Assert.assertEquals(messages.get(0).getToState(), MasterSlaveSMD.States.MASTER.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2019-06-05 08:15:17","commitOrder":2,"curCode":"  public void testP2PWithInstanceOffline() throws Exception {\n    reset(_initialStateMap);\n    \r\n    \r\n\n    \r\n    admin.enableInstance(_clusterName, _initialMaster, false);\n    _dataCache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n    _fullPipeline.handle(event);\n\n    ResourcesStateMap bestpossibleState =\n        event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    List<Message> messages = getMessages(_initialMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message toSlaveMessage = messages.get(0);\n    ;\n\n    \r\n    Assert.assertEquals(toSlaveMessage.getRelayMessages().entrySet().size(), 1);\n    String secondMaster =\n        getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n            MasterSlaveSMD.States.MASTER.name());\n    Message relayMessage = toSlaveMessage.getRelayMessage(secondMaster);\n    Assert.assertNotNull(relayMessage);\n    Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n    Assert.assertEquals(relayMessage.getTgtName(), secondMaster);\n\n    \r\n    \r\n    \r\n    handleMessage(_initialMaster, _db);\n    _fullPipeline.handle(event);\n    messages = getMessages(secondMaster);\n    Assert.assertEquals(messages.size(), 0);\n\n    \r\n    PropertyKey liveInstanceKey = new PropertyKey.Builder(_clusterName).liveInstance(secondMaster);\n    accessor.removeProperty(liveInstanceKey);\n    _dataCache.requireFullRefresh();\n\n    _fullPipeline.handle(event);\n\n    bestpossibleState = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n    String thirdMaster = getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n        MasterSlaveSMD.States.MASTER.name());\n\n    Assert.assertTrue(secondMaster != thirdMaster);\n    messages = getMessages(thirdMaster);\n    Assert.assertEquals(messages.size(), 1);\n    Assert.assertEquals(messages.get(0).getTgtName(), thirdMaster);\n    Assert.assertEquals(messages.get(0).getFromState(), MasterSlaveSMD.States.SLAVE.name());\n    Assert.assertEquals(messages.get(0).getToState(), MasterSlaveSMD.States.MASTER.name());\n  }\n","date":"2019-06-25 07:45:28","endLine":299,"groupId":"10266","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testP2PWithInstanceOffline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/11/5acd602b12ff23e50820352159c5b5fd13cb5a.src","preCode":"  public void testP2PWithInstanceOffline() throws Exception {\n    reset(_initialStateMap);\n    \r\n    \r\n\n    \r\n    admin.enableInstance(_clusterName, _initialMaster, false);\n    _dataCache.notifyDataChange(HelixConstants.ChangeType.INSTANCE_CONFIG);\n    _fullPipeline.handle(event);\n\n    ResourcesStateMap bestpossibleState =\n        event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n\n    List<Message> messages = getMessages(_initialMaster);\n\n    Assert.assertEquals(messages.size(), 1);\n    Message toSlaveMessage = messages.get(0);\n    ;\n\n    \r\n    Assert.assertEquals(toSlaveMessage.getRelayMessages().entrySet().size(), 1);\n    String secondMaster =\n        getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n            MasterSlaveSMD.States.MASTER.name());\n    Message relayMessage = toSlaveMessage.getRelayMessage(secondMaster);\n    Assert.assertNotNull(relayMessage);\n    Assert.assertEquals(relayMessage.getMsgSubType(), Message.MessageType.RELAYED_MESSAGE.name());\n    Assert.assertEquals(relayMessage.getTgtName(), secondMaster);\n\n    \r\n    \r\n    \r\n    handleMessage(_initialMaster, _db);\n    _fullPipeline.handle(event);\n    messages = getMessages(secondMaster);\n    Assert.assertEquals(messages.size(), 0);\n\n    \r\n    PropertyKey liveInstanceKey = new PropertyKey.Builder(_clusterName).liveInstance(secondMaster);\n    accessor.removeProperty(liveInstanceKey);\n    _dataCache.requireFullRefresh();\n\n    _fullPipeline.handle(event);\n\n    bestpossibleState = event.getAttribute(AttributeName.INTERMEDIATE_STATE.name());\n    String thirdMaster = getTopStateInstance(bestpossibleState.getInstanceStateMap(_db, _partition),\n        MasterSlaveSMD.States.MASTER.name());\n\n    Assert.assertTrue(secondMaster != thirdMaster);\n    messages = getMessages(thirdMaster);\n    Assert.assertEquals(messages.size(), 1);\n    Assert.assertEquals(messages.get(0).getTgtName(), thirdMaster);\n    Assert.assertEquals(messages.get(0).getFromState(), MasterSlaveSMD.States.SLAVE.name());\n    Assert.assertEquals(messages.get(0).getToState(), MasterSlaveSMD.States.MASTER.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/messaging/p2pMessage/TestP2PMessages.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"N"}],"commitId":"ad0c2edb31a4d0e5c455d1fa0f96658bac1382d5","commitMessage":"@@@Always try reading from EphemeralOwner state first while reading the session ID from a live instance node.\n\nThis is to avoid inconsistent session ID in the node content and the emphemeral owner state.\nNote that in order to ensure backward compatiblity and some test cases.  the newly introduced method will still read from the node content if the ephemeral owner state is empty (-1 or 0).\n\nRB=1704942\nBUG=HELIX-1969\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-06-25 07:46:15","modifiedFileCount":"33","status":"M","submitter":"Jiajun Wang"}]
