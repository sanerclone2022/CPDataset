[{"authorTime":"2017-06-03 14:26:50","codes":[{"authorDate":"2017-06-03 14:26:50","commitOrder":1,"curCode":"  @Test public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder();\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2017-06-24 03:06:17","endLine":73,"groupId":"6629","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWhenDisallowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7d/a7b291b55036c498d98e809d263d2209eec4e3.src","preCode":"  @Test public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder();\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2017-06-03 14:26:50","commitOrder":1,"curCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verify());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder();\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStart();\n    }\n  }\n","date":"2017-06-24 03:06:17","endLine":118,"groupId":"6225","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWhenAllowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7d/a7b291b55036c498d98e809d263d2209eec4e3.src","preCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verify());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder();\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"e35fe4fffc952f7ccae7bfa4cbf89ef75e404a53","commitMessage":"@@@Add workflow configuration to allow or disallow assigning multiple jobs to one instance.\n\nBy default.  it is not allowed that Helix assigns multiple jobs in one workflow to the same instances.\nIf it is set to be true.  the instance can start executing multiple jobs in each workflow.\n\nWhen application sets max tasks throttling for the participants.  allowing overlapping assignment can maximize utilization.\n","date":"2017-06-24 03:06:17","modifiedFileCount":"4","status":"B","submitter":"Jiajun Wang"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":2,"curCode":"  @Test public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2017-11-08 08:48:26","endLine":78,"groupId":"6629","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWhenDisallowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/5a75ce5d043d120b8f88f60184db4c8002af97.src","preCode":"  @Test public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder();\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":2,"curCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verify());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStart();\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":128,"groupId":"6225","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWhenAllowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/5a75ce5d043d120b8f88f60184db4c8002af97.src","preCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verify());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder();\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  @Test public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2017-11-08 08:48:26","endLine":78,"groupId":"6629","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWhenDisallowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/5a75ce5d043d120b8f88f60184db4c8002af97.src","preCode":"  @Test public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verify());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2018-07-14 02:20:49","endLine":124,"groupId":"6225","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWhenAllowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/62/aca00b1c3849e91fff4ba472fab0baaaa14bad.src","preCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verify());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":4,"curCode":"  @Test public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2017-11-08 08:48:26","endLine":78,"groupId":"6629","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWhenDisallowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/5a75ce5d043d120b8f88f60184db4c8002af97.src","preCode":"  @Test public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2018-07-14 06:55:35","endLine":122,"groupId":"6225","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWhenAllowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/99/10798ecf895cc28dafc2ef2c482c8c926a4055.src","preCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verify());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-11-06 08:55:22","commitOrder":5,"curCode":"  public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\"))\n              .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"1000\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(1000L);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2019-02-26 08:59:48","endLine":79,"groupId":"6629","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testWhenDisallowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f8/1469cfd2de51f1097092e5b99fc840d0547de2.src","preCode":"  @Test public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2018-07-14 06:55:35","endLine":122,"groupId":"6225","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testWhenAllowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/99/10798ecf895cc28dafc2ef2c482c8c926a4055.src","preCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"}],"commitId":"dad3f36a1b8aeb7590214069141915a8bf932ec6","commitMessage":"@@@Integrate JobIterator for existing pipeline\n\nExisting pipeline still looping all the jobs inside the workflow. When JobIterator is ready.  we shall change the looping mechanism to apply the JobIterator and skip the jobs when quota is used out.\n","date":"2019-02-26 08:59:48","modifiedFileCount":"18","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-09-15 05:40:00","codes":[{"authorDate":"2018-11-06 08:55:22","commitOrder":6,"curCode":"  public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\"))\n              .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"1000\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(1000L);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2019-02-26 08:59:48","endLine":79,"groupId":"10520","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testWhenDisallowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f8/1469cfd2de51f1097092e5b99fc840d0547de2.src","preCode":"  public void testWhenDisallowOverlapJobAssignment() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(false);\n\n    JobQueue.Builder queueBuild =\n        new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (String testDbName : _testDbs) {\n      jobConfigBuilders.add(\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(testDbName)\n              .setTargetPartitionStates(Collections.singleton(\"SLAVE\"))\n              .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"1000\")));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(1000L);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2020-09-15 05:40:00","commitOrder":6,"curCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(new TaskConfig.Builder().setTaskId(\"job_\" + (i + 1) + \"_task_\" + j)\n            .setCommand(MockTask.TASK_COMMAND).build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","date":"2020-09-15 05:40:00","endLine":125,"groupId":"10520","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testWhenAllowOverlapJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1a/b747a7f8de5431d2533eb57255a11bdadc92f1.src","preCode":"  public void testWhenAllowOverlapJobAssignment() throws Exception {\n    \r\n    for (int i = 1; i < _numNodes; i++) {\n      _participants[i].syncStop();\n    }\n    ClusterLiveNodesVerifier verifier = new ClusterLiveNodesVerifier(_gZkClient, CLUSTER_NAME,\n        Collections.singletonList(_participants[0].getInstanceName()));\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    String queueName = TestHelper.getTestMethodName();\n\n    WorkflowConfig.Builder cfgBuilder = new WorkflowConfig.Builder(queueName);\n    cfgBuilder.setParallelJobs(PARALLEL_COUNT);\n    cfgBuilder.setAllowOverlapJobAssignment(true);\n\n    JobQueue.Builder queueBuild = new JobQueue.Builder(queueName).setWorkflowConfig(cfgBuilder.build());\n    JobQueue queue = queueBuild.build();\n    _driver.createQueue(queue);\n\n    \r\n    List<JobConfig.Builder> jobConfigBuilders = new ArrayList<JobConfig.Builder>();\n    for (int i = 0; i < PARALLEL_COUNT; i++) {\n      List<TaskConfig> taskConfigs = new ArrayList<TaskConfig>();\n      for (int j = 0; j < TASK_COUNT; j++) {\n        taskConfigs.add(\n            new TaskConfig.Builder().setTaskId(\"task_\" + j).setCommand(MockTask.TASK_COMMAND)\n                .build());\n      }\n      jobConfigBuilders.add(new JobConfig.Builder().addTaskConfigs(taskConfigs));\n    }\n\n    _driver.stop(queueName);\n    for (int i = 0; i < jobConfigBuilders.size(); ++i) {\n      _driver.enqueueJob(queueName, \"job_\" + (i + 1), jobConfigBuilders.get(i));\n    }\n    _driver.resume(queueName);\n    Thread.sleep(2000);\n    Assert.assertTrue(TaskTestUtil.pollForWorkflowParallelState(_driver, queueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"027481f2906cc9d2a5ee104f9e844d0ec8d06e3d","commitMessage":"@@@Task Framework IdealState Removal (#1326)\n\nThis commit removes IdealState usage from Task Framework. \nThe TaskDriver no longer creates IdealState when workflows/jobs are created. \nThe controller-side no longer reads/create IdealState to create resources for Task Framework.","date":"2020-09-15 05:40:00","modifiedFileCount":"16","status":"M","submitter":"Neal Sun"}]
