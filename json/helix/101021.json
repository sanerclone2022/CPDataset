[{"authorTime":"2020-02-12 05:58:57","codes":[{"authorDate":"2020-02-12 05:58:57","commitOrder":1,"curCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data = (datat == null ? null : serialize(datat, path));\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper()\n            .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                \r\n                mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                    data == null ? 0 : data.length, false));\n        return null;\n      }\n    });\n  }\n","date":"2020-02-12 05:58:57","endLine":1735,"groupId":"968","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(finalStringpath@Objectdatat@finalCreateModemode@finalZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/07c3f396ab2de6a22d4ce565a5cdea922faf61.src","preCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data = (datat == null ? null : serialize(datat, path));\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper()\n            .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                \r\n                mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                    data == null ? 0 : data.length, false));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1720,"status":"B"},{"authorDate":"2020-02-12 05:58:57","commitOrder":1,"curCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data = serialize(datat, path);\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                data == null ? 0 : data.length, false));\n        return null;\n      }\n    });\n  }\n","date":"2020-02-12 05:58:57","endLine":1751,"groupId":"1962","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncSetData","params":"(finalStringpath@Objectdatat@finalintversion@finalZkAsyncCallbacks.SetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/07c3f396ab2de6a22d4ce565a5cdea922faf61.src","preCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data = serialize(datat, path);\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                data == null ? 0 : data.length, false));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1738,"status":"B"}],"commitId":"b227b3b72b3ed0e347464f8d8e5279365a6e5acb","commitMessage":"@@@Add metrics-common.  zookeeper-api.  helix-common modules (#684)\n\nWe want to create a new module called zookeeper-api in order to decouple Helix's ZooKeeper APIs from helix-core. The goal is to enable non-Helix applications to use Helix's ZooKeeper APIs. This change also allows for better modularity and separation of concerns.","date":"2020-02-12 05:58:57","modifiedFileCount":"361","status":"B","submitter":"Hunter Lee"},{"authorTime":"2020-03-03 09:25:25","codes":[{"authorDate":"2020-03-03 09:25:25","commitOrder":2,"curCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    byte[] data = null;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    final byte[] finalData = data;\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper()\n          .create(path, finalData, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n              \r\n              mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                  finalData == null ? 0 : finalData.length, false));\n      return null;\n    });\n  }\n","date":"2020-03-03 09:25:25","endLine":1741,"groupId":"5571","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(finalStringpath@Objectdatat@finalCreateModemode@finalZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/34/24f06fd932ccd22618c06a923785e4afa4b76d.src","preCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data = (datat == null ? null : serialize(datat, path));\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper()\n            .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                \r\n                mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                    data == null ? 0 : data.length, false));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1721,"status":"M"},{"authorDate":"2020-03-03 09:25:25","commitOrder":2,"curCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    byte[] data = null;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    final byte[] finalData = data;\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().setData(path, finalData, version, cb,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n              finalData == null ? 0 : finalData.length, false));\n      return null;\n    });\n  }\n","date":"2020-03-03 09:25:25","endLine":1762,"groupId":"5572","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncSetData","params":"(finalStringpath@Objectdatat@finalintversion@finalZkAsyncCallbacks.SetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/34/24f06fd932ccd22618c06a923785e4afa4b76d.src","preCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data = serialize(datat, path);\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                data == null ? 0 : data.length, false));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1744,"status":"M"}],"commitId":"496d573811a8ffddac31b8a3081d504cfaf134d1","commitMessage":"@@@Async write operation should not throw Exception for serializing error (#845)\n\nThis change will make the async write operations return error through the async callback instead of throwing exceptions. This change will fix the batch write/create failure due to one single node serializing failure.\nIn addition.  according to the serializer interface definition.  change ZK related serializers to throw ZkMarshallingError instead of ZkClientException.\n","date":"2020-03-03 09:25:25","modifiedFileCount":"6","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-03-05 15:27:25","codes":[{"authorDate":"2020-03-05 15:27:25","commitOrder":3,"curCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper()\n          .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n              \r\n              mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                  data == null ? 0 : data.length, false));\n      return null;\n    });\n  }\n","date":"2020-03-05 15:27:25","endLine":1740,"groupId":"5571","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(finalStringpath@Objectdatat@finalCreateModemode@finalZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fa/22927742f33ca1d67d71ee42e892b8fd6aeee0.src","preCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    byte[] data = null;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    final byte[] finalData = data;\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper()\n          .create(path, finalData, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n              \r\n              mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                  finalData == null ? 0 : finalData.length, false));\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1721,"status":"M"},{"authorDate":"2020-03-05 15:27:25","commitOrder":3,"curCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n              data == null ? 0 : data.length, false));\n      return null;\n    });\n  }\n","date":"2020-03-05 15:27:25","endLine":1760,"groupId":"5572","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncSetData","params":"(finalStringpath@Objectdatat@finalintversion@finalZkAsyncCallbacks.SetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fa/22927742f33ca1d67d71ee42e892b8fd6aeee0.src","preCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    byte[] data = null;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    final byte[] finalData = data;\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().setData(path, finalData, version, cb,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n              finalData == null ? 0 : finalData.length, false));\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1743,"status":"M"}],"commitId":"1747ac022f2d544a0bf2649dd438f3a1544fab8b","commitMessage":"@@@Fix type cast in TestRawZkClient (#853)\n\nThe type cast from char to int is unexpected in testAsyncWriteOperations. We would like to fix it and make the type cast expected and the test accurate.","date":"2020-03-05 15:27:25","modifiedFileCount":"2","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-05-05 03:36:13","codes":[{"authorDate":"2020-05-05 03:36:13","commitOrder":4,"curCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncCreate(path, data, mode, startT, cb);\n  }\n","date":"2020-05-05 03:36:13","endLine":1753,"groupId":"3482","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(finalStringpath@Objectdatat@finalCreateModemode@finalZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/f9e32b3672ad6145fe633624b53f678626f0d1.src","preCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper()\n          .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n              \r\n              mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                  data == null ? 0 : data.length, false));\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1741,"status":"M"},{"authorDate":"2020-05-05 03:36:13","commitOrder":4,"curCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncSetData(path, data, version, startT, cb);\n  }\n","date":"2020-05-05 03:36:13","endLine":1783,"groupId":"3768","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncSetData","params":"(finalStringpath@Objectdatat@finalintversion@finalZkAsyncCallbacks.SetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/f9e32b3672ad6145fe633624b53f678626f0d1.src","preCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n              data == null ? 0 : data.length, false));\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1771,"status":"M"}],"commitId":"96ebb27c23004a7a69dc4799b14586ff82d53c9e","commitMessage":"@@@Add async call retry to resolve the transient ZK connection issue. (#970)\n\nIf any exceptions happen during the async call.  the current design will fail the operation and may eventually return a partial result.\nThis change makes the ZkClient retry operation if the error is because of a temporary ZK connection issue (CONNECTIONLOSS.  SESSIONEXPIRED.  SESSIONMOVED).\nSo the async call has a larger chance to finish the operation. Note that if the exception is due to business logic.  the async call will still fail and the right return code will be sent to the callback handler.","date":"2020-05-05 03:36:13","modifiedFileCount":"3","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-05-05 04:02:13","codes":[{"authorDate":"2020-05-05 04:02:13","commitOrder":5,"curCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper()\n          .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n              \r\n              mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                  data == null ? 0 : data.length, false));\n      return null;\n    });\n  }\n","date":"2020-05-05 05:28:58","endLine":1750,"groupId":"5571","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(finalStringpath@Objectdatat@finalCreateModemode@finalZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/56/2143f92457df8ead75612f80bc07cad6478249.src","preCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncCreate(path, data, mode, startT, cb);\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1731,"status":"M"},{"authorDate":"2020-05-05 04:02:13","commitOrder":5,"curCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n              data == null ? 0 : data.length, false));\n      return null;\n    });\n  }\n","date":"2020-05-05 05:28:58","endLine":1770,"groupId":"5572","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncSetData","params":"(finalStringpath@Objectdatat@finalintversion@finalZkAsyncCallbacks.SetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/56/2143f92457df8ead75612f80bc07cad6478249.src","preCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncSetData(path, data, version, startT, cb);\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1753,"status":"M"}],"commitId":"370e277966f75a7fba45f5b96f7608c127b2905c","commitMessage":"@@@Revert \"Add async call retry to resolve the transient ZK connection issue. (#970)\"\n\nThis reverts commit 96ebb27c23004a7a69dc4799b14586ff82d53c9e.\n","date":"2020-05-05 05:28:58","modifiedFileCount":"3","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-05-05 08:13:35","codes":[{"authorDate":"2020-05-05 08:13:35","commitOrder":6,"curCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncCreate(path, data, mode, startT, cb);\n  }\n","date":"2020-05-05 08:13:35","endLine":1753,"groupId":"3482","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(finalStringpath@Objectdatat@finalCreateModemode@finalZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/f9e32b3672ad6145fe633624b53f678626f0d1.src","preCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper()\n          .create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n              \r\n              mode, cb, new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n                  data == null ? 0 : data.length, false));\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1741,"status":"M"},{"authorDate":"2020-05-05 08:13:35","commitOrder":6,"curCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncSetData(path, data, version, startT, cb);\n  }\n","date":"2020-05-05 08:13:35","endLine":1783,"groupId":"3768","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncSetData","params":"(finalStringpath@Objectdatat@finalintversion@finalZkAsyncCallbacks.SetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/f9e32b3672ad6145fe633624b53f678626f0d1.src","preCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().setData(path, data, version, cb,\n          new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT,\n              data == null ? 0 : data.length, false));\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1771,"status":"M"}],"commitId":"eb4d99fe777e8928604695c1eedfeda4c01117e1","commitMessage":"@@@Revert \"Revert \"Add async call retry to resolve the transient ZK connection issue. (#970)\"\"\n\nThis reverts commit 370e277966f75a7fba45f5b96f7608c127b2905c.\n","date":"2020-05-05 08:13:35","modifiedFileCount":"3","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-10-07 10:43:50","codes":[{"authorDate":"2020-10-07 10:43:50","commitOrder":7,"curCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncCreate(path, data, mode, startT, cb, parseExpectedSessionId(datat));\n  }\n","date":"2020-10-07 10:43:50","endLine":1917,"groupId":"101021","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(finalStringpath@Objectdatat@finalCreateModemode@finalZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d7/b0b3f111d1b9feb6022295e15d9d5e1bfd4d7f.src","preCode":"  public void asyncCreate(final String path, Object datat, final CreateMode mode,\n      final ZkAsyncCallbacks.CreateCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = (datat == null ? null : serialize(datat, path));\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncCreate(path, data, mode, startT, cb);\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1905,"status":"M"},{"authorDate":"2020-10-07 10:43:50","commitOrder":7,"curCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncSetData(path, data, version, startT, cb, parseExpectedSessionId(datat));\n  }\n","date":"2020-10-07 10:43:50","endLine":1949,"groupId":"101021","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncSetData","params":"(finalStringpath@Objectdatat@finalintversion@finalZkAsyncCallbacks.SetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d7/b0b3f111d1b9feb6022295e15d9d5e1bfd4d7f.src","preCode":"  public void asyncSetData(final String path, Object datat, final int version,\n      final ZkAsyncCallbacks.SetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    final byte[] data;\n    try {\n      data = serialize(datat, path);\n    } catch (ZkMarshallingError e) {\n      cb.processResult(KeeperException.Code.MARSHALLINGERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, false), null);\n      return;\n    }\n    doAsyncSetData(path, data, version, startT, cb);\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1937,"status":"M"}],"commitId":"fa8f4b676fc8cd81a80b2f8d8aa97d2cf5c5087f","commitMessage":"@@@Prevent parallel controller pipelines run causing two master replicas (#1066)\n\nThere is a case that after controller leader switches.  pipelines of both old Helix controller leader and new leader are running in parallel.\nDifferent assignment decisions are sent to different participants so there are double masters for a single partition.\n\nThe commit addresses this issue by blocking non-leader controller to send messages to ZK.","date":"2020-10-07 10:43:50","modifiedFileCount":"17","status":"M","submitter":"Huizhi Lu"}]
