[{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":1,"curCode":"\tpublic void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception\n\t{\n\t    \r\n\t    String className = TestHelper.getTestClassName();\n\t    String methodName = TestHelper.getTestMethodName();\n\t    String clusterName = className + \"_\" + methodName;\n\t    int n = 2;\n\n\t    System.out.println(\"START \" + clusterName + \" at \"\n\t        + new Date(System.currentTimeMillis()));\n\n\t    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n\t                            \"localhost\", \r\n\t                            \"TestDB\", \r\n\t                            1, \r\n\t                            32, \r\n\t                            n, \r\n\t                            2, \r\n\t                            \"MasterSlave\",\n\t                            true); \r\n\t    \n\t    \n\t    ClusterController controller =\n\t        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n\t    controller.syncStart();\n\n\t    \r\n\t    MockParticipant[] participants = new MockParticipant[n];\n\t    for (int i = 0; i < n; i++)\n\t    {\n\t      String instanceName = \"localhost_\" + (12918 + i);\n\n\t      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n\t      participants[i].syncStart();\n\t    }\n\n\t    boolean result =\n\t        ClusterStateVerifier.verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                 clusterName));\n\t    Assert.assertTrue(result);\n\t    ZkHelixTestManager controllerManager = controller.getManager();\n\t    ZkHelixTestManager participantManagerToExpire = (ZkHelixTestManager)participants[1].getManager();\n\n\t    \r\n\t    \r\n\t    int controllerHandlerNb = controllerManager.getHandlers().size();\n\t    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n\t    Assert.assertEquals(controllerHandlerNb, 9, \"HelixController should have 9 (5+2n) callback handlers for 2 (n) participant\");\n\t    Assert.assertEquals(particHandlerNb, 2, \"HelixParticipant should have 2 (msg+cur-state) callback handlers\");\n\t    \n\t    \r\n\t    System.out.println(\"Expiring participant session...\");\n\t    String oldSessionId = participantManagerToExpire.getSessionId();\n\t    \n\t    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n\t    String newSessionId = participantManagerToExpire.getSessionId();\n\t    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \" + newSessionId);\n\n\t    result =\n\t        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                                   clusterName));\n\t    Assert.assertTrue(result);\n\t    \r\n\t    \r\n\t    int handlerNb = controllerManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, controllerHandlerNb, \"controller callback handlers should not increase after participant session expiry\");\n\t    handlerNb = participantManagerToExpire.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, particHandlerNb, \"participant callback handlers should not increase after participant session expiry\");\n\n\t    System.out.println(\"END \" + clusterName + \" at \"\n\t            + new Date(System.currentTimeMillis()));\n\t}\n","date":"2013-04-06 08:30:58","endLine":110,"groupId":"1707","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/7791cabb5ee1177ed6c227ec4dbb0c2b5e314f.src","preCode":"\tpublic void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception\n\t{\n\t    \r\n\t    String className = TestHelper.getTestClassName();\n\t    String methodName = TestHelper.getTestMethodName();\n\t    String clusterName = className + \"_\" + methodName;\n\t    int n = 2;\n\n\t    System.out.println(\"START \" + clusterName + \" at \"\n\t        + new Date(System.currentTimeMillis()));\n\n\t    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n\t                            \"localhost\", \r\n\t                            \"TestDB\", \r\n\t                            1, \r\n\t                            32, \r\n\t                            n, \r\n\t                            2, \r\n\t                            \"MasterSlave\",\n\t                            true); \r\n\t    \n\t    \n\t    ClusterController controller =\n\t        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n\t    controller.syncStart();\n\n\t    \r\n\t    MockParticipant[] participants = new MockParticipant[n];\n\t    for (int i = 0; i < n; i++)\n\t    {\n\t      String instanceName = \"localhost_\" + (12918 + i);\n\n\t      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n\t      participants[i].syncStart();\n\t    }\n\n\t    boolean result =\n\t        ClusterStateVerifier.verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                 clusterName));\n\t    Assert.assertTrue(result);\n\t    ZkHelixTestManager controllerManager = controller.getManager();\n\t    ZkHelixTestManager participantManagerToExpire = (ZkHelixTestManager)participants[1].getManager();\n\n\t    \r\n\t    \r\n\t    int controllerHandlerNb = controllerManager.getHandlers().size();\n\t    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n\t    Assert.assertEquals(controllerHandlerNb, 9, \"HelixController should have 9 (5+2n) callback handlers for 2 (n) participant\");\n\t    Assert.assertEquals(particHandlerNb, 2, \"HelixParticipant should have 2 (msg+cur-state) callback handlers\");\n\t    \n\t    \r\n\t    System.out.println(\"Expiring participant session...\");\n\t    String oldSessionId = participantManagerToExpire.getSessionId();\n\t    \n\t    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n\t    String newSessionId = participantManagerToExpire.getSessionId();\n\t    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \" + newSessionId);\n\n\t    result =\n\t        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                                   clusterName));\n\t    Assert.assertTrue(result);\n\t    \r\n\t    \r\n\t    int handlerNb = controllerManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, controllerHandlerNb, \"controller callback handlers should not increase after participant session expiry\");\n\t    handlerNb = participantManagerToExpire.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, particHandlerNb, \"participant callback handlers should not increase after participant session expiry\");\n\n\t    System.out.println(\"END \" + clusterName + \" at \"\n\t            + new Date(System.currentTimeMillis()));\n\t}\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2013-04-06 08:30:58","commitOrder":1,"curCode":"\tpublic void testCbHandlerLeakOnControllerSessionExpiry() throws Exception\n\t{\n\t    \r\n\t    String className = TestHelper.getTestClassName();\n\t    String methodName = TestHelper.getTestMethodName();\n\t    String clusterName = className + \"_\" + methodName;\n\t    int n = 2;\n\n\t    System.out.println(\"START \" + clusterName + \" at \"\n\t        + new Date(System.currentTimeMillis()));\n\n\t    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n\t                            \"localhost\", \r\n\t                            \"TestDB\", \r\n\t                            1, \r\n\t                            32, \r\n\t                            n, \r\n\t                            2, \r\n\t                            \"MasterSlave\",\n\t                            true); \r\n\t    \n\t    \n\t    ClusterController controller =\n\t        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n\t    controller.syncStart();\n\n\t    \r\n\t    MockParticipant[] participants = new MockParticipant[n];\n\t    for (int i = 0; i < n; i++)\n\t    {\n\t      String instanceName = \"localhost_\" + (12918 + i);\n\n\t      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n\t      participants[i].syncStart();\n\t    }\n\n\t    boolean result =\n\t        ClusterStateVerifier.verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                 clusterName));\n\t    Assert.assertTrue(result);\n\t    ZkHelixTestManager controllerManager = controller.getManager();\n\t    ZkHelixTestManager participantManager = participants[0].getManager();\n\n\t    \r\n\t    int controllerHandlerNb = controllerManager.getHandlers().size();\n\t    int particHandlerNb = participantManager.getHandlers().size();\n\t    for (int i = 0; i < 10; i++) {\n\t    \tif (controllerHandlerNb == 9 && particHandlerNb == 2)\n\t    \t\tbreak;\n\t    \tThread.sleep(100);\n\t    \tcontrollerHandlerNb = controllerManager.getHandlers().size();\n\t    \tparticHandlerNb = participantManager.getHandlers().size();\n\t    }\n    \tAssert.assertEquals(controllerHandlerNb, 9, \"HelixController should have 9 (5+2n) callback handlers for 2 participant, but was \" \n    \t    \t\t+ controllerHandlerNb + \", \"\n    \t    \t\t+ printHandlers(controllerManager));\n    \tAssert.assertEquals(particHandlerNb, 2, \"HelixParticipant should have 2 (msg+cur-state) callback handlers, but was \" \n    \t    \t\t+ particHandlerNb + \", \"\n    \t    \t\t+ printHandlers(participantManager));\n\n\n\t    \r\n\t    System.out.println(\"Expiring controller session...\");\n\t    String oldSessionId = controllerManager.getSessionId();\n\t    \n\t    ZkTestHelper.expireSession(controllerManager.getZkClient());\n\t    String newSessionId = controllerManager.getSessionId();\n\t    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \" + newSessionId);\n\t    \n\t    result =\n\t        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                                   clusterName));\n\t    Assert.assertTrue(result);\n\t    \r\n\t    int handlerNb = controllerManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, controllerHandlerNb, \"controller callback handlers should not increase after participant session expiry, but was \"\n\t    \t\t+ printHandlers(controllerManager));\n\t    handlerNb = participantManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, particHandlerNb, \"participant callback handlers should not increase after participant session expiry, but was \" \n\t    \t\t+ printHandlers(participantManager));\n\n\n\t    System.out.println(\"END \" + clusterName + \" at \"\n\t            + new Date(System.currentTimeMillis()));\n\t}\n","date":"2013-04-06 08:30:58","endLine":197,"groupId":"1708","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/7791cabb5ee1177ed6c227ec4dbb0c2b5e314f.src","preCode":"\tpublic void testCbHandlerLeakOnControllerSessionExpiry() throws Exception\n\t{\n\t    \r\n\t    String className = TestHelper.getTestClassName();\n\t    String methodName = TestHelper.getTestMethodName();\n\t    String clusterName = className + \"_\" + methodName;\n\t    int n = 2;\n\n\t    System.out.println(\"START \" + clusterName + \" at \"\n\t        + new Date(System.currentTimeMillis()));\n\n\t    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n\t                            \"localhost\", \r\n\t                            \"TestDB\", \r\n\t                            1, \r\n\t                            32, \r\n\t                            n, \r\n\t                            2, \r\n\t                            \"MasterSlave\",\n\t                            true); \r\n\t    \n\t    \n\t    ClusterController controller =\n\t        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n\t    controller.syncStart();\n\n\t    \r\n\t    MockParticipant[] participants = new MockParticipant[n];\n\t    for (int i = 0; i < n; i++)\n\t    {\n\t      String instanceName = \"localhost_\" + (12918 + i);\n\n\t      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n\t      participants[i].syncStart();\n\t    }\n\n\t    boolean result =\n\t        ClusterStateVerifier.verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                 clusterName));\n\t    Assert.assertTrue(result);\n\t    ZkHelixTestManager controllerManager = controller.getManager();\n\t    ZkHelixTestManager participantManager = participants[0].getManager();\n\n\t    \r\n\t    int controllerHandlerNb = controllerManager.getHandlers().size();\n\t    int particHandlerNb = participantManager.getHandlers().size();\n\t    for (int i = 0; i < 10; i++) {\n\t    \tif (controllerHandlerNb == 9 && particHandlerNb == 2)\n\t    \t\tbreak;\n\t    \tThread.sleep(100);\n\t    \tcontrollerHandlerNb = controllerManager.getHandlers().size();\n\t    \tparticHandlerNb = participantManager.getHandlers().size();\n\t    }\n    \tAssert.assertEquals(controllerHandlerNb, 9, \"HelixController should have 9 (5+2n) callback handlers for 2 participant, but was \" \n    \t    \t\t+ controllerHandlerNb + \", \"\n    \t    \t\t+ printHandlers(controllerManager));\n    \tAssert.assertEquals(particHandlerNb, 2, \"HelixParticipant should have 2 (msg+cur-state) callback handlers, but was \" \n    \t    \t\t+ particHandlerNb + \", \"\n    \t    \t\t+ printHandlers(participantManager));\n\n\n\t    \r\n\t    System.out.println(\"Expiring controller session...\");\n\t    String oldSessionId = controllerManager.getSessionId();\n\t    \n\t    ZkTestHelper.expireSession(controllerManager.getZkClient());\n\t    String newSessionId = controllerManager.getSessionId();\n\t    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \" + newSessionId);\n\t    \n\t    result =\n\t        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                                   clusterName));\n\t    Assert.assertTrue(result);\n\t    \r\n\t    int handlerNb = controllerManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, controllerHandlerNb, \"controller callback handlers should not increase after participant session expiry, but was \"\n\t    \t\t+ printHandlers(controllerManager));\n\t    handlerNb = participantManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, particHandlerNb, \"participant callback handlers should not increase after participant session expiry, but was \" \n\t    \t\t+ printHandlers(participantManager));\n\n\n\t    System.out.println(\"END \" + clusterName + \" at \"\n\t            + new Date(System.currentTimeMillis()));\n\t}\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"B","submitter":"Swaroop Jagadish"},{"authorTime":"2013-04-26 17:06:20","codes":[{"authorDate":"2013-04-26 17:06:20","commitOrder":2,"curCode":"\tpublic void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception\n\t{\n\t    \r\n\t    String className = TestHelper.getTestClassName();\n\t    String methodName = TestHelper.getTestMethodName();\n\t    String clusterName = className + \"_\" + methodName;\n\t    final int n = 2;\n\n\t    System.out.println(\"START \" + clusterName + \" at \"\n\t        + new Date(System.currentTimeMillis()));\n\n\t    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n\t                            \"localhost\", \r\n\t                            \"TestDB\", \r\n\t                            1, \r\n\t                            32, \r\n\t                            n, \r\n\t                            2, \r\n\t                            \"MasterSlave\",\n\t                            true); \r\n\t    \n\t    \n\t    ClusterController controller =\n\t        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n\t    controller.syncStart();\n\n\t    \r\n\t    MockParticipant[] participants = new MockParticipant[n];\n\t    for (int i = 0; i < n; i++)\n\t    {\n\t      String instanceName = \"localhost_\" + (12918 + i);\n\n\t      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n\t      participants[i].syncStart();\n\t    }\n\n\t    boolean result =\n\t        ClusterStateVerifier.verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                 clusterName));\n\t    Assert.assertTrue(result);\n\t    final ZkHelixTestManager controllerManager = controller.getManager();\n\t    final ZkHelixTestManager participantManagerToExpire = (ZkHelixTestManager)participants[1].getManager();\n\n\t    \r\n\t    result = TestHelper.verify(new TestHelper.Verifier() {\n        \n        @Override\n        public boolean verify() throws Exception {\n          Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n          Set<String> watchPaths = watchers.get(\"0x\" + controllerManager.getSessionId());\n          \r\n          \n          \r\n          \r\n          return watchPaths.size() == (6 + 5 * n);\n        }\n      }, 500);\n\t    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers.\");\n\t    \n\t    \r\n      result = TestHelper.verify(new TestHelper.Verifier() {\n        \n        @Override\n        public boolean verify() throws Exception {\n          Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n          Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n          \r\n          \n          \r\n          return watchPaths.size() == 2;\n        }\n      }, 500);\n      Assert.assertTrue(result, \"Participant should have 2 zk-watchers.\");\n\n\t    \n\t    \r\n\t    \r\n\t    \r\n\t    int controllerHandlerNb = controllerManager.getHandlers().size();\n\t    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n\t    Assert.assertEquals(controllerHandlerNb, 9, \"HelixController should have 9 (5+2n) callback handlers for 2 (n) participant\");\n\t    Assert.assertEquals(particHandlerNb, 2, \"HelixParticipant should have 2 (msg+cur-state) callback handlers\");\n\t    \n\t    \r\n\t    System.out.println(\"Expiring participant session...\");\n\t    String oldSessionId = participantManagerToExpire.getSessionId();\n\t    \n\t    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n\t    String newSessionId = participantManagerToExpire.getSessionId();\n\t    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \" + newSessionId);\n\n\t    result =\n\t        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                                   clusterName));\n\t    Assert.assertTrue(result);\n\t    \n\t    \r\n     result = TestHelper.verify(new TestHelper.Verifier() {\n        \n        @Override\n        public boolean verify() throws Exception {\n          Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n          Set<String> watchPaths = watchers.get(\"0x\" + controllerManager.getSessionId());\n          \r\n          \n          \r\n          \r\n          return watchPaths.size() == (6 + 5 * n);\n        }\n      }, 500);\n      Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n      \r\n      result = TestHelper.verify(new TestHelper.Verifier() {\n        \n        @Override\n        public boolean verify() throws Exception {\n          Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n          Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n          \r\n          \n          \r\n          return watchPaths.size() == 2;\n        }\n      }, 500);\n      Assert.assertTrue(result, \"Participant should have 2 zk-watchers after session expiry.\");\n\n\n\t    \r\n\t    \r\n\t    \r\n\t    int handlerNb = controllerManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, controllerHandlerNb, \"controller callback handlers should not increase after participant session expiry\");\n\t    handlerNb = participantManagerToExpire.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, particHandlerNb, \"participant callback handlers should not increase after participant session expiry\");\n\n\t    System.out.println(\"END \" + clusterName + \" at \"\n\t            + new Date(System.currentTimeMillis()));\n\t}\n","date":"2013-04-26 17:06:20","endLine":179,"groupId":"1707","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/63/594347652fc9ae668c1ca1fba0a4d8336ff73c.src","preCode":"\tpublic void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception\n\t{\n\t    \r\n\t    String className = TestHelper.getTestClassName();\n\t    String methodName = TestHelper.getTestMethodName();\n\t    String clusterName = className + \"_\" + methodName;\n\t    int n = 2;\n\n\t    System.out.println(\"START \" + clusterName + \" at \"\n\t        + new Date(System.currentTimeMillis()));\n\n\t    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n\t                            \"localhost\", \r\n\t                            \"TestDB\", \r\n\t                            1, \r\n\t                            32, \r\n\t                            n, \r\n\t                            2, \r\n\t                            \"MasterSlave\",\n\t                            true); \r\n\t    \n\t    \n\t    ClusterController controller =\n\t        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n\t    controller.syncStart();\n\n\t    \r\n\t    MockParticipant[] participants = new MockParticipant[n];\n\t    for (int i = 0; i < n; i++)\n\t    {\n\t      String instanceName = \"localhost_\" + (12918 + i);\n\n\t      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n\t      participants[i].syncStart();\n\t    }\n\n\t    boolean result =\n\t        ClusterStateVerifier.verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                 clusterName));\n\t    Assert.assertTrue(result);\n\t    ZkHelixTestManager controllerManager = controller.getManager();\n\t    ZkHelixTestManager participantManagerToExpire = (ZkHelixTestManager)participants[1].getManager();\n\n\t    \r\n\t    \r\n\t    int controllerHandlerNb = controllerManager.getHandlers().size();\n\t    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n\t    Assert.assertEquals(controllerHandlerNb, 9, \"HelixController should have 9 (5+2n) callback handlers for 2 (n) participant\");\n\t    Assert.assertEquals(particHandlerNb, 2, \"HelixParticipant should have 2 (msg+cur-state) callback handlers\");\n\t    \n\t    \r\n\t    System.out.println(\"Expiring participant session...\");\n\t    String oldSessionId = participantManagerToExpire.getSessionId();\n\t    \n\t    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n\t    String newSessionId = participantManagerToExpire.getSessionId();\n\t    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \" + newSessionId);\n\n\t    result =\n\t        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                                   clusterName));\n\t    Assert.assertTrue(result);\n\t    \r\n\t    \r\n\t    int handlerNb = controllerManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, controllerHandlerNb, \"controller callback handlers should not increase after participant session expiry\");\n\t    handlerNb = participantManagerToExpire.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, particHandlerNb, \"participant callback handlers should not increase after participant session expiry\");\n\n\t    System.out.println(\"END \" + clusterName + \" at \"\n\t            + new Date(System.currentTimeMillis()));\n\t}\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2013-04-26 17:06:20","commitOrder":2,"curCode":"\tpublic void testCbHandlerLeakOnControllerSessionExpiry() throws Exception\n\t{\n\t    \r\n\t    String className = TestHelper.getTestClassName();\n\t    String methodName = TestHelper.getTestMethodName();\n\t    String clusterName = className + \"_\" + methodName;\n\t    final int n = 2;\n\n\t    System.out.println(\"START \" + clusterName + \" at \"\n\t        + new Date(System.currentTimeMillis()));\n\n\t    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n\t                            \"localhost\", \r\n\t                            \"TestDB\", \r\n\t                            1, \r\n\t                            32, \r\n\t                            n, \r\n\t                            2, \r\n\t                            \"MasterSlave\",\n\t                            true); \r\n\t    \n\t    \n\t    ClusterController controller =\n\t        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n\t    controller.syncStart();\n\n\t    \r\n\t    MockParticipant[] participants = new MockParticipant[n];\n\t    for (int i = 0; i < n; i++)\n\t    {\n\t      String instanceName = \"localhost_\" + (12918 + i);\n\n\t      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n\t      participants[i].syncStart();\n\t    }\n\n\t    boolean result =\n\t        ClusterStateVerifier.verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                 clusterName));\n\t    Assert.assertTrue(result);\n\t    final ZkHelixTestManager controllerManager = controller.getManager();\n\t    final ZkHelixTestManager participantManager = participants[0].getManager();\n\n\t    \r\n      result = TestHelper.verify(new TestHelper.Verifier() {\n        \n        @Override\n        public boolean verify() throws Exception {\n          int controllerHandlerNb = controllerManager.getHandlers().size();\n          int particHandlerNb = participantManager.getHandlers().size();\n          if (controllerHandlerNb == 9 && particHandlerNb == 2)\n            return true;\n          else\n            return false;\n        }\n      }, 1000);\n\t    \n\t    int controllerHandlerNb = controllerManager.getHandlers().size();\n\t    int particHandlerNb = participantManager.getHandlers().size();\n    \tAssert.assertEquals(controllerHandlerNb, 9, \"HelixController should have 9 (5+2n) callback handlers for 2 participant, but was \" \n    \t    \t\t+ controllerHandlerNb + \", \"\n    \t    \t\t+ printHandlers(controllerManager));\n    \tAssert.assertEquals(particHandlerNb, 2, \"HelixParticipant should have 2 (msg+cur-state) callback handlers, but was \" \n    \t    \t\t+ particHandlerNb + \", \"\n    \t    \t\t+ printHandlers(participantManager));\n\n\t    \r\n\t    System.out.println(\"Expiring controller session...\");\n\t    String oldSessionId = controllerManager.getSessionId();\n\t    \n\t    ZkTestHelper.expireSession(controllerManager.getZkClient());\n\t    String newSessionId = controllerManager.getSessionId();\n\t    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \" + newSessionId);\n\t    \n\t    result =\n\t        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                                   clusterName));\n\t    Assert.assertTrue(result);\n\t    \n\t    \r\n     result = TestHelper.verify(new TestHelper.Verifier() {\n        \n        @Override\n        public boolean verify() throws Exception {\n          Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n          Set<String> watchPaths = watchers.get(\"0x\" + controllerManager.getSessionId());\n          \r\n          \n          \r\n          \r\n          return watchPaths.size() == (6 + 5 * n);\n        }\n      }, 500);\n      Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n      \r\n      result = TestHelper.verify(new TestHelper.Verifier() {\n        \n        @Override\n        public boolean verify() throws Exception {\n          Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n          Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n          \r\n          \n          \r\n          return watchPaths.size() == 2;\n        }\n      }, 500);\n      Assert.assertTrue(result, \"Participant should have 2 zk-watchers after session expiry.\");\n\t    \n\t    \r\n\t    \r\n\t    int handlerNb = controllerManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, controllerHandlerNb, \"controller callback handlers should not increase after participant session expiry, but was \"\n\t    \t\t+ printHandlers(controllerManager));\n\t    handlerNb = participantManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, particHandlerNb, \"participant callback handlers should not increase after participant session expiry, but was \" \n\t    \t\t+ printHandlers(participantManager));\n\n\n\t    System.out.println(\"END \" + clusterName + \" at \"\n\t            + new Date(System.currentTimeMillis()));\n\t}\n","date":"2013-04-26 17:06:20","endLine":304,"groupId":"1708","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/63/594347652fc9ae668c1ca1fba0a4d8336ff73c.src","preCode":"\tpublic void testCbHandlerLeakOnControllerSessionExpiry() throws Exception\n\t{\n\t    \r\n\t    String className = TestHelper.getTestClassName();\n\t    String methodName = TestHelper.getTestMethodName();\n\t    String clusterName = className + \"_\" + methodName;\n\t    int n = 2;\n\n\t    System.out.println(\"START \" + clusterName + \" at \"\n\t        + new Date(System.currentTimeMillis()));\n\n\t    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n\t                            \"localhost\", \r\n\t                            \"TestDB\", \r\n\t                            1, \r\n\t                            32, \r\n\t                            n, \r\n\t                            2, \r\n\t                            \"MasterSlave\",\n\t                            true); \r\n\t    \n\t    \n\t    ClusterController controller =\n\t        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n\t    controller.syncStart();\n\n\t    \r\n\t    MockParticipant[] participants = new MockParticipant[n];\n\t    for (int i = 0; i < n; i++)\n\t    {\n\t      String instanceName = \"localhost_\" + (12918 + i);\n\n\t      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n\t      participants[i].syncStart();\n\t    }\n\n\t    boolean result =\n\t        ClusterStateVerifier.verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                 clusterName));\n\t    Assert.assertTrue(result);\n\t    ZkHelixTestManager controllerManager = controller.getManager();\n\t    ZkHelixTestManager participantManager = participants[0].getManager();\n\n\t    \r\n\t    int controllerHandlerNb = controllerManager.getHandlers().size();\n\t    int particHandlerNb = participantManager.getHandlers().size();\n\t    for (int i = 0; i < 10; i++) {\n\t    \tif (controllerHandlerNb == 9 && particHandlerNb == 2)\n\t    \t\tbreak;\n\t    \tThread.sleep(100);\n\t    \tcontrollerHandlerNb = controllerManager.getHandlers().size();\n\t    \tparticHandlerNb = participantManager.getHandlers().size();\n\t    }\n    \tAssert.assertEquals(controllerHandlerNb, 9, \"HelixController should have 9 (5+2n) callback handlers for 2 participant, but was \" \n    \t    \t\t+ controllerHandlerNb + \", \"\n    \t    \t\t+ printHandlers(controllerManager));\n    \tAssert.assertEquals(particHandlerNb, 2, \"HelixParticipant should have 2 (msg+cur-state) callback handlers, but was \" \n    \t    \t\t+ particHandlerNb + \", \"\n    \t    \t\t+ printHandlers(participantManager));\n\n\n\t    \r\n\t    System.out.println(\"Expiring controller session...\");\n\t    String oldSessionId = controllerManager.getSessionId();\n\t    \n\t    ZkTestHelper.expireSession(controllerManager.getZkClient());\n\t    String newSessionId = controllerManager.getSessionId();\n\t    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \" + newSessionId);\n\t    \n\t    result =\n\t        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n\t                                                                                                   clusterName));\n\t    Assert.assertTrue(result);\n\t    \r\n\t    int handlerNb = controllerManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, controllerHandlerNb, \"controller callback handlers should not increase after participant session expiry, but was \"\n\t    \t\t+ printHandlers(controllerManager));\n\t    handlerNb = participantManager.getHandlers().size();\n\t    Assert.assertEquals(handlerNb, particHandlerNb, \"participant callback handlers should not increase after participant session expiry, but was \" \n\t    \t\t+ printHandlers(participantManager));\n\n\n\t    System.out.println(\"END \" + clusterName + \" at \"\n\t            + new Date(System.currentTimeMillis()));\n\t}\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"243f32cf58ec3740da70e8109026888a7d4bc196","commitMessage":"@@@HELIX-89: User added listeners are not re-init after zk session expiry\n","date":"2013-04-26 17:06:20","modifiedFileCount":"3","status":"M","submitter":"zzhang"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 2;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 2 zk-watchers.\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 2,\n        \"HelixParticipant should have 2 (msg+cur-state) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 2;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 2 zk-watchers after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":185,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/77/597616b6edba99e687c7fc82268e31f9e9e796.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    MockParticipant[] participants = new MockParticipant[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final ZkHelixTestManager controllerManager = controller.getManager();\n    final ZkHelixTestManager participantManagerToExpire =\n        (ZkHelixTestManager) participants[1].getManager();\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controllerManager.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 2;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 2 zk-watchers.\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controllerManager.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 2,\n        \"HelixParticipant should have 2 (msg+cur-state) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controllerManager.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 2;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 2 zk-watchers after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controllerManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    \r\n    \r\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 9 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 2,\n        \"HelixParticipant should have 2 (msg+cur-state) callback handlers, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 2;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 2 zk-watchers after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":314,"groupId":"3343","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/77/597616b6edba99e687c7fc82268e31f9e9e796.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    MockParticipant[] participants = new MockParticipant[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final ZkHelixTestManager controllerManager = controller.getManager();\n    final ZkHelixTestManager participantManager = participants[0].getManager();\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controllerManager.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 9 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controllerManager.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controllerManager));\n    Assert.assertEquals(particHandlerNb, 2,\n        \"HelixParticipant should have 2 (msg+cur-state) callback handlers, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controllerManager.getSessionId();\n\n    ZkTestHelper.expireSession(controllerManager.getZkClient());\n    String newSessionId = controllerManager.getSessionId();\n    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controllerManager.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 2;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 2 zk-watchers after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controllerManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controllerManager));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"5c7721970eef78e2d13d35b4934b07cb11a03cd9","commitMessage":"@@@Merge branch 'helix-0.6.2-release' of https://git-wip-us.apache.org/repos/asf/incubator-helix into helix-0.6.2-release\n","date":"2013-10-25 09:35:16","modifiedFileCount":"105","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2014-05-23 02:08:01","codes":[{"authorDate":"2014-05-23 02:08:01","commitOrder":4,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-05-23 02:08:01","endLine":185,"groupId":"3340","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d8/74fcfb243a940e9add3f88b952dd733562e23d.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 2;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 2 zk-watchers.\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 2,\n        \"HelixParticipant should have 2 (msg+cur-state) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 2;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 2 zk-watchers after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2014-05-23 02:08:01","commitOrder":4,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    \r\n    \r\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 9 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-05-23 02:08:01","endLine":314,"groupId":"3343","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d8/74fcfb243a940e9add3f88b952dd733562e23d.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    \r\n    \r\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 9 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 2,\n        \"HelixParticipant should have 2 (msg+cur-state) callback handlers, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 2;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 2 zk-watchers after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"4ff7e3888561b46ca6d9c590bdf425b0d2e0716b","commitMessage":"@@@Merge branch 'helix-0.6.x' of https://git-wip-us.apache.org/repos/asf/helix into helix-0.6.x\n","date":"2014-05-23 02:08:01","modifiedFileCount":"57","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (7 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 10,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (7 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":185,"groupId":"3340","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bc/c4a449df65da858d817525e6061efc787c0b44.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    \r\n    \r\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 10,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (7 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":314,"groupId":"3343","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bc/c4a449df65da858d817525e6061efc787c0b44.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    \r\n    \r\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 9 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 9,\n        \"HelixController should have 9 (5+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (6 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-10-12 09:18:20","codes":[{"authorDate":"2017-10-12 09:18:20","commitOrder":6,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (8 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 8 + 5*n zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (8 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 8 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-01-25 10:30:10","endLine":185,"groupId":"3340","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/04/c3ed4fe85061afcc0c33c45ba247c18192e466.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (7 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 10,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (7 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2017-10-12 09:18:20","commitOrder":6,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    \r\n    \r\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (8 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 8 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-01-25 10:30:10","endLine":314,"groupId":"3343","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/04/c3ed4fe85061afcc0c33c45ba247c18192e466.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    \r\n    \r\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 10,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (7 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 6 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"31cec9114b77ee37f79da137ed914c7b330780f3","commitMessage":"@@@Batch API Implementation\n\nThis rb include\n1. The batch API define and batch API implementation and make old API backward compatible.\n2. The server changes the logic to determine which are the disabled instances for both batch API or old API.\n","date":"2018-01-25 10:30:10","modifiedFileCount":"18","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-03-20 01:48:49","codes":[{"authorDate":"2018-03-20 01:48:49","commitOrder":7,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-04-06 07:41:20","endLine":184,"groupId":"5994","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/95/f711164c6bb481869d182453c0e56221fd82f0.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (8 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 8 + 5*n zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (8 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 8 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2018-03-20 01:48:49","commitOrder":7,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (7 + r + (4 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-04-06 07:41:20","endLine":308,"groupId":"1393","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/95/f711164c6bb481869d182453c0e56221fd82f0.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n    \r\n    \r\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\"Expired controller session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (8 + 5 * n);\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Controller should have 8 + 5*n zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 500);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"1a2937c5ae91e30b77f99a6a85eb527728a274d0","commitMessage":"@@@Fix TestZkCallbackHandlerLeak.  and refine some log outputs.\n","date":"2018-04-06 07:41:20","modifiedFileCount":"9","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-06 00:30:15","codes":[{"authorDate":"2018-03-20 01:48:49","commitOrder":8,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-04-06 07:41:20","endLine":184,"groupId":"5994","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/95/f711164c6bb481869d182453c0e56221fd82f0.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\"Expried participant session. oldSessionId: \" + oldSessionId\n        + \", newSessionId: \" + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2018-06-06 00:30:15","commitOrder":8,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 7 + 2 * n,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (7 + r + (4 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-13 04:52:57","endLine":313,"groupId":"1393","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f7/3560b99e2ec166c9bd043cbd0c6b39b556c8b8.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (7 + r + (4 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"b654c543c8915f73399cdbb189dd332dd19fb261","commitMessage":"@@@Delete duplicated test class TestZkCallbackHandlerLeak.\n","date":"2018-07-13 04:52:57","modifiedFileCount":"1","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":9,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expried participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":193,"groupId":"5994","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0f/fe8e0cb8164c3aaaa74ad80c3f4a8fd379e68f.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expried participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":9,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 7 + 2 * n,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (7 + r + (4 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":318,"groupId":"6405","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0f/fe8e0cb8164c3aaaa74ad80c3f4a8fd379e68f.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 7 + 2 * n,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (7 + r + (4 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2020-03-26 05:24:25","codes":[{"authorDate":"2020-03-26 05:24:25","commitOrder":10,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 14,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expired participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-04-24 03:27:36","endLine":194,"groupId":"5994","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7e/b74a735895462159c7dc932cb57b3780e86501.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 11,\n        \"HelixController should have 10 (5+2n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expried participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (7 + r + ( 4 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-03-26 05:24:25","commitOrder":10,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 3 * n,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (8 + r + (5 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-04-24 03:27:36","endLine":319,"groupId":"6405","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7e/b74a735895462159c7dc932cb57b3780e86501.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 7 + 2 * n,\n        \"HelixController should have 10 (6+2n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (7 + r + (4 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"fc3dfdc9f7fd0ec2fbdd41846f847e948e651cdd","commitMessage":"@@@Add new stages in Helix generic controller for customized view aggregation. (#851)\n\nAdd extra stages and pipelines in controller for customized state computation and customized view aggregation.\nAdd refresh logic in resource data provider for customized view related data refresh.\nAdd customized state event handling in CallbackHandler.\nAdd integration test for customized view aggregation.\nModify existing tests to verify new logic.\n\nCo-authored-by: Meng Zhang <mnzhang@mnzhang-mn1.linkedin.biz>","date":"2020-04-24 03:27:36","modifiedFileCount":"18","status":"M","submitter":"zhangmeng916"},{"authorTime":"2020-08-06 10:47:55","codes":[{"authorDate":"2020-08-06 10:47:55","commitOrder":11,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 14,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expired participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-08-06 10:47:55","endLine":201,"groupId":"5994","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/db/ed61f0eafecb83e3aef1312c3803bd8da6c6b8.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 14,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expired participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-08-06 10:47:55","commitOrder":11,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 3 * n,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (8 + r + (5 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-08-06 10:47:55","endLine":326,"groupId":"6405","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/db/ed61f0eafecb83e3aef1312c3803bd8da6c6b8.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 3 * n,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (8 + r + (5 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"56cf1259add5d00bb13fefb018a5de9679a1c6a7","commitMessage":"@@@Fix ZkHelixClusterVerifier related resource leakage (#1185)\n\nZkHelixClusterVerifier and its subclass built with ZK addres would\ncreate an internal ZkClient. Without properly closing the ZkClient\nor using global ZkClient in the test base. There would be four\nthreads and one ZooKeeper client object leaked. The leaked threads\nwould be in thousands and thus be one of the main contributor\npreventing the unit test from finishing. This pull request addresses\nthis issue.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-08-06 10:47:55","modifiedFileCount":"30","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2020-10-08 07:58:42","commitOrder":12,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 14,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expired participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-08 07:58:42","endLine":204,"groupId":"5994","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/60/dbf914af019dd6dd259bf87857855d9e4c29aa.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 14,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expired participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-10-08 07:58:42","commitOrder":12,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 3 * n,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (8 + r + (5 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-08 07:58:42","endLine":331,"groupId":"6405","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/60/dbf914af019dd6dd259bf87857855d9e4c29aa.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 3 * n,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (8 + r + (5 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-12-09 06:31:12","codes":[{"authorDate":"2020-12-09 06:31:12","commitOrder":13,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n    final int taskResourceCount = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    PropertyKey.Builder keyBuilder = new PropertyKey.Builder(clusterName);\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n\n      \r\n      for (int j = 0; j < taskResourceCount; j++) {\n        _baseAccessor.create(keyBuilder\n            .taskCurrentState(instanceName, participants[i].getSessionId(), \"TestTaskResource_\" + j)\n            .toString(), new ZNRecord(\"TestTaskResource_\" + j), AccessOption.PERSISTENT);\n      }\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + (6 + r + taskResourceCount) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 4 * n,\n        \"HelixController should have 16 (8+4n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expired participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (8 + r + (6 + r + taskResourceCount) * (n - 1) + 6 + r);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-12-22 07:00:24","endLine":213,"groupId":"6404","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/c92dcea07edea73e862be6658aed0e85327f7c.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 14,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expired participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + ( 5 + r) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-12-09 06:31:12","commitOrder":13,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n    final int taskResourceCount = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    PropertyKey.Builder keyBuilder = new PropertyKey.Builder(clusterName);\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n      \r\n      for (int j = 0; j < taskResourceCount; j++) {\n        _baseAccessor.create(keyBuilder\n            .taskCurrentState(instanceName, participants[i].getSessionId(), \"TestTaskResource_\" + j)\n            .toString(), new ZNRecord(\"TestTaskResource_\" + j), AccessOption.PERSISTENT);\n      }\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 4 * n,\n        \"HelixController should have 16 (8+4n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        \r\n        int expected = (8 + r + (6 + r + taskResourceCount) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-12-22 07:00:24","endLine":349,"groupId":"6405","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/c92dcea07edea73e862be6658aed0e85327f7c.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 3 * n,\n        \"HelixController should have 14 (8+3n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        int expected = (8 + r + (5 + r) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"a18deb06c28e25e79a9a773069a79ce21a2399b3","commitMessage":"@@@Controller-side Task Current State Migration (#1550)\n\nFirst part of task current state migration. \nAll changes made in this PR are on the controller side \nand are directly pipeline-impacting.","date":"2020-12-22 07:00:24","modifiedFileCount":"25","status":"M","submitter":"Neal Sun"},{"authorTime":"2021-05-13 01:26:45","codes":[{"authorDate":"2021-05-13 01:26:45","commitOrder":14,"curCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n    final int taskResourceCount = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    PropertyKey.Builder keyBuilder = new PropertyKey.Builder(clusterName);\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n\n      \r\n      for (int j = 0; j < taskResourceCount; j++) {\n        _baseAccessor.create(keyBuilder\n            .taskCurrentState(instanceName, participants[i].getSessionId(), \"TestTaskResource_\" + j)\n            .toString(), new ZNRecord(\"TestTaskResource_\" + j), AccessOption.PERSISTENT);\n      }\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(() -> {\n      Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n      Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n\n      \r\n      return watchPaths.size() == (8 + r + (6 + r + taskResourceCount) * n);\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(() -> {\n      Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n      Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n\n      \r\n      return watchPaths.size() == 1;\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 4 * n,\n        \"HelixController should have 16 (8+4n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expired participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(() -> {\n      Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n      Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n\n      \r\n      \r\n      return watchPaths.size() == (8 + r + (6 + r + taskResourceCount) * (n - 1) + 6 + r);\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(() -> {\n      Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n      Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n\n      \r\n      return watchPaths.size() == 1;\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-05-13 01:26:45","endLine":184,"groupId":"10595","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testCbHandlerLeakOnParticipantSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d9/f87074f694325c5d27238bbb7c86d1e77a2d72.src","preCode":"  public void testCbHandlerLeakOnParticipantSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 2;\n    final int taskResourceCount = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    PropertyKey.Builder keyBuilder = new PropertyKey.Builder(clusterName);\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n\n      \r\n      for (int j = 0; j < taskResourceCount; j++) {\n        _baseAccessor.create(keyBuilder\n            .taskCurrentState(instanceName, participants[i].getSessionId(), \"TestTaskResource_\" + j)\n            .toString(), new ZNRecord(\"TestTaskResource_\" + j), AccessOption.PERSISTENT);\n      }\n    }\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManagerToExpire = participants[1];\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        \r\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == (8 + r + (6 + r + taskResourceCount) * n);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher. MESSAGES->HelixTaskExecutor\");\n\n    \r\n    \r\n    \r\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 4 * n,\n        \"HelixController should have 16 (8+4n) callback handlers for 2 (n) participant\");\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handlers\");\n\n    \r\n    System.out.println(\"Expiring participant session...\");\n    String oldSessionId = participantManagerToExpire.getSessionId();\n\n    ZkTestHelper.expireSession(participantManagerToExpire.getZkClient());\n    String newSessionId = participantManagerToExpire.getSessionId();\n    System.out.println(\n        \"Expired participant session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        \r\n\n        \r\n        \r\n        return watchPaths.size() == (8 + r + (6 + r + taskResourceCount) * (n - 1) + 6 + r);\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect number of zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManagerToExpire.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry\");\n    handlerNb = participantManagerToExpire.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-05-13 01:26:45","commitOrder":14,"curCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n    final int taskResourceCount = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    PropertyKey.Builder keyBuilder = new PropertyKey.Builder(clusterName);\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n      \r\n      for (int j = 0; j < taskResourceCount; j++) {\n        _baseAccessor.create(keyBuilder\n            .taskCurrentState(instanceName, participants[i].getSessionId(), \"TestTaskResource_\" + j)\n            .toString(), new ZNRecord(\"TestTaskResource_\" + j), AccessOption.PERSISTENT);\n      }\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(() -> {\n      int controllerHandlerNb = controller.getHandlers().size();\n      int particHandlerNb = participantManager.getHandlers().size();\n      if (controllerHandlerNb == 10 && particHandlerNb == 2)\n        return true;\n      else\n        return false;\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 4 * n,\n        \"HelixController should have 16 (8+4n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(() -> {\n      Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n      Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n      System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n      \r\n      \r\n      int expected = (8 + r + (6 + r + taskResourceCount) * n);\n      return watchPaths.size() == expected;\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(() -> {\n      Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n      Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n\n      \r\n      return watchPaths.size() == 1;\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-05-13 01:26:45","endLine":305,"groupId":"10595","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testCbHandlerLeakOnControllerSessionExpiry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d9/f87074f694325c5d27238bbb7c86d1e77a2d72.src","preCode":"  public void testCbHandlerLeakOnControllerSessionExpiry() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n    final int r = 1;\n    final int taskResourceCount = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        r, \r\n        32, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    final ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    PropertyKey.Builder keyBuilder = new PropertyKey.Builder(clusterName);\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n      \r\n      for (int j = 0; j < taskResourceCount; j++) {\n        _baseAccessor.create(keyBuilder\n            .taskCurrentState(instanceName, participants[i].getSessionId(), \"TestTaskResource_\" + j)\n            .toString(), new ZNRecord(\"TestTaskResource_\" + j), AccessOption.PERSISTENT);\n      }\n    }\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n    final MockParticipantManager participantManager = participants[0];\n\n    \r\n    TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        int controllerHandlerNb = controller.getHandlers().size();\n        int particHandlerNb = participantManager.getHandlers().size();\n        if (controllerHandlerNb == 10 && particHandlerNb == 2)\n          return true;\n        else\n          return false;\n      }\n    }, 1000);\n\n    int controllerHandlerNb = controller.getHandlers().size();\n    int particHandlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(controllerHandlerNb, 8 + 4 * n,\n        \"HelixController should have 16 (8+4n) callback handlers for 2 participant, but was \"\n            + controllerHandlerNb + \", \" + printHandlers(controller));\n    Assert.assertEquals(particHandlerNb, 1,\n        \"HelixParticipant should have 1 (msg->HelixTaskExecutor) callback handler, but was \"\n            + particHandlerNb + \", \" + printHandlers(participantManager));\n\n    \r\n    System.out.println(\"Expiring controller session...\");\n    String oldSessionId = controller.getSessionId();\n\n    ZkTestHelper.expireSession(controller.getZkClient());\n    String newSessionId = controller.getSessionId();\n    System.out.println(\n        \"Expired controller session. oldSessionId: \" + oldSessionId + \", newSessionId: \"\n            + newSessionId);\n\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    boolean result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + controller.getSessionId());\n        System.err.println(\"controller watch paths after session expiry: \" + watchPaths.size());\n\n        \r\n        \r\n        int expected = (8 + r + (6 + r + taskResourceCount) * n);\n        return watchPaths.size() == expected;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Controller has incorrect zk-watchers after session expiry.\");\n\n    \r\n    result = TestHelper.verify(new TestHelper.Verifier() {\n\n      @Override\n      public boolean verify() throws Exception {\n        Map<String, Set<String>> watchers = ZkTestHelper.getListenersBySession(ZK_ADDR);\n        Set<String> watchPaths = watchers.get(\"0x\" + participantManager.getSessionId());\n        \r\n\n        \r\n        return watchPaths.size() == 1;\n      }\n    }, 2000);\n    Assert.assertTrue(result, \"Participant should have 1 zk-watcher after session expiry.\");\n\n    \r\n    \r\n    int handlerNb = controller.getHandlers().size();\n    Assert.assertEquals(handlerNb, controllerHandlerNb,\n        \"controller callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(controller));\n    handlerNb = participantManager.getHandlers().size();\n    Assert.assertEquals(handlerNb, particHandlerNb,\n        \"participant callback handlers should not increase after participant session expiry, but was \"\n            + printHandlers(participantManager));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"1758f2d3b40270205efd54eacc24f0ed8c13405a","commitMessage":"@@@Fix unstable test TestZkCallbackHandlerLeak. (#1734)\n\nExtend the wait and check section to wait for the expected condition with more tolerance.","date":"2021-05-13 01:26:45","modifiedFileCount":"1","status":"M","submitter":"Jiajun Wang"}]
