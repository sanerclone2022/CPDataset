[{"authorTime":"2020-03-18 14:08:20","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":4,"curCode":"  private void computeExternalView(final Resource resource,\n      final CurrentStateOutput currentStateOutput, final ResourceControllerDataProvider cache,\n      final ClusterStatusMonitor clusterStatusMonitor, final Map<String, ExternalView> curExtViews,\n      final HelixManager manager, Set<String> monitoringResources, List<ExternalView> newExtViews) {\n    String resourceName = resource.getResourceName();\n    ExternalView view = new ExternalView(resource.getResourceName());\n    \r\n    \r\n    if (resource.getBucketSize() > 0) {\n      view.setBucketSize(resource.getBucketSize());\n    } else {\n      view.setBucketSize(currentStateOutput.getBucketSize(resourceName));\n    }\n\n    int totalPendingMessageCount = 0;\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> currentStateMap =\n          currentStateOutput.getCurrentStateMap(resourceName, partition);\n      if (currentStateMap != null && currentStateMap.size() > 0) {\n        for (String instance : currentStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, currentStateMap.get(instance));\n        }\n      }\n      totalPendingMessageCount +=\n          currentStateOutput.getPendingMessageMap(resource.getResourceName(), partition).size();\n    }\n\n    \r\n    IdealState idealState = cache.getIdealState(resourceName);\n    ResourceConfig resourceConfig = cache.getResourceConfig(resourceName);\n    if (clusterStatusMonitor != null) {\n      if (idealState != null \r\n          && (resourceConfig == null || !resourceConfig.isMonitoringDisabled()) \r\n          && !idealState.getStateModelDefRef() \r\n          .equalsIgnoreCase(DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        StateModelDefinition stateModelDef =\n            cache.getStateModelDef(idealState.getStateModelDefRef());\n        clusterStatusMonitor\n            .setResourceStatus(view, cache.getIdealState(view.getResourceName()),\n                stateModelDef, totalPendingMessageCount);\n        monitoringResources.add(resourceName);\n      }\n    }\n\n    ExternalView curExtView = curExtViews.get(resourceName);\n    \r\n    if (idealState != null) {\n      view.getRecord().getSimpleFields().putAll(idealState.getRecord().getSimpleFields());\n    } else if (curExtView != null) {\n      view.getRecord().getSimpleFields().putAll(curExtView.getRecord().getSimpleFields());\n    }\n\n    \r\n    if (curExtView == null || !curExtView.getRecord().equals(view.getRecord())) {\n      \r\n      newExtViews.add(view);\n\n      \r\n      \r\n      \r\n      if (idealState != null\n          && idealState.getStateModelDefRef().equalsIgnoreCase(\n          DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        updateScheduledTaskStatus(view, manager, idealState);\n      }\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":217,"groupId":"2404","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"computeExternalView","params":"(finalResourceresource@finalCurrentStateOutputcurrentStateOutput@finalResourceControllerDataProvidercache@finalClusterStatusMonitorclusterStatusMonitor@finalMap<String@ExternalView>curExtViews@finalHelixManagermanager@Set<String>monitoringResources@List<ExternalView>newExtViews)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d0/993f684d1173439d819d48a27ec3db36195b64.src","preCode":"  private void computeExternalView(final Resource resource,\n      final CurrentStateOutput currentStateOutput, final ResourceControllerDataProvider cache,\n      final ClusterStatusMonitor clusterStatusMonitor, final Map<String, ExternalView> curExtViews,\n      final HelixManager manager, Set<String> monitoringResources, List<ExternalView> newExtViews) {\n    String resourceName = resource.getResourceName();\n    ExternalView view = new ExternalView(resource.getResourceName());\n    \r\n    \r\n    if (resource.getBucketSize() > 0) {\n      view.setBucketSize(resource.getBucketSize());\n    } else {\n      view.setBucketSize(currentStateOutput.getBucketSize(resourceName));\n    }\n\n    int totalPendingMessageCount = 0;\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> currentStateMap =\n          currentStateOutput.getCurrentStateMap(resourceName, partition);\n      if (currentStateMap != null && currentStateMap.size() > 0) {\n        for (String instance : currentStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, currentStateMap.get(instance));\n        }\n      }\n      totalPendingMessageCount +=\n          currentStateOutput.getPendingMessageMap(resource.getResourceName(), partition).size();\n    }\n\n    \r\n    IdealState idealState = cache.getIdealState(resourceName);\n    ResourceConfig resourceConfig = cache.getResourceConfig(resourceName);\n    if (clusterStatusMonitor != null) {\n      if (idealState != null \r\n          && (resourceConfig == null || !resourceConfig.isMonitoringDisabled()) \r\n          && !idealState.getStateModelDefRef() \r\n          .equalsIgnoreCase(DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        StateModelDefinition stateModelDef =\n            cache.getStateModelDef(idealState.getStateModelDefRef());\n        clusterStatusMonitor\n            .setResourceStatus(view, cache.getIdealState(view.getResourceName()),\n                stateModelDef, totalPendingMessageCount);\n        monitoringResources.add(resourceName);\n      }\n    }\n\n    ExternalView curExtView = curExtViews.get(resourceName);\n    \r\n    if (idealState != null) {\n      view.getRecord().getSimpleFields().putAll(idealState.getRecord().getSimpleFields());\n    } else if (curExtView != null) {\n      view.getRecord().getSimpleFields().putAll(curExtView.getRecord().getSimpleFields());\n    }\n\n    \r\n    if (curExtView == null || !curExtView.getRecord().equals(view.getRecord())) {\n      \r\n      newExtViews.add(view);\n\n      \r\n      \r\n      \r\n      if (idealState != null\n          && idealState.getStateModelDefRef().equalsIgnoreCase(\n          DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        updateScheduledTaskStatus(view, manager, idealState);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"NB"},{"authorDate":"2020-03-18 14:08:20","commitOrder":4,"curCode":"  private void computeCustomizedStateView(final Resource resource, final String stateType,\n      CustomizedStateOutput customizedStateOutput,\n      final Map<String, CustomizedView> curCustomizedViews,\n      List<CustomizedView> updatedCustomizedViews) {\n    String resourceName = resource.getResourceName();\n    CustomizedView view = new CustomizedView(resource.getResourceName());\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> customizedStateMap =\n          customizedStateOutput.getPartitionCustomizedStateMap(stateType, resourceName, partition);\n      if (customizedStateMap != null && customizedStateMap.size() > 0) {\n        for (String instance : customizedStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, customizedStateMap.get(instance));\n        }\n      }\n    }\n\n    CustomizedView curCustomizedView = curCustomizedViews.get(resourceName);\n\n    \r\n    if (curCustomizedView == null || !curCustomizedView.getRecord().equals(view.getRecord())) {\n      \r\n      updatedCustomizedViews.add(view);\n    }\n  }\n","date":"2020-04-24 03:27:36","endLine":149,"groupId":"5714","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"computeCustomizedStateView","params":"(finalResourceresource@finalStringstateType@CustomizedStateOutputcustomizedStateOutput@finalMap<String@CustomizedView>curCustomizedViews@List<CustomizedView>updatedCustomizedViews)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/de/0bc1c5c559e591b23d989fb032d6eb28bac2c9.src","preCode":"  private void computeCustomizedStateView(final Resource resource, final String stateType,\n      CustomizedStateOutput customizedStateOutput,\n      final Map<String, CustomizedView> curCustomizedViews,\n      List<CustomizedView> updatedCustomizedViews) {\n    String resourceName = resource.getResourceName();\n    CustomizedView view = new CustomizedView(resource.getResourceName());\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> customizedStateMap =\n          customizedStateOutput.getPartitionCustomizedStateMap(stateType, resourceName, partition);\n      if (customizedStateMap != null && customizedStateMap.size() > 0) {\n        for (String instance : customizedStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, customizedStateMap.get(instance));\n        }\n      }\n    }\n\n    CustomizedView curCustomizedView = curCustomizedViews.get(resourceName);\n\n    \r\n    if (curCustomizedView == null || !curCustomizedView.getRecord().equals(view.getRecord())) {\n      \r\n      updatedCustomizedViews.add(view);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/stages/CustomizedViewAggregationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"}],"commitId":"cacbd85b0ef05f57084fa65d498858732b06d7ff","commitMessage":"@@@Add two stages for customized state view aggregation. (#888)\n\n1. One stage is the computation stage for customized state. It takes the Zookeeper data of customized states and converts them to the formatted output used by the other stage.\n2. The other stage is customized view aggregation stage. It will take the output from the customized state computation stage.  and output the customized view to Zookeeper.\n3. The two stages together compute the customized view from the customized states.\n4. Unit tests are added to verify the correctness of the two stages.","date":"2020-04-24 03:27:36","modifiedFileCount":"12","status":"M","submitter":"zhangmeng916"},{"authorTime":"2020-08-14 11:43:41","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":5,"curCode":"  private void computeExternalView(final Resource resource,\n      final CurrentStateOutput currentStateOutput, final ResourceControllerDataProvider cache,\n      final ClusterStatusMonitor clusterStatusMonitor, final Map<String, ExternalView> curExtViews,\n      final HelixManager manager, Set<String> monitoringResources, List<ExternalView> newExtViews) {\n    String resourceName = resource.getResourceName();\n    ExternalView view = new ExternalView(resource.getResourceName());\n    \r\n    \r\n    if (resource.getBucketSize() > 0) {\n      view.setBucketSize(resource.getBucketSize());\n    } else {\n      view.setBucketSize(currentStateOutput.getBucketSize(resourceName));\n    }\n\n    int totalPendingMessageCount = 0;\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> currentStateMap =\n          currentStateOutput.getCurrentStateMap(resourceName, partition);\n      if (currentStateMap != null && currentStateMap.size() > 0) {\n        for (String instance : currentStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, currentStateMap.get(instance));\n        }\n      }\n      totalPendingMessageCount +=\n          currentStateOutput.getPendingMessageMap(resource.getResourceName(), partition).size();\n    }\n\n    \r\n    IdealState idealState = cache.getIdealState(resourceName);\n    ResourceConfig resourceConfig = cache.getResourceConfig(resourceName);\n    if (clusterStatusMonitor != null) {\n      if (idealState != null \r\n          && (resourceConfig == null || !resourceConfig.isMonitoringDisabled()) \r\n          && !idealState.getStateModelDefRef() \r\n          .equalsIgnoreCase(DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        StateModelDefinition stateModelDef =\n            cache.getStateModelDef(idealState.getStateModelDefRef());\n        clusterStatusMonitor\n            .setResourceStatus(view, cache.getIdealState(view.getResourceName()),\n                stateModelDef, totalPendingMessageCount);\n        monitoringResources.add(resourceName);\n      }\n    }\n\n    ExternalView curExtView = curExtViews.get(resourceName);\n    \r\n    if (idealState != null) {\n      view.getRecord().getSimpleFields().putAll(idealState.getRecord().getSimpleFields());\n    } else if (curExtView != null) {\n      view.getRecord().getSimpleFields().putAll(curExtView.getRecord().getSimpleFields());\n    }\n\n    \r\n    if (curExtView == null || !curExtView.getRecord().equals(view.getRecord())) {\n      \r\n      newExtViews.add(view);\n\n      \r\n      \r\n      \r\n      if (idealState != null\n          && idealState.getStateModelDefRef().equalsIgnoreCase(\n          DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        updateScheduledTaskStatus(view, manager, idealState);\n      }\n    }\n  }\n","date":"2019-02-26 09:36:00","endLine":217,"groupId":"2404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"computeExternalView","params":"(finalResourceresource@finalCurrentStateOutputcurrentStateOutput@finalResourceControllerDataProvidercache@finalClusterStatusMonitorclusterStatusMonitor@finalMap<String@ExternalView>curExtViews@finalHelixManagermanager@Set<String>monitoringResources@List<ExternalView>newExtViews)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d0/993f684d1173439d819d48a27ec3db36195b64.src","preCode":"  private void computeExternalView(final Resource resource,\n      final CurrentStateOutput currentStateOutput, final ResourceControllerDataProvider cache,\n      final ClusterStatusMonitor clusterStatusMonitor, final Map<String, ExternalView> curExtViews,\n      final HelixManager manager, Set<String> monitoringResources, List<ExternalView> newExtViews) {\n    String resourceName = resource.getResourceName();\n    ExternalView view = new ExternalView(resource.getResourceName());\n    \r\n    \r\n    if (resource.getBucketSize() > 0) {\n      view.setBucketSize(resource.getBucketSize());\n    } else {\n      view.setBucketSize(currentStateOutput.getBucketSize(resourceName));\n    }\n\n    int totalPendingMessageCount = 0;\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> currentStateMap =\n          currentStateOutput.getCurrentStateMap(resourceName, partition);\n      if (currentStateMap != null && currentStateMap.size() > 0) {\n        for (String instance : currentStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, currentStateMap.get(instance));\n        }\n      }\n      totalPendingMessageCount +=\n          currentStateOutput.getPendingMessageMap(resource.getResourceName(), partition).size();\n    }\n\n    \r\n    IdealState idealState = cache.getIdealState(resourceName);\n    ResourceConfig resourceConfig = cache.getResourceConfig(resourceName);\n    if (clusterStatusMonitor != null) {\n      if (idealState != null \r\n          && (resourceConfig == null || !resourceConfig.isMonitoringDisabled()) \r\n          && !idealState.getStateModelDefRef() \r\n          .equalsIgnoreCase(DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        StateModelDefinition stateModelDef =\n            cache.getStateModelDef(idealState.getStateModelDefRef());\n        clusterStatusMonitor\n            .setResourceStatus(view, cache.getIdealState(view.getResourceName()),\n                stateModelDef, totalPendingMessageCount);\n        monitoringResources.add(resourceName);\n      }\n    }\n\n    ExternalView curExtView = curExtViews.get(resourceName);\n    \r\n    if (idealState != null) {\n      view.getRecord().getSimpleFields().putAll(idealState.getRecord().getSimpleFields());\n    } else if (curExtView != null) {\n      view.getRecord().getSimpleFields().putAll(curExtView.getRecord().getSimpleFields());\n    }\n\n    \r\n    if (curExtView == null || !curExtView.getRecord().equals(view.getRecord())) {\n      \r\n      newExtViews.add(view);\n\n      \r\n      \r\n      \r\n      if (idealState != null\n          && idealState.getStateModelDefRef().equalsIgnoreCase(\n          DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        updateScheduledTaskStatus(view, manager, idealState);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"N"},{"authorDate":"2020-08-14 11:43:41","commitOrder":5,"curCode":"  private void computeCustomizedStateView(final Resource resource, final String stateType,\n      CustomizedStateOutput customizedStateOutput,\n      final Map<String, CustomizedView> curCustomizedViews,\n      List<CustomizedView> updatedCustomizedViews,\n      Map<String, Map<Partition, Map<String, Long>>> updatedStartTimestamps) {\n    String resourceName = resource.getResourceName();\n    CustomizedView view = new CustomizedView(resource.getResourceName());\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> customizedStateMap =\n          customizedStateOutput.getPartitionCustomizedStateMap(stateType, resourceName, partition);\n      if (customizedStateMap != null && customizedStateMap.size() > 0) {\n        for (String instance : customizedStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, customizedStateMap.get(instance));\n        }\n      }\n    }\n\n    CustomizedView curCustomizedView = curCustomizedViews.get(resourceName);\n\n    \r\n    if (curCustomizedView == null || !curCustomizedView.getRecord().equals(view.getRecord())) {\n      \r\n      updatedCustomizedViews.add(view);\n      updatedStartTimestamps.put(resourceName,\n          customizedStateOutput.getResourceStartTimeMap(stateType, resourceName));\n    }\n  }\n","date":"2020-08-14 11:43:41","endLine":168,"groupId":"5714","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"computeCustomizedStateView","params":"(finalResourceresource@finalStringstateType@CustomizedStateOutputcustomizedStateOutput@finalMap<String@CustomizedView>curCustomizedViews@List<CustomizedView>updatedCustomizedViews@Map<String@Map<Partition@Map<String@Long>>>updatedStartTimestamps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/82630f8456f2820d7a42046d7109f5a23f3b06.src","preCode":"  private void computeCustomizedStateView(final Resource resource, final String stateType,\n      CustomizedStateOutput customizedStateOutput,\n      final Map<String, CustomizedView> curCustomizedViews,\n      List<CustomizedView> updatedCustomizedViews) {\n    String resourceName = resource.getResourceName();\n    CustomizedView view = new CustomizedView(resource.getResourceName());\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> customizedStateMap =\n          customizedStateOutput.getPartitionCustomizedStateMap(stateType, resourceName, partition);\n      if (customizedStateMap != null && customizedStateMap.size() > 0) {\n        for (String instance : customizedStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, customizedStateMap.get(instance));\n        }\n      }\n    }\n\n    CustomizedView curCustomizedView = curCustomizedViews.get(resourceName);\n\n    \r\n    if (curCustomizedView == null || !curCustomizedView.getRecord().equals(view.getRecord())) {\n      \r\n      updatedCustomizedViews.add(view);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/stages/CustomizedViewAggregationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"918039bf5cdf1ce40c8e47910738ba541d4958e6","commitMessage":"@@@Add latency metric support for customized view aggregation (#1187)\n\nAdd support for latency metric reporting between the time when user updates customized state for a partition using CustomizedStateProvider.  and the time this change shows up in aggregated customized view and written to zk.","date":"2020-08-14 11:43:41","modifiedFileCount":"10","status":"M","submitter":"Molly Gao"},{"authorTime":"2020-08-14 11:43:41","codes":[{"authorDate":"2021-04-15 08:52:19","commitOrder":6,"curCode":"  private void computeExternalView(final Resource resource,\n      final CurrentStateOutput currentStateOutput, final ResourceControllerDataProvider cache,\n      final ClusterStatusMonitor clusterStatusMonitor, final Map<String, ExternalView> curExtViews,\n      final HelixManager manager, Set<String> monitoringResources, List<ExternalView> newExtViews) {\n    String resourceName = resource.getResourceName();\n    ExternalView view = new ExternalView(resource.getResourceName());\n    \r\n    \r\n    if (resource.getBucketSize() > 0) {\n      view.setBucketSize(resource.getBucketSize());\n    } else {\n      view.setBucketSize(currentStateOutput.getBucketSize(resourceName));\n    }\n\n    int totalPendingMessageCount = 0;\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> currentStateMap =\n          currentStateOutput.getCurrentStateMap(resourceName, partition);\n      if (currentStateMap != null && currentStateMap.size() > 0) {\n        for (String instance : currentStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, currentStateMap.get(instance));\n        }\n      }\n      totalPendingMessageCount +=\n          currentStateOutput.getPendingMessageMap(resource.getResourceName(), partition).size();\n    }\n\n    \r\n    IdealState idealState = cache.getIdealState(resourceName);\n    ResourceConfig resourceConfig = cache.getResourceConfig(resourceName);\n    if (clusterStatusMonitor != null) {\n      if (idealState != null \r\n          && (resourceConfig == null || !resourceConfig.isMonitoringDisabled()) \r\n          && !idealState.getStateModelDefRef() \r\n          .equalsIgnoreCase(DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        clusterStatusMonitor\n            .setResourcePendingMessages(resourceName ,totalPendingMessageCount);\n        monitoringResources.add(resourceName);\n      }\n    }\n\n    ExternalView curExtView = curExtViews.get(resourceName);\n    \r\n    if (idealState != null) {\n      view.getRecord().getSimpleFields().putAll(idealState.getRecord().getSimpleFields());\n    } else if (curExtView != null) {\n      view.getRecord().getSimpleFields().putAll(curExtView.getRecord().getSimpleFields());\n    }\n\n    \r\n    if (curExtView == null || !curExtView.getRecord().equals(view.getRecord())) {\n      \r\n      newExtViews.add(view);\n\n      \r\n      \r\n      \r\n      if (idealState != null\n          && idealState.getStateModelDefRef().equalsIgnoreCase(\n          DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        updateScheduledTaskStatus(view, manager, idealState);\n      }\n    }\n  }\n","date":"2021-04-15 08:52:19","endLine":213,"groupId":"10846","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"computeExternalView","params":"(finalResourceresource@finalCurrentStateOutputcurrentStateOutput@finalResourceControllerDataProvidercache@finalClusterStatusMonitorclusterStatusMonitor@finalMap<String@ExternalView>curExtViews@finalHelixManagermanager@Set<String>monitoringResources@List<ExternalView>newExtViews)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/50/cf0dbd5c87ecf8086cc75df533135931d1c456.src","preCode":"  private void computeExternalView(final Resource resource,\n      final CurrentStateOutput currentStateOutput, final ResourceControllerDataProvider cache,\n      final ClusterStatusMonitor clusterStatusMonitor, final Map<String, ExternalView> curExtViews,\n      final HelixManager manager, Set<String> monitoringResources, List<ExternalView> newExtViews) {\n    String resourceName = resource.getResourceName();\n    ExternalView view = new ExternalView(resource.getResourceName());\n    \r\n    \r\n    if (resource.getBucketSize() > 0) {\n      view.setBucketSize(resource.getBucketSize());\n    } else {\n      view.setBucketSize(currentStateOutput.getBucketSize(resourceName));\n    }\n\n    int totalPendingMessageCount = 0;\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> currentStateMap =\n          currentStateOutput.getCurrentStateMap(resourceName, partition);\n      if (currentStateMap != null && currentStateMap.size() > 0) {\n        for (String instance : currentStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, currentStateMap.get(instance));\n        }\n      }\n      totalPendingMessageCount +=\n          currentStateOutput.getPendingMessageMap(resource.getResourceName(), partition).size();\n    }\n\n    \r\n    IdealState idealState = cache.getIdealState(resourceName);\n    ResourceConfig resourceConfig = cache.getResourceConfig(resourceName);\n    if (clusterStatusMonitor != null) {\n      if (idealState != null \r\n          && (resourceConfig == null || !resourceConfig.isMonitoringDisabled()) \r\n          && !idealState.getStateModelDefRef() \r\n          .equalsIgnoreCase(DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        StateModelDefinition stateModelDef =\n            cache.getStateModelDef(idealState.getStateModelDefRef());\n        clusterStatusMonitor\n            .setResourceStatus(view, cache.getIdealState(view.getResourceName()),\n                stateModelDef, totalPendingMessageCount);\n        monitoringResources.add(resourceName);\n      }\n    }\n\n    ExternalView curExtView = curExtViews.get(resourceName);\n    \r\n    if (idealState != null) {\n      view.getRecord().getSimpleFields().putAll(idealState.getRecord().getSimpleFields());\n    } else if (curExtView != null) {\n      view.getRecord().getSimpleFields().putAll(curExtView.getRecord().getSimpleFields());\n    }\n\n    \r\n    if (curExtView == null || !curExtView.getRecord().equals(view.getRecord())) {\n      \r\n      newExtViews.add(view);\n\n      \r\n      \r\n      \r\n      if (idealState != null\n          && idealState.getStateModelDefRef().equalsIgnoreCase(\n          DefaultSchedulerMessageHandlerFactory.SCHEDULER_TASK_QUEUE)) {\n        updateScheduledTaskStatus(view, manager, idealState);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2020-08-14 11:43:41","commitOrder":6,"curCode":"  private void computeCustomizedStateView(final Resource resource, final String stateType,\n      CustomizedStateOutput customizedStateOutput,\n      final Map<String, CustomizedView> curCustomizedViews,\n      List<CustomizedView> updatedCustomizedViews,\n      Map<String, Map<Partition, Map<String, Long>>> updatedStartTimestamps) {\n    String resourceName = resource.getResourceName();\n    CustomizedView view = new CustomizedView(resource.getResourceName());\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> customizedStateMap =\n          customizedStateOutput.getPartitionCustomizedStateMap(stateType, resourceName, partition);\n      if (customizedStateMap != null && customizedStateMap.size() > 0) {\n        for (String instance : customizedStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, customizedStateMap.get(instance));\n        }\n      }\n    }\n\n    CustomizedView curCustomizedView = curCustomizedViews.get(resourceName);\n\n    \r\n    if (curCustomizedView == null || !curCustomizedView.getRecord().equals(view.getRecord())) {\n      \r\n      updatedCustomizedViews.add(view);\n      updatedStartTimestamps.put(resourceName,\n          customizedStateOutput.getResourceStartTimeMap(stateType, resourceName));\n    }\n  }\n","date":"2020-08-14 11:43:41","endLine":168,"groupId":"10846","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"computeCustomizedStateView","params":"(finalResourceresource@finalStringstateType@CustomizedStateOutputcustomizedStateOutput@finalMap<String@CustomizedView>curCustomizedViews@List<CustomizedView>updatedCustomizedViews@Map<String@Map<Partition@Map<String@Long>>>updatedStartTimestamps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/82630f8456f2820d7a42046d7109f5a23f3b06.src","preCode":"  private void computeCustomizedStateView(final Resource resource, final String stateType,\n      CustomizedStateOutput customizedStateOutput,\n      final Map<String, CustomizedView> curCustomizedViews,\n      List<CustomizedView> updatedCustomizedViews,\n      Map<String, Map<Partition, Map<String, Long>>> updatedStartTimestamps) {\n    String resourceName = resource.getResourceName();\n    CustomizedView view = new CustomizedView(resource.getResourceName());\n\n    for (Partition partition : resource.getPartitions()) {\n      Map<String, String> customizedStateMap =\n          customizedStateOutput.getPartitionCustomizedStateMap(stateType, resourceName, partition);\n      if (customizedStateMap != null && customizedStateMap.size() > 0) {\n        for (String instance : customizedStateMap.keySet()) {\n          view.setState(partition.getPartitionName(), instance, customizedStateMap.get(instance));\n        }\n      }\n    }\n\n    CustomizedView curCustomizedView = curCustomizedViews.get(resourceName);\n\n    \r\n    if (curCustomizedView == null || !curCustomizedView.getRecord().equals(view.getRecord())) {\n      \r\n      updatedCustomizedViews.add(view);\n      updatedStartTimestamps.put(resourceName,\n          customizedStateOutput.getResourceStartTimeMap(stateType, resourceName));\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/controller/stages/CustomizedViewAggregationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"}],"commitId":"5eae4451c3cd658b6e607fd9864a62fc2482d47a","commitMessage":"@@@Directly use Best Possible State to calculate DifferenceWithIdealStateGauge metrics instead of relying on the persisted IdealState. (#1697)\n\nThis PR aims to resolve the undesired dependencies between DifferenceWithIdealStateGauge metric and the PERSIST_XXXXXX_ASSIGNMENT configuration. Before the change.  if the assignment is not persisted.  then the metric will report incorrect data.\nTo fix the issue.  the calculation must be moved from the ExternalViewComputeStage to the BestPossibleStateCalcStage. Because the Best Possible State is only available in the BestPossibleStateCalcStage assuming the PERSIST_XXXXXX_ASSIGNMENT option is not turned on. In addition to the main logic migration.  other changes listed following are required to ensure multi-thread safty.\n1. Concurrent control the EV cache since it will now be read in the BestPossibleStateCalcStage in addition to the ExternalViewComputeStage.\n2. Minor changes in the diff computing logic for the corner cases since the Best Possible State state mapping is not exactly the same as IdealState persist assignment.\n3. Cleanup PersistAssignmentStage logic so it won't modify the IdealState cache anymore. It is supposed to be read-only.\n4. Test cases are modified to cover the changes. Also the metric is now reporting correct result in some corner cases such as all the nodes are disabled. The test cases which are testing based on the wrong behavior have been fixed.","date":"2021-04-15 08:52:19","modifiedFileCount":"7","status":"M","submitter":"Jiajun Wang"}]
