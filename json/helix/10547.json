[{"authorTime":"2020-11-03 09:39:36","codes":[{"authorDate":"2020-10-22 07:06:20","commitOrder":4,"curCode":"  public void testDropCurrentStateRunningTask() throws Exception {\n    String workflowName = TestHelper.getTestMethodName();\n    String jobName = \"JOB0\";\n    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName)\n        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"99999999\"));\n\n    Workflow.Builder workflowBuilder1 =\n        new Workflow.Builder(workflowName).addJob(jobName, jobBuilder1);\n\n    _driver.start(workflowBuilder1.build());\n\n    _driver.pollForJobState(workflowName, TaskUtil.getNamespacedJobName(workflowName, jobName),\n        TaskState.IN_PROGRESS);\n\n    String namespacedJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n    \r\n    Assert.assertTrue(TestHelper.verify(\n        () -> (TaskPartitionState.RUNNING\n            .equals(_driver.getJobContext(namespacedJobName).getPartitionState(0))\n            && (PARTICIPANT_PREFIX + \"_\" + (_startPort + 2))\n                .equals(_driver.getJobContext(namespacedJobName).getAssignedParticipant(0))),\n        TestHelper.WAIT_DURATION));\n\n    \r\n    startParticipant(0);\n    startParticipant(1);\n\n    \r\n    String instanceP2 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 2);\n    ZkClient clientP2 = (ZkClient) _participants[2].getZkClient();\n    String sessionIdP2 = ZkTestHelper.getSessionId(clientP2);\n    String currentStatePathP2 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP2 + \"/CURRENTSTATES/\"\n        + sessionIdP2 + \"/\" + namespacedJobName;\n\n    Assert\n        .assertTrue(\n            TestHelper\n                .verify(\n                    () -> (_manager.getHelixDataAccessor().getBaseDataAccessor()\n                        .get(currentStatePathP2, new Stat(), AccessOption.PERSISTENT) != null),\n                    TestHelper.WAIT_DURATION));\n\n    \r\n    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n    String currentStatePathP0 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0 + \"/CURRENTSTATES/\"\n        + sessionIdP0 + \"/\" + namespacedJobName;\n\n    String instanceP1 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 1);\n    ZkClient clientP1 = (ZkClient) _participants[1].getZkClient();\n    String sessionIdP1 = ZkTestHelper.getSessionId(clientP1);\n    String currentStatePathP1 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP1 + \"/CURRENTSTATES/\"\n        + sessionIdP1 + \"/\" + namespacedJobName;\n\n    ZNRecord record = _manager.getHelixDataAccessor().getBaseDataAccessor().get(currentStatePathP2,\n        new Stat(), AccessOption.PERSISTENT);\n    String partitionName = namespacedJobName + \"_0\";\n    Map<String, String> newCurrentState = new HashMap<>();\n    newCurrentState.put(CurrentState.CurrentStateProperty.CURRENT_STATE.name(),\n        TaskPartitionState.RUNNING.name());\n    newCurrentState.put(CurrentState.CurrentStateProperty.REQUESTED_STATE.name(),\n        TaskPartitionState.DROPPED.name());\n    record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP0);\n    record.setMapField(partitionName, newCurrentState);\n    _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP0, record,\n        AccessOption.PERSISTENT);\n    record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP1);\n    _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP1, record,\n        AccessOption.PERSISTENT);\n\n    \r\n    Assert\n        .assertTrue(\n            TestHelper\n                .verify(\n                    () -> (_manager.getHelixDataAccessor().getBaseDataAccessor()\n                        .get(currentStatePathP0, new Stat(), AccessOption.PERSISTENT) == null\n                        && _manager.getHelixDataAccessor().getBaseDataAccessor()\n                            .get(currentStatePathP1, new Stat(), AccessOption.PERSISTENT) == null),\n                    TestHelper.WAIT_DURATION));\n\n    _driver.stop(workflowName);\n  }\n","date":"2020-10-22 07:06:20","endLine":153,"groupId":"6508","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropCurrentStateRunningTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c9/326348f5274af49970c44a07676775d7d5dbbe.src","preCode":"  public void testDropCurrentStateRunningTask() throws Exception {\n    String workflowName = TestHelper.getTestMethodName();\n    String jobName = \"JOB0\";\n    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName)\n        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"99999999\"));\n\n    Workflow.Builder workflowBuilder1 =\n        new Workflow.Builder(workflowName).addJob(jobName, jobBuilder1);\n\n    _driver.start(workflowBuilder1.build());\n\n    _driver.pollForJobState(workflowName, TaskUtil.getNamespacedJobName(workflowName, jobName),\n        TaskState.IN_PROGRESS);\n\n    String namespacedJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n    \r\n    Assert.assertTrue(TestHelper.verify(\n        () -> (TaskPartitionState.RUNNING\n            .equals(_driver.getJobContext(namespacedJobName).getPartitionState(0))\n            && (PARTICIPANT_PREFIX + \"_\" + (_startPort + 2))\n                .equals(_driver.getJobContext(namespacedJobName).getAssignedParticipant(0))),\n        TestHelper.WAIT_DURATION));\n\n    \r\n    startParticipant(0);\n    startParticipant(1);\n\n    \r\n    String instanceP2 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 2);\n    ZkClient clientP2 = (ZkClient) _participants[2].getZkClient();\n    String sessionIdP2 = ZkTestHelper.getSessionId(clientP2);\n    String currentStatePathP2 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP2 + \"/CURRENTSTATES/\"\n        + sessionIdP2 + \"/\" + namespacedJobName;\n\n    Assert\n        .assertTrue(\n            TestHelper\n                .verify(\n                    () -> (_manager.getHelixDataAccessor().getBaseDataAccessor()\n                        .get(currentStatePathP2, new Stat(), AccessOption.PERSISTENT) != null),\n                    TestHelper.WAIT_DURATION));\n\n    \r\n    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n    String currentStatePathP0 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0 + \"/CURRENTSTATES/\"\n        + sessionIdP0 + \"/\" + namespacedJobName;\n\n    String instanceP1 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 1);\n    ZkClient clientP1 = (ZkClient) _participants[1].getZkClient();\n    String sessionIdP1 = ZkTestHelper.getSessionId(clientP1);\n    String currentStatePathP1 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP1 + \"/CURRENTSTATES/\"\n        + sessionIdP1 + \"/\" + namespacedJobName;\n\n    ZNRecord record = _manager.getHelixDataAccessor().getBaseDataAccessor().get(currentStatePathP2,\n        new Stat(), AccessOption.PERSISTENT);\n    String partitionName = namespacedJobName + \"_0\";\n    Map<String, String> newCurrentState = new HashMap<>();\n    newCurrentState.put(CurrentState.CurrentStateProperty.CURRENT_STATE.name(),\n        TaskPartitionState.RUNNING.name());\n    newCurrentState.put(CurrentState.CurrentStateProperty.REQUESTED_STATE.name(),\n        TaskPartitionState.DROPPED.name());\n    record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP0);\n    record.setMapField(partitionName, newCurrentState);\n    _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP0, record,\n        AccessOption.PERSISTENT);\n    record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP1);\n    _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP1, record,\n        AccessOption.PERSISTENT);\n\n    \r\n    Assert\n        .assertTrue(\n            TestHelper\n                .verify(\n                    () -> (_manager.getHelixDataAccessor().getBaseDataAccessor()\n                        .get(currentStatePathP0, new Stat(), AccessOption.PERSISTENT) == null\n                        && _manager.getHelixDataAccessor().getBaseDataAccessor()\n                            .get(currentStatePathP1, new Stat(), AccessOption.PERSISTENT) == null),\n                    TestHelper.WAIT_DURATION));\n\n    _driver.stop(workflowName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDropCurrentStateRunningTask.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"NB"},{"authorDate":"2020-11-03 09:39:36","commitOrder":4,"curCode":"  public void testDeleteNonExistedTask() throws Exception {\n    String workflowName = TestHelper.getTestMethodName();\n    String jobName = \"JOB0\";\n\n    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName)\n        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"9999999\"));\n\n    Workflow.Builder workflowBuilder1 =\n        new Workflow.Builder(workflowName).addJob(jobName, jobBuilder1);\n\n    _driver.start(workflowBuilder1.build());\n\n    _driver.pollForJobState(workflowName, TaskUtil.getNamespacedJobName(workflowName, jobName),\n        TaskState.IN_PROGRESS);\n    String dummyID = \"1234\";\n    try {\n      _driver.deleteTask(workflowName, jobName, dummyID);\n      Assert.fail(\"Exception is expected because a task with such ID does not exists!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n    _driver.waitToStop(workflowName, TestHelper.WAIT_DURATION);\n  }\n","date":"2020-11-03 09:39:36","endLine":420,"groupId":"1391","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteNonExistedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d9/9707f5b500b0f83ec5f5a03214af8fa3d1d150.src","preCode":"  public void testDeleteNonExistedTask() throws Exception {\n    String workflowName = TestHelper.getTestMethodName();\n    String jobName = \"JOB0\";\n\n    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName)\n        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"9999999\"));\n\n    Workflow.Builder workflowBuilder1 =\n        new Workflow.Builder(workflowName).addJob(jobName, jobBuilder1);\n\n    _driver.start(workflowBuilder1.build());\n\n    _driver.pollForJobState(workflowName, TaskUtil.getNamespacedJobName(workflowName, jobName),\n        TaskState.IN_PROGRESS);\n    String dummyID = \"1234\";\n    try {\n      _driver.deleteTask(workflowName, jobName, dummyID);\n      Assert.fail(\"Exception is expected because a task with such ID does not exists!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n    _driver.waitToStop(workflowName, TestHelper.WAIT_DURATION);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestAddDeleteTask.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"B"}],"commitId":"fbd3aab36415476a91aa3e7c8ee628c834e44c58","commitMessage":"@@@Implement deleteTask API (#1468)\n\nIn this commit.  the changes needed to delete an existing\ntask from a general job have been added to TaskDriver.\nAlso.  the changes that are needed on the controller side to\ndrop the task from the instances and remove the task from the\ncontext have been implemented.","date":"2020-11-03 09:39:36","modifiedFileCount":"10","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"},{"authorTime":"2020-11-03 09:39:36","codes":[{"authorDate":"2020-12-16 06:26:53","commitOrder":5,"curCode":"  public void testDropCurrentStateRunningTask() throws Exception {\n    String workflowName = TestHelper.getTestMethodName();\n    String jobName = \"JOB0\";\n    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName)\n        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"99999999\"));\n\n    Workflow.Builder workflowBuilder1 =\n        new Workflow.Builder(workflowName).addJob(jobName, jobBuilder1);\n\n    _driver.start(workflowBuilder1.build());\n\n    _driver.pollForJobState(workflowName, TaskUtil.getNamespacedJobName(workflowName, jobName),\n        TaskState.IN_PROGRESS);\n\n    String namespacedJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n    \r\n    Assert.assertTrue(TestHelper.verify(\n        () -> (TaskPartitionState.RUNNING\n            .equals(_driver.getJobContext(namespacedJobName).getPartitionState(0))\n            && (PARTICIPANT_PREFIX + \"_\" + (_startPort + 2))\n                .equals(_driver.getJobContext(namespacedJobName).getAssignedParticipant(0))),\n        TestHelper.WAIT_DURATION));\n\n    \r\n    startParticipant(0);\n    startParticipant(1);\n\n    \r\n    String instanceP2 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 2);\n    ZkClient clientP2 = (ZkClient) _participants[2].getZkClient();\n    String sessionIdP2 = ZkTestHelper.getSessionId(clientP2);\n    String currentStatePathP2 = _manager.getHelixDataAccessor().keyBuilder()\n        .taskCurrentState(instanceP2, sessionIdP2, namespacedJobName).toString();\n\n    Assert\n        .assertTrue(\n            TestHelper\n                .verify(\n                    () -> (_manager.getHelixDataAccessor().getBaseDataAccessor()\n                        .get(currentStatePathP2, new Stat(), AccessOption.PERSISTENT) != null),\n                    TestHelper.WAIT_DURATION));\n\n    \r\n    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n    String currentStatePathP0 = _manager.getHelixDataAccessor().keyBuilder()\n        .taskCurrentState(instanceP0, sessionIdP0, namespacedJobName).toString();\n\n    String instanceP1 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 1);\n    ZkClient clientP1 = (ZkClient) _participants[1].getZkClient();\n    String sessionIdP1 = ZkTestHelper.getSessionId(clientP1);\n    String currentStatePathP1 = _manager.getHelixDataAccessor().keyBuilder()\n        .taskCurrentState(instanceP1, sessionIdP1, namespacedJobName).toString();\n\n    ZNRecord record = _manager.getHelixDataAccessor().getBaseDataAccessor().get(currentStatePathP2,\n        new Stat(), AccessOption.PERSISTENT);\n    String partitionName = namespacedJobName + \"_0\";\n    Map<String, String> newCurrentState = new HashMap<>();\n    newCurrentState.put(CurrentState.CurrentStateProperty.CURRENT_STATE.name(),\n        TaskPartitionState.RUNNING.name());\n    newCurrentState.put(CurrentState.CurrentStateProperty.REQUESTED_STATE.name(),\n        TaskPartitionState.DROPPED.name());\n    record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP0);\n    record.setMapField(partitionName, newCurrentState);\n    _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP0, record,\n        AccessOption.PERSISTENT);\n    record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP1);\n    _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP1, record,\n        AccessOption.PERSISTENT);\n\n    \r\n    Assert\n        .assertTrue(\n            TestHelper\n                .verify(\n                    () -> (_manager.getHelixDataAccessor().getBaseDataAccessor()\n                        .get(currentStatePathP0, new Stat(), AccessOption.PERSISTENT) == null\n                        && _manager.getHelixDataAccessor().getBaseDataAccessor()\n                            .get(currentStatePathP1, new Stat(), AccessOption.PERSISTENT) == null),\n                    TestHelper.WAIT_DURATION));\n\n    _driver.stop(workflowName);\n  }\n","date":"2020-12-22 07:00:24","endLine":153,"groupId":"10547","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testDropCurrentStateRunningTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f8/f0cd1768a57639cd0ac7dfac90a413139a487b.src","preCode":"  public void testDropCurrentStateRunningTask() throws Exception {\n    String workflowName = TestHelper.getTestMethodName();\n    String jobName = \"JOB0\";\n    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName)\n        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"99999999\"));\n\n    Workflow.Builder workflowBuilder1 =\n        new Workflow.Builder(workflowName).addJob(jobName, jobBuilder1);\n\n    _driver.start(workflowBuilder1.build());\n\n    _driver.pollForJobState(workflowName, TaskUtil.getNamespacedJobName(workflowName, jobName),\n        TaskState.IN_PROGRESS);\n\n    String namespacedJobName = TaskUtil.getNamespacedJobName(workflowName, jobName);\n    \r\n    Assert.assertTrue(TestHelper.verify(\n        () -> (TaskPartitionState.RUNNING\n            .equals(_driver.getJobContext(namespacedJobName).getPartitionState(0))\n            && (PARTICIPANT_PREFIX + \"_\" + (_startPort + 2))\n                .equals(_driver.getJobContext(namespacedJobName).getAssignedParticipant(0))),\n        TestHelper.WAIT_DURATION));\n\n    \r\n    startParticipant(0);\n    startParticipant(1);\n\n    \r\n    String instanceP2 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 2);\n    ZkClient clientP2 = (ZkClient) _participants[2].getZkClient();\n    String sessionIdP2 = ZkTestHelper.getSessionId(clientP2);\n    String currentStatePathP2 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP2 + \"/CURRENTSTATES/\"\n        + sessionIdP2 + \"/\" + namespacedJobName;\n\n    Assert\n        .assertTrue(\n            TestHelper\n                .verify(\n                    () -> (_manager.getHelixDataAccessor().getBaseDataAccessor()\n                        .get(currentStatePathP2, new Stat(), AccessOption.PERSISTENT) != null),\n                    TestHelper.WAIT_DURATION));\n\n    \r\n    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n    String currentStatePathP0 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0 + \"/CURRENTSTATES/\"\n        + sessionIdP0 + \"/\" + namespacedJobName;\n\n    String instanceP1 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 1);\n    ZkClient clientP1 = (ZkClient) _participants[1].getZkClient();\n    String sessionIdP1 = ZkTestHelper.getSessionId(clientP1);\n    String currentStatePathP1 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP1 + \"/CURRENTSTATES/\"\n        + sessionIdP1 + \"/\" + namespacedJobName;\n\n    ZNRecord record = _manager.getHelixDataAccessor().getBaseDataAccessor().get(currentStatePathP2,\n        new Stat(), AccessOption.PERSISTENT);\n    String partitionName = namespacedJobName + \"_0\";\n    Map<String, String> newCurrentState = new HashMap<>();\n    newCurrentState.put(CurrentState.CurrentStateProperty.CURRENT_STATE.name(),\n        TaskPartitionState.RUNNING.name());\n    newCurrentState.put(CurrentState.CurrentStateProperty.REQUESTED_STATE.name(),\n        TaskPartitionState.DROPPED.name());\n    record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP0);\n    record.setMapField(partitionName, newCurrentState);\n    _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP0, record,\n        AccessOption.PERSISTENT);\n    record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP1);\n    _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP1, record,\n        AccessOption.PERSISTENT);\n\n    \r\n    Assert\n        .assertTrue(\n            TestHelper\n                .verify(\n                    () -> (_manager.getHelixDataAccessor().getBaseDataAccessor()\n                        .get(currentStatePathP0, new Stat(), AccessOption.PERSISTENT) == null\n                        && _manager.getHelixDataAccessor().getBaseDataAccessor()\n                            .get(currentStatePathP1, new Stat(), AccessOption.PERSISTENT) == null),\n                    TestHelper.WAIT_DURATION));\n\n    _driver.stop(workflowName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDropCurrentStateRunningTask.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-11-03 09:39:36","commitOrder":5,"curCode":"  public void testDeleteNonExistedTask() throws Exception {\n    String workflowName = TestHelper.getTestMethodName();\n    String jobName = \"JOB0\";\n\n    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName)\n        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"9999999\"));\n\n    Workflow.Builder workflowBuilder1 =\n        new Workflow.Builder(workflowName).addJob(jobName, jobBuilder1);\n\n    _driver.start(workflowBuilder1.build());\n\n    _driver.pollForJobState(workflowName, TaskUtil.getNamespacedJobName(workflowName, jobName),\n        TaskState.IN_PROGRESS);\n    String dummyID = \"1234\";\n    try {\n      _driver.deleteTask(workflowName, jobName, dummyID);\n      Assert.fail(\"Exception is expected because a task with such ID does not exists!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n    _driver.waitToStop(workflowName, TestHelper.WAIT_DURATION);\n  }\n","date":"2020-11-03 09:39:36","endLine":420,"groupId":"10547","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteNonExistedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d9/9707f5b500b0f83ec5f5a03214af8fa3d1d150.src","preCode":"  public void testDeleteNonExistedTask() throws Exception {\n    String workflowName = TestHelper.getTestMethodName();\n    String jobName = \"JOB0\";\n\n    JobConfig.Builder jobBuilder1 = new JobConfig.Builder().setWorkflow(workflowName)\n        .setNumberOfTasks(1).setNumConcurrentTasksPerInstance(100).setCommand(MockTask.TASK_COMMAND)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"9999999\"));\n\n    Workflow.Builder workflowBuilder1 =\n        new Workflow.Builder(workflowName).addJob(jobName, jobBuilder1);\n\n    _driver.start(workflowBuilder1.build());\n\n    _driver.pollForJobState(workflowName, TaskUtil.getNamespacedJobName(workflowName, jobName),\n        TaskState.IN_PROGRESS);\n    String dummyID = \"1234\";\n    try {\n      _driver.deleteTask(workflowName, jobName, dummyID);\n      Assert.fail(\"Exception is expected because a task with such ID does not exists!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n    _driver.waitToStop(workflowName, TestHelper.WAIT_DURATION);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestAddDeleteTask.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"N"}],"commitId":"361e18da4152c0146daa9d9dc7929f1f2bdcd9dc","commitMessage":"@@@Participant-side Task Current State Migration (#1584)\n\nThe second part of the task current state migration. \nAll changes made in this commit are on the participant side.","date":"2020-12-22 07:00:24","modifiedFileCount":"10","status":"M","submitter":"Neal Sun"}]
