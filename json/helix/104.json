[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.IDEAL_STATE_MODE.toString(), IdealStateModeProperty.AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":181,"groupId":"6308","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fa/6b76f003f7b3e3bda7c4a177c02d6b6db67b62.src","preCode":"  public void testTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.IDEAL_STATE_MODE.toString(), IdealStateModeProperty.AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testDataTriggerWithTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.IDEAL_STATE_MODE.toString(), IdealStateModeProperty.AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread()\n    {\n      @Override\n      public void run()\n      {\n        try\n        {\n          Thread.sleep(3000);\n          final ZkClient zkClient = new ZkClient(ZK_ADDR);\n          zkClient.setZkSerializer(new ZNRecordSerializer());\n          zkClient.createPersistent(pathChild1, true);\n          zkClient.writeData(pathChild1, record);\n        }\n        catch (InterruptedException e)\n        {\n          \r\n          e.printStackTrace();\n        }\n      }\n    }.start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertTrue(entry.getValue());\n      \r\n    }\n\n  }\n","date":"2012-10-25 07:14:36","endLine":233,"groupId":"907","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataTriggerWithTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fa/6b76f003f7b3e3bda7c4a177c02d6b6db67b62.src","preCode":"  public void testDataTriggerWithTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.IDEAL_STATE_MODE.toString(), IdealStateModeProperty.AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread()\n    {\n      @Override\n      public void run()\n      {\n        try\n        {\n          Thread.sleep(3000);\n          final ZkClient zkClient = new ZkClient(ZK_ADDR);\n          zkClient.setZkSerializer(new ZNRecordSerializer());\n          zkClient.createPersistent(pathChild1, true);\n          zkClient.writeData(pathChild1, record);\n        }\n        catch (InterruptedException e)\n        {\n          \r\n          e.printStackTrace();\n        }\n      }\n    }.start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertTrue(entry.getValue());\n      \r\n    }\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-08-16 07:21:52","codes":[{"authorDate":"2013-08-16 07:21:52","commitOrder":2,"curCode":"  public void testTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-16 07:21:52","endLine":187,"groupId":"6308","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/46316421798f380a13d257dda3ed75e72b9284.src","preCode":"  public void testTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.IDEAL_STATE_MODE.toString(), IdealStateModeProperty.AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2013-08-16 07:21:52","commitOrder":2,"curCode":"  public void testDataTriggerWithTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread()\n    {\n      @Override\n      public void run()\n      {\n        try\n        {\n          Thread.sleep(3000);\n          final ZkClient zkClient = new ZkClient(ZK_ADDR);\n          zkClient.setZkSerializer(new ZNRecordSerializer());\n          zkClient.createPersistent(pathChild1, true);\n          zkClient.writeData(pathChild1, record);\n        }\n        catch (InterruptedException e)\n        {\n          \r\n          e.printStackTrace();\n        }\n      }\n    }.start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertTrue(entry.getValue());\n      \r\n    }\n\n  }\n","date":"2013-08-16 07:21:52","endLine":240,"groupId":"907","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataTriggerWithTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/46316421798f380a13d257dda3ed75e72b9284.src","preCode":"  public void testDataTriggerWithTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.IDEAL_STATE_MODE.toString(), IdealStateModeProperty.AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread()\n    {\n      @Override\n      public void run()\n      {\n        try\n        {\n          Thread.sleep(3000);\n          final ZkClient zkClient = new ZkClient(ZK_ADDR);\n          zkClient.setZkSerializer(new ZNRecordSerializer());\n          zkClient.createPersistent(pathChild1, true);\n          zkClient.writeData(pathChild1, record);\n        }\n        catch (InterruptedException e)\n        {\n          \r\n          e.printStackTrace();\n        }\n      }\n    }.start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertTrue(entry.getValue());\n      \r\n    }\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"13d19e914e7deec29c5cd665e75df12eafbce1b1","commitMessage":"@@@HELIX-166: Rename modes to auto.  semi-auto.  and custom.  rb=13444\n","date":"2013-08-16 07:21:52","modifiedFileCount":"39","status":"M","submitter":"zzhang"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2013-08-16 07:21:52","commitOrder":3,"curCode":"  public void testTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-16 07:21:52","endLine":187,"groupId":"6308","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/46316421798f380a13d257dda3ed75e72b9284.src","preCode":"  public void testTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"},{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testDataTriggerWithTimeout() throws Exception {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 =\n        new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          Thread.sleep(3000);\n          final ZkClient zkClient = new ZkClient(ZK_ADDR);\n          zkClient.setZkSerializer(new ZNRecordSerializer());\n          zkClient.createPersistent(pathChild1, true);\n          zkClient.writeData(pathChild1, record);\n        } catch (InterruptedException e) {\n          logger.error(\"Interrupted sleep\", e);\n        }\n      }\n    }.start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet()) {\n      Assert.assertTrue(entry.getValue());\n      \r\n    }\n\n  }\n","date":"2013-10-25 09:35:16","endLine":230,"groupId":"907","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataTriggerWithTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5b/4b16521eb38bab4c2b0b65ba8872b8da81184d.src","preCode":"  public void testDataTriggerWithTimeout() throws Exception {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 =\n        new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          Thread.sleep(3000);\n          final ZkClient zkClient = new ZkClient(ZK_ADDR);\n          zkClient.setZkSerializer(new ZNRecordSerializer());\n          zkClient.createPersistent(pathChild1, true);\n          zkClient.writeData(pathChild1, record);\n        } catch (InterruptedException e) {\n          \r\n          e.printStackTrace();\n        }\n      }\n    }.start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet()) {\n      Assert.assertTrue(entry.getValue());\n      \r\n    }\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"5c7721970eef78e2d13d35b4934b07cb11a03cd9","commitMessage":"@@@Merge branch 'helix-0.6.2-release' of https://git-wip-us.apache.org/repos/asf/incubator-helix into helix-0.6.2-release\n","date":"2013-10-25 09:35:16","modifiedFileCount":"105","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2013-08-16 07:21:52","commitOrder":4,"curCode":"  public void testTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-16 07:21:52","endLine":187,"groupId":"6308","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/46316421798f380a13d257dda3ed75e72b9284.src","preCode":"  public void testTimeout() throws Exception\n  {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet())\n    {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"},{"authorDate":"2018-09-27 02:39:42","commitOrder":4,"curCode":"  public void testDataTriggerWithTimeout() throws Exception {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 =\n        new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          Thread.sleep(3000);\n          _gZkClient.createPersistent(pathChild1, true);\n          _gZkClient.writeData(pathChild1, record);\n        } catch (InterruptedException e) {\n          logger.error(\"Interrupted sleep\", e);\n        }\n      }\n    }.start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet()) {\n      Assert.assertTrue(entry.getValue());\n      \r\n    }\n\n  }\n","date":"2018-10-30 09:15:22","endLine":226,"groupId":"4368","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataTriggerWithTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e5/851f59cd8c910e0fbb8ef9695c393cbbbf73f9.src","preCode":"  public void testDataTriggerWithTimeout() throws Exception {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 =\n        new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          Thread.sleep(3000);\n          final ZkClient zkClient = new ZkClient(ZK_ADDR);\n          zkClient.setZkSerializer(new ZNRecordSerializer());\n          zkClient.createPersistent(pathChild1, true);\n          zkClient.writeData(pathChild1, record);\n        } catch (InterruptedException e) {\n          logger.error(\"Interrupted sleep\", e);\n        }\n      }\n    }.start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet()) {\n      Assert.assertTrue(entry.getValue());\n      \r\n    }\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"9d7364d7abba3932a1b25e96e4eb9dd3e203cec9","commitMessage":"@@@Using HelixZkClient to replace ZkClient in helix-core and helix-rest.\n\n1. Replace as much usage as possible. For the raw ZkClient tests.  the usages are kept.\n2. For backward compatibility.  some public interfaces still returns ZkClient. Marks them as Deprecated.\n","date":"2018-10-30 09:15:22","modifiedFileCount":"60","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  public void testTimeout() throws Exception {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 =\n        new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 =\n        new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 =\n        new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet()) {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":182,"groupId":"104","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a3/19f3e7b6b2a37e4ce9b1e9d905e026e72d49c7.src","preCode":"  public void testTimeout() throws Exception {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    String pathChild1 = PREFIX + \"/timeout_child1\";\n    String pathChild2 = PREFIX + \"/timeout_child2\";\n\n    ZnodeOpArg arg1 =\n        new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"+\", \"key1\", \"simpleValue1-new\");\n    TestCommand command1 =\n        new TestCommand(CommandType.MODIFY, new TestTrigger(0, 1000, \"simpleValue1\"), arg1);\n    commandList.add(command1);\n\n    ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    arg1 = new ZnodeOpArg(pathChild2, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    command1 = new TestCommand(CommandType.MODIFY, new TestTrigger(0, 500, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.SIMPLE, \"==\", \"key1\");\n    command1 =\n        new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, \"simpleValue1-new\"), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(1000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet()) {\n      Assert.assertFalse(entry.getValue());\n    }\n\n    logger.info(\"END: \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  public void testDataTriggerWithTimeout() throws Exception {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 =\n        new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread(() -> {\n      try {\n        Thread.sleep(3000);\n        _gZkClient.createPersistent(pathChild1, true);\n        _gZkClient.writeData(pathChild1, record);\n      } catch (InterruptedException e) {\n        logger.error(\"Interrupted sleep\", e);\n      }\n    }).start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet()) {\n      Assert.assertTrue(entry.getValue());\n    }\n  }\n","date":"2019-05-25 09:19:21","endLine":220,"groupId":"104","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataTriggerWithTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a3/19f3e7b6b2a37e4ce9b1e9d905e026e72d49c7.src","preCode":"  public void testDataTriggerWithTimeout() throws Exception {\n    logger.info(\"RUN: \" + new Date(System.currentTimeMillis()));\n    List<TestCommand> commandList = new ArrayList<TestCommand>();\n\n    \r\n    final String pathChild1 = PREFIX + \"/dataTriggerWithTimeout_child1\";\n\n    final ZNRecord record = getExampleZNRecord();\n    ZNRecord recordNew = new ZNRecord(record);\n    recordNew.setSimpleField(IdealStateProperty.REBALANCE_MODE.toString(),\n        RebalanceMode.SEMI_AUTO.toString());\n    ZnodeOpArg arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"+\", recordNew);\n    TestCommand command1 =\n        new TestCommand(CommandType.MODIFY, new TestTrigger(0, 8000, record), arg1);\n    commandList.add(command1);\n\n    arg1 = new ZnodeOpArg(pathChild1, ZnodePropertyType.ZNODE, \"==\");\n    command1 = new TestCommand(CommandType.VERIFY, new TestTrigger(9000, 500, recordNew), arg1);\n    commandList.add(command1);\n\n    \r\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          Thread.sleep(3000);\n          _gZkClient.createPersistent(pathChild1, true);\n          _gZkClient.writeData(pathChild1, record);\n        } catch (InterruptedException e) {\n          logger.error(\"Interrupted sleep\", e);\n        }\n      }\n    }.start();\n\n    Map<TestCommand, Boolean> results = TestExecutor.executeTest(commandList, ZK_ADDR);\n    for (Map.Entry<TestCommand, Boolean> entry : results.entrySet()) {\n      Assert.assertTrue(entry.getValue());\n      \r\n    }\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestZnodeModify.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
