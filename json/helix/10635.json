[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testDisablePartitionCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setIdealStateMode(IdealStateModeProperty.CUSTOMIZED.toString());\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition false \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition true \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result,  \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2012-10-25 07:14:36","endLine":311,"groupId":"4647","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3a/29560e9dc7c5b8d77e955c91508df11964c6e6.src","preCode":"  public void testDisablePartitionCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setIdealStateMode(IdealStateModeProperty.CUSTOMIZED.toString());\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition false \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition true \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result,  \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testDisablePartitionAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition false \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition true \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result,  \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2012-10-25 07:14:36","endLine":401,"groupId":"4647","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablePartitionAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3a/29560e9dc7c5b8d77e955c91508df11964c6e6.src","preCode":"  public void testDisablePartitionAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition false \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition true \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result,  \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2013-08-16 07:21:52","commitOrder":2,"curCode":"  public void testDisablePartitionCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition false \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition true \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result,  \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2013-08-16 07:21:52","endLine":330,"groupId":"4647","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/00657c3caaf88a3c5d63b83d8705bfe908875f.src","preCode":"  public void testDisablePartitionCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor =\n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setIdealStateMode(IdealStateModeProperty.CUSTOMIZED.toString());\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition false \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition true \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result,  \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2012-10-25 07:14:36","commitOrder":2,"curCode":"  public void testDisablePartitionAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition false \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition true \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result,  \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2012-10-25 07:14:36","endLine":401,"groupId":"4647","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablePartitionAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3a/29560e9dc7c5b8d77e955c91508df11964c6e6.src","preCode":"  public void testDisablePartitionAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition false \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n    \n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR +\" --enablePartition true \" + clusterName +\n        \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result,  \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"N"}],"commitId":"13d19e914e7deec29c5cd665e75df12eafbce1b1","commitMessage":"@@@HELIX-166: Rename modes to auto.  semi-auto.  and custom.  rb=13444\n","date":"2013-08-16 07:21:52","modifiedFileCount":"39","status":"M","submitter":"zzhang"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":302,"groupId":"1035","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/47/44508d2c29af68c310f7636bee3e1acfa158dc.src","preCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":386,"groupId":"1035","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablePartitionAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/47/44508d2c29af68c310f7636bee3e1acfa158dc.src","preCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    Thread.sleep(1000);\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"}],"commitId":"5c7721970eef78e2d13d35b4934b07cb11a03cd9","commitMessage":"@@@Merge branch 'helix-0.6.2-release' of https://git-wip-us.apache.org/repos/asf/incubator-helix into helix-0.6.2-release\n","date":"2013-10-25 09:35:16","modifiedFileCount":"105","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":290,"groupId":"1042","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9c/10a938b213404ba0c5482946d96d05096921a3.src","preCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":367,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablePartitionAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9c/10a938b213404ba0c5482946d96d05096921a3.src","preCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":290,"groupId":"3063","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/177a7b2d5c4dffa7c61b65f6c8c50e29769512.src","preCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":367,"groupId":"1054","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablePartitionAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/177a7b2d5c4dffa7c61b65f6c8c50e29769512.src","preCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<String, Map<String, String>>();\n    Map<String, String> expectInstanceStateMap = new HashMap<String, String>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result, \"localhost_12919\"\n        + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command =\n        \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n            + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-17 08:40:34","commitOrder":6,"curCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    BestPossibleExternalViewVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":290,"groupId":"1042","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/43/c023576c25b09dc8d49c972d4f2095e6e8a1d1.src","preCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":367,"groupId":"1054","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablePartitionAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/177a7b2d5c4dffa7c61b65f6c8c50e29769512.src","preCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"}],"commitId":"f7b1cf0434c685b71052ec7c09864e9e8120eeb7","commitMessage":"@@@TEST: Further fix Helix test suite\n\nThis diff does the following:\n1. Replace Thread.sleep statements with TestHelper.verify (polling with conditions)\n2. Increases GC pause between tests to 4 seconds\n3. Improve ZKHelixClusterVerifier's verifyByPolling method by adding invokeRebalance() method\n\nRB=1669831\n\nRB=1669831\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"19","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-08-06 10:47:55","codes":[{"authorDate":"2019-05-17 08:40:34","commitOrder":7,"curCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    BestPossibleExternalViewVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":290,"groupId":"1042","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisablePartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/43/c023576c25b09dc8d49c972d4f2095e6e8a1d1.src","preCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    BestPossibleExternalViewVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"N"},{"authorDate":"2020-08-06 10:47:55","commitOrder":7,"curCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-08-06 10:47:55","endLine":368,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisablePartitionAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bd/60ccec408668fd2ba1d8faff19647db0dea93c.src","preCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"}],"commitId":"56cf1259add5d00bb13fefb018a5de9679a1c6a7","commitMessage":"@@@Fix ZkHelixClusterVerifier related resource leakage (#1185)\n\nZkHelixClusterVerifier and its subclass built with ZK addres would\ncreate an internal ZkClient. Without properly closing the ZkClient\nor using global ZkClient in the test base. There would be four\nthreads and one ZooKeeper client object leaked. The leaked threads\nwould be in thousands and thus be one of the main contributor\npreventing the unit test from finishing. This pull request addresses\nthis issue.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-08-06 10:47:55","modifiedFileCount":"30","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2020-10-08 07:58:42","commitOrder":8,"curCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    BestPossibleExternalViewVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName)\n            .setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-08 07:58:42","endLine":297,"groupId":"10635","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testDisablePartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/44/dfd820bfb3e0946a0ac7de8f6682ccb89db6bd.src","preCode":"  public void testDisablePartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n    Builder keyBuilder = accessor.keyBuilder();\n    IdealState idealState = accessor.getProperty(keyBuilder.idealStates(\"TestDB0\"));\n    idealState.setRebalanceMode(RebalanceMode.CUSTOMIZED);\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), idealState);\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    BestPossibleExternalViewVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"},{"authorDate":"2020-10-08 07:58:42","commitOrder":8,"curCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-08 07:58:42","endLine":376,"groupId":"10635","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testDisablePartitionAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/44/dfd820bfb3e0946a0ac7de8f6682ccb89db6bd.src","preCode":"  public void testDisablePartitionAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    ZkHelixClusterVerifier _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    String command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition false \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    Map<String, Map<String, String>> expectStateMap = new HashMap<>();\n    Map<String, String> expectInstanceStateMap = new HashMap<>();\n    expectInstanceStateMap.put(\"localhost_12919\", \"OFFLINE\");\n    expectStateMap.put(\"TestDB0_0\", expectInstanceStateMap);\n    expectStateMap.put(\"TestDB0_5\", expectInstanceStateMap);\n    boolean result =\n        ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"==\");\n    Assert.assertTrue(result,\n        \"localhost_12919\" + \" should be in OFFLINE for [TestDB0_0, TestDB0_5]\");\n\n    \r\n    command = \"--zkSvr \" + ZK_ADDR + \" --enablePartition true \" + clusterName\n        + \" localhost_12919 TestDB0 TestDB0_0 TestDB0_5\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    result = ZkTestHelper.verifyState(_gZkClient, clusterName, \"TestDB0\", expectStateMap, \"!=\");\n    Assert.assertTrue(result, \"localhost_12919\" + \" should NOT be in OFFLINE\");\n\n    \r\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisable.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"}]
