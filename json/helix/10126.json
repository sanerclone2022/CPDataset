[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testInvocation() throws Exception\n  {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModel stateModel = new MockStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta, executor);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":81,"groupId":"1314","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c2/4482fa26d1c97001e68fbcf64dc9724337567b.src","preCode":"  public void testInvocation() throws Exception\n  {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModel stateModel = new MockStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta, executor);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testInvocationAnnotated() throws Exception\n  {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n\r\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n\n    context = new NotificationContext(manager);\n    \n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta, executor);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":128,"groupId":"1193","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvocationAnnotated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c2/4482fa26d1c97001e68fbcf64dc9724337567b.src","preCode":"  public void testInvocationAnnotated() throws Exception\n  {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n\r\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n\n    context = new NotificationContext(manager);\n    \n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta, executor);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void testInvocation() throws Exception\n  {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModel stateModel = new MockStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-04-06 08:30:58","endLine":85,"groupId":"1314","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/09/10061ac555dc8ae95b7bc55de0ef5ec8489029.src","preCode":"  public void testInvocation() throws Exception\n  {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModel stateModel = new MockStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta, executor);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void testInvocationAnnotated() throws Exception\n  {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n\r\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n\n    context = new NotificationContext(manager);\n    \n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-04-06 08:30:58","endLine":132,"groupId":"1193","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvocationAnnotated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/09/10061ac555dc8ae95b7bc55de0ef5ec8489029.src","preCode":"  public void testInvocationAnnotated() throws Exception\n  {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n\r\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n\n    context = new NotificationContext(manager);\n    \n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta, executor);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"M","submitter":"Swaroop Jagadish"},{"authorTime":"2013-08-10 04:29:34","codes":[{"authorDate":"2013-08-10 04:29:34","commitOrder":3,"curCode":"  public void testInvocation() throws Exception\n  {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModel stateModel = new MockStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(null, stateModel, message, context, currentStateDelta);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-10 04:29:34","endLine":82,"groupId":"1314","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/06/4e04daaa7ee170229231e00cafa0e3f48e181a.src","preCode":"  public void testInvocation() throws Exception\n  {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModel stateModel = new MockStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2013-08-10 04:29:34","commitOrder":3,"curCode":"  public void testInvocationAnnotated() throws Exception\n  {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \" + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    StateModelFactory<MockStateModelAnnotated> stateModelFactory = new StateModelFactory<MockStateModelAnnotated>()\n    {\n\n      @Override\n      public MockStateModelAnnotated createNewStateModel(String partitionName)\n      {\n        \r\n        return new MockStateModelAnnotated();\n      }\n\n    };\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(stateModelFactory, stateModel, message, context, currentStateDelta);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-10 04:29:34","endLine":135,"groupId":"5824","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvocationAnnotated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/06/4e04daaa7ee170229231e00cafa0e3f48e181a.src","preCode":"  public void testInvocationAnnotated() throws Exception\n  {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n\r\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelConfigGenerator generator = new StateModelConfigGenerator();\n    StateModelDefinition stateModelDef = new StateModelDefinition(\n        generator.generateConfigForMasterSlave());\n\r\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n\n    context = new NotificationContext(manager);\n    \n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler = new HelixStateTransitionHandler(stateModel, message,\n        context, currentStateDelta);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"11df95e810a0102584d4ba690dcbe241a8a00b1b","commitMessage":"@@@HELIX-197: fix state model leak.  rb=13437\n","date":"2013-08-10 04:29:34","modifiedFileCount":"8","status":"M","submitter":"zzhang"},{"authorTime":"2014-11-20 03:31:01","codes":[{"authorDate":"2013-08-10 04:29:34","commitOrder":4,"curCode":"  public void testInvocation() throws Exception\n  {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModel stateModel = new MockStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(null, stateModel, message, context, currentStateDelta);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-10 04:29:34","endLine":82,"groupId":"1314","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/06/4e04daaa7ee170229231e00cafa0e3f48e181a.src","preCode":"  public void testInvocation() throws Exception\n  {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModel stateModel = new MockStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(null, stateModel, message, context, currentStateDelta);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2014-11-20 03:31:01","commitOrder":4,"curCode":"  public void testInvocationAnnotated() throws Exception {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    StateModelFactory<MockStateModelAnnotated> stateModelFactory =\n        new StateModelFactory<MockStateModelAnnotated>() {\n\n          @Override\n          public MockStateModelAnnotated createNewStateModel(String resource, String partitionName) {\n            \r\n            return new MockStateModelAnnotated();\n          }\n\n        };\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(stateModelFactory, stateModel, message, context,\n            currentStateDelta);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-11-20 03:31:01","endLine":135,"groupId":"5824","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvocationAnnotated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/69/f24d71454b4999ac23e99b73385082591750f6.src","preCode":"  public void testInvocationAnnotated() throws Exception {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    StateModelFactory<MockStateModelAnnotated> stateModelFactory =\n        new StateModelFactory<MockStateModelAnnotated>() {\n\n          @Override\n          public MockStateModelAnnotated createNewStateModel(String partitionName) {\n            \r\n            return new MockStateModelAnnotated();\n          }\n\n        };\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(stateModelFactory, stateModel, message, context,\n            currentStateDelta);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"9ddd0af347037f585a52b83bbc3a6b11a3934c82","commitMessage":"@@@[HELIX-552] StateModelFactory#_stateModelMap should use both resourceName and partitionKey to map a state model.  rb=28211\n","date":"2014-11-20 03:31:01","modifiedFileCount":"34","status":"M","submitter":"zzhang"},{"authorTime":"2014-11-20 03:31:01","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testInvocation() throws Exception {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockMasterSlaveStateModel stateModel = new MockMasterSlaveStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(null, stateModel, message, context, currentStateDelta);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":79,"groupId":"10126","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7a/039ccd6f0ee47e359f3298e20e770c12593711.src","preCode":"  public void testInvocation() throws Exception {\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    System.out.println(\"START TestCMTaskHandler.testInvocation()\");\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModel stateModel = new MockStateModel();\n    NotificationContext context;\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(null, stateModel, message, context, currentStateDelta);\n    HelixTask handler;\n    handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocation() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2014-11-20 03:31:01","commitOrder":5,"curCode":"  public void testInvocationAnnotated() throws Exception {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    StateModelFactory<MockStateModelAnnotated> stateModelFactory =\n        new StateModelFactory<MockStateModelAnnotated>() {\n\n          @Override\n          public MockStateModelAnnotated createNewStateModel(String resource, String partitionName) {\n            \r\n            return new MockStateModelAnnotated();\n          }\n\n        };\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(stateModelFactory, stateModel, message, context,\n            currentStateDelta);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-11-20 03:31:01","endLine":135,"groupId":"10126","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvocationAnnotated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/69/f24d71454b4999ac23e99b73385082591750f6.src","preCode":"  public void testInvocationAnnotated() throws Exception {\n    System.out.println(\"START TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n    HelixTaskExecutor executor = new HelixTaskExecutor();\n    Message message = new Message(MessageType.STATE_TRANSITION, \"Some unique id\");\n    message.setSrcName(\"cm-instance-0\");\n    message.setTgtSessionId(\"1234\");\n    message.setFromState(\"Offline\");\n    message.setToState(\"Slave\");\n    message.setPartitionName(\"TestDB_0\");\n    message.setMsgId(\"Some unique message id\");\n    message.setResourceName(\"TestDB\");\n    message.setTgtName(\"localhost\");\n    message.setStateModelDef(\"MasterSlave\");\n    message.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    MockStateModelAnnotated stateModel = new MockStateModelAnnotated();\n    NotificationContext context;\n\n    MockManager manager = new MockManager(\"clusterName\");\n    HelixDataAccessor accessor = manager.getHelixDataAccessor();\n\n    StateModelDefinition stateModelDef =\n        new StateModelDefinition(StateModelConfigGenerator.generateConfigForMasterSlave());\n    Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.stateModelDef(\"MasterSlave\"), stateModelDef);\n\n    context = new NotificationContext(manager);\n\n    CurrentState currentStateDelta = new CurrentState(\"TestDB\");\n    currentStateDelta.setState(\"TestDB_0\", \"OFFLINE\");\n\n    StateModelFactory<MockStateModelAnnotated> stateModelFactory =\n        new StateModelFactory<MockStateModelAnnotated>() {\n\n          @Override\n          public MockStateModelAnnotated createNewStateModel(String resource, String partitionName) {\n            \r\n            return new MockStateModelAnnotated();\n          }\n\n        };\n\n    HelixStateTransitionHandler stHandler =\n        new HelixStateTransitionHandler(stateModelFactory, stateModel, message, context,\n            currentStateDelta);\n\n    HelixTask handler = new HelixTask(message, context, stHandler, executor);\n    handler.call();\n    AssertJUnit.assertTrue(stateModel.stateModelInvoked);\n    System.out.println(\"END TestCMTaskHandler.testInvocationAnnotated() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixTaskHandler.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"}]
