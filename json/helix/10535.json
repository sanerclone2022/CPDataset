[{"authorTime":"2016-01-28 02:10:31","codes":[{"authorDate":"2016-01-28 02:10:31","commitOrder":1,"curCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < num_dbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_test_dbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _test_dbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _test_dbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < num_dbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","date":"2016-07-06 05:44:56","endLine":229,"groupId":"2030","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreJobDependantFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9e/2456cc2073cfc73f346f21398acaa777be84e9.src","preCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < num_dbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_test_dbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _test_dbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _test_dbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < num_dbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"B"},{"authorDate":"2016-01-28 02:10:31","commitOrder":1,"curCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < num_dbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_test_dbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _test_dbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _test_dbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    TaskTestUtil.pollForJobState(_driver, queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < num_dbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_test_dbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _test_dbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    TaskTestUtil.pollForWorkflowState(_driver, queueName, TaskState.FAILED);\n  }\n","date":"2016-07-06 05:44:56","endLine":281,"groupId":"2031","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWorkflowFailureJobThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9e/2456cc2073cfc73f346f21398acaa777be84e9.src","preCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < num_dbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_test_dbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _test_dbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _test_dbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    TaskTestUtil.pollForJobState(_driver, queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < num_dbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_test_dbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _test_dbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    TaskTestUtil.pollForWorkflowState(_driver, queueName, TaskState.FAILED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"B"}],"commitId":"be660245fc1a9f4b22fba58c4b25a1af19555066","commitMessage":"@@@Add new job option to allow contining a job even its direct dependent job fails.\n","date":"2016-07-06 05:44:56","modifiedFileCount":"8","status":"B","submitter":"Lei Xia"},{"authorTime":"2016-04-09 04:40:04","codes":[{"authorDate":"2016-04-09 04:40:04","commitOrder":2,"curCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < _numDbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","date":"2016-07-06 05:58:44","endLine":127,"groupId":"2030","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreJobDependantFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d4/f6dbbf7d56be329cc26685712b3818daa7dd38.src","preCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < num_dbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_test_dbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _test_dbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _test_dbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < num_dbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2016-04-09 04:40:04","commitOrder":2,"curCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    TaskTestUtil.pollForJobState(_driver, queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    TaskTestUtil.pollForWorkflowState(_driver, queueName, TaskState.FAILED);\n  }\n","date":"2016-07-06 05:58:44","endLine":179,"groupId":"2031","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWorkflowFailureJobThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d4/f6dbbf7d56be329cc26685712b3818daa7dd38.src","preCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < num_dbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_test_dbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _test_dbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _test_dbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    TaskTestUtil.pollForJobState(_driver, queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < num_dbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_test_dbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _test_dbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    TaskTestUtil.pollForWorkflowState(_driver, queueName, TaskState.FAILED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"ead83012ee07610859fabdc73712cf4532473e88","commitMessage":"@@@Add TaskTestBase and refactor 2 tests\n1. Add TaskTestBase for common initialization.\n2. Refactor 2 tests to test the test base.\n","date":"2016-07-06 05:58:44","modifiedFileCount":"2","status":"M","submitter":"Junkai Xue"},{"authorTime":"2016-05-11 02:44:25","codes":[{"authorDate":"2016-05-11 02:44:25","commitOrder":3,"curCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    _driver.pollForJobState(queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < _numDbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      _driver.pollForJobState(queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","date":"2016-07-06 07:21:13","endLine":127,"groupId":"2030","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreJobDependantFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/25/4a35d02ed817fdc395bbe687819f475353ab96.src","preCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < _numDbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2016-05-11 02:44:25","commitOrder":3,"curCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    _driver.pollForJobState(queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n    _driver.pollForWorkflowState(queueName, TaskState.FAILED);\n  }\n","date":"2016-07-06 07:21:13","endLine":179,"groupId":"2031","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWorkflowFailureJobThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/25/4a35d02ed817fdc395bbe687819f475353ab96.src","preCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    TaskTestUtil.pollForJobState(_driver, queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    TaskTestUtil.pollForJobState(_driver, queueName, namedSpaceJob1, TaskState.FAILED);\n    TaskTestUtil.pollForWorkflowState(_driver, queueName, TaskState.FAILED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"183a26ae7857a7c35985b14df9742ba3f4a06566","commitMessage":"@@@Add pollForJobState and pollForWorkflowState function in TaskDriver\n\n1. Add pollForJobState and pollForWorkflowState functions in TaskDriver\n2. Add unit tests for poll completed states for those tasks.\n3. Refactor all tests using new functions.\n","date":"2016-07-06 07:21:13","modifiedFileCount":"20","status":"M","submitter":"Junkai Xue"},{"authorTime":"2016-10-26 04:27:55","codes":[{"authorDate":"2016-05-11 02:44:25","commitOrder":4,"curCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    _driver.pollForJobState(queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < _numDbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      _driver.pollForJobState(queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","date":"2016-07-06 07:21:13","endLine":127,"groupId":"2030","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreJobDependantFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/25/4a35d02ed817fdc395bbe687819f475353ab96.src","preCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    _driver.pollForJobState(queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < _numDbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      _driver.pollForJobState(queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"},{"authorDate":"2016-10-26 04:27:55","commitOrder":4,"curCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    _driver.pollForJobState(queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n  }\n","date":"2016-10-29 11:33:21","endLine":177,"groupId":"2031","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWorkflowFailureJobThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/bb9f69633bab0bc3b5e8ffa3cb3eeebb0e3e06.src","preCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    _driver.pollForJobState(queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n    _driver.pollForWorkflowState(queueName, TaskState.FAILED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"33dae525a8b31cae4d6a80a89f1d08190db0beda","commitMessage":"@@@[HELIX-636] Add Java API and REST API for clean up JobQueue\n\nTo clean up the jobs in the final states.  provide a Java API and REST API in helix.\n","date":"2016-10-29 11:33:21","modifiedFileCount":"8","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":5,"curCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    _driver.pollForJobState(queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < _numDbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      _driver.pollForJobState(queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","date":"2018-07-14 02:20:49","endLine":127,"groupId":"10535","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreJobDependantFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/43/d80fe0ae4daaf33e2a548d5c2be8aaca53f856.src","preCode":"  public void testIgnoreJobDependantFailure() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 100);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(2));\n    String namedSpaceJob2 = String.format(\"%s_%s\", queueName, currentJobNames.get(2));\n    _driver.pollForJobState(queueName, namedSpaceJob2, TaskState.FAILED);\n\n    \r\n    for (int i = 3; i < _numDbs; i++) {\n      String namedSpaceJob = String.format(\"%s_%s\", queueName, currentJobNames.get(i));\n      _driver.pollForJobState(queueName, namedSpaceJob, TaskState.COMPLETED);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":5,"curCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    _driver.pollForJobState(queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n  }\n","date":"2018-07-14 02:20:49","endLine":178,"groupId":"10535","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testWorkflowFailureJobThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/43/d80fe0ae4daaf33e2a548d5c2be8aaca53f856.src","preCode":"  public void testWorkflowFailureJobThreshold() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuilder = TaskTestUtil.buildJobQueue(queueName, 0, 3);\n    \r\n    List<String> currentJobNames = new ArrayList<String>();\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      currentJobNames.add(jobName);\n    }\n\n    _driver.start(queueBuilder.build());\n    _setupTool.dropResourceFromCluster(CLUSTER_NAME, _testDbs.get(1));\n\n    String namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n    String lastJob =\n        String.format(\"%s_%s\", queueName, currentJobNames.get(currentJobNames.size() - 1));\n    _driver.pollForJobState(queueName, lastJob, TaskState.COMPLETED);\n\n    _driver.flushQueue(queueName);\n\n    WorkflowConfig currentWorkflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(currentWorkflowConfig);\n\n    configBuilder.setFailureThreshold(0);\n    _driver.updateWorkflow(queueName, configBuilder.build());\n    _driver.stop(queueName);\n\n    for (int i = 0; i < _numDbs; i++) {\n      JobConfig.Builder jobConfig =\n          new JobConfig.Builder().setCommand(MockTask.TASK_COMMAND).setTargetResource(_testDbs.get(i))\n              .setTargetPartitionStates(Sets.newHashSet(\"SLAVE\")).setIgnoreDependentJobFailure(true);\n      String jobName = \"job\" + _testDbs.get(i);\n      queueBuilder.enqueueJob(jobName, jobConfig);\n      _driver.enqueueJob(queueName, jobName, jobConfig);\n    }\n\n    _driver.resume(queueName);\n\n    namedSpaceJob1 = String.format(\"%s_%s\", queueName, currentJobNames.get(1));\n    _driver.pollForJobState(queueName, namedSpaceJob1, TaskState.FAILED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestJobFailureDependence.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"}]
