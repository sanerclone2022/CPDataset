[{"authorTime":"2021-07-15 10:32:27","codes":[{"authorDate":"2021-07-15 10:32:27","commitOrder":2,"curCode":"  public void testEnableFreezeMode() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n    PauseSignal pauseSignal = _accessor.getProperty(keyBuilder.pause());\n    Assert.assertNull(pauseSignal);\n\n    \r\n    CountDownLatch latch = new CountDownLatch(1);\n    _participants[1].setTransition(new BlockingTransition(latch));\n\n    \r\n    Resource resource = new Resource(\"TestDB0\");\n    resource.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    Message message = MessageUtil\n        .createStateTransitionMessage(_manager.getInstanceName(), _manager.getSessionId(), resource,\n            \"TestDB0_1\", _participants[1].getInstanceName(), \"SLAVE\", \"OFFLINE\",\n            _participants[1].getSessionId(), \"MasterSlave\");\n    Assert.assertTrue(_accessor\n        .updateProperty(keyBuilder.message(message.getTgtName(), message.getMsgId()), message));\n\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.CLUSTER_FREEZE)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    \r\n    Assert.assertTrue(\n        _gZkClient.exists(keyBuilder.message(message.getTgtName(), message.getMsgId()).getPath()));\n\n    \r\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.IN_PROGRESS);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    latch.countDown();\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.PAUSED);\n\n    expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history = _accessor.getProperty(keyBuilder.controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.CLUSTER_FREEZE)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED)\n          && lastHistory.contains(\"REASON=\" + methodName);\n    }, TestHelper.WAIT_DURATION));\n  }\n","date":"2021-07-17 05:02:56","endLine":194,"groupId":"7267","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnableFreezeMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/af/aea9114e781ae80d92a6ca08e480b67be134ec.src","preCode":"  public void testEnableFreezeMode() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n    PauseSignal pauseSignal = _accessor.getProperty(keyBuilder.pause());\n    Assert.assertNull(pauseSignal);\n\n    \r\n    CountDownLatch latch = new CountDownLatch(1);\n    _participants[1].setTransition(new BlockingTransition(latch));\n\n    \r\n    Resource resource = new Resource(\"TestDB0\");\n    resource.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    Message message = MessageUtil\n        .createStateTransitionMessage(_manager.getInstanceName(), _manager.getSessionId(), resource,\n            \"TestDB0_1\", _participants[1].getInstanceName(), \"SLAVE\", \"OFFLINE\",\n            _participants[1].getSessionId(), \"MasterSlave\");\n    Assert.assertTrue(_accessor\n        .updateProperty(keyBuilder.message(message.getTgtName(), message.getMsgId()), message));\n\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.CLUSTER_FREEZE)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    \r\n    Assert.assertTrue(\n        _gZkClient.exists(keyBuilder.message(message.getTgtName(), message.getMsgId()).getPath()));\n\n    \r\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.IN_PROGRESS);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    latch.countDown();\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.PAUSED);\n\n    expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history = _accessor.getProperty(keyBuilder.controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.CLUSTER_FREEZE)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED)\n          && lastHistory.contains(\"REASON=\" + methodName);\n    }, TestHelper.WAIT_DURATION));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterFreezeMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"MB"},{"authorDate":"2021-07-15 10:32:27","commitOrder":2,"curCode":"  public void testUnfreezeCluster() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.NORMAL)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.NORMAL);\n\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.NORMAL);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history =\n          _accessor.getProperty(_accessor.keyBuilder().controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.NORMAL)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED);\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    Assert.assertTrue(ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, _clusterName)));\n  }\n","date":"2021-07-17 05:02:56","endLine":329,"groupId":"6465","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnfreezeCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/af/aea9114e781ae80d92a6ca08e480b67be134ec.src","preCode":"  public void testUnfreezeCluster() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.NORMAL)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.NORMAL);\n\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.NORMAL);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history =\n          _accessor.getProperty(_accessor.keyBuilder().controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.NORMAL)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED);\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    Assert.assertTrue(ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, _clusterName)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterFreezeMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"MB"}],"commitId":"d2f5637f9d1a7cce54b024ac714d4552809ff2f9","commitMessage":"@@@Refactor freeze mode naming and getStatus default value (#1818)\n\nRename CLUSTER_PAUSE with CLUSTER_FREEZE mode.\nChange default return value for LiveInstance#getStatus(): null -> NORMAL. And fix tests accordingly.\n","date":"2021-07-17 05:02:56","modifiedFileCount":"15","status":"M","submitter":"Huizhi Lu"},{"authorTime":"2021-07-15 10:32:27","codes":[{"authorDate":"2021-07-16 05:08:08","commitOrder":3,"curCode":"  public void testEnableFreezeMode() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n    PauseSignal pauseSignal = _accessor.getProperty(keyBuilder.pause());\n    Assert.assertNull(pauseSignal);\n\n    \r\n    CountDownLatch latch = new CountDownLatch(1);\n    _participants[1].setTransition(new BlockingTransition(latch));\n\n    \r\n    Resource resource = new Resource(\"TestDB0\");\n    resource.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    Message message = MessageUtil\n        .createStateTransitionMessage(_manager.getInstanceName(), _manager.getSessionId(), resource,\n            \"TestDB0_1\", _participants[1].getInstanceName(), \"SLAVE\", \"OFFLINE\",\n            _participants[1].getSessionId(), \"MasterSlave\");\n    Assert.assertTrue(_accessor\n        .updateProperty(keyBuilder.message(message.getTgtName(), message.getMsgId()), message));\n\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.CLUSTER_FREEZE)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    \r\n    Assert.assertTrue(\n        _gZkClient.exists(keyBuilder.message(message.getTgtName(), message.getMsgId()).getPath()));\n\n    \r\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.IN_PROGRESS);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    latch.countDown();\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history = _accessor.getProperty(keyBuilder.controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.CLUSTER_FREEZE)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED)\n          && lastHistory.contains(\"REASON=\" + methodName);\n    }, TestHelper.WAIT_DURATION));\n  }\n","date":"2021-07-17 05:02:56","endLine":194,"groupId":"7267","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnableFreezeMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/09/de4dc3719ca3db9888a62bfa4b97abe120358b.src","preCode":"  public void testEnableFreezeMode() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n    PauseSignal pauseSignal = _accessor.getProperty(keyBuilder.pause());\n    Assert.assertNull(pauseSignal);\n\n    \r\n    CountDownLatch latch = new CountDownLatch(1);\n    _participants[1].setTransition(new BlockingTransition(latch));\n\n    \r\n    Resource resource = new Resource(\"TestDB0\");\n    resource.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    Message message = MessageUtil\n        .createStateTransitionMessage(_manager.getInstanceName(), _manager.getSessionId(), resource,\n            \"TestDB0_1\", _participants[1].getInstanceName(), \"SLAVE\", \"OFFLINE\",\n            _participants[1].getSessionId(), \"MasterSlave\");\n    Assert.assertTrue(_accessor\n        .updateProperty(keyBuilder.message(message.getTgtName(), message.getMsgId()), message));\n\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.CLUSTER_FREEZE)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    \r\n    Assert.assertTrue(\n        _gZkClient.exists(keyBuilder.message(message.getTgtName(), message.getMsgId()).getPath()));\n\n    \r\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.IN_PROGRESS);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    latch.countDown();\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history = _accessor.getProperty(keyBuilder.controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.CLUSTER_FREEZE)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED)\n          && lastHistory.contains(\"REASON=\" + methodName);\n    }, TestHelper.WAIT_DURATION));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterFreezeMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"MB"},{"authorDate":"2021-07-15 10:32:27","commitOrder":3,"curCode":"  public void testUnfreezeCluster() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.NORMAL)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.NORMAL);\n\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.NORMAL);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history =\n          _accessor.getProperty(_accessor.keyBuilder().controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.NORMAL)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED);\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    Assert.assertTrue(ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, _clusterName)));\n  }\n","date":"2021-07-17 05:02:56","endLine":329,"groupId":"6465","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnfreezeCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/af/aea9114e781ae80d92a6ca08e480b67be134ec.src","preCode":"  public void testUnfreezeCluster() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.NORMAL)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.NORMAL);\n\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.NORMAL);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history =\n          _accessor.getProperty(_accessor.keyBuilder().controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.NORMAL)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED);\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    Assert.assertTrue(ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, _clusterName)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterFreezeMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"NB"}],"commitId":"5fd984353c42091b4dc7750b6c34c97c6a2b9972","commitMessage":"@@@Rename live instance status PAUSED to FROZEN (#1819)\n\nSince cluster freeze mode is naming as \"FREEZE\".  live instance status should be named to \"FROZEN\" accordingly.\nThis commit renames the enum live instance status PAUSED to FROZEN. No logic change.\n","date":"2021-07-17 05:02:56","modifiedFileCount":"12","status":"M","submitter":"Huizhi Lu"},{"authorTime":"2021-07-15 10:32:27","codes":[{"authorDate":"2021-07-16 11:26:11","commitOrder":4,"curCode":"  public void testEnableFreezeMode() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n    PauseSignal pauseSignal = _accessor.getProperty(keyBuilder.pause());\n    Assert.assertNull(pauseSignal);\n\n    \r\n    CountDownLatch latch = new CountDownLatch(1);\n    _participants[1].setTransition(new BlockingTransition(latch));\n\n    \r\n    Resource resource = new Resource(\"TestDB0\");\n    resource.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    Message message = MessageUtil\n        .createStateTransitionMessage(_manager.getInstanceName(), _manager.getSessionId(), resource,\n            \"TestDB0_1\", _participants[1].getInstanceName(), \"SLAVE\", \"OFFLINE\",\n            _participants[1].getSessionId(), \"MasterSlave\");\n    Assert.assertTrue(_accessor\n        .updateProperty(keyBuilder.message(message.getTgtName(), message.getMsgId()), message));\n\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.CLUSTER_FREEZE)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    \r\n    Assert.assertTrue(\n        _gZkClient.exists(keyBuilder.message(message.getTgtName(), message.getMsgId()).getPath()));\n\n    \r\n    \r\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.IN_PROGRESS);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    latch.countDown();\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history = _accessor.getProperty(keyBuilder.controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.CLUSTER_FREEZE)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED)\n          && lastHistory.contains(\"REASON=\" + methodName);\n    }, TestHelper.WAIT_DURATION));\n  }\n","date":"2021-07-17 05:02:56","endLine":198,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnableFreezeMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e0/68f38eae90e2cfe8e136a24e7cdb5a0da5d081.src","preCode":"  public void testEnableFreezeMode() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n    PauseSignal pauseSignal = _accessor.getProperty(keyBuilder.pause());\n    Assert.assertNull(pauseSignal);\n\n    \r\n    CountDownLatch latch = new CountDownLatch(1);\n    _participants[1].setTransition(new BlockingTransition(latch));\n\n    \r\n    Resource resource = new Resource(\"TestDB0\");\n    resource.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    Message message = MessageUtil\n        .createStateTransitionMessage(_manager.getInstanceName(), _manager.getSessionId(), resource,\n            \"TestDB0_1\", _participants[1].getInstanceName(), \"SLAVE\", \"OFFLINE\",\n            _participants[1].getSessionId(), \"MasterSlave\");\n    Assert.assertTrue(_accessor\n        .updateProperty(keyBuilder.message(message.getTgtName(), message.getMsgId()), message));\n\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.CLUSTER_FREEZE)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    \r\n    Assert.assertTrue(\n        _gZkClient.exists(keyBuilder.message(message.getTgtName(), message.getMsgId()).getPath()));\n\n    \r\n    \r\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.IN_PROGRESS);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    latch.countDown();\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history = _accessor.getProperty(keyBuilder.controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.CLUSTER_FREEZE)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED)\n          && lastHistory.contains(\"REASON=\" + methodName);\n    }, TestHelper.WAIT_DURATION));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterFreezeMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"MB"},{"authorDate":"2021-07-15 10:32:27","commitOrder":4,"curCode":"  public void testUnfreezeCluster() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.NORMAL)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.NORMAL);\n\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.NORMAL);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history =\n          _accessor.getProperty(_accessor.keyBuilder().controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.NORMAL)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED);\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    Assert.assertTrue(ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, _clusterName)));\n  }\n","date":"2021-07-17 05:02:56","endLine":329,"groupId":"6465","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnfreezeCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/af/aea9114e781ae80d92a6ca08e480b67be134ec.src","preCode":"  public void testUnfreezeCluster() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.NORMAL)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.NORMAL);\n\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.NORMAL);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history =\n          _accessor.getProperty(_accessor.keyBuilder().controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.NORMAL)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED);\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    Assert.assertTrue(ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, _clusterName)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterFreezeMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"NB"}],"commitId":"ac877c5c631c12ad570969e897528824625a0461","commitMessage":"@@@Rename property CLUSTER_PAUSE to CLUSTER_FREEZE in PauseSignal (#1820)\n\nRename property CLUSTER_PAUSE to CLUSTER_FREEZE in PauseSignal.\n","date":"2021-07-17 05:02:56","modifiedFileCount":"3","status":"M","submitter":"Huizhi Lu"},{"authorTime":"2021-07-15 10:32:27","codes":[{"authorDate":"2021-09-02 01:00:34","commitOrder":5,"curCode":"  public void testEnableFreezeMode() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n    PauseSignal pauseSignal = _accessor.getProperty(keyBuilder.pause());\n    Assert.assertNull(pauseSignal);\n\n    \r\n    CountDownLatch latch = new CountDownLatch(1);\n    _participants[1].setTransition(new BlockingTransition(latch));\n\n    \r\n    Resource resource = new Resource(\"TestDB0\");\n    resource.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    Message message = MessageUtil\n        .createStateTransitionMessage(_manager.getInstanceName(), _manager.getSessionId(), resource,\n            \"TestDB0_1\", _participants[1].getInstanceName(), \"SLAVE\", \"OFFLINE\",\n            _participants[1].getSessionId(), \"MasterSlave\");\n    Assert.assertTrue(_accessor\n        .updateProperty(keyBuilder.message(message.getTgtName(), message.getMsgId()), message));\n\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.CLUSTER_FREEZE)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    \r\n    Assert.assertTrue(\n        _gZkClient.exists(keyBuilder.message(message.getTgtName(), message.getMsgId()).getPath()));\n\n    \r\n    \r\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.IN_PROGRESS);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    ControllerHistory controllerHistory =\n        _accessor.getProperty(_accessor.keyBuilder().controllerLeaderHistory());\n    List<String> managementHistory = controllerHistory.getManagementModeHistory();\n    Assert.assertTrue(managementHistory.isEmpty());\n\n    \r\n    latch.countDown();\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory tmpControllerHistory =\n          _accessor.getProperty(keyBuilder.controllerLeaderHistory());\n      List<String> tmpManagementHistory = tmpControllerHistory.getManagementModeHistory();\n      if (tmpManagementHistory == null || tmpManagementHistory.isEmpty()) {\n        return false;\n      }\n      \r\n      if (tmpManagementHistory.size() > 1) {\n        return false;\n      }\n      String lastHistory = tmpManagementHistory.get(0);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.CLUSTER_FREEZE)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED)\n          && lastHistory.contains(\"REASON=\" + methodName);\n    }, TestHelper.WAIT_DURATION));\n  }\n","date":"2021-09-02 01:00:34","endLine":209,"groupId":"10629","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testEnableFreezeMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/69/10263127d1cf972f18d5b0bf4039f89dc00037.src","preCode":"  public void testEnableFreezeMode() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n    PauseSignal pauseSignal = _accessor.getProperty(keyBuilder.pause());\n    Assert.assertNull(pauseSignal);\n\n    \r\n    CountDownLatch latch = new CountDownLatch(1);\n    _participants[1].setTransition(new BlockingTransition(latch));\n\n    \r\n    Resource resource = new Resource(\"TestDB0\");\n    resource.setStateModelFactoryName(HelixConstants.DEFAULT_STATE_MODEL_FACTORY);\n    Message message = MessageUtil\n        .createStateTransitionMessage(_manager.getInstanceName(), _manager.getSessionId(), resource,\n            \"TestDB0_1\", _participants[1].getInstanceName(), \"SLAVE\", \"OFFLINE\",\n            _participants[1].getSessionId(), \"MasterSlave\");\n    Assert.assertTrue(_accessor\n        .updateProperty(keyBuilder.message(message.getTgtName(), message.getMsgId()), message));\n\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.CLUSTER_FREEZE)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    \r\n    Assert.assertTrue(\n        _gZkClient.exists(keyBuilder.message(message.getTgtName(), message.getMsgId()).getPath()));\n\n    \r\n    \r\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.IN_PROGRESS);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    latch.countDown();\n\n    \r\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.FROZEN);\n\n    expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.CLUSTER_FREEZE);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history = _accessor.getProperty(keyBuilder.controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.CLUSTER_FREEZE)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED)\n          && lastHistory.contains(\"REASON=\" + methodName);\n    }, TestHelper.WAIT_DURATION));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterFreezeMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-07-15 10:32:27","commitOrder":5,"curCode":"  public void testUnfreezeCluster() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.NORMAL)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.NORMAL);\n\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.NORMAL);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history =\n          _accessor.getProperty(_accessor.keyBuilder().controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.NORMAL)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED);\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    Assert.assertTrue(ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, _clusterName)));\n  }\n","date":"2021-07-17 05:02:56","endLine":329,"groupId":"10629","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnfreezeCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/af/aea9114e781ae80d92a6ca08e480b67be134ec.src","preCode":"  public void testUnfreezeCluster() throws Exception {\n    String methodName = TestHelper.getTestMethodName();\n    \r\n    ClusterManagementModeRequest request = ClusterManagementModeRequest.newBuilder()\n        .withClusterName(_clusterName)\n        .withMode(ClusterManagementMode.Type.NORMAL)\n        .withReason(methodName)\n        .build();\n    _gSetupTool.getClusterManagementTool().setClusterManagementMode(request);\n\n    verifyLiveInstanceStatus(_participants, LiveInstance.LiveInstanceStatus.NORMAL);\n\n    ClusterStatus expectedClusterStatus = new ClusterStatus();\n    expectedClusterStatus.setManagementMode(ClusterManagementMode.Type.NORMAL);\n    expectedClusterStatus.setManagementModeStatus(ClusterManagementMode.Status.COMPLETED);\n    verifyClusterStatus(expectedClusterStatus);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(() -> {\n      ControllerHistory history =\n          _accessor.getProperty(_accessor.keyBuilder().controllerLeaderHistory());\n      List<String> managementHistory = history.getManagementModeHistory();\n      if (managementHistory == null || managementHistory.isEmpty()) {\n        return false;\n      }\n      String lastHistory = managementHistory.get(managementHistory.size() - 1);\n      return lastHistory.contains(\"MODE=\" + ClusterManagementMode.Type.NORMAL)\n          && lastHistory.contains(\"STATUS=\" + ClusterManagementMode.Status.COMPLETED);\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    Assert.assertTrue(ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, _clusterName)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestClusterFreezeMode.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"N"}],"commitId":"0e20855148fe86aea3a4a3f7f764c18ee6a6e577","commitMessage":"@@@Fix management mode history duplicate recording (#1846)\n\nThe management mode history has duplicate entries. It does not impact the normal function.  but it's good to get it fixed to avoid confusion. This commit fixes the issue by adding a check for the status in metadata store and the calculated status.","date":"2021-09-02 01:00:34","modifiedFileCount":"3","status":"M","submitter":"Huizhi Lu"}]
