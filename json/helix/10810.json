[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void resetInstance(String clusterName, List<String> instanceNames)\n  {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames)\n    {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews)\n      {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet())\n        {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName)\n              && instanceStateMap.get(instanceName).equals(\"ERROR\"))\n          {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName,\n                       instanceName,\n                       extView.getResourceName(),\n                       resetPartitionNames);\n      }\n    }\n  }\n","date":"2012-10-25 07:14:36","endLine":488,"groupId":"6257","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resetInstance","params":"(StringclusterName@List<String>instanceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/36/dbf9f75f58f708a0d8309baa731d6a25a789b2.src","preCode":"  public void resetInstance(String clusterName, List<String> instanceNames)\n  {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames)\n    {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews)\n      {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet())\n        {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName)\n              && instanceStateMap.get(instanceName).equals(\"ERROR\"))\n          {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName,\n                       instanceName,\n                       extView.getResourceName(),\n                       resetPartitionNames);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void resetResource(String clusterName, List<String> resourceNames)\n  {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews)\n    {\n      if (!resetResourceNames.contains(extView.getResourceName()))\n      {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet())\n      {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet())\n        {\n          if (instanceStateMap.get(instanceName).equals(\"ERROR\"))\n          {\n            if (!resetPartitionNames.containsKey(instanceName))\n            {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet())\n      {\n        resetPartition(clusterName,\n                       instanceName,\n                       extView.getResourceName(),\n                       resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","date":"2012-10-25 07:14:36","endLine":535,"groupId":"3491","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resetResource","params":"(StringclusterName@List<String>resourceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/36/dbf9f75f58f708a0d8309baa731d6a25a789b2.src","preCode":"  public void resetResource(String clusterName, List<String> resourceNames)\n  {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews)\n    {\n      if (!resetResourceNames.contains(extView.getResourceName()))\n      {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet())\n      {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet())\n        {\n          if (instanceStateMap.get(instanceName).equals(\"ERROR\"))\n          {\n            if (!resetPartitionNames.containsKey(instanceName))\n            {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet())\n      {\n        resetPartition(clusterName,\n                       instanceName,\n                       extView.getResourceName(),\n                       resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void resetInstance(String clusterName, List<String> instanceNames)\n  {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames)\n    {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews)\n      {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet())\n        {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName)\n              && instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString()))\n          {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName,\n                       instanceName,\n                       extView.getResourceName(),\n                       resetPartitionNames);\n      }\n    }\n  }\n","date":"2013-04-06 08:30:58","endLine":510,"groupId":"6257","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resetInstance","params":"(StringclusterName@List<String>instanceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ca/80a1ecbb8b997f62c4b68f9c8f225af9eb53fc.src","preCode":"  public void resetInstance(String clusterName, List<String> instanceNames)\n  {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames)\n    {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews)\n      {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet())\n        {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName)\n              && instanceStateMap.get(instanceName).equals(\"ERROR\"))\n          {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName,\n                       instanceName,\n                       extView.getResourceName(),\n                       resetPartitionNames);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"M"},{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void resetResource(String clusterName, List<String> resourceNames)\n  {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews)\n    {\n      if (!resetResourceNames.contains(extView.getResourceName()))\n      {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet())\n      {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet())\n        {\n          if (instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString()))\n          {\n            if (!resetPartitionNames.containsKey(instanceName))\n            {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet())\n      {\n        resetPartition(clusterName,\n                       instanceName,\n                       extView.getResourceName(),\n                       resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","date":"2013-04-06 08:30:58","endLine":557,"groupId":"3491","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resetResource","params":"(StringclusterName@List<String>resourceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ca/80a1ecbb8b997f62c4b68f9c8f225af9eb53fc.src","preCode":"  public void resetResource(String clusterName, List<String> resourceNames)\n  {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews)\n    {\n      if (!resetResourceNames.contains(extView.getResourceName()))\n      {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet())\n      {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet())\n        {\n          if (instanceStateMap.get(instanceName).equals(\"ERROR\"))\n          {\n            if (!resetPartitionNames.containsKey(instanceName))\n            {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet())\n      {\n        resetPartition(clusterName,\n                       instanceName,\n                       extView.getResourceName(),\n                       resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":513,"status":"M"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"M","submitter":"Swaroop Jagadish"},{"authorTime":"2014-05-23 02:08:01","codes":[{"authorDate":"2014-05-23 02:08:01","commitOrder":3,"curCode":"  public void resetInstance(String clusterName, List<String> instanceNames) {\n    \r\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames) {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews) {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet()) {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName)\n              && instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName, instanceName, extView.getResourceName(), resetPartitionNames);\n      }\n    }\n  }\n","date":"2014-05-23 02:08:01","endLine":436,"groupId":"6257","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"resetInstance","params":"(StringclusterName@List<String>instanceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/2d61749a74281f739788469f46ad2621c0c845.src","preCode":"  public void resetInstance(String clusterName, List<String> instanceNames) {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames) {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews) {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet()) {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName)\n              && instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName, instanceName, extView.getResourceName(), resetPartitionNames);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"M"},{"authorDate":"2014-05-23 02:08:01","commitOrder":3,"curCode":"  public void resetResource(String clusterName, List<String> resourceNames) {\n    \r\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews) {\n      if (!resetResourceNames.contains(extView.getResourceName())) {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet()) {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet()) {\n          if (instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            if (!resetPartitionNames.containsKey(instanceName)) {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet()) {\n        resetPartition(clusterName, instanceName, extView.getResourceName(),\n            resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","date":"2014-05-23 02:08:01","endLine":473,"groupId":"3491","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"resetResource","params":"(StringclusterName@List<String>resourceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/2d61749a74281f739788469f46ad2621c0c845.src","preCode":"  public void resetResource(String clusterName, List<String> resourceNames) {\n    \r\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews) {\n      if (!resetResourceNames.contains(extView.getResourceName())) {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet()) {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet()) {\n          if (instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            if (!resetPartitionNames.containsKey(instanceName)) {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet()) {\n        resetPartition(clusterName, instanceName, extView.getResourceName(),\n            resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":439,"status":"M"}],"commitId":"4ff7e3888561b46ca6d9c590bdf425b0d2e0716b","commitMessage":"@@@Merge branch 'helix-0.6.x' of https://git-wip-us.apache.org/repos/asf/helix into helix-0.6.x\n","date":"2014-05-23 02:08:01","modifiedFileCount":"57","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2018-04-20 09:19:51","codes":[{"authorDate":"2018-04-20 09:19:51","commitOrder":4,"curCode":"  public void resetInstance(String clusterName, List<String> instanceNames) {\n    \r\n    logger.info(\"Reset instances {} in cluster {}.\",\n        instanceNames == null ? \"NULL\" : HelixUtil.serializeByComma(instanceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames) {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews) {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet()) {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName) && instanceStateMap.get(instanceName)\n              .equals(HelixDefinedState.ERROR.toString())) {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName, instanceName, extView.getResourceName(), resetPartitionNames);\n      }\n    }\n  }\n","date":"2018-04-20 09:19:51","endLine":528,"groupId":"6257","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"resetInstance","params":"(StringclusterName@List<String>instanceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/708e567f1eb033b6d41cf6dc98340befa6b83c.src","preCode":"  public void resetInstance(String clusterName, List<String> instanceNames) {\n    \r\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames) {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews) {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet()) {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName) && instanceStateMap.get(instanceName)\n              .equals(HelixDefinedState.ERROR.toString())) {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName, instanceName, extView.getResourceName(), resetPartitionNames);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"M"},{"authorDate":"2018-04-20 09:19:51","commitOrder":4,"curCode":"  public void resetResource(String clusterName, List<String> resourceNames) {\n    \r\n    logger.info(\"Reset resources {} in cluster {}.\",\n        resourceNames == null ? \"NULL\" : HelixUtil.serializeByComma(resourceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews) {\n      if (!resetResourceNames.contains(extView.getResourceName())) {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet()) {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet()) {\n          if (instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            if (!resetPartitionNames.containsKey(instanceName)) {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet()) {\n        resetPartition(clusterName, instanceName, extView.getResourceName(),\n            resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","date":"2018-04-20 09:19:51","endLine":567,"groupId":"3491","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"resetResource","params":"(StringclusterName@List<String>resourceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3d/708e567f1eb033b6d41cf6dc98340befa6b83c.src","preCode":"  public void resetResource(String clusterName, List<String> resourceNames) {\n    \r\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews) {\n      if (!resetResourceNames.contains(extView.getResourceName())) {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet()) {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet()) {\n          if (instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            if (!resetPartitionNames.containsKey(instanceName)) {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet()) {\n        resetPartition(clusterName, instanceName, extView.getResourceName(),\n            resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"M"}],"commitId":"a6bdb3c2252a11a51939e1e06083a24ccf5a2ac2","commitMessage":"@@@Add logs for RoutingTableProvider and HelixAdmin\n","date":"2018-04-20 09:19:51","modifiedFileCount":"1","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-03-13 00:44:38","codes":[{"authorDate":"2020-03-13 00:44:38","commitOrder":5,"curCode":"  public void resetInstance(String clusterName, List<String> instanceNames) {\n    \r\n    logger.info(\"Reset instances {} in cluster {}.\",\n        instanceNames == null ? \"NULL\" : HelixUtil.serializeByComma(instanceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames) {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews) {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet()) {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName) && instanceStateMap.get(instanceName)\n              .equals(HelixDefinedState.ERROR.toString())) {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName, instanceName, extView.getResourceName(), resetPartitionNames);\n      }\n    }\n  }\n","date":"2020-04-09 08:23:30","endLine":723,"groupId":"6257","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"resetInstance","params":"(StringclusterName@List<String>instanceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/eaed8be08f73a58f86cc95cf521969f43a962f.src","preCode":"  public void resetInstance(String clusterName, List<String> instanceNames) {\n    \r\n    logger.info(\"Reset instances {} in cluster {}.\",\n        instanceNames == null ? \"NULL\" : HelixUtil.serializeByComma(instanceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames) {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews) {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet()) {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName) && instanceStateMap.get(instanceName)\n              .equals(HelixDefinedState.ERROR.toString())) {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName, instanceName, extView.getResourceName(), resetPartitionNames);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":698,"status":"M"},{"authorDate":"2020-03-13 00:44:38","commitOrder":5,"curCode":"  public void resetResource(String clusterName, List<String> resourceNames) {\n    \r\n    logger.info(\"Reset resources {} in cluster {}.\",\n        resourceNames == null ? \"NULL\" : HelixUtil.serializeByComma(resourceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews) {\n      if (!resetResourceNames.contains(extView.getResourceName())) {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet()) {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet()) {\n          if (instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            if (!resetPartitionNames.containsKey(instanceName)) {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet()) {\n        resetPartition(clusterName, instanceName, extView.getResourceName(),\n            resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","date":"2020-04-09 08:23:30","endLine":762,"groupId":"3491","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"resetResource","params":"(StringclusterName@List<String>resourceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7b/eaed8be08f73a58f86cc95cf521969f43a962f.src","preCode":"  public void resetResource(String clusterName, List<String> resourceNames) {\n    \r\n    logger.info(\"Reset resources {} in cluster {}.\",\n        resourceNames == null ? \"NULL\" : HelixUtil.serializeByComma(resourceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews) {\n      if (!resetResourceNames.contains(extView.getResourceName())) {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet()) {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet()) {\n          if (instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            if (!resetPartitionNames.containsKey(instanceName)) {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet()) {\n        resetPartition(clusterName, instanceName, extView.getResourceName(),\n            resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":726,"status":"M"}],"commitId":"289085f1ce7d2d9665447e9b114c15645f618937","commitMessage":"@@@Make ZKHelixAdmin and ZKHelixManager Realm-aware (#846)\n\nTo make Helix Java APIs realm-aware.  we need to make both ZKHelixAdmin and ZKHelixManager realm-aware. This commit adds a Builder to set client config and connection config for building realm-aware ZkClients underneath.","date":"2020-04-09 08:23:30","modifiedFileCount":"14","status":"M","submitter":"Huizhi Lu"},{"authorTime":"2020-05-15 08:34:22","codes":[{"authorDate":"2020-05-15 08:34:22","commitOrder":6,"curCode":"  public void resetInstance(String clusterName, List<String> instanceNames) {\n    \r\n    logger.info(\"Reset instances {} in cluster {}.\",\n        instanceNames == null ? \"NULL\" : HelixUtil.serializeByComma(instanceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews(), true);\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames) {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews) {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet()) {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName) && instanceStateMap.get(instanceName)\n              .equals(HelixDefinedState.ERROR.toString())) {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName, instanceName, extView.getResourceName(), resetPartitionNames);\n      }\n    }\n  }\n","date":"2020-05-15 08:34:22","endLine":708,"groupId":"10810","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"resetInstance","params":"(StringclusterName@List<String>instanceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/16/605708d64612894036d0675be4ce22b5f4643d.src","preCode":"  public void resetInstance(String clusterName, List<String> instanceNames) {\n    \r\n    logger.info(\"Reset instances {} in cluster {}.\",\n        instanceNames == null ? \"NULL\" : HelixUtil.serializeByComma(instanceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetInstanceNames = new HashSet<String>(instanceNames);\n    for (String instanceName : resetInstanceNames) {\n      List<String> resetPartitionNames = new ArrayList<String>();\n      for (ExternalView extView : extViews) {\n        Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n        for (String partitionName : stateMap.keySet()) {\n          Map<String, String> instanceStateMap = stateMap.get(partitionName);\n\n          if (instanceStateMap.containsKey(instanceName) && instanceStateMap.get(instanceName)\n              .equals(HelixDefinedState.ERROR.toString())) {\n            resetPartitionNames.add(partitionName);\n          }\n        }\n        resetPartition(clusterName, instanceName, extView.getResourceName(), resetPartitionNames);\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":683,"status":"M"},{"authorDate":"2020-05-15 08:34:22","commitOrder":6,"curCode":"  public void resetResource(String clusterName, List<String> resourceNames) {\n    \r\n    logger.info(\"Reset resources {} in cluster {}.\",\n        resourceNames == null ? \"NULL\" : HelixUtil.serializeByComma(resourceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews(), true);\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews) {\n      if (!resetResourceNames.contains(extView.getResourceName())) {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet()) {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet()) {\n          if (instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            if (!resetPartitionNames.containsKey(instanceName)) {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet()) {\n        resetPartition(clusterName, instanceName, extView.getResourceName(),\n            resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","date":"2020-05-15 08:34:22","endLine":747,"groupId":"10810","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"resetResource","params":"(StringclusterName@List<String>resourceNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/16/605708d64612894036d0675be4ce22b5f4643d.src","preCode":"  public void resetResource(String clusterName, List<String> resourceNames) {\n    \r\n    logger.info(\"Reset resources {} in cluster {}.\",\n        resourceNames == null ? \"NULL\" : HelixUtil.serializeByComma(resourceNames), clusterName);\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_zkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    List<ExternalView> extViews = accessor.getChildValues(keyBuilder.externalViews());\n\n    Set<String> resetResourceNames = new HashSet<String>(resourceNames);\n    for (ExternalView extView : extViews) {\n      if (!resetResourceNames.contains(extView.getResourceName())) {\n        continue;\n      }\n\n      \r\n      Map<String, List<String>> resetPartitionNames = new HashMap<String, List<String>>();\n\n      Map<String, Map<String, String>> stateMap = extView.getRecord().getMapFields();\n      for (String partitionName : stateMap.keySet()) {\n        Map<String, String> instanceStateMap = stateMap.get(partitionName);\n        for (String instanceName : instanceStateMap.keySet()) {\n          if (instanceStateMap.get(instanceName).equals(HelixDefinedState.ERROR.toString())) {\n            if (!resetPartitionNames.containsKey(instanceName)) {\n              resetPartitionNames.put(instanceName, new ArrayList<String>());\n            }\n            resetPartitionNames.get(instanceName).add(partitionName);\n          }\n        }\n      }\n\n      for (String instanceName : resetPartitionNames.keySet()) {\n        resetPartition(clusterName, instanceName, extView.getResourceName(),\n            resetPartitionNames.get(instanceName));\n      }\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":711,"status":"M"}],"commitId":"6ff99f5a181fb5fe91340968f93ca2cd5329a90a","commitMessage":"@@@Enforce result check for data accessors batch get calls to prevent partial batch read. (#974)\n\nThis will help to ensure the main Helix logic does not calculate based on incomplete input.","date":"2020-05-15 08:34:22","modifiedFileCount":"49","status":"M","submitter":"Jiajun Wang"}]
