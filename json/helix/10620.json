[{"authorTime":"2018-04-25 09:18:40","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void beforeClass()\n      throws InterruptedException {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(50));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_1, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_2, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-07-14 06:55:35","endLine":108,"groupId":"2173","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0a/9ee552d54b75fb69760c969213d0a357e1efe7.src","preCode":"  public void beforeClass()\n      throws InterruptedException {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(50));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_1, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_2, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PMessageSemiAuto.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"NB"},{"authorDate":"2018-04-25 09:18:40","commitOrder":5,"curCode":"  public void beforeClass()\n      throws InterruptedException {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new TestParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(100));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableDelayRebalanceInCluster(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    for (int i = 0; i < DB_COUNT; i++) {\n      createResourceWithDelayedRebalance(CLUSTER_NAME, \"TestDB_\" + i,\n          BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER,\n          REPLICA_NUMBER - 1, 1000000L, CrushEdRebalanceStrategy.class.getName());\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, _controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-09-18 06:08:28","endLine":124,"groupId":"854","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b3/ef3e5ce431d3054fcbd339e30bd0fd52162430.src","preCode":"  public void beforeClass()\n      throws InterruptedException {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new TestParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(100));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableDelayRebalanceInCluster(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    for (int i = 0; i < DB_COUNT; i++) {\n      createResourceWithDelayedRebalance(CLUSTER_NAME, \"TestDB_\" + i,\n          BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER,\n          REPLICA_NUMBER - 1, 1000000L, CrushEdRebalanceStrategy.class.getName());\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, _controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"880f885121afecab4e186282fbf94a146a2cf04a","commitMessage":"@@@Fix P2P message logic in controller to avoid sending duplicated messages to participants.\n","date":"2018-09-18 06:08:28","modifiedFileCount":"21","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-07-28 08:28:17","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":6,"curCode":"  public void beforeClass()\n      throws InterruptedException {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(50));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_1, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_2, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-07-14 06:55:35","endLine":108,"groupId":"2173","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0a/9ee552d54b75fb69760c969213d0a357e1efe7.src","preCode":"  public void beforeClass()\n      throws InterruptedException {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(50));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_1, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_2, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PMessageSemiAuto.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2018-07-28 08:28:17","commitOrder":6,"curCode":"  public void beforeClass() {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new TestParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(100));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableDelayRebalanceInCluster(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    for (int i = 0; i < DB_COUNT; i++) {\n      createResourceWithDelayedRebalance(CLUSTER_NAME, \"TestDB_\" + i,\n          BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER,\n          REPLICA_NUMBER - 1, 1000000L, CrushEdRebalanceStrategy.class.getName());\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, _controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-09-18 06:17:26","endLine":123,"groupId":"854","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bf/7f566d7e4de9a0d3692a5ab2a919e569e45901.src","preCode":"  public void beforeClass()\n      throws InterruptedException {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new TestParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(100));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableDelayRebalanceInCluster(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    for (int i = 0; i < DB_COUNT; i++) {\n      createResourceWithDelayedRebalance(CLUSTER_NAME, \"TestDB_\" + i,\n          BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER,\n          REPLICA_NUMBER - 1, 1000000L, CrushEdRebalanceStrategy.class.getName());\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, _controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"74145e8ad3b34753186d53526bab825de4432c31","commitMessage":"@@@Temorary workaround to fix P2P race-condition for old helix participant (0.8.1 or older).\n","date":"2018-09-18 06:17:26","modifiedFileCount":"5","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-07-28 08:28:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    super.beforeClass();\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(50));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_1, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_2, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2019-05-25 09:19:21","endLine":106,"groupId":"2173","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cb/e35041d308102f48551f149b7481bc06214211.src","preCode":"  public void beforeClass()\n      throws InterruptedException {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(50));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_1, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_2, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PMessageSemiAuto.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2018-07-28 08:28:17","commitOrder":7,"curCode":"  public void beforeClass() {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new TestParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(100));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableDelayRebalanceInCluster(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    for (int i = 0; i < DB_COUNT; i++) {\n      createResourceWithDelayedRebalance(CLUSTER_NAME, \"TestDB_\" + i,\n          BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER,\n          REPLICA_NUMBER - 1, 1000000L, CrushEdRebalanceStrategy.class.getName());\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, _controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2018-09-18 06:17:26","endLine":123,"groupId":"854","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bf/7f566d7e4de9a0d3692a5ab2a919e569e45901.src","preCode":"  public void beforeClass() {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new TestParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(100));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableDelayRebalanceInCluster(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    for (int i = 0; i < DB_COUNT; i++) {\n      createResourceWithDelayedRebalance(CLUSTER_NAME, \"TestDB_\" + i,\n          BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER,\n          REPLICA_NUMBER - 1, 1000000L, CrushEdRebalanceStrategy.class.getName());\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, _controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2020-10-08 07:58:42","commitOrder":8,"curCode":"  public void beforeClass() throws Exception {\n    super.beforeClass();\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(50));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_1, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_2, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2020-10-08 07:58:42","endLine":110,"groupId":"10620","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a3/24a330007f615d42016b3ebf40a8640a75c68e.src","preCode":"  public void beforeClass() throws Exception {\n    super.beforeClass();\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(50));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_1, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, DB_NAME_2, _instances,\n        BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PMessageSemiAuto.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-10-08 07:58:42","commitOrder":8,"curCode":"  public void beforeClass() {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new TestParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(100));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableDelayRebalanceInCluster(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    for (int i = 0; i < DB_COUNT; i++) {\n      createResourceWithDelayedRebalance(CLUSTER_NAME, \"TestDB_\" + i,\n          BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER,\n          REPLICA_NUMBER - 1, 1000000L, CrushEdRebalanceStrategy.class.getName());\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, _controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","date":"2020-10-08 07:58:42","endLine":127,"groupId":"10620","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a6/b07e4a49ff5cbe3d3598f9167cc54dc8fcde96.src","preCode":"  public void beforeClass() {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new TestParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.setTransition(new DelayedTransitionBase(100));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableDelayRebalanceInCluster(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    for (int i = 0; i < DB_COUNT; i++) {\n      createResourceWithDelayedRebalance(CLUSTER_NAME, \"TestDB_\" + i,\n          BuiltInStateModelDefinitions.MasterSlave.name(), PARTITION_NUMBER, REPLICA_NUMBER,\n          REPLICA_NUMBER - 1, 1000000L, CrushEdRebalanceStrategy.class.getName());\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, _controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    _configAccessor = new ConfigAccessor(_gZkClient);\n    _accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"}]
