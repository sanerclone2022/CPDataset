[{"authorTime":"2020-06-06 06:27:58","codes":[{"authorDate":"2020-05-27 01:12:54","commitOrder":2,"curCode":"  public void testQueueParallelJobs() throws InterruptedException {\n    final int parallelJobs = 3;\n    final int numberOfJobsAddedBeforeControllerSwitch = 4;\n    final int totalNumberOfJobs = 7;\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    WorkflowConfig.Builder workflowCfgBuilder = new WorkflowConfig.Builder()\n        .setWorkflowId(queueName).setParallelJobs(parallelJobs).setAllowOverlapJobAssignment(true);\n    _driver.start(builder.setWorkflowConfig(workflowCfgBuilder.build()).build());\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"10000\"));\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedBeforeControllerSwitch; i++) {\n      _driver.enqueueJob(queueName, \"JOB\" + i, jobBuilder);\n    }\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedBeforeControllerSwitch; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    \r\n    _controller.syncStop();\n\n    \r\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      _driver.enqueueJob(queueName, \"JOB\" + i, jobBuilder);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    \r\n    \r\n    long maxStartTime = Long.MIN_VALUE;\n    long minFinishTime = Long.MAX_VALUE;\n\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      JobContext jobContext =\n          _driver.getJobContext(TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i));\n      maxStartTime = Long.max(maxStartTime, jobContext.getStartTime());\n      minFinishTime = Long.min(minFinishTime, jobContext.getFinishTime());\n    }\n    Assert.assertTrue(minFinishTime > maxStartTime);\n  }\n","date":"2020-05-27 01:12:54","endLine":161,"groupId":"4398","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueueParallelJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4d/88a5ac0bbff97ffceeb8417219ef75f1484253.src","preCode":"  public void testQueueParallelJobs() throws InterruptedException {\n    final int parallelJobs = 3;\n    final int numberOfJobsAddedBeforeControllerSwitch = 4;\n    final int totalNumberOfJobs = 7;\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    WorkflowConfig.Builder workflowCfgBuilder = new WorkflowConfig.Builder()\n        .setWorkflowId(queueName).setParallelJobs(parallelJobs).setAllowOverlapJobAssignment(true);\n    _driver.start(builder.setWorkflowConfig(workflowCfgBuilder.build()).build());\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"10000\"));\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedBeforeControllerSwitch; i++) {\n      _driver.enqueueJob(queueName, \"JOB\" + i, jobBuilder);\n    }\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedBeforeControllerSwitch; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    \r\n    _controller.syncStop();\n\n    \r\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      _driver.enqueueJob(queueName, \"JOB\" + i, jobBuilder);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    \r\n    \r\n    long maxStartTime = Long.MIN_VALUE;\n    long minFinishTime = Long.MAX_VALUE;\n\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      JobContext jobContext =\n          _driver.getJobContext(TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i));\n      maxStartTime = Long.max(maxStartTime, jobContext.getStartTime());\n      minFinishTime = Long.min(minFinishTime, jobContext.getFinishTime());\n    }\n    Assert.assertTrue(minFinishTime > maxStartTime);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestEnqueueJobs.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"NB"},{"authorDate":"2020-06-06 06:27:58","commitOrder":2,"curCode":"  public void testQueueJobsMaxCapacity() throws InterruptedException {\n    final int numberOfJobsAddedInitially = 4;\n    final int queueCapacity = 5;\n    final String newJobName = \"NewJob\";\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    WorkflowConfig.Builder workflowCfgBuilder =\n        new WorkflowConfig.Builder().setWorkflowId(queueName).setParallelJobs(1)\n            .setAllowOverlapJobAssignment(true).setCapacity(queueCapacity);\n    _driver.start(builder.setWorkflowConfig(workflowCfgBuilder.build()).build());\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"1000\"));\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedInitially; i++) {\n      _driver.enqueueJob(queueName, \"JOB\" + i, jobBuilder);\n    }\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedInitially; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    boolean exceptionHappenedWhileAddingNewJob = false;\n    try {\n      \r\n      \r\n      _driver.enqueueJob(queueName, newJobName, jobBuilder);\n    } catch (Exception e) {\n      exceptionHappenedWhileAddingNewJob = true;\n    }\n    Assert.assertTrue(exceptionHappenedWhileAddingNewJob);\n\n    \r\n    JobConfig jobConfig =\n        _driver.getJobConfig(TaskUtil.getNamespacedJobName(queueName, newJobName));\n    Assert.assertNull(jobConfig);\n  }\n","date":"2020-06-06 06:27:58","endLine":204,"groupId":"5116","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueueJobsMaxCapacity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d0/5489b8dccf86d37667839245adee737a9bf5f0.src","preCode":"  public void testQueueJobsMaxCapacity() throws InterruptedException {\n    final int numberOfJobsAddedInitially = 4;\n    final int queueCapacity = 5;\n    final String newJobName = \"NewJob\";\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    WorkflowConfig.Builder workflowCfgBuilder =\n        new WorkflowConfig.Builder().setWorkflowId(queueName).setParallelJobs(1)\n            .setAllowOverlapJobAssignment(true).setCapacity(queueCapacity);\n    _driver.start(builder.setWorkflowConfig(workflowCfgBuilder.build()).build());\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"1000\"));\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedInitially; i++) {\n      _driver.enqueueJob(queueName, \"JOB\" + i, jobBuilder);\n    }\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedInitially; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    boolean exceptionHappenedWhileAddingNewJob = false;\n    try {\n      \r\n      \r\n      _driver.enqueueJob(queueName, newJobName, jobBuilder);\n    } catch (Exception e) {\n      exceptionHappenedWhileAddingNewJob = true;\n    }\n    Assert.assertTrue(exceptionHappenedWhileAddingNewJob);\n\n    \r\n    JobConfig jobConfig =\n        _driver.getJobConfig(TaskUtil.getNamespacedJobName(queueName, newJobName));\n    Assert.assertNull(jobConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestEnqueueJobs.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"}],"commitId":"00eb6786d3430fe31f313874dea96b78309c4f51","commitMessage":"@@@Avoid adding JobConfig if queue has reached its capacity limit (#1064)\n\nAvoid adding JobConfig if queue has reached its capacity limit\n\nIn this commit.  the necessary check has been added in TaskDriver side\nto fail creation of JobConfig if the queue has reached its capacity limit.","date":"2020-06-06 06:27:58","modifiedFileCount":"2","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"},{"authorTime":"2020-09-16 11:53:09","codes":[{"authorDate":"2020-09-16 11:53:09","commitOrder":3,"curCode":"  public void testQueueParallelJobs() throws InterruptedException {\n    final int parallelJobs = 3;\n    final int numberOfJobsAddedBeforeControllerSwitch = 4;\n    final int totalNumberOfJobs = 7;\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    WorkflowConfig.Builder workflowCfgBuilder = new WorkflowConfig.Builder()\n        .setWorkflowId(queueName).setParallelJobs(parallelJobs).setAllowOverlapJobAssignment(true);\n    _driver.start(builder.setWorkflowConfig(workflowCfgBuilder.build()).build());\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"10000\"));\n\n    _driver.waitToStop(queueName, 5000L);\n\n    \r\n    List<String> jobNames = new ArrayList<>();\n    List<JobConfig.Builder> jobBuilders = new ArrayList<>();\n    for (int i = 0; i < numberOfJobsAddedBeforeControllerSwitch; i++) {\n      jobNames.add(\"JOB\" + i);\n      jobBuilders.add(jobBuilder);\n    }\n    _driver.enqueueJobs(queueName, jobNames, jobBuilders);\n\n    _driver.resume(queueName);\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedBeforeControllerSwitch; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    \r\n    _controller.syncStop();\n\n    \r\n    jobNames.clear();\n    jobBuilders.clear();\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      jobNames.add(\"JOB\" + i);\n      jobBuilders.add(jobBuilder);\n    }\n    _driver.enqueueJobs(queueName, jobNames, jobBuilders);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    \r\n    \r\n    long maxStartTime = Long.MIN_VALUE;\n    long minFinishTime = Long.MAX_VALUE;\n\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      JobContext jobContext =\n          _driver.getJobContext(TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i));\n      maxStartTime = Long.max(maxStartTime, jobContext.getStartTime());\n      minFinishTime = Long.min(minFinishTime, jobContext.getFinishTime());\n    }\n    Assert.assertTrue(minFinishTime > maxStartTime);\n  }\n","date":"2020-09-16 11:53:09","endLine":203,"groupId":"10538","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testQueueParallelJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/76/2864f24df931ee2c282028e1d95f98ea8a2d54.src","preCode":"  public void testQueueParallelJobs() throws InterruptedException {\n    final int parallelJobs = 3;\n    final int numberOfJobsAddedBeforeControllerSwitch = 4;\n    final int totalNumberOfJobs = 7;\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    WorkflowConfig.Builder workflowCfgBuilder = new WorkflowConfig.Builder()\n        .setWorkflowId(queueName).setParallelJobs(parallelJobs).setAllowOverlapJobAssignment(true);\n    _driver.start(builder.setWorkflowConfig(workflowCfgBuilder.build()).build());\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"10000\"));\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedBeforeControllerSwitch; i++) {\n      _driver.enqueueJob(queueName, \"JOB\" + i, jobBuilder);\n    }\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedBeforeControllerSwitch; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    \r\n    _controller.syncStop();\n\n    \r\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      _driver.enqueueJob(queueName, \"JOB\" + i, jobBuilder);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    \r\n    \r\n    long maxStartTime = Long.MIN_VALUE;\n    long minFinishTime = Long.MAX_VALUE;\n\n    for (int i = numberOfJobsAddedBeforeControllerSwitch; i < totalNumberOfJobs; i++) {\n      JobContext jobContext =\n          _driver.getJobContext(TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i));\n      maxStartTime = Long.max(maxStartTime, jobContext.getStartTime());\n      minFinishTime = Long.min(minFinishTime, jobContext.getFinishTime());\n    }\n    Assert.assertTrue(minFinishTime > maxStartTime);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestEnqueueJobs.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-09-16 11:53:09","commitOrder":3,"curCode":"  public void testQueueJobsMaxCapacity() throws InterruptedException {\n    final int numberOfJobsAddedInitially = 4;\n    final int queueCapacity = 5;\n    final String newJobName = \"NewJob\";\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    WorkflowConfig.Builder workflowCfgBuilder =\n        new WorkflowConfig.Builder().setWorkflowId(queueName).setParallelJobs(1)\n            .setAllowOverlapJobAssignment(true).setCapacity(queueCapacity);\n    _driver.start(builder.setWorkflowConfig(workflowCfgBuilder.build()).build());\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"1000\"));\n\n    _driver.waitToStop(queueName, 5000L);\n\n    \r\n    List<String> jobNames = new ArrayList<>();\n    List<JobConfig.Builder> jobBuilders = new ArrayList<>();\n    for (int i = 0; i < numberOfJobsAddedInitially; i++) {\n      jobNames.add(\"JOB\" + i);\n      jobBuilders.add(jobBuilder);\n    }\n    _driver.enqueueJobs(queueName, jobNames, jobBuilders);\n\n    _driver.resume(queueName);\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedInitially; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    boolean exceptionHappenedWhileAddingNewJob = false;\n    try {\n      \r\n      \r\n      _driver.enqueueJob(queueName, newJobName, jobBuilder);\n    } catch (Exception e) {\n      exceptionHappenedWhileAddingNewJob = true;\n    }\n    Assert.assertTrue(exceptionHappenedWhileAddingNewJob);\n\n    \r\n    JobConfig jobConfig =\n        _driver.getJobConfig(TaskUtil.getNamespacedJobName(queueName, newJobName));\n    Assert.assertNull(jobConfig);\n  }\n","date":"2020-09-16 11:53:09","endLine":254,"groupId":"10538","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testQueueJobsMaxCapacity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/76/2864f24df931ee2c282028e1d95f98ea8a2d54.src","preCode":"  public void testQueueJobsMaxCapacity() throws InterruptedException {\n    final int numberOfJobsAddedInitially = 4;\n    final int queueCapacity = 5;\n    final String newJobName = \"NewJob\";\n    String queueName = TestHelper.getTestMethodName();\n    JobQueue.Builder builder = TaskTestUtil.buildJobQueue(queueName);\n    WorkflowConfig.Builder workflowCfgBuilder =\n        new WorkflowConfig.Builder().setWorkflowId(queueName).setParallelJobs(1)\n            .setAllowOverlapJobAssignment(true).setCapacity(queueCapacity);\n    _driver.start(builder.setWorkflowConfig(workflowCfgBuilder.build()).build());\n    JobConfig.Builder jobBuilder =\n        new JobConfig.Builder().setTargetResource(WorkflowGenerator.DEFAULT_TGT_DB)\n            .setCommand(MockTask.TASK_COMMAND).setMaxAttemptsPerTask(2)\n            .setJobCommandConfigMap(Collections.singletonMap(MockTask.JOB_DELAY, \"1000\"));\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedInitially; i++) {\n      _driver.enqueueJob(queueName, \"JOB\" + i, jobBuilder);\n    }\n\n    \r\n    for (int i = 0; i < numberOfJobsAddedInitially; i++) {\n      _driver.pollForJobState(queueName, TaskUtil.getNamespacedJobName(queueName, \"JOB\" + i),\n          TaskState.COMPLETED);\n    }\n\n    boolean exceptionHappenedWhileAddingNewJob = false;\n    try {\n      \r\n      \r\n      _driver.enqueueJob(queueName, newJobName, jobBuilder);\n    } catch (Exception e) {\n      exceptionHappenedWhileAddingNewJob = true;\n    }\n    Assert.assertTrue(exceptionHappenedWhileAddingNewJob);\n\n    \r\n    JobConfig jobConfig =\n        _driver.getJobConfig(TaskUtil.getNamespacedJobName(queueName, newJobName));\n    Assert.assertNull(jobConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestEnqueueJobs.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"c7a50003d454b12878aa37795008fa1ef1e144da","commitMessage":"@@@Stabilize TestEnqueueJobs  (#1346)\n\nIn this commit.  TestEnqueueJobs has been stabilized by stopping\nthe queue before enqueuing a job and resuming it afterward.\nAlso.  instead of adding the jobs one by one.  the batch job addition\nhas been used.","date":"2020-09-16 11:53:09","modifiedFileCount":"1","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"}]
