[{"authorTime":"2014-02-17 03:32:46","codes":[{"authorDate":"2014-02-17 03:32:46","commitOrder":1,"curCode":"  public void testSingleSet() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    String root = String.format(\"/%s/%s\", clusterName, PropertyType.PROPERTYSTORE.name());\n    String fallbackRoot = String.format(\"/%s/%s\", clusterName, \"HELIX_PROPERTYSTORE\");\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    \r\n    for (int i = 0; i < 1; i++) {\n      String path = String.format(\"%s/%d\", fallbackRoot, i);\n      baseAccessor.create(path, new ZNRecord(Integer.toString(i)), AccessOption.PERSISTENT);\n    }\n\n    AutoFallbackPropertyStore<ZNRecord> store =\n        new AutoFallbackPropertyStore<ZNRecord>(baseAccessor, root, fallbackRoot);\n\n    String path = String.format(\"/%d\", 0);\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location\");\n    Assert.assertTrue(baseAccessor.exists(String.format(\"%s%s\", fallbackRoot, path), 0),\n        \"Should exist under fallback location\");\n    ZNRecord record = new ZNRecord(\"new0\");\n    boolean succeed = store.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(succeed);\n\n    record = baseAccessor.get(String.format(\"%s%s\", fallbackRoot, path), null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"0\");\n\n    record = baseAccessor.get(String.format(\"%s%s\", root, path), null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"new0\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-02-17 03:32:46","endLine":296,"groupId":"2020","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d4/cb65842b392c5021be14c6d82cdb4f9cb31a90.src","preCode":"  public void testSingleSet() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    String root = String.format(\"/%s/%s\", clusterName, PropertyType.PROPERTYSTORE.name());\n    String fallbackRoot = String.format(\"/%s/%s\", clusterName, \"HELIX_PROPERTYSTORE\");\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    \r\n    for (int i = 0; i < 1; i++) {\n      String path = String.format(\"%s/%d\", fallbackRoot, i);\n      baseAccessor.create(path, new ZNRecord(Integer.toString(i)), AccessOption.PERSISTENT);\n    }\n\n    AutoFallbackPropertyStore<ZNRecord> store =\n        new AutoFallbackPropertyStore<ZNRecord>(baseAccessor, root, fallbackRoot);\n\n    String path = String.format(\"/%d\", 0);\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location\");\n    Assert.assertTrue(baseAccessor.exists(String.format(\"%s%s\", fallbackRoot, path), 0),\n        \"Should exist under fallback location\");\n    ZNRecord record = new ZNRecord(\"new0\");\n    boolean succeed = store.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(succeed);\n\n    record = baseAccessor.get(String.format(\"%s%s\", fallbackRoot, path), null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"0\");\n\n    record = baseAccessor.get(String.format(\"%s%s\", root, path), null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"new0\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestAutoFallbackPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"B"},{"authorDate":"2014-02-17 03:32:46","commitOrder":1,"curCode":"  public void testSingleGetOnFallbackPath() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    String root = String.format(\"/%s/%s\", clusterName, PropertyType.PROPERTYSTORE.name());\n    String fallbackRoot = String.format(\"/%s/%s\", clusterName, \"HELIX_PROPERTYSTORE\");\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    \r\n    for (int i = 0; i < 1; i++) {\n      String path = String.format(\"%s/%d\", fallbackRoot, i);\n      baseAccessor.create(path, new ZNRecord(Integer.toString(i)), AccessOption.PERSISTENT);\n    }\n\n    AutoFallbackPropertyStore<ZNRecord> store =\n        new AutoFallbackPropertyStore<ZNRecord>(baseAccessor, root, fallbackRoot);\n\n    String path = String.format(\"/%d\", 0);\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location\");\n    Assert.assertTrue(baseAccessor.exists(String.format(\"%s%s\", fallbackRoot, path), 0),\n        \"Should exist under fallback location\");\n\n    \r\n    boolean exist = store.exists(path, 0);\n    Assert.assertTrue(exist);\n\n    \r\n    Stat stat = store.getStat(path, 0);\n    Assert.assertNotNull(stat);\n\n    \r\n    ZNRecord record = store.get(path, null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"0\");\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location after get\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2014-02-17 03:32:46","endLine":390,"groupId":"2020","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleGetOnFallbackPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d4/cb65842b392c5021be14c6d82cdb4f9cb31a90.src","preCode":"  public void testSingleGetOnFallbackPath() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    String root = String.format(\"/%s/%s\", clusterName, PropertyType.PROPERTYSTORE.name());\n    String fallbackRoot = String.format(\"/%s/%s\", clusterName, \"HELIX_PROPERTYSTORE\");\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    \r\n    for (int i = 0; i < 1; i++) {\n      String path = String.format(\"%s/%d\", fallbackRoot, i);\n      baseAccessor.create(path, new ZNRecord(Integer.toString(i)), AccessOption.PERSISTENT);\n    }\n\n    AutoFallbackPropertyStore<ZNRecord> store =\n        new AutoFallbackPropertyStore<ZNRecord>(baseAccessor, root, fallbackRoot);\n\n    String path = String.format(\"/%d\", 0);\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location\");\n    Assert.assertTrue(baseAccessor.exists(String.format(\"%s%s\", fallbackRoot, path), 0),\n        \"Should exist under fallback location\");\n\n    \r\n    boolean exist = store.exists(path, 0);\n    Assert.assertTrue(exist);\n\n    \r\n    Stat stat = store.getStat(path, 0);\n    Assert.assertNotNull(stat);\n\n    \r\n    ZNRecord record = store.get(path, null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"0\");\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location after get\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestAutoFallbackPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"}],"commitId":"fc1512305c218cc7b95055676a2ecfef5ad9b79b","commitMessage":"@@@Merge branch 'helix-0.6.2-release' of https://git-wip-us.apache.org/repos/asf/helix into helix-0.6.2-release\n","date":"2014-02-17 03:32:46","modifiedFileCount":"9","status":"B","submitter":"Kanak Biscuitwala"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":2,"curCode":"  public void testSingleSet() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    String root = String.format(\"/%s/%s\", clusterName, PropertyType.PROPERTYSTORE.name());\n    String fallbackRoot = String.format(\"/%s/%s\", clusterName, \"HELIX_PROPERTYSTORE\");\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n\n    \r\n    for (int i = 0; i < 1; i++) {\n      String path = String.format(\"%s/%d\", fallbackRoot, i);\n      baseAccessor.create(path, new ZNRecord(Integer.toString(i)), AccessOption.PERSISTENT);\n    }\n\n    AutoFallbackPropertyStore<ZNRecord> store =\n        new AutoFallbackPropertyStore<>(baseAccessor, root, fallbackRoot);\n\n    String path = String.format(\"/%d\", 0);\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location\");\n    Assert.assertTrue(baseAccessor.exists(String.format(\"%s%s\", fallbackRoot, path), 0),\n        \"Should exist under fallback location\");\n    ZNRecord record = new ZNRecord(\"new0\");\n    boolean succeed = store.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(succeed);\n\n    record = baseAccessor.get(String.format(\"%s%s\", fallbackRoot, path), null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"0\");\n\n    record = baseAccessor.get(String.format(\"%s%s\", root, path), null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"new0\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":309,"groupId":"1029","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/aa70c6698a1532348bc647bddedd7e874e6f1a.src","preCode":"  public void testSingleSet() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    String root = String.format(\"/%s/%s\", clusterName, PropertyType.PROPERTYSTORE.name());\n    String fallbackRoot = String.format(\"/%s/%s\", clusterName, \"HELIX_PROPERTYSTORE\");\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    \r\n    for (int i = 0; i < 1; i++) {\n      String path = String.format(\"%s/%d\", fallbackRoot, i);\n      baseAccessor.create(path, new ZNRecord(Integer.toString(i)), AccessOption.PERSISTENT);\n    }\n\n    AutoFallbackPropertyStore<ZNRecord> store =\n        new AutoFallbackPropertyStore<ZNRecord>(baseAccessor, root, fallbackRoot);\n\n    String path = String.format(\"/%d\", 0);\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location\");\n    Assert.assertTrue(baseAccessor.exists(String.format(\"%s%s\", fallbackRoot, path), 0),\n        \"Should exist under fallback location\");\n    ZNRecord record = new ZNRecord(\"new0\");\n    boolean succeed = store.set(path, record, AccessOption.PERSISTENT);\n    Assert.assertTrue(succeed);\n\n    record = baseAccessor.get(String.format(\"%s%s\", fallbackRoot, path), null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"0\");\n\n    record = baseAccessor.get(String.format(\"%s%s\", root, path), null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"new0\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestAutoFallbackPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":2,"curCode":"  public void testSingleGetOnFallbackPath() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    String root = String.format(\"/%s/%s\", clusterName, PropertyType.PROPERTYSTORE.name());\n    String fallbackRoot = String.format(\"/%s/%s\", clusterName, \"HELIX_PROPERTYSTORE\");\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n\n    \r\n    for (int i = 0; i < 1; i++) {\n      String path = String.format(\"%s/%d\", fallbackRoot, i);\n      baseAccessor.create(path, new ZNRecord(Integer.toString(i)), AccessOption.PERSISTENT);\n    }\n\n    AutoFallbackPropertyStore<ZNRecord> store =\n        new AutoFallbackPropertyStore<>(baseAccessor, root, fallbackRoot);\n\n    String path = String.format(\"/%d\", 0);\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location\");\n    Assert.assertTrue(baseAccessor.exists(String.format(\"%s%s\", fallbackRoot, path), 0),\n        \"Should exist under fallback location\");\n\n    \r\n    boolean exist = store.exists(path, 0);\n    Assert.assertTrue(exist);\n\n    \r\n    Stat stat = store.getStat(path, 0);\n    Assert.assertNotNull(stat);\n\n    \r\n    ZNRecord record = store.get(path, null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"0\");\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location after get\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":404,"groupId":"1029","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleGetOnFallbackPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/aa70c6698a1532348bc647bddedd7e874e6f1a.src","preCode":"  public void testSingleGetOnFallbackPath() {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    String root = String.format(\"/%s/%s\", clusterName, PropertyType.PROPERTYSTORE.name());\n    String fallbackRoot = String.format(\"/%s/%s\", clusterName, \"HELIX_PROPERTYSTORE\");\n    ZkBaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n\n    \r\n    for (int i = 0; i < 1; i++) {\n      String path = String.format(\"%s/%d\", fallbackRoot, i);\n      baseAccessor.create(path, new ZNRecord(Integer.toString(i)), AccessOption.PERSISTENT);\n    }\n\n    AutoFallbackPropertyStore<ZNRecord> store =\n        new AutoFallbackPropertyStore<ZNRecord>(baseAccessor, root, fallbackRoot);\n\n    String path = String.format(\"/%d\", 0);\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location\");\n    Assert.assertTrue(baseAccessor.exists(String.format(\"%s%s\", fallbackRoot, path), 0),\n        \"Should exist under fallback location\");\n\n    \r\n    boolean exist = store.exists(path, 0);\n    Assert.assertTrue(exist);\n\n    \r\n    Stat stat = store.getStat(path, 0);\n    Assert.assertNotNull(stat);\n\n    \r\n    ZNRecord record = store.get(path, null, 0);\n    Assert.assertNotNull(record);\n    Assert.assertEquals(record.getId(), \"0\");\n    Assert.assertFalse(baseAccessor.exists(String.format(\"%s%s\", root, path), 0),\n        \"Should not exist under new location after get\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestAutoFallbackPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
