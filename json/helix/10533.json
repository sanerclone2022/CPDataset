[{"authorTime":"2016-02-24 09:06:35","codes":[{"authorDate":"2016-02-24 09:06:35","commitOrder":1,"curCode":"  public void testUpdateRunningQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    \r\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","date":"2016-07-06 05:48:35","endLine":196,"groupId":"1684","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateRunningQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/53b3601c68efd1796c68e025da363a6f5864ee.src","preCode":"  public void testUpdateRunningQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    \r\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestUpdateWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"},{"authorDate":"2016-02-24 09:06:35","commitOrder":1,"curCode":"  public void testUpdateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.stop(queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","date":"2016-07-06 05:48:35","endLine":250,"groupId":"1686","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdateStoppedQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/53b3601c68efd1796c68e025da363a6f5864ee.src","preCode":"  public void testUpdateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.stop(queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestUpdateWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"}],"commitId":"d386aff394f2e4e7202f13fe2ed5e6533a8cfb29","commitMessage":"@@@Refactor Workflow and Jobqueue builders to make the builder API more clean.\n","date":"2016-07-06 05:48:35","modifiedFileCount":"16","status":"B","submitter":"Lei Xia"},{"authorTime":"2016-05-11 02:44:25","codes":[{"authorDate":"2016-05-11 02:44:25","commitOrder":2,"curCode":"  public void testUpdateRunningQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    \r\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","date":"2016-07-06 07:21:13","endLine":86,"groupId":"1684","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateRunningQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/e6355edc57e715ee5b185c3548103b14bbfb2d.src","preCode":"  public void testUpdateRunningQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    \r\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestUpdateWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2016-05-11 02:44:25","commitOrder":2,"curCode":"  public void testUpdateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.stop(queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","date":"2016-07-06 07:21:13","endLine":140,"groupId":"1686","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdateStoppedQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/e6355edc57e715ee5b185c3548103b14bbfb2d.src","preCode":"  public void testUpdateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.stop(queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    TaskTestUtil.pollForWorkflowState(_driver, scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestUpdateWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"183a26ae7857a7c35985b14df9742ba3f4a06566","commitMessage":"@@@Add pollForJobState and pollForWorkflowState function in TaskDriver\n\n1. Add pollForJobState and pollForWorkflowState functions in TaskDriver\n2. Add unit tests for poll completed states for those tasks.\n3. Refactor all tests using new functions.\n","date":"2016-07-06 07:21:13","modifiedFileCount":"20","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-07-15 08:22:54","codes":[{"authorDate":"2020-07-15 08:22:54","commitOrder":3,"curCode":"  public void testUpdateRunningQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    \r\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n\n    \r\n    Assert\n        .assertTrue(TestHelper.verify(() -> (TaskTestUtil.pollForWorkflowContext(_driver, queueName)\n            .getScheduledWorkflows().size() > 1), TestHelper.WAIT_DURATION));\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","date":"2020-07-15 08:22:54","endLine":89,"groupId":"10533","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateRunningQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/7187669c57788e180e25890c9b2c2e63dea019.src","preCode":"  public void testUpdateRunningQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    \r\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestUpdateWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2020-07-15 08:22:54","commitOrder":3,"curCode":"  public void testUpdateStoppedQueue() throws Exception {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.stop(queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n\n    \r\n    Assert\n        .assertTrue(TestHelper.verify(() -> (TaskTestUtil.pollForWorkflowContext(_driver, queueName)\n            .getScheduledWorkflows().size() > 1), TestHelper.WAIT_DURATION));\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","date":"2020-07-15 08:22:54","endLine":146,"groupId":"10533","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdateStoppedQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/7187669c57788e180e25890c9b2c2e63dea019.src","preCode":"  public void testUpdateStoppedQueue() throws InterruptedException {\n    String queueName = TestHelper.getTestMethodName();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue queue = createDefaultRecurrentJobQueue(queueName, 2);\n    _driver.start(queue);\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.IN_PROGRESS);\n\n    _driver.stop(queueName);\n\n    WorkflowConfig workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowConfig);\n    Calendar startTime = Calendar.getInstance();\n    startTime.set(Calendar.SECOND, startTime.get(Calendar.SECOND) + 1);\n\n    ScheduleConfig scheduleConfig =\n        ScheduleConfig.recurringFromDate(startTime.getTime(), TimeUnit.MINUTES, 2);\n\n    configBuilder.setScheduleConfig(scheduleConfig);\n\n    _driver.updateWorkflow(queueName, configBuilder.build());\n\n    workflowConfig = _driver.getWorkflowConfig(queueName);\n    Assert.assertEquals(workflowConfig.getTargetState(), TargetState.STOP);\n\n    _driver.resume(queueName);\n\n    \r\n    _driver.pollForWorkflowState(scheduledQueue, TaskState.COMPLETED);\n\n    Thread.sleep(1000);\n\n    wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    WorkflowConfig wCfg = _driver.getWorkflowConfig(scheduledQueue);\n\n    Calendar configStartTime = Calendar.getInstance();\n    configStartTime.setTime(wCfg.getStartTime());\n\n    Assert.assertTrue(\n        (startTime.get(Calendar.HOUR_OF_DAY) == configStartTime.get(Calendar.HOUR_OF_DAY) &&\n            startTime.get(Calendar.MINUTE) == configStartTime.get(Calendar.MINUTE) &&\n            startTime.get(Calendar.SECOND) == configStartTime.get(Calendar.SECOND)));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestUpdateWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"3b471c04734fcf9d9a9d43ee66278637339bc503","commitMessage":"@@@Stabilize TestUpdateWorkflow (#1135)\n\nIn this commit.  Thread.sleep usages have been removed\nfrom TestUpdateWorkflow and replaced with TestHelper.verify.","date":"2020-07-15 08:22:54","modifiedFileCount":"1","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"}]
