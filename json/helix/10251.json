[{"authorTime":"2017-05-24 03:27:23","codes":[{"authorDate":"2017-05-24 03:27:23","commitOrder":3,"curCode":"  public void testCreateOrMerge() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value2\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(Arrays.asList(\"value1\", \"value2\"), record.getListField(\"list\"));\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k1\", \"v1\");\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2017-05-24 03:27:23","endLine":156,"groupId":"6077","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateOrMerge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/d30a67bacbec3f4a4b111fa59c40bc9378a7ac.src","preCode":"  public void testCreateOrMerge() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value2\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(Arrays.asList(\"value1\", \"value2\"), record.getListField(\"list\"));\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k1\", \"v1\");\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2017-05-24 03:27:23","commitOrder":3,"curCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2017-05-24 03:27:23","endLine":208,"groupId":"6077","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateOrUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/d30a67bacbec3f4a4b111fa59c40bc9378a7ac.src","preCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"MB"}],"commitId":"7c92bf543571daac555f5d8b933805dddced7ca5","commitMessage":"@@@Add support of setting/updating Cluster/Resource/Instance configs in ConfigAccessor.\n","date":"2017-05-24 03:27:23","modifiedFileCount":"7","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  public void testCreateOrMerge() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value2\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(Arrays.asList(\"value1\", \"value2\"), record.getListField(\"list\"));\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k1\", \"v1\");\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2018-07-14 06:55:35","endLine":150,"groupId":"6077","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateOrMerge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/29/86748058c13c0289f464893b1c9ffa9a6bf457.src","preCode":"  public void testCreateOrMerge() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value2\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(Arrays.asList(\"value1\", \"value2\"), record.getListField(\"list\"));\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k1\", \"v1\");\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2018-07-14 06:55:35","endLine":202,"groupId":"6077","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateOrUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/29/86748058c13c0289f464893b1c9ffa9a6bf457.src","preCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_zkClient, path, record, true, true);\n    record = _zkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-18 08:43:40","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void testCreateOrMerge() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value2\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(Arrays.asList(\"value1\", \"value2\"), record.getListField(\"list\"));\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k1\", \"v1\");\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2018-07-14 06:55:35","endLine":150,"groupId":"10251","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateOrMerge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/29/86748058c13c0289f464893b1c9ffa9a6bf457.src","preCode":"  public void testCreateOrMerge() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value2\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(Arrays.asList(\"value1\", \"value2\"), record.getListField(\"list\"));\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k1\", \"v1\");\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"},{"authorDate":"2019-05-18 08:43:40","commitOrder":5,"curCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id9\");\n    ZNRecord record = new ZNRecord(\"id9\");\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id9\", record.getId());\n\n    record = new ZNRecord(\"id9\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id9\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id9\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","date":"2019-05-25 09:19:21","endLine":202,"groupId":"10251","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateOrUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5c/caaf36794fa3598ffb3f897a9dd28e646875ab.src","preCode":"  public void testCreateOrUpdate() {\n    String path = PropertyPathBuilder.instanceConfig(clusterName, \"id7\");\n    ZNRecord record = new ZNRecord(\"id7\");\n    ZKUtil.createOrMerge(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(\"id7\", record.getId());\n\n    record = new ZNRecord(\"id7\");\n    List<String> list = Arrays.asList(\"value1\", \"value2\");\n    record.setListField(\"list\", list);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list, record.getListField(\"list\"));\n\n    record = new ZNRecord(\"id7\");\n    List<String> list2 = Arrays.asList(\"value3\", \"value4\");\n    record.setListField(\"list\", list2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(list2, record.getListField(\"list\"));\n\n\n    Map<String, String> map = new HashMap<String, String>() {{put(\"k1\", \"v1\");}};\n    record.setMapField(\"map\", map);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(map, record.getMapField(\"map\"));\n\n    record = new ZNRecord(\"id7\");\n    Map<String, String> map2 = new HashMap<String, String>() {{put(\"k2\", \"v2\");}};\n    record.setMapField(\"map\", map2);\n    ZKUtil.createOrUpdate(_gZkClient, path, record, true, true);\n    record = _gZkClient.readData(path);\n    AssertJUnit.assertEquals(new HashMap<String, String>() {{\n      put(\"k2\", \"v2\");\n    }}, record.getMapField(\"map\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"df80d269764e13703ea1297c7b98d82ae127fc0f","commitMessage":"@@@Fix unstable test for TestZKUtil\n\nSince tests run parallel.  it caused race condition for data messed up in ZK. Fix it with different id.\n\nRB=1671516\n\nRB=1671516\nG=helix-reviewers\nA=hulee\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"1","status":"M","submitter":"Junkai Xue"}]
