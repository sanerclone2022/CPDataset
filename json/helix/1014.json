[{"authorTime":"2014-02-19 05:41:16","codes":[{"authorDate":"2016-07-22 02:29:02","commitOrder":3,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2017-02-06 10:57:09","endLine":93,"groupId":"7088","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/251c8ba5d3d28a80a47cbbc67b1938df7eba07.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"MB"},{"authorDate":"2014-02-19 05:41:16","commitOrder":3,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    ClusterSetup setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = setupTool.getClusterManagementTool();\n    setupTool.addCluster(_clusterName, true);\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2014-02-20 09:38:04","endLine":89,"groupId":"7023","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/154d37d7d70a928c6ef95557b58b8945c08b5e.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    ClusterSetup setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = setupTool.getClusterManagementTool();\n    setupTool.addCluster(_clusterName, true);\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterStateVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"NB"}],"commitId":"981d0e295e01cd0839c8d5d0e54350f794ad52f7","commitMessage":"@@@Add StrictMatchExternalViewVerifier that verifies whether the ExternalViews of given resources (or all resources in the cluster) match exactly as its ideal mapping (in idealstate).\n","date":"2017-02-06 10:57:09","modifiedFileCount":"2","status":"M","submitter":"Lei Xia"},{"authorTime":"2014-02-19 05:41:16","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":4,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString());\n\n    \r\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(_clusterName);\n    clusterConfig.setPersistBestPossibleAssignment(true);\n    configAccessor.setClusterConfig(_clusterName, clusterConfig);\n\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2017-11-08 08:48:26","endLine":108,"groupId":"5282","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dc/82f90faebce82d5744c6f77c0a969c89526511.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2014-02-19 05:41:16","commitOrder":4,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    ClusterSetup setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = setupTool.getClusterManagementTool();\n    setupTool.addCluster(_clusterName, true);\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2014-02-20 09:38:04","endLine":89,"groupId":"7023","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/154d37d7d70a928c6ef95557b58b8945c08b5e.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    ClusterSetup setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = setupTool.getClusterManagementTool();\n    setupTool.addCluster(_clusterName, true);\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterStateVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2014-02-19 05:41:16","codes":[{"authorDate":"2020-09-24 12:18:37","commitOrder":5,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n\n    \r\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(_clusterName);\n    clusterConfig.setPersistBestPossibleAssignment(true);\n    configAccessor.setClusterConfig(_clusterName, clusterConfig);\n\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2020-09-24 12:18:37","endLine":112,"groupId":"723","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/59/c695aa0b0d04ce0d322072e13a71bc988947b4.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString());\n\n    \r\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(_clusterName);\n    clusterConfig.setPersistBestPossibleAssignment(true);\n    configAccessor.setClusterConfig(_clusterName, clusterConfig);\n\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2014-02-19 05:41:16","commitOrder":5,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    ClusterSetup setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = setupTool.getClusterManagementTool();\n    setupTool.addCluster(_clusterName, true);\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2014-02-20 09:38:04","endLine":89,"groupId":"7023","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/154d37d7d70a928c6ef95557b58b8945c08b5e.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    ClusterSetup setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = setupTool.getClusterManagementTool();\n    setupTool.addCluster(_clusterName, true);\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterStateVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"be91eff5c3543ebc427e64ffcf8fc5f5dc25d0f7","commitMessage":"@@@Mark AutoRebalancer as deprecated and convert the default test logic to not use AutoRebalancer (#1401)\n\n","date":"2020-09-24 12:18:37","modifiedFileCount":"6","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-11-18 08:52:35","codes":[{"authorDate":"2020-09-24 12:18:37","commitOrder":6,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n\n    \r\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(_clusterName);\n    clusterConfig.setPersistBestPossibleAssignment(true);\n    configAccessor.setClusterConfig(_clusterName, clusterConfig);\n\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2020-09-24 12:18:37","endLine":112,"groupId":"723","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/59/c695aa0b0d04ce0d322072e13a71bc988947b4.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n\n    \r\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(_clusterName);\n    clusterConfig.setPersistBestPossibleAssignment(true);\n    configAccessor.setClusterConfig(_clusterName, clusterConfig);\n\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"},{"authorDate":"2020-11-18 08:52:35","commitOrder":6,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _admin = _gSetupTool.getClusterManagementTool();\n    _gSetupTool.addCluster(_clusterName, true);\n    _gSetupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    _gSetupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _gSetupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2020-11-18 08:52:35","endLine":87,"groupId":"7023","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4c/75c97e681df0d6bb369781a1bb6afd2ae0fa3a.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    ClusterSetup setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = setupTool.getClusterManagementTool();\n    setupTool.addCluster(_clusterName, true);\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterStateVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"540c53bd9913471baaaf8fade8489a5fffb1dc37","commitMessage":"@@@Fix several tests with resource leakage (#1534)\n\nFix several tests with resource leakage.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-11-18 08:52:35","modifiedFileCount":"7","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-11-24 04:38:13","codes":[{"authorDate":"2020-09-24 12:18:37","commitOrder":7,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n\n    \r\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(_clusterName);\n    clusterConfig.setPersistBestPossibleAssignment(true);\n    configAccessor.setClusterConfig(_clusterName, clusterConfig);\n\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2020-09-24 12:18:37","endLine":112,"groupId":"1014","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/59/c695aa0b0d04ce0d322072e13a71bc988947b4.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 10;\n    final int NUM_REPLICAS = 3;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _setupTool = new ClusterSetup(ZK_ADDR);\n    _admin = _setupTool.getClusterManagementTool();\n    _setupTool.addCluster(_clusterName, true);\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.SEMI_AUTO.toString());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.SEMI_AUTO.toString());\n\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[2], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n    _setupTool.addResourceToCluster(_clusterName, RESOURCES[3], NUM_PARTITIONS,\n        BuiltInStateModelDefinitions.OnlineOffline.name(), RebalanceMode.FULL_AUTO.toString(),\n        CrushEdRebalanceStrategy.class.getName());\n\n    \r\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ClusterConfig clusterConfig = configAccessor.getClusterConfig(_clusterName);\n    clusterConfig.setPersistBestPossibleAssignment(true);\n    configAccessor.setClusterConfig(_clusterName, clusterConfig);\n\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _setupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      _setupTool.rebalanceResource(_clusterName, RESOURCES[i], NUM_REPLICAS);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"},{"authorDate":"2020-11-24 04:38:13","commitOrder":7,"curCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _clusterName = className + \"_\" + methodName;\n    _admin = _gSetupTool.getClusterManagementTool();\n    _gSetupTool.addCluster(_clusterName, true);\n    _gSetupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    _gSetupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _gSetupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","date":"2020-11-24 04:38:13","endLine":88,"groupId":"1014","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f6/4b8bb2a45092dfebf1db7aaddd2bc46fbbe97c.src","preCode":"  public void beforeMethod() throws InterruptedException {\n    final int NUM_PARTITIONS = 1;\n    final int NUM_REPLICAS = 1;\n\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    _admin = _gSetupTool.getClusterManagementTool();\n    _gSetupTool.addCluster(_clusterName, true);\n    _gSetupTool.addResourceToCluster(_clusterName, RESOURCES[0], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n    _gSetupTool.addResourceToCluster(_clusterName, RESOURCES[1], NUM_PARTITIONS, \"OnlineOffline\",\n        RebalanceMode.SEMI_AUTO.toString());\n\n    \r\n    _participants = new MockParticipantManager[RESOURCES.length];\n    for (int i = 0; i < _participants.length; i++) {\n      String host = \"localhost\";\n      int port = 12918 + i;\n      String id = host + '_' + port;\n      _gSetupTool.addInstanceToCluster(_clusterName, id);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, _clusterName, id);\n      _participants[i].syncStart();\n    }\n\n    \r\n    for (int i = 0; i < RESOURCES.length; i++) {\n      IdealState idealState = _admin.getResourceIdealState(_clusterName, RESOURCES[i]);\n      idealState.setReplicas(Integer.toString(NUM_REPLICAS));\n      idealState.getRecord().setListField(RESOURCES[i] + \"_0\",\n          Arrays.asList(_participants[i].getInstanceName()));\n      _admin.setResourceIdealState(_clusterName, RESOURCES[i], idealState);\n    }\n\n    \r\n    _controller = new ClusterControllerManager(ZK_ADDR, _clusterName, \"controller_0\");\n    _controller.syncStart();\n    Thread.sleep(1000);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestClusterStateVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"5509306c3b1e489c99e5931302a953ed6d3e20f0","commitMessage":"@@@misc fix: (#1541)\n\n1/ further leakage fix of TestClusterStateVerifier.  TestRoutingTableProviderPeriodicRefresh.java\n2/ timeout setting general 900s as github run is slow and also TestEnableCompression 30mins to let it finish\n3/ wait some time before best possible verifier start for TestJobTimeoutTaskNotStarted\n4/ clean up zk resource after test finish for TestDistControllerElection\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-11-24 04:38:13","modifiedFileCount":"6","status":"M","submitter":"kaisun2000"}]
