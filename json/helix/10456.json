[{"authorTime":"2017-11-09 06:56:09","codes":[{"authorDate":"2018-04-20 04:42:37","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verify());\n\n  }\n","date":"2018-04-20 05:07:52","endLine":119,"groupId":"3851","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/da/c7617fed47528e2b04ff072d5ea5a0d09365dc.src","preCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verify());\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderPeriodicRefresh.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2017-11-09 06:56:09","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _routingTableProvider = new RoutingTableProvider();\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProvider2 = new RoutingTableProvider(_spectator);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","date":"2018-01-25 10:31:51","endLine":90,"groupId":"5755","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/731e5b7fa15a4394c3fdb730251ddcbd4e7b02.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _routingTableProvider = new RoutingTableProvider();\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProvider2 = new RoutingTableProvider(_spectator);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/Spectator/TestRoutingTableProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"NB"}],"commitId":"0e4163f18c1274c0f77320698e9dfbf42314810d","commitMessage":"@@@[HELIX-698] Add periodic refresh to RoutingTableProvider\n\nThere have been incidents where RoutingTableProvider was not getting a proper refresh potentially due to the lag in ZKClient CallbackHandler or connectivity issues. This addition of periodic refresh avoids cases where RoutingTableProvider is severely delayed by initiating periodic refreshes.\n","date":"2018-04-20 05:07:52","modifiedFileCount":"3","status":"M","submitter":"Hunter Lee"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n  }\n","date":"2018-07-14 06:55:35","endLine":119,"groupId":"3851","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/3a4d6606d651606df5164e8ec0da083f55f0c5.src","preCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verify());\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderPeriodicRefresh.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _routingTableProvider = new RoutingTableProvider();\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProvider2 = new RoutingTableProvider(_spectator);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","date":"2018-07-14 06:55:35","endLine":116,"groupId":"5755","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/23/1f68d75bbc4526fa823fece3a6c8e2f46394f9.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _routingTableProvider = new RoutingTableProvider();\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProvider2 = new RoutingTableProvider(_spectator);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verify());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-30 06:07:53","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n  }\n","date":"2018-07-14 06:55:35","endLine":119,"groupId":"3851","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/3a4d6606d651606df5164e8ec0da083f55f0c5.src","preCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderPeriodicRefresh.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2018-06-30 06:07:53","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _routingTableProvider_default = new RoutingTableProvider();\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _spectator.addExternalViewChangeListener(_routingTableProvider_default);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider_default);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider_default);\n\n    _routingTableProvider_ev = new RoutingTableProvider(_spectator);\n    _routingTableProvider_cs = new RoutingTableProvider(_spectator, PropertyType.CURRENTSTATES);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","date":"2018-07-18 02:52:25","endLine":119,"groupId":"5755","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/01/fa6df38e4470b75caf8f4e324595326769366e.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _routingTableProvider = new RoutingTableProvider();\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProvider2 = new RoutingTableProvider(_spectator);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"acea2f16bce6c439fdc8d1dfb8ad37650679f822","commitMessage":"@@@Refine RoutingTable refresh() logic.\n\nSimplify the construtors.\nRefine Log string to a clearer statement.\nFixing a potential bug that empty instanceConfig is recorded in the RoutingTable.\n","date":"2018-07-18 02:52:25","modifiedFileCount":"2","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-09-26 02:20:31","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n  }\n","date":"2018-07-14 06:55:35","endLine":119,"groupId":"3851","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/22/3a4d6606d651606df5164e8ec0da083f55f0c5.src","preCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderPeriodicRefresh.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2020-09-26 02:20:31","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _routingTableProvider_default = new RoutingTableProvider(_spectator);\n    _spectator.addExternalViewChangeListener(_routingTableProvider_default);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider_default);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider_default);\n\n    _routingTableProvider_ev = new RoutingTableProvider(_spectator);\n    _routingTableProvider_cs = new RoutingTableProvider(_spectator, PropertyType.CURRENTSTATES);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","date":"2020-09-26 02:20:31","endLine":168,"groupId":"3851","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6f/22b196ad858505d2e7d38fed5fe037e0d5f1ac.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _routingTableProvider_default = new RoutingTableProvider();\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _spectator.addExternalViewChangeListener(_routingTableProvider_default);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider_default);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider_default);\n\n    _routingTableProvider_ev = new RoutingTableProvider(_spectator);\n    _routingTableProvider_cs = new RoutingTableProvider(_spectator, PropertyType.CURRENTSTATES);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"ea6bca2f26093af0a8ec4d94f25692040537d7d7","commitMessage":"@@@Add initial callback when adding routing table listener (#1154)\n\nAdd initial callback when adding routing table listener.","date":"2020-09-26 02:20:31","modifiedFileCount":"2","status":"M","submitter":"Meng Zhang"},{"authorTime":"2020-10-09 07:37:08","codes":[{"authorDate":"2020-10-09 07:37:08","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n  }\n","date":"2020-10-09 07:37:08","endLine":145,"groupId":"3851","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d1/6165c2615f27c0e69bfc8356aee1a3e5ee367c.src","preCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderPeriodicRefresh.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-10-09 07:37:08","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _routingTableProvider_default = new RoutingTableProvider(_spectator);\n    _spectator.addExternalViewChangeListener(_routingTableProvider_default);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider_default);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider_default);\n\n    _routingTableProvider_ev = new RoutingTableProvider(_spectator);\n    _routingTableProvider_cs = new RoutingTableProvider(_spectator, PropertyType.CURRENTSTATES);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","date":"2020-10-09 07:37:08","endLine":170,"groupId":"3851","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/93/c73fbc5493b6ee27a447d315e8d1a0fbf8a91d.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _routingTableProvider_default = new RoutingTableProvider(_spectator);\n    _spectator.addExternalViewChangeListener(_routingTableProvider_default);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider_default);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider_default);\n\n    _routingTableProvider_ev = new RoutingTableProvider(_spectator);\n    _routingTableProvider_cs = new RoutingTableProvider(_spectator, PropertyType.CURRENTSTATES);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"12bfbae5024d2b24e453921002e11cf71f98d047","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time (#1450)\n\nHelixClusterVerifier verify() and related method may return\npre-maturely. The reason is that the verify the converging stable\ncondition too early before controller has a chance to make\nchange. Basically the previous stable state is mistaken as the\nexpected next stable state. Part two.","date":"2020-10-09 07:37:08","modifiedFileCount":"17","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-10-09 07:37:08","codes":[{"authorDate":"2020-10-30 03:51:43","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator_2\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator_3\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true,\n            REFRESH_PERIOD_MS);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false,\n            REFRESH_PERIOD_MS);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME).build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","date":"2020-10-30 03:51:43","endLine":145,"groupId":"10456","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/ddedd2d6dbea133283d1ede114cf002aac8720.src","preCode":"  public void beforeClass() throws Exception {\n    System.out\n        .println(\"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances, STATE_MODEL,\n        PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n\n    _spectator_2 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_2\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_2.connect();\n\n    _spectator_3 = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"spectator_3\",\n        InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator_3.connect();\n\n    _routingTableProvider =\n        new MockRoutingTableProvider(_spectator, PropertyType.EXTERNALVIEW, true, 1000L);\n    _spectator.addExternalViewChangeListener(_routingTableProvider);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider);\n\n    _routingTableProviderNoPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_2, PropertyType.EXTERNALVIEW, false, 1000L);\n    _spectator_2.addExternalViewChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addLiveInstanceChangeListener(_routingTableProviderNoPeriodicRefresh);\n    _spectator_2.addInstanceConfigChangeListener(_routingTableProviderNoPeriodicRefresh);\n\n    _routingTableProviderLongPeriodicRefresh =\n        new MockRoutingTableProvider(_spectator_3, PropertyType.EXTERNALVIEW, true, 3000000L);\n    _spectator_3.addExternalViewChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addLiveInstanceChangeListener(_routingTableProviderLongPeriodicRefresh);\n    _spectator_3.addInstanceConfigChangeListener(_routingTableProviderLongPeriodicRefresh);\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProviderPeriodicRefresh.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-10-09 07:37:08","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _routingTableProvider_default = new RoutingTableProvider(_spectator);\n    _spectator.addExternalViewChangeListener(_routingTableProvider_default);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider_default);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider_default);\n\n    _routingTableProvider_ev = new RoutingTableProvider(_spectator);\n    _routingTableProvider_cs = new RoutingTableProvider(_spectator, PropertyType.CURRENTSTATES);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","date":"2020-10-09 07:37:08","endLine":170,"groupId":"10456","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/93/c73fbc5493b6ee27a447d315e8d1a0fbf8a91d.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\n        \"START \" + getShortClassName() + \" at \" + new Date(System.currentTimeMillis()));\n\n    \r\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      String instance = PARTICIPANT_PREFIX + \"_\" + (PARTICIPANT_START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, instance);\n      _instances.add(instance);\n    }\n\n    \r\n    for (int i = 0; i < PARTICIPANT_NUMBER; i++) {\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, _instances.get(i));\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    createDBInSemiAuto(_gSetupTool, CLUSTER_NAME, TEST_DB, _instances,\n        STATE_MODEL, PARTITION_NUMBER, REPLICA_NUMBER);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    \r\n    _spectator = HelixManagerFactory\n        .getZKHelixManager(CLUSTER_NAME, \"spectator\", InstanceType.SPECTATOR, ZK_ADDR);\n    _spectator.connect();\n    _routingTableProvider_default = new RoutingTableProvider(_spectator);\n    _spectator.addExternalViewChangeListener(_routingTableProvider_default);\n    _spectator.addLiveInstanceChangeListener(_routingTableProvider_default);\n    _spectator.addInstanceConfigChangeListener(_routingTableProvider_default);\n\n    _routingTableProvider_ev = new RoutingTableProvider(_spectator);\n    _routingTableProvider_cs = new RoutingTableProvider(_spectator, PropertyType.CURRENTSTATES);\n\n    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"}],"commitId":"a6057b1d8f8af36d099f908b0be35092e5bc48a1","commitMessage":"@@@Fix TestRoutingTableProviderPeriodicRefresh. (#1497)\n\nThe test was unstable and do not clean up the environment one the failure. This PR tolerates more test results to be accepted as a good result.\nAlso.  enhance the cleanup logic to prevent leakages.","date":"2020-10-30 03:51:43","modifiedFileCount":"1","status":"M","submitter":"Jiajun Wang"}]
