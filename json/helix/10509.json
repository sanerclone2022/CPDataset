[{"authorTime":"2018-04-12 01:28:22","codes":[{"authorDate":"2018-04-12 01:28:22","commitOrder":1,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-20 05:18:16","endLine":115,"groupId":"786","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/51827c0c056049085a484ca1919c71914f3e9f.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2018-04-12 01:28:22","commitOrder":1,"curCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    _driver.deleteJob(jobQueueName, \"job1\", true);\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin\n        .getResourceIdealState(CLUSTER_NAME, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2018-04-20 05:18:16","endLine":164,"groupId":"5663","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteHangingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a1/51827c0c056049085a484ca1919c71914f3e9f.src","preCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    _driver.deleteJob(jobQueueName, \"job1\", true);\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin\n        .getResourceIdealState(CLUSTER_NAME, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"}],"commitId":"b8355b9a6b1071c149305f147bdb524d8a67f2d2","commitMessage":"@@@Add forcefully workflow and job delete API into HelixAdmin and Helix Rest.\n","date":"2018-04-20 05:18:16","modifiedFileCount":"5","status":"B","submitter":"Lei Xia"},{"authorTime":"2018-04-21 07:11:27","codes":[{"authorDate":"2018-04-21 07:11:27","commitOrder":2,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-25 03:45:43","endLine":113,"groupId":"786","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/7ba950a0b20a6ef3f09984ea86fbdabb2a6b49.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-04-21 07:11:27","commitOrder":2,"curCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    _driver.deleteJob(jobQueueName, \"job1\", true);\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin\n        .getResourceIdealState(CLUSTER_NAME, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2018-04-25 03:45:43","endLine":162,"groupId":"5663","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteHangingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/7ba950a0b20a6ef3f09984ea86fbdabb2a6b49.src","preCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    _driver.deleteJob(jobQueueName, \"job1\", true);\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin\n        .getResourceIdealState(CLUSTER_NAME, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"d2fb22d1f3a3db602b27cba7ed8d814cb931622e","commitMessage":"@@@Fix a few of unstable integration tests.\n","date":"2018-04-25 03:45:43","modifiedFileCount":"18","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-07-14 05:45:41","codes":[{"authorDate":"2018-04-21 07:11:27","commitOrder":3,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-25 03:45:43","endLine":113,"groupId":"786","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/7ba950a0b20a6ef3f09984ea86fbdabb2a6b49.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2018-07-14 05:45:41","commitOrder":3,"curCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    \r\n    if (admin.getResourceIdealState(CLUSTER_NAME, jobQueueName) != null\n        || _driver.getWorkflowConfig(jobQueueName) != null\n        || _driver.getWorkflowContext(jobQueueName) != null) {\n      accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n      accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n      accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n    }\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    _driver.deleteJob(jobQueueName, \"job1\", true);\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin\n        .getResourceIdealState(CLUSTER_NAME, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2018-07-14 08:38:58","endLine":171,"groupId":"5663","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteHangingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/82/8bad3924eed9357ab3c5ff6dcd18465f42f219.src","preCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    _driver.deleteJob(jobQueueName, \"job1\", true);\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin\n        .getResourceIdealState(CLUSTER_NAME, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"4db61b56e473b64ec9956f694dd2ac6a8d328ed4","commitMessage":"@@@[HELIX-730] Add ThreadCountBasedAssignmentCalculator and integrate with Workflow/JobRebalancer and fix rebalancing logic\n\nFor quota-based scheduling of tasks.  we have added the TaskAssigner interface that takes into account AssignableInstances by way of AssignableInstanceManager. In order to use this in the currently-existing pipeline prior to Task Framework 2.0.  GenericTaskAssignmentCalculator was replaced with ThreadCountBasedAssignmentCalculator.  which is a wrapper around TaskAssigner. Necessary adjustments were made in Workflow/JobRebalancer for this replacement. Also the rebalance logic in Workflow/JobRebalancer was reviewed and fixed. Additionally.  TestQuotaBasedScheduling is added to test quota-based task scheduling. Note that quotas will apply to both generic and targeted jobs.\n\nA few bugs were uncovered during this process such as the faulty retry logic that never really got tasks to restart. For more details.  see the changelist below:\n\nChangelist:\n    1. Add ThreadCountBasedAssignmentCalculator.  a wrapper around ThreadCountBasedTaskAssigner\n    2. Make logic changes in JobRebalancer to enable the use of ThreadCountBasedAssignmentCalculator\n    3. Fix the failing test by using a thread-safe map and rename TestGenericTaskAssignmentCalculator to TestTaskAssignmentCalculator to better reflect what its tests are doing\n    4. Add retry logic that was previously absent for INIT and DROPPED tasks in JobRebalancer\n    5. Add TestQuotaBasedScheduling to test that jobs and tasks were being assigned and scheduled per quota config set in ClusterConfig\n    6. Add more log messages to aid with task-scheduling debugging in AssignableInstance\n    7. In AbstractTaskDispatcher.  for tasks that are STOPPED.  TIMED_OUT.  TASK_ERROR.  the retry logic was newly implemented so that they get re-started correctly\n    8. In AbstractTaskDispatcher.  when enforcing overlapAssign for jobs with isAllowOverlapAssignment().  a fix was implemented so that only jobs whose state is IN_PROGRESS are considered\n    9. In AbstractTaskDispatcher.  isWorkflowFinished() method was modified so that non-active jobs will have their tasks' resource freed from AssignableInstances to prevent resource leak\n   10. In markJobFailed() and markJobCompleted().  non-active jobs will have their tasks' resource freed from AssignableInstances to prevent resource leak\n   11. Fix the logic so that quotas do not apply to targeted jobs\n   12. Fix TestTaskRebalancer (assumes Consistent Hashing.  which is no longer used)\n   13. Fix TestIndependentTaskRebalancer (assumes Consistent Hashing.  no longer used)\n   14. Assignment logic was improved so that incomplete tasks whose assigned participants are no longer live will be re-assigned accordingly\n   15. Fix TestTaskRebalanceFailover (tasks on non-live instances will be re-assigned promptly)\n   16. Fix TestRebalanceRunningTask (targeted jobs will get tasks reassigned upon liveInstance and currentState change)\n   17. Fix a bug in FixedAssignmentCalculator and assignment logic for targeted jobs such that a task index will no longer be assigned multiple times\n   18. Fix TestJobFailureTaskNotStarted (tasks were not being assigned at all due to having reached maximum capacity for quota)\n   19. Add targetedTaskConfigMap field in JobConfig to cache TaskConfig objects for targeted tasks to reduce object creation and GC overload\n   20. Fix JobConfig so that it doesn't write quotaType to ZooKeeper when quotaType is null or not set\n   21. Fix deleteWorkflow() in TaskUtil so that the earliest delete failure will render the entire method as failed (and return prematurely to prevent breaking other ZNodes from incomplete deletion)\n   22. Fix TestDeleteWorkflow by adding another removeProperty() clause to lower failure rate\n","date":"2018-07-14 08:38:58","modifiedFileCount":"36","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2018-04-21 07:11:27","commitOrder":4,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-25 03:45:43","endLine":113,"groupId":"786","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/7ba950a0b20a6ef3f09984ea86fbdabb2a6b49.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2019-05-04 08:52:17","commitOrder":4,"curCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    \r\n    if (admin.getResourceIdealState(CLUSTER_NAME, jobQueueName) != null\n        || _driver.getWorkflowConfig(jobQueueName) != null\n        || _driver.getWorkflowContext(jobQueueName) != null) {\n      accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n      accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n      accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n    }\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    \r\n    for (int i = 0; i < 3; i++) {\n      try {\n        _driver.deleteJob(jobQueueName, \"job1\", true);\n      } catch (Exception e) {\n        \r\n      }\n      Thread.sleep(FORCE_DELETE_BACKOFF);\n    }\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2019-05-25 09:19:21","endLine":201,"groupId":"5663","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteHangingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7e/6aed16f90d90d26f20c811b07e1d885dcfabe9.src","preCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    \r\n    if (admin.getResourceIdealState(CLUSTER_NAME, jobQueueName) != null\n        || _driver.getWorkflowConfig(jobQueueName) != null\n        || _driver.getWorkflowContext(jobQueueName) != null) {\n      accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n      accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n      accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n    }\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    _driver.deleteJob(jobQueueName, \"job1\", true);\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin\n        .getResourceIdealState(CLUSTER_NAME, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-17 08:40:34","codes":[{"authorDate":"2018-04-21 07:11:27","commitOrder":5,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","date":"2018-04-25 03:45:43","endLine":113,"groupId":"786","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/7ba950a0b20a6ef3f09984ea86fbdabb2a6b49.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1)\n        .setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2019-05-17 08:40:34","commitOrder":5,"curCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    if (admin.getResourceIdealState(CLUSTER_NAME, jobQueueName) != null\n        || _driver.getWorkflowConfig(jobQueueName) != null\n        || _driver.getWorkflowContext(jobQueueName) != null) {\n      accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n      accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n      accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n    }\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    \r\n    for (int i = 0; i < 3; i++) {\n      try {\n        _driver.deleteJob(jobQueueName, \"job1\", true);\n      } catch (Exception e) {\n        \r\n      }\n      Thread.sleep(FORCE_DELETE_BACKOFF);\n    }\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2019-05-25 09:19:21","endLine":207,"groupId":"3729","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteHangingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/13/248a8e2d29f86654eefb6c06de36061e890d37.src","preCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    \r\n    if (admin.getResourceIdealState(CLUSTER_NAME, jobQueueName) != null\n        || _driver.getWorkflowConfig(jobQueueName) != null\n        || _driver.getWorkflowContext(jobQueueName) != null) {\n      accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n      accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n      accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n    }\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    \r\n    for (int i = 0; i < 3; i++) {\n      try {\n        _driver.deleteJob(jobQueueName, \"job1\", true);\n      } catch (Exception e) {\n        \r\n      }\n      Thread.sleep(FORCE_DELETE_BACKOFF);\n    }\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"f7b1cf0434c685b71052ec7c09864e9e8120eeb7","commitMessage":"@@@TEST: Further fix Helix test suite\n\nThis diff does the following:\n1. Replace Thread.sleep statements with TestHelper.verify (polling with conditions)\n2. Increases GC pause between tests to 4 seconds\n3. Improve ZKHelixClusterVerifier's verifyByPolling method by adding invokeRebalance() method\n\nRB=1669831\n\nRB=1669831\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"19","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-09-15 05:40:00","codes":[{"authorDate":"2020-09-15 05:40:00","commitOrder":6,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n    Thread.sleep(1000);\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\n          \"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2020-09-15 05:40:00","endLine":127,"groupId":"786","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8d/11b12c2ca9b114e8009a0724d5eac27618b262.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\n          \"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-09-15 05:40:00","commitOrder":6,"curCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    if (_driver.getWorkflowConfig(jobQueueName) != null\n        || _driver.getWorkflowContext(jobQueueName) != null) {\n      accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n      accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n    }\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    \r\n    for (int i = 0; i < 3; i++) {\n      try {\n        _driver.deleteJob(jobQueueName, \"job1\", true);\n      } catch (Exception e) {\n        \r\n      }\n      Thread.sleep(FORCE_DELETE_BACKOFF);\n    }\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2020-09-15 05:40:00","endLine":191,"groupId":"4558","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteHangingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8d/11b12c2ca9b114e8009a0724d5eac27618b262.src","preCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNotNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    if (admin.getResourceIdealState(CLUSTER_NAME, jobQueueName) != null\n        || _driver.getWorkflowConfig(jobQueueName) != null\n        || _driver.getWorkflowContext(jobQueueName) != null) {\n      accessor.removeProperty(keyBuild.idealStates(jobQueueName));\n      accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n      accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n    }\n\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME, jobQueueName));\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    \r\n    for (int i = 0; i < 3; i++) {\n      try {\n        _driver.deleteJob(jobQueueName, \"job1\", true);\n      } catch (Exception e) {\n        \r\n      }\n      Thread.sleep(FORCE_DELETE_BACKOFF);\n    }\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(admin.getResourceIdealState(CLUSTER_NAME,\n        TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"027481f2906cc9d2a5ee104f9e844d0ec8d06e3d","commitMessage":"@@@Task Framework IdealState Removal (#1326)\n\nThis commit removes IdealState usage from Task Framework. \nThe TaskDriver no longer creates IdealState when workflows/jobs are created. \nThe controller-side no longer reads/create IdealState to create resources for Task Framework.","date":"2020-09-15 05:40:00","modifiedFileCount":"16","status":"M","submitter":"Neal Sun"},{"authorTime":"2020-10-09 07:37:08","codes":[{"authorDate":"2020-09-15 05:40:00","commitOrder":7,"curCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n    Thread.sleep(1000);\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\n          \"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2020-09-15 05:40:00","endLine":127,"groupId":"10509","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWorkflowForcefully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8d/11b12c2ca9b114e8009a0724d5eac27618b262.src","preCode":"  public void testDeleteWorkflowForcefully() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n\n    \r\n    admin.enableCluster(CLUSTER_NAME, false);\n    Thread.sleep(1000);\n    \r\n    try {\n      _driver.deleteAndWaitForCompletion(jobQueueName, DELETE_DELAY);\n      Assert.fail(\n          \"Delete must time out and throw a HelixException with the Controller paused, but did not!\");\n    } catch (HelixException e) {\n      \r\n    }\n    \r\n    _driver.delete(jobQueueName, true);\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2020-10-09 07:37:08","commitOrder":7,"curCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    BestPossibleExternalViewVerifier verifier =\n      new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME)\n        .setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    if (_driver.getWorkflowConfig(jobQueueName) != null\n        || _driver.getWorkflowContext(jobQueueName) != null) {\n      accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n      accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n    }\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    \r\n    for (int i = 0; i < 3; i++) {\n      try {\n        _driver.deleteJob(jobQueueName, \"job1\", true);\n      } catch (Exception e) {\n        \r\n      }\n      Thread.sleep(FORCE_DELETE_BACKOFF);\n    }\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","date":"2020-10-09 07:37:08","endLine":193,"groupId":"10509","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testDeleteHangingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/977c7c19df180a331a6d3ca02df76642d6446f.src","preCode":"  public void testDeleteHangingJobs() throws InterruptedException {\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder = JobConfig.Builder.fromMap(WorkflowGenerator.DEFAULT_JOB_CONFIG)\n        .setMaxAttemptsPerTask(1).setWorkflow(jobQueueName)\n        .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"1000000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"job1\", jobBuilder);\n    _driver.start(jobQueue.build());\n    _driver.pollForJobState(jobQueueName, TaskUtil.getNamespacedJobName(jobQueueName, \"job1\"),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertNotNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNotNull(_driver.getWorkflowContext(jobQueueName));\n    Assert.assertNotNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert\n        .assertNotNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n\n    \r\n    HelixDataAccessor accessor = _manager.getHelixDataAccessor();\n    PropertyKey.Builder keyBuild = accessor.keyBuilder();\n    accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n    accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR)\n            .setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    if (_driver.getWorkflowConfig(jobQueueName) != null\n        || _driver.getWorkflowContext(jobQueueName) != null) {\n      accessor.removeProperty(keyBuild.resourceConfig(jobQueueName));\n      accessor.removeProperty(keyBuild.workflowContext(jobQueueName));\n    }\n\n    Assert.assertNull(_driver.getWorkflowConfig(jobQueueName));\n    Assert.assertNull(_driver.getWorkflowContext(jobQueueName));\n\n    \r\n    try {\n      _driver.deleteJob(jobQueueName, \"job1\");\n      Assert.fail(\"Delete must be rejected and throw a HelixException, but did not!\");\n    } catch (IllegalArgumentException e) {\n      \r\n    }\n\n    \r\n    \r\n    for (int i = 0; i < 3; i++) {\n      try {\n        _driver.deleteJob(jobQueueName, \"job1\", true);\n      } catch (Exception e) {\n        \r\n      }\n      Thread.sleep(FORCE_DELETE_BACKOFF);\n    }\n\n    Assert.assertNull(_driver.getJobConfig(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n    Assert.assertNull(_driver.getJobContext(TaskUtil.getNamespacedJobName(jobQueueName, \"job1\")));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"12bfbae5024d2b24e453921002e11cf71f98d047","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time (#1450)\n\nHelixClusterVerifier verify() and related method may return\npre-maturely. The reason is that the verify the converging stable\ncondition too early before controller has a chance to make\nchange. Basically the previous stable state is mistaken as the\nexpected next stable state. Part two.","date":"2020-10-09 07:37:08","modifiedFileCount":"17","status":"M","submitter":"kaisun2000"}]
