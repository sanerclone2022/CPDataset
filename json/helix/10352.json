[{"authorTime":"2014-05-23 02:08:01","codes":[{"authorDate":"2014-05-23 02:08:01","commitOrder":1,"curCode":"  public void testDisableResourceInSemiAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-05-23 02:08:01","endLine":102,"groupId":"1043","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableResourceInSemiAutoMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8a/0fe5ada8fc134e1f868c8c3b647af978f5125b.src","preCode":"  public void testDisableResourceInSemiAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisableResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2014-05-23 02:08:01","commitOrder":1,"curCode":"  public void testDisableResourceInFullAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-05-23 02:08:01","endLine":158,"groupId":"1043","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableResourceInFullAutoMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8a/0fe5ada8fc134e1f868c8c3b647af978f5125b.src","preCode":"  public void testDisableResourceInFullAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisableResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"}],"commitId":"4ff7e3888561b46ca6d9c590bdf425b0d2e0716b","commitMessage":"@@@Merge branch 'helix-0.6.x' of https://git-wip-us.apache.org/repos/asf/helix into helix-0.6.x\n","date":"2014-05-23 02:08:01","modifiedFileCount":"57","status":"B","submitter":"Kanak Biscuitwala"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2014-05-23 02:08:01","commitOrder":2,"curCode":"  public void testDisableResourceInSemiAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-05-23 02:08:01","endLine":102,"groupId":"1043","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableResourceInSemiAutoMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8a/0fe5ada8fc134e1f868c8c3b647af978f5125b.src","preCode":"  public void testDisableResourceInSemiAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisableResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testDisableResourceInFullAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":159,"groupId":"1043","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableResourceInFullAutoMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c9/e564686e8e3504db71bdd0dafc744175e86a6f.src","preCode":"  public void testDisableResourceInFullAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisableResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"  public void testDisableResourceInSemiAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n    \r\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, _baseAccessor);\n    for (int i = 0; i < N; i++) {\n      List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n      if (!liveInstances.contains(participants[i].getInstanceName())) {\n        Thread.sleep(1000L);\n      }\n    }\n\n    boolean result = ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    if (_gSetupTool.getClusterManagementTool().getResourceIdealState(clusterName, \"TestDB0\")\n        .isEnabled()) {\n      Thread.sleep(1000L);\n    }\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    if (!_gSetupTool.getClusterManagementTool().getResourceIdealState(clusterName, \"TestDB0\")\n        .isEnabled()) {\n      Thread.sleep(1000L);\n    }\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":119,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableResourceInSemiAutoMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cb/b5b844e7e585d42efde0aba5bf948b96a9c106.src","preCode":"  public void testDisableResourceInSemiAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisableResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"  public void testDisableResourceInFullAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n    \r\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, _baseAccessor);\n    for (int i = 0; i < N; i++) {\n      List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n      if (!liveInstances.contains(participants[i].getInstanceName())) {\n        Thread.sleep(1000L);\n      }\n    }\n\n    \r\n    enableResource(clusterName, false);\n    if (_gSetupTool.getClusterManagementTool().getResourceIdealState(clusterName, \"TestDB0\")\n        .isEnabled()) {\n      Thread.sleep(1000L);\n    }\n    boolean result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    if (!_gSetupTool.getClusterManagementTool().getResourceIdealState(clusterName, \"TestDB0\")\n        .isEnabled()) {\n      Thread.sleep(1000L);\n    }\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":188,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableResourceInFullAutoMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cb/b5b844e7e585d42efde0aba5bf948b96a9c106.src","preCode":"  public void testDisableResourceInFullAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager participants[] = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR,\n                clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        ClusterStateVerifier.verifyByPolling(new ClusterStateVerifier.BestPossAndExtViewZkVerifier(\n            ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisableResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-17 08:40:34","codes":[{"authorDate":"2019-05-17 08:40:34","commitOrder":4,"curCode":"  public void testDisableResourceInSemiAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n    \r\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, _baseAccessor);\n    boolean result = TestHelper.verify(() -> {\n      List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n      for (int i = 0; i < N; i++) {\n        if (!participants[i].isConnected()\n            || !liveInstances.contains(participants[i].getInstanceName())) {\n          return false;\n        }\n      }\n      return true;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    result = ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    result =\n        TestHelper.verify(\n            () -> !_gSetupTool.getClusterManagementTool()\n                .getResourceIdealState(clusterName, \"TestDB0\").isEnabled(),\n            TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        TestHelper.verify(\n            () -> _gSetupTool.getClusterManagementTool()\n                .getResourceIdealState(clusterName, \"TestDB0\").isEnabled(),\n            TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    result = TestHelper.verify(() -> {\n      if (accessor.getPropertyStat(accessor.keyBuilder().controllerLeader()) != null) {\n        return false;\n      }\n      List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n      for (int i = 0; i < N; i++) {\n        if (participants[i].isConnected()\n            || liveInstances.contains(participants[i].getInstanceName())) {\n          return false;\n        }\n      }\n      return true;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":145,"groupId":"10352","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableResourceInSemiAutoMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c4/741220c83e34deddff47338249d0bfb3abcc3b.src","preCode":"  public void testDisableResourceInSemiAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n    \r\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, _baseAccessor);\n    for (int i = 0; i < N; i++) {\n      List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n      if (!liveInstances.contains(participants[i].getInstanceName())) {\n        Thread.sleep(1000L);\n      }\n    }\n\n    boolean result = ClusterStateVerifier.verifyByZkCallback(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    if (_gSetupTool.getClusterManagementTool().getResourceIdealState(clusterName, \"TestDB0\")\n        .isEnabled()) {\n      Thread.sleep(1000L);\n    }\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    if (!_gSetupTool.getClusterManagementTool().getResourceIdealState(clusterName, \"TestDB0\")\n        .isEnabled()) {\n      Thread.sleep(1000L);\n    }\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisableResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-05-17 08:40:34","commitOrder":4,"curCode":"  public void testDisableResourceInFullAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n    \r\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, _baseAccessor);\n    boolean result = TestHelper.verify(() -> {\n      List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n      for (int i = 0; i < N; i++) {\n        if (!participants[i].isConnected()\n            || !liveInstances.contains(participants[i].getInstanceName())) {\n          return false;\n        }\n      }\n      return true;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    \r\n    enableResource(clusterName, false);\n    result =\n        TestHelper.verify(\n            () -> !_gSetupTool.getClusterManagementTool()\n                .getResourceIdealState(clusterName, \"TestDB0\").isEnabled(),\n            TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    result =\n        TestHelper.verify(\n            () -> _gSetupTool.getClusterManagementTool()\n                .getResourceIdealState(clusterName, \"TestDB0\").isEnabled(),\n            TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    result = TestHelper.verify(() -> {\n      if (accessor.getPropertyStat(accessor.keyBuilder().controllerLeader()) != null) {\n        return false;\n      }\n      List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n      for (int i = 0; i < N; i++) {\n        if (participants[i].isConnected()\n            || liveInstances.contains(participants[i].getInstanceName())) {\n          return false;\n        }\n      }\n      return true;\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(result);\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":240,"groupId":"10352","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisableResourceInFullAutoMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c4/741220c83e34deddff47338249d0bfb3abcc3b.src","preCode":"  public void testDisableResourceInFullAutoMode() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        PARTITION_NUM, \r\n        N, \r\n        2, \r\n        \"MasterSlave\", RebalanceMode.FULL_AUTO, true); \r\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    \r\n    MockParticipantManager[] participants = new MockParticipantManager[N];\n    for (int i = 0; i < N; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n    \r\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, _baseAccessor);\n    for (int i = 0; i < N; i++) {\n      List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n      if (!liveInstances.contains(participants[i].getInstanceName())) {\n        Thread.sleep(1000L);\n      }\n    }\n\n    \r\n    enableResource(clusterName, false);\n    if (_gSetupTool.getClusterManagementTool().getResourceIdealState(clusterName, \"TestDB0\")\n        .isEnabled()) {\n      Thread.sleep(1000L);\n    }\n    boolean result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    checkExternalView(clusterName);\n\n    \r\n    enableResource(clusterName, true);\n    if (!_gSetupTool.getClusterManagementTool().getResourceIdealState(clusterName, \"TestDB0\")\n        .isEnabled()) {\n      Thread.sleep(1000L);\n    }\n    result = ClusterStateVerifier.verifyByPolling(\n        new ClusterStateVerifier.BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < N; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDisableResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"f7b1cf0434c685b71052ec7c09864e9e8120eeb7","commitMessage":"@@@TEST: Further fix Helix test suite\n\nThis diff does the following:\n1. Replace Thread.sleep statements with TestHelper.verify (polling with conditions)\n2. Increases GC pause between tests to 4 seconds\n3. Improve ZKHelixClusterVerifier's verifyByPolling method by adding invokeRebalance() method\n\nRB=1669831\n\nRB=1669831\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"19","status":"M","submitter":"Hunter Lee"}]
