[{"authorTime":"2018-11-14 10:22:55","codes":[{"authorDate":"2018-11-14 10:20:38","commitOrder":2,"curCode":"  public void deleteFromResourceConfig() throws Exception {\n    ZNRecord record = new ZNRecord(RESOURCE_NAME);\n\n    \r\n    String value = \"value\";\n    for (int i = 1; i < 4; i++) {\n      String key = \"k\" + i;\n      record.getSimpleFields().put(key, value);\n      record.getMapFields().put(key, ImmutableMap.of(key, value));\n      record.getListFields().put(key, Arrays.asList(key, value));\n    }\n\n    \r\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n    post(\"clusters/\" + CLUSTER_NAME + \"/resources/\" + RESOURCE_NAME + \"/configs\",\n        Collections.singletonMap(\"command\", \"delete\"), entity, Response.Status.OK.getStatusCode());\n\n    ResourceConfig configAfterDelete =\n        _configAccessor.getResourceConfig(CLUSTER_NAME, RESOURCE_NAME);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      String key = \"k\" + i;\n      if (i == 0) {\n        Assert.assertTrue(configAfterDelete.getRecord().getSimpleFields().containsKey(key));\n        Assert.assertTrue(configAfterDelete.getRecord().getListFields().containsKey(key));\n        Assert.assertTrue(configAfterDelete.getRecord().getMapFields().containsKey(key));\n        continue;\n      }\n      Assert.assertFalse(configAfterDelete.getRecord().getSimpleFields().containsKey(key));\n      Assert.assertFalse(configAfterDelete.getRecord().getListFields().containsKey(key));\n      Assert.assertFalse(configAfterDelete.getRecord().getMapFields().containsKey(key));\n    }\n  }\n","date":"2018-11-14 10:21:49","endLine":344,"groupId":"5909","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteFromResourceConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/db/5c9028bfeaa663f439a110c22cb5ea5a44617d.src","preCode":"  public void deleteFromResourceConfig() throws Exception {\n    ZNRecord record = new ZNRecord(RESOURCE_NAME);\n\n    \r\n    String value = \"value\";\n    for (int i = 1; i < 4; i++) {\n      String key = \"k\" + i;\n      record.getSimpleFields().put(key, value);\n      record.getMapFields().put(key, ImmutableMap.of(key, value));\n      record.getListFields().put(key, Arrays.asList(key, value));\n    }\n\n    \r\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n    post(\"clusters/\" + CLUSTER_NAME + \"/resources/\" + RESOURCE_NAME + \"/configs\",\n        Collections.singletonMap(\"command\", \"delete\"), entity, Response.Status.OK.getStatusCode());\n\n    ResourceConfig configAfterDelete =\n        _configAccessor.getResourceConfig(CLUSTER_NAME, RESOURCE_NAME);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      String key = \"k\" + i;\n      if (i == 0) {\n        Assert.assertTrue(configAfterDelete.getRecord().getSimpleFields().containsKey(key));\n        Assert.assertTrue(configAfterDelete.getRecord().getListFields().containsKey(key));\n        Assert.assertTrue(configAfterDelete.getRecord().getMapFields().containsKey(key));\n        continue;\n      }\n      Assert.assertFalse(configAfterDelete.getRecord().getSimpleFields().containsKey(key));\n      Assert.assertFalse(configAfterDelete.getRecord().getListFields().containsKey(key));\n      Assert.assertFalse(configAfterDelete.getRecord().getMapFields().containsKey(key));\n    }\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"NB"},{"authorDate":"2018-11-14 10:22:55","commitOrder":2,"curCode":"  public void deleteFromResourceIdealState() throws Exception {\n    String zkPath = PropertyPathBuilder.idealState(CLUSTER_NAME, RESOURCE_NAME);\n    ZNRecord record = new ZNRecord(RESOURCE_NAME);\n\n    \r\n    String value = \"value\";\n    for (int i = 1; i < 4; i++) {\n      String key = \"k\" + i;\n      record.getSimpleFields().put(key, value);\n      record.getMapFields().put(key, ImmutableMap.of(key, value));\n      record.getListFields().put(key, Arrays.asList(key, value));\n    }\n\n    \r\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n    post(\"clusters/\" + CLUSTER_NAME + \"/resources/\" + RESOURCE_NAME + \"/idealState\",\n        Collections.singletonMap(\"command\", \"delete\"), entity, Response.Status.OK.getStatusCode());\n\n    ZNRecord recordAfterDelete = _baseAccessor.get(zkPath, null, AccessOption.PERSISTENT);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      String key = \"k\" + i;\n      if (i == 0) {\n        Assert.assertTrue(recordAfterDelete.getSimpleFields().containsKey(key));\n        Assert.assertTrue(recordAfterDelete.getListFields().containsKey(key));\n        Assert.assertTrue(recordAfterDelete.getMapFields().containsKey(key));\n        continue;\n      }\n      Assert.assertFalse(recordAfterDelete.getSimpleFields().containsKey(key));\n      Assert.assertFalse(recordAfterDelete.getListFields().containsKey(key));\n      Assert.assertFalse(recordAfterDelete.getMapFields().containsKey(key));\n    }\n  }\n","date":"2018-11-14 10:22:55","endLine":431,"groupId":"5645","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteFromResourceIdealState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5a/ea447ea323271de1549c965e365a692fcdf21a.src","preCode":"  public void deleteFromResourceIdealState() throws Exception {\n    String zkPath = PropertyPathBuilder.idealState(CLUSTER_NAME, RESOURCE_NAME);\n    ZNRecord record = new ZNRecord(RESOURCE_NAME);\n\n    \r\n    String value = \"value\";\n    for (int i = 1; i < 4; i++) {\n      String key = \"k\" + i;\n      record.getSimpleFields().put(key, value);\n      record.getMapFields().put(key, ImmutableMap.of(key, value));\n      record.getListFields().put(key, Arrays.asList(key, value));\n    }\n\n    \r\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n    post(\"clusters/\" + CLUSTER_NAME + \"/resources/\" + RESOURCE_NAME + \"/idealState\",\n        Collections.singletonMap(\"command\", \"delete\"), entity, Response.Status.OK.getStatusCode());\n\n    ZNRecord recordAfterDelete = _baseAccessor.get(zkPath, null, AccessOption.PERSISTENT);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      String key = \"k\" + i;\n      if (i == 0) {\n        Assert.assertTrue(recordAfterDelete.getSimpleFields().containsKey(key));\n        Assert.assertTrue(recordAfterDelete.getListFields().containsKey(key));\n        Assert.assertTrue(recordAfterDelete.getMapFields().containsKey(key));\n        continue;\n      }\n      Assert.assertFalse(recordAfterDelete.getSimpleFields().containsKey(key));\n      Assert.assertFalse(recordAfterDelete.getListFields().containsKey(key));\n      Assert.assertFalse(recordAfterDelete.getMapFields().containsKey(key));\n    }\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"B"}],"commitId":"abc6969d754e01c76278c266d08cc4e9fb80e910","commitMessage":"@@@[HELIX-790] REST2.0: Add support for updating IdealState\n\nThere was a user request for a REST endpoint that allows users to add/delete/modify fields in IdealState ZNodes.\nChangelist:\n1. Add updateResourceIdealState in ResourceAcessor\n2. Add update APIs in HelixAdmin\n3. Add an integration test\n","date":"2018-11-14 10:22:55","modifiedFileCount":"6","status":"M","submitter":"narendly"},{"authorTime":"2019-08-06 07:25:03","codes":[{"authorDate":"2019-08-06 07:25:03","commitOrder":3,"curCode":"  public void deleteFromResourceConfig() throws Exception {\n    ZNRecord record = new ZNRecord(RESOURCE_NAME);\n\n    \r\n    String value = \"value\";\n    for (int i = 1; i < 4; i++) {\n      String key = \"k\" + i;\n      record.getSimpleFields().put(key, value);\n      record.getMapFields().put(key, ImmutableMap.of(key, value));\n      record.getListFields().put(key, Arrays.asList(key, value));\n    }\n\n    \r\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n    post(\"clusters/\" + CLUSTER_NAME + \"/resources/\" + RESOURCE_NAME + \"/configs\",\n        Collections.singletonMap(\"command\", \"delete\"), entity, Response.Status.OK.getStatusCode());\n\n    ResourceConfig configAfterDelete =\n        _configAccessor.getResourceConfig(CLUSTER_NAME, RESOURCE_NAME);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      String key = \"k\" + i;\n      if (i == 0) {\n        Assert.assertTrue(configAfterDelete.getRecord().getSimpleFields().containsKey(key));\n        Assert.assertTrue(configAfterDelete.getRecord().getListFields().containsKey(key));\n        Assert.assertTrue(configAfterDelete.getRecord().getMapFields().containsKey(key));\n        continue;\n      }\n      Assert.assertFalse(configAfterDelete.getRecord().getSimpleFields().containsKey(key));\n      Assert.assertFalse(configAfterDelete.getRecord().getListFields().containsKey(key));\n      Assert.assertFalse(configAfterDelete.getRecord().getMapFields().containsKey(key));\n    }\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":387,"groupId":"101097","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteFromResourceConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ac/c6ce48586b4a1ee5eaafc439acda3837871090.src","preCode":"  public void deleteFromResourceConfig() throws Exception {\n    ZNRecord record = new ZNRecord(RESOURCE_NAME);\n\n    \r\n    String value = \"value\";\n    for (int i = 1; i < 4; i++) {\n      String key = \"k\" + i;\n      record.getSimpleFields().put(key, value);\n      record.getMapFields().put(key, ImmutableMap.of(key, value));\n      record.getListFields().put(key, Arrays.asList(key, value));\n    }\n\n    \r\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n    post(\"clusters/\" + CLUSTER_NAME + \"/resources/\" + RESOURCE_NAME + \"/configs\",\n        Collections.singletonMap(\"command\", \"delete\"), entity, Response.Status.OK.getStatusCode());\n\n    ResourceConfig configAfterDelete =\n        _configAccessor.getResourceConfig(CLUSTER_NAME, RESOURCE_NAME);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      String key = \"k\" + i;\n      if (i == 0) {\n        Assert.assertTrue(configAfterDelete.getRecord().getSimpleFields().containsKey(key));\n        Assert.assertTrue(configAfterDelete.getRecord().getListFields().containsKey(key));\n        Assert.assertTrue(configAfterDelete.getRecord().getMapFields().containsKey(key));\n        continue;\n      }\n      Assert.assertFalse(configAfterDelete.getRecord().getSimpleFields().containsKey(key));\n      Assert.assertFalse(configAfterDelete.getRecord().getListFields().containsKey(key));\n      Assert.assertFalse(configAfterDelete.getRecord().getMapFields().containsKey(key));\n    }\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"},{"authorDate":"2019-08-06 07:25:03","commitOrder":3,"curCode":"  public void deleteFromResourceIdealState() throws Exception {\n    String zkPath = PropertyPathBuilder.idealState(CLUSTER_NAME, RESOURCE_NAME);\n    ZNRecord record = new ZNRecord(RESOURCE_NAME);\n\n    \r\n    String value = \"value\";\n    for (int i = 1; i < 4; i++) {\n      String key = \"k\" + i;\n      record.getSimpleFields().put(key, value);\n      record.getMapFields().put(key, ImmutableMap.of(key, value));\n      record.getListFields().put(key, Arrays.asList(key, value));\n    }\n\n    \r\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n    post(\"clusters/\" + CLUSTER_NAME + \"/resources/\" + RESOURCE_NAME + \"/idealState\",\n        Collections.singletonMap(\"command\", \"delete\"), entity, Response.Status.OK.getStatusCode());\n\n    ZNRecord recordAfterDelete = _baseAccessor.get(zkPath, null, AccessOption.PERSISTENT);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      String key = \"k\" + i;\n      if (i == 0) {\n        Assert.assertTrue(recordAfterDelete.getSimpleFields().containsKey(key));\n        Assert.assertTrue(recordAfterDelete.getListFields().containsKey(key));\n        Assert.assertTrue(recordAfterDelete.getMapFields().containsKey(key));\n        continue;\n      }\n      Assert.assertFalse(recordAfterDelete.getSimpleFields().containsKey(key));\n      Assert.assertFalse(recordAfterDelete.getListFields().containsKey(key));\n      Assert.assertFalse(recordAfterDelete.getMapFields().containsKey(key));\n    }\n    System.out.println(\"End test :\" + TestHelper.getTestMethodName());\n  }\n","date":"2019-08-08 05:10:37","endLine":473,"groupId":"101097","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteFromResourceIdealState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ac/c6ce48586b4a1ee5eaafc439acda3837871090.src","preCode":"  public void deleteFromResourceIdealState() throws Exception {\n    String zkPath = PropertyPathBuilder.idealState(CLUSTER_NAME, RESOURCE_NAME);\n    ZNRecord record = new ZNRecord(RESOURCE_NAME);\n\n    \r\n    String value = \"value\";\n    for (int i = 1; i < 4; i++) {\n      String key = \"k\" + i;\n      record.getSimpleFields().put(key, value);\n      record.getMapFields().put(key, ImmutableMap.of(key, value));\n      record.getListFields().put(key, Arrays.asList(key, value));\n    }\n\n    \r\n    Entity entity =\n        Entity.entity(OBJECT_MAPPER.writeValueAsString(record), MediaType.APPLICATION_JSON_TYPE);\n    post(\"clusters/\" + CLUSTER_NAME + \"/resources/\" + RESOURCE_NAME + \"/idealState\",\n        Collections.singletonMap(\"command\", \"delete\"), entity, Response.Status.OK.getStatusCode());\n\n    ZNRecord recordAfterDelete = _baseAccessor.get(zkPath, null, AccessOption.PERSISTENT);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      String key = \"k\" + i;\n      if (i == 0) {\n        Assert.assertTrue(recordAfterDelete.getSimpleFields().containsKey(key));\n        Assert.assertTrue(recordAfterDelete.getListFields().containsKey(key));\n        Assert.assertTrue(recordAfterDelete.getMapFields().containsKey(key));\n        continue;\n      }\n      Assert.assertFalse(recordAfterDelete.getSimpleFields().containsKey(key));\n      Assert.assertFalse(recordAfterDelete.getListFields().containsKey(key));\n      Assert.assertFalse(recordAfterDelete.getMapFields().containsKey(key));\n    }\n  }\n","realPath":"helix-rest/src/test/java/org/apache/helix/rest/server/TestResourceAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"}],"commitId":"af00b8df4f9ea432a8186b4c50c3a5bc3ddf035b","commitMessage":"@@@Stablize the REST tests\n\nStablize the REST tests by following changes:\n1. Remove temporary cluster which impact the ClusterAccessor test\n2. Add all start/end message for test debug purpose.\n3. Disable unstable monitoring test for default MBeans. Sometimes we can query it sometimes not. It is not critical test path. Let's make it stable later.\n","date":"2019-08-08 05:10:37","modifiedFileCount":"10","status":"M","submitter":"Junkai Xue"}]
