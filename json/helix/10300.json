[{"authorTime":"2020-03-14 06:28:42","codes":[{"authorDate":"2019-10-26 12:56:46","commitOrder":6,"curCode":"  public void testNormalUsage() throws IOException {\n    \r\n    ResourceControllerDataProvider testCache = setupClusterDataCache();\n    Set<AssignableReplica> assignableReplicas = generateReplicas(testCache);\n    Set<AssignableNode> assignableNodes = generateNodes(testCache);\n\n    ClusterContext context =\n        new ClusterContext(assignableReplicas, assignableNodes, Collections.emptyMap(),\n            Collections.emptyMap());\n    ClusterModel clusterModel = new ClusterModel(context, assignableReplicas, assignableNodes);\n\n    Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream()\n        .allMatch(resourceMap -> resourceMap.values().isEmpty()));\n    Assert.assertFalse(clusterModel.getAssignableNodes().values().stream()\n        .anyMatch(node -> node.getAssignedReplicaCount() != 0));\n\n    \r\n    \r\n\n    \r\n    AssignableReplica replica = assignableReplicas.iterator().next();\n    AssignableNode assignableNode = assignableNodes.iterator().next();\n    clusterModel\n        .assign(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n            assignableNode.getInstanceName());\n\n    Assert.assertTrue(\n        clusterModel.getContext().getAssignmentForFaultZoneMap().get(assignableNode.getFaultZone())\n            .get(replica.getResourceName()).contains(replica.getPartitionName()));\n    Assert.assertTrue(assignableNode.getAssignedPartitionsMap().get(replica.getResourceName())\n        .contains(replica.getPartitionName()));\n\n    \r\n    try {\n      clusterModel.assign(\"NOT-EXIST\", replica.getPartitionName(), replica.getReplicaState(),\n          assignableNode.getInstanceName());\n      Assert.fail(\"Assigning a non existing resource partition shall fail.\");\n    } catch (HelixException ex) {\n      \r\n    }\n\n    \r\n    try {\n      clusterModel\n          .assign(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n              \"NON-EXIST\");\n      Assert.fail(\"Assigning a resource partition to a non existing instance shall fail.\");\n    } catch (HelixException ex) {\n      \r\n    }\n\n    \r\n    clusterModel\n        .release(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n            assignableNode.getInstanceName());\n\n    Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream()\n        .allMatch(resourceMap -> resourceMap.values().stream()\n            .allMatch(partitions -> partitions.isEmpty())));\n    Assert.assertFalse(clusterModel.getAssignableNodes().values().stream()\n        .anyMatch(node -> node.getAssignedReplicaCount() != 0));\n  }\n","date":"2020-02-08 04:24:22","endLine":100,"groupId":"5113","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalUsage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/60/967ca5e05ec93ba2edbf51455365079d4caf64.src","preCode":"  public void testNormalUsage() throws IOException {\n    \r\n    ResourceControllerDataProvider testCache = setupClusterDataCache();\n    Set<AssignableReplica> assignableReplicas = generateReplicas(testCache);\n    Set<AssignableNode> assignableNodes = generateNodes(testCache);\n\n    ClusterContext context =\n        new ClusterContext(assignableReplicas, assignableNodes, Collections.emptyMap(),\n            Collections.emptyMap());\n    ClusterModel clusterModel = new ClusterModel(context, assignableReplicas, assignableNodes);\n\n    Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream()\n        .allMatch(resourceMap -> resourceMap.values().isEmpty()));\n    Assert.assertFalse(clusterModel.getAssignableNodes().values().stream()\n        .anyMatch(node -> node.getAssignedReplicaCount() != 0));\n\n    \r\n    \r\n\n    \r\n    AssignableReplica replica = assignableReplicas.iterator().next();\n    AssignableNode assignableNode = assignableNodes.iterator().next();\n    clusterModel\n        .assign(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n            assignableNode.getInstanceName());\n\n    Assert.assertTrue(\n        clusterModel.getContext().getAssignmentForFaultZoneMap().get(assignableNode.getFaultZone())\n            .get(replica.getResourceName()).contains(replica.getPartitionName()));\n    Assert.assertTrue(assignableNode.getAssignedPartitionsMap().get(replica.getResourceName())\n        .contains(replica.getPartitionName()));\n\n    \r\n    try {\n      clusterModel.assign(\"NOT-EXIST\", replica.getPartitionName(), replica.getReplicaState(),\n          assignableNode.getInstanceName());\n      Assert.fail(\"Assigning a non existing resource partition shall fail.\");\n    } catch (HelixException ex) {\n      \r\n    }\n\n    \r\n    try {\n      clusterModel\n          .assign(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n              \"NON-EXIST\");\n      Assert.fail(\"Assigning a resource partition to a non existing instance shall fail.\");\n    } catch (HelixException ex) {\n      \r\n    }\n\n    \r\n    clusterModel\n        .release(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n            assignableNode.getInstanceName());\n\n    Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream()\n        .allMatch(resourceMap -> resourceMap.values().stream()\n            .allMatch(partitions -> partitions.isEmpty())));\n    Assert.assertFalse(clusterModel.getAssignableNodes().values().stream()\n        .anyMatch(node -> node.getAssignedReplicaCount() != 0));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/TestClusterModel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"NB"},{"authorDate":"2020-03-14 06:28:42","commitOrder":6,"curCode":"  public ClusterModel getMultiNodeClusterModel() throws IOException {\n    initialize();\n    ResourceControllerDataProvider testCache = setupClusterDataCache();\n    InstanceConfig testInstanceConfig1 = createMockInstanceConfig(TEST_INSTANCE_ID_1);\n    InstanceConfig testInstanceConfig2 = createMockInstanceConfig(TEST_INSTANCE_ID_2);\n    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n    instanceConfigMap.put(TEST_INSTANCE_ID_1, testInstanceConfig1);\n    instanceConfigMap.put(TEST_INSTANCE_ID_2, testInstanceConfig2);\n    when(testCache.getInstanceConfigMap()).thenReturn(instanceConfigMap);\n    Set<AssignableReplica> assignableReplicas = generateReplicas(testCache);\n    Set<AssignableNode> assignableNodes = generateNodes(testCache);\n\n    ClusterContext context =\n        new ClusterContext(assignableReplicas, assignableNodes, Collections.emptyMap(), Collections.emptyMap());\n    return new ClusterModel(context, assignableReplicas, assignableNodes);\n  }\n","date":"2020-03-14 06:28:42","endLine":64,"groupId":"5113","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMultiNodeClusterModel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1c/1687e3387f4502e769ba2fda62b520247bbf7a.src","preCode":"  public ClusterModel getMultiNodeClusterModel() throws IOException {\n    initialize();\n    ResourceControllerDataProvider testCache = setupClusterDataCache();\n    InstanceConfig testInstanceConfig1 = createMockInstanceConfig(TEST_INSTANCE_ID_1);\n    InstanceConfig testInstanceConfig2 = createMockInstanceConfig(TEST_INSTANCE_ID_2);\n    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n    instanceConfigMap.put(TEST_INSTANCE_ID_1, testInstanceConfig1);\n    instanceConfigMap.put(TEST_INSTANCE_ID_2, testInstanceConfig2);\n    when(testCache.getInstanceConfigMap()).thenReturn(instanceConfigMap);\n    Set<AssignableReplica> assignableReplicas = generateReplicas(testCache);\n    Set<AssignableNode> assignableNodes = generateNodes(testCache);\n\n    ClusterContext context =\n        new ClusterContext(assignableReplicas, assignableNodes, Collections.emptyMap(), Collections.emptyMap());\n    return new ClusterModel(context, assignableReplicas, assignableNodes);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/ClusterModelTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"}],"commitId":"c9667847644f11abcf63d83e16a878ccb403257a","commitMessage":"@@@Remove possible score-tie between two AssignableNodes (#889)\n\nThis PR fixes a potential situation where two AssignableNodes will receive the same score; the fix makes the algorithm more deterministic.\n\nCo-authored-by: Neal Sun <nesun@nesun-mn1.linkedin.biz>","date":"2020-03-14 06:28:42","modifiedFileCount":"4","status":"M","submitter":"Neal Sun"},{"authorTime":"2021-04-24 12:42:23","codes":[{"authorDate":"2019-10-26 12:56:46","commitOrder":7,"curCode":"  public void testNormalUsage() throws IOException {\n    \r\n    ResourceControllerDataProvider testCache = setupClusterDataCache();\n    Set<AssignableReplica> assignableReplicas = generateReplicas(testCache);\n    Set<AssignableNode> assignableNodes = generateNodes(testCache);\n\n    ClusterContext context =\n        new ClusterContext(assignableReplicas, assignableNodes, Collections.emptyMap(),\n            Collections.emptyMap());\n    ClusterModel clusterModel = new ClusterModel(context, assignableReplicas, assignableNodes);\n\n    Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream()\n        .allMatch(resourceMap -> resourceMap.values().isEmpty()));\n    Assert.assertFalse(clusterModel.getAssignableNodes().values().stream()\n        .anyMatch(node -> node.getAssignedReplicaCount() != 0));\n\n    \r\n    \r\n\n    \r\n    AssignableReplica replica = assignableReplicas.iterator().next();\n    AssignableNode assignableNode = assignableNodes.iterator().next();\n    clusterModel\n        .assign(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n            assignableNode.getInstanceName());\n\n    Assert.assertTrue(\n        clusterModel.getContext().getAssignmentForFaultZoneMap().get(assignableNode.getFaultZone())\n            .get(replica.getResourceName()).contains(replica.getPartitionName()));\n    Assert.assertTrue(assignableNode.getAssignedPartitionsMap().get(replica.getResourceName())\n        .contains(replica.getPartitionName()));\n\n    \r\n    try {\n      clusterModel.assign(\"NOT-EXIST\", replica.getPartitionName(), replica.getReplicaState(),\n          assignableNode.getInstanceName());\n      Assert.fail(\"Assigning a non existing resource partition shall fail.\");\n    } catch (HelixException ex) {\n      \r\n    }\n\n    \r\n    try {\n      clusterModel\n          .assign(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n              \"NON-EXIST\");\n      Assert.fail(\"Assigning a resource partition to a non existing instance shall fail.\");\n    } catch (HelixException ex) {\n      \r\n    }\n\n    \r\n    clusterModel\n        .release(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n            assignableNode.getInstanceName());\n\n    Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream()\n        .allMatch(resourceMap -> resourceMap.values().stream()\n            .allMatch(partitions -> partitions.isEmpty())));\n    Assert.assertFalse(clusterModel.getAssignableNodes().values().stream()\n        .anyMatch(node -> node.getAssignedReplicaCount() != 0));\n  }\n","date":"2020-02-08 04:24:22","endLine":100,"groupId":"10300","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormalUsage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/60/967ca5e05ec93ba2edbf51455365079d4caf64.src","preCode":"  public void testNormalUsage() throws IOException {\n    \r\n    ResourceControllerDataProvider testCache = setupClusterDataCache();\n    Set<AssignableReplica> assignableReplicas = generateReplicas(testCache);\n    Set<AssignableNode> assignableNodes = generateNodes(testCache);\n\n    ClusterContext context =\n        new ClusterContext(assignableReplicas, assignableNodes, Collections.emptyMap(),\n            Collections.emptyMap());\n    ClusterModel clusterModel = new ClusterModel(context, assignableReplicas, assignableNodes);\n\n    Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream()\n        .allMatch(resourceMap -> resourceMap.values().isEmpty()));\n    Assert.assertFalse(clusterModel.getAssignableNodes().values().stream()\n        .anyMatch(node -> node.getAssignedReplicaCount() != 0));\n\n    \r\n    \r\n\n    \r\n    AssignableReplica replica = assignableReplicas.iterator().next();\n    AssignableNode assignableNode = assignableNodes.iterator().next();\n    clusterModel\n        .assign(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n            assignableNode.getInstanceName());\n\n    Assert.assertTrue(\n        clusterModel.getContext().getAssignmentForFaultZoneMap().get(assignableNode.getFaultZone())\n            .get(replica.getResourceName()).contains(replica.getPartitionName()));\n    Assert.assertTrue(assignableNode.getAssignedPartitionsMap().get(replica.getResourceName())\n        .contains(replica.getPartitionName()));\n\n    \r\n    try {\n      clusterModel.assign(\"NOT-EXIST\", replica.getPartitionName(), replica.getReplicaState(),\n          assignableNode.getInstanceName());\n      Assert.fail(\"Assigning a non existing resource partition shall fail.\");\n    } catch (HelixException ex) {\n      \r\n    }\n\n    \r\n    try {\n      clusterModel\n          .assign(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n              \"NON-EXIST\");\n      Assert.fail(\"Assigning a resource partition to a non existing instance shall fail.\");\n    } catch (HelixException ex) {\n      \r\n    }\n\n    \r\n    clusterModel\n        .release(replica.getResourceName(), replica.getPartitionName(), replica.getReplicaState(),\n            assignableNode.getInstanceName());\n\n    Assert.assertTrue(clusterModel.getContext().getAssignmentForFaultZoneMap().values().stream()\n        .allMatch(resourceMap -> resourceMap.values().stream()\n            .allMatch(partitions -> partitions.isEmpty())));\n    Assert.assertFalse(clusterModel.getAssignableNodes().values().stream()\n        .anyMatch(node -> node.getAssignedReplicaCount() != 0));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/TestClusterModel.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"},{"authorDate":"2021-04-24 12:42:23","commitOrder":7,"curCode":"  public ClusterModel getMultiNodeClusterModel() throws IOException {\n    initialize();\n    ResourceControllerDataProvider testCache = setupClusterDataCacheForNearFullUtil();\n    InstanceConfig testInstanceConfig1 = createMockInstanceConfig(TEST_INSTANCE_ID_1);\n    InstanceConfig testInstanceConfig2 = createMockInstanceConfig(TEST_INSTANCE_ID_2);\n    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n    instanceConfigMap.put(TEST_INSTANCE_ID_1, testInstanceConfig1);\n    instanceConfigMap.put(TEST_INSTANCE_ID_2, testInstanceConfig2);\n    when(testCache.getInstanceConfigMap()).thenReturn(instanceConfigMap);\n    Set<AssignableReplica> assignableReplicas = generateReplicas(testCache);\n    Set<AssignableNode> assignableNodes = generateNodes(testCache);\n\n    ClusterContext context =\n        new ClusterContext(assignableReplicas, assignableNodes, Collections.emptyMap(), Collections.emptyMap());\n    return new ClusterModel(context, assignableReplicas, assignableNodes);\n  }\n","date":"2021-05-04 07:28:23","endLine":64,"groupId":"10300","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getMultiNodeClusterModel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/02/ab0f57f81709a62cac9a82d50876c2c0c393b7.src","preCode":"  public ClusterModel getMultiNodeClusterModel() throws IOException {\n    initialize();\n    ResourceControllerDataProvider testCache = setupClusterDataCache();\n    InstanceConfig testInstanceConfig1 = createMockInstanceConfig(TEST_INSTANCE_ID_1);\n    InstanceConfig testInstanceConfig2 = createMockInstanceConfig(TEST_INSTANCE_ID_2);\n    Map<String, InstanceConfig> instanceConfigMap = new HashMap<>();\n    instanceConfigMap.put(TEST_INSTANCE_ID_1, testInstanceConfig1);\n    instanceConfigMap.put(TEST_INSTANCE_ID_2, testInstanceConfig2);\n    when(testCache.getInstanceConfigMap()).thenReturn(instanceConfigMap);\n    Set<AssignableReplica> assignableReplicas = generateReplicas(testCache);\n    Set<AssignableNode> assignableNodes = generateNodes(testCache);\n\n    ClusterContext context =\n        new ClusterContext(assignableReplicas, assignableNodes, Collections.emptyMap(), Collections.emptyMap());\n    return new ClusterModel(context, assignableReplicas, assignableNodes);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/rebalancer/waged/model/ClusterModelTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"fe4a9bbdd00928b285eaa896c3a1d11a62299f8d","commitMessage":"@@@Improve the WAGED.ConstraintBasedAlgorithm sorting logic to prioritize replica with larger impact (#1691)\n\nImprove the WAGED.ConstraintBasedAlgorithm sorting logic to prioritize replica with larger impact.","date":"2021-05-04 07:28:23","modifiedFileCount":"5","status":"M","submitter":"xyuanlu"}]
