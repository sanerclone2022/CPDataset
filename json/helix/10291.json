[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    refreshClusterConfig(event, clusterName);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    refreshClusterConfig(event, clusterName);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2017-11-08 08:48:26","endLine":373,"groupId":"7113","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0e/797c1b42b828224ff74501a927b9f276eccb0e.src","preCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    refreshClusterConfig(event, clusterName);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    refreshClusterConfig(event, clusterName);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"MB"},{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    refreshClusterConfig(event, clusterName);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":438,"groupId":"1192","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0e/797c1b42b828224ff74501a927b9f276eccb0e.src","preCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    refreshClusterConfig(event, clusterName);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-03-25 12:36:54","codes":[{"authorDate":"2018-03-25 12:36:54","commitOrder":6,"curCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-03-26 05:43:42","endLine":403,"groupId":"7113","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9d/4790dee077b203d42ba663d561fb179c528a93.src","preCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    refreshClusterConfig(event, clusterName);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    refreshClusterConfig(event, clusterName);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"},{"authorDate":"2018-03-25 12:36:54","commitOrder":6,"curCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-03-26 05:43:42","endLine":468,"groupId":"6909","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9d/4790dee077b203d42ba663d561fb179c528a93.src","preCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    refreshClusterConfig(event, clusterName);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"}],"commitId":"db949d0f64c5a4ac9923bc7bdf3736dd0e7a8640","commitMessage":"@@@Avoid redundant calculation for disabled instances\n\nFor Pinot reported issue that BestPossibleStage takes 100s for initial resource calculation.  the part of delay caused by recalculating disabled instances for partition.\nImprove this with calculate it once when refresh data.\nTODO: once we can do major refactor that can identify the ClusterConfig change in cache.  we can optimize it with recalculating it only when instance config and cluster config changes.\n","date":"2018-03-26 05:43:42","modifiedFileCount":"6","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":7,"curCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":404,"groupId":"7113","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/90/363c1b4aeb8f6fcdaa406c4c263719f1dc123e.src","preCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":7,"curCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":470,"groupId":"6909","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/90/363c1b4aeb8f6fcdaa406c4c263719f1dc123e.src","preCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-08-07 04:59:36","codes":[{"authorDate":"2018-08-07 04:59:36","commitOrder":8,"curCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-09-22 05:08:40","endLine":404,"groupId":"7113","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1c/2e06b3abb0fc5c0415ab94f6580ff09a795cd2.src","preCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2018-08-07 04:59:36","commitOrder":8,"curCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-09-22 05:08:40","endLine":470,"groupId":"6909","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1c/2e06b3abb0fc5c0415ab94f6580ff09a795cd2.src","preCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageSelectionStageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"}],"commitId":"a4e0cdd28a3d70195a0f69021b77cde580dc7d50","commitMessage":"@@@Refactoring MessageGenerationOutput and MessageSelectStageOutput\n\nSince these two outputs share same functionality and APIs. Refactor them into one class MessageOutput class.\n","date":"2018-09-22 05:08:40","modifiedFileCount":"8","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-07-21 06:37:23","codes":[{"authorDate":"2018-07-21 06:37:23","commitOrder":9,"curCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-09-22 05:09:25","endLine":406,"groupId":"7113","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/518d8f62d97769394fc25b7c881e0f2e2200bf.src","preCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2018-07-21 06:37:23","commitOrder":9,"curCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-09-22 05:09:25","endLine":472,"groupId":"6909","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/518d8f62d97769394fc25b7c881e0f2e2200bf.src","preCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new TaskAssignmentStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"M"}],"commitId":"65533eae6966d7c10e23810d233c2ee0250909ec","commitMessage":"@@@Create abstract stages for shared stages between two pipelines\n\nWhen we try to remove the redundant stages for task framework.  we need to make two unconnected stages can be compatible. So we need to have abstract stages for both regular pipeline and task pipeline.\n","date":"2018-09-22 05:09:25","modifiedFileCount":"8","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":10,"curCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-02-26 09:36:00","endLine":409,"groupId":"7113","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/b23f5d0bc38e9d27139d5060ccd2e1b190850f.src","preCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":10,"curCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-02-26 09:36:00","endLine":477,"groupId":"6909","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/b23f5d0bc38e9d27139d5060ccd2e1b190850f.src","preCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":11,"curCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n        0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":410,"groupId":"7113","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/541af5cc7340eed00fb9c351a64a487be3caf4.src","preCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n      resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n      1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n      0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":11,"curCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1,\n        \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":480,"groupId":"6909","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c3/541af5cc7340eed00fb9c351a64a487be3caf4.src","preCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput =\n        event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-06-18 05:37:02","codes":[{"authorDate":"2019-06-18 05:37:02","commitOrder":12,"curCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n        0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-06-25 07:46:15","endLine":411,"groupId":"3445","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d9/0c22812802e9182ba18d0870df8a76fb4a71e3.src","preCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n        0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2019-06-18 05:37:02","commitOrder":12,"curCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(1).getEphemeralOwner(),\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1,\n        \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-06-25 07:46:15","endLine":481,"groupId":"6398","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d9/0c22812802e9182ba18d0870df8a76fb4a71e3.src","preCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", \"session_1\",\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1,\n        \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"}],"commitId":"ad0c2edb31a4d0e5c455d1fa0f96658bac1382d5","commitMessage":"@@@Always try reading from EphemeralOwner state first while reading the session ID from a live instance node.\n\nThis is to avoid inconsistent session ID in the node content and the emphemeral owner state.\nNote that in order to ensure backward compatiblity and some test cases.  the newly introduced method will still read from the node content if the ephemeral owner state is empty (-1 or 0).\n\nRB=1704942\nBUG=HELIX-1969\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-06-25 07:46:15","modifiedFileCount":"33","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-10-07 10:43:50","codes":[{"authorDate":"2020-10-07 10:43:50","commitOrder":13,"curCode":"  public void testMasterXfer() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n        0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-07 10:43:50","endLine":471,"groupId":"1246","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/84/ee28ddba180d129ddcfcc36f65b2f2f7a88696.src","preCode":"  public void testMasterXfer() {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n        0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2020-10-07 10:43:50","commitOrder":13,"curCode":"  public void testNoDuplicatedMaster() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(1).getEphemeralOwner(),\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1,\n        \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-07 10:43:50","endLine":542,"groupId":"217","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/84/ee28ddba180d129ddcfcc36f65b2f2f7a88696.src","preCode":"  public void testNoDuplicatedMaster() {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager = new DummyClusterManager(clusterName, accessor);\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(1).getEphemeralOwner(),\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh);\n    runPipeline(event, rebalancePipeline);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1,\n        \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"}],"commitId":"fa8f4b676fc8cd81a80b2f8d8aa97d2cf5c5087f","commitMessage":"@@@Prevent parallel controller pipelines run causing two master replicas (#1066)\n\nThere is a case that after controller leader switches.  pipelines of both old Helix controller leader and new leader are running in parallel.\nDifferent assignment decisions are sent to different participants so there are double masters for a single partition.\n\nThe commit addresses this issue by blocking non-leader controller to send messages to ZK.","date":"2020-10-07 10:43:50","modifiedFileCount":"17","status":"M","submitter":"Huizhi Lu"},{"authorTime":"2021-05-26 01:19:08","codes":[{"authorDate":"2021-05-26 01:19:08","commitOrder":14,"curCode":"  public void testMasterXfer() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n        0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-06-02 02:44:29","endLine":472,"groupId":"1246","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/62b7bbf9c0e81f79d870a6a29ab737372ccb01.src","preCode":"  public void testMasterXfer() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n        0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2021-05-26 01:19:08","commitOrder":14,"curCode":"  public void testNoDuplicatedMaster() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(1).getEphemeralOwner(),\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1,\n        \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-06-02 02:44:29","endLine":543,"groupId":"217","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/62b7bbf9c0e81f79d870a6a29ab737372ccb01.src","preCode":"  public void testNoDuplicatedMaster() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(1).getEphemeralOwner(),\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1,\n        \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":475,"status":"M"}],"commitId":"f49986e24c27c49d8c877457753e32dcf8b540f4","commitMessage":"@@@[Replica Level Throttle] Make Pipeline in a correct order and fixes tests (#1750)\n\n* Make Pipeline in a correct order and fixes tests\n\n1. Make pipeline running in a correct order to process computation\n2. Add \"DROPPED\" case in the mapping to reflect the real case.\n3. Fixes test cases.","date":"2021-06-02 02:44:29","modifiedFileCount":"15","status":"M","submitter":"Junkai Xue"},{"authorTime":"2021-05-27 07:44:46","codes":[{"authorDate":"2021-05-27 07:44:46","commitOrder":15,"curCode":"  public void testMasterXfer() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n        0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-06-02 02:44:29","endLine":471,"groupId":"10291","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"testMasterXfer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8b/1b7bc73dec1a5eefdb7b57a861a6effc960157.src","preCode":"  public void testMasterXfer() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_xfer\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_xfer\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1, \"Should output 1 message: SLAVE-MASTER for node1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"SLAVE\");\n    Assert.assertEquals(message.getToState(), \"MASTER\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    \r\n    \r\n    setupLiveInstances(clusterName, new int[] {\n        0\n    });\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", \"session_0\",\n        \"SLAVE\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    messages = msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 0, \"Should NOT output 1 message: SLAVE-MASTER for node0\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2021-05-27 07:44:46","commitOrder":15,"curCode":"  public void testNoDuplicatedMaster() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new MessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(1).getEphemeralOwner(),\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1,\n        \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-06-02 02:44:29","endLine":542,"groupId":"10291","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"testNoDuplicatedMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8b/1b7bc73dec1a5eefdb7b57a861a6effc960157.src","preCode":"  public void testNoDuplicatedMaster() throws Exception {\n    String clusterName = \"CLUSTER_\" + _className + \"_no_duplicated_master\";\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    HelixManager manager =\n        new DummyClusterManager(clusterName, accessor, Long.toHexString(_gZkClient.getSessionId()));\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(),\n        new ResourceControllerDataProvider());\n    refreshClusterConfig(clusterName, accessor);\n\n    final String resourceName = \"testResource_no_duplicated_master\";\n    String[] resourceGroups = new String[] {\n        resourceName\n    };\n    \r\n    \r\n    setupIdealState(clusterName, new int[] {\n        0, 1\n    }, resourceGroups, 1, 2);\n    List<LiveInstance> liveInstances = setupLiveInstances(clusterName, new int[] {\n        0, 1\n    });\n    setupStateModel(clusterName);\n\n    \r\n    Pipeline dataRefresh = new Pipeline();\n    dataRefresh.addStage(new ReadClusterDataStage());\n\n    \r\n    Pipeline rebalancePipeline = new Pipeline();\n    rebalancePipeline.addStage(new ResourceComputationStage());\n    rebalancePipeline.addStage(new CurrentStateComputationStage());\n    rebalancePipeline.addStage(new BestPossibleStateCalcStage());\n    rebalancePipeline.addStage(new ResourceMessageGenerationPhase());\n    rebalancePipeline.addStage(new MessageSelectionStage());\n    rebalancePipeline.addStage(new IntermediateStateCalcStage());\n    rebalancePipeline.addStage(new MessageThrottleStage());\n    rebalancePipeline.addStage(new ResourceMessageDispatchStage());\n\n    \r\n    \r\n    \r\n    \r\n    setCurrentState(clusterName, \"localhost_0\", resourceName, resourceName + \"_0\", liveInstances.get(0).getEphemeralOwner(),\n        \"SLAVE\");\n    setCurrentState(clusterName, \"localhost_1\", resourceName, resourceName + \"_0\", liveInstances.get(1).getEphemeralOwner(),\n        \"MASTER\");\n\n    runPipeline(event, dataRefresh, false);\n    runPipeline(event, rebalancePipeline, false);\n    MessageOutput msgSelOutput = event.getAttribute(AttributeName.MESSAGES_SELECTED.name());\n    List<Message> messages =\n        msgSelOutput.getMessages(resourceName, new Partition(resourceName + \"_0\"));\n    Assert.assertEquals(messages.size(), 1,\n        \"Should output 1 message: MASTER-SLAVE for localhost_1\");\n    Message message = messages.get(0);\n    Assert.assertEquals(message.getFromState(), \"MASTER\");\n    Assert.assertEquals(message.getToState(), \"SLAVE\");\n    Assert.assertEquals(message.getTgtName(), \"localhost_1\");\n\n    deleteLiveInstances(clusterName);\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"}],"commitId":"17c52da9422fbde427eb5b1309ddeeda389c092c","commitMessage":"@@@Refactor/clean up code without logic change (#1760)\n\nThis commmit contains:\n1. Remove unused functions and logic\n2. Combine the Resource/Task message generation into one stage.  since they are both relying on best possible result.","date":"2021-06-02 02:44:29","modifiedFileCount":"11","status":"M","submitter":"Junkai Xue"}]
