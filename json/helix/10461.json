[{"authorTime":"2017-06-01 05:57:23","codes":[{"authorDate":"2017-06-01 05:57:23","commitOrder":1,"curCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _setupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","date":"2017-06-24 03:05:57","endLine":103,"groupId":"3548","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/2bc7bbc186bd16937cec0edaa13ba23538c105.src","preCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _setupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2017-06-01 05:57:23","commitOrder":1,"curCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","date":"2017-06-24 03:05:57","endLine":148,"groupId":"3549","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobPriority","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/2bc7bbc186bd16937cec0edaa13ba23538c105.src","preCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"20685cf6e1276aaa1bf6264c1fe6a3173081d22c","commitMessage":"@@@Helix per-participant concurrent task throttling\n\nAdd per participant concurrent task throttling.\n\n1. Add a participant configuration item \"MAX_CONCURRENT_TASK\" for throttling setting.\n   Add cluster configuration item \"MAX_CONCURRENT_TASK_PER_INSTANCE\" as the default throttling settings.\n   New assigned task + existing running/init task <= MAX_CONCURRENT_TASK. Otherwise.  new assignment won't be included in best possible state.\n2. Tasks are assigned in the order of jobs' start time. Older jobs have higher priority than other jobs and regular resources.\n3. Add test case (TestTaskThrottling.java) for testing new throttling and priority.\n\nTicket:\nhttps://issues.apache.org/jira/browse/HELIX-655\n\nTest:\nmvn test in helix-core\n","date":"2017-06-24 03:05:57","modifiedFileCount":"6","status":"B","submitter":"Jiajun Wang"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":2,"curCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _setupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","date":"2017-11-08 08:48:26","endLine":103,"groupId":"3548","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/2db857df9531015b8a472c7a2e52bf8efe122d.src","preCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _setupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":2,"curCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","date":"2017-11-08 08:48:26","endLine":148,"groupId":"3549","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobPriority","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/2db857df9531015b8a472c7a2e52bf8efe122d.src","preCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2018-04-21 07:11:27","commitOrder":3,"curCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _setupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","date":"2018-04-25 03:45:43","endLine":103,"groupId":"3548","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/be/c9505aa22a91232a01d00b5bd7dc8d7f4c26e7.src","preCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _setupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.TIMEOUT_CONFIG, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","date":"2017-11-08 08:48:26","endLine":148,"groupId":"3549","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobPriority","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/2db857df9531015b8a472c7a2e52bf8efe122d.src","preCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"d2fb22d1f3a3db602b27cba7ed8d814cb931622e","commitMessage":"@@@Fix a few of unstable integration tests.\n","date":"2018-04-25 03:45:43","modifiedFileCount":"18","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _gSetupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","date":"2018-07-14 02:20:49","endLine":103,"groupId":"3548","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/5397abece90b833f933439909aca2eae857371.src","preCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _setupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":4,"curCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","date":"2017-11-08 08:48:26","endLine":148,"groupId":"3549","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobPriority","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/2db857df9531015b8a472c7a2e52bf8efe122d.src","preCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2018-07-17 06:48:38","commitOrder":5,"curCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(2000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _gSetupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","date":"2018-07-18 02:46:04","endLine":103,"groupId":"3548","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/59/2fedae945d17f2fcd5d6c1ff1c473c63a7c056.src","preCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _gSetupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","date":"2017-11-08 08:48:26","endLine":148,"groupId":"3549","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobPriority","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/2db857df9531015b8a472c7a2e52bf8efe122d.src","preCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"cc625065bffced9a66566eeccb3055ec28a74611","commitMessage":"@@@[HELIX-735] Make AssignmentCalculators non-static so that tests pass\n\nWith the introduction of quota-based scheduling.  every task that gets scheduled takes up a thread. However.  previously these AssignmentCalculators (both generic and fixed for generic jobs and targeted jobs) were stateless so they were instantiated statically. Since AssignmentCalculators now are stateful due to them operating on AssignableInstances' quota profile.  they were made non-static so that they would be re-instantiated every pipeline.\n\nThis problem is specific to the testing environment where static variables live on from test to test.  causing AssignmentCalculators to hold on to the very first reference to AssignableInstanceManager. Tasks were not being assigned and scheduled because the first set of AssignableInstances would get filled up and never get freed.\n\nChangelist:\n1. Make AssignmentCalculators non-static\n2. Adjust sleep duration for some tests for stability\n","date":"2018-07-18 02:46:04","modifiedFileCount":"4","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes; \r\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1000L);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n            .forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        Integer.toString(perNodeTaskLimitation));\n    _gSetupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1000L);\n\n    \r\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","date":"2019-05-25 09:19:21","endLine":109,"groupId":"3548","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5b/1b92b6de05b1fc226eb608cfac6c6bd642bfcb.src","preCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(2000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<String, String>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        new Integer(perNodeTaskLimitation).toString());\n    _gSetupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 =\n        WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(),\n        TaskUtil.getNamespacedJobName(flow1.getName(), jobName1), TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1000L);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 =\n        WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(),\n        TaskUtil.getNamespacedJobName(flow2.getName(), jobName2), TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","date":"2019-05-25 09:19:21","endLine":159,"groupId":"1015","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobPriority","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5b/1b92b6de05b1fc226eb608cfac6c6bd642bfcb.src","preCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(4000);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-06-18 02:24:46","codes":[{"authorDate":"2020-06-18 02:24:46","commitOrder":7,"curCode":"  public void testTaskThrottle() throws Exception {\n    int numTasks = 30 * _numNodes; \r\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow1 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(), TaskUtil.getNamespacedJobName(flow1.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n\n    Assert.assertTrue(TestHelper.verify(() -> (countRunningPartition(flow1, jobName1) == numTasks),\n        TestHelper.WAIT_DURATION));\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n            .forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        Integer.toString(perNodeTaskLimitation));\n    _gSetupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    Workflow flow2 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(), TaskUtil.getNamespacedJobName(flow2.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(\n        () -> (countRunningPartition(flow2, jobName2) == (_numNodes * perNodeTaskLimitation)),\n        TestHelper.WAIT_DURATION));\n\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10\"));\n    String jobName3 = \"Job3\";\n    Workflow flow3 = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow3);\n    _driver.pollForJobState(flow3.getName(), TaskUtil.getNamespacedJobName(flow3.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","date":"2020-06-18 02:24:46","endLine":110,"groupId":"10461","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskThrottle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/77/7cdf2f3f4e4aece387fc9a9546ea568dc11778.src","preCode":"  public void testTaskThrottle() throws InterruptedException {\n    int numTasks = 30 * _numNodes; \r\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    String jobName1 = \"Job1\";\n    Workflow flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName1),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1000L);\n\n    Assert.assertEquals(countRunningPartition(flow, jobName1), numTasks);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n\n    \r\n    HelixConfigScope scope =\n        new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER)\n            .forCluster(CLUSTER_NAME).build();\n    Map<String, String> properties = new HashMap<>();\n    properties.put(ClusterConfig.ClusterConfigProperty.MAX_CONCURRENT_TASK_PER_INSTANCE.name(),\n        Integer.toString(perNodeTaskLimitation));\n    _gSetupTool.getClusterManagementTool().setConfig(scope, properties);\n\n    String jobName2 = \"Job2\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName2),\n        TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1000L);\n\n    \r\n    Assert.assertEquals(countRunningPartition(flow, jobName2), _numNodes * perNodeTaskLimitation);\n\n    _driver.stop(flow.getName());\n    _driver.pollForWorkflowState(flow.getName(), TaskState.STOPPED);\n\n    \r\n    jobConfig.setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10\"));\n    String jobName3 = \"Job3\";\n    flow = WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName3, jobConfig).build();\n    _driver.start(flow);\n    _driver.pollForJobState(flow.getName(), TaskUtil.getNamespacedJobName(flow.getName(), jobName3),\n        TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-06-18 02:24:46","commitOrder":7,"curCode":"  public void testJobPriority() throws Exception {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 =\n        WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(),\n        TaskUtil.getNamespacedJobName(flow1.getName(), jobName1), TaskState.IN_PROGRESS);\n\n    Assert.assertTrue(TestHelper.verify(\n        () -> (countRunningPartition(flow1, jobName1) == (_numNodes * perNodeTaskLimitation)),\n        TestHelper.WAIT_DURATION));\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 =\n        WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(),\n        TaskUtil.getNamespacedJobName(flow2.getName(), jobName2), TaskState.IN_PROGRESS);\n\n    Assert.assertTrue(TestHelper.verify(() -> (countRunningPartition(flow2, jobName2) == 0),\n        TestHelper.WAIT_DURATION));\n\n    \r\n    setParticipantsCapacity(2 * perNodeTaskLimitation);\n\n    \r\n    Assert.assertTrue(TestHelper.verify(\n        () -> (countRunningPartition(flow1, jobName1) == (_numNodes * 2 * perNodeTaskLimitation)),\n        TestHelper.WAIT_DURATION));\n\n    Assert.assertTrue(TestHelper.verify(() -> (countRunningPartition(flow2, jobName2) == 0),\n        TestHelper.WAIT_DURATION));\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","date":"2020-06-18 02:24:46","endLine":163,"groupId":"10461","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobPriority","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/77/7cdf2f3f4e4aece387fc9a9546ea568dc11778.src","preCode":"  public void testJobPriority() throws InterruptedException {\n    int numTasks = 30 * _numNodes;\n    int perNodeTaskLimitation = 5;\n\n    JobConfig.Builder jobConfig = generateLongRunJobConfig(numTasks);\n\n    \r\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    \r\n    String jobName1 = \"PriorityJob1\";\n    Workflow flow1 =\n        WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName1, jobConfig).build();\n    _driver.start(flow1);\n    _driver.pollForJobState(flow1.getName(),\n        TaskUtil.getNamespacedJobName(flow1.getName(), jobName1), TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1000L);\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n\n    \r\n    String jobName2 = \"PriorityJob2\";\n    Workflow flow2 =\n        WorkflowGenerator.generateSingleJobWorkflowBuilder(jobName2, jobConfig).build();\n    _driver.start(flow2);\n    _driver.pollForJobState(flow2.getName(),\n        TaskUtil.getNamespacedJobName(flow2.getName(), jobName2), TaskState.IN_PROGRESS);\n    \r\n    Thread.sleep(1500);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    \r\n    perNodeTaskLimitation = 2 * perNodeTaskLimitation;\n    setParticipantsCapacity(perNodeTaskLimitation);\n\n    Thread.sleep(1500);\n    \r\n    Assert.assertEquals(countRunningPartition(flow1, jobName1), _numNodes * perNodeTaskLimitation);\n    Assert.assertEquals(countRunningPartition(flow2, jobName2), 0);\n\n    _driver.stop(flow1.getName());\n    _driver.pollForWorkflowState(flow1.getName(), TaskState.STOPPED);\n    _driver.stop(flow2.getName());\n    _driver.pollForWorkflowState(flow2.getName(), TaskState.STOPPED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"012216638d4daca111e9c4032ad9ec5247435cc2","commitMessage":"@@@Stabilize TestTaskThrottling (#1093)\n\nStabilize TestTaskThrottling\n\nIn this PR.  the Thread sleeps have been removed from TestTaskThrottling and replaced with TestHelper verify method.","date":"2020-06-18 02:24:46","modifiedFileCount":"1","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"}]
