[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testLocalTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"localCallback\";\n    List<String> subscribedPaths = new ArrayList<String>();\n    subscribedPaths.add(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(store, 'a', true);\n\n    \r\n    Thread.sleep(500);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(store, 'b', true);\n\n    \r\n    Thread.sleep(500);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    store.remove(\"/\", 0);\n    \r\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":165,"groupId":"1179","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalTriggeredCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1f/6eaff44f9ce1851e3c174836324a7c985f4897.src","preCode":"  public void testLocalTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"localCallback\";\n    List<String> subscribedPaths = new ArrayList<String>();\n    subscribedPaths.add(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(store, 'a', true);\n\n    \r\n    Thread.sleep(500);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(store, 'b', true);\n\n    \r\n    Thread.sleep(500);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    store.remove(\"/\", 0);\n    \r\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testZkTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testZkTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"zkCallback\";\n    List<String> subscribedPaths = Arrays.asList(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'a', true);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'b', true);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    _gZkClient.deleteRecursive(subRoot);\n    Thread.sleep(1000);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testZkTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":222,"groupId":"5588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testZkTriggeredCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1f/6eaff44f9ce1851e3c174836324a7c985f4897.src","preCode":"  public void testZkTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testZkTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"zkCallback\";\n    List<String> subscribedPaths = Arrays.asList(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'a', true);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'b', true);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    _gZkClient.deleteRecursive(subRoot);\n    Thread.sleep(1000);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testZkTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void testLocalTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"localCallback\";\n    List<String> subscribedPaths = new ArrayList<String>();\n    subscribedPaths.add(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(store, 'a', true);\n\n    \r\n    Thread.sleep(500);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(store, 'b', true);\n\n    \r\n    Thread.sleep(500);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    store.remove(\"/\", 0);\n    \r\n    for (int i = 0; i < 10; i++) {\n    \tif (listener._deleteKeys.size() == expectDeleteNodes)\n    \t\tbreak;\n    \tThread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-04-06 08:30:58","endLine":210,"groupId":"1179","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalTriggeredCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8b/e8c52d780257bfa3c374830298b0b858edec36.src","preCode":"  public void testLocalTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"localCallback\";\n    List<String> subscribedPaths = new ArrayList<String>();\n    subscribedPaths.add(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(store, 'a', true);\n\n    \r\n    Thread.sleep(500);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(store, 'b', true);\n\n    \r\n    Thread.sleep(500);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    store.remove(\"/\", 0);\n    \r\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void testZkTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testZkTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"zkCallback\";\n    List<String> subscribedPaths = Arrays.asList(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'a', true);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'b', true);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    for (int i = 0; i < 10; i++) {\n    \tif (listener._changeKeys.size() >= expectChangeNodes)\n    \t\tbreak;\n    \tThread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    _gZkClient.deleteRecursive(subRoot);\n    Thread.sleep(1000);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testZkTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-04-06 08:30:58","endLine":271,"groupId":"1857","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testZkTriggeredCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8b/e8c52d780257bfa3c374830298b0b858edec36.src","preCode":"  public void testZkTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testZkTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"zkCallback\";\n    List<String> subscribedPaths = Arrays.asList(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'a', true);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'b', true);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    _gZkClient.deleteRecursive(subRoot);\n    Thread.sleep(1000);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testZkTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"M","submitter":"Swaroop Jagadish"},{"authorTime":"2018-03-09 06:04:42","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":3,"curCode":"  public void testLocalTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"localCallback\";\n    List<String> subscribedPaths = new ArrayList<String>();\n    subscribedPaths.add(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(store, 'a', true);\n\n    \r\n    Thread.sleep(500);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(store, 'b', true);\n\n    \r\n    Thread.sleep(500);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    store.remove(\"/\", 0);\n    \r\n    for (int i = 0; i < 10; i++) {\n    \tif (listener._deleteKeys.size() == expectDeleteNodes)\n    \t\tbreak;\n    \tThread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-04-06 08:30:58","endLine":210,"groupId":"1179","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalTriggeredCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8b/e8c52d780257bfa3c374830298b0b858edec36.src","preCode":"  public void testLocalTriggeredCallback() throws Exception\n  {\n    System.out.println(\"START testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"localCallback\";\n    List<String> subscribedPaths = new ArrayList<String>();\n    subscribedPaths.add(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient),\n                                           subRoot,\n                                           subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(store, 'a', true);\n\n    \r\n    Thread.sleep(500);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(store, 'b', true);\n\n    \r\n    Thread.sleep(500);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n                      \"Should receive at least \" + expectChangeNodes\n                          + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    store.remove(\"/\", 0);\n    \r\n    for (int i = 0; i < 10; i++) {\n    \tif (listener._deleteKeys.size() == expectDeleteNodes)\n    \t\tbreak;\n    \tThread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"N"},{"authorDate":"2018-03-09 06:04:42","commitOrder":3,"curCode":"  public void testZkTriggeredCallback() throws Exception {\n    System.out\n        .println(\"START testZkTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"zkCallback\";\n    List<String> subscribedPaths = Arrays.asList(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient), subRoot,\n            subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'a', true);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'b', true);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    for (int i = 0; i < 10; i++) {\n      if (listener._changeKeys.size() >= expectChangeNodes)\n        break;\n      Thread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes, \"Should receive at least \"\n        + expectChangeNodes + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    _gZkClient.deleteRecursively(subRoot);\n    Thread.sleep(1000);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testZkTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-03-20 07:43:31","endLine":259,"groupId":"1857","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testZkTriggeredCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8c/fff6570d4ce05445eb4fb5895bc8e8cfe19d90.src","preCode":"  public void testZkTriggeredCallback() throws Exception {\n    System.out\n        .println(\"START testZkTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"zkCallback\";\n    List<String> subscribedPaths = Arrays.asList(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient), subRoot,\n            subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'a', true);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'b', true);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    for (int i = 0; i < 10; i++) {\n      if (listener._changeKeys.size() >= expectChangeNodes)\n        break;\n      Thread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes, \"Should receive at least \"\n        + expectChangeNodes + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    _gZkClient.deleteRecursive(subRoot);\n    Thread.sleep(1000);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testZkTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"0e849035379a04b079ac1274bb8aaab473df1572","commitMessage":"@@@[HELIX-679] consolidate semantics of recursively delete path in ZkClient\n","date":"2018-03-20 07:43:31","modifiedFileCount":"57","status":"M","submitter":"hrzhang"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":4,"curCode":"  public void testLocalTriggeredCallback() throws Exception {\n    System.out\n        .println(\"START testLocalTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"localCallback\";\n    List<String> subscribedPaths = new ArrayList<>();\n    subscribedPaths.add(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<>(new ZkBaseDataAccessor<>(_gZkClient), subRoot, subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(store, 'a', true);\n\n    \r\n    Thread.sleep(500);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertEquals(expectCreateNodes, listener._createKeys.size(),\n        \"Should receive \" + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(store, 'b', true);\n\n    \r\n    Thread.sleep(500);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n        \"Should receive at least \" + expectChangeNodes + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    store.remove(\"/\", 0);\n    \r\n    for (int i = 0; i < 10; i++) {\n      if (listener._deleteKeys.size() == expectDeleteNodes)\n        break;\n      Thread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertEquals(expectDeleteNodes, listener._deleteKeys.size(),\n        \"Should receive \" + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out\n        .println(\"END testLocalTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":204,"groupId":"1034","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLocalTriggeredCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4a/4ced90fbc3dac6366c8068becfea2b3d3a90aa.src","preCode":"  public void testLocalTriggeredCallback() throws Exception {\n    System.out.println(\"START testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"localCallback\";\n    List<String> subscribedPaths = new ArrayList<String>();\n    subscribedPaths.add(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient), subRoot,\n            subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(store, 'a', true);\n\n    \r\n    Thread.sleep(500);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(store, 'b', true);\n\n    \r\n    Thread.sleep(500);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes, \"Should receive at least \"\n        + expectChangeNodes + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    store.remove(\"/\", 0);\n    \r\n    for (int i = 0; i < 10; i++) {\n      if (listener._deleteKeys.size() == expectDeleteNodes)\n        break;\n      Thread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testLocalTriggeredCallback() at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":4,"curCode":"  public void testZkTriggeredCallback() throws Exception {\n    System.out\n        .println(\"START testZkTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"zkCallback\";\n    List<String> subscribedPaths = Collections.singletonList(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<>(new ZkBaseDataAccessor<>(_gZkClient), subRoot, subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'a', true);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertEquals(expectCreateNodes, listener._createKeys.size(),\n        \"Should receive \" + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'b', true);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    for (int i = 0; i < 10; i++) {\n      if (listener._changeKeys.size() >= expectChangeNodes)\n        break;\n      Thread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes,\n        \"Should receive at least \" + expectChangeNodes + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    _gZkClient.deleteRecursively(subRoot);\n    Thread.sleep(1000);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertEquals(expectDeleteNodes, listener._deleteKeys.size(),\n        \"Should receive \" + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testZkTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":260,"groupId":"1034","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testZkTriggeredCallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4a/4ced90fbc3dac6366c8068becfea2b3d3a90aa.src","preCode":"  public void testZkTriggeredCallback() throws Exception {\n    System.out\n        .println(\"START testZkTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n\n    String subRoot = _root + \"/\" + \"zkCallback\";\n    List<String> subscribedPaths = Arrays.asList(subRoot);\n    ZkHelixPropertyStore<ZNRecord> store =\n        new ZkHelixPropertyStore<ZNRecord>(new ZkBaseDataAccessor<ZNRecord>(_gZkClient), subRoot,\n            subscribedPaths);\n\n    \r\n    \r\n    TestListener listener = new TestListener();\n    store.subscribe(\"/\", listener);\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'a', true);\n    int expectCreateNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    Thread.sleep(500);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._createKeys.size() == expectCreateNodes, \"Should receive \"\n        + expectCreateNodes + \" create callbacks\");\n\n    \r\n    listener.reset();\n    setNodes(_gZkClient, subRoot, 'b', true);\n    int expectChangeNodes = firstLevelNr * secondLevelNr;\n    for (int i = 0; i < 10; i++) {\n      if (listener._changeKeys.size() >= expectChangeNodes)\n        break;\n      Thread.sleep(500);\n    }\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._changeKeys.size() >= expectChangeNodes, \"Should receive at least \"\n        + expectChangeNodes + \" change callbacks\");\n\n    \r\n    listener.reset();\n    int expectDeleteNodes = 1 + firstLevelNr + firstLevelNr * secondLevelNr;\n    _gZkClient.deleteRecursively(subRoot);\n    Thread.sleep(1000);\n\n    System.out.println(\"createKey#:\" + listener._createKeys.size() + \", changeKey#:\"\n        + listener._changeKeys.size() + \", deleteKey#:\" + listener._deleteKeys.size());\n    Assert.assertTrue(listener._deleteKeys.size() == expectDeleteNodes, \"Should receive \"\n        + expectDeleteNodes + \" delete callbacks\");\n\n    store.stop();\n    System.out.println(\"END testZkTriggeredCallback() at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
