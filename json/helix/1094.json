[{"authorTime":"2014-07-16 02:33:43","codes":[{"authorDate":"2014-07-16 02:33:43","commitOrder":2,"curCode":"  public void test() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        1, \r\n        \"MasterSlave\", true); \r\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    BaseDataAccessor<ZNRecord> baseAccessor = accessor.getBaseDataAccessor();\n\n    HelixManager manager = mock(HelixManager.class);\n    when(manager.getHelixDataAccessor()).thenReturn(accessor);\n    when(manager.getClusterName()).thenReturn(clusterName);\n\n    \r\n    \r\n    ZKPathDataDumpTask task = new ZKPathDataDumpTask(manager, 0L, 0L, Integer.MAX_VALUE);\n    task.run();\n    PropertyKey controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    PropertyKey controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    PropertyKey statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    PropertyKey errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n\n    \r\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB\");\n    accessor.setProperty(controllerStatusUpdateKey, new StatusUpdate(new ZNRecord(\n        \"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertFalse(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(errorKey.getPath(), 0));\n\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2014-07-17 02:34:37","endLine":114,"groupId":"3587","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d0/73dd25a00b9343d53592039bd36a7b6edb1fe9.src","preCode":"  public void test() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        1, \r\n        \"MasterSlave\", true); \r\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    BaseDataAccessor<ZNRecord> baseAccessor = accessor.getBaseDataAccessor();\n\n    HelixManager manager = mock(HelixManager.class);\n    when(manager.getHelixDataAccessor()).thenReturn(accessor);\n    when(manager.getClusterName()).thenReturn(clusterName);\n\n    \r\n    \r\n    ZKPathDataDumpTask task = new ZKPathDataDumpTask(manager, 0L, 0L, Integer.MAX_VALUE);\n    task.run();\n    PropertyKey controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    PropertyKey controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    PropertyKey statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    PropertyKey errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n\n    \r\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB\");\n    accessor.setProperty(controllerStatusUpdateKey, new StatusUpdate(new ZNRecord(\n        \"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertFalse(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(errorKey.getPath(), 0));\n\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/TestZKPathDataDumpTask.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"MB"},{"authorDate":"2014-07-16 02:33:43","commitOrder":2,"curCode":"  public void testCapacityReached() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        1, \r\n        \"MasterSlave\", true); \r\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    BaseDataAccessor<ZNRecord> baseAccessor = accessor.getBaseDataAccessor();\n\n    HelixManager manager = mock(HelixManager.class);\n    when(manager.getHelixDataAccessor()).thenReturn(accessor);\n    when(manager.getClusterName()).thenReturn(clusterName);\n\n    \r\n    \r\n    ZKPathDataDumpTask task = new ZKPathDataDumpTask(manager, Long.MAX_VALUE, Long.MAX_VALUE, 1);\n    task.run();\n    PropertyKey controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    PropertyKey controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    PropertyKey statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    PropertyKey errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(errorKey.getPath(), 0));\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n\n    \r\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB\");\n    accessor.setProperty(controllerStatusUpdateKey, new StatusUpdate(new ZNRecord(\n        \"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(errorKey.getPath(), 0));\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_1\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_1\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB1\");\n    accessor.setProperty(controllerStatusUpdateKey, new StatusUpdate(new ZNRecord(\n        \"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB1_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertFalse(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(errorKey.getPath(), 0));\n  }\n","date":"2014-07-17 02:34:37","endLine":197,"groupId":"6995","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCapacityReached","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d0/73dd25a00b9343d53592039bd36a7b6edb1fe9.src","preCode":"  public void testCapacityReached() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        1, \r\n        \"MasterSlave\", true); \r\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    BaseDataAccessor<ZNRecord> baseAccessor = accessor.getBaseDataAccessor();\n\n    HelixManager manager = mock(HelixManager.class);\n    when(manager.getHelixDataAccessor()).thenReturn(accessor);\n    when(manager.getClusterName()).thenReturn(clusterName);\n\n    \r\n    \r\n    ZKPathDataDumpTask task = new ZKPathDataDumpTask(manager, Long.MAX_VALUE, Long.MAX_VALUE, 1);\n    task.run();\n    PropertyKey controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    PropertyKey controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    PropertyKey statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    PropertyKey errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(errorKey.getPath(), 0));\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n\n    \r\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB\");\n    accessor.setProperty(controllerStatusUpdateKey, new StatusUpdate(new ZNRecord(\n        \"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(errorKey.getPath(), 0));\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_1\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_1\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB1\");\n    accessor.setProperty(controllerStatusUpdateKey, new StatusUpdate(new ZNRecord(\n        \"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB1_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertFalse(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(errorKey.getPath(), 0));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/TestZKPathDataDumpTask.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"371e65769774d4e116b97c0b88d52e2be545c8ec","commitMessage":"@@@[HELIX-472] Errors should be cleaned up less frequently\n","date":"2014-07-17 02:34:37","modifiedFileCount":"4","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"  public void test() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        1, \r\n        \"MasterSlave\", true); \r\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    BaseDataAccessor<ZNRecord> baseAccessor = accessor.getBaseDataAccessor();\n\n    HelixManager manager = mock(HelixManager.class);\n    when(manager.getHelixDataAccessor()).thenReturn(accessor);\n    when(manager.getClusterName()).thenReturn(clusterName);\n\n    \r\n    \r\n    ZKPathDataDumpTask task = new ZKPathDataDumpTask(manager, 0L, 0L, Integer.MAX_VALUE);\n    task.run();\n    PropertyKey controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    PropertyKey controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    PropertyKey statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    PropertyKey errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n\n    \r\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB\");\n    accessor.setProperty(controllerStatusUpdateKey,\n        new StatusUpdate(new ZNRecord(\"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertFalse(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(errorKey.getPath(), 0));\n\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":113,"groupId":"1094","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/daee375ac860533ba63479361abb99b3b570eb.src","preCode":"  public void test() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        1, \r\n        \"MasterSlave\", true); \r\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    BaseDataAccessor<ZNRecord> baseAccessor = accessor.getBaseDataAccessor();\n\n    HelixManager manager = mock(HelixManager.class);\n    when(manager.getHelixDataAccessor()).thenReturn(accessor);\n    when(manager.getClusterName()).thenReturn(clusterName);\n\n    \r\n    \r\n    ZKPathDataDumpTask task = new ZKPathDataDumpTask(manager, 0L, 0L, Integer.MAX_VALUE);\n    task.run();\n    PropertyKey controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    PropertyKey controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    PropertyKey statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    PropertyKey errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n\n    \r\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB\");\n    accessor.setProperty(controllerStatusUpdateKey, new StatusUpdate(new ZNRecord(\n        \"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertFalse(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(errorKey.getPath(), 0));\n\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/TestZKPathDataDumpTask.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"  public void testCapacityReached() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        1, \r\n        \"MasterSlave\", true); \r\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    BaseDataAccessor<ZNRecord> baseAccessor = accessor.getBaseDataAccessor();\n\n    HelixManager manager = mock(HelixManager.class);\n    when(manager.getHelixDataAccessor()).thenReturn(accessor);\n    when(manager.getClusterName()).thenReturn(clusterName);\n\n    \r\n    \r\n    ZKPathDataDumpTask task = new ZKPathDataDumpTask(manager, Long.MAX_VALUE, Long.MAX_VALUE, 1);\n    task.run();\n    PropertyKey controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    PropertyKey controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    PropertyKey statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    PropertyKey errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(errorKey.getPath(), 0));\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n\n    \r\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB\");\n    accessor.setProperty(controllerStatusUpdateKey,\n        new StatusUpdate(new ZNRecord(\"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(errorKey.getPath(), 0));\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_1\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_1\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB1\");\n    accessor.setProperty(controllerStatusUpdateKey,\n        new StatusUpdate(new ZNRecord(\"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB1_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertFalse(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(errorKey.getPath(), 0));\n    deleteCluster(clusterName);\n  }\n","date":"2019-05-25 09:19:21","endLine":197,"groupId":"1094","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCapacityReached","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d2/daee375ac860533ba63479361abb99b3b570eb.src","preCode":"  public void testCapacityReached() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 1;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        1, \r\n        \"MasterSlave\", true); \r\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    BaseDataAccessor<ZNRecord> baseAccessor = accessor.getBaseDataAccessor();\n\n    HelixManager manager = mock(HelixManager.class);\n    when(manager.getHelixDataAccessor()).thenReturn(accessor);\n    when(manager.getClusterName()).thenReturn(clusterName);\n\n    \r\n    \r\n    ZKPathDataDumpTask task = new ZKPathDataDumpTask(manager, Long.MAX_VALUE, Long.MAX_VALUE, 1);\n    task.run();\n    PropertyKey controllerStatusUpdateKey = keyBuilder.controllerTaskStatuses();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    PropertyKey controllerErrorKey = keyBuilder.controllerTaskErrors();\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    PropertyKey statusUpdateKey = keyBuilder.stateTransitionStatus(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    PropertyKey errorKey = keyBuilder.stateTransitionErrors(\"localhost_12918\");\n    Assert.assertTrue(baseAccessor.exists(errorKey.getPath(), 0));\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_0\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n\n    \r\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB\");\n    accessor.setProperty(controllerStatusUpdateKey, new StatusUpdate(new ZNRecord(\n        \"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertTrue(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertTrue(baseAccessor.exists(errorKey.getPath(), 0));\n\n    \r\n    statusUpdateKey =\n        keyBuilder.stateTransitionStatus(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_1\");\n    accessor.setProperty(statusUpdateKey, new StatusUpdate(new ZNRecord(\"statusUpdate\")));\n    errorKey =\n        keyBuilder.stateTransitionError(\"localhost_12918\", \"session_0\", \"TestDB0\", \"TestDB0_1\");\n    accessor.setProperty(errorKey, new Error(new ZNRecord(\"error\")));\n    controllerStatusUpdateKey = keyBuilder.controllerTaskStatus(\"session_0\", \"TestDB1\");\n    accessor.setProperty(controllerStatusUpdateKey, new StatusUpdate(new ZNRecord(\n        \"controllerStatusUpdate\")));\n    controllerErrorKey = keyBuilder.controllerTaskError(\"TestDB1_error\");\n    accessor.setProperty(controllerErrorKey, new Error(new ZNRecord(\"controllerError\")));\n\n    \r\n    task.run();\n    Assert.assertFalse(baseAccessor.exists(controllerStatusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(controllerErrorKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(statusUpdateKey.getPath(), 0));\n    Assert.assertFalse(baseAccessor.exists(errorKey.getPath(), 0));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/monitoring/TestZKPathDataDumpTask.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
