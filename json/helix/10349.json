[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"1000\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    startParticipants();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n  }\n","date":"2017-11-08 08:48:26","endLine":83,"groupId":"5526","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostZkConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/94/e5e969504cf8c8ac264b305a79eecb484d2332.src","preCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"1000\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    startParticipants();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testLostZkConnectionNegative()\n      throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"10\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    stopParticipants();\n    startParticipants();\n\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    try{\n      _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n      Assert.fail(\"Test failure!\");\n    } catch (HelixException ex) {\n      \r\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":113,"groupId":"5526","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLostZkConnectionNegative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/94/e5e969504cf8c8ac264b305a79eecb484d2332.src","preCode":"  public void testLostZkConnectionNegative()\n      throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"10\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    stopParticipants();\n    startParticipants();\n\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    try{\n      _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n      Assert.fail(\"Test failure!\");\n    } catch (HelixException ex) {\n      \r\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2018-05-18 04:29:31","codes":[{"authorDate":"2018-05-18 04:29:31","commitOrder":2,"curCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"1000\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    startParticipants(_zkAddr);\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n  }\n","date":"2018-07-10 06:56:40","endLine":86,"groupId":"5526","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostZkConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/37/21b2c6c9784e62b62c2a6d783f6a3be48a87aa.src","preCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"1000\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    startParticipants();\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2018-05-18 04:29:31","commitOrder":2,"curCode":"  public void testLostZkConnectionNegative()\n      throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"10\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    stopParticipants();\n    startParticipants(_zkAddr);\n\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    try{\n      _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n      Assert.fail(\"Test failure!\");\n    } catch (HelixException ex) {\n      \r\n    }\n  }\n","date":"2018-07-10 06:56:40","endLine":116,"groupId":"5526","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLostZkConnectionNegative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/37/21b2c6c9784e62b62c2a6d783f6a3be48a87aa.src","preCode":"  public void testLostZkConnectionNegative()\n      throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"10\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    stopParticipants();\n    startParticipants();\n\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    try{\n      _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n      Assert.fail(\"Test failure!\");\n    } catch (HelixException ex) {\n      \r\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"aaa632f3d53a0268bfbf1b7ed18996cdc72894a4","commitMessage":"@@@Fix TestZkConnectionLost to use seperate zk server to avoid stuck other tests.\n","date":"2018-07-10 06:56:40","modifiedFileCount":"2","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-02 01:43:14","codes":[{"authorDate":"2018-06-02 01:43:14","commitOrder":3,"curCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"1000\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    startParticipants(_zkAddr);\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n  }\n","date":"2018-07-13 04:45:17","endLine":86,"groupId":"5526","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostZkConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/85/b855426e4b5aeb1ce354e262f4f58bd0638dfb.src","preCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"1000\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    startParticipants(_zkAddr);\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2018-06-02 01:43:14","commitOrder":3,"curCode":"  public void testLostZkConnectionNegative()\n      throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"10\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    stopParticipants();\n    startParticipants(_zkAddr);\n\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    try{\n      _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n      Assert.fail(\"Test failure!\");\n    } catch (HelixException ex) {\n      \r\n    }\n  }\n","date":"2018-07-13 04:45:17","endLine":116,"groupId":"5526","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLostZkConnectionNegative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/85/b855426e4b5aeb1ce354e262f4f58bd0638dfb.src","preCode":"  public void testLostZkConnectionNegative()\n      throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"10\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    stopParticipants();\n    startParticipants(_zkAddr);\n\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    try{\n      _driver.pollForWorkflowState(scheduledQueue, 10000, TaskState.COMPLETED);\n      Assert.fail(\"Test failure!\");\n    } catch (HelixException ex) {\n      \r\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"e2b1277c84f877fee2accde641334369740a3155","commitMessage":"@@@Increase TestZkConnectionLost timeout to stable the test.\n\nRB=1326718\nG=helix-reviewers\nA=lxia\n","date":"2018-07-13 04:45:17","modifiedFileCount":"2","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2018-06-07 08:07:31","codes":[{"authorDate":"2018-06-07 08:07:31","commitOrder":4,"curCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"1000\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"1000\");\n    try {\n      String queueName = TestHelper.getTestMethodName();\n\n      startParticipants(_zkAddr);\n\n      \r\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n      createAndEnqueueJob(queueBuild, 3);\n\n      _driver.start(queueBuild.build());\n\n      restartZkServer();\n\n      WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n      String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n      _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","date":"2018-07-13 04:45:17","endLine":93,"groupId":"5526","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostZkConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/31/9f5408fdcd3a5b29016c63901032281696cdd9.src","preCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"1000\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    startParticipants(_zkAddr);\n\n    \r\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n    _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2018-06-07 08:07:31","commitOrder":4,"curCode":"  public void testLostZkConnectionNegative() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"10\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"1000\");\n\n    try {\n      String queueName = TestHelper.getTestMethodName();\n\n      stopParticipants();\n      startParticipants(_zkAddr);\n\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n      createAndEnqueueJob(queueBuild, 3);\n\n      _driver.start(queueBuild.build());\n\n      restartZkServer();\n\n      WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n      \r\n      String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n      try {\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n        Assert.fail(\"Test failure!\");\n      } catch (HelixException ex) {\n        \r\n      }\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","date":"2018-07-13 04:45:17","endLine":128,"groupId":"5526","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLostZkConnectionNegative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/31/9f5408fdcd3a5b29016c63901032281696cdd9.src","preCode":"  public void testLostZkConnectionNegative()\n      throws Exception {\n    System.setProperty(\"helixmanager.waitForConnectedTimeout\", \"10\");\n    System.setProperty(\"zk.session.timeout\", \"1000\");\n    String queueName = TestHelper.getTestMethodName();\n\n    stopParticipants();\n    startParticipants(_zkAddr);\n\n    LOG.info(\"Starting job-queue: \" + queueName);\n    JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n    createAndEnqueueJob(queueBuild, 3);\n\n    _driver.start(queueBuild.build());\n\n    restartZkServer();\n\n    WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n    \r\n    String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n    try{\n      _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n      Assert.fail(\"Test failure!\");\n    } catch (HelixException ex) {\n      \r\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"be619d462883dbab67b8d6b2e75d1b7d3b8a161b","commitMessage":"@@@Fix ZK configurations in the tests.\n","date":"2018-07-13 04:45:17","modifiedFileCount":"3","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2018-06-07 08:07:31","codes":[{"authorDate":"2019-05-17 08:40:34","commitOrder":5,"curCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"1000\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"1000\");\n    try {\n      String queueName = TestHelper.getTestMethodName();\n      startParticipants(_zkAddr);\n      HelixDataAccessor accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n      TestHelper.verify(() -> {\n        List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n        for (MockParticipantManager participant : _participants) {\n          if (!liveInstances.contains(participant.getInstanceName())\n              || !participant.isConnected()) {\n            return false;\n          }\n        }\n        return true;\n      }, TestHelper.WAIT_DURATION);\n\n      \r\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60);\n      createAndEnqueueJob(queueBuild, 3);\n      _driver.start(queueBuild.build());\n      restartZkServer();\n      try {\n        WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n        String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n      } catch (Exception e) {\n        \r\n        \r\n        WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n        String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n      }\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","date":"2019-05-25 09:19:21","endLine":146,"groupId":"3311","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostZkConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0b/bfb52255ddeec904f36158bcc4823f6af73bf1.src","preCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"1000\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"1000\");\n    try {\n      String queueName = TestHelper.getTestMethodName();\n\n      startParticipants(_zkAddr);\n\n      \r\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n      createAndEnqueueJob(queueBuild, 3);\n\n      _driver.start(queueBuild.build());\n\n      restartZkServer();\n\n      WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n      String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n      _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2018-06-07 08:07:31","commitOrder":5,"curCode":"  public void testLostZkConnectionNegative() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"10\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"1000\");\n\n    try {\n      String queueName = TestHelper.getTestMethodName();\n\n      stopParticipants();\n      startParticipants(_zkAddr);\n\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n      createAndEnqueueJob(queueBuild, 3);\n\n      _driver.start(queueBuild.build());\n\n      restartZkServer();\n\n      WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n      \r\n      String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n      try {\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n        Assert.fail(\"Test failure!\");\n      } catch (HelixException ex) {\n        \r\n      }\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","date":"2018-07-13 04:45:17","endLine":128,"groupId":"5526","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLostZkConnectionNegative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/31/9f5408fdcd3a5b29016c63901032281696cdd9.src","preCode":"  public void testLostZkConnectionNegative() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"10\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"1000\");\n\n    try {\n      String queueName = TestHelper.getTestMethodName();\n\n      stopParticipants();\n      startParticipants(_zkAddr);\n\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n      createAndEnqueueJob(queueBuild, 3);\n\n      _driver.start(queueBuild.build());\n\n      restartZkServer();\n\n      WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n      \r\n      String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n      try {\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n        Assert.fail(\"Test failure!\");\n      } catch (HelixException ex) {\n        \r\n      }\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"}],"commitId":"f7b1cf0434c685b71052ec7c09864e9e8120eeb7","commitMessage":"@@@TEST: Further fix Helix test suite\n\nThis diff does the following:\n1. Replace Thread.sleep statements with TestHelper.verify (polling with conditions)\n2. Increases GC pause between tests to 4 seconds\n3. Improve ZKHelixClusterVerifier's verifyByPolling method by adding invokeRebalance() method\n\nRB=1669831\n\nRB=1669831\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"19","status":"M","submitter":"Hunter Lee"},{"authorTime":"2018-06-07 08:07:31","codes":[{"authorDate":"2021-08-04 01:57:12","commitOrder":6,"curCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"5000\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"5000\");\n    try {\n      String queueName = TestHelper.getTestMethodName();\n      startParticipants(_zkAddr);\n      HelixDataAccessor accessor =\n          new ZKHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor(_zkAddr));\n      Assert.assertTrue(TestHelper.verify(() -> {\n        List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n        for (MockParticipantManager participant : _participants) {\n          if (!liveInstances.contains(participant.getInstanceName())\n              || !participant.isConnected()) {\n            return false;\n          }\n        }\n        return true;\n      }, TestHelper.WAIT_DURATION));\n\n      \r\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60);\n      createAndEnqueueJob(queueBuild, 3);\n      _driver.start(queueBuild.build());\n      restartZkServer();\n      try {\n        WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n        String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n      } catch (Exception e) {\n        \r\n        \r\n        WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n        String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n      }\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","date":"2021-08-04 01:57:12","endLine":182,"groupId":"10349","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testLostZkConnection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9d/bdcfb9ffc006a7cb3012ff7680b3da9fc93103.src","preCode":"  public void testLostZkConnection() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"1000\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"1000\");\n    try {\n      String queueName = TestHelper.getTestMethodName();\n      startParticipants(_zkAddr);\n      HelixDataAccessor accessor = new ZKHelixDataAccessor(CLUSTER_NAME, _baseAccessor);\n      TestHelper.verify(() -> {\n        List<String> liveInstances = accessor.getChildNames(accessor.keyBuilder().liveInstances());\n        for (MockParticipantManager participant : _participants) {\n          if (!liveInstances.contains(participant.getInstanceName())\n              || !participant.isConnected()) {\n            return false;\n          }\n        }\n        return true;\n      }, TestHelper.WAIT_DURATION);\n\n      \r\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 60);\n      createAndEnqueueJob(queueBuild, 3);\n      _driver.start(queueBuild.build());\n      restartZkServer();\n      try {\n        WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n        String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n      } catch (Exception e) {\n        \r\n        \r\n        WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n        String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n      }\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2018-06-07 08:07:31","commitOrder":6,"curCode":"  public void testLostZkConnectionNegative() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"10\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"1000\");\n\n    try {\n      String queueName = TestHelper.getTestMethodName();\n\n      stopParticipants();\n      startParticipants(_zkAddr);\n\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n      createAndEnqueueJob(queueBuild, 3);\n\n      _driver.start(queueBuild.build());\n\n      restartZkServer();\n\n      WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n      \r\n      String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n      try {\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n        Assert.fail(\"Test failure!\");\n      } catch (HelixException ex) {\n        \r\n      }\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","date":"2018-07-13 04:45:17","endLine":128,"groupId":"10349","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testLostZkConnectionNegative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/31/9f5408fdcd3a5b29016c63901032281696cdd9.src","preCode":"  public void testLostZkConnectionNegative() throws Exception {\n    System.setProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT, \"10\");\n    System.setProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT, \"1000\");\n\n    try {\n      String queueName = TestHelper.getTestMethodName();\n\n      stopParticipants();\n      startParticipants(_zkAddr);\n\n      LOG.info(\"Starting job-queue: \" + queueName);\n      JobQueue.Builder queueBuild = TaskTestUtil.buildRecurrentJobQueue(queueName, 0, 6000);\n      createAndEnqueueJob(queueBuild, 3);\n\n      _driver.start(queueBuild.build());\n\n      restartZkServer();\n\n      WorkflowContext wCtx = TaskTestUtil.pollForWorkflowContext(_driver, queueName);\n      \r\n      String scheduledQueue = wCtx.getLastScheduledSingleWorkflow();\n\n      try {\n        _driver.pollForWorkflowState(scheduledQueue, 30000, TaskState.COMPLETED);\n        Assert.fail(\"Test failure!\");\n      } catch (HelixException ex) {\n        \r\n      }\n    } finally {\n      System.clearProperty(SystemPropertyKeys.ZK_WAIT_CONNECTED_TIMEOUT);\n      System.clearProperty(SystemPropertyKeys.ZK_SESSION_TIMEOUT);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestZkConnectionLost.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"}],"commitId":"1b3b31c752f8a594b12bd950a4f6c3278a63bccf","commitMessage":"@@@Fix TestZkConnectionLost (#1824)\n\nFix TestZkConnectionLost by adding longer connection timeout and fixing logic that are incorrect.\n\nCo-authored-by: Neal Sun <nesun@nesun-mn1.linkedin.biz>","date":"2021-08-04 01:57:12","modifiedFileCount":"1","status":"M","submitter":"Neal Sun"}]
