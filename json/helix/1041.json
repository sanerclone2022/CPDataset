[{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2018-09-27 02:39:42","commitOrder":1,"curCode":"  public static void simulateZkStateReconnected(HelixZkClient client) {\n    ZkClient zkClient = (ZkClient) client;\n    WatchedEvent event = new WatchedEvent(EventType.None, KeeperState.Disconnected, null);\n    zkClient.process(event);\n    event = new WatchedEvent(EventType.None, KeeperState.SyncConnected, null);\n    zkClient.process(event);\n  }\n","date":"2018-10-30 09:15:22","endLine":77,"groupId":"1746","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"simulateZkStateReconnected","params":"(HelixZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/cd2e85873605eac077e1ba9014995cbc8ccf92.src","preCode":"  public static void simulateZkStateReconnected(HelixZkClient client) {\n    ZkClient zkClient = (ZkClient) client;\n    WatchedEvent event = new WatchedEvent(EventType.None, KeeperState.Disconnected, null);\n    zkClient.process(event);\n    event = new WatchedEvent(EventType.None, KeeperState.SyncConnected, null);\n    zkClient.process(event);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2018-09-27 02:39:42","commitOrder":1,"curCode":"  public static void injectExpire(HelixZkClient client)\n      throws ExecutionException, InterruptedException {\n    final ZkClient zkClient = (ZkClient) client;\n    Future future = _executor.submit(new Runnable() {\n      @Override\n      public void run() {\n        WatchedEvent event =\n            new WatchedEvent(Watcher.Event.EventType.None, Watcher.Event.KeeperState.Expired, null);\n        zkClient.process(event);\n      }\n    });\n    future.get();\n  }\n","date":"2018-10-30 09:15:22","endLine":484,"groupId":"415","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"injectExpire","params":"(HelixZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/19/cd2e85873605eac077e1ba9014995cbc8ccf92.src","preCode":"  public static void injectExpire(HelixZkClient client)\n      throws ExecutionException, InterruptedException {\n    final ZkClient zkClient = (ZkClient) client;\n    Future future = _executor.submit(new Runnable() {\n      @Override\n      public void run() {\n        WatchedEvent event =\n            new WatchedEvent(Watcher.Event.EventType.None, Watcher.Event.KeeperState.Expired, null);\n        zkClient.process(event);\n      }\n    });\n    future.get();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"B"}],"commitId":"9d7364d7abba3932a1b25e96e4eb9dd3e203cec9","commitMessage":"@@@Using HelixZkClient to replace ZkClient in helix-core and helix-rest.\n\n1. Replace as much usage as possible. For the raw ZkClient tests.  the usages are kept.\n2. For backward compatibility.  some public interfaces still returns ZkClient. Marks them as Deprecated.\n","date":"2018-10-30 09:15:22","modifiedFileCount":"60","status":"B","submitter":"Jiajun Wang"},{"authorTime":"2020-03-13 00:44:38","codes":[{"authorDate":"2020-03-13 00:44:38","commitOrder":2,"curCode":"  public static void simulateZkStateReconnected(RealmAwareZkClient client) {\n    ZkClient zkClient = (ZkClient) client;\n    WatchedEvent event = new WatchedEvent(EventType.None, KeeperState.Disconnected, null);\n    zkClient.process(event);\n    event = new WatchedEvent(EventType.None, KeeperState.SyncConnected, null);\n    zkClient.process(event);\n  }\n","date":"2020-04-09 08:23:30","endLine":81,"groupId":"1041","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"simulateZkStateReconnected","params":"(RealmAwareZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/dded45513ce3f9b71db533db37b929ed48ed34.src","preCode":"  public static void simulateZkStateReconnected(HelixZkClient client) {\n    ZkClient zkClient = (ZkClient) client;\n    WatchedEvent event = new WatchedEvent(EventType.None, KeeperState.Disconnected, null);\n    zkClient.process(event);\n    event = new WatchedEvent(EventType.None, KeeperState.SyncConnected, null);\n    zkClient.process(event);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-03-13 00:44:38","commitOrder":2,"curCode":"  public static void injectExpire(RealmAwareZkClient client)\n      throws ExecutionException, InterruptedException {\n    final ZkClient zkClient = (ZkClient) client;\n    Future future = _executor.submit(new Runnable() {\n      @Override\n      public void run() {\n        WatchedEvent event =\n            new WatchedEvent(Watcher.Event.EventType.None, Watcher.Event.KeeperState.Expired, null);\n        zkClient.process(event);\n      }\n    });\n    future.get();\n  }\n","date":"2020-04-09 08:23:30","endLine":484,"groupId":"1041","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"injectExpire","params":"(RealmAwareZkClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/73/dded45513ce3f9b71db533db37b929ed48ed34.src","preCode":"  public static void injectExpire(HelixZkClient client)\n      throws ExecutionException, InterruptedException {\n    final ZkClient zkClient = (ZkClient) client;\n    Future future = _executor.submit(new Runnable() {\n      @Override\n      public void run() {\n        WatchedEvent event =\n            new WatchedEvent(Watcher.Event.EventType.None, Watcher.Event.KeeperState.Expired, null);\n        zkClient.process(event);\n      }\n    });\n    future.get();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/ZkTestHelper.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"}],"commitId":"289085f1ce7d2d9665447e9b114c15645f618937","commitMessage":"@@@Make ZKHelixAdmin and ZKHelixManager Realm-aware (#846)\n\nTo make Helix Java APIs realm-aware.  we need to make both ZKHelixAdmin and ZKHelixManager realm-aware. This commit adds a Builder to set client config and connection config for building realm-aware ZkClients underneath.","date":"2020-04-09 08:23:30","modifiedFileCount":"14","status":"M","submitter":"Huizhi Lu"}]
