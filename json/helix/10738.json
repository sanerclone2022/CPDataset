[{"authorTime":"2018-05-12 02:44:11","codes":[{"authorDate":"2018-05-12 02:44:11","commitOrder":1,"curCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2018-07-10 06:26:25","endLine":507,"groupId":"1742","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"markJobComplete","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b4/47cf32c49a3a2990b1598f0ca6d32ac3e9ae85.src","preCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"B"},{"authorDate":"2018-05-12 02:44:11","commitOrder":1,"curCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2018-07-10 06:26:25","endLine":521,"groupId":"4574","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"markJobFailed","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b4/47cf32c49a3a2990b1598f0ca6d32ac3e9ae85.src","preCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"B"}],"commitId":"84c2feabbc391e4069717d2a3c5b8c4adf32d946","commitMessage":"@@@Create AbstractTaskDispatcher for future Task Framework\n\nRefactor existing code logic that move future needed logic to AbstractTaskDispatcher.\n","date":"2018-07-10 06:26:25","modifiedFileCount":"4","status":"B","submitter":"Junkai Xue"},{"authorTime":"2018-07-14 05:45:41","codes":[{"authorDate":"2018-07-14 05:45:41","commitOrder":2,"curCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap, ClusterDataCache clusterDataCache) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2018-07-14 08:38:58","endLine":724,"groupId":"4574","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"markJobComplete","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@ClusterDataCacheclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/36/e5698d2bfc2407a2cabf1bde1ea44acbf8a521.src","preCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":713,"status":"M"},{"authorDate":"2018-07-14 05:45:41","commitOrder":2,"curCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      ClusterDataCache clusterDataCache) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2018-07-14 08:38:58","endLine":739,"groupId":"4574","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"markJobFailed","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@ClusterDataCacheclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/36/e5698d2bfc2407a2cabf1bde1ea44acbf8a521.src","preCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":726,"status":"M"}],"commitId":"4db61b56e473b64ec9956f694dd2ac6a8d328ed4","commitMessage":"@@@[HELIX-730] Add ThreadCountBasedAssignmentCalculator and integrate with Workflow/JobRebalancer and fix rebalancing logic\n\nFor quota-based scheduling of tasks.  we have added the TaskAssigner interface that takes into account AssignableInstances by way of AssignableInstanceManager. In order to use this in the currently-existing pipeline prior to Task Framework 2.0.  GenericTaskAssignmentCalculator was replaced with ThreadCountBasedAssignmentCalculator.  which is a wrapper around TaskAssigner. Necessary adjustments were made in Workflow/JobRebalancer for this replacement. Also the rebalance logic in Workflow/JobRebalancer was reviewed and fixed. Additionally.  TestQuotaBasedScheduling is added to test quota-based task scheduling. Note that quotas will apply to both generic and targeted jobs.\n\nA few bugs were uncovered during this process such as the faulty retry logic that never really got tasks to restart. For more details.  see the changelist below:\n\nChangelist:\n    1. Add ThreadCountBasedAssignmentCalculator.  a wrapper around ThreadCountBasedTaskAssigner\n    2. Make logic changes in JobRebalancer to enable the use of ThreadCountBasedAssignmentCalculator\n    3. Fix the failing test by using a thread-safe map and rename TestGenericTaskAssignmentCalculator to TestTaskAssignmentCalculator to better reflect what its tests are doing\n    4. Add retry logic that was previously absent for INIT and DROPPED tasks in JobRebalancer\n    5. Add TestQuotaBasedScheduling to test that jobs and tasks were being assigned and scheduled per quota config set in ClusterConfig\n    6. Add more log messages to aid with task-scheduling debugging in AssignableInstance\n    7. In AbstractTaskDispatcher.  for tasks that are STOPPED.  TIMED_OUT.  TASK_ERROR.  the retry logic was newly implemented so that they get re-started correctly\n    8. In AbstractTaskDispatcher.  when enforcing overlapAssign for jobs with isAllowOverlapAssignment().  a fix was implemented so that only jobs whose state is IN_PROGRESS are considered\n    9. In AbstractTaskDispatcher.  isWorkflowFinished() method was modified so that non-active jobs will have their tasks' resource freed from AssignableInstances to prevent resource leak\n   10. In markJobFailed() and markJobCompleted().  non-active jobs will have their tasks' resource freed from AssignableInstances to prevent resource leak\n   11. Fix the logic so that quotas do not apply to targeted jobs\n   12. Fix TestTaskRebalancer (assumes Consistent Hashing.  which is no longer used)\n   13. Fix TestIndependentTaskRebalancer (assumes Consistent Hashing.  no longer used)\n   14. Assignment logic was improved so that incomplete tasks whose assigned participants are no longer live will be re-assigned accordingly\n   15. Fix TestTaskRebalanceFailover (tasks on non-live instances will be re-assigned promptly)\n   16. Fix TestRebalanceRunningTask (targeted jobs will get tasks reassigned upon liveInstance and currentState change)\n   17. Fix a bug in FixedAssignmentCalculator and assignment logic for targeted jobs such that a task index will no longer be assigned multiple times\n   18. Fix TestJobFailureTaskNotStarted (tasks were not being assigned at all due to having reached maximum capacity for quota)\n   19. Add targetedTaskConfigMap field in JobConfig to cache TaskConfig objects for targeted tasks to reduce object creation and GC overload\n   20. Fix JobConfig so that it doesn't write quotaType to ZooKeeper when quotaType is null or not set\n   21. Fix deleteWorkflow() in TaskUtil so that the earliest delete failure will render the entire method as failed (and return prematurely to prevent breaking other ZNodes from incomplete deletion)\n   22. Fix TestDeleteWorkflow by adding another removeProperty() clause to lower failure rate\n","date":"2018-07-14 08:38:58","modifiedFileCount":"36","status":"M","submitter":"Hunter Lee"},{"authorTime":"2018-09-13 09:31:38","codes":[{"authorDate":"2018-09-13 09:31:38","commitOrder":3,"curCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap, ClusterDataCache clusterDataCache) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache.getTaskDataCache())) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2018-10-30 09:05:06","endLine":764,"groupId":"6541","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"markJobComplete","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@ClusterDataCacheclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/61/7263b67bc3dc406725781de72f8d26828e81e0.src","preCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap, ClusterDataCache clusterDataCache) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"M"},{"authorDate":"2018-09-13 09:31:38","commitOrder":3,"curCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      TaskDataCache clusterDataCache) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2018-10-30 09:05:06","endLine":779,"groupId":"4574","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"markJobFailed","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@TaskDataCacheclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/61/7263b67bc3dc406725781de72f8d26828e81e0.src","preCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      ClusterDataCache clusterDataCache) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":766,"status":"M"}],"commitId":"0c3ac37b0b442f20d08eaba86da7d94ec1494d1f","commitMessage":"@@@Refactor WorkflowRebalancer to WorkflowHandler\n\nCurrent WorkflowRebalancer is a little bit messing that mixing workflow update and scheduling logic together. Refactor WorklfowRebalancer to WorkflowHandler which will schedule and update the status of the workflow independent from each other.\n\nAlso remove the redundant logics in existing pipeline.\n","date":"2018-10-30 09:05:06","modifiedFileCount":"7","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-11-06 08:55:22","codes":[{"authorDate":"2018-11-06 08:55:22","commitOrder":4,"curCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap, ClusterDataCache clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache, workflowConfig.getWorkflowId(), jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2019-02-26 08:59:48","endLine":773,"groupId":"4574","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"markJobComplete","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@ClusterDataCacheclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b2/f112017e0c0b67854aac208cbff3d3b70cf072.src","preCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap, ClusterDataCache clusterDataCache) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache.getTaskDataCache())) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":761,"status":"M"},{"authorDate":"2018-11-06 08:55:22","commitOrder":4,"curCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      ClusterDataCache clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache, workflowConfig.getWorkflowId(), jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2019-02-26 08:59:48","endLine":789,"groupId":"4574","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"markJobFailed","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@ClusterDataCacheclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b2/f112017e0c0b67854aac208cbff3d3b70cf072.src","preCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      TaskDataCache clusterDataCache) {\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":775,"status":"M"}],"commitId":"dad3f36a1b8aeb7590214069141915a8bf932ec6","commitMessage":"@@@Integrate JobIterator for existing pipeline\n\nExisting pipeline still looping all the jobs inside the workflow. When JobIterator is ready.  we shall change the looping mechanism to apply the JobIterator and skip the jobs when quota is used out.\n","date":"2019-02-26 08:59:48","modifiedFileCount":"18","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":5,"curCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap, WorkflowControllerDataProvider dataProvider) {\n    finishJobInRuntimeJobDag(dataProvider.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, dataProvider)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2019-02-26 09:36:00","endLine":773,"groupId":"728","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"markJobComplete","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@WorkflowControllerDataProviderdataProvider)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d0/71ba3106a75be2c23e5a4b6e5cf84cff443383.src","preCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap, ClusterDataCache clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache, workflowConfig.getWorkflowId(), jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":760,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":5,"curCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      WorkflowControllerDataProvider clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2019-02-26 09:36:00","endLine":790,"groupId":"4574","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"markJobFailed","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@WorkflowControllerDataProviderclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d0/71ba3106a75be2c23e5a4b6e5cf84cff443383.src","preCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      ClusterDataCache clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache, workflowConfig.getWorkflowId(), jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":775,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-03-29 03:30:09","commitOrder":6,"curCode":"  protected void markJobComplete(final String jobName, final JobContext jobContext,\n      final WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      final Map<String, JobConfig> jobConfigMap,\n      final WorkflowControllerDataProvider dataProvider) {\n    finishJobInRuntimeJobDag(dataProvider.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    final long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, dataProvider)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n\n    \r\n    JobConfig jobConfig = jobConfigMap.get(jobName);\n    if (jobConfig != null) {\n      reportControllerInducedDelay(dataProvider, _clusterStatusMonitor, workflowConfig, jobConfig,\n          currentTime);\n    }\n  }\n","date":"2019-03-29 03:30:14","endLine":848,"groupId":"728","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"markJobComplete","params":"(finalStringjobName@finalJobContextjobContext@finalWorkflowConfigworkflowConfig@WorkflowContextworkflowContext@finalMap<String@JobConfig>jobConfigMap@finalWorkflowControllerDataProviderdataProvider)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4d/e811251ef6b5177e22da8cc84b42e7deb1075b.src","preCode":"  protected void markJobComplete(String jobName, JobContext jobContext,\n      WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      Map<String, JobConfig> jobConfigMap, WorkflowControllerDataProvider dataProvider) {\n    finishJobInRuntimeJobDag(dataProvider.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, dataProvider)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":827,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":6,"curCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      WorkflowControllerDataProvider clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","date":"2019-02-26 09:36:00","endLine":790,"groupId":"4574","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"markJobFailed","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@WorkflowControllerDataProviderclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d0/71ba3106a75be2c23e5a4b6e5cf84cff443383.src","preCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      WorkflowControllerDataProvider clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":775,"status":"N"}],"commitId":"8ba4c9c19981fffe3c958c6851e2b8b8bf90bfbb","commitMessage":"@@@TASK2.0: Add performance metrics to JobMonitor\n\n    We want to add more metrics to Task Framework so that the user could understand what's going on in case of a slowdown.  or get a general sense of how fast the workload is moving.\n    Changelist:\n    1. Add SubmissionToProcessDelay\n    2. Add SubmissionToScheduleDelay\n    3. Add ControllerInducedDelay (for testing)\n    4. Add JobLatencyGauge\n    5. Change regular metrics to Dynamic metrics in JobMonitor\n    6. Add an integration test: TestTaskPerformanceMetrics\n","date":"2019-03-29 03:30:14","modifiedFileCount":"6","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-08-14 07:45:32","codes":[{"authorDate":"2020-08-14 07:45:32","commitOrder":7,"curCode":"  protected void markJobComplete(final String jobName, final JobContext jobContext,\n      final WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      final Map<String, JobConfig> jobConfigMap,\n      final WorkflowControllerDataProvider dataProvider) {\n    finishJobInRuntimeJobDag(dataProvider.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    final long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, dataProvider)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName).getExpiry(), workflowConfig, currentTime);\n\n    \r\n    JobConfig jobConfig = jobConfigMap.get(jobName);\n    if (jobConfig != null) {\n      reportControllerInducedDelay(dataProvider, _clusterStatusMonitor, workflowConfig, jobConfig,\n          currentTime);\n    }\n  }\n","date":"2020-08-14 07:45:32","endLine":917,"groupId":"728","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"markJobComplete","params":"(finalStringjobName@finalJobContextjobContext@finalWorkflowConfigworkflowConfig@WorkflowContextworkflowContext@finalMap<String@JobConfig>jobConfigMap@finalWorkflowControllerDataProviderdataProvider)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/b0b5d3e83555615212736982a2b355745b7ce7.src","preCode":"  protected void markJobComplete(final String jobName, final JobContext jobContext,\n      final WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      final Map<String, JobConfig> jobConfigMap,\n      final WorkflowControllerDataProvider dataProvider) {\n    finishJobInRuntimeJobDag(dataProvider.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    final long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, dataProvider)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n\n    \r\n    JobConfig jobConfig = jobConfigMap.get(jobName);\n    if (jobConfig != null) {\n      reportControllerInducedDelay(dataProvider, _clusterStatusMonitor, workflowConfig, jobConfig,\n          currentTime);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":896,"status":"M"},{"authorDate":"2020-08-14 07:45:32","commitOrder":7,"curCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      WorkflowControllerDataProvider clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName).getTerminalStateExpiry(), workflowConfig,\n        currentTime);\n  }\n","date":"2020-08-14 07:45:32","endLine":935,"groupId":"4574","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"markJobFailed","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@WorkflowControllerDataProviderclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/b0b5d3e83555615212736982a2b355745b7ce7.src","preCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      WorkflowControllerDataProvider clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName), workflowConfig, currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"M"}],"commitId":"e163efc4de07a67069fdbd4effd19729158fa832","commitMessage":"@@@Terminal State Job Purging (#1231)\n\nThis commit added a new field to JobConfig for terminal job expiries.  and added new logic to garbage collection stage to purge jobs in terminal states.\n","date":"2020-08-14 07:45:32","modifiedFileCount":"6","status":"M","submitter":"Neal Sun"},{"authorTime":"2020-11-12 09:49:29","codes":[{"authorDate":"2020-08-14 07:45:32","commitOrder":8,"curCode":"  protected void markJobComplete(final String jobName, final JobContext jobContext,\n      final WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      final Map<String, JobConfig> jobConfigMap,\n      final WorkflowControllerDataProvider dataProvider) {\n    finishJobInRuntimeJobDag(dataProvider.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    final long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, dataProvider)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName).getExpiry(), workflowConfig, currentTime);\n\n    \r\n    JobConfig jobConfig = jobConfigMap.get(jobName);\n    if (jobConfig != null) {\n      reportControllerInducedDelay(dataProvider, _clusterStatusMonitor, workflowConfig, jobConfig,\n          currentTime);\n    }\n  }\n","date":"2020-08-14 07:45:32","endLine":917,"groupId":"10738","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"markJobComplete","params":"(finalStringjobName@finalJobContextjobContext@finalWorkflowConfigworkflowConfig@WorkflowContextworkflowContext@finalMap<String@JobConfig>jobConfigMap@finalWorkflowControllerDataProviderdataProvider)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ae/b0b5d3e83555615212736982a2b355745b7ce7.src","preCode":"  protected void markJobComplete(final String jobName, final JobContext jobContext,\n      final WorkflowConfig workflowConfig, WorkflowContext workflowContext,\n      final Map<String, JobConfig> jobConfigMap,\n      final WorkflowControllerDataProvider dataProvider) {\n    finishJobInRuntimeJobDag(dataProvider.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    final long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.COMPLETED);\n    jobContext.setFinishTime(currentTime);\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, dataProvider)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName).getExpiry(), workflowConfig, currentTime);\n\n    \r\n    JobConfig jobConfig = jobConfigMap.get(jobName);\n    if (jobConfig != null) {\n      reportControllerInducedDelay(dataProvider, _clusterStatusMonitor, workflowConfig, jobConfig,\n          currentTime);\n    }\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":896,"status":"N"},{"authorDate":"2020-11-12 09:49:29","commitOrder":8,"curCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      WorkflowControllerDataProvider clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    long currentTime = System.currentTimeMillis();\n    LOG.debug(\"Mark job: {} FAILED.\", jobName);\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName).getTerminalStateExpiry(), workflowConfig,\n        currentTime);\n  }\n","date":"2020-11-12 09:49:29","endLine":935,"groupId":"10738","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"markJobFailed","params":"(StringjobName@JobContextjobContext@WorkflowConfigworkflowConfig@WorkflowContextworkflowContext@Map<String@JobConfig>jobConfigMap@WorkflowControllerDataProviderclusterDataCache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8f/112e9027602fefa0b7036843e0bf3bcf41239f.src","preCode":"  protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConfig workflowConfig,\n      WorkflowContext workflowContext, Map<String, JobConfig> jobConfigMap,\n      WorkflowControllerDataProvider clusterDataCache) {\n    finishJobInRuntimeJobDag(clusterDataCache.getTaskDataCache(), workflowConfig.getWorkflowId(),\n        jobName);\n    long currentTime = System.currentTimeMillis();\n    workflowContext.setJobState(jobName, TaskState.FAILED);\n    if (jobContext != null) {\n      jobContext.setFinishTime(currentTime);\n    }\n    if (isWorkflowFinished(workflowContext, workflowConfig, jobConfigMap, clusterDataCache)) {\n      workflowContext.setFinishTime(currentTime);\n      updateWorkflowMonitor(workflowContext, workflowConfig);\n    }\n    scheduleJobCleanUp(jobConfigMap.get(jobName).getTerminalStateExpiry(), workflowConfig,\n        currentTime);\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":918,"status":"M"}],"commitId":"d50872e9caeabbc5a063bc0133ddc5440ca8b31e","commitMessage":"@@@Refine Task Framework log format (#1511)\n\nRefine logs in AbstractTaskDispatcher.java.  JobDispatcher.java and WorkflowDispatcher.java. This includes:\n\nInclude exception backtrace in error messages.\nInclude JobID in task-related error messages.","date":"2020-11-12 09:49:29","modifiedFileCount":"3","status":"M","submitter":"xyuanlu"}]
