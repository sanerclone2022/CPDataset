[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  private void setParticipants(String dbName) throws InterruptedException {\n    _factories = new HashMap<>();\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);\n    for (int i = 0; i < NODE_NR; i++) {\n      if (_participants[i] != null) {\n        _participants[i].syncStop();\n      }\n      Thread.sleep(1000);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      _factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":242,"groupId":"5667","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setParticipants","params":"(StringdbName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/da/8e830b37bb7cf79650fb26774e5af9694e9eae.src","preCode":"  private void setParticipants(String dbName) throws InterruptedException {\n    _factories = new HashMap<>();\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);\n    for (int i = 0; i < NODE_NR; i++) {\n      if (_participants[i] != null) {\n        _participants[i].syncStop();\n      }\n      Thread.sleep(1000);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      _factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionTimeoutWithResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void testStateTransitionTimeOut() throws Exception {\n    Map<String, SleepStateModelFactory> factories = new HashMap<String, SleepStateModelFactory>();\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller =\n        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n    HelixDataAccessor accessor = _participants[0].getHelixDataAccessor();\n\n    Builder kb = accessor.keyBuilder();\n    ExternalView ev = accessor.getProperty(kb.externalView(TEST_DB));\n    for (String p : idealState.getPartitionSet()) {\n      String idealMaster = idealState.getPreferenceList(p).get(0);\n      Assert.assertTrue(ev.getStateMap(p).get(idealMaster).equals(\"ERROR\"));\n\n      TimeOutStateModel model = factories.get(idealMaster).getStateModel(TEST_DB, p);\n      Assert.assertEquals(model._errorCallcount, 1);\n      Assert.assertEquals(model._error.getCode(), ErrorCode.TIMEOUT);\n    }\n  }\n","date":"2017-11-08 08:48:26","endLine":183,"groupId":"6815","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateTransitionTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/77/2fcac5768b4997f26d4b23c3f9a5a4afd20404.src","preCode":"  public void testStateTransitionTimeOut() throws Exception {\n    Map<String, SleepStateModelFactory> factories = new HashMap<String, SleepStateModelFactory>();\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller =\n        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n    HelixDataAccessor accessor = _participants[0].getHelixDataAccessor();\n\n    Builder kb = accessor.keyBuilder();\n    ExternalView ev = accessor.getProperty(kb.externalView(TEST_DB));\n    for (String p : idealState.getPartitionSet()) {\n      String idealMaster = idealState.getPreferenceList(p).get(0);\n      Assert.assertTrue(ev.getStateMap(p).get(idealMaster).equals(\"ERROR\"));\n\n      TimeOutStateModel model = factories.get(idealMaster).getStateModel(TEST_DB, p);\n      Assert.assertEquals(model._errorCallcount, 1);\n      Assert.assertEquals(model._error.getCode(), ErrorCode.TIMEOUT);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionTimeout.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  private void setParticipants(String dbName) throws InterruptedException {\n    _factories = new HashMap<>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);\n    for (int i = 0; i < NODE_NR; i++) {\n      if (_participants[i] != null) {\n        _participants[i].syncStop();\n      }\n      Thread.sleep(1000);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      _factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2018-07-14 02:20:49","endLine":237,"groupId":"5667","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setParticipants","params":"(StringdbName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/9af04770ed04423572c8bd2bc4ff8da72025c0.src","preCode":"  private void setParticipants(String dbName) throws InterruptedException {\n    _factories = new HashMap<>();\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);\n    for (int i = 0; i < NODE_NR; i++) {\n      if (_participants[i] != null) {\n        _participants[i].syncStop();\n      }\n      Thread.sleep(1000);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      _factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionTimeoutWithResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testStateTransitionTimeOut() throws Exception {\n    Map<String, SleepStateModelFactory> factories = new HashMap<String, SleepStateModelFactory>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller =\n        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n    HelixDataAccessor accessor = _participants[0].getHelixDataAccessor();\n\n    Builder kb = accessor.keyBuilder();\n    ExternalView ev = accessor.getProperty(kb.externalView(TEST_DB));\n    for (String p : idealState.getPartitionSet()) {\n      String idealMaster = idealState.getPreferenceList(p).get(0);\n      Assert.assertTrue(ev.getStateMap(p).get(idealMaster).equals(\"ERROR\"));\n\n      TimeOutStateModel model = factories.get(idealMaster).getStateModel(TEST_DB, p);\n      Assert.assertEquals(model._errorCallcount, 1);\n      Assert.assertEquals(model._error.getCode(), ErrorCode.TIMEOUT);\n    }\n  }\n","date":"2018-07-14 02:20:49","endLine":178,"groupId":"6815","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateTransitionTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/83/b97a56440069d25b5ccf39b8cba822eba7b301.src","preCode":"  public void testStateTransitionTimeOut() throws Exception {\n    Map<String, SleepStateModelFactory> factories = new HashMap<String, SleepStateModelFactory>();\n    IdealState idealState =\n        _setupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller =\n        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n    HelixDataAccessor accessor = _participants[0].getHelixDataAccessor();\n\n    Builder kb = accessor.keyBuilder();\n    ExternalView ev = accessor.getProperty(kb.externalView(TEST_DB));\n    for (String p : idealState.getPartitionSet()) {\n      String idealMaster = idealState.getPreferenceList(p).get(0);\n      Assert.assertTrue(ev.getStateMap(p).get(idealMaster).equals(\"ERROR\"));\n\n      TimeOutStateModel model = factories.get(idealMaster).getStateModel(TEST_DB, p);\n      Assert.assertEquals(model._errorCallcount, 1);\n      Assert.assertEquals(model._error.getCode(), ErrorCode.TIMEOUT);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionTimeout.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-10-18 07:26:38","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  private void setParticipants(String dbName) throws InterruptedException {\n    _factories = new HashMap<>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);\n    for (int i = 0; i < NODE_NR; i++) {\n      if (_participants[i] != null) {\n        _participants[i].syncStop();\n      }\n      Thread.sleep(1000);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      _factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2018-07-14 02:20:49","endLine":237,"groupId":"5667","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setParticipants","params":"(StringdbName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/9af04770ed04423572c8bd2bc4ff8da72025c0.src","preCode":"  private void setParticipants(String dbName) throws InterruptedException {\n    _factories = new HashMap<>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);\n    for (int i = 0; i < NODE_NR; i++) {\n      if (_participants[i] != null) {\n        _participants[i].syncStop();\n      }\n      Thread.sleep(1000);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      _factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionTimeoutWithResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"N"},{"authorDate":"2018-10-18 07:26:38","commitOrder":3,"curCode":"  public void testStateTransitionTimeOut() throws Exception {\n    Map<String, SleepStateModelFactory> factories = new HashMap<String, SleepStateModelFactory>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller =\n        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByPolling(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n    HelixDataAccessor accessor = _participants[0].getHelixDataAccessor();\n\n    Builder kb = accessor.keyBuilder();\n    ExternalView ev = accessor.getProperty(kb.externalView(TEST_DB));\n    for (String p : idealState.getPartitionSet()) {\n      String idealMaster = idealState.getPreferenceList(p).get(0);\n      Assert.assertTrue(ev.getStateMap(p).get(idealMaster).equals(\"ERROR\"));\n\n      TimeOutStateModel model = factories.get(idealMaster).getStateModel(TEST_DB, p);\n      Assert.assertEquals(model._errorCallcount, 1);\n      Assert.assertEquals(model._error.getCode(), ErrorCode.TIMEOUT);\n    }\n  }\n","date":"2018-11-02 08:10:35","endLine":177,"groupId":"2663","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateTransitionTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/74/cf9a2303411ca2094ec9455d5be0c601c6333f.src","preCode":"  public void testStateTransitionTimeOut() throws Exception {\n    Map<String, SleepStateModelFactory> factories = new HashMap<String, SleepStateModelFactory>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller =\n        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByZkCallback(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n    HelixDataAccessor accessor = _participants[0].getHelixDataAccessor();\n\n    Builder kb = accessor.keyBuilder();\n    ExternalView ev = accessor.getProperty(kb.externalView(TEST_DB));\n    for (String p : idealState.getPartitionSet()) {\n      String idealMaster = idealState.getPreferenceList(p).get(0);\n      Assert.assertTrue(ev.getStateMap(p).get(idealMaster).equals(\"ERROR\"));\n\n      TimeOutStateModel model = factories.get(idealMaster).getStateModel(TEST_DB, p);\n      Assert.assertEquals(model._errorCallcount, 1);\n      Assert.assertEquals(model._error.getCode(), ErrorCode.TIMEOUT);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionTimeout.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"1e1cc41ea1c2d911ee8d010495121bd73e5fb4d2","commitMessage":"@@@Fix redundant DROPPED message sent to participant\n\nIt was caused by combination of two Helix logic:\n\n1. Helix caches best possible mapping and wont recompute it unless there are changes to IdealState.  LiveInstance.  ResourceConfig or InstanceConfig .\n2. In message generation.  if current state does not exist.  Helix will think it is in INITIAL (OFFLINE) state\n\nIn this case.  we have two fixes for that:\n\n1. If we see current state is null and target state is DROPPED.  Helix will not send OFFLINE -> DROPPED message anymore.\n2. if we see recurrent OFFLINE -> DROPPED message.  Helix will clean up the cached best possible mapping for this resource and let it recompute.\n","date":"2018-11-02 08:10:35","modifiedFileCount":"4","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-05-18 01:36:22","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":4,"curCode":"  private void setParticipants(String dbName) throws InterruptedException {\n    _factories = new HashMap<>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);\n    for (int i = 0; i < NODE_NR; i++) {\n      if (_participants[i] != null) {\n        _participants[i].syncStop();\n      }\n      Thread.sleep(1000);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      _factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n  }\n","date":"2018-07-14 02:20:49","endLine":237,"groupId":"10560","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setParticipants","params":"(StringdbName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2e/9af04770ed04423572c8bd2bc4ff8da72025c0.src","preCode":"  private void setParticipants(String dbName) throws InterruptedException {\n    _factories = new HashMap<>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, dbName);\n    for (int i = 0; i < NODE_NR; i++) {\n      if (_participants[i] != null) {\n        _participants[i].syncStop();\n      }\n      Thread.sleep(1000);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      _factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionTimeoutWithResource.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"N"},{"authorDate":"2019-05-18 01:36:22","commitOrder":4,"curCode":"  public void testStateTransitionTimeOut() throws Exception {\n    Map<String, SleepStateModelFactory> factories = new HashMap<String, SleepStateModelFactory>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller =\n        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByPolling(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n    HelixDataAccessor accessor = _participants[0].getHelixDataAccessor();\n\n    TestHelper.verify(() -> verify(accessor, idealState, factories), 5000);\n    Assert.assertTrue(verify(accessor, idealState, factories));\n  }\n","date":"2019-06-25 02:01:06","endLine":170,"groupId":"10560","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateTransitionTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/59/aa61e8d3b4375a2260f8dbeea9558aa8ac4b2c.src","preCode":"  public void testStateTransitionTimeOut() throws Exception {\n    Map<String, SleepStateModelFactory> factories = new HashMap<String, SleepStateModelFactory>();\n    IdealState idealState =\n        _gSetupTool.getClusterManagementTool().getResourceIdealState(CLUSTER_NAME, TEST_DB);\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      SleepStateModelFactory factory = new SleepStateModelFactory(1000);\n      factories.put(instanceName, factory);\n      for (String p : idealState.getPartitionSet()) {\n        if (idealState.getPreferenceList(p).get(0).equals(instanceName)) {\n          factory.addPartition(p);\n        }\n      }\n\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n      _participants[i].getStateMachineEngine().registerStateModelFactory(\"MasterSlave\", factory);\n      _participants[i].syncStart();\n    }\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller =\n        new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    boolean result =\n        ClusterStateVerifier\n            .verifyByPolling(new MasterNbInExtViewVerifier(ZK_ADDR, CLUSTER_NAME));\n    Assert.assertTrue(result);\n    HelixDataAccessor accessor = _participants[0].getHelixDataAccessor();\n\n    Builder kb = accessor.keyBuilder();\n    ExternalView ev = accessor.getProperty(kb.externalView(TEST_DB));\n    for (String p : idealState.getPartitionSet()) {\n      String idealMaster = idealState.getPreferenceList(p).get(0);\n      Assert.assertTrue(ev.getStateMap(p).get(idealMaster).equals(\"ERROR\"));\n\n      TimeOutStateModel model = factories.get(idealMaster).getStateModel(TEST_DB, p);\n      Assert.assertEquals(model._errorCallcount, 1);\n      Assert.assertEquals(model._error.getCode(), ErrorCode.TIMEOUT);\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionTimeout.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"831593c414e56695725da6ad99a0bd2128157be4","commitMessage":"@@@Remove workaround in sending S->M message when there is a same pending relay message.\n\nRB=1670732\nBUG=HELIX-1871\nG=helix-reviewers\nA=jjwang. jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-06-25 02:01:06","modifiedFileCount":"5","status":"M","submitter":"Lei Xia"}]
