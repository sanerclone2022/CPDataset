[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2018-11-06 08:55:22","commitOrder":3,"curCode":"  public static BestPossibleStateOutput calculateTaskSchedulingStage(ClusterDataCache cache,\n      HelixManager manager) throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.PipelineType.name(), \"TASK\");\n\n    Map<AsyncWorkerType, DedupEventProcessor<String, Runnable>> asyncFIFOWorkerPool =\n        new HashMap<>();\n    DedupEventProcessor<String, Runnable> worker =\n        new DedupEventProcessor<String, Runnable>(\"ClusterName\",\n            AsyncWorkerType.TaskJobPurgeWorker.name()) {\n          @Override\n          protected void handleEvent(Runnable event) {\n            \r\n            event.run();\n          }\n        };\n    worker.start();\n    asyncFIFOWorkerPool.put(AsyncWorkerType.TaskJobPurgeWorker, worker);\n    event.addAttribute(AttributeName.AsyncFIFOWorkerPool.name(), asyncFIFOWorkerPool);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ReadClusterDataStage());\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new TaskSchedulingStage());\n    stages.add(new TaskPersistDataStage());\n    stages.add(new TaskGarbageCollectionStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2019-02-26 08:59:48","endLine":340,"groupId":"1018","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"calculateTaskSchedulingStage","params":"(ClusterDataCachecache@HelixManagermanager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f3/900635a7586560d16cee19aa89ddd09878b8d5.src","preCode":"  public static BestPossibleStateOutput calculateTaskSchedulingStage(ClusterDataCache cache,\n      HelixManager manager) throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.PipelineType.name(), \"TASK\");\n\n    Map<AsyncWorkerType, DedupEventProcessor<String, Runnable>> asyncFIFOWorkerPool =\n        new HashMap<>();\n    DedupEventProcessor<String, Runnable> worker =\n        new DedupEventProcessor<String, Runnable>(\"ClusterName\",\n            AsyncWorkerType.TaskJobPurgeWorker.name()) {\n          @Override\n          protected void handleEvent(Runnable event) {\n            \r\n            event.run();\n          }\n        };\n    worker.start();\n    asyncFIFOWorkerPool.put(AsyncWorkerType.TaskJobPurgeWorker, worker);\n    event.addAttribute(AttributeName.AsyncFIFOWorkerPool.name(), asyncFIFOWorkerPool);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ReadClusterDataStage());\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new TaskSchedulingStage());\n    stages.add(new TaskPersistDataStage());\n    stages.add(new TaskGarbageCollectionStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  BestPossibleStateOutput calculateBestPossibleState(ClusterDataCache cache) throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.StateVerifier);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new BestPossibleStateCalcStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2017-11-08 08:48:26","endLine":105,"groupId":"5439","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"calculateBestPossibleState","params":"(ClusterDataCachecache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/da/cf59cfe522ab584e905d1a137bb2ff05dd4247.src","preCode":"  BestPossibleStateOutput calculateBestPossibleState(ClusterDataCache cache) throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.StateVerifier);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new BestPossibleStateCalcStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"NB"}],"commitId":"dad3f36a1b8aeb7590214069141915a8bf932ec6","commitMessage":"@@@Integrate JobIterator for existing pipeline\n\nExisting pipeline still looping all the jobs inside the workflow. When JobIterator is ready.  we shall change the looping mechanism to apply the JobIterator and skip the jobs when quota is used out.\n","date":"2019-02-26 08:59:48","modifiedFileCount":"18","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":4,"curCode":"  public static BestPossibleStateOutput calculateTaskSchedulingStage(WorkflowControllerDataProvider cache,\n      HelixManager manager) throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.PipelineType.name(), \"TASK\");\n\n    Map<AsyncWorkerType, DedupEventProcessor<String, Runnable>> asyncFIFOWorkerPool =\n        new HashMap<>();\n    DedupEventProcessor<String, Runnable> worker =\n        new DedupEventProcessor<String, Runnable>(\"ClusterName\",\n            AsyncWorkerType.TaskJobPurgeWorker.name()) {\n          @Override\n          protected void handleEvent(Runnable event) {\n            \r\n            event.run();\n          }\n        };\n    worker.start();\n    asyncFIFOWorkerPool.put(AsyncWorkerType.TaskJobPurgeWorker, worker);\n    event.addAttribute(AttributeName.AsyncFIFOWorkerPool.name(), asyncFIFOWorkerPool);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ReadClusterDataStage());\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new TaskSchedulingStage());\n    stages.add(new TaskPersistDataStage());\n    stages.add(new TaskGarbageCollectionStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2019-02-26 09:36:00","endLine":339,"groupId":"1018","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"calculateTaskSchedulingStage","params":"(WorkflowControllerDataProvidercache@HelixManagermanager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1c/4b5368109d3c5f226876917760b6e510d858bd.src","preCode":"  public static BestPossibleStateOutput calculateTaskSchedulingStage(ClusterDataCache cache,\n      HelixManager manager) throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.PipelineType.name(), \"TASK\");\n\n    Map<AsyncWorkerType, DedupEventProcessor<String, Runnable>> asyncFIFOWorkerPool =\n        new HashMap<>();\n    DedupEventProcessor<String, Runnable> worker =\n        new DedupEventProcessor<String, Runnable>(\"ClusterName\",\n            AsyncWorkerType.TaskJobPurgeWorker.name()) {\n          @Override\n          protected void handleEvent(Runnable event) {\n            \r\n            event.run();\n          }\n        };\n    worker.start();\n    asyncFIFOWorkerPool.put(AsyncWorkerType.TaskJobPurgeWorker, worker);\n    event.addAttribute(AttributeName.AsyncFIFOWorkerPool.name(), asyncFIFOWorkerPool);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ReadClusterDataStage());\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new TaskSchedulingStage());\n    stages.add(new TaskPersistDataStage());\n    stages.add(new TaskGarbageCollectionStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":4,"curCode":"  BestPossibleStateOutput calculateBestPossibleState(ResourceControllerDataProvider cache)\n      throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.StateVerifier);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new BestPossibleStateCalcStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2019-02-26 09:36:00","endLine":106,"groupId":"5439","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"calculateBestPossibleState","params":"(ResourceControllerDataProvidercache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f0/6431103828e13f52f06d9728c03b44752bbc54.src","preCode":"  BestPossibleStateOutput calculateBestPossibleState(ClusterDataCache cache) throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.StateVerifier);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new BestPossibleStateCalcStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2020-05-30 00:20:58","commitOrder":5,"curCode":"  public static BestPossibleStateOutput calculateTaskSchedulingStage(WorkflowControllerDataProvider cache,\n      HelixManager manager) throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.PipelineType.name(), \"TASK\");\n\n    Map<AsyncWorkerType, DedupEventProcessor<String, Runnable>> asyncFIFOWorkerPool =\n        new HashMap<>();\n    DedupEventProcessor<String, Runnable> worker =\n        new DedupEventProcessor<String, Runnable>(\"ClusterName\",\n            AsyncWorkerType.TaskJobPurgeWorker.name()) {\n          @Override\n          protected void handleEvent(Runnable event) {\n            \r\n            event.run();\n          }\n        };\n    worker.start();\n    asyncFIFOWorkerPool.put(AsyncWorkerType.TaskJobPurgeWorker, worker);\n    event.addAttribute(AttributeName.AsyncFIFOWorkerPool.name(), asyncFIFOWorkerPool);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ReadClusterDataStage());\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new TaskSchedulingStage());\n    stages.add(new TaskPersistDataStage());\n    stages.add(new TaskGarbageCollectionStage());\n\n    for (Stage stage : stages) {\n      RebalanceUtil.runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2020-05-30 00:20:58","endLine":331,"groupId":"10527","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"calculateTaskSchedulingStage","params":"(WorkflowControllerDataProvidercache@HelixManagermanager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3f/a99f003cc1e02e5cf4544b4c28789609c44c56.src","preCode":"  public static BestPossibleStateOutput calculateTaskSchedulingStage(WorkflowControllerDataProvider cache,\n      HelixManager manager) throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n    event.addAttribute(AttributeName.helixmanager.name(), manager);\n    event.addAttribute(AttributeName.PipelineType.name(), \"TASK\");\n\n    Map<AsyncWorkerType, DedupEventProcessor<String, Runnable>> asyncFIFOWorkerPool =\n        new HashMap<>();\n    DedupEventProcessor<String, Runnable> worker =\n        new DedupEventProcessor<String, Runnable>(\"ClusterName\",\n            AsyncWorkerType.TaskJobPurgeWorker.name()) {\n          @Override\n          protected void handleEvent(Runnable event) {\n            \r\n            event.run();\n          }\n        };\n    worker.start();\n    asyncFIFOWorkerPool.put(AsyncWorkerType.TaskJobPurgeWorker, worker);\n    event.addAttribute(AttributeName.AsyncFIFOWorkerPool.name(), asyncFIFOWorkerPool);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ReadClusterDataStage());\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new TaskSchedulingStage());\n    stages.add(new TaskPersistDataStage());\n    stages.add(new TaskGarbageCollectionStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":5,"curCode":"  BestPossibleStateOutput calculateBestPossibleState(ResourceControllerDataProvider cache)\n      throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.StateVerifier);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new BestPossibleStateCalcStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","date":"2019-02-26 09:36:00","endLine":106,"groupId":"10527","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"calculateBestPossibleState","params":"(ResourceControllerDataProvidercache)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f0/6431103828e13f52f06d9728c03b44752bbc54.src","preCode":"  BestPossibleStateOutput calculateBestPossibleState(ResourceControllerDataProvider cache)\n      throws Exception {\n    ClusterEvent event = new ClusterEvent(ClusterEventType.StateVerifier);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    List<Stage> stages = new ArrayList<Stage>();\n    stages.add(new ResourceComputationStage());\n    stages.add(new CurrentStateComputationStage());\n    stages.add(new BestPossibleStateCalcStage());\n\n    for (Stage stage : stages) {\n      runStage(event, stage);\n    }\n\n    return event.getAttribute(AttributeName.BEST_POSSIBLE_STATE.name());\n  }\n","realPath":"helix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"N"}],"commitId":"431a0961c0366ddfaac7dfc08e6c1b0bcd26f87b","commitMessage":"@@@Add getIdealAssignmentForWagedFullAuto in HelixUtil for WAGED rebalancer (#1031)\n\nThis commit adds a method.  getIdealAssignmentForWagedFullAuto() in HelixUtil that returns to the user the cluster-wide assignment result obtained from running a rebalance using WAGED. The user will be able to use this method to predict how Helix will be rebalancing resources using the WAGED rebalancer.","date":"2020-05-30 00:20:58","modifiedFileCount":"8","status":"M","submitter":"Hunter Lee"}]
