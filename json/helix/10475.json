[{"authorTime":"2019-08-31 00:56:39","codes":[{"authorDate":"2020-04-03 00:43:15","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    _numPartitions = 1;\n    _numNodes = 3;\n    super.beforeClass();\n    _manager = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"Admin\",\n        InstanceType.ADMINISTRATOR, ZK_ADDR);\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      super.stopParticipant(i);\n      Assert.assertFalse(_participants[i].isConnected());\n    }\n\n    \r\n    _participants = new MockParticipantManager[_numNodes];\n    for (int i = 0; i < _numNodes; i++) {\n      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n      taskFactoryReg.put(NewMockTask.TASK_COMMAND, NewMockTask::new);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n      \r\n      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n      stateMachine.registerStateModelFactory(\"Task\",\n          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n      _participants[i].syncStart();\n    }\n\n    _manager.connect();\n    _driver = new TaskDriver(_manager);\n  }\n","date":"2020-04-03 00:43:15","endLine":103,"groupId":"2622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5b/63b44f5668982236a1a5e9efc9d97e01d5a596.src","preCode":"  public void beforeClass() throws Exception {\n    _numPartitions = 1;\n    _numNodes = 3;\n    super.beforeClass();\n    _manager = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"Admin\",\n        InstanceType.ADMINISTRATOR, ZK_ADDR);\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      super.stopParticipant(i);\n      Assert.assertFalse(_participants[i].isConnected());\n    }\n\n    \r\n    _participants = new MockParticipantManager[_numNodes];\n    for (int i = 0; i < _numNodes; i++) {\n      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n      taskFactoryReg.put(NewMockTask.TASK_COMMAND, NewMockTask::new);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n      \r\n      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n      stateMachine.registerStateModelFactory(\"Task\",\n          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n      _participants[i].syncStart();\n    }\n\n    _manager.connect();\n    _driver = new TaskDriver(_manager);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskSchedulingTwoCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2019-08-31 00:56:39","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    super.beforeClass();\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      super.stopParticipant(i);\n    }\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      Assert.assertFalse(_participants[i].isConnected());\n    }\n\n    \r\n    _participants = new MockParticipantManager[_numNodes];\n    for (int i = 0; i < _numNodes; i++) {\n      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n      taskFactoryReg.put(DelayedStopTask.TASK_COMMAND, DelayedStopTask::new);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n      \r\n      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n      stateMachine.registerStateModelFactory(\"Task\",\n          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"Admin\",\n        InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    _driver = new TaskDriver(_manager);\n\n    _admin = _gSetupTool.getClusterManagementTool();\n  }\n","date":"2019-08-31 00:56:39","endLine":108,"groupId":"2622","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/49/82f1c85553af1c9c8527e047bb32db3d7d881f.src","preCode":"  public void beforeClass() throws Exception {\n    super.beforeClass();\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      super.stopParticipant(i);\n    }\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      Assert.assertFalse(_participants[i].isConnected());\n    }\n\n    \r\n    _participants = new MockParticipantManager[_numNodes];\n    for (int i = 0; i < _numNodes; i++) {\n      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n      taskFactoryReg.put(DelayedStopTask.TASK_COMMAND, DelayedStopTask::new);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n      \r\n      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n      stateMachine.registerStateModelFactory(\"Task\",\n          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"Admin\",\n        InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    _driver = new TaskDriver(_manager);\n\n    _admin = _gSetupTool.getClusterManagementTool();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestForceDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"NB"}],"commitId":"184a50ac173c18e0ea3d40ffb5a0f93d31aa558f","commitMessage":"@@@Fix the scheduling decision for multiple currentStates (#923)\n\nFix the scheduling decision for multiple currentStates and prevAssignment\n\nIn this commit.  the problem of scheduling and dropping the tasks\non the slave node has been addressed.\nMultiple tests have been added.","date":"2020-04-03 00:43:15","modifiedFileCount":"1","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"},{"authorTime":"2020-07-04 15:59:19","codes":[{"authorDate":"2020-07-04 15:59:19","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    _numPartitions = 1;\n    _numNodes = 3;\n    super.beforeClass();\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      super.stopParticipant(i);\n      Assert.assertFalse(_participants[i].isConnected());\n    }\n\n    \r\n    _participants = new MockParticipantManager[_numNodes];\n    for (int i = 0; i < _numNodes; i++) {\n      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n      taskFactoryReg.put(NewMockTask.TASK_COMMAND, NewMockTask::new);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n      \r\n      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n      stateMachine.registerStateModelFactory(\"Task\",\n          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n      _participants[i].syncStart();\n    }\n  }\n","date":"2020-07-04 15:59:19","endLine":99,"groupId":"10475","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a4/0ce4577ef156114a6265f725917fd7c1272454.src","preCode":"  public void beforeClass() throws Exception {\n    _numPartitions = 1;\n    _numNodes = 3;\n    super.beforeClass();\n    _manager = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"Admin\",\n        InstanceType.ADMINISTRATOR, ZK_ADDR);\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      super.stopParticipant(i);\n      Assert.assertFalse(_participants[i].isConnected());\n    }\n\n    \r\n    _participants = new MockParticipantManager[_numNodes];\n    for (int i = 0; i < _numNodes; i++) {\n      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n      taskFactoryReg.put(NewMockTask.TASK_COMMAND, NewMockTask::new);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n      \r\n      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n      stateMachine.registerStateModelFactory(\"Task\",\n          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n      _participants[i].syncStart();\n    }\n\n    _manager.connect();\n    _driver = new TaskDriver(_manager);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskSchedulingTwoCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2020-07-04 15:59:19","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    super.beforeClass();\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      super.stopParticipant(i);\n    }\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      Assert.assertFalse(_participants[i].isConnected());\n    }\n\n    \r\n    _participants = new MockParticipantManager[_numNodes];\n    for (int i = 0; i < _numNodes; i++) {\n      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n      taskFactoryReg.put(DelayedStopTask.TASK_COMMAND, DelayedStopTask::new);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n      \r\n      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n      stateMachine.registerStateModelFactory(\"Task\",\n          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n      _participants[i].syncStart();\n    }\n\n    _admin = _gSetupTool.getClusterManagementTool();\n  }\n","date":"2020-07-04 15:59:19","endLine":101,"groupId":"10475","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/07/700694f139ce8418f61b815ff66562590f6d6a.src","preCode":"  public void beforeClass() throws Exception {\n    super.beforeClass();\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      super.stopParticipant(i);\n    }\n\n    \r\n    for (int i = 0; i < _numNodes; i++) {\n      Assert.assertFalse(_participants[i].isConnected());\n    }\n\n    \r\n    _participants = new MockParticipantManager[_numNodes];\n    for (int i = 0; i < _numNodes; i++) {\n      Map<String, TaskFactory> taskFactoryReg = new HashMap<>();\n      taskFactoryReg.put(DelayedStopTask.TASK_COMMAND, DelayedStopTask::new);\n      String instanceName = PARTICIPANT_PREFIX + \"_\" + (_startPort + i);\n      _participants[i] = new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, instanceName);\n\n      \r\n      StateMachineEngine stateMachine = _participants[i].getStateMachineEngine();\n      stateMachine.registerStateModelFactory(\"Task\",\n          new TaskStateModelFactory(_participants[i], taskFactoryReg));\n      _participants[i].syncStart();\n    }\n\n    _manager = HelixManagerFactory.getZKHelixManager(CLUSTER_NAME, \"Admin\",\n        InstanceType.ADMINISTRATOR, ZK_ADDR);\n    _manager.connect();\n\n    _driver = new TaskDriver(_manager);\n\n    _admin = _gSetupTool.getClusterManagementTool();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestForceDeleteWorkflow.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"bacb137f6fa8182cd063cbfd52305a32edc8f92c","commitMessage":"@@@Cleanup test code and adding finalize method to avoid ZkClient leakage in the Helix-core tests. (#1138)\n\nThe ZkClient leakage is currently blocking the whole test suite to finish. This change cleans up some leaking tests and adding the finalize method to the critical ZkClient resource holders. Since we have enforced GC between test classes.  these finalize methods will help to release a major part of the leakage.\n\nNote that this fix still cannot eliminate all the undesired leakages.","date":"2020-07-04 15:59:19","modifiedFileCount":"40","status":"M","submitter":"Jiajun Wang"}]
