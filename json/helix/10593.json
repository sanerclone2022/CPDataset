[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testNullReplica() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            5, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n    \r\n    String idealStatePath = PropertyPathConfig.getPath(PropertyType.IDEALSTATES, clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n    \n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n    \n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":77,"groupId":"2029","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/33/dd30c5c98738811487e1b846d20419562f6d3c.src","preCode":"  public void testNullReplica() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            5, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n    \r\n    String idealStatePath = PropertyPathConfig.getPath(PropertyType.IDEALSTATES, clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n    \n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n    \n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testSessionExpiryInTransition() throws Exception\n  {\n    Logger.getRootLogger().setLevel(Level.WARN);\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            5, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n      TestZkHelixManager manager =\n          new TestZkHelixManager(clusterName,\n                                 instanceName,\n                                 InstanceType.PARTICIPANT,\n                                 ZK_ADDR);\n      participants[i] = new MockParticipant(manager, new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2012-10-25 07:14:36","endLine":114,"groupId":"2549","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionExpiryInTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/12/e500afd5d430bd5567f490a2a4965f9c530175.src","preCode":"  public void testSessionExpiryInTransition() throws Exception\n  {\n    Logger.getRootLogger().setLevel(Level.WARN);\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            5, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n      TestZkHelixManager manager =\n          new TestZkHelixManager(clusterName,\n                                 instanceName,\n                                 InstanceType.PARTICIPANT,\n                                 ZK_ADDR);\n      participants[i] = new MockParticipant(manager, new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestSessionExpiryInTransition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":2,"curCode":"  public void testNullReplica() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            5, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n    \r\n    String idealStatePath = PropertyPathConfig.getPath(PropertyType.IDEALSTATES, clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n    \n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n    \n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2012-10-25 07:14:36","endLine":77,"groupId":"2029","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/33/dd30c5c98738811487e1b846d20419562f6d3c.src","preCode":"  public void testNullReplica() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            5, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n    \r\n    String idealStatePath = PropertyPathConfig.getPath(PropertyType.IDEALSTATES, clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n    \n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n    \n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"N"},{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void testSessionExpiryInTransition() throws Exception\n  {\n    Logger.getRootLogger().setLevel(Level.WARN);\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            5, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n      ZkHelixTestManager manager =\n          new ZkHelixTestManager(clusterName,\n                                 instanceName,\n                                 InstanceType.PARTICIPANT,\n                                 ZK_ADDR);\n      participants[i] = new MockParticipant(manager, new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-04-06 08:30:58","endLine":133,"groupId":"2549","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionExpiryInTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e7/0c3ca23a285dbf21b2f929e58dcd428b58b7b2.src","preCode":"  public void testSessionExpiryInTransition() throws Exception\n  {\n    Logger.getRootLogger().setLevel(Level.WARN);\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            10, \r\n                            5, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n      TestZkHelixManager manager =\n          new TestZkHelixManager(clusterName,\n                                 instanceName,\n                                 InstanceType.PARTICIPANT,\n                                 ZK_ADDR);\n      participants[i] = new MockParticipant(manager, new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestSessionExpiryInTransition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"M","submitter":"Swaroop Jagadish"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath =\n        PropertyPathConfig.getPath(PropertyType.IDEALSTATES, clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":88,"groupId":"7073","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0f/5cc7251332085253540160411748ce1431c9db.src","preCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath =\n        PropertyPathConfig.getPath(PropertyType.IDEALSTATES, clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":111,"groupId":"4817","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionExpiryInTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/5b8ef6cc95fb08c2660ad3a24472730cc26259.src","preCode":"  public void testSessionExpiryInTransition() throws Exception {\n    Logger.getRootLogger().setLevel(Level.WARN);\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      ZkHelixTestManager manager =\n          new ZkHelixTestManager(clusterName, instanceName, InstanceType.PARTICIPANT, ZK_ADDR);\n      participants[i] = new MockParticipant(manager, new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    Thread.sleep(2000);\n    controller.syncStop();\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestSessionExpiryInTransition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"5c7721970eef78e2d13d35b4934b07cb11a03cd9","commitMessage":"@@@Merge branch 'helix-0.6.2-release' of https://git-wip-us.apache.org/repos/asf/incubator-helix into helix-0.6.2-release\n","date":"2013-10-25 09:35:16","modifiedFileCount":"105","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2017-01-29 08:55:24","commitOrder":4,"curCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath =\n        PropertyPathBuilder.getPath(PropertyType.IDEALSTATES, clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-02-02 12:19:43","endLine":88,"groupId":"3810","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e2/9945a011b84c8fb19fc3fec726913f4cfe15d3.src","preCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath =\n        PropertyPathConfig.getPath(PropertyType.IDEALSTATES, clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":4,"curCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":111,"groupId":"4817","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionExpiryInTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/5b8ef6cc95fb08c2660ad3a24472730cc26259.src","preCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestSessionExpiryInTransition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"0b7a1a0fc93bf1f4699c45b7427663a17e94fc99","commitMessage":"@@@Rename PropertyPathConfig to PropertyPathBuilder\n","date":"2017-02-02 12:19:43","modifiedFileCount":"33","status":"M","submitter":"Junkai Xue"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath = PropertyPathBuilder.idealState(clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":87,"groupId":"7073","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/be/f21a70557c9c163ac6ca258ad0188452178405.src","preCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath =\n        PropertyPathBuilder.getPath(PropertyType.IDEALSTATES, clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":5,"curCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":111,"groupId":"4817","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionExpiryInTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/5b8ef6cc95fb08c2660ad3a24472730cc26259.src","preCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestSessionExpiryInTransition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":6,"curCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath = PropertyPathBuilder.idealState(clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":88,"groupId":"7073","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/37/b8b8217bb6dca4645362a0e8b0d83eef9bfc4a.src","preCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath = PropertyPathBuilder.idealState(clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":6,"curCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":111,"groupId":"4817","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionExpiryInTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/5b8ef6cc95fb08c2660ad3a24472730cc26259.src","preCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestSessionExpiryInTransition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2018-06-19 01:21:53","commitOrder":7,"curCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath = PropertyPathBuilder.idealState(clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:57:09","endLine":87,"groupId":"7073","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/13558220334047d3b616d29897dcbc015ffce4.src","preCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath = PropertyPathBuilder.idealState(clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":7,"curCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-10-25 09:35:16","endLine":111,"groupId":"4817","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionExpiryInTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/5b8ef6cc95fb08c2660ad3a24472730cc26259.src","preCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestSessionExpiryInTransition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"4385d01a3673efa631d9837507c21ccab9f69be4","commitMessage":"@@@Refactor tests to use deleteCluster in test base class to deduplicate codes.\n","date":"2018-07-14 06:57:09","modifiedFileCount":"43","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2018-06-19 01:21:53","commitOrder":8,"curCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath = PropertyPathBuilder.idealState(clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:57:09","endLine":87,"groupId":"10593","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/fb/13558220334047d3b616d29897dcbc015ffce4.src","preCode":"  public void testNullReplica() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n    \r\n    String idealStatePath = PropertyPathBuilder.idealState(clusterName, \"TestDB0\");\n    ZNRecord idealState = _gZkClient.readData(idealStatePath);\n    idealState.getSimpleFields().remove(IdealState.IdealStateProperty.REPLICAS.toString());\n    _gZkClient.writeData(idealStatePath, idealState);\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2019-05-04 08:52:17","commitOrder":8,"curCode":"  public void testSessionExpiryInTransition() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result = ClusterStateVerifier\n        .verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":107,"groupId":"10593","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSessionExpiryInTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ab/c61e11694148e291ef8f212204c5f262e1f0ba.src","preCode":"  public void testSessionExpiryInTransition() throws Exception {\n    \r\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    final String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[5];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        10, \r\n        5, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    for (int i = 0; i < 5; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].setTransition(new SessionExpiryTransition());\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < 5; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestSessionExpiryInTransition.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
