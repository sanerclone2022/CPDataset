[{"authorTime":"2016-02-24 09:06:35","codes":[{"authorDate":"2016-02-24 09:06:35","commitOrder":9,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxForcedReassignmentsPerTask.name())) {\n        b.setMaxForcedReassignmentsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxForcedReassignmentsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      return b;\n    }\n","date":"2016-07-06 05:48:35","endLine":357,"groupId":"394","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d4/23d38edf6bedaa3629332fccbd019ec5dc34bd.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxForcedReassignmentsPerTask.name())) {\n        b.setMaxForcedReassignmentsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxForcedReassignmentsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"MB"},{"authorDate":"2016-02-24 09:06:35","commitOrder":9,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n      return this;\n    }\n","date":"2016-07-06 05:48:35","endLine":346,"groupId":"6779","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/db/9fdbaa271d97657e75eb1358e7943e00b1038e.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"B"}],"commitId":"d386aff394f2e4e7202f13fe2ed5e6533a8cfb29","commitMessage":"@@@Refactor Workflow and Jobqueue builders to make the builder API more clean.\n","date":"2016-07-06 05:48:35","modifiedFileCount":"16","status":"M","submitter":"Lei Xia"},{"authorTime":"2016-04-22 04:04:22","codes":[{"authorDate":"2016-04-22 04:04:22","commitOrder":10,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxForcedReassignmentsPerTask.name())) {\n        b.setMaxForcedReassignmentsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxForcedReassignmentsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      return b;\n    }\n","date":"2016-07-06 06:03:23","endLine":387,"groupId":"394","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1e/eca603454c33b5ee5696fe7f6321b194545ce4.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxForcedReassignmentsPerTask.name())) {\n        b.setMaxForcedReassignmentsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxForcedReassignmentsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"},{"authorDate":"2016-04-22 04:04:22","commitOrder":10,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n      return this;\n    }\n","date":"2016-07-06 06:03:23","endLine":380,"groupId":"6779","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dd/d37d520853190eb43a0c8981066682f6d851d4.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"be78a4f14076736cca511b1d3116546162e026fc","commitMessage":"@@@Add WorkflowType and JobType in WorkflowConfig and JobConfig\n\nAdd WorkflowType and JobType in WorkflowConfig and JobConfig\n\nRB=710119\nG=nuage-reviewers\nR=lxia. cji\nA=lxia\n","date":"2016-07-06 06:03:23","modifiedFileCount":"4","status":"M","submitter":"Junkai Xue"},{"authorTime":"2016-04-22 04:04:22","codes":[{"authorDate":"2016-06-07 04:19:53","commitOrder":11,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxForcedReassignmentsPerTask.name())) {\n        b.setMaxForcedReassignmentsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxForcedReassignmentsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      return b;\n    }\n","date":"2016-07-07 04:18:53","endLine":405,"groupId":"394","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7a/4e2d3b8d93035aaf2d9db7906b706d2ec8f360.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxForcedReassignmentsPerTask.name())) {\n        b.setMaxForcedReassignmentsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxForcedReassignmentsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"},{"authorDate":"2016-04-22 04:04:22","commitOrder":11,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n      return this;\n    }\n","date":"2016-07-06 06:03:23","endLine":380,"groupId":"6779","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dd/d37d520853190eb43a0c8981066682f6d851d4.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"947a7d55756bdb4f50a3b0b358fb0364542df723","commitMessage":"@@@Allow an instance group tag to be configured for a job.  so all tasks of the job can only be running on the instances containing the tag.\n\n1. Add instance group tag for jobs.\n2. Add a test for job assignment when the only instance can be assigned instance is disabled.\n","date":"2016-07-07 04:18:53","modifiedFileCount":"7","status":"M","submitter":"Junkai Xue"},{"authorTime":"2016-04-22 04:04:22","codes":[{"authorDate":"2016-09-14 07:01:39","commitOrder":12,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      return b;\n    }\n","date":"2016-09-22 01:43:35","endLine":409,"groupId":"3786","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a9/66f35c16472d9154c71da42500a91ce2182b7c.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxForcedReassignmentsPerTask.name())) {\n        b.setMaxForcedReassignmentsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxForcedReassignmentsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"},{"authorDate":"2016-04-22 04:04:22","commitOrder":12,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n      return this;\n    }\n","date":"2016-07-06 06:03:23","endLine":380,"groupId":"6779","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/dd/d37d520853190eb43a0c8981066682f6d851d4.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"9fc6c540bbcb4d7c71f0b7fe89e2acbc5955e859","commitMessage":"@@@Job Config and logic refactoring\n\n1. Support identical task initialization with job command and number of tasks\n2. Remove unused MaxForcedReassignmentPerTask field\n3. Refactor logics of failure.\n","date":"2016-09-22 01:43:35","modifiedFileCount":"8","status":"M","submitter":"Junkai Xue"},{"authorTime":"2016-10-07 02:34:22","codes":[{"authorDate":"2016-09-14 07:01:39","commitOrder":13,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      return b;\n    }\n","date":"2016-09-22 01:43:35","endLine":409,"groupId":"3786","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a9/66f35c16472d9154c71da42500a91ce2182b7c.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"N"},{"authorDate":"2016-10-07 02:34:22","commitOrder":13,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n      return this;\n    }\n","date":"2016-10-07 07:14:19","endLine":410,"groupId":"6779","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/17/259d257f83f56f778da0267a062cf3d27d8798.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"}],"commitId":"779103b5323d6f00d903082f58298a083a556a03","commitMessage":"@@@Check Workflow is JobQueue before doing parallel jobs logics\n","date":"2016-10-07 07:14:19","modifiedFileCount":"7","status":"M","submitter":"Junkai Xue"},{"authorTime":"2016-10-07 02:34:22","codes":[{"authorDate":"2016-12-16 10:20:03","commitOrder":14,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      return b;\n    }\n","date":"2016-12-16 10:20:03","endLine":484,"groupId":"3786","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b7/01623a646977457412999bf76ae9ca540cb745.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"},{"authorDate":"2016-10-07 02:34:22","commitOrder":14,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n      return this;\n    }\n","date":"2016-10-07 07:14:19","endLine":410,"groupId":"6779","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/17/259d257f83f56f778da0267a062cf3d27d8798.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"N"}],"commitId":"1eb40c3ffb5191c94ec4055b692d2601723f91cf","commitMessage":"@@@[HELIX-648] Extend WorkflowConfig and JobConfig to ResourceConfig\n\nWorkflowConfig and JobConfig are stored as ResourceConfig but still needs extra conversion in current codebase. Thus we have to extend those two configs to ResourceConfig.\n","date":"2016-12-16 10:20:03","modifiedFileCount":"10","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-06-03 14:26:50","codes":[{"authorDate":"2016-12-16 10:20:03","commitOrder":15,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      return b;\n    }\n","date":"2016-12-16 10:20:03","endLine":484,"groupId":"3786","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b7/01623a646977457412999bf76ae9ca540cb745.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"N"},{"authorDate":"2017-06-03 14:26:50","commitOrder":15,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","date":"2017-06-24 03:06:17","endLine":481,"groupId":"6779","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4c/6e97108b8a9fb40b3d6187fd1b70fb5d95e31d.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"e35fe4fffc952f7ccae7bfa4cbf89ef75e404a53","commitMessage":"@@@Add workflow configuration to allow or disallow assigning multiple jobs to one instance.\n\nBy default.  it is not allowed that Helix assigns multiple jobs in one workflow to the same instances.\nIf it is set to be true.  the instance can start executing multiple jobs in each workflow.\n\nWhen application sets max tasks throttling for the participants.  allowing overlapping assignment can maximize utilization.\n","date":"2017-06-24 03:06:17","modifiedFileCount":"4","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2017-06-03 14:26:50","codes":[{"authorDate":"2017-04-27 06:34:25","commitOrder":16,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","date":"2017-07-13 04:58:05","endLine":505,"groupId":"3786","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/12/aa058be246be84ee38f0c5c0a33fa09c943c19.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":433,"status":"M"},{"authorDate":"2017-06-03 14:26:50","commitOrder":16,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","date":"2017-06-24 03:06:17","endLine":481,"groupId":"6779","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4c/6e97108b8a9fb40b3d6187fd1b70fb5d95e31d.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"N"}],"commitId":"8cbbf834efa30b07c31067e1b48ac6332763b02e","commitMessage":"@@@[HELIX-654] Running task rebalance\n\nAdd a job config RebalanceRunningTask.\n\nFor generic task.  if feature is enabled.  Helix will drop running\ntasks that are assigned differently from the previous assignment. \nwhich will cause cancellation of that running task on participant.\nThe task will then be re-assigned to a new instance.\n\nFor fix target task.  running task always follows the partition.  so\ntasks are always re-assigned as needed.\n\nAdd different test cases for this feature enabled/disabled.\n","date":"2017-07-13 04:58:05","modifiedFileCount":"10","status":"M","submitter":"Weihan Kong"},{"authorTime":"2017-06-03 14:26:50","codes":[{"authorDate":"2017-10-04 06:18:32","commitOrder":17,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","date":"2017-10-04 06:18:32","endLine":519,"groupId":"5238","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6c/3aed4b894af4f88e0522e7d6bec3a6552a280e.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"M"},{"authorDate":"2017-06-03 14:26:50","commitOrder":17,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","date":"2017-06-24 03:06:17","endLine":481,"groupId":"6779","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4c/6e97108b8a9fb40b3d6187fd1b70fb5d95e31d.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"N"}],"commitId":"177d5bdc29fc2011e12ca82d7bdf5456ef31a956","commitMessage":"@@@Add timeout in JobConfig\n\nTo support job-level timeout for the task framework.  add the configuration field. Associated changed is made in builder and JobBean.\n","date":"2017-10-04 06:18:32","modifiedFileCount":"3","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-02-08 06:59:10","codes":[{"authorDate":"2017-10-04 06:18:32","commitOrder":18,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","date":"2017-10-04 06:18:32","endLine":519,"groupId":"5238","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6c/3aed4b894af4f88e0522e7d6bec3a6552a280e.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"N"},{"authorDate":"2017-02-08 06:59:10","commitOrder":18,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","date":"2017-10-07 03:23:47","endLine":545,"groupId":"6779","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cc/0fdcee71865ec89e622bcdcc9e9653156bbea3.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"M"}],"commitId":"0aeb5579d4f7130d6a4310d2d817e0153620cae0","commitMessage":"@@@Support configurable job purge interval for a queue.\n","date":"2017-10-07 03:23:47","modifiedFileCount":"9","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-10-04 06:18:32","commitOrder":19,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","date":"2017-10-04 06:18:32","endLine":519,"groupId":"5238","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6c/3aed4b894af4f88e0522e7d6bec3a6552a280e.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"N"},{"authorDate":"2017-11-08 08:48:26","commitOrder":19,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","date":"2017-11-08 08:48:26","endLine":562,"groupId":"6779","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/24d75fd9d4ad339b46a6107318ebf84b560a81.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-02-09 09:15:41","codes":[{"authorDate":"2017-10-04 06:18:32","commitOrder":20,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","date":"2017-10-04 06:18:32","endLine":519,"groupId":"5238","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6c/3aed4b894af4f88e0522e7d6bec3a6552a280e.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"N"},{"authorDate":"2018-02-09 09:15:41","commitOrder":20,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Timeout.name())) {\n        setTimeout(Long.parseLong(cfg.get(WorkflowConfigProperty.Timeout.name())));\n      }\n\n      return this;\n    }\n","date":"2018-03-21 02:55:34","endLine":590,"groupId":"6779","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f9/016d1d42f03a500c9b3218b562cafcc2151429.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":514,"status":"M"}],"commitId":"debb9bb23125f4c073a3dba75bc16df3558e0c35","commitMessage":"@@@Support Workflow level timeout\n\nCurrent Helix supports job level timeout.  we believe it does make sense to support workflow level timeout.  when users are confident with workflow running time. It could be used for following cases:\n1. Prevent long run workflows stuck there forever.\n2. If someone pause the workflow forget to resume back.  workflow can be terminated with timeout.\n","date":"2018-03-21 02:55:34","modifiedFileCount":"4","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-07-10 09:31:37","codes":[{"authorDate":"2018-07-10 09:31:37","commitOrder":21,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil\n            .deserializeJobCommandConfigMap(cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.QuotaType.name())) {\n        b.setQuotaType(cfg.get(JobConfigProperty.QuotaType.name()));\n      }\n      return b;\n    }\n","date":"2018-07-11 02:26:00","endLine":539,"groupId":"5238","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/18/920627d987b43d1064a40079a3b48edc1f421f.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil.deserializeJobCommandConfigMap(\n            cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(\n            Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"},{"authorDate":"2018-07-10 09:31:37","commitOrder":21,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Timeout.name())) {\n        setTimeout(Long.parseLong(cfg.get(WorkflowConfigProperty.Timeout.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.QuotaType.name())) {\n        setQuotaType(cfg.get(WorkflowConfigProperty.QuotaType.name()));\n      }\n\n      return this;\n    }\n","date":"2018-07-11 02:26:00","endLine":611,"groupId":"6779","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/66/1615dd1cd79b19eafeee9388c7be4589eaee6d.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Timeout.name())) {\n        setTimeout(Long.parseLong(cfg.get(WorkflowConfigProperty.Timeout.name())));\n      }\n\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"M"}],"commitId":"35fcfa0ec38e382cb7d4d981abdd4b5dcea11338","commitMessage":"@@@[HELIX-722] Add quotaType field to WorkflowConfig and JobConfig\n\nWorkflowConfig and JobConfig define workflows and jobs respectively. In order to support job scheduling based on quota types.  we need to associate workflows and jobs with quota types and provide APIs for get/set accordingly.\n\nChangeList:\n1. Workflow and Job Config have APIs added for quota type support\n2. Code formatting per Helix code formatter\n","date":"2018-07-11 02:26:00","modifiedFileCount":"4","status":"M","submitter":"Hunter Lee"},{"authorTime":"2018-07-18 04:36:18","codes":[{"authorDate":"2018-07-18 04:36:18","commitOrder":22,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil\n            .deserializeJobCommandConfigMap(cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","date":"2018-07-18 06:37:40","endLine":560,"groupId":"5238","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b4/fa131f7d4e106b0af1b5f58aecdcb9c838080f.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<String>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil\n            .deserializeJobCommandConfigMap(cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.QuotaType.name())) {\n        b.setQuotaType(cfg.get(JobConfigProperty.QuotaType.name()));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":486,"status":"M"},{"authorDate":"2018-07-18 04:36:18","commitOrder":22,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Timeout.name())) {\n        setTimeout(Long.parseLong(cfg.get(WorkflowConfigProperty.Timeout.name())));\n      }\n\n      return this;\n    }\n","date":"2018-07-18 06:37:40","endLine":578,"groupId":"6779","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/da61441de7803e1b6db415c8b9e8d80500139a.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Timeout.name())) {\n        setTimeout(Long.parseLong(cfg.get(WorkflowConfigProperty.Timeout.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.QuotaType.name())) {\n        setQuotaType(cfg.get(WorkflowConfigProperty.QuotaType.name()));\n      }\n\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":502,"status":"M"}],"commitId":"36ab2a6028dad39b32d3a15da942b4385ff9fd1d","commitMessage":"@@@[HELIX-738] Remove quotaType APIs and make jobs inherit type from workflows\n\nFor quota-based task scheduling.  for each job.  we provided get/setQuotaType APIs. However.  the use case for workflow types and job types were similar enough that we decided to merge them and begin using workflow/job types for quota-based scheduling. Job types will now be used as quota types.  and all jobs will inherit the type.  if set.  from their parent workflow.  at assignment and schedule time.\n\nChangelist:\n1. Remove APIs around quotaType in Workflow/JobConfig\n2. Add an internal method in TaskAssignmentCalculator that includes logic for determining which quota type each job should use\n3. Adjust tests so that they test and pass successfully\n","date":"2018-07-18 06:37:40","modifiedFileCount":"10","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-03-17 02:16:34","codes":[{"authorDate":"2020-03-17 02:16:34","commitOrder":23,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil\n            .deserializeJobCommandConfigMap(cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.parseBoolean(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.parseBoolean(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.parseBoolean(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      if (cfg.containsKey(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)) {\n        b.setEnableCompression(\n            Boolean.parseBoolean(cfg.get(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)));\n      }\n      return b;\n    }\n","date":"2020-03-17 02:16:34","endLine":566,"groupId":"5238","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3a/0fb9206b81d14ee42219f0dc749d8b0f771e6f.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil\n            .deserializeJobCommandConfigMap(cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.valueOf(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.valueOf(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.valueOf(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"M"},{"authorDate":"2020-03-17 02:16:34","commitOrder":23,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      if (cfg.containsKey(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)) {\n        setEnableCompression(\n            Boolean.parseBoolean(cfg.get(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)));\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Timeout.name())) {\n        setTimeout(Long.parseLong(cfg.get(WorkflowConfigProperty.Timeout.name())));\n      }\n\n      return this;\n    }\n","date":"2020-03-17 02:16:34","endLine":591,"groupId":"5164","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/53/9251360e2f26957160d758212c231ce4a8f6b8.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Timeout.name())) {\n        setTimeout(Long.parseLong(cfg.get(WorkflowConfigProperty.Timeout.name())));\n      }\n\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"}],"commitId":"f96a3c4f17d0c25b3fce623f562c8ecf852f03f2","commitMessage":"@@@Support enableCompression in workflow and job configs (#883)\n\nPreviously.  there was no way for users to set enableCompression in workflows and jobs configs. This allows them to set that field in the Builder.","date":"2020-03-17 02:16:34","modifiedFileCount":"5","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-03-17 02:16:34","codes":[{"authorDate":"2020-08-14 07:45:32","commitOrder":24,"curCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil\n            .deserializeJobCommandConfigMap(cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.parseBoolean(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.parseBoolean(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TerminalStateExpiry.name())) {\n        b.setTerminalStateExpiry(\n            Long.valueOf(cfg.get(JobConfigProperty.TerminalStateExpiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.parseBoolean(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      if (cfg.containsKey(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)) {\n        b.setEnableCompression(\n            Boolean.parseBoolean(cfg.get(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)));\n      }\n      return b;\n    }\n","date":"2020-08-14 07:45:32","endLine":586,"groupId":"10717","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"fromMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4c/127f83256df6d51fbe30d574c53ce98730913e.src","preCode":"    public static Builder fromMap(Map<String, String> cfg) {\n      Builder b = new Builder();\n      if (cfg.containsKey(JobConfigProperty.WorkflowID.name())) {\n        b.setWorkflow(cfg.get(JobConfigProperty.WorkflowID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobID.name())) {\n        b.setJobId(cfg.get(JobConfigProperty.JobID.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetResource.name())) {\n        b.setTargetResource(cfg.get(JobConfigProperty.TargetResource.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitions.name())) {\n        b.setTargetPartitions(csvToStringList(cfg.get(JobConfigProperty.TargetPartitions.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TargetPartitionStates.name())) {\n        b.setTargetPartitionStates(new HashSet<>(\n            Arrays.asList(cfg.get(JobConfigProperty.TargetPartitionStates.name()).split(\",\"))));\n      }\n      if (cfg.containsKey(JobConfigProperty.Command.name())) {\n        b.setCommand(cfg.get(JobConfigProperty.Command.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobCommandConfig.name())) {\n        Map<String, String> commandConfigMap = TaskUtil\n            .deserializeJobCommandConfigMap(cfg.get(JobConfigProperty.JobCommandConfig.name()));\n        b.setJobCommandConfigMap(commandConfigMap);\n      }\n      if (cfg.containsKey(JobConfigProperty.Timeout.name())) {\n        b.setTimeout(Long.parseLong(cfg.get(JobConfigProperty.Timeout.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TimeoutPerPartition.name())) {\n        b.setTimeoutPerTask(Long.parseLong(cfg.get(JobConfigProperty.TimeoutPerPartition.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.ConcurrentTasksPerInstance.name())) {\n        b.setNumConcurrentTasksPerInstance(\n            Integer.parseInt(cfg.get(JobConfigProperty.ConcurrentTasksPerInstance.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.MaxAttemptsPerTask.name())) {\n        b.setMaxAttemptsPerTask(\n            Integer.parseInt(cfg.get(JobConfigProperty.MaxAttemptsPerTask.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.FailureThreshold.name())) {\n        b.setFailureThreshold(Integer.parseInt(cfg.get(JobConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.TaskRetryDelay.name())) {\n        b.setTaskRetryDelay(Long.parseLong(cfg.get(JobConfigProperty.TaskRetryDelay.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DelayTime.name())) {\n        b.setExecutionDelay(Long.parseLong(cfg.get(JobConfigProperty.DelayTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.StartTime.name())) {\n        b.setExecutionStart(Long.parseLong(cfg.get(JobConfigProperty.StartTime.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.DisableExternalView.name())) {\n        b.setDisableExternalView(\n            Boolean.parseBoolean(cfg.get(JobConfigProperty.DisableExternalView.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.IgnoreDependentJobFailure.name())) {\n        b.setIgnoreDependentJobFailure(\n            Boolean.parseBoolean(cfg.get(JobConfigProperty.IgnoreDependentJobFailure.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.JobType.name())) {\n        b.setJobType(cfg.get(JobConfigProperty.JobType.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.InstanceGroupTag.name())) {\n        b.setInstanceGroupTag(cfg.get(JobConfigProperty.InstanceGroupTag.name()));\n      }\n      if (cfg.containsKey(JobConfigProperty.Expiry.name())) {\n        b.setExpiry(Long.valueOf(cfg.get(JobConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(JobConfigProperty.RebalanceRunningTask.name())) {\n        b.setRebalanceRunningTask(\n            Boolean.parseBoolean(cfg.get(JobConfigProperty.RebalanceRunningTask.name())));\n      }\n      if (cfg.containsKey(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)) {\n        b.setEnableCompression(\n            Boolean.parseBoolean(cfg.get(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)));\n      }\n      return b;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/JobConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"M"},{"authorDate":"2020-03-17 02:16:34","commitOrder":24,"curCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      if (cfg.containsKey(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)) {\n        setEnableCompression(\n            Boolean.parseBoolean(cfg.get(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)));\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Timeout.name())) {\n        setTimeout(Long.parseLong(cfg.get(WorkflowConfigProperty.Timeout.name())));\n      }\n\n      return this;\n    }\n","date":"2020-03-17 02:16:34","endLine":591,"groupId":"10717","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"setConfigMap","params":"(Map<String@String>cfg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/53/9251360e2f26957160d758212c231ce4a8f6b8.src","preCode":"    public Builder setConfigMap(Map<String, String> cfg) {\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowID.name())) {\n        setWorkflowId(cfg.get(WorkflowConfigProperty.WorkflowID.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Expiry.name())) {\n        setExpiry(Long.parseLong(cfg.get(WorkflowConfigProperty.Expiry.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        setFailureThreshold(\n            Integer.parseInt(cfg.get(WorkflowConfigProperty.FailureThreshold.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Dag.name())) {\n        setJobDag(JobDag.fromJson(cfg.get(WorkflowConfigProperty.Dag.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.TargetState.name())) {\n        setTargetState(TargetState.valueOf(cfg.get(WorkflowConfigProperty.TargetState.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.Terminable.name())) {\n        setTerminable(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.Terminable.name())));\n      }\n      if (cfg.containsKey(WorkflowConfigProperty.ParallelJobs.name())) {\n        String value = cfg.get(WorkflowConfigProperty.ParallelJobs.name());\n        if (value == null) {\n          setParallelJobs(1);\n        } else {\n          setParallelJobs(Integer.parseInt(value));\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.capacity.name())) {\n        int capacity = Integer.valueOf(cfg.get(WorkflowConfigProperty.capacity.name()));\n        if (capacity > 0) {\n          setCapacity(capacity);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.JobPurgeInterval.name())) {\n        long jobPurgeInterval =\n            Long.valueOf(cfg.get(WorkflowConfigProperty.JobPurgeInterval.name()));\n        if (jobPurgeInterval > 0) {\n          setJobPurgeInterval(jobPurgeInterval);\n        }\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.FailureThreshold.name())) {\n        int threshold = Integer.valueOf(cfg.get(WorkflowConfigProperty.FailureThreshold.name()));\n        if (threshold >= 0) {\n          setFailureThreshold(threshold);\n        }\n      }\n\n      if (cfg.containsKey(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)) {\n        setEnableCompression(\n            Boolean.parseBoolean(cfg.get(ZNRecord.ENABLE_COMPRESSION_BOOLEAN_FIELD)));\n      }\n\n      \r\n      ScheduleConfig scheduleConfig = parseScheduleFromConfigMap(cfg);\n      if (scheduleConfig != null) {\n        setScheduleConfig(scheduleConfig);\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.WorkflowType.name())) {\n        setWorkFlowType(cfg.get(WorkflowConfigProperty.WorkflowType.name()));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.IsJobQueue.name())) {\n        setJobQueue(Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.IsJobQueue.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.AllowOverlapJobAssignment.name())) {\n        setAllowOverlapJobAssignment(\n            Boolean.parseBoolean(cfg.get(WorkflowConfigProperty.AllowOverlapJobAssignment.name())));\n      }\n\n      if (cfg.containsKey(WorkflowConfigProperty.Timeout.name())) {\n        setTimeout(Long.parseLong(cfg.get(WorkflowConfigProperty.Timeout.name())));\n      }\n\n      return this;\n    }\n","realPath":"helix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"N"}],"commitId":"e163efc4de07a67069fdbd4effd19729158fa832","commitMessage":"@@@Terminal State Job Purging (#1231)\n\nThis commit added a new field to JobConfig for terminal job expiries.  and added new logic to garbage collection stage to purge jobs in terminal states.\n","date":"2020-08-14 07:45:32","modifiedFileCount":"6","status":"M","submitter":"Neal Sun"}]
