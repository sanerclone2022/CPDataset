[{"authorTime":"2017-10-12 08:00:32","codes":[{"authorDate":"2017-10-12 08:00:32","commitOrder":1,"curCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertFalse(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-01-25 10:29:31","endLine":183,"groupId":"7073","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransitionThrottleOnErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/8db940f18096257c962d2f35cc2002749ff6a8.src","preCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertFalse(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2017-10-12 08:00:32","commitOrder":1,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2018-01-25 10:29:31","endLine":208,"groupId":"7073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5e/8db940f18096257c962d2f35cc2002749ff6a8.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"27dd9cc5eff134ab6bf843e5daa3fa0566321ed7","commitMessage":"@@@Add cluster config to tolerate ERROR Partition when trying to schedule load balance transition\n\nWith this change.  the controller will only perform load balance transition if\n   1. no recovery operation to be scheduled.\n   2. error partition count is less than configured limitation.\nThe limitation is by default 0 (not tolerate ERROR partition). If the setting is negative number.  load balance will be triggered with any error count.\n\nNote that controller will only throttle transition when StateTransitionThrottleConfig is configured.\nAnd the transition to remove \"additional\" ERROR replicas are regarded as LOAD_BALANCE transition.  when all required states are already available.\n","date":"2018-01-25 10:29:31","modifiedFileCount":"2","status":"B","submitter":"Jiajun Wang"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertFalse(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":185,"groupId":"7073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransitionThrottleOnErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/12/4160e3e293cebcd7693b656cc3cc243817a270.src","preCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertFalse(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":2,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    _gSetupTool.deleteCluster(clusterName);\n  }\n","date":"2018-07-14 02:20:49","endLine":212,"groupId":"7073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/12/4160e3e293cebcd7693b656cc3cc243817a270.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertFalse(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 02:20:49","endLine":185,"groupId":"7073","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransitionThrottleOnErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/12/4160e3e293cebcd7693b656cc3cc243817a270.src","preCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertFalse(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"},{"authorDate":"2018-06-13 04:57:09","commitOrder":3,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2018-07-14 06:55:35","endLine":218,"groupId":"7073","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/874bea55780c4af387100e5733a2bb6d1862d7.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    _gSetupTool.deleteCluster(clusterName);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-19 01:21:53","commitOrder":4,"curCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertFalse(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:57:09","endLine":193,"groupId":"7073","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransitionThrottleOnErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/21/6d9511f321fa77e066938a2bc4ed4d7d365096.src","preCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertFalse(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    _gSetupTool.deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2018-07-14 06:55:35","endLine":218,"groupId":"7073","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/874bea55780c4af387100e5733a2bb6d1862d7.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"N"}],"commitId":"4385d01a3673efa631d9837507c21ccab9f69be4","commitMessage":"@@@Refactor tests to use deleteCluster in test base class to deduplicate codes.\n","date":"2018-07-14 06:57:09","modifiedFileCount":"43","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-07-17 02:48:19","commitOrder":5,"curCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-17 05:55:31","endLine":191,"groupId":"7073","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransitionThrottleOnErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/86/1eee0620fecaaeeda8fec8281b7f6b67d56fe0.src","preCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertFalse(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(\n        pollForPartitionAssignment(accessor, participants[participantCount - 1], resourceName,\n            3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2018-07-14 06:55:35","endLine":218,"groupId":"7073","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/96/874bea55780c4af387100e5733a2bb6d1862d7.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"N"}],"commitId":"343f8dd33d49a74e6def97a9e58b4adf6b007ee3","commitMessage":"@@@[HELIX-731] Fix TestStateTransitionThrottle and comparison operator change\n\nDue to the change made in relation to allowing downward state transitions to take place while error or recovery balance transitions are present.  this test was failing due to the change in the assumption. Parameters were adjusted.  and test conditions were modified such that it is testing the new assumptions correctly.\n\nChangelist:\n1. TestStateTransitionThrottle assert statements were modified so that it assumes downward load balance transitions taking place\n2. Comparison operator in IntermediateStateCalcState to make it more strictly backward-compatible\n","date":"2018-07-17 05:55:31","modifiedFileCount":"2","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":189,"groupId":"7073","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransitionThrottleOnErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f1/628f602412eb824847ce91fad1f57ca9e354d8.src","preCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":6,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    String resourceNamePrefix = \"TestDB\";\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2019-05-25 09:19:21","endLine":215,"groupId":"7073","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f1/628f602412eb824847ce91fad1f57ca9e354d8.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2020-11-18 08:24:18","commitOrder":7,"curCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-11-18 08:24:18","endLine":194,"groupId":"10439","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testTransitionThrottleOnErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/52/cc624010e608c000856bc43787876bc984a159.src","preCode":"  public void testTransitionThrottleOnErrorPartition() throws Exception {\n    String clusterName = getShortClassName() + \"testMaxErrorPartition\";\n    MockParticipantManager[] participants = new MockParticipantManager[participantCount];\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    final ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    setupCluster(clusterName, accessor);\n\n    \r\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    \r\n    Map<String, Set<String>> errPartitions = new HashMap<>();\n    errPartitions.put(\"OFFLINE-SLAVE\", TestHelper.setOf(resourceName + \"_0\"));\n\n    \r\n    for (int i = 0; i < participantCount - 1; i++) {\n      participants[i] =\n          new MockParticipantManager(ZK_ADDR, clusterName, \"localhost_\" + (12918 + i));\n      if (i == 0) {\n        participants[i].setTransition(new ErrTransition(errPartitions));\n      }\n      participants[i].syncStart();\n    }\n\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    BestPossibleExternalViewVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient).build();\n    Assert.assertTrue(verifier.verify(3000));\n\n    \r\n    participants[participantCount - 1] = new MockParticipantManager(ZK_ADDR, clusterName,\n        \"localhost_\" + (12918 + participantCount - 1));\n    participants[participantCount - 1].syncStart();\n    \r\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 5000));\n\n    \r\n    clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setErrorPartitionThresholdForLoadBalance(1);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n\n    _gSetupTool.rebalanceResource(clusterName, resourceName, 3);\n\n    Assert.assertTrue(pollForPartitionAssignment(accessor, participants[participantCount - 1],\n        resourceName, 3000));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < participantCount; i++) {\n      participants[i].syncStop();\n    }\n    deleteCluster(clusterName);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":7,"curCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    String resourceNamePrefix = \"TestDB\";\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","date":"2019-05-25 09:19:21","endLine":215,"groupId":"10439","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"(StringclusterName@ZKHelixDataAccessoraccessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f1/628f602412eb824847ce91fad1f57ca9e354d8.src","preCode":"  private void setupCluster(String clusterName, ZKHelixDataAccessor accessor) throws Exception {\n    String resourceNamePrefix = \"TestDB\";\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        resourceNamePrefix, \r\n        1, \r\n        15, \r\n        participantCount, \r\n        3, \r\n        \"MasterSlave\", IdealState.RebalanceMode.FULL_AUTO, true); \r\n\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    ClusterConfig clusterConfig = accessor.getProperty(accessor.keyBuilder().clusterConfig());\n    clusterConfig.setResourcePriorityField(\"Name\");\n    List<StateTransitionThrottleConfig> throttleConfigs = new ArrayList<>();\n    throttleConfigs.add(\n        new StateTransitionThrottleConfig(StateTransitionThrottleConfig.RebalanceType.LOAD_BALANCE,\n            StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    throttleConfigs.add(new StateTransitionThrottleConfig(\n        StateTransitionThrottleConfig.RebalanceType.RECOVERY_BALANCE,\n        StateTransitionThrottleConfig.ThrottleScope.CLUSTER, 100));\n    clusterConfig.setStateTransitionThrottleConfigs(throttleConfigs);\n    accessor.setProperty(keyBuilder.clusterConfig(), clusterConfig);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestStateTransitionThrottle.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"}],"commitId":"1d6d6076550f4076c2108e7738c6f0d54bd4178d","commitMessage":"@@@Stabilizing several tests by giving a starting up waiting periods  (#1533)\n\nStabilizing several tests by giving a starting up waiting periods up-on constructing BestPossibleExternalViewVerifier.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-11-18 08:24:18","modifiedFileCount":"12","status":"M","submitter":"kaisun2000"}]
