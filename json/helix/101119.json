[{"authorTime":"2020-06-03 08:13:56","codes":[{"authorDate":"2020-02-19 01:38:13","commitOrder":4,"curCode":"  public Response getPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n      @PathParam(\"path\") String path) {\n    path = \"/\" + path;\n    if (!ZkValidationUtil.isPathValid(path)) {\n      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n      return badRequest(\n          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n    }\n    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n    if (propertyStoreDataAccessor.exists(recordPath, AccessOption.PERSISTENT)) {\n      byte[] bytes = propertyStoreDataAccessor.get(recordPath, null, AccessOption.PERSISTENT);\n      ZNRecord znRecord = (ZNRecord) ZN_RECORD_SERIALIZER.deserialize(bytes);\n      \r\n      if (znRecord == null) {\n        ObjectNode jsonNode = OBJECT_MAPPER.createObjectNode();\n        jsonNode.put(CONTENT_KEY, new String(bytes));\n        return JSONRepresentation(jsonNode);\n      }\n      return JSONRepresentation(znRecord);\n    } else {\n      throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\n          .entity(String.format(\"The property store path %s doesn't exist\", recordPath)).build());\n    }\n  }\n","date":"2020-04-09 08:23:30","endLine":81,"groupId":"1167","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getPropertyByPath","params":"(@PathParam(\"clusterId\")StringclusterId@@PathParam(\"path\")Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e5/0d67ea25270c6dcb1f1d7bfc8128eb992543af.src","preCode":"  public Response getPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n      @PathParam(\"path\") String path) {\n    path = \"/\" + path;\n    if (!ZkValidationUtil.isPathValid(path)) {\n      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n      return badRequest(\n          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n    }\n    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n    if (propertyStoreDataAccessor.exists(recordPath, AccessOption.PERSISTENT)) {\n      byte[] bytes = propertyStoreDataAccessor.get(recordPath, null, AccessOption.PERSISTENT);\n      ZNRecord znRecord = (ZNRecord) ZN_RECORD_SERIALIZER.deserialize(bytes);\n      \r\n      if (znRecord == null) {\n        ObjectNode jsonNode = OBJECT_MAPPER.createObjectNode();\n        jsonNode.put(CONTENT_KEY, new String(bytes));\n        return JSONRepresentation(jsonNode);\n      }\n      return JSONRepresentation(znRecord);\n    } else {\n      throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\n          .entity(String.format(\"The property store path %s doesn't exist\", recordPath)).build());\n    }\n  }\n","realPath":"helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"NB"},{"authorDate":"2020-06-03 08:13:56","commitOrder":4,"curCode":"  public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n      @PathParam(\"path\") String path,\n      @QueryParam(\"isZNRecord\") @DefaultValue(\"true\") String isZNRecord, String content) {\n    path = \"/\" + path;\n    if (!ZkValidationUtil.isPathValid(path)) {\n      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n      return badRequest(\n          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n    }\n    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n    try {\n      if (Boolean.parseBoolean(isZNRecord)) {\n        try {\n          ZNRecord record = toZNRecord(content);\n          BaseDataAccessor<ZNRecord> propertyStoreDataAccessor =\n              getDataAccssor(clusterId).getBaseDataAccessor();\n          if (!propertyStoreDataAccessor.set(recordPath, record, AccessOption.PERSISTENT)) {\n            return serverError(\n                \"Failed to set content: \" + content + \" in PropertyStore path: \" + path);\n          }\n        } catch (IOException e) {\n          LOG.error(\"Failed to deserialize content \" + content + \" into a ZNRecord!\", e);\n          return badRequest(\n              \"Failed to write to path: \" + recordPath + \"! Content is not a valid ZNRecord!\");\n        }\n      } else {\n        ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n        if (!propertyStoreDataAccessor\n            .set(recordPath, content.getBytes(), AccessOption.PERSISTENT)) {\n          return serverError(\n              \"Failed to set content: \" + content + \" in PropertyStore path: \" + path);\n        }\n      }\n      return OK();\n    } catch (Exception e) {\n      return serverError(e);\n    }\n  }\n","date":"2020-06-03 08:13:56","endLine":136,"groupId":"3673","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"putPropertyByPath","params":"(@PathParam(\"clusterId\")StringclusterId@@PathParam(\"path\")Stringpath@@QueryParam(\"isZNRecord\")@DefaultValue(\"true\")StringisZNRecord@Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/af/9efac85e16f065a0e57d203dff2abde010e5ff.src","preCode":"  public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n      @PathParam(\"path\") String path,\n      @QueryParam(\"isZNRecord\") @DefaultValue(\"true\") String isZNRecord, String content) {\n    path = \"/\" + path;\n    if (!ZkValidationUtil.isPathValid(path)) {\n      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n      return badRequest(\n          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n    }\n    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n    try {\n      if (Boolean.parseBoolean(isZNRecord)) {\n        try {\n          ZNRecord record = toZNRecord(content);\n          BaseDataAccessor<ZNRecord> propertyStoreDataAccessor =\n              getDataAccssor(clusterId).getBaseDataAccessor();\n          if (!propertyStoreDataAccessor.set(recordPath, record, AccessOption.PERSISTENT)) {\n            return serverError(\n                \"Failed to set content: \" + content + \" in PropertyStore path: \" + path);\n          }\n        } catch (IOException e) {\n          LOG.error(\"Failed to deserialize content \" + content + \" into a ZNRecord!\", e);\n          return badRequest(\n              \"Failed to write to path: \" + recordPath + \"! Content is not a valid ZNRecord!\");\n        }\n      } else {\n        ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n        if (!propertyStoreDataAccessor\n            .set(recordPath, content.getBytes(), AccessOption.PERSISTENT)) {\n          return serverError(\n              \"Failed to set content: \" + content + \" in PropertyStore path: \" + path);\n        }\n      }\n      return OK();\n    } catch (Exception e) {\n      return serverError(e);\n    }\n  }\n","realPath":"helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"}],"commitId":"dbe283129c55429410b88d8ae37ab9e98322ee70","commitMessage":"@@@Add PropertyStore write endpoint to Helix REST (#1049)\n\nThis commit adds in Helix REST a write endpoint that allows you to either write byte array or a ZNRecord to any path under PropertyStore.  which is a directory in cluster metadata in ZK where applications can write custom data.","date":"2020-06-03 08:13:56","modifiedFileCount":"4","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-06-10 07:04:19","codes":[{"authorDate":"2020-06-10 07:04:19","commitOrder":5,"curCode":"  public Response getPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n      @PathParam(\"path\") String path) {\n    path = \"/\" + path;\n    if (!ZkValidationUtil.isPathValid(path)) {\n      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n      return badRequest(\n          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n    }\n    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n    BaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n    if (propertyStoreDataAccessor.exists(recordPath, AccessOption.PERSISTENT)) {\n      byte[] bytes = propertyStoreDataAccessor.get(recordPath, null, AccessOption.PERSISTENT);\n      ZNRecord znRecord = (ZNRecord) ZN_RECORD_SERIALIZER.deserialize(bytes);\n      \r\n      if (znRecord == null) {\n        ObjectNode jsonNode = OBJECT_MAPPER.createObjectNode();\n        jsonNode.put(CONTENT_KEY, new String(bytes));\n        return JSONRepresentation(jsonNode);\n      }\n      return JSONRepresentation(znRecord);\n    } else {\n      throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\n          .entity(String.format(\"The property store path %s doesn't exist\", recordPath)).build());\n    }\n  }\n","date":"2020-06-10 07:04:19","endLine":85,"groupId":"101119","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getPropertyByPath","params":"(@PathParam(\"clusterId\")StringclusterId@@PathParam(\"path\")Stringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e9/2a689dd1a3b51815644992a1730a7f220e7722.src","preCode":"  public Response getPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n      @PathParam(\"path\") String path) {\n    path = \"/\" + path;\n    if (!ZkValidationUtil.isPathValid(path)) {\n      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n      return badRequest(\n          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n    }\n    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n    if (propertyStoreDataAccessor.exists(recordPath, AccessOption.PERSISTENT)) {\n      byte[] bytes = propertyStoreDataAccessor.get(recordPath, null, AccessOption.PERSISTENT);\n      ZNRecord znRecord = (ZNRecord) ZN_RECORD_SERIALIZER.deserialize(bytes);\n      \r\n      if (znRecord == null) {\n        ObjectNode jsonNode = OBJECT_MAPPER.createObjectNode();\n        jsonNode.put(CONTENT_KEY, new String(bytes));\n        return JSONRepresentation(jsonNode);\n      }\n      return JSONRepresentation(znRecord);\n    } else {\n      throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\n          .entity(String.format(\"The property store path %s doesn't exist\", recordPath)).build());\n    }\n  }\n","realPath":"helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-06-10 07:04:19","commitOrder":5,"curCode":"  public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n      @PathParam(\"path\") String path,\n      @QueryParam(\"isZNRecord\") @DefaultValue(\"true\") String isZNRecord, String content) {\n    path = \"/\" + path;\n    if (!ZkValidationUtil.isPathValid(path)) {\n      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n      return badRequest(\n          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n    }\n    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n    try {\n      if (Boolean.parseBoolean(isZNRecord)) {\n        try {\n          ZNRecord record = toZNRecord(content);\n          BaseDataAccessor<ZNRecord> propertyStoreDataAccessor =\n              getDataAccssor(clusterId).getBaseDataAccessor();\n          if (!propertyStoreDataAccessor.set(recordPath, record, AccessOption.PERSISTENT)) {\n            return serverError(\n                \"Failed to set content: \" + content + \" in PropertyStore path: \" + path);\n          }\n        } catch (IOException e) {\n          LOG.error(\"Failed to deserialize content \" + content + \" into a ZNRecord!\", e);\n          return badRequest(\n              \"Failed to write to path: \" + recordPath + \"! Content is not a valid ZNRecord!\");\n        }\n      } else {\n        BaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n        if (!propertyStoreDataAccessor\n            .set(recordPath, content.getBytes(), AccessOption.PERSISTENT)) {\n          return serverError(\n              \"Failed to set content: \" + content + \" in PropertyStore path: \" + path);\n        }\n      }\n      return OK();\n    } catch (Exception e) {\n      return serverError(e);\n    }\n  }\n","date":"2020-06-10 07:04:19","endLine":136,"groupId":"101119","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"putPropertyByPath","params":"(@PathParam(\"clusterId\")StringclusterId@@PathParam(\"path\")Stringpath@@QueryParam(\"isZNRecord\")@DefaultValue(\"true\")StringisZNRecord@Stringcontent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e9/2a689dd1a3b51815644992a1730a7f220e7722.src","preCode":"  public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n      @PathParam(\"path\") String path,\n      @QueryParam(\"isZNRecord\") @DefaultValue(\"true\") String isZNRecord, String content) {\n    path = \"/\" + path;\n    if (!ZkValidationUtil.isPathValid(path)) {\n      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n      return badRequest(\n          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n    }\n    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n    try {\n      if (Boolean.parseBoolean(isZNRecord)) {\n        try {\n          ZNRecord record = toZNRecord(content);\n          BaseDataAccessor<ZNRecord> propertyStoreDataAccessor =\n              getDataAccssor(clusterId).getBaseDataAccessor();\n          if (!propertyStoreDataAccessor.set(recordPath, record, AccessOption.PERSISTENT)) {\n            return serverError(\n                \"Failed to set content: \" + content + \" in PropertyStore path: \" + path);\n          }\n        } catch (IOException e) {\n          LOG.error(\"Failed to deserialize content \" + content + \" into a ZNRecord!\", e);\n          return badRequest(\n              \"Failed to write to path: \" + recordPath + \"! Content is not a valid ZNRecord!\");\n        }\n      } else {\n        ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n        if (!propertyStoreDataAccessor\n            .set(recordPath, content.getBytes(), AccessOption.PERSISTENT)) {\n          return serverError(\n              \"Failed to set content: \" + content + \" in PropertyStore path: \" + path);\n        }\n      }\n      return OK();\n    } catch (Exception e) {\n      return serverError(e);\n    }\n  }\n","realPath":"helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"1c15d04efa65955e2b273515a655b77b79478790","commitMessage":"@@@Add delete for PropertyStore in Helix REST (#1079)\n\nThis commit adds the delete endpoint for PropertyStore in Helix REST.","date":"2020-06-10 07:04:19","modifiedFileCount":"5","status":"M","submitter":"Hunter Lee"}]
