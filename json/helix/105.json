[{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-08 14:58:17","commitOrder":2,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, \n                            ZK_ADDR, \n                            12918, \n                            \"localhost\", \n                            \"TestDB\", \n                            1, \n                            10, \n                            5, \n                            3,\n                            \"MasterSlave\", \n                            true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                            .forCluster(clusterName)\n                                            .build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope = new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                        .forCluster(clusterName)\n                                        .forResource(\"testResource\")\n                                        .forPartition(\"testPartition\")\n                                        .build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                          .forCluster(clusterName)\n                                          .forParticipant(\"localhost_12918\")\n                                          .build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                                  .forCluster(clusterName)\n                                                  .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n\r\n\r\n\r\n\r\n\r\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                    .forCluster(clusterName)\n                                    .build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                      .forCluster(clusterName)\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                      .forCluster(clusterName)\n                                      .forParticipant(\"localhost_12918\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .forPartition(\"testPartition\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n        .forPartition(\"testPartition\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n        .forParticipant(\"testParticipant\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n              .forCluster(\"testCluster\")\n              .forPartition(\"testPartition\")\n              .build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n      \r\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-04-08 14:58:17","endLine":204,"groupId":"6124","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/85/ff9de946bd0bfa0cb89fab803512b8251d1eed.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, \n                            ZK_ADDR, \n                            12918, \n                            \"localhost\", \n                            \"TestDB\", \n                            1, \n                            10, \n                            5, \n                            3,\n                            \"MasterSlave\", \n                            true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                            .forCluster(clusterName)\n                                            .build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope = new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                        .forCluster(clusterName)\n                                        .forResource(\"testResource\")\n                                        .forPartition(\"testPartition\")\n                                        .build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                          .forCluster(clusterName)\n                                          .forParticipant(\"localhost_12918\")\n                                          .build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                                  .forCluster(clusterName)\n                                                  .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n\r\n\r\n\r\n\r\n\r\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                    .forCluster(clusterName)\n                                    .build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                      .forCluster(clusterName)\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                      .forCluster(clusterName)\n                                      .forParticipant(\"localhost_12918\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .forPartition(\"testPartition\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n        .forPartition(\"testPartition\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n        .forParticipant(\"testParticipant\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n              .forCluster(\"testCluster\")\n              .forPartition(\"testPartition\")\n              .build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n      \r\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"},{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void testBasic() throws Exception\n  {\n      String className = TestHelper.getTestClassName();\n      String methodName = TestHelper.getTestMethodName();\n      String clusterName = className + \"_\" + methodName;\n\n      System.out.println(\"START \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n      TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\", \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n      System.out.println(\"END \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-04-06 08:30:58","endLine":162,"groupId":"6132","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6a/313e024da0fbf6694735570ce793b59c73a3c3.src","preCode":"  public void testBasic() throws Exception\n  {\n      String className = TestHelper.getTestClassName();\n      String methodName = TestHelper.getTestMethodName();\n      String clusterName = className + \"_\" + methodName;\n\n      System.out.println(\"START \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n      TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\", \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n      System.out.println(\"END \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"NB"}],"commitId":"1b686456c5661b4df7f62d5f243c7c67769da2ba","commitMessage":"@@@refactor config accessor. deprecate ConfigAccessor. Add HelixConfigAccessor\n","date":"2013-04-08 14:58:17","modifiedFileCount":"27","status":"M","submitter":"zzhang"},{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-13 09:40:02","commitOrder":3,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, \n                            ZK_ADDR, \n                            12918, \n                            \"localhost\", \n                            \"TestDB\", \n                            1, \n                            10, \n                            5, \n                            3,\n                            \"MasterSlave\", \n                            true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                            .forCluster(clusterName)\n                                            .build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope = new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                        .forCluster(clusterName)\n                                        .forResource(\"testResource\")\n                                        .forPartition(\"testPartition\")\n                                        .build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                          .forCluster(clusterName)\n                                          .forParticipant(\"localhost_12918\")\n                                          .build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                                  .forCluster(clusterName)\n                                                  .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n\r\n\r\n\r\n\r\n\r\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                    .forCluster(clusterName)\n                                    .build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                      .forCluster(clusterName)\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                      .forCluster(clusterName)\n                                      .forParticipant(\"localhost_12918\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 3, \"should be [HELIX_ENABLED, HELIX_HOST, participantConfigKey]\");\n    Assert.assertEquals(keys.get(2), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .forPartition(\"testPartition\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n        .forPartition(\"testPartition\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n        .forParticipant(\"testParticipant\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n              .forCluster(\"testCluster\")\n              .forPartition(\"testPartition\")\n              .build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n      \r\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-04-13 09:40:02","endLine":204,"groupId":"6124","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/76/727269183de34640f63e52e313ace05f0c8813.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, \n                            ZK_ADDR, \n                            12918, \n                            \"localhost\", \n                            \"TestDB\", \n                            1, \n                            10, \n                            5, \n                            3,\n                            \"MasterSlave\", \n                            true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                            .forCluster(clusterName)\n                                            .build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope = new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                        .forCluster(clusterName)\n                                        .forResource(\"testResource\")\n                                        .forPartition(\"testPartition\")\n                                        .build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                          .forCluster(clusterName)\n                                          .forParticipant(\"localhost_12918\")\n                                          .build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                                  .forCluster(clusterName)\n                                                  .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n\r\n\r\n\r\n\r\n\r\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                    .forCluster(clusterName)\n                                    .build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                      .forCluster(clusterName)\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                      .forCluster(clusterName)\n                                      .forParticipant(\"localhost_12918\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .forPartition(\"testPartition\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n        .forPartition(\"testPartition\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n        .forParticipant(\"testParticipant\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n              .forCluster(\"testCluster\")\n              .forPartition(\"testPartition\")\n              .build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n      \r\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2013-04-06 08:30:58","commitOrder":3,"curCode":"  public void testBasic() throws Exception\n  {\n      String className = TestHelper.getTestClassName();\n      String methodName = TestHelper.getTestMethodName();\n      String clusterName = className + \"_\" + methodName;\n\n      System.out.println(\"START \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n      TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\", \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n      System.out.println(\"END \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-04-06 08:30:58","endLine":162,"groupId":"6132","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6a/313e024da0fbf6694735570ce793b59c73a3c3.src","preCode":"  public void testBasic() throws Exception\n  {\n      String className = TestHelper.getTestClassName();\n      String methodName = TestHelper.getTestMethodName();\n      String clusterName = className + \"_\" + methodName;\n\n      System.out.println(\"START \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n      TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\", \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n      System.out.println(\"END \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"}],"commitId":"c50a1ae8d6cfa6c19fa4e94ef1ecb5030bfa1b64","commitMessage":"@@@[HELIX-73] fix build failures","date":"2013-04-13 09:40:02","modifiedFileCount":"3","status":"M","submitter":"slu2011"},{"authorTime":"2013-04-14 02:07:42","codes":[{"authorDate":"2013-04-14 02:07:42","commitOrder":4,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, \n                            ZK_ADDR, \n                            12918, \n                            \"localhost\", \n                            \"TestDB\", \n                            1, \n                            10, \n                            5, \n                            3,\n                            \"MasterSlave\", \n                            true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                            .forCluster(clusterName)\n                                            .build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope = new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                        .forCluster(clusterName)\n                                        .forResource(\"testResource\")\n                                        .forPartition(\"testPartition\")\n                                        .build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                          .forCluster(clusterName)\n                                          .forParticipant(\"localhost_12918\")\n                                          .build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                                  .forCluster(clusterName)\n                                                  .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n\r\n\r\n\r\n\r\n\r\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                    .forCluster(clusterName)\n                                    .build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertTrue(keys.contains(\"localhost_12918\"));\n    Assert.assertTrue(keys.contains(\"localhost_12922\"));\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertTrue(keys.contains(\"resourceConfigKey\"));\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                      .forCluster(clusterName)\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertTrue(keys.contains(\"clusterConfigKey\"));\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                      .forCluster(clusterName)\n                                      .forParticipant(\"localhost_12918\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_PORT, HELIX_HOST, participantConfigKey]\");\n    Assert.assertTrue(keys.contains(\"participantConfigKey\"));\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .forPartition(\"testPartition\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n        .forPartition(\"testPartition\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n        .forParticipant(\"testParticipant\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n              .forCluster(\"testCluster\")\n              .forPartition(\"testPartition\")\n              .build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n      \r\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-04-14 02:07:42","endLine":204,"groupId":"6124","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/3b/bc4d309590a6cdf08ba4c897238b8d7b69dd3d.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, \n                            ZK_ADDR, \n                            12918, \n                            \"localhost\", \n                            \"TestDB\", \n                            1, \n                            10, \n                            5, \n                            3,\n                            \"MasterSlave\", \n                            true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                            .forCluster(clusterName)\n                                            .build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope = new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                        .forCluster(clusterName)\n                                        .forResource(\"testResource\")\n                                        .forPartition(\"testPartition\")\n                                        .build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope = new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                          .forCluster(clusterName)\n                                          .forParticipant(\"localhost_12918\")\n                                          .build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                                  .forCluster(clusterName)\n                                                  .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n\r\n\r\n\r\n\r\n\r\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                    .forCluster(clusterName)\n                                    .build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n                                      .forCluster(clusterName)\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n                                      .forCluster(clusterName)\n                                      .forParticipant(\"localhost_12918\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 3, \"should be [HELIX_ENABLED, HELIX_HOST, participantConfigKey]\");\n    Assert.assertEquals(keys.get(2), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n                                      .forCluster(clusterName)\n                                      .forResource(\"testResource\")\n                                      .forPartition(\"testPartition\")\n                                      .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n        .forPartition(\"testPartition\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n        .forParticipant(\"testParticipant\")\n        .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n    \n    try\n    {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n              .forCluster(\"testCluster\")\n              .forPartition(\"testPartition\")\n              .build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n      \r\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2013-04-14 02:07:42","commitOrder":4,"curCode":"  public void testBasic() throws Exception\n  {\n      String className = TestHelper.getTestClassName();\n      String methodName = TestHelper.getTestMethodName();\n      String clusterName = className + \"_\" + methodName;\n\n      System.out.println(\"START \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n      TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    System.out.println((keys));\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\", \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n      System.out.println(\"END \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2013-04-14 02:07:42","endLine":164,"groupId":"6856","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e0/3620ad527222322a83c813228b3c1438f7fc56.src","preCode":"  public void testBasic() throws Exception\n  {\n      String className = TestHelper.getTestClassName();\n      String methodName = TestHelper.getTestMethodName();\n      String clusterName = className + \"_\" + methodName;\n\n      System.out.println(\"START \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n      TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope = new ConfigScopeBuilder().forCluster(clusterName)\n        .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    Assert.assertEquals(keys.size(), 4, \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\", \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n    \n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n    \n    \r\n    try\n    {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n    try\n    {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e)\n    {\n      \r\n    }\n\n      System.out.println(\"END \" + clusterName + \" at \"\n              + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"6b70b77838287dadc2bfc6717f8043bd87a2c0ef","commitMessage":"@@@[HELIX-73] Making the instanceId change backward compatible.  if instanceName matches host[:_]port format.  extract host and port automatically\n","date":"2013-04-14 02:07:42","modifiedFileCount":"7","status":"M","submitter":"kishoreg"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE).forCluster(clusterName)\n            .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(clusterName)\n            .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertTrue(keys.contains(\"localhost_12918\"));\n    Assert.assertTrue(keys.contains(\"localhost_12922\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertTrue(keys.contains(\"resourceConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n            clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertTrue(keys.contains(\"clusterConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).forParticipant(\"localhost_12918\").build());\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_PORT, HELIX_HOST, participantConfigKey]\");\n    Assert.assertTrue(keys.contains(\"participantConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").forPartition(\"testPartition\")\n            .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forPartition(\"testPartition\")\n          .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n          .forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(\"testCluster\")\n          .forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n      \r\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":177,"groupId":"6124","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d0/1f1838556a0468d276b2f1d31def9820626ba0.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE).forCluster(clusterName)\n            .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(clusterName)\n            .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertTrue(keys.contains(\"localhost_12918\"));\n    Assert.assertTrue(keys.contains(\"localhost_12922\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertTrue(keys.contains(\"resourceConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n            clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertTrue(keys.contains(\"clusterConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).forParticipant(\"localhost_12918\").build());\n    Assert.assertEquals(keys.size(), 4,\n        \"should be [HELIX_ENABLED, HELIX_PORT, HELIX_HOST, participantConfigKey]\");\n    Assert.assertTrue(keys.contains(\"participantConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").forPartition(\"testPartition\")\n            .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forPartition(\"testPartition\")\n          .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n          .forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(\"testCluster\")\n          .forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n      \r\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\")\n            .forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    System.out.println((keys));\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(4), \"participantConfigKey\");\n\n    keys =\n        configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\",\n            \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2017-11-08 08:48:26","endLine":156,"groupId":"6856","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/16/b1ef1d6c59e417c367eca0215483ace039f59e.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\")\n            .forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    System.out.println((keys));\n    Assert.assertEquals(keys.size(), 4,\n        \"should be [HELIX_ENABLED, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(3), \"participantConfigKey\");\n\n    keys =\n        configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\",\n            \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":6,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE).forCluster(clusterName)\n            .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(clusterName)\n            .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertTrue(keys.contains(\"localhost_12918\"));\n    Assert.assertTrue(keys.contains(\"localhost_12922\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertTrue(keys.contains(\"resourceConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n            clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertTrue(keys.contains(\"clusterConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).forParticipant(\"localhost_12918\").build());\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_PORT, HELIX_HOST, participantConfigKey]\");\n    Assert.assertTrue(keys.contains(\"participantConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").forPartition(\"testPartition\")\n            .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forPartition(\"testPartition\")\n          .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n          .forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(\"testCluster\")\n          .forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n      \r\n    }\n\n    _gSetupTool.deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":178,"groupId":"6124","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/00/a49b5c3fca2cde300e10c416d3723620d39b1c.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE).forCluster(clusterName)\n            .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(clusterName)\n            .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertTrue(keys.contains(\"localhost_12918\"));\n    Assert.assertTrue(keys.contains(\"localhost_12922\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertTrue(keys.contains(\"resourceConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n            clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertTrue(keys.contains(\"clusterConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).forParticipant(\"localhost_12918\").build());\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_PORT, HELIX_HOST, participantConfigKey]\");\n    Assert.assertTrue(keys.contains(\"participantConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").forPartition(\"testPartition\")\n            .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forPartition(\"testPartition\")\n          .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n          .forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(\"testCluster\")\n          .forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n      \r\n    }\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":6,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\")\n            .forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    System.out.println((keys));\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(4), \"participantConfigKey\");\n\n    keys =\n        configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\",\n            \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 06:55:35","endLine":157,"groupId":"6856","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f4/377d605200c480f1e0b9e3bdfa179da21ae7e0.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\")\n            .forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    System.out.println((keys));\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(4), \"participantConfigKey\");\n\n    keys =\n        configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\",\n            \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-19 01:21:53","commitOrder":7,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE).forCluster(clusterName)\n            .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(clusterName)\n            .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertTrue(keys.contains(\"localhost_12918\"));\n    Assert.assertTrue(keys.contains(\"localhost_12922\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertTrue(keys.contains(\"resourceConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n            clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertTrue(keys.contains(\"clusterConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).forParticipant(\"localhost_12918\").build());\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_PORT, HELIX_HOST, participantConfigKey]\");\n    Assert.assertTrue(keys.contains(\"participantConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").forPartition(\"testPartition\")\n            .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forPartition(\"testPartition\")\n          .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n          .forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(\"testCluster\")\n          .forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n      \r\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:57:09","endLine":178,"groupId":"6124","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6a/7bccac3fc62b667ee309119bb434a877af0510.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE).forCluster(clusterName)\n            .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(clusterName)\n            .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertTrue(keys.contains(\"localhost_12918\"));\n    Assert.assertTrue(keys.contains(\"localhost_12922\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertTrue(keys.contains(\"resourceConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n            clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertTrue(keys.contains(\"clusterConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).forParticipant(\"localhost_12918\").build());\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_PORT, HELIX_HOST, participantConfigKey]\");\n    Assert.assertTrue(keys.contains(\"participantConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").forPartition(\"testPartition\")\n            .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forPartition(\"testPartition\")\n          .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n          .forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(\"testCluster\")\n          .forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n      \r\n    }\n\n    _gSetupTool.deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":7,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\")\n            .forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    System.out.println((keys));\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(4), \"participantConfigKey\");\n\n    keys =\n        configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\",\n            \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2018-07-14 06:55:35","endLine":157,"groupId":"6856","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f4/377d605200c480f1e0b9e3bdfa179da21ae7e0.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\")\n            .forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    System.out.println((keys));\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(4), \"participantConfigKey\");\n\n    keys =\n        configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\",\n            \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"4385d01a3673efa631d9837507c21ccab9f69be4","commitMessage":"@@@Refactor tests to use deleteCluster in test base class to deduplicate codes.\n","date":"2018-07-14 06:57:09","modifiedFileCount":"43","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-12-20 06:22:56","codes":[{"authorDate":"2018-06-19 01:21:53","commitOrder":8,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE).forCluster(clusterName)\n            .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(clusterName)\n            .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertTrue(keys.contains(\"localhost_12918\"));\n    Assert.assertTrue(keys.contains(\"localhost_12922\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertTrue(keys.contains(\"resourceConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n            clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertTrue(keys.contains(\"clusterConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).forParticipant(\"localhost_12918\").build());\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_PORT, HELIX_HOST, participantConfigKey]\");\n    Assert.assertTrue(keys.contains(\"participantConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").forPartition(\"testPartition\")\n            .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forPartition(\"testPartition\")\n          .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n          .forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(\"testCluster\")\n          .forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n      \r\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:57:09","endLine":178,"groupId":"105","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/6a/7bccac3fc62b667ee309119bb434a877af0510.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    HelixConfigScope clusterScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    HelixConfigScope resourceScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE).forCluster(clusterName)\n            .forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    HelixConfigScope partitionScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(clusterName)\n            .forResource(\"testResource\").forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    HelixConfigScope participantScope =\n        new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT).forCluster(clusterName)\n            .forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    \r\n    List<String> keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).build());\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertTrue(keys.contains(\"localhost_12918\"));\n    Assert.assertTrue(keys.contains(\"localhost_12922\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.RESOURCE)\n            .forCluster(clusterName).forResource(\"testResource\").build());\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertTrue(keys.contains(\"resourceConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n            clusterName).build());\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertTrue(keys.contains(\"clusterConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n            .forCluster(clusterName).forParticipant(\"localhost_12918\").build());\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_PORT, HELIX_HOST, participantConfigKey]\");\n    Assert.assertTrue(keys.contains(\"participantConfigKey\"));\n\n    keys =\n        configAccessor.getKeys(new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION)\n            .forCluster(clusterName).forResource(\"testResource\").forPartition(\"testPartition\")\n            .build());\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forPartition(\"testPartition\")\n          .build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTICIPANT)\n          .forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new HelixConfigScopeBuilder(ConfigScopeProperty.PARTITION).forCluster(\"testCluster\")\n          .forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n      \r\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestHelixConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"N"},{"authorDate":"2019-12-20 06:22:56","commitOrder":8,"curCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigAccessor configAccessorZkAddr = new ConfigAccessor(ZK_ADDR);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n    \r\n    clusterConfigValue = configAccessorZkAddr.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n    configAccessorZkAddr.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessorZkAddr.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\")\n            .forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    System.out.println((keys));\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(4), \"participantConfigKey\");\n\n    keys =\n        configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\",\n            \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    configAccessor.close();\n    configAccessorZkAddr.close();\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","date":"2019-12-20 06:22:56","endLine":167,"groupId":"105","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/0f/a05c367dd370a49b1508f45ddfee1562f91082.src","preCode":"  public void testBasic() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \"localhost\", \"TestDB\", 1, 10, 5, 3,\n        \"MasterSlave\", true);\n\n    ConfigAccessor configAccessor = new ConfigAccessor(_gZkClient);\n    ConfigScope clusterScope = new ConfigScopeBuilder().forCluster(clusterName).build();\n\n    \r\n    String clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue);\n\n    configAccessor.set(clusterScope, \"clusterConfigKey\", \"clusterConfigValue\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertEquals(clusterConfigValue, \"clusterConfigValue\");\n\n    \r\n    ConfigScope resourceScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\").build();\n    configAccessor.set(resourceScope, \"resourceConfigKey\", \"resourceConfigValue\");\n    String resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertEquals(resourceConfigValue, \"resourceConfigValue\");\n\n    \r\n    ConfigScope partitionScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forResource(\"testResource\")\n            .forPartition(\"testPartition\").build();\n    configAccessor.set(partitionScope, \"partitionConfigKey\", \"partitionConfigValue\");\n    String partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertEquals(partitionConfigValue, \"partitionConfigValue\");\n\n    \r\n    ConfigScope participantScope =\n        new ConfigScopeBuilder().forCluster(clusterName).forParticipant(\"localhost_12918\").build();\n    configAccessor.set(participantScope, \"participantConfigKey\", \"participantConfigValue\");\n    String participantConfigValue = configAccessor.get(participantScope, \"participantConfigKey\");\n    Assert.assertEquals(participantConfigValue, \"participantConfigValue\");\n\n    List<String> keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [testResource]\");\n    Assert.assertEquals(keys.get(0), \"testResource\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [\" + clusterName + \"]\");\n    Assert.assertEquals(keys.get(0), clusterName);\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName);\n    Assert.assertEquals(keys.size(), 5, \"should be [localhost_12918~22] sorted\");\n    Assert.assertEquals(keys.get(0), \"localhost_12918\");\n    Assert.assertEquals(keys.get(4), \"localhost_12922\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [testPartition]\");\n    Assert.assertEquals(keys.get(0), \"testPartition\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.RESOURCE, clusterName, \"testResource\");\n    Assert.assertEquals(keys.size(), 1, \"should be [resourceConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"resourceConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.CLUSTER, clusterName, clusterName);\n    Assert.assertEquals(keys.size(), 1, \"should be [clusterConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"clusterConfigKey\");\n\n    keys = configAccessor.getKeys(ConfigScopeProperty.PARTICIPANT, clusterName, \"localhost_12918\");\n    System.out.println((keys));\n    Assert.assertEquals(keys.size(), 5,\n        \"should be [HELIX_ENABLED, HELIX_ENABLED_TIMESTAMP, HELIX_HOST, HELIX_PORT, participantConfigKey]\");\n    Assert.assertEquals(keys.get(4), \"participantConfigKey\");\n\n    keys =\n        configAccessor.getKeys(ConfigScopeProperty.PARTITION, clusterName, \"testResource\",\n            \"testPartition\");\n    Assert.assertEquals(keys.size(), 1, \"should be [partitionConfigKey]\");\n    Assert.assertEquals(keys.get(0), \"partitionConfigKey\");\n\n    \r\n    configAccessor.remove(clusterScope, \"clusterConfigKey\");\n    clusterConfigValue = configAccessor.get(clusterScope, \"clusterConfigKey\");\n    Assert.assertNull(clusterConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(resourceScope, \"resourceConfigKey\");\n    resourceConfigValue = configAccessor.get(resourceScope, \"resourceConfigKey\");\n    Assert.assertNull(resourceConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(partitionScope, \"partitionConfigKey\");\n    partitionConfigValue = configAccessor.get(partitionScope, \"partitionConfigKey\");\n    Assert.assertNull(partitionConfigValue, \"Should be null since it's removed\");\n\n    configAccessor.remove(participantScope, \"participantConfigKey\");\n    participantConfigValue = configAccessor.get(partitionScope, \"participantConfigKey\");\n    Assert.assertNull(participantConfigValue, \"Should be null since it's removed\");\n\n    \r\n    try {\n      new ConfigScopeBuilder().forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forCluster(\"testCluster\").forPartition(\"testPartition\").build();\n      Assert.fail(\"Should fail since resource name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    try {\n      new ConfigScopeBuilder().forParticipant(\"testParticipant\").build();\n      Assert.fail(\"Should fail since cluster name is not set\");\n    } catch (Exception e) {\n      \r\n    }\n\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestConfigAccessor.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"d6ba1f3e792651e250d60b3df1fc6b537934f69e","commitMessage":"@@@Use ZnRecordSerializer in ConfigAccessor (#666)\n\nConfigAccessor is a Helix API used for CRUD access of Helix's data model such as ResourceConfig.  InstanceConfig.  etc.. These records are represented as ZNRecord and therefore needs to be serialized and deserialized with ZnRecordSerializer. This diff fixes ConfigAccessor so that it explicitly uses ZnRecordSerializer by default.","date":"2019-12-20 06:22:56","modifiedFileCount":"2","status":"M","submitter":"Hunter Lee"}]
