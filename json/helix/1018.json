[{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2012-11-29 17:42:05","commitOrder":2,"curCode":"    public void testAddResource() throws Exception {\n\tString className = TestHelper.getTestClassName();\n\tString methodName = TestHelper.getTestMethodName();\n\tString clusterName = className + \"_\" + methodName;\n\n\tSystem.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n\tString command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 144 MasterSlave\";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 44 MasterSlave\";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\t\r\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 55 OnlineOffline\";\n\ttry {\n\t    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\t    Assert.fail(\"ClusterSetup should fail since resource db_22 already exists\");\n\t} catch (Exception e) {\n\t    \r\n\t}\n\n\t\r\n\tcommand = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tSystem.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    }\n","date":"2012-11-29 17:42:05","endLine":111,"groupId":"5359","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/be0d4dd8a34a88e11cd45199fd5847c682b7a3.src","preCode":"    public void testAddResource() throws Exception {\n\tString className = TestHelper.getTestClassName();\n\tString methodName = TestHelper.getTestMethodName();\n\tString clusterName = className + \"_\" + methodName;\n\n\tSystem.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n\tString command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 144 MasterSlave\";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 44 MasterSlave\";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\t\r\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 55 OnlineOffline\";\n\ttry {\n\t    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\t    Assert.fail(\"ClusterSetup should fail since resource db_22 already exists\");\n\t} catch (Exception e) {\n\t    \r\n\t}\n\n\t\r\n\tcommand = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tSystem.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestHelixAdminCli.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"NB"},{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  public void testInstanceGroupTags() throws Exception\n  {\n    \n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(\n        _gZkClient);\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName,\n        baseAccessor);\n    \n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    String command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName\n        + \" db_11 12 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 0; i < 6; i++)\n    {\n      command = \"-zkSvr localhost:2183 -addNode \" + clusterName\n          + \" localhost:123\" + i;\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    \n    for (int i = 0; i < 2; i++)\n    {\n      command = \"-zkSvr localhost:2183 -addInstanceTag \" + clusterName\n          + \" localhost_123\" + i + \"  tag1\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    for (int i = 2; i < 6; i++)\n    {\n      command = \"-zkSvr localhost:2183 -addInstanceTag \" + clusterName\n          + \" localhost_123\" + i + \"  tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 2 -instanceGroupTag tag1\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    \n    IdealState dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    Set<String> hosts = new HashSet<String>();\n    for(String p : dbIs.getPartitionSet())\n    {\n      for(String hostName : dbIs.getInstanceStateMap(p).keySet())\n      {\n        InstanceConfig config = accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag1\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 2);\n    \n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName\n        + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    \n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n     hosts = new HashSet<String>();\n    for(String p : dbIs.getPartitionSet())\n    {\n      for(String hostName : dbIs.getInstanceStateMap(p).keySet())\n      {\n        InstanceConfig config = accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 4);\n    \n\n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    \n    for (int i = 3; i <= 3; i++)\n    {\n      command = \"-zkSvr localhost:2183 -removeInstanceTag \" + clusterName\n          + \" localhost_123\" + i + \" tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    \n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName\n        + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n   for(String p : dbIs.getPartitionSet())\n   {\n     for(String hostName : dbIs.getInstanceStateMap(p).keySet())\n     {\n       InstanceConfig config = accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n       Assert.assertTrue(config.containsTag(\"tag2\"));\n       hosts.add(hostName);\n     }\n   }\n   Assert.assertEquals(hosts.size(), 3);\n    \n    \r\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName\n        + \" db_11 2 -key alias\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-04-06 08:30:58","endLine":846,"groupId":"1578","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInstanceGroupTags","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f8/fe43316a19c535498149538941b1448b065a60.src","preCode":"  public void testInstanceGroupTags() throws Exception\n  {\n    \n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(\n        _gZkClient);\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName,\n        baseAccessor);\n    \n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    String command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName\n        + \" db_11 12 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 0; i < 6; i++)\n    {\n      command = \"-zkSvr localhost:2183 -addNode \" + clusterName\n          + \" localhost:123\" + i;\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    \n    for (int i = 0; i < 2; i++)\n    {\n      command = \"-zkSvr localhost:2183 -addInstanceTag \" + clusterName\n          + \" localhost_123\" + i + \"  tag1\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    for (int i = 2; i < 6; i++)\n    {\n      command = \"-zkSvr localhost:2183 -addInstanceTag \" + clusterName\n          + \" localhost_123\" + i + \"  tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 2 -instanceGroupTag tag1\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    \n    IdealState dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    Set<String> hosts = new HashSet<String>();\n    for(String p : dbIs.getPartitionSet())\n    {\n      for(String hostName : dbIs.getInstanceStateMap(p).keySet())\n      {\n        InstanceConfig config = accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag1\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 2);\n    \n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName\n        + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    \n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n     hosts = new HashSet<String>();\n    for(String p : dbIs.getPartitionSet())\n    {\n      for(String hostName : dbIs.getInstanceStateMap(p).keySet())\n      {\n        InstanceConfig config = accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 4);\n    \n\n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    \n    for (int i = 3; i <= 3; i++)\n    {\n      command = \"-zkSvr localhost:2183 -removeInstanceTag \" + clusterName\n          + \" localhost_123\" + i + \" tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    \n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName\n        + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n   for(String p : dbIs.getPartitionSet())\n   {\n     for(String hostName : dbIs.getInstanceStateMap(p).keySet())\n     {\n       InstanceConfig config = accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n       Assert.assertTrue(config.containsTag(\"tag2\"));\n       hosts.add(hostName);\n     }\n   }\n   Assert.assertEquals(hosts.size(), 3);\n    \n    \r\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName\n        + \" db_11 2 -key alias\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestHelixAdminCli.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":726,"status":"B"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"M","submitter":"Swaroop Jagadish"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2012-11-29 17:42:05","commitOrder":3,"curCode":"    public void testAddResource() throws Exception {\n\tString className = TestHelper.getTestClassName();\n\tString methodName = TestHelper.getTestMethodName();\n\tString clusterName = className + \"_\" + methodName;\n\n\tSystem.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n\tString command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 144 MasterSlave\";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 44 MasterSlave\";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\t\r\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 55 OnlineOffline\";\n\ttry {\n\t    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\t    Assert.fail(\"ClusterSetup should fail since resource db_22 already exists\");\n\t} catch (Exception e) {\n\t    \r\n\t}\n\n\t\r\n\tcommand = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tSystem.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    }\n","date":"2012-11-29 17:42:05","endLine":111,"groupId":"5359","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/be0d4dd8a34a88e11cd45199fd5847c682b7a3.src","preCode":"    public void testAddResource() throws Exception {\n\tString className = TestHelper.getTestClassName();\n\tString methodName = TestHelper.getTestMethodName();\n\tString clusterName = className + \"_\" + methodName;\n\n\tSystem.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n\tString command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 144 MasterSlave\";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 44 MasterSlave\";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\t\r\n\tcommand = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 55 OnlineOffline\";\n\ttry {\n\t    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\t    Assert.fail(\"ClusterSetup should fail since resource db_22 already exists\");\n\t} catch (Exception e) {\n\t    \r\n\t}\n\n\t\r\n\tcommand = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n\tClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n\tSystem.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n    }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestHelixAdminCli.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"},{"authorDate":"2013-10-25 09:35:16","commitOrder":3,"curCode":"  public void testInstanceGroupTags() throws Exception {\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String command = \"-zkSvr \" + ZK_ADDR + \" -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 12 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 0; i < 6; i++) {\n      command = \"-zkSvr \" + ZK_ADDR + \" -addNode \" + clusterName + \" localhost:123\" + i;\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    for (int i = 0; i < 2; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag1\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    for (int i = 2; i < 6; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -instanceGroupTag tag1\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    IdealState dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    Set<String> hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag1\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 2);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 4);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 3; i <= 3; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -removeInstanceTag \" + clusterName + \" localhost_123\" + i\n              + \" tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 3);\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -key alias\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":738,"groupId":"7306","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInstanceGroupTags","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9f/cacbd3c8f1375e196f56d8e5977367a6f70ccd.src","preCode":"  public void testInstanceGroupTags() throws Exception {\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 12 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 0; i < 6; i++) {\n      command = \"-zkSvr localhost:2183 -addNode \" + clusterName + \" localhost:123\" + i;\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    for (int i = 0; i < 2; i++) {\n      command =\n          \"-zkSvr localhost:2183 -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag1\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    for (int i = 2; i < 6; i++) {\n      command =\n          \"-zkSvr localhost:2183 -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 2 -instanceGroupTag tag1\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    IdealState dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    Set<String> hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag1\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 2);\n\n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 4);\n\n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 3; i <= 3; i++) {\n      command =\n          \"-zkSvr localhost:2183 -removeInstanceTag \" + clusterName + \" localhost_123\" + i\n              + \" tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 3);\n\n    \r\n    command = \"-zkSvr localhost:2183 -rebalance \" + clusterName + \" db_11 2 -key alias\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestHelixAdminCli.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":632,"status":"M"}],"commitId":"5c7721970eef78e2d13d35b4934b07cb11a03cd9","commitMessage":"@@@Merge branch 'helix-0.6.2-release' of https://git-wip-us.apache.org/repos/asf/incubator-helix into helix-0.6.2-release\n","date":"2013-10-25 09:35:16","modifiedFileCount":"105","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  public void testAddResource() throws Exception {\n    String command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 144 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 44 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 55 OnlineOffline\";\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"ClusterSetup should fail since resource db_22 already exists\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n  }\n","date":"2018-07-14 06:55:35","endLine":134,"groupId":"5359","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/07/be097000776ca879b06c068bb76033547e21db.src","preCode":"  public void testAddResource() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 144 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 44 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 55 OnlineOffline\";\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"ClusterSetup should fail since resource db_22 already exists\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestHelixAdminCli.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":4,"curCode":"  public void testInstanceGroupTags() throws Exception {\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n\n    String command = \"-zkSvr \" + ZK_ADDR + \" -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 12 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 0; i < 6; i++) {\n      command = \"-zkSvr \" + ZK_ADDR + \" -addNode \" + clusterName + \" localhost:123\" + i;\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    for (int i = 0; i < 2; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag1\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    for (int i = 2; i < 6; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -instanceGroupTag tag1\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    IdealState dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    Set<String> hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag1\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 2);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 4);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 3; i <= 3; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -removeInstanceTag \" + clusterName + \" localhost_123\" + i\n              + \" tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 3);\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -key alias\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n  }\n","date":"2018-07-14 06:55:35","endLine":678,"groupId":"7306","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInstanceGroupTags","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/07/be097000776ca879b06c068bb76033547e21db.src","preCode":"  public void testInstanceGroupTags() throws Exception {\n\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    String command = \"-zkSvr \" + ZK_ADDR + \" -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 12 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 0; i < 6; i++) {\n      command = \"-zkSvr \" + ZK_ADDR + \" -addNode \" + clusterName + \" localhost:123\" + i;\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    for (int i = 0; i < 2; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag1\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    for (int i = 2; i < 6; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -instanceGroupTag tag1\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    IdealState dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    Set<String> hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag1\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 2);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 4);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 3; i <= 3; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -removeInstanceTag \" + clusterName + \" localhost_123\" + i\n              + \" tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 3);\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -key alias\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestHelixAdminCli.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":5,"curCode":"  public void testAddResource() throws Exception {\n    String command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 144 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 44 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 55 OnlineOffline\";\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"ClusterSetup should fail since resource db_22 already exists\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n  }\n","date":"2018-07-14 06:55:35","endLine":134,"groupId":"1018","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/07/be097000776ca879b06c068bb76033547e21db.src","preCode":"  public void testAddResource() throws Exception {\n    String command = \"-zkSvr localhost:2183 -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 144 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 44 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_22 55 OnlineOffline\";\n    try {\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n      Assert.fail(\"ClusterSetup should fail since resource db_22 already exists\");\n    } catch (Exception e) {\n      \r\n    }\n\n    \r\n    command = \"-zkSvr localhost:2183 -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestHelixAdminCli.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"},{"authorDate":"2019-05-04 08:52:17","commitOrder":5,"curCode":"  public void testInstanceGroupTags() throws Exception {\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<>(_gZkClient);\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n\n    String command = \"-zkSvr \" + ZK_ADDR + \" -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 12 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 0; i < 6; i++) {\n      command = \"-zkSvr \" + ZK_ADDR + \" -addNode \" + clusterName + \" localhost:123\" + i;\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    for (int i = 0; i < 2; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag1\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    for (int i = 2; i < 6; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -instanceGroupTag tag1\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    IdealState dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    Set<String> hosts = new HashSet<>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag1\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 2);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 4);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 3; i <= 3; i++) {\n      command = \"-zkSvr \" + ZK_ADDR + \" -removeInstanceTag \" + clusterName + \" localhost_123\" + i\n          + \" tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 3);\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -key alias\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n  }\n","date":"2019-05-25 09:19:21","endLine":717,"groupId":"1018","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testInstanceGroupTags","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d3/63b8dae8b9c7e14b4a59f6f8bb4eea63b2e572.src","preCode":"  public void testInstanceGroupTags() throws Exception {\n    BaseDataAccessor<ZNRecord> baseAccessor = new ZkBaseDataAccessor<ZNRecord>(_gZkClient);\n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, baseAccessor);\n\n    String command = \"-zkSvr \" + ZK_ADDR + \" -addCluster \" + clusterName;\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command = \"-zkSvr localhost:2183 -addResource \" + clusterName + \" db_11 12 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 0; i < 6; i++) {\n      command = \"-zkSvr \" + ZK_ADDR + \" -addNode \" + clusterName + \" localhost:123\" + i;\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    for (int i = 0; i < 2; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag1\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n    for (int i = 2; i < 6; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -addInstanceTag \" + clusterName + \" localhost_123\" + i + \"  tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -instanceGroupTag tag1\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    IdealState dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    Set<String> hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag1\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 2);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 4);\n\n    command = \"-zkSvr \" + ZK_ADDR + \" -dropResource \" + clusterName + \" db_11 \";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    for (int i = 3; i <= 3; i++) {\n      command =\n          \"-zkSvr \" + ZK_ADDR + \" -removeInstanceTag \" + clusterName + \" localhost_123\" + i\n              + \" tag2\";\n      ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    }\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -addResource \" + clusterName + \" db_11 48 MasterSlave\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n\n    command =\n        \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 3 -instanceGroupTag tag2\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n    dbIs = accessor.getProperty(accessor.keyBuilder().idealStates(\"db_11\"));\n    hosts = new HashSet<String>();\n    for (String p : dbIs.getPartitionSet()) {\n      for (String hostName : dbIs.getInstanceStateMap(p).keySet()) {\n        InstanceConfig config =\n            accessor.getProperty(accessor.keyBuilder().instanceConfig(hostName));\n        Assert.assertTrue(config.containsTag(\"tag2\"));\n        hosts.add(hostName);\n      }\n    }\n    Assert.assertEquals(hosts.size(), 3);\n\n    \r\n    command = \"-zkSvr \" + ZK_ADDR + \" -rebalance \" + clusterName + \" db_11 2 -key alias\";\n    ClusterSetup.processCommandLineArgs(command.split(\"\\\\s+\"));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/tools/TestHelixAdminCli.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":621,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
