[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  void verifyAddCluster() throws IOException,\n      InterruptedException\n  {\n    String httpUrlBase = \"http://localhost:\" + ADMIN_PORT + \"/clusters\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.CLUSTER_NAME, clusterName);\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addCluster);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(JsonParameters.JSON_PARAMETERS + \"=\"\n        + ClusterRepresentationUtil.ObjectToJson(paraMap), MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    System.out.println(sw.toString());\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"clusters\").contains(clusterName));\n\n  }\n","date":"2012-10-25 07:14:36","endLine":157,"groupId":"1645","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyAddCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/605a008b38f9519d248900d111d0f9a216f2e6.src","preCode":"  void verifyAddCluster() throws IOException,\n      InterruptedException\n  {\n    String httpUrlBase = \"http://localhost:\" + ADMIN_PORT + \"/clusters\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.CLUSTER_NAME, clusterName);\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addCluster);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(JsonParameters.JSON_PARAMETERS + \"=\"\n        + ClusterRepresentationUtil.ObjectToJson(paraMap), MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    System.out.println(sw.toString());\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"clusters\").contains(clusterName));\n\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  void verifyAddHostedEntity() throws JsonGenerationException,\n      JsonMappingException,\n      IOException\n  {\n    String httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.RESOURCE_GROUP_NAME, resourceGroupName);\n    paraMap.put(JsonParameters.PARTITIONS, \"\" + partitions);\n    paraMap.put(JsonParameters.STATE_MODEL_DEF_REF, \"MasterSlave\");\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addResource);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(JsonParameters.JSON_PARAMETERS + \"=\"\n        + ClusterRepresentationUtil.ObjectToJson(paraMap), MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    System.out.println(sw.toString());\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"ResourceGroups\").contains(resourceGroupName));\n\n    httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceGroupName;\n    resourceRef = new Reference(httpUrlBase);\n\n    request = new Request(Method.GET, resourceRef);\n\n    client = new Client(Protocol.HTTP);\n    response = client.handle(request);\n\n    result = response.getEntity();\n    sw = new StringWriter();\n    result.write(sw);\n\n    System.out.println(sw.toString());\n  }\n","date":"2012-10-25 07:14:36","endLine":206,"groupId":"1645","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyAddHostedEntity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/20/605a008b38f9519d248900d111d0f9a216f2e6.src","preCode":"  void verifyAddHostedEntity() throws JsonGenerationException,\n      JsonMappingException,\n      IOException\n  {\n    String httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.RESOURCE_GROUP_NAME, resourceGroupName);\n    paraMap.put(JsonParameters.PARTITIONS, \"\" + partitions);\n    paraMap.put(JsonParameters.STATE_MODEL_DEF_REF, \"MasterSlave\");\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addResource);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(JsonParameters.JSON_PARAMETERS + \"=\"\n        + ClusterRepresentationUtil.ObjectToJson(paraMap), MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    System.out.println(sw.toString());\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"ResourceGroups\").contains(resourceGroupName));\n\n    httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceGroupName;\n    resourceRef = new Reference(httpUrlBase);\n\n    request = new Request(Method.GET, resourceRef);\n\n    client = new Client(Protocol.HTTP);\n    response = client.handle(request);\n\n    result = response.getEntity();\n    sw = new StringWriter();\n    result.write(sw);\n\n    System.out.println(sw.toString());\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  void verifyAddCluster() throws IOException,\n      InterruptedException\n  {\n    String httpUrlBase = \"http://localhost:\" + ADMIN_PORT + \"/clusters\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.CLUSTER_NAME, clusterName);\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addCluster);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(JsonParameters.JSON_PARAMETERS + \"=\"\n        + ClusterRepresentationUtil.ObjectToJson(paraMap), MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    \r\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"clusters\").contains(clusterName));\n\n  }\n","date":"2013-04-06 08:30:58","endLine":161,"groupId":"1645","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyAddCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/52/3b30cb683c35adea7ff0b68d16c276db1a1162.src","preCode":"  void verifyAddCluster() throws IOException,\n      InterruptedException\n  {\n    String httpUrlBase = \"http://localhost:\" + ADMIN_PORT + \"/clusters\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.CLUSTER_NAME, clusterName);\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addCluster);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(JsonParameters.JSON_PARAMETERS + \"=\"\n        + ClusterRepresentationUtil.ObjectToJson(paraMap), MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    System.out.println(sw.toString());\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"clusters\").contains(clusterName));\n\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2013-04-06 08:30:58","commitOrder":2,"curCode":"  void verifyAddHostedEntity() throws JsonGenerationException,\n      JsonMappingException,\n      IOException\n  {\n    String httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.RESOURCE_GROUP_NAME, resourceGroupName);\n    paraMap.put(JsonParameters.PARTITIONS, \"\" + partitions);\n    paraMap.put(JsonParameters.STATE_MODEL_DEF_REF, \"MasterSlave\");\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addResource);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(JsonParameters.JSON_PARAMETERS + \"=\"\n        + ClusterRepresentationUtil.ObjectToJson(paraMap), MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    \r\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"ResourceGroups\").contains(resourceGroupName));\n\n    httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceGroupName;\n    resourceRef = new Reference(httpUrlBase);\n\n    request = new Request(Method.GET, resourceRef);\n\n    client = new Client(Protocol.HTTP);\n    response = client.handle(request);\n\n    result = response.getEntity();\n    sw = new StringWriter();\n    result.write(sw);\n\n    \r\n  }\n","date":"2013-04-06 08:30:58","endLine":210,"groupId":"1645","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyAddHostedEntity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/52/3b30cb683c35adea7ff0b68d16c276db1a1162.src","preCode":"  void verifyAddHostedEntity() throws JsonGenerationException,\n      JsonMappingException,\n      IOException\n  {\n    String httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.RESOURCE_GROUP_NAME, resourceGroupName);\n    paraMap.put(JsonParameters.PARTITIONS, \"\" + partitions);\n    paraMap.put(JsonParameters.STATE_MODEL_DEF_REF, \"MasterSlave\");\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addResource);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(JsonParameters.JSON_PARAMETERS + \"=\"\n        + ClusterRepresentationUtil.ObjectToJson(paraMap), MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    System.out.println(sw.toString());\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"ResourceGroups\").contains(resourceGroupName));\n\n    httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceGroupName;\n    resourceRef = new Reference(httpUrlBase);\n\n    request = new Request(Method.GET, resourceRef);\n\n    client = new Client(Protocol.HTTP);\n    response = client.handle(request);\n\n    result = response.getEntity();\n    sw = new StringWriter();\n    result.write(sw);\n\n    System.out.println(sw.toString());\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"M","submitter":"Swaroop Jagadish"},{"authorTime":"2014-03-06 09:59:34","codes":[{"authorDate":"2014-03-06 09:59:34","commitOrder":3,"curCode":"  void verifyAddCluster() throws IOException, InterruptedException {\n    String httpUrlBase = \"http://localhost:\" + ADMIN_PORT + \"/clusters\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.CLUSTER_NAME, clusterName);\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addCluster);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(\n        JsonParameters.JSON_PARAMETERS + \"=\" + ClusterRepresentationUtil.ObjectToJson(paraMap),\n        MediaType.APPLICATION_ALL);\n    Response response = _gClient.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    \r\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"clusters\").contains(clusterName));\n\n  }\n","date":"2014-03-06 09:59:34","endLine":145,"groupId":"10915","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyAddCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1f/ba6df5b09fbb1e017727c57026254f2ce8c515.src","preCode":"  void verifyAddCluster() throws IOException, InterruptedException {\n    String httpUrlBase = \"http://localhost:\" + ADMIN_PORT + \"/clusters\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.CLUSTER_NAME, clusterName);\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addCluster);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(\n        JsonParameters.JSON_PARAMETERS + \"=\" + ClusterRepresentationUtil.ObjectToJson(paraMap),\n        MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    \r\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"clusters\").contains(clusterName));\n\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2014-03-06 09:59:34","commitOrder":3,"curCode":"  void verifyAddHostedEntity() throws JsonGenerationException, JsonMappingException, IOException {\n    String httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.RESOURCE_GROUP_NAME, resourceGroupName);\n    paraMap.put(JsonParameters.PARTITIONS, \"\" + partitions);\n    paraMap.put(JsonParameters.STATE_MODEL_DEF_REF, \"MasterSlave\");\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addResource);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(\n        JsonParameters.JSON_PARAMETERS + \"=\" + ClusterRepresentationUtil.ObjectToJson(paraMap),\n        MediaType.APPLICATION_ALL);\n    Response response = _gClient.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    \r\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"ResourceGroups\").contains(resourceGroupName));\n\n    httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceGroupName;\n    resourceRef = new Reference(httpUrlBase);\n\n    request = new Request(Method.GET, resourceRef);\n\n    response = _gClient.handle(request);\n\n    result = response.getEntity();\n    sw = new StringWriter();\n    result.write(sw);\n\n    \r\n  }\n","date":"2014-03-06 09:59:34","endLine":190,"groupId":"10915","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyAddHostedEntity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/1f/ba6df5b09fbb1e017727c57026254f2ce8c515.src","preCode":"  void verifyAddHostedEntity() throws JsonGenerationException, JsonMappingException, IOException {\n    String httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups\";\n    Map<String, String> paraMap = new HashMap<String, String>();\n\n    paraMap.put(JsonParameters.RESOURCE_GROUP_NAME, resourceGroupName);\n    paraMap.put(JsonParameters.PARTITIONS, \"\" + partitions);\n    paraMap.put(JsonParameters.STATE_MODEL_DEF_REF, \"MasterSlave\");\n    paraMap.put(JsonParameters.MANAGEMENT_COMMAND, ClusterSetup.addResource);\n\n    Reference resourceRef = new Reference(httpUrlBase);\n\n    Request request = new Request(Method.POST, resourceRef);\n\n    request.setEntity(\n        JsonParameters.JSON_PARAMETERS + \"=\" + ClusterRepresentationUtil.ObjectToJson(paraMap),\n        MediaType.APPLICATION_ALL);\n    Client client = new Client(Protocol.HTTP);\n    Response response = client.handle(request);\n\n    Representation result = response.getEntity();\n    StringWriter sw = new StringWriter();\n    result.write(sw);\n\n    \r\n\n    ObjectMapper mapper = new ObjectMapper();\n    ZNRecord zn = mapper.readValue(new StringReader(sw.toString()), ZNRecord.class);\n    AssertJUnit.assertTrue(zn.getListField(\"ResourceGroups\").contains(resourceGroupName));\n\n    httpUrlBase =\n        \"http://localhost:\" + ADMIN_PORT + \"/clusters/\" + clusterName + \"/resourceGroups/\"\n            + resourceGroupName;\n    resourceRef = new Reference(httpUrlBase);\n\n    request = new Request(Method.GET, resourceRef);\n\n    client = new Client(Protocol.HTTP);\n    response = client.handle(request);\n\n    result = response.getEntity();\n    sw = new StringWriter();\n    result.write(sw);\n\n    \r\n  }\n","realPath":"helix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"304995e75a1f65810157455b9bc416fc40bf250d","commitMessage":"@@@[HELIX-397] REST GET for resources should include tag information.  fix CI issue\n","date":"2014-03-06 09:59:34","modifiedFileCount":"3","status":"M","submitter":"Kanak Biscuitwala"}]
