[{"authorTime":"2018-09-27 02:39:42","codes":[{"authorDate":"2013-08-22 04:42:57","commitOrder":2,"curCode":"  private void setNodes(ZkHelixPropertyStore<ZNRecord> store, char c, boolean needTimestamp) {\n    char[] data = new char[bufSize];\n\n    for (int i = 0; i < bufSize; i++) {\n      data[i] = c;\n    }\n\n    Map<String, String> map = new TreeMap<String, String>();\n    for (int i = 0; i < mapNr; i++) {\n      map.put(\"key_\" + i, new String(data));\n    }\n\n    for (int i = 0; i < firstLevelNr; i++) {\n      for (int j = 0; j < secondLevelNr; j++) {\n        String nodeId = getNodeId(i, j);\n        ZNRecord record = new ZNRecord(nodeId);\n        record.setSimpleFields(map);\n        if (needTimestamp) {\n          long now = System.currentTimeMillis();\n          record.setSimpleField(\"SetTimestamp\", Long.toString(now));\n        }\n        String key = getSecondLevelKey(i, j);\n        store.set(key, record, AccessOption.PERSISTENT);\n      }\n    }\n  }\n","date":"2013-08-22 04:42:57","endLine":335,"groupId":"6298","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setNodes","params":"(ZkHelixPropertyStore<ZNRecord>store@charc@booleanneedTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/b3/89e1523a8965c6a36da9de5501062c3c1e570c.src","preCode":"  private void setNodes(ZkHelixPropertyStore<ZNRecord> store, char c, boolean needTimestamp) {\n    char[] data = new char[bufSize];\n\n    for (int i = 0; i < bufSize; i++) {\n      data[i] = c;\n    }\n\n    Map<String, String> map = new TreeMap<String, String>();\n    for (int i = 0; i < mapNr; i++) {\n      map.put(\"key_\" + i, new String(data));\n    }\n\n    for (int i = 0; i < firstLevelNr; i++) {\n      for (int j = 0; j < secondLevelNr; j++) {\n        String nodeId = getNodeId(i, j);\n        ZNRecord record = new ZNRecord(nodeId);\n        record.setSimpleFields(map);\n        if (needTimestamp) {\n          long now = System.currentTimeMillis();\n          record.setSimpleField(\"SetTimestamp\", Long.toString(now));\n        }\n        String key = getSecondLevelKey(i, j);\n        store.set(key, record, AccessOption.PERSISTENT);\n      }\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"NB"},{"authorDate":"2018-09-27 02:39:42","commitOrder":2,"curCode":"  private void setNodes(HelixZkClient zkClient, String root, char c, boolean needTimestamp) {\n    char[] data = new char[bufSize];\n\n    for (int i = 0; i < bufSize; i++) {\n      data[i] = c;\n    }\n\n    Map<String, String> map = new TreeMap<String, String>();\n    for (int i = 0; i < mapNr; i++) {\n      map.put(\"key_\" + i, new String(data));\n    }\n\n    for (int i = 0; i < firstLevelNr; i++) {\n      String firstLevelKey = getFirstLevelKey(i);\n\n      for (int j = 0; j < secondLevelNr; j++) {\n        String nodeId = getNodeId(i, j);\n        ZNRecord record = new ZNRecord(nodeId);\n        record.setSimpleFields(map);\n        if (needTimestamp) {\n          long now = System.currentTimeMillis();\n          record.setSimpleField(\"SetTimestamp\", Long.toString(now));\n        }\n        String key = getSecondLevelKey(i, j);\n        try {\n          zkClient.writeData(root + key, record);\n        } catch (ZkNoNodeException e) {\n          zkClient.createPersistent(root + firstLevelKey, true);\n          zkClient.createPersistent(root + key, record);\n        }\n      }\n    }\n  }\n","date":"2018-10-30 09:15:22","endLine":376,"groupId":"6908","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setNodes","params":"(HelixZkClientzkClient@Stringroot@charc@booleanneedTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/28/0c88508059a4b9af9dc802f8f9a30f1c6c6b05.src","preCode":"  private void setNodes(HelixZkClient zkClient, String root, char c, boolean needTimestamp) {\n    char[] data = new char[bufSize];\n\n    for (int i = 0; i < bufSize; i++) {\n      data[i] = c;\n    }\n\n    Map<String, String> map = new TreeMap<String, String>();\n    for (int i = 0; i < mapNr; i++) {\n      map.put(\"key_\" + i, new String(data));\n    }\n\n    for (int i = 0; i < firstLevelNr; i++) {\n      String firstLevelKey = getFirstLevelKey(i);\n\n      for (int j = 0; j < secondLevelNr; j++) {\n        String nodeId = getNodeId(i, j);\n        ZNRecord record = new ZNRecord(nodeId);\n        record.setSimpleFields(map);\n        if (needTimestamp) {\n          long now = System.currentTimeMillis();\n          record.setSimpleField(\"SetTimestamp\", Long.toString(now));\n        }\n        String key = getSecondLevelKey(i, j);\n        try {\n          zkClient.writeData(root + key, record);\n        } catch (ZkNoNodeException e) {\n          zkClient.createPersistent(root + firstLevelKey, true);\n          zkClient.createPersistent(root + key, record);\n        }\n      }\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"B"}],"commitId":"9d7364d7abba3932a1b25e96e4eb9dd3e203cec9","commitMessage":"@@@Using HelixZkClient to replace ZkClient in helix-core and helix-rest.\n\n1. Replace as much usage as possible. For the raw ZkClient tests.  the usages are kept.\n2. For backward compatibility.  some public interfaces still returns ZkClient. Marks them as Deprecated.\n","date":"2018-10-30 09:15:22","modifiedFileCount":"60","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"  private void setNodes(ZkHelixPropertyStore<ZNRecord> store, char c, boolean needTimestamp) {\n    char[] data = new char[bufSize];\n\n    for (int i = 0; i < bufSize; i++) {\n      data[i] = c;\n    }\n\n    Map<String, String> map = new TreeMap<>();\n    for (int i = 0; i < mapNr; i++) {\n      map.put(\"key_\" + i, new String(data));\n    }\n\n    for (int i = 0; i < firstLevelNr; i++) {\n      for (int j = 0; j < secondLevelNr; j++) {\n        String nodeId = getNodeId(i, j);\n        ZNRecord record = new ZNRecord(nodeId);\n        record.setSimpleFields(map);\n        if (needTimestamp) {\n          long now = System.currentTimeMillis();\n          record.setSimpleField(\"SetTimestamp\", Long.toString(now));\n        }\n        String key = getSecondLevelKey(i, j);\n        store.set(key, record, AccessOption.PERSISTENT);\n      }\n    }\n  }\n","date":"2019-05-25 09:19:21","endLine":343,"groupId":"1135","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setNodes","params":"(ZkHelixPropertyStore<ZNRecord>store@charc@booleanneedTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4a/4ced90fbc3dac6366c8068becfea2b3d3a90aa.src","preCode":"  private void setNodes(ZkHelixPropertyStore<ZNRecord> store, char c, boolean needTimestamp) {\n    char[] data = new char[bufSize];\n\n    for (int i = 0; i < bufSize; i++) {\n      data[i] = c;\n    }\n\n    Map<String, String> map = new TreeMap<String, String>();\n    for (int i = 0; i < mapNr; i++) {\n      map.put(\"key_\" + i, new String(data));\n    }\n\n    for (int i = 0; i < firstLevelNr; i++) {\n      for (int j = 0; j < secondLevelNr; j++) {\n        String nodeId = getNodeId(i, j);\n        ZNRecord record = new ZNRecord(nodeId);\n        record.setSimpleFields(map);\n        if (needTimestamp) {\n          long now = System.currentTimeMillis();\n          record.setSimpleField(\"SetTimestamp\", Long.toString(now));\n        }\n        String key = getSecondLevelKey(i, j);\n        store.set(key, record, AccessOption.PERSISTENT);\n      }\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":3,"curCode":"  private void setNodes(HelixZkClient zkClient, String root, char c, boolean needTimestamp) {\n    char[] data = new char[bufSize];\n\n    for (int i = 0; i < bufSize; i++) {\n      data[i] = c;\n    }\n\n    Map<String, String> map = new TreeMap<>();\n    for (int i = 0; i < mapNr; i++) {\n      map.put(\"key_\" + i, new String(data));\n    }\n\n    for (int i = 0; i < firstLevelNr; i++) {\n      String firstLevelKey = getFirstLevelKey(i);\n\n      for (int j = 0; j < secondLevelNr; j++) {\n        String nodeId = getNodeId(i, j);\n        ZNRecord record = new ZNRecord(nodeId);\n        record.setSimpleFields(map);\n        if (needTimestamp) {\n          long now = System.currentTimeMillis();\n          record.setSimpleField(\"SetTimestamp\", Long.toString(now));\n        }\n        String key = getSecondLevelKey(i, j);\n        try {\n          zkClient.writeData(root + key, record);\n        } catch (ZkNoNodeException e) {\n          zkClient.createPersistent(root + firstLevelKey, true);\n          zkClient.createPersistent(root + key, record);\n        }\n      }\n    }\n  }\n","date":"2019-05-25 09:19:21","endLine":377,"groupId":"1135","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setNodes","params":"(HelixZkClientzkClient@Stringroot@charc@booleanneedTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4a/4ced90fbc3dac6366c8068becfea2b3d3a90aa.src","preCode":"  private void setNodes(HelixZkClient zkClient, String root, char c, boolean needTimestamp) {\n    char[] data = new char[bufSize];\n\n    for (int i = 0; i < bufSize; i++) {\n      data[i] = c;\n    }\n\n    Map<String, String> map = new TreeMap<String, String>();\n    for (int i = 0; i < mapNr; i++) {\n      map.put(\"key_\" + i, new String(data));\n    }\n\n    for (int i = 0; i < firstLevelNr; i++) {\n      String firstLevelKey = getFirstLevelKey(i);\n\n      for (int j = 0; j < secondLevelNr; j++) {\n        String nodeId = getNodeId(i, j);\n        ZNRecord record = new ZNRecord(nodeId);\n        record.setSimpleFields(map);\n        if (needTimestamp) {\n          long now = System.currentTimeMillis();\n          record.setSimpleField(\"SetTimestamp\", Long.toString(now));\n        }\n        String key = getSecondLevelKey(i, j);\n        try {\n          zkClient.writeData(root + key, record);\n        } catch (ZkNoNodeException e) {\n          zkClient.createPersistent(root + firstLevelKey, true);\n          zkClient.createPersistent(root + key, record);\n        }\n      }\n    }\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/store/zk/TestZkHelixPropertyStore.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
