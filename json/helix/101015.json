[{"authorTime":"2020-05-05 03:36:13","codes":[{"authorDate":"2020-05-05 03:36:13","commitOrder":1,"curCode":"    public void asyncCreate(String path, Object datat, CreateMode mode,\n        ZkAsyncCallbacks.CreateCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncCreate(path, datat, mode, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                _retryCount++;\n                try {\n                  Thread.sleep(RETRY_INTERVAL_MS);\n                } catch (InterruptedException e) {\n                  throw new ZkInterruptedException(e);\n                }\n                asyncCreate(path, datat, mode, cb);\n              }\n            }, null);\n      }\n    }\n","date":"2020-05-05 03:36:13","endLine":314,"groupId":"2044","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(Stringpath@Objectdatat@CreateModemode@ZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/5b06f64d346af81578ac14db82a6b16572bec9.src","preCode":"    public void asyncCreate(String path, Object datat, CreateMode mode,\n        ZkAsyncCallbacks.CreateCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncCreate(path, datat, mode, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                _retryCount++;\n                try {\n                  Thread.sleep(RETRY_INTERVAL_MS);\n                } catch (InterruptedException e) {\n                  throw new ZkInterruptedException(e);\n                }\n                asyncCreate(path, datat, mode, cb);\n              }\n            }, null);\n      }\n    }\n","realPath":"zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestZkClientAsyncRetry.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"B"},{"authorDate":"2020-05-05 03:36:13","commitOrder":1,"curCode":"    public void asyncDelete(String path, ZkAsyncCallbacks.DeleteCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncDelete(path, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                _retryCount++;\n                try {\n                  Thread.sleep(RETRY_INTERVAL_MS);\n                } catch (InterruptedException e) {\n                  throw new ZkInterruptedException(e);\n                }\n                asyncDelete(path, cb);\n              }\n            });\n      }\n    }\n","date":"2020-05-05 03:36:13","endLine":403,"groupId":"2044","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncDelete","params":"(Stringpath@ZkAsyncCallbacks.DeleteCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/4e/5b06f64d346af81578ac14db82a6b16572bec9.src","preCode":"    public void asyncDelete(String path, ZkAsyncCallbacks.DeleteCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncDelete(path, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                _retryCount++;\n                try {\n                  Thread.sleep(RETRY_INTERVAL_MS);\n                } catch (InterruptedException e) {\n                  throw new ZkInterruptedException(e);\n                }\n                asyncDelete(path, cb);\n              }\n            });\n      }\n    }\n","realPath":"zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestZkClientAsyncRetry.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"B"}],"commitId":"96ebb27c23004a7a69dc4799b14586ff82d53c9e","commitMessage":"@@@Add async call retry to resolve the transient ZK connection issue. (#970)\n\nIf any exceptions happen during the async call.  the current design will fail the operation and may eventually return a partial result.\nThis change makes the ZkClient retry operation if the error is because of a temporary ZK connection issue (CONNECTIONLOSS.  SESSIONEXPIRED.  SESSIONMOVED).\nSo the async call has a larger chance to finish the operation. Note that if the exception is due to business logic.  the async call will still fail and the right return code will be sent to the callback handler.","date":"2020-05-05 03:36:13","modifiedFileCount":"3","status":"B","submitter":"Jiajun Wang"},{"authorTime":"2020-12-15 04:37:56","codes":[{"authorDate":"2020-12-15 04:37:56","commitOrder":2,"curCode":"    public void asyncCreate(String path, Object datat, CreateMode mode,\n        ZkAsyncCallbacks.CreateCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncCreate(path, datat, mode, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                preProcess();\n                asyncCreate(path, datat, mode, cb);\n              }\n            }, null);\n      }\n    }\n","date":"2020-12-15 04:37:56","endLine":375,"groupId":"2044","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(Stringpath@Objectdatat@CreateModemode@ZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8b/d74d45f31dff4c6751fb3d6e0a622675973130.src","preCode":"    public void asyncCreate(String path, Object datat, CreateMode mode,\n        ZkAsyncCallbacks.CreateCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncCreate(path, datat, mode, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                _retryCount++;\n                try {\n                  Thread.sleep(RETRY_INTERVAL_MS);\n                } catch (InterruptedException e) {\n                  throw new ZkInterruptedException(e);\n                }\n                asyncCreate(path, datat, mode, cb);\n              }\n            }, null);\n      }\n    }\n","realPath":"zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestZkClientAsyncRetry.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"},{"authorDate":"2020-12-15 04:37:56","commitOrder":2,"curCode":"    public void asyncDelete(String path, ZkAsyncCallbacks.DeleteCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncDelete(path, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                preProcess();\n                asyncDelete(path, cb);\n              }\n            });\n      }\n    }\n","date":"2020-12-15 04:37:56","endLine":444,"groupId":"2044","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncDelete","params":"(Stringpath@ZkAsyncCallbacks.DeleteCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/8b/d74d45f31dff4c6751fb3d6e0a622675973130.src","preCode":"    public void asyncDelete(String path, ZkAsyncCallbacks.DeleteCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncDelete(path, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                _retryCount++;\n                try {\n                  Thread.sleep(RETRY_INTERVAL_MS);\n                } catch (InterruptedException e) {\n                  throw new ZkInterruptedException(e);\n                }\n                asyncDelete(path, cb);\n              }\n            });\n      }\n    }\n","realPath":"zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestZkClientAsyncRetry.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"}],"commitId":"e1b1690c9c181380d3a824bbc7bcad6b29a43120","commitMessage":"@@@Cancel async callback when exception is thrown (#1592)\n\nProblem:\nIn the ZkClient async retry run.  if ZkSessionMismatchedException is thrown from getExpectedZookeeper().  the actual async callback is neither being retried nor cancelled.  causing the callback waitForSuccess() to hang.\n\nSolution:\nOnce an exception is thrown during the retry run.  the callback context should be processed or cancelled correctly.","date":"2020-12-15 04:37:56","modifiedFileCount":"5","status":"M","submitter":"Huizhi Lu"},{"authorTime":"2021-03-20 07:11:56","codes":[{"authorDate":"2021-03-20 07:11:56","commitOrder":3,"curCode":"    public void asyncCreate(String path, Object datat, CreateMode mode,\n        ZkAsyncCallbacks.CreateCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncCreate(path, datat, mode, cb);\n        return;\n      } else if (needRetry(_asyncCallRetCode)) {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                preProcess();\n                asyncCreate(path, datat, mode, cb);\n              }\n            }, null);\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncCallMonitorContext(_monitor, 0, 0, false), null);\n      }\n    }\n","date":"2021-03-20 07:11:56","endLine":554,"groupId":"101015","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncCreate","params":"(Stringpath@Objectdatat@CreateModemode@ZkAsyncCallbacks.CreateCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/68/45aa9895f2cd20f81f67edd4b3f324316280ce.src","preCode":"    public void asyncCreate(String path, Object datat, CreateMode mode,\n        ZkAsyncCallbacks.CreateCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncCreate(path, datat, mode, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                preProcess();\n                asyncCreate(path, datat, mode, cb);\n              }\n            }, null);\n      }\n    }\n","realPath":"zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestZkClientAsyncRetry.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":536,"status":"M"},{"authorDate":"2021-03-20 07:11:56","commitOrder":3,"curCode":"    public void asyncDelete(String path, ZkAsyncCallbacks.DeleteCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncDelete(path, cb);\n        return;\n      } else if (needRetry(_asyncCallRetCode)) {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                preProcess();\n                asyncDelete(path, cb);\n              }\n            });\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncCallMonitorContext(_monitor, 0, 0, false));\n      }\n    }\n","date":"2021-03-20 07:11:56","endLine":635,"groupId":"101015","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncDelete","params":"(Stringpath@ZkAsyncCallbacks.DeleteCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/68/45aa9895f2cd20f81f67edd4b3f324316280ce.src","preCode":"    public void asyncDelete(String path, ZkAsyncCallbacks.DeleteCallbackHandler cb) {\n      if (_asyncCallRetCode == KeeperException.Code.OK.intValue()) {\n        super.asyncDelete(path, cb);\n        return;\n      } else {\n        cb.processResult(_asyncCallRetCode, path,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, null, 0, 0, false) {\n              @Override\n              protected void doRetry() {\n                preProcess();\n                asyncDelete(path, cb);\n              }\n            });\n      }\n    }\n","realPath":"zookeeper-api/src/test/java/org/apache/helix/zookeeper/impl/client/TestZkClientAsyncRetry.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"M"}],"commitId":"72541eac1d49294ea1c126e4c359b1611c0dce71","commitMessage":"@@@Track failures for async read/write in ZkClient (#1663)\n\n* Defines separate metrics for async (batch) operations and tracks failure count by checking for operation return code in ZkAsyncCallbacks. Also.  cancels async get/exists/delete callbacks when an exception is thrown to be able to detect failure and record the metric. Finally.  in TestRawZkClient sync read metrics were used to check async reads.  which is fixed to reflect the separation of sync and async metrics.","date":"2021-03-20 07:11:56","modifiedFileCount":"7","status":"M","submitter":"Ramin Bashizade"}]
