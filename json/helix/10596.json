[{"authorTime":"2013-08-10 04:29:34","codes":[{"authorDate":"2013-08-10 04:29:34","commitOrder":1,"curCode":"  public void testDrop() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            4, \r\n                            n, \r\n                            2, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++)\n    {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result = ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine = (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result = ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet().isEmpty(), \"All state-models should be dropped, but was \"\n    + fty.getPartitionSet());\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-10 04:29:34","endLine":120,"groupId":"7324","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ef/d24596777e4955a080bd1d9c265e5d0a22105e.src","preCode":"  public void testDrop() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            4, \r\n                            n, \r\n                            2, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++)\n    {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result = ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine = (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result = ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet().isEmpty(), \"All state-models should be dropped, but was \"\n    + fty.getPartitionSet());\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/TestStateModelLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2013-08-10 04:29:34","commitOrder":1,"curCode":"  public void testDropErrorPartition() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            4, \r\n                            n, \r\n                            2, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++)\n    {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      if (i == 0)\n      {\n        Map<String, Set<String>> errTransitionMap = new HashMap<String, Set<String>>();\n        Set<String> partitions = new HashSet<String>();\n        partitions.add(\"TestDB0_0\");\n        errTransitionMap.put(\"OFFLINE-SLAVE\", partitions);\n        participants[0].setTransition(new ErrTransition(errTransitionMap));\n      }\n\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStates = new HashMap<String, Map<String, String>>();\n    errStates.put(\"TestDB0\", new HashMap<String, String>());\n    errStates.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result = ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName, errStates));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine = (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"ERROR\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result = ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet().isEmpty(), \"All state-models should be dropped, but was \"\n    + fty.getPartitionSet());\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-08-10 04:29:34","endLine":204,"groupId":"3776","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ef/d24596777e4955a080bd1d9c265e5d0a22105e.src","preCode":"  public void testDropErrorPartition() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            4, \r\n                            n, \r\n                            2, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterControllerManager controller = new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++)\n    {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      if (i == 0)\n      {\n        Map<String, Set<String>> errTransitionMap = new HashMap<String, Set<String>>();\n        Set<String> partitions = new HashSet<String>();\n        partitions.add(\"TestDB0_0\");\n        errTransitionMap.put(\"OFFLINE-SLAVE\", partitions);\n        participants[0].setTransition(new ErrTransition(errTransitionMap));\n      }\n\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStates = new HashMap<String, Map<String, String>>();\n    errStates.put(\"TestDB0\", new HashMap<String, String>());\n    errStates.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result = ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName, errStates));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine = (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"ERROR\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result = ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR, clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet().isEmpty(), \"All state-models should be dropped, but was \"\n    + fty.getPartitionSet());\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++)\n    {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/TestStateModelLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"}],"commitId":"11df95e810a0102584d4ba690dcbe241a8a00b1b","commitMessage":"@@@HELIX-197: fix state model leak.  rb=13437\n","date":"2013-08-10 04:29:34","modifiedFileCount":"8","status":"B","submitter":"zzhang"},{"authorTime":"2014-11-20 03:31:01","codes":[{"authorDate":"2014-11-20 03:31:01","commitOrder":2,"curCode":"  public void testDrop() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        4, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine =\n        (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet(\"TestDB0\").isEmpty(),\n        \"All state-models should be dropped, but was \" + fty.getPartitionSet(\"TestDB0\"));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-11-20 03:31:01","endLine":121,"groupId":"7324","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c2/4eeef6894f7b6d14858dfae2fefce2679e8d23.src","preCode":"  public void testDrop() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        4, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine =\n        (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet().isEmpty(),\n        \"All state-models should be dropped, but was \" + fty.getPartitionSet());\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/TestStateModelLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2014-11-20 03:31:01","commitOrder":2,"curCode":"  public void testDropErrorPartition() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        4, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      if (i == 0) {\n        Map<String, Set<String>> errTransitionMap = new HashMap<String, Set<String>>();\n        Set<String> partitions = new HashSet<String>();\n        partitions.add(\"TestDB0_0\");\n        errTransitionMap.put(\"OFFLINE-SLAVE\", partitions);\n        participants[0].setTransition(new ErrTransition(errTransitionMap));\n      }\n\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStates = new HashMap<String, Map<String, String>>();\n    errStates.put(\"TestDB0\", new HashMap<String, String>());\n    errStates.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStates));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine =\n        (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"ERROR\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet(\"TestDB0\").isEmpty(),\n        \"All state-models should be dropped, but was \" + fty.getPartitionSet(\"TestDB0\"));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-11-20 03:31:01","endLine":206,"groupId":"3776","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/c2/4eeef6894f7b6d14858dfae2fefce2679e8d23.src","preCode":"  public void testDropErrorPartition() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        4, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      if (i == 0) {\n        Map<String, Set<String>> errTransitionMap = new HashMap<String, Set<String>>();\n        Set<String> partitions = new HashSet<String>();\n        partitions.add(\"TestDB0_0\");\n        errTransitionMap.put(\"OFFLINE-SLAVE\", partitions);\n        participants[0].setTransition(new ErrTransition(errTransitionMap));\n      }\n\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStates = new HashMap<String, Map<String, String>>();\n    errStates.put(\"TestDB0\", new HashMap<String, String>());\n    errStates.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStates));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine =\n        (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"ERROR\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet().isEmpty(),\n        \"All state-models should be dropped, but was \" + fty.getPartitionSet());\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/TestStateModelLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"9ddd0af347037f585a52b83bbc3a6b11a3934c82","commitMessage":"@@@[HELIX-552] StateModelFactory#_stateModelMap should use both resourceName and partitionKey to map a state model.  rb=28211\n","date":"2014-11-20 03:31:01","modifiedFileCount":"34","status":"M","submitter":"zzhang"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":3,"curCode":"  public void testDrop() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        4, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine =\n        (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet(\"TestDB0\").isEmpty(),\n        \"All state-models should be dropped, but was \" + fty.getPartitionSet(\"TestDB0\"));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":122,"groupId":"10596","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/21e7a08feaf8f05d7bdd3115169272940499a6.src","preCode":"  public void testDrop() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        4, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      participants[i].syncStart();\n    }\n\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine =\n        (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet(\"TestDB0\").isEmpty(),\n        \"All state-models should be dropped, but was \" + fty.getPartitionSet(\"TestDB0\"));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/TestStateModelLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":3,"curCode":"  public void testDropErrorPartition() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        4, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      if (i == 0) {\n        Map<String, Set<String>> errTransitionMap = new HashMap<String, Set<String>>();\n        Set<String> partitions = new HashSet<String>();\n        partitions.add(\"TestDB0_0\");\n        errTransitionMap.put(\"OFFLINE-SLAVE\", partitions);\n        participants[0].setTransition(new ErrTransition(errTransitionMap));\n      }\n\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStates = new HashMap<String, Map<String, String>>();\n    errStates.put(\"TestDB0\", new HashMap<String, String>());\n    errStates.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStates));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine =\n        (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"ERROR\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet(\"TestDB0\").isEmpty(),\n        \"All state-models should be dropped, but was \" + fty.getPartitionSet(\"TestDB0\"));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n    TestHelper.dropCluster(clusterName, _gZkClient);\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":208,"groupId":"10596","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/21e7a08feaf8f05d7bdd3115169272940499a6.src","preCode":"  public void testDropErrorPartition() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        4, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller\");\n    controller.syncStart();\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n    for (int i = 0; i < n; i++) {\n      final String instanceName = \"localhost_\" + (12918 + i);\n\n      participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      if (i == 0) {\n        Map<String, Set<String>> errTransitionMap = new HashMap<String, Set<String>>();\n        Set<String> partitions = new HashSet<String>();\n        partitions.add(\"TestDB0_0\");\n        errTransitionMap.put(\"OFFLINE-SLAVE\", partitions);\n        participants[0].setTransition(new ErrTransition(errTransitionMap));\n      }\n\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStates = new HashMap<String, Map<String, String>>();\n    errStates.put(\"TestDB0\", new HashMap<String, String>());\n    errStates.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStates));\n    Assert.assertTrue(result);\n\n    \r\n    HelixStateMachineEngine stateMachine =\n        (HelixStateMachineEngine) participants[0].getStateMachineEngine();\n    StateModelFactory<? extends StateModel> fty = stateMachine.getStateModelFactory(\"MasterSlave\");\n    Map<String, String> expectStateModelMap = new TreeMap<String, String>();\n    expectStateModelMap.put(\"TestDB0_0\", \"ERROR\");\n    expectStateModelMap.put(\"TestDB0_1\", \"MASTER\");\n    expectStateModelMap.put(\"TestDB0_2\", \"SLAVE\");\n    expectStateModelMap.put(\"TestDB0_3\", \"MASTER\");\n    checkStateModelMap(fty, expectStateModelMap);\n\n    \r\n    HelixAdmin admin = new ZKHelixAdmin(_gZkClient);\n    admin.dropResource(clusterName, \"TestDB0\");\n\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result);\n\n    \r\n    Assert.assertTrue(fty.getPartitionSet(\"TestDB0\").isEmpty(),\n        \"All state-models should be dropped, but was \" + fty.getPartitionSet(\"TestDB0\"));\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/manager/TestStateModelLeak.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"}]
