[{"authorTime":"2020-11-12 09:21:37","codes":[{"authorDate":"2020-11-12 09:21:37","commitOrder":1,"curCode":"  public void testSTHandlerInitFailureRetry() throws Exception {\n    int retryCountUntilSucceed =\n        Integer.MAX_VALUE; \r\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Map<String, List<Message>> partitionMessageMap = new HashMap<>();\n    Assert.assertTrue(TestHelper.verify(() -> {\n      int totalMessageCount = 0;\n      for (int i = 0; i < NODE_NR; i++) {\n        String instanceName = _participants[i].getInstanceName();\n        List<Message> messageList = accessor.getProperty(\n            accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n                .map(childName -> keyBuilder.message(instanceName, childName))\n                .collect(Collectors.toList()), true);\n        for (Message message : messageList) {\n          if (message.getMsgState() != Message.MessageState.UNPROCESSABLE) {\n            return false;\n          }\n        }\n        partitionMessageMap.put(instanceName, messageList);\n        totalMessageCount += messageList.size();\n      }\n      return totalMessageCount == _PARTITIONS * REPLICAS;\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    for (String instanceName : partitionMessageMap.keySet()) {\n      List<Message> instanceMessages = partitionMessageMap.get(instanceName);\n      for (Message message : instanceMessages) {\n        Assert.assertTrue(message.getRetryCount() <= 0);\n        Assert.assertEquals(message.getMsgState(), Message.MessageState.UNPROCESSABLE);\n      }\n      \r\n      Assert.assertEquals(retryCountUntilSucceed - retryFactoryMap.get(instanceName)\n          .getRemainingRetryCountUntilSucceed(), instanceMessages.size()\n          * MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT);\n    }\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().isEmpty());\n      }\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","date":"2020-11-12 09:21:37","endLine":142,"groupId":"4169","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSTHandlerInitFailureRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e3/ac398250f058fcdd4576461b9e5d1326bc3568.src","preCode":"  public void testSTHandlerInitFailureRetry() throws Exception {\n    int retryCountUntilSucceed =\n        Integer.MAX_VALUE; \r\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Map<String, List<Message>> partitionMessageMap = new HashMap<>();\n    Assert.assertTrue(TestHelper.verify(() -> {\n      int totalMessageCount = 0;\n      for (int i = 0; i < NODE_NR; i++) {\n        String instanceName = _participants[i].getInstanceName();\n        List<Message> messageList = accessor.getProperty(\n            accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n                .map(childName -> keyBuilder.message(instanceName, childName))\n                .collect(Collectors.toList()), true);\n        for (Message message : messageList) {\n          if (message.getMsgState() != Message.MessageState.UNPROCESSABLE) {\n            return false;\n          }\n        }\n        partitionMessageMap.put(instanceName, messageList);\n        totalMessageCount += messageList.size();\n      }\n      return totalMessageCount == _PARTITIONS * REPLICAS;\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    for (String instanceName : partitionMessageMap.keySet()) {\n      List<Message> instanceMessages = partitionMessageMap.get(instanceName);\n      for (Message message : instanceMessages) {\n        Assert.assertTrue(message.getRetryCount() <= 0);\n        Assert.assertEquals(message.getMsgState(), Message.MessageState.UNPROCESSABLE);\n      }\n      \r\n      Assert.assertEquals(retryCountUntilSucceed - retryFactoryMap.get(instanceName)\n          .getRemainingRetryCountUntilSucceed(), instanceMessages.size()\n          * MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT);\n    }\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().isEmpty());\n      }\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionAppFailureHandling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"},{"authorDate":"2020-11-12 09:21:37","commitOrder":1,"curCode":"  public void testSTHandlerInitFailureRetrySucceed() {\n    \r\n    \r\n    int retryCountUntilSucceed =\n        MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT - 1;\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n\n      List<Message> messageList = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n              .map(childName -> keyBuilder.message(instanceName, childName))\n              .collect(Collectors.toList()), true);\n      Assert.assertTrue(messageList.isEmpty());\n\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().values().stream()\n            .allMatch(state -> !state.equals(HelixDefinedState.ERROR.name())));\n      }\n      \r\n      Assert\n          .assertEquals(retryFactoryMap.get(instanceName).getRemainingRetryCountUntilSucceed(), 0);\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","date":"2020-11-12 09:21:37","endLine":186,"groupId":"3652","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSTHandlerInitFailureRetrySucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e3/ac398250f058fcdd4576461b9e5d1326bc3568.src","preCode":"  public void testSTHandlerInitFailureRetrySucceed() {\n    \r\n    \r\n    int retryCountUntilSucceed =\n        MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT - 1;\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n\n      List<Message> messageList = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n              .map(childName -> keyBuilder.message(instanceName, childName))\n              .collect(Collectors.toList()), true);\n      Assert.assertTrue(messageList.isEmpty());\n\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().values().stream()\n            .allMatch(state -> !state.equals(HelixDefinedState.ERROR.name())));\n      }\n      \r\n      Assert\n          .assertEquals(retryFactoryMap.get(instanceName).getRemainingRetryCountUntilSucceed(), 0);\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionAppFailureHandling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"}],"commitId":"f38915cc11b18934ecad1450a75b6d890b351448","commitMessage":"@@@Add default message handling retry count for state transition messages. (#1514)\n\nThe retry count will be counted when message handler creation fails or state transition times out.\n\nIn addition.  this PR also improves several ambiguous behaviors that may block a normal retry.\n1. The cache of the known messages list in HelixTaskExecutor may not be updated correctly if a message is going to be retried.\n2. The retry count is not strictly followed in some conditions.\n3. The to-be-retried message is not automatically read when there are no other new message changes. In this PR we change this behavior and ensure the retry will be done even no other message created.\n\nFinally.  improve the tests to cover the new changes.","date":"2020-11-12 09:21:37","modifiedFileCount":"3","status":"B","submitter":"Jiajun Wang"},{"authorTime":"2020-11-12 09:21:37","codes":[{"authorDate":"2020-11-25 07:54:25","commitOrder":2,"curCode":"  public void testSTHandlerInitFailureRetry() throws Exception {\n    int retryCountUntilSucceed =\n        Integer.MAX_VALUE; \r\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Map<String, List<Message>> partitionMessageMap = new HashMap<>();\n    Assert.assertTrue(TestHelper.verify(() -> {\n      int totalMessageCount = 0;\n      for (int i = 0; i < NODE_NR; i++) {\n        String instanceName = _participants[i].getInstanceName();\n        List<Message> messageList = accessor.getProperty(\n            accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n                .map(childName -> keyBuilder.message(instanceName, childName))\n                .collect(Collectors.toList()), true);\n        for (Message message : messageList) {\n          if (message == null || message.getMsgState() != Message.MessageState.UNPROCESSABLE) {\n            return false;\n          }\n        }\n        partitionMessageMap.put(instanceName, messageList);\n        totalMessageCount += messageList.size();\n      }\n      return totalMessageCount == _PARTITIONS * REPLICAS;\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    for (String instanceName : partitionMessageMap.keySet()) {\n      List<Message> instanceMessages = partitionMessageMap.get(instanceName);\n      for (Message message : instanceMessages) {\n        Assert.assertTrue(message.getRetryCount() <= 0);\n        Assert.assertEquals(message.getMsgState(), Message.MessageState.UNPROCESSABLE);\n      }\n      \r\n      Assert.assertEquals(retryCountUntilSucceed - retryFactoryMap.get(instanceName)\n          .getRemainingRetryCountUntilSucceed(), instanceMessages.size()\n          * MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT);\n    }\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().isEmpty());\n      }\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","date":"2020-11-25 07:54:25","endLine":142,"groupId":"4169","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSTHandlerInitFailureRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/12/ede563d8f8cbdbd146b9ad88d87eb428874365.src","preCode":"  public void testSTHandlerInitFailureRetry() throws Exception {\n    int retryCountUntilSucceed =\n        Integer.MAX_VALUE; \r\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Map<String, List<Message>> partitionMessageMap = new HashMap<>();\n    Assert.assertTrue(TestHelper.verify(() -> {\n      int totalMessageCount = 0;\n      for (int i = 0; i < NODE_NR; i++) {\n        String instanceName = _participants[i].getInstanceName();\n        List<Message> messageList = accessor.getProperty(\n            accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n                .map(childName -> keyBuilder.message(instanceName, childName))\n                .collect(Collectors.toList()), true);\n        for (Message message : messageList) {\n          if (message.getMsgState() != Message.MessageState.UNPROCESSABLE) {\n            return false;\n          }\n        }\n        partitionMessageMap.put(instanceName, messageList);\n        totalMessageCount += messageList.size();\n      }\n      return totalMessageCount == _PARTITIONS * REPLICAS;\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    for (String instanceName : partitionMessageMap.keySet()) {\n      List<Message> instanceMessages = partitionMessageMap.get(instanceName);\n      for (Message message : instanceMessages) {\n        Assert.assertTrue(message.getRetryCount() <= 0);\n        Assert.assertEquals(message.getMsgState(), Message.MessageState.UNPROCESSABLE);\n      }\n      \r\n      Assert.assertEquals(retryCountUntilSucceed - retryFactoryMap.get(instanceName)\n          .getRemainingRetryCountUntilSucceed(), instanceMessages.size()\n          * MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT);\n    }\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().isEmpty());\n      }\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionAppFailureHandling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-11-12 09:21:37","commitOrder":2,"curCode":"  public void testSTHandlerInitFailureRetrySucceed() {\n    \r\n    \r\n    int retryCountUntilSucceed =\n        MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT - 1;\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n\n      List<Message> messageList = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n              .map(childName -> keyBuilder.message(instanceName, childName))\n              .collect(Collectors.toList()), true);\n      Assert.assertTrue(messageList.isEmpty());\n\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().values().stream()\n            .allMatch(state -> !state.equals(HelixDefinedState.ERROR.name())));\n      }\n      \r\n      Assert\n          .assertEquals(retryFactoryMap.get(instanceName).getRemainingRetryCountUntilSucceed(), 0);\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","date":"2020-11-12 09:21:37","endLine":186,"groupId":"3652","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSTHandlerInitFailureRetrySucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e3/ac398250f058fcdd4576461b9e5d1326bc3568.src","preCode":"  public void testSTHandlerInitFailureRetrySucceed() {\n    \r\n    \r\n    int retryCountUntilSucceed =\n        MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT - 1;\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n\n      List<Message> messageList = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n              .map(childName -> keyBuilder.message(instanceName, childName))\n              .collect(Collectors.toList()), true);\n      Assert.assertTrue(messageList.isEmpty());\n\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().values().stream()\n            .allMatch(state -> !state.equals(HelixDefinedState.ERROR.name())));\n      }\n      \r\n      Assert\n          .assertEquals(retryFactoryMap.get(instanceName).getRemainingRetryCountUntilSucceed(), 0);\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionAppFailureHandling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"}],"commitId":"353dee19636804e6d705720ad21892288051fb07","commitMessage":"@@@Fix TestStateTransitionAppFailureHandling by adding additional Null check. (#1554)\n\nSince the test happens after a new cluster creating.  it is possible that some of the initialization messages are removed during the test logic.\nThis may cause NPE in some race conditions. This change adds a check to avoid the Null from being checked.","date":"2020-11-25 07:54:25","modifiedFileCount":"1","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2021-06-15 12:32:25","codes":[{"authorDate":"2021-06-15 12:32:25","commitOrder":3,"curCode":"  public void testSTHandlerInitFailureRetry() throws Exception {\n    int retryCountUntilSucceed =\n        Integer.MAX_VALUE; \r\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Map<String, List<Message>> partitionMessageMap = new HashMap<>();\n    Assert.assertTrue(TestHelper.verify(() -> {\n      int totalMessageCount = 0;\n      for (int i = 0; i < NODE_NR; i++) {\n        String instanceName = _participants[i].getInstanceName();\n        List<Message> messageList = accessor.getProperty(\n            accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n                .map(childName -> keyBuilder.message(instanceName, childName))\n                .collect(Collectors.toList()), true);\n        for (Message message : messageList) {\n          if (message == null || message.getMsgState() != Message.MessageState.UNPROCESSABLE) {\n            return false;\n          }\n        }\n        partitionMessageMap.put(instanceName, messageList);\n        totalMessageCount += messageList.size();\n      }\n      return totalMessageCount == _PARTITIONS * REPLICAS;\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    for (String instanceName : partitionMessageMap.keySet()) {\n      List<Message> instanceMessages = partitionMessageMap.get(instanceName);\n      for (Message message : instanceMessages) {\n        Assert.assertTrue(message.getRetryCount() <= 0);\n        Assert.assertEquals(message.getMsgState(), Message.MessageState.UNPROCESSABLE);\n      }\n      \r\n      Assert.assertEquals(retryCountUntilSucceed - retryFactoryMap.get(instanceName)\n          .getRemainingRetryCountUntilSucceed(), instanceMessages.size()\n          * MessageUtil.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT);\n    }\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().isEmpty());\n      }\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","date":"2021-07-17 05:02:56","endLine":143,"groupId":"10561","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSTHandlerInitFailureRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e9/7424c36898872121f79bf0794e7094b4240044.src","preCode":"  public void testSTHandlerInitFailureRetry() throws Exception {\n    int retryCountUntilSucceed =\n        Integer.MAX_VALUE; \r\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Map<String, List<Message>> partitionMessageMap = new HashMap<>();\n    Assert.assertTrue(TestHelper.verify(() -> {\n      int totalMessageCount = 0;\n      for (int i = 0; i < NODE_NR; i++) {\n        String instanceName = _participants[i].getInstanceName();\n        List<Message> messageList = accessor.getProperty(\n            accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n                .map(childName -> keyBuilder.message(instanceName, childName))\n                .collect(Collectors.toList()), true);\n        for (Message message : messageList) {\n          if (message == null || message.getMsgState() != Message.MessageState.UNPROCESSABLE) {\n            return false;\n          }\n        }\n        partitionMessageMap.put(instanceName, messageList);\n        totalMessageCount += messageList.size();\n      }\n      return totalMessageCount == _PARTITIONS * REPLICAS;\n    }, TestHelper.WAIT_DURATION));\n\n    \r\n    for (String instanceName : partitionMessageMap.keySet()) {\n      List<Message> instanceMessages = partitionMessageMap.get(instanceName);\n      for (Message message : instanceMessages) {\n        Assert.assertTrue(message.getRetryCount() <= 0);\n        Assert.assertEquals(message.getMsgState(), Message.MessageState.UNPROCESSABLE);\n      }\n      \r\n      Assert.assertEquals(retryCountUntilSucceed - retryFactoryMap.get(instanceName)\n          .getRemainingRetryCountUntilSucceed(), instanceMessages.size()\n          * MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT);\n    }\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().isEmpty());\n      }\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionAppFailureHandling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2021-06-15 12:32:25","commitOrder":3,"curCode":"  public void testSTHandlerInitFailureRetrySucceed() {\n    \r\n    \r\n    int retryCountUntilSucceed =\n        MessageUtil.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT - 1;\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n\n      List<Message> messageList = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n              .map(childName -> keyBuilder.message(instanceName, childName))\n              .collect(Collectors.toList()), true);\n      Assert.assertTrue(messageList.isEmpty());\n\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().values().stream()\n            .allMatch(state -> !state.equals(HelixDefinedState.ERROR.name())));\n      }\n      \r\n      Assert\n          .assertEquals(retryFactoryMap.get(instanceName).getRemainingRetryCountUntilSucceed(), 0);\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","date":"2021-07-17 05:02:56","endLine":187,"groupId":"10561","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testSTHandlerInitFailureRetrySucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/e9/7424c36898872121f79bf0794e7094b4240044.src","preCode":"  public void testSTHandlerInitFailureRetrySucceed() {\n    \r\n    \r\n    int retryCountUntilSucceed =\n        MessageGenerationPhase.DEFAULT_STATE_TRANSITION_MESSAGE_RETRY_COUNT - 1;\n    Map<String, RetryStateModelFactory> retryFactoryMap = resetParticipants(retryCountUntilSucceed);\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, TEST_DB, _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, TEST_DB, REPLICAS);\n\n    HelixDataAccessor accessor = _controller.getHelixDataAccessor();\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    \r\n    for (int i = 0; i < NODE_NR; i++) {\n      String instanceName = _participants[i].getInstanceName();\n      String sessionId = _participants[i].getSessionId();\n\n      List<Message> messageList = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.messages(instanceName)).stream()\n              .map(childName -> keyBuilder.message(instanceName, childName))\n              .collect(Collectors.toList()), true);\n      Assert.assertTrue(messageList.isEmpty());\n\n      List<CurrentState> currentStates = accessor.getProperty(\n          accessor.getChildNames(keyBuilder.currentStates(instanceName, sessionId)).stream()\n              .map(childName -> keyBuilder.currentState(instanceName, sessionId, childName))\n              .collect(Collectors.toList()), true);\n      for (CurrentState currentState : currentStates) {\n        Assert.assertTrue(currentState.getPartitionStateMap().values().stream()\n            .allMatch(state -> !state.equals(HelixDefinedState.ERROR.name())));\n      }\n      \r\n      Assert\n          .assertEquals(retryFactoryMap.get(instanceName).getRemainingRetryCountUntilSucceed(), 0);\n    }\n\n    _gSetupTool.dropResourceFromCluster(CLUSTER_NAME, TEST_DB);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/paticipant/TestStateTransitionAppFailureHandling.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"c95362e7211de5c03660f63f1c97256381d8ad3a","commitMessage":"@@@Add message util to create messages (#1796)\n\nMessage creation methods are private in message generation phase. Management mode stage will also need message generation methods to create ST cancellation and participant status change messages.\nMessage util will help with the purposes.\n\nThis commit moves the common message creation logic to a message util so multiple stages can reuse the code.\n","date":"2021-07-17 05:02:56","modifiedFileCount":"2","status":"M","submitter":"Huizhi Lu"}]
