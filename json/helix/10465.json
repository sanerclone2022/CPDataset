[{"authorTime":"2020-06-18 02:26:27","codes":[{"authorDate":"2020-07-22 04:01:47","commitOrder":5,"curCode":"  private void verifyMastership(List<String> _assignmentList) throws Exception {\n    String instance = _assignmentList.get(0);\n    boolean isMasterSwitchedToCorrectInstance = TestHelper.verify(() -> {\n      ExternalView externalView =\n          _gSetupTool.getClusterManagementTool().getResourceExternalView(CLUSTER_NAME, DATABASE);\n      if (externalView == null) {\n        return false;\n      }\n      Map<String, String> stateMap = externalView.getStateMap(DATABASE + \"_0\");\n      if (stateMap == null) {\n        return false;\n      }\n      return \"MASTER\".equals(stateMap.get(instance));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isMasterSwitchedToCorrectInstance);\n  }\n","date":"2020-08-05 05:14:24","endLine":151,"groupId":"4411","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"verifyMastership","params":"(List<String>_assignmentList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/86/83c3f66e7b012dd480f0cb3988526a778bbf8b.src","preCode":"  private void verifyMastership(List<String> _assignmentList) throws Exception {\n    String instance = _assignmentList.get(0);\n    boolean isMasterSwitchedToCorrectInstance = TestHelper.verify(() -> {\n      ExternalView externalView =\n          _gSetupTool.getClusterManagementTool().getResourceExternalView(CLUSTER_NAME, DATABASE);\n      if (externalView == null) {\n        return false;\n      }\n      Map<String, String> stateMap = externalView.getStateMap(DATABASE + \"_0\");\n      if (stateMap == null) {\n        return false;\n      }\n      return \"MASTER\".equals(stateMap.get(instance));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isMasterSwitchedToCorrectInstance);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestMaxNumberOfAttemptsMasterSwitch.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"},{"authorDate":"2020-06-18 02:26:27","commitOrder":5,"curCode":"  public void testTargetedTaskTwoCurrentStates() throws Exception {\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, DATABASE, _numPartitions,\n        MASTER_SLAVE_STATE_MODEL, IdealState.RebalanceMode.SEMI_AUTO.name());\n    _gSetupTool.rebalanceResource(CLUSTER_NAME, DATABASE, 3);\n    List<String> preferenceList = new ArrayList<>();\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1));\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 0));\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 2));\n    IdealState idealState = new IdealState(DATABASE);\n    idealState.setPreferenceList(DATABASE + \"_0\", preferenceList);\n    _gSetupTool.getClusterManagementTool().updateIdealState(CLUSTER_NAME, DATABASE, idealState);\n\n    \r\n    \r\n    \r\n    \r\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder0 =\n        new JobConfig.Builder().setWorkflow(jobQueueName).setTargetResource(DATABASE)\n            .setTargetPartitionStates(Sets.newHashSet(MasterSlaveSMD.States.MASTER.name()))\n            .setCommand(MockTask.TASK_COMMAND)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"JOB0\", jobBuilder0);\n\n    \r\n    boolean isMasterSwitchedToCorrectInstance = TestHelper.verify(() -> {\n      ExternalView externalView =\n          _gSetupTool.getClusterManagementTool().getResourceExternalView(CLUSTER_NAME, DATABASE);\n      if (externalView == null) {\n        return false;\n      }\n      Map<String, String> stateMap = externalView.getStateMap(DATABASE + \"_0\");\n      if (stateMap == null) {\n        return false;\n      }\n      return \"MASTER\".equals(stateMap.get(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1)));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isMasterSwitchedToCorrectInstance);\n\n    _driver.start(jobQueue.build());\n\n    String namespacedJobName = TaskUtil.getNamespacedJobName(jobQueueName, \"JOB0\");\n\n    _driver.pollForJobState(jobQueueName, namespacedJobName, TaskState.IN_PROGRESS);\n\n    \r\n    boolean isTaskAssignedToMasterNode = TestHelper.verify(() -> {\n      JobContext ctx = _driver.getJobContext(namespacedJobName);\n      String participant = ctx.getAssignedParticipant(0);\n      if (participant == null) {\n        return false;\n      }\n      return (participant.equals(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1)));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isTaskAssignedToMasterNode);\n\n    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n    String currentStatePathP0 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0 + \"/CURRENTSTATES/\"\n        + sessionIdP0 + \"/\" + namespacedJobName;\n\n    \r\n    String instanceP1 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 1);\n    ZkClient clientP1 = (ZkClient) _participants[1].getZkClient();\n    String sessionIdP1 = ZkTestHelper.getSessionId(clientP1);\n    String currentStatePathP1 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP1 + \"/CURRENTSTATES/\"\n        + sessionIdP1 + \"/\" + namespacedJobName;\n\n    boolean isCurrentStateCreated = TestHelper.verify(() -> {\n      ZNRecord record = _manager.getHelixDataAccessor().getBaseDataAccessor()\n          .get(currentStatePathP1, new Stat(), AccessOption.PERSISTENT);\n      if (record != null) {\n        record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP0);\n        _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP0, record,\n            AccessOption.PERSISTENT);\n        return true;\n      } else {\n        return false;\n      }\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isCurrentStateCreated);\n\n    \r\n    _driver.pollForJobState(jobQueueName, namespacedJobName, TaskState.COMPLETED);\n    Assert.assertEquals(CANCEL_COUNT.get(), 0);\n  }\n","date":"2020-08-05 05:14:24","endLine":188,"groupId":"4411","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTargetedTaskTwoCurrentStates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/bb/970c73405ef7868a5e24e885bfc36cd3e65a24.src","preCode":"  public void testTargetedTaskTwoCurrentStates() throws Exception {\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, DATABASE, _numPartitions,\n        MASTER_SLAVE_STATE_MODEL, IdealState.RebalanceMode.SEMI_AUTO.name());\n    _gSetupTool.rebalanceResource(CLUSTER_NAME, DATABASE, 3);\n    List<String> preferenceList = new ArrayList<>();\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1));\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 0));\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 2));\n    IdealState idealState = new IdealState(DATABASE);\n    idealState.setPreferenceList(DATABASE + \"_0\", preferenceList);\n    _gSetupTool.getClusterManagementTool().updateIdealState(CLUSTER_NAME, DATABASE, idealState);\n\n    \r\n    \r\n    \r\n    \r\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder0 =\n        new JobConfig.Builder().setWorkflow(jobQueueName).setTargetResource(DATABASE)\n            .setTargetPartitionStates(Sets.newHashSet(MasterSlaveSMD.States.MASTER.name()))\n            .setCommand(MockTask.TASK_COMMAND)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"JOB0\", jobBuilder0);\n\n    \r\n    boolean isMasterSwitchedToCorrectInstance = TestHelper.verify(() -> {\n      ExternalView externalView =\n          _gSetupTool.getClusterManagementTool().getResourceExternalView(CLUSTER_NAME, DATABASE);\n      if (externalView == null) {\n        return false;\n      }\n      Map<String, String> stateMap = externalView.getStateMap(DATABASE + \"_0\");\n      if (stateMap == null) {\n        return false;\n      }\n      return \"MASTER\".equals(stateMap.get(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1)));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isMasterSwitchedToCorrectInstance);\n\n    _driver.start(jobQueue.build());\n\n    String namespacedJobName = TaskUtil.getNamespacedJobName(jobQueueName, \"JOB0\");\n\n    _driver.pollForJobState(jobQueueName, namespacedJobName, TaskState.IN_PROGRESS);\n\n    \r\n    boolean isTaskAssignedToMasterNode = TestHelper.verify(() -> {\n      JobContext ctx = _driver.getJobContext(namespacedJobName);\n      String participant = ctx.getAssignedParticipant(0);\n      if (participant == null) {\n        return false;\n      }\n      return (participant.equals(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1)));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isTaskAssignedToMasterNode);\n\n    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n    String currentStatePathP0 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0 + \"/CURRENTSTATES/\"\n        + sessionIdP0 + \"/\" + namespacedJobName;\n\n    \r\n    String instanceP1 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 1);\n    ZkClient clientP1 = (ZkClient) _participants[1].getZkClient();\n    String sessionIdP1 = ZkTestHelper.getSessionId(clientP1);\n    String currentStatePathP1 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP1 + \"/CURRENTSTATES/\"\n        + sessionIdP1 + \"/\" + namespacedJobName;\n\n    boolean isCurrentStateCreated = TestHelper.verify(() -> {\n      ZNRecord record = _manager.getHelixDataAccessor().getBaseDataAccessor()\n          .get(currentStatePathP1, new Stat(), AccessOption.PERSISTENT);\n      if (record != null) {\n        record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP0);\n        _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP0, record,\n            AccessOption.PERSISTENT);\n        return true;\n      } else {\n        return false;\n      }\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isCurrentStateCreated);\n\n    \r\n    _driver.pollForJobState(jobQueueName, namespacedJobName, TaskState.COMPLETED);\n    Assert.assertEquals(CANCEL_COUNT.get(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskSchedulingTwoCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"NB"}],"commitId":"d39b4561080066993e04f54e83cba0cbcb9323be","commitMessage":"@@@Respect Maximum Number Of Attempts for the tasks (#1142)\n\nIn this commit.  several scheduling parts have been changed in order to\nenforce the scheduler to respect maximum number of attempts for\nthe tasks.\n\nAlso.  it has been observed that when a task being dropped and\nscheduled again.  max number of attempts is not being respected.\nin this commit.  further checks are added to avoid schedule the\ntasks again once we reach its maximum number of attempts.","date":"2020-08-05 05:14:24","modifiedFileCount":"6","status":"M","submitter":"Ali Reza Zamani Zadeh Najari"},{"authorTime":"2020-12-16 06:26:53","codes":[{"authorDate":"2020-07-22 04:01:47","commitOrder":6,"curCode":"  private void verifyMastership(List<String> _assignmentList) throws Exception {\n    String instance = _assignmentList.get(0);\n    boolean isMasterSwitchedToCorrectInstance = TestHelper.verify(() -> {\n      ExternalView externalView =\n          _gSetupTool.getClusterManagementTool().getResourceExternalView(CLUSTER_NAME, DATABASE);\n      if (externalView == null) {\n        return false;\n      }\n      Map<String, String> stateMap = externalView.getStateMap(DATABASE + \"_0\");\n      if (stateMap == null) {\n        return false;\n      }\n      return \"MASTER\".equals(stateMap.get(instance));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isMasterSwitchedToCorrectInstance);\n  }\n","date":"2020-08-05 05:14:24","endLine":151,"groupId":"10465","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"verifyMastership","params":"(List<String>_assignmentList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/86/83c3f66e7b012dd480f0cb3988526a778bbf8b.src","preCode":"  private void verifyMastership(List<String> _assignmentList) throws Exception {\n    String instance = _assignmentList.get(0);\n    boolean isMasterSwitchedToCorrectInstance = TestHelper.verify(() -> {\n      ExternalView externalView =\n          _gSetupTool.getClusterManagementTool().getResourceExternalView(CLUSTER_NAME, DATABASE);\n      if (externalView == null) {\n        return false;\n      }\n      Map<String, String> stateMap = externalView.getStateMap(DATABASE + \"_0\");\n      if (stateMap == null) {\n        return false;\n      }\n      return \"MASTER\".equals(stateMap.get(instance));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isMasterSwitchedToCorrectInstance);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestMaxNumberOfAttemptsMasterSwitch.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"N"},{"authorDate":"2020-12-16 06:26:53","commitOrder":6,"curCode":"  public void testTargetedTaskTwoCurrentStates() throws Exception {\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, DATABASE, _numPartitions,\n        MASTER_SLAVE_STATE_MODEL, IdealState.RebalanceMode.SEMI_AUTO.name());\n    _gSetupTool.rebalanceResource(CLUSTER_NAME, DATABASE, 3);\n    List<String> preferenceList = new ArrayList<>();\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1));\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 0));\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 2));\n    IdealState idealState = new IdealState(DATABASE);\n    idealState.setPreferenceList(DATABASE + \"_0\", preferenceList);\n    _gSetupTool.getClusterManagementTool().updateIdealState(CLUSTER_NAME, DATABASE, idealState);\n\n    \r\n    \r\n    \r\n    \r\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder0 =\n        new JobConfig.Builder().setWorkflow(jobQueueName).setTargetResource(DATABASE)\n            .setTargetPartitionStates(Sets.newHashSet(MasterSlaveSMD.States.MASTER.name()))\n            .setCommand(MockTask.TASK_COMMAND)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"JOB0\", jobBuilder0);\n\n    \r\n    boolean isMasterSwitchedToCorrectInstance = TestHelper.verify(() -> {\n      ExternalView externalView =\n          _gSetupTool.getClusterManagementTool().getResourceExternalView(CLUSTER_NAME, DATABASE);\n      if (externalView == null) {\n        return false;\n      }\n      Map<String, String> stateMap = externalView.getStateMap(DATABASE + \"_0\");\n      if (stateMap == null) {\n        return false;\n      }\n      return \"MASTER\".equals(stateMap.get(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1)));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isMasterSwitchedToCorrectInstance);\n\n    _driver.start(jobQueue.build());\n\n    String namespacedJobName = TaskUtil.getNamespacedJobName(jobQueueName, \"JOB0\");\n\n    _driver.pollForJobState(jobQueueName, namespacedJobName, TaskState.IN_PROGRESS);\n\n    \r\n    boolean isTaskAssignedToMasterNode = TestHelper.verify(() -> {\n      JobContext ctx = _driver.getJobContext(namespacedJobName);\n      String participant = ctx.getAssignedParticipant(0);\n      if (participant == null) {\n        return false;\n      }\n      return (participant.equals(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1)));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isTaskAssignedToMasterNode);\n\n    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n    String currentStatePathP0 = _manager.getHelixDataAccessor().keyBuilder()\n        .taskCurrentState(instanceP0, sessionIdP0, namespacedJobName).toString();\n\n    \r\n    String instanceP1 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 1);\n    ZkClient clientP1 = (ZkClient) _participants[1].getZkClient();\n    String sessionIdP1 = ZkTestHelper.getSessionId(clientP1);\n    String currentStatePathP1 = _manager.getHelixDataAccessor().keyBuilder()\n        .taskCurrentState(instanceP1, sessionIdP1, namespacedJobName).toString();\n\n    boolean isCurrentStateCreated = TestHelper.verify(() -> {\n      ZNRecord record = _manager.getHelixDataAccessor().getBaseDataAccessor()\n          .get(currentStatePathP1, new Stat(), AccessOption.PERSISTENT);\n      if (record != null) {\n        record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP0);\n        _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP0, record,\n            AccessOption.PERSISTENT);\n        return true;\n      } else {\n        return false;\n      }\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isCurrentStateCreated);\n\n    \r\n    _driver.pollForJobState(jobQueueName, namespacedJobName, TaskState.COMPLETED);\n    Assert.assertEquals(CANCEL_COUNT.get(), 0);\n  }\n","date":"2020-12-22 07:00:24","endLine":188,"groupId":"10465","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testTargetedTaskTwoCurrentStates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ad/a5157a3bbfc968e98b4d0aa15d99a26955e332.src","preCode":"  public void testTargetedTaskTwoCurrentStates() throws Exception {\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, DATABASE, _numPartitions,\n        MASTER_SLAVE_STATE_MODEL, IdealState.RebalanceMode.SEMI_AUTO.name());\n    _gSetupTool.rebalanceResource(CLUSTER_NAME, DATABASE, 3);\n    List<String> preferenceList = new ArrayList<>();\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1));\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 0));\n    preferenceList.add(PARTICIPANT_PREFIX + \"_\" + (_startPort + 2));\n    IdealState idealState = new IdealState(DATABASE);\n    idealState.setPreferenceList(DATABASE + \"_0\", preferenceList);\n    _gSetupTool.getClusterManagementTool().updateIdealState(CLUSTER_NAME, DATABASE, idealState);\n\n    \r\n    \r\n    \r\n    \r\n    String jobQueueName = TestHelper.getTestMethodName();\n    JobConfig.Builder jobBuilder0 =\n        new JobConfig.Builder().setWorkflow(jobQueueName).setTargetResource(DATABASE)\n            .setTargetPartitionStates(Sets.newHashSet(MasterSlaveSMD.States.MASTER.name()))\n            .setCommand(MockTask.TASK_COMMAND)\n            .setJobCommandConfigMap(ImmutableMap.of(MockTask.JOB_DELAY, \"10000\"));\n\n    JobQueue.Builder jobQueue = TaskTestUtil.buildJobQueue(jobQueueName);\n    jobQueue.enqueueJob(\"JOB0\", jobBuilder0);\n\n    \r\n    boolean isMasterSwitchedToCorrectInstance = TestHelper.verify(() -> {\n      ExternalView externalView =\n          _gSetupTool.getClusterManagementTool().getResourceExternalView(CLUSTER_NAME, DATABASE);\n      if (externalView == null) {\n        return false;\n      }\n      Map<String, String> stateMap = externalView.getStateMap(DATABASE + \"_0\");\n      if (stateMap == null) {\n        return false;\n      }\n      return \"MASTER\".equals(stateMap.get(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1)));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isMasterSwitchedToCorrectInstance);\n\n    _driver.start(jobQueue.build());\n\n    String namespacedJobName = TaskUtil.getNamespacedJobName(jobQueueName, \"JOB0\");\n\n    _driver.pollForJobState(jobQueueName, namespacedJobName, TaskState.IN_PROGRESS);\n\n    \r\n    boolean isTaskAssignedToMasterNode = TestHelper.verify(() -> {\n      JobContext ctx = _driver.getJobContext(namespacedJobName);\n      String participant = ctx.getAssignedParticipant(0);\n      if (participant == null) {\n        return false;\n      }\n      return (participant.equals(PARTICIPANT_PREFIX + \"_\" + (_startPort + 1)));\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isTaskAssignedToMasterNode);\n\n    String instanceP0 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 0);\n    ZkClient clientP0 = (ZkClient) _participants[0].getZkClient();\n    String sessionIdP0 = ZkTestHelper.getSessionId(clientP0);\n    String currentStatePathP0 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP0 + \"/CURRENTSTATES/\"\n        + sessionIdP0 + \"/\" + namespacedJobName;\n\n    \r\n    String instanceP1 = PARTICIPANT_PREFIX + \"_\" + (_startPort + 1);\n    ZkClient clientP1 = (ZkClient) _participants[1].getZkClient();\n    String sessionIdP1 = ZkTestHelper.getSessionId(clientP1);\n    String currentStatePathP1 = \"/\" + CLUSTER_NAME + \"/INSTANCES/\" + instanceP1 + \"/CURRENTSTATES/\"\n        + sessionIdP1 + \"/\" + namespacedJobName;\n\n    boolean isCurrentStateCreated = TestHelper.verify(() -> {\n      ZNRecord record = _manager.getHelixDataAccessor().getBaseDataAccessor()\n          .get(currentStatePathP1, new Stat(), AccessOption.PERSISTENT);\n      if (record != null) {\n        record.setSimpleField(CurrentState.CurrentStateProperty.SESSION_ID.name(), sessionIdP0);\n        _manager.getHelixDataAccessor().getBaseDataAccessor().set(currentStatePathP0, record,\n            AccessOption.PERSISTENT);\n        return true;\n      } else {\n        return false;\n      }\n    }, TestHelper.WAIT_DURATION);\n    Assert.assertTrue(isCurrentStateCreated);\n\n    \r\n    _driver.pollForJobState(jobQueueName, namespacedJobName, TaskState.COMPLETED);\n    Assert.assertEquals(CANCEL_COUNT.get(), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskSchedulingTwoCurrentStates.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"361e18da4152c0146daa9d9dc7929f1f2bdcd9dc","commitMessage":"@@@Participant-side Task Current State Migration (#1584)\n\nThe second part of the task current state migration. \nAll changes made in this commit are on the participant side.","date":"2020-12-22 07:00:24","modifiedFileCount":"10","status":"M","submitter":"Neal Sun"}]
