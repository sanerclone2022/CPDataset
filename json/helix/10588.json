[{"authorTime":"2013-04-06 08:30:58","codes":[{"authorDate":"2013-04-06 08:30:58","commitOrder":1,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0)\n      {\n        participants[i] =\n            new MockParticipant(clusterName,\n                                instanceName,\n                                ZK_ADDR,\n                                new ErrTransition(errTransitions));\n      }\n      else\n      {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap =\n        new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName,\n                                                                                 errStateMap));\n    Assert.assertTrue(result);\n    \n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[]{\"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"});\n\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName,\n                                                                                 errStateMap));\n    Assert.assertTrue(result);\n    \n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n    \n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2013-04-06 08:30:58","endLine":237,"groupId":"1183","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a0/580dd1f453e73c4b5a3deda9ac4271f87902b0.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            8, \r\n                            n, \r\n                            3, \r\n                            \"MasterSlave\",\n                            true); \r\n\n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0)\n      {\n        participants[i] =\n            new MockParticipant(clusterName,\n                                instanceName,\n                                ZK_ADDR,\n                                new ErrTransition(errTransitions));\n      }\n      else\n      {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap =\n        new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName,\n                                                                                 errStateMap));\n    Assert.assertTrue(result);\n    \n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[]{\"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"});\n\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName,\n                                                                                 errStateMap));\n    Assert.assertTrue(result);\n    \n    ZKHelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n    \n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"},{"authorDate":"2013-04-06 08:30:58","commitOrder":1,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            2, \r\n                            n, \r\n                            2, \r\n                            \"MasterSlave\",\n                            false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n    \n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, \n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuiler = accessor.keyBuilder();\n    accessor.setProperty(keyBuiler.idealStates(\"TestDB0\"), isBuilder.build());\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0)\n      {\n        participants[i] =\n            new MockParticipant(clusterName,\n                                instanceName,\n                                ZK_ADDR,\n                                new ErrTransition(errTransitions));\n      }\n      else\n      {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap =\n        new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName,\n                                                                                 errStateMap));\n    Assert.assertTrue(result);\n    \n    \r\n    ClusterSetup.processCommandLineArgs(new String[]{\"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"});\n\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result, \"Should be empty exeternal-view\");\n    \n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","date":"2013-04-06 08:30:58","endLine":328,"groupId":"1184","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a0/580dd1f453e73c4b5a3deda9ac4271f87902b0.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception\n  {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n                            \"localhost\", \r\n                            \"TestDB\", \r\n                            1, \r\n                            2, \r\n                            n, \r\n                            2, \r\n                            \"MasterSlave\",\n                            false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n    \n    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName, \n        new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuiler = accessor.keyBuilder();\n    accessor.setProperty(keyBuiler.idealStates(\"TestDB0\"), isBuilder.build());\n    \n    \r\n    ClusterController controller =\n        new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n    \n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++)\n    {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0)\n      {\n        participants[i] =\n            new MockParticipant(clusterName,\n                                instanceName,\n                                ZK_ADDR,\n                                new ErrTransition(errTransitions));\n      }\n      else\n      {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap =\n        new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName,\n                                                                                 errStateMap));\n    Assert.assertTrue(result);\n    \n    \r\n    ClusterSetup.processCommandLineArgs(new String[]{\"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"});\n\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n                                                                                 clusterName));\n    Assert.assertTrue(result, \"Should be empty exeternal-view\");\n    \n    System.out.println(\"END \" + clusterName + \" at \"\n        + new Date(System.currentTimeMillis())); \n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"B"}],"commitId":"f3e32551094e4edfd73364e3c79e3aba980a8208","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/incubator-helix\n","date":"2013-04-06 08:30:58","modifiedFileCount":"129","status":"B","submitter":"Swaroop Jagadish"},{"authorTime":"2013-10-25 09:35:16","codes":[{"authorDate":"2013-10-25 09:35:16","commitOrder":2,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":198,"groupId":"7246","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5b/54fadb904519d9d7629c729d2577786903e5cf.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipant(clusterName, instanceName, ZK_ADDR, new ErrTransition(\n                errTransitions));\n      } else {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2013-10-25 09:35:16","commitOrder":2,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuiler = accessor.keyBuilder();\n    accessor.setProperty(keyBuiler.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result, \"Should be empty exeternal-view\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2013-10-25 09:35:16","endLine":283,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/5b/54fadb904519d9d7629c729d2577786903e5cf.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipant[] participants = new MockParticipant[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuiler = accessor.keyBuilder();\n    accessor.setProperty(keyBuiler.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterController controller = new ClusterController(clusterName, \"controller_0\", ZK_ADDR);\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] =\n            new MockParticipant(clusterName, instanceName, ZK_ADDR, new ErrTransition(\n                errTransitions));\n      } else {\n        participants[i] = new MockParticipant(clusterName, instanceName, ZK_ADDR, null);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result, \"Should be empty exeternal-view\");\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"5c7721970eef78e2d13d35b4934b07cb11a03cd9","commitMessage":"@@@Merge branch 'helix-0.6.2-release' of https://git-wip-us.apache.org/repos/asf/incubator-helix into helix-0.6.2-release\n","date":"2013-10-25 09:35:16","modifiedFileCount":"105","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2014-05-23 02:08:01","codes":[{"authorDate":"2014-05-23 02:08:01","commitOrder":3,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-05-23 02:08:01","endLine":303,"groupId":"7246","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f7/3ef2978180c673061bd47998bc4e2804087f36.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2014-05-23 02:08:01","commitOrder":3,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result, \"Should be empty exeternal-view\");\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2014-05-23 02:08:01","endLine":390,"groupId":"361","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f7/3ef2978180c673061bd47998bc4e2804087f36.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    Builder keyBuiler = accessor.keyBuilder();\n    accessor.setProperty(keyBuiler.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result, \"Should be empty exeternal-view\");\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"}],"commitId":"4ff7e3888561b46ca6d9c590bdf425b0d2e0716b","commitMessage":"@@@Merge branch 'helix-0.6.x' of https://git-wip-us.apache.org/repos/asf/helix into helix-0.6.x\n","date":"2014-05-23 02:08:01","modifiedFileCount":"57","status":"M","submitter":"Kanak Biscuitwala"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":4,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verify());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":297,"groupId":"7152","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/eb/86fc074166a7d94bfc1720c9737eee70ed82b2.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":4,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify(), \"Should be empty exeternal-view\");\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":384,"groupId":"361","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/eb/86fc074166a7d94bfc1720c9737eee70ed82b2.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n    boolean result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName, errStateMap));\n    Assert.assertTrue(result);\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    result =\n        ClusterStateVerifier.verifyByZkCallback(new BestPossAndExtViewZkVerifier(ZK_ADDR,\n            clusterName));\n    Assert.assertTrue(result, \"Should be empty exeternal-view\");\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 09:05:09","commitOrder":5,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verify());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(2000);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 10:17:12","endLine":298,"groupId":"7152","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d7/894d97010e82984a13aa1fb0909f05c40d4aac.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verify());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":5,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify(), \"Should be empty exeternal-view\");\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 08:48:26","endLine":384,"groupId":"361","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/eb/86fc074166a7d94bfc1720c9737eee70ed82b2.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify(), \"Should be empty exeternal-view\");\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"N"}],"commitId":"fa587f0bfcb229f773eda764c8d2e3a27c814c96","commitMessage":"@@@Fix conflicts and make test passed\n","date":"2017-11-08 10:17:12","modifiedFileCount":"67","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-04-21 07:11:27","codes":[{"authorDate":"2017-11-08 09:05:09","commitOrder":6,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verify());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(2000);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2017-11-08 10:17:12","endLine":298,"groupId":"7152","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d7/894d97010e82984a13aa1fb0909f05c40d4aac.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verify());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(2000);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"},{"authorDate":"2018-04-21 07:11:27","commitOrder":6,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-04-25 03:45:43","endLine":388,"groupId":"361","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/31/42b80741aebfe4c8b623a5748ae8264bb6d5b6.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify(), \"Should be empty exeternal-view\");\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"d2fb22d1f3a3db602b27cba7ed8d814cb931622e","commitMessage":"@@@Fix a few of unstable integration tests.\n","date":"2018-04-25 03:45:43","modifiedFileCount":"18","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2018-06-13 04:57:09","commitOrder":7,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(2000);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":299,"groupId":"0","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/3954308eac0f9113723e6dc2a7745b8b10a105.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verify());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(2000);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":7,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":387,"groupId":"361","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/3954308eac0f9113723e6dc2a7745b8b10a105.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    HelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verify());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verify(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"4609d94488f4e97e6bf1c233281ca39433c4f72e","commitMessage":"@@@Fix a couple of tests.  and reduce the total test times.\n","date":"2018-07-14 06:55:35","modifiedFileCount":"272","status":"M","submitter":"Lei Xia"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2019-04-04 05:34:29","commitOrder":8,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:20","endLine":298,"groupId":"3715","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/54/515afb2924ad19cd54548f96833400580658d7.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(2000);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":8,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":387,"groupId":"361","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/3954308eac0f9113723e6dc2a7745b8b10a105.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"N"}],"commitId":"9fcfa81f3975f599c1ad993e34e86eef31609d82","commitMessage":"@@@TEST: Fix UserContentStore related tests in helix-rest\n\nThe behavior changed such that if the client-side code does not find the UserContent ZNode.  it creates one instead of throwing an NPE. This fixes the tests so that it adapts to the new behavior. This behavior should be reverted eventually because UserContent ZNode should be created only by the Controller.\n\nRB=1618685\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:20","modifiedFileCount":"4","status":"M","submitter":"Hunter Lee"},{"authorTime":"2018-06-13 04:57:09","codes":[{"authorDate":"2019-04-04 08:12:56","commitOrder":9,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(100L);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:20","endLine":299,"groupId":"3715","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7d/4972d140c1bb4718ad43b9fa13b0d16165db16.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2018-06-13 04:57:09","commitOrder":9,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2018-07-14 06:55:35","endLine":387,"groupId":"361","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/3954308eac0f9113723e6dc2a7745b8b10a105.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"N"}],"commitId":"4e5884d9e88ad55eeecbeb2db9830cef0539e082","commitMessage":"@@@Fix faulty logic in BestPossibleExternalViewVerifier\n\nremoveEntryWithIgnoredStates() was not really doing what it was supposed to do. This diff fixes this.\nAlso.  a small delay added to make TestDrop more stable.\n\nRB=1619153\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:20","modifiedFileCount":"2","status":"M","submitter":"Hunter Lee"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":10,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkAddr(ZK_ADDR).setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100L);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(250L);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs =\n        accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n            participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(\n          accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":304,"groupId":"293","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7d/c29c51e200c9dbdb21de747363ed81c772fe80.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(100L);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs = accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n        participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":10,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkAddr(ZK_ADDR).setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2019-05-25 09:19:21","endLine":391,"groupId":"295","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7d/c29c51e200c9dbdb21de747363ed81c772fe80.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<String, Set<String>>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<String, Map<String, String>>();\n    errStateMap.put(\"TestDB0\", new HashMap<String, String>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR)\n            .setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier =\n        new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-08-06 10:47:55","codes":[{"authorDate":"2020-08-06 10:47:55","commitOrder":11,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100L);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(250L);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs =\n        accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n            participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(\n          accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-08-06 10:47:55","endLine":311,"groupId":"5775","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/91/3b79fccdf3eb62de1c709eb6266bc0d86b9e4a.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkAddr(ZK_ADDR).setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100L);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(250L);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs =\n        accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n            participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(\n          accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"},{"authorDate":"2020-08-06 10:47:55","commitOrder":11,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-08-06 10:47:55","endLine":398,"groupId":"295","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/91/3b79fccdf3eb62de1c709eb6266bc0d86b9e4a.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkAddr(ZK_ADDR).setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"56cf1259add5d00bb13fefb018a5de9679a1c6a7","commitMessage":"@@@Fix ZkHelixClusterVerifier related resource leakage (#1185)\n\nZkHelixClusterVerifier and its subclass built with ZK addres would\ncreate an internal ZkClient. Without properly closing the ZkClient\nor using global ZkClient in the test base. There would be four\nthreads and one ZooKeeper client object leaked. The leaked threads\nwould be in thousands and thus be one of the main contributor\npreventing the unit test from finishing. This pull request addresses\nthis issue.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-08-06 10:47:55","modifiedFileCount":"30","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2020-10-08 07:58:42","commitOrder":12,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(250L);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs =\n        accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n            participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(\n          accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-08 07:58:42","endLine":318,"groupId":"293","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/162d37ba75515cc98274619d05342267c3cbe4.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    Thread.sleep(100L);\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(250L);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs =\n        accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n            participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(\n          accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2020-10-08 07:58:42","commitOrder":12,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-08 07:58:42","endLine":409,"groupId":"295","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/162d37ba75515cc98274619d05342267c3cbe4.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap).build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2021-05-05 06:17:46","commitOrder":13,"curCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n\n    \r\n    Thread.sleep(250L);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs =\n        accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n            participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(\n          accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2021-05-05 06:17:46","endLine":314,"groupId":"10588","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"testDropErrorPartitionFailedAutoIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a7/59f2a97cf7d742c1cdbd699ad7d5d5d6d2b16c.src","preCode":"  public void testDropErrorPartitionFailedAutoIS() throws Exception {\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 5;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        8, \r\n        n, \r\n        3, \r\n        \"MasterSlave\", true); \r\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_4\"));\n    errTransitions.put(\"ERROR-DROPPED\", TestHelper.setOf(\"TestDB0_4\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_4\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    ZKHelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    InstanceConfig config = accessor.getProperty(keyBuilder.instanceConfig(\"localhost_12918\"));\n    List<String> disabledPartitions = config.getDisabledPartitions();\n    \r\n    Assert.assertEquals(disabledPartitions.size(), 1, \"TestDB0_4 should be disabled\");\n    Assert.assertEquals(disabledPartitions.get(0), \"TestDB0_4\");\n\n    \r\n    Thread.sleep(250L);\n    ExternalView ev = accessor.getProperty(keyBuilder.externalView(\"TestDB0\"));\n    Set<String> partitions = ev.getPartitionSet();\n    Assert.assertEquals(partitions.size(), 1, \"Should have TestDB0_4->localhost_12918->ERROR\");\n    String errPartition = partitions.iterator().next();\n    Assert.assertEquals(errPartition, \"TestDB0_4\");\n    Map<String, String> stateMap = ev.getStateMap(errPartition);\n    Assert.assertEquals(stateMap.size(), 1);\n    Assert.assertEquals(stateMap.keySet().iterator().next(), \"localhost_12918\");\n    Assert.assertEquals(stateMap.get(\"localhost_12918\"), HelixDefinedState.ERROR.name());\n\n    \r\n    CurrentState cs =\n        accessor.getProperty(keyBuilder.currentState(participants[0].getInstanceName(),\n            participants[0].getSessionId(), \"TestDB0\"));\n    Map<String, String> partitionStateMap = cs.getPartitionStateMap();\n    Assert.assertEquals(partitionStateMap.size(), 1);\n    Assert.assertEquals(partitionStateMap.keySet().iterator().next(), \"TestDB0_4\");\n    Assert.assertEquals(partitionStateMap.get(\"TestDB0_4\"), HelixDefinedState.ERROR.name());\n\n    \r\n    for (int i = 1; i < n; i++) {\n      String instanceName = participants[i].getInstanceName();\n      String sessionId = participants[i].getSessionId();\n      Assert.assertNull(\n          accessor.getProperty(keyBuilder.currentState(instanceName, sessionId, \"TestDB0\")));\n    }\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2020-10-08 07:58:42","commitOrder":13,"curCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","date":"2020-10-08 07:58:42","endLine":409,"groupId":"10588","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropErrorPartitionCustomIS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/aa/162d37ba75515cc98274619d05342267c3cbe4.src","preCode":"  public void testDropErrorPartitionCustomIS() throws Exception {\n    \r\n    String className = TestHelper.getTestClassName();\n    String methodName = TestHelper.getTestMethodName();\n    String clusterName = className + \"_\" + methodName;\n    final int n = 2;\n\n    System.out.println(\"START \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n\n    MockParticipantManager[] participants = new MockParticipantManager[n];\n\n    TestHelper.setupCluster(clusterName, ZK_ADDR, 12918, \r\n        \"localhost\", \r\n        \"TestDB\", \r\n        1, \r\n        2, \r\n        n, \r\n        2, \r\n        \"MasterSlave\", false); \r\n\n    \r\n    CustomModeISBuilder isBuilder = new CustomModeISBuilder(\"TestDB0\");\n    isBuilder.setNumPartitions(2);\n    isBuilder.setNumReplica(2);\n    isBuilder.setStateModel(\"MasterSlave\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12918\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_0\", \"localhost_12919\", \"SLAVE\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12919\", \"MASTER\");\n    isBuilder.assignInstanceAndState(\"TestDB0_1\", \"localhost_12918\", \"SLAVE\");\n\n    HelixDataAccessor accessor =\n        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<>(_gZkClient));\n    PropertyKey.Builder keyBuilder = accessor.keyBuilder();\n    accessor.setProperty(keyBuilder.idealStates(\"TestDB0\"), isBuilder.build());\n\n    \r\n    ClusterControllerManager controller =\n        new ClusterControllerManager(ZK_ADDR, clusterName, \"controller_0\");\n    controller.syncStart();\n\n    \r\n    Map<String, Set<String>> errTransitions = new HashMap<>();\n    errTransitions.put(\"SLAVE-MASTER\", TestHelper.setOf(\"TestDB0_0\"));\n\n    for (int i = 0; i < n; i++) {\n      String instanceName = \"localhost_\" + (12918 + i);\n\n      if (i == 0) {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n        participants[i].setTransition(new ErrTransition(errTransitions));\n      } else {\n        participants[i] = new MockParticipantManager(ZK_ADDR, clusterName, instanceName);\n      }\n      participants[i].syncStart();\n    }\n\n    Map<String, Map<String, String>> errStateMap = new HashMap<>();\n    errStateMap.put(\"TestDB0\", new HashMap<>());\n    errStateMap.get(\"TestDB0\").put(\"TestDB0_0\", \"localhost_12918\");\n\n    ZkHelixClusterVerifier verifier = new BestPossibleExternalViewVerifier.Builder(clusterName)\n        .setZkClient(_gZkClient).setErrStates(errStateMap)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling());\n\n    \r\n    ClusterSetup.processCommandLineArgs(new String[] {\n        \"--zkSvr\", ZK_ADDR, \"--dropResource\", clusterName, \"TestDB0\"\n    });\n\n    \r\n    verifier = new BestPossibleExternalViewVerifier.Builder(clusterName).setZkClient(_gZkClient)\n        .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n        .build();\n    Assert.assertTrue(verifier.verifyByPolling(), \"Should be empty exeternal-view\");\n    Thread.sleep(400);\n\n    assertEmptyCSandEV(clusterName, \"TestDB0\", participants);\n\n    \r\n    controller.syncStop();\n    for (int i = 0; i < n; i++) {\n      participants[i].syncStop();\n    }\n\n    deleteCluster(clusterName);\n    System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/TestDrop.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"N"}],"commitId":"bee860a8b8d2a9594e15b8e37de37fbb2e22b612","commitMessage":"@@@Remove the logic that disables the partitions which fails to be state-transited from the ERROR state. (#1721)\n\nThis logic of disabling an ERROR partition with additional failure transition causes confusion. When the partitions are disabled unexpected.  the system admin has to double-check and manually enable the partitions.\nIn reality.  if the partition fails to finish a state transition from the ERROR state.  it will remain in the ERROR state. And disabling it in addition is not desired. Otherwise.  if it is eventually reset successfully.  it should be good to continue serving. Sanity check shall be done in the ERROR->OFFLINE state transition process.\n\n[Behavior Changed] This PR changes the existing behavior.","date":"2021-05-05 06:17:46","modifiedFileCount":"2","status":"M","submitter":"Jiajun Wang"}]
