[{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":1,"curCode":"  public void testUpdateOnNotification() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    \r\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n\n    accessor.clearReadCounters();\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n\n    accessor.clearReadCounters();\n    cache.notifyDataChange(HelixConstants.ChangeType.LIVE_INSTANCE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n  }\n","date":"2019-02-26 09:36:00","endLine":83,"groupId":"4286","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateOnNotification","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7c/e0a5198b312d73fd35fabc1294a088d5248449.src","preCode":"  public void testUpdateOnNotification() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    \r\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n\n    accessor.clearReadCounters();\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n\n    accessor.clearReadCounters();\n    cache.notifyDataChange(HelixConstants.ChangeType.LIVE_INSTANCE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestControllerDataProviderSelectiveUpdate.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2019-02-26 09:36:00","commitOrder":1,"curCode":"  public void testSelectiveUpdates() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n\n    \r\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_1\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_1\", _replica);\n\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    accessor.clearReadCounters();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_2\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_2\", _replica);\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_3\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_3\", _replica);\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 2);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    TaskDriver driver = new TaskDriver(_manager);\n    Workflow.Builder workflow = WorkflowGenerator.generateSingleJobWorkflowBuilder(\"Job\",\n        new JobConfig.Builder().setCommand(\"ReIndex\").setTargetResource(\"TestDB_2\"));\n    driver.start(workflow.build());\n\n    Thread.sleep(100);\n    accessor.clearReadCounters();\n\n    cache.notifyDataChange(HelixConstants.ChangeType.RESOURCE_CONFIG);\n    cache.refresh(accessor);\n    \r\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 3);\n  }\n","date":"2019-02-26 09:36:00","endLine":153,"groupId":"4287","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectiveUpdates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7c/e0a5198b312d73fd35fabc1294a088d5248449.src","preCode":"  public void testSelectiveUpdates() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n\n    \r\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_1\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_1\", _replica);\n\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    accessor.clearReadCounters();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_2\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_2\", _replica);\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_3\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_3\", _replica);\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 2);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    TaskDriver driver = new TaskDriver(_manager);\n    Workflow.Builder workflow = WorkflowGenerator.generateSingleJobWorkflowBuilder(\"Job\",\n        new JobConfig.Builder().setCommand(\"ReIndex\").setTargetResource(\"TestDB_2\"));\n    driver.start(workflow.build());\n\n    Thread.sleep(100);\n    accessor.clearReadCounters();\n\n    cache.notifyDataChange(HelixConstants.ChangeType.RESOURCE_CONFIG);\n    cache.refresh(accessor);\n    \r\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 3);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestControllerDataProviderSelectiveUpdate.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"B","submitter":"Harry Zhang"},{"authorTime":"2019-08-07 02:32:16","codes":[{"authorDate":"2019-08-07 02:32:16","commitOrder":2,"curCode":"  public void testUpdateOnNotification() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n\n    accessor.clearReadCounters();\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n\n    accessor.clearReadCounters();\n    cache.notifyDataChange(HelixConstants.ChangeType.LIVE_INSTANCE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n  }\n","date":"2019-08-07 05:16:50","endLine":82,"groupId":"4286","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateOnNotification","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a3/4c064f2acac87534b8167854b0d2ecd822a512.src","preCode":"  public void testUpdateOnNotification() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    \r\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n\n    accessor.clearReadCounters();\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n\n    accessor.clearReadCounters();\n    cache.notifyDataChange(HelixConstants.ChangeType.LIVE_INSTANCE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestControllerDataProviderSelectiveUpdate.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2019-08-07 02:32:16","commitOrder":2,"curCode":"  public void testSelectiveUpdates() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n\n    \r\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_1\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_1\", _replica);\n\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    accessor.clearReadCounters();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_2\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_2\", _replica);\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_3\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_3\", _replica);\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 2);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    TaskDriver driver = new TaskDriver(_manager);\n    Workflow.Builder workflow = WorkflowGenerator.generateSingleJobWorkflowBuilder(\"Job\",\n        new JobConfig.Builder().setCommand(\"ReIndex\").setTargetResource(\"TestDB_2\"));\n    driver.start(workflow.build());\n\n    Thread.sleep(100);\n    accessor.clearReadCounters();\n\n    cache.notifyDataChange(HelixConstants.ChangeType.RESOURCE_CONFIG);\n    cache.refresh(accessor);\n    \r\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 2);\n  }\n","date":"2019-08-07 05:16:50","endLine":152,"groupId":"4287","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectiveUpdates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/a3/4c064f2acac87534b8167854b0d2ecd822a512.src","preCode":"  public void testSelectiveUpdates() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 1);\n\n    \r\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_1\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_1\", _replica);\n\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    accessor.clearReadCounters();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_2\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_2\", _replica);\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_3\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_3\", _replica);\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 2);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    TaskDriver driver = new TaskDriver(_manager);\n    Workflow.Builder workflow = WorkflowGenerator.generateSingleJobWorkflowBuilder(\"Job\",\n        new JobConfig.Builder().setCommand(\"ReIndex\").setTargetResource(\"TestDB_2\"));\n    driver.start(workflow.build());\n\n    Thread.sleep(100);\n    accessor.clearReadCounters();\n\n    cache.notifyDataChange(HelixConstants.ChangeType.RESOURCE_CONFIG);\n    cache.refresh(accessor);\n    \r\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 3);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestControllerDataProviderSelectiveUpdate.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"095f6cf34307f78e530498880d82bd1294c25afb","commitMessage":"@@@Read ClusterConfig from ZK selectively\n\nPreviously.  ClusterConfig would be read from ZK every pipeline run. This PR makes it a selective read and also add to the set of all changed types so that cluster change detector could more easily tell whether ClusterConfig changed without having to store two copies of ClusterConfig objects.\n","date":"2019-08-07 05:16:50","modifiedFileCount":"2","status":"M","submitter":"Hunter Lee"},{"authorTime":"2020-03-18 14:08:20","codes":[{"authorDate":"2020-03-18 14:08:20","commitOrder":3,"curCode":"  public void testUpdateOnNotification() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 2);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n\n    accessor.clearReadCounters();\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n\n    accessor.clearReadCounters();\n    cache.notifyDataChange(HelixConstants.ChangeType.LIVE_INSTANCE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n  }\n","date":"2020-04-24 03:27:36","endLine":82,"groupId":"10632","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateOnNotification","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/87/b5904a57755e40d6005357a6acd9335867e459.src","preCode":"  public void testUpdateOnNotification() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n\n    accessor.clearReadCounters();\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n\n    accessor.clearReadCounters();\n    cache.notifyDataChange(HelixConstants.ChangeType.LIVE_INSTANCE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestControllerDataProviderSelectiveUpdate.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2020-03-18 14:08:20","commitOrder":3,"curCode":"  public void testSelectiveUpdates() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 2);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n\n    \r\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_1\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_1\", _replica);\n\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    accessor.clearReadCounters();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_2\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_2\", _replica);\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_3\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_3\", _replica);\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 2);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    TaskDriver driver = new TaskDriver(_manager);\n    Workflow.Builder workflow = WorkflowGenerator.generateSingleJobWorkflowBuilder(\"Job\",\n        new JobConfig.Builder().setCommand(\"ReIndex\").setTargetResource(\"TestDB_2\"));\n    driver.start(workflow.build());\n\n    Thread.sleep(100);\n    accessor.clearReadCounters();\n\n    cache.notifyDataChange(HelixConstants.ChangeType.RESOURCE_CONFIG);\n    cache.refresh(accessor);\n    \r\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 2);\n  }\n","date":"2020-04-24 03:27:36","endLine":152,"groupId":"10632","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectiveUpdates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/87/b5904a57755e40d6005357a6acd9335867e459.src","preCode":"  public void testSelectiveUpdates() throws Exception {\n    MockZkHelixDataAccessor accessor =\n        new MockZkHelixDataAccessor(CLUSTER_NAME, new ZkBaseDataAccessor<ZNRecord>(_gZkClient));\n\n    ResourceControllerDataProvider cache =\n        new ResourceControllerDataProvider(\"CLUSTER_\" + TestHelper.getTestClassName());\n    cache.refresh(accessor);\n\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), NODE_NR + 1);\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.LIVEINSTANCES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), 0);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 0);\n\n    \r\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_1\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_1\", _replica);\n\n    Thread.sleep(100);\n    Assert.assertTrue(_clusterVerifier.verifyByPolling());\n\n    accessor.clearReadCounters();\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CURRENTSTATES), NODE_NR);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 1);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    accessor.clearReadCounters();\n\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_2\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_2\", _replica);\n    _gSetupTool.addResourceToCluster(CLUSTER_NAME, \"TestDB_3\", _PARTITIONS, STATE_MODEL);\n    _gSetupTool.rebalanceStorageCluster(CLUSTER_NAME, \"TestDB_3\", _replica);\n\n    \r\n    cache.notifyDataChange(HelixConstants.ChangeType.IDEAL_STATE);\n    cache.refresh(accessor);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.IDEALSTATES), 2);\n    Assert.assertEquals(accessor.getReadCount(PropertyType.EXTERNALVIEW), 0);\n\n    \r\n    TaskDriver driver = new TaskDriver(_manager);\n    Workflow.Builder workflow = WorkflowGenerator.generateSingleJobWorkflowBuilder(\"Job\",\n        new JobConfig.Builder().setCommand(\"ReIndex\").setTargetResource(\"TestDB_2\"));\n    driver.start(workflow.build());\n\n    Thread.sleep(100);\n    accessor.clearReadCounters();\n\n    cache.notifyDataChange(HelixConstants.ChangeType.RESOURCE_CONFIG);\n    cache.refresh(accessor);\n    \r\n    Assert.assertEquals(accessor.getReadCount(PropertyType.CONFIGS), 2);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/controller/TestControllerDataProviderSelectiveUpdate.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"cacbd85b0ef05f57084fa65d498858732b06d7ff","commitMessage":"@@@Add two stages for customized state view aggregation. (#888)\n\n1. One stage is the computation stage for customized state. It takes the Zookeeper data of customized states and converts them to the formatted output used by the other stage.\n2. The other stage is customized view aggregation stage. It will take the output from the customized state computation stage.  and output the customized view to Zookeeper.\n3. The two stages together compute the customized view from the customized states.\n4. Unit tests are added to verify the correctness of the two stages.","date":"2020-04-24 03:27:36","modifiedFileCount":"12","status":"M","submitter":"zhangmeng916"}]
