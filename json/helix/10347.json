[{"authorTime":"2012-10-25 07:14:36","codes":[{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testEspressoStorageClusterIdealState() throws Exception\n  {\n    List<String> instanceNames = new ArrayList<String>();\n    for(int i = 0;i < 5; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    int partitions = 8, replicas = 0;\n    Map<String, Object> result0 = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n    Verify(result0, partitions,replicas);\n\n    partitions = 8192;\n    replicas = 3;\n\n    instanceNames.clear();\n    for(int i = 0;i < 20; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    Map<String, Object> resultOriginal = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    Verify(resultOriginal, partitions,replicas);\n    printStat(resultOriginal);\n\n    Map<String, Object> result1 = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    List<String> instanceNames2 = new ArrayList<String>();\n    for(int i = 30;i < 35; i++)\n    {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n\n    IdealStateCalculatorForStorageNode.calculateNextIdealState(instanceNames2, result1);\n\n    List<String> instanceNames3 = new ArrayList<String>();\n    for(int i = 35;i < 40; i++)\n    {\n      instanceNames3.add(\"localhost:123\" + i);\n    }\n\n    IdealStateCalculatorForStorageNode.calculateNextIdealState(instanceNames3, result1);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    Verify(result1, partitions,replicas);\n    double[] result = compareResult(resultOriginal, result1);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n\n  }\n","date":"2012-10-25 07:14:36","endLine":88,"groupId":"1614","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEspressoStorageClusterIdealState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/03/82f4e62c427253eb55e7b0c2340925cc293d38.src","preCode":"  public void testEspressoStorageClusterIdealState() throws Exception\n  {\n    List<String> instanceNames = new ArrayList<String>();\n    for(int i = 0;i < 5; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    int partitions = 8, replicas = 0;\n    Map<String, Object> result0 = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n    Verify(result0, partitions,replicas);\n\n    partitions = 8192;\n    replicas = 3;\n\n    instanceNames.clear();\n    for(int i = 0;i < 20; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    Map<String, Object> resultOriginal = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    Verify(resultOriginal, partitions,replicas);\n    printStat(resultOriginal);\n\n    Map<String, Object> result1 = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    List<String> instanceNames2 = new ArrayList<String>();\n    for(int i = 30;i < 35; i++)\n    {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n\n    IdealStateCalculatorForStorageNode.calculateNextIdealState(instanceNames2, result1);\n\n    List<String> instanceNames3 = new ArrayList<String>();\n    for(int i = 35;i < 40; i++)\n    {\n      instanceNames3.add(\"localhost:123\" + i);\n    }\n\n    IdealStateCalculatorForStorageNode.calculateNextIdealState(instanceNames3, result1);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    Verify(result1, partitions,replicas);\n    double[] result = compareResult(resultOriginal, result1);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestEspressoStorageClusterIdealState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2012-10-25 07:14:36","commitOrder":1,"curCode":"  public void testRebalance2()\n  {\n    int partitions = 1256, replicas = 3;\n    List<String> instanceNames = new ArrayList<String>();\n    \n    for(int i = 0;i < 10; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    \n    Map<String, Object> resultOriginal = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n    \n    ZNRecord idealState1 = IdealStateCalculatorForStorageNode.convertToZNRecord(resultOriginal, \"TestDB\", \"MASTER\", \"SLAVE\");\n    \n    Map<String, Object> result1 = ClusterSetup.buildInternalIdealState(new IdealState(idealState1));\n    \n    List<String> instanceNames2 = new ArrayList<String>();\n    for(int i = 30;i < 35; i++)\n    {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n    \n    Map<String, Object> result2 = IdealStateCalculatorForStorageNode.calculateNextIdealState(instanceNames2, result1);\n    \n    Verify(resultOriginal, partitions,replicas);\n    Verify(result2, partitions,replicas);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    double[] result = compareResult(resultOriginal, result2);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n  }\n","date":"2012-10-25 07:14:36","endLine":123,"groupId":"1615","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRebalance2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/03/82f4e62c427253eb55e7b0c2340925cc293d38.src","preCode":"  public void testRebalance2()\n  {\n    int partitions = 1256, replicas = 3;\n    List<String> instanceNames = new ArrayList<String>();\n    \n    for(int i = 0;i < 10; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    \n    Map<String, Object> resultOriginal = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n    \n    ZNRecord idealState1 = IdealStateCalculatorForStorageNode.convertToZNRecord(resultOriginal, \"TestDB\", \"MASTER\", \"SLAVE\");\n    \n    Map<String, Object> result1 = ClusterSetup.buildInternalIdealState(new IdealState(idealState1));\n    \n    List<String> instanceNames2 = new ArrayList<String>();\n    for(int i = 30;i < 35; i++)\n    {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n    \n    Map<String, Object> result2 = IdealStateCalculatorForStorageNode.calculateNextIdealState(instanceNames2, result1);\n    \n    Verify(resultOriginal, partitions,replicas);\n    Verify(result2, partitions,replicas);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    double[] result = compareResult(resultOriginal, result2);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestEspressoStorageClusterIdealState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"}],"commitId":"437eb42eac35e181ae6793dd17390df33565e4dd","commitMessage":"@@@Refactoring the package names and removing jsql parser\n","date":"2012-10-25 07:14:36","modifiedFileCount":"0","status":"B","submitter":"Kishore Gopalakrishna"},{"authorTime":"2013-01-03 14:42:49","codes":[{"authorDate":"2013-01-03 14:42:49","commitOrder":2,"curCode":"  public void testEspressoStorageClusterIdealState() throws Exception\n  {\n    List<String> instanceNames = new ArrayList<String>();\n    for(int i = 0;i < 5; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    int partitions = 8, replicas = 0;\n    Map<String, Object> result0 = DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n    Verify(result0, partitions,replicas);\n\n    partitions = 8192;\n    replicas = 3;\n\n    instanceNames.clear();\n    for(int i = 0;i < 20; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    Map<String, Object> resultOriginal = DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    Verify(resultOriginal, partitions,replicas);\n    printStat(resultOriginal);\n\n    Map<String, Object> result1 = DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    List<String> instanceNames2 = new ArrayList<String>();\n    for(int i = 30;i < 35; i++)\n    {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n\n    DefaultIdealStateCalculator.calculateNextIdealState(instanceNames2, result1);\n\n    List<String> instanceNames3 = new ArrayList<String>();\n    for(int i = 35;i < 40; i++)\n    {\n      instanceNames3.add(\"localhost:123\" + i);\n    }\n\n    DefaultIdealStateCalculator.calculateNextIdealState(instanceNames3, result1);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    Verify(result1, partitions,replicas);\n    double[] result = compareResult(resultOriginal, result1);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n\n  }\n","date":"2013-01-03 14:42:49","endLine":93,"groupId":"511","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEspressoStorageClusterIdealState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/66/341752b429ecaf91efbb4b401f01c48bfb4343.src","preCode":"  public void testEspressoStorageClusterIdealState() throws Exception\n  {\n    List<String> instanceNames = new ArrayList<String>();\n    for(int i = 0;i < 5; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    int partitions = 8, replicas = 0;\n    Map<String, Object> result0 = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n    Verify(result0, partitions,replicas);\n\n    partitions = 8192;\n    replicas = 3;\n\n    instanceNames.clear();\n    for(int i = 0;i < 20; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    Map<String, Object> resultOriginal = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    Verify(resultOriginal, partitions,replicas);\n    printStat(resultOriginal);\n\n    Map<String, Object> result1 = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    List<String> instanceNames2 = new ArrayList<String>();\n    for(int i = 30;i < 35; i++)\n    {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n\n    IdealStateCalculatorForStorageNode.calculateNextIdealState(instanceNames2, result1);\n\n    List<String> instanceNames3 = new ArrayList<String>();\n    for(int i = 35;i < 40; i++)\n    {\n      instanceNames3.add(\"localhost:123\" + i);\n    }\n\n    IdealStateCalculatorForStorageNode.calculateNextIdealState(instanceNames3, result1);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    Verify(result1, partitions,replicas);\n    double[] result = compareResult(resultOriginal, result1);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestEspressoStorageClusterIdealState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2013-01-03 14:42:49","commitOrder":2,"curCode":"  public void testRebalance2()\n  {\n    int partitions = 1256, replicas = 3;\n    List<String> instanceNames = new ArrayList<String>();\n    \n    for(int i = 0;i < 10; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    \n    Map<String, Object> resultOriginal = DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n    \n    ZNRecord idealState1 = DefaultIdealStateCalculator.convertToZNRecord(resultOriginal, \"TestDB\", \"MASTER\", \"SLAVE\");\n    \n    Map<String, Object> result1 = RebalanceUtil.buildInternalIdealState(new IdealState(idealState1));\n    \n    List<String> instanceNames2 = new ArrayList<String>();\n    for(int i = 30;i < 35; i++)\n    {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n    \n    Map<String, Object> result2 = DefaultIdealStateCalculator.calculateNextIdealState(instanceNames2, result1);\n    \n    Verify(resultOriginal, partitions,replicas);\n    Verify(result2, partitions,replicas);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    double[] result = compareResult(resultOriginal, result2);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n  }\n","date":"2013-01-03 14:42:49","endLine":128,"groupId":"1078","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRebalance2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/66/341752b429ecaf91efbb4b401f01c48bfb4343.src","preCode":"  public void testRebalance2()\n  {\n    int partitions = 1256, replicas = 3;\n    List<String> instanceNames = new ArrayList<String>();\n    \n    for(int i = 0;i < 10; i++)\n    {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    \n    Map<String, Object> resultOriginal = IdealStateCalculatorForStorageNode.calculateInitialIdealState(instanceNames, partitions, replicas);\n    \n    ZNRecord idealState1 = IdealStateCalculatorForStorageNode.convertToZNRecord(resultOriginal, \"TestDB\", \"MASTER\", \"SLAVE\");\n    \n    Map<String, Object> result1 = ClusterSetup.buildInternalIdealState(new IdealState(idealState1));\n    \n    List<String> instanceNames2 = new ArrayList<String>();\n    for(int i = 30;i < 35; i++)\n    {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n    \n    Map<String, Object> result2 = IdealStateCalculatorForStorageNode.calculateNextIdealState(instanceNames2, result1);\n    \n    Verify(resultOriginal, partitions,replicas);\n    Verify(result2, partitions,replicas);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    double[] result = compareResult(resultOriginal, result2);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestEspressoStorageClusterIdealState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"80e9c4a9866d5a72cdbcf8509d74a86b5091253a","commitMessage":"@@@[HELIX-18] Moving some rebalancing methods to HelixAdmin from clustersetup\n","date":"2013-01-03 14:42:49","modifiedFileCount":"14","status":"M","submitter":"Kishore Gopalakrishna"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  public void testEspressoStorageClusterIdealState() throws Exception {\n    List<String> instanceNames = new ArrayList<String>();\n    for (int i = 0; i < 5; i++) {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    int partitions = 8, replicas = 0;\n    Map<String, Object> result0 =\n        DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n    Verify(result0, partitions, replicas);\n\n    partitions = 8192;\n    replicas = 3;\n\n    instanceNames.clear();\n    for (int i = 0; i < 20; i++) {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    Map<String, Object> resultOriginal =\n        DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    Verify(resultOriginal, partitions, replicas);\n    printStat(resultOriginal);\n\n    Map<String, Object> result1 =\n        DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    List<String> instanceNames2 = new ArrayList<String>();\n    for (int i = 30; i < 35; i++) {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n\n    DefaultIdealStateCalculator.calculateNextIdealState(instanceNames2, result1);\n\n    List<String> instanceNames3 = new ArrayList<String>();\n    for (int i = 35; i < 40; i++) {\n      instanceNames3.add(\"localhost:123\" + i);\n    }\n\n    DefaultIdealStateCalculator.calculateNextIdealState(instanceNames3, result1);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    Verify(result1, partitions, replicas);\n    double[] result = compareResult(resultOriginal, result1);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.49 < slaveKeepRatio && 0.51 > slaveKeepRatio);\n\n  }\n","date":"2017-11-08 08:48:26","endLine":88,"groupId":"10347","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEspressoStorageClusterIdealState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/09/f1664311bb4836b35e17257d4b0f2104f13d3d.src","preCode":"  public void testEspressoStorageClusterIdealState() throws Exception {\n    List<String> instanceNames = new ArrayList<String>();\n    for (int i = 0; i < 5; i++) {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    int partitions = 8, replicas = 0;\n    Map<String, Object> result0 =\n        DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n    Verify(result0, partitions, replicas);\n\n    partitions = 8192;\n    replicas = 3;\n\n    instanceNames.clear();\n    for (int i = 0; i < 20; i++) {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n    Map<String, Object> resultOriginal =\n        DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    Verify(resultOriginal, partitions, replicas);\n    printStat(resultOriginal);\n\n    Map<String, Object> result1 =\n        DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    List<String> instanceNames2 = new ArrayList<String>();\n    for (int i = 30; i < 35; i++) {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n\n    DefaultIdealStateCalculator.calculateNextIdealState(instanceNames2, result1);\n\n    List<String> instanceNames3 = new ArrayList<String>();\n    for (int i = 35; i < 40; i++) {\n      instanceNames3.add(\"localhost:123\" + i);\n    }\n\n    DefaultIdealStateCalculator.calculateNextIdealState(instanceNames3, result1);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    Verify(result1, partitions, replicas);\n    double[] result = compareResult(resultOriginal, result1);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestEspressoStorageClusterIdealState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  public void testRebalance2() {\n    int partitions = 1256, replicas = 3;\n    List<String> instanceNames = new ArrayList<String>();\n\n    for (int i = 0; i < 10; i++) {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n\n    Map<String, Object> resultOriginal =\n        DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    ZNRecord idealState1 =\n        DefaultIdealStateCalculator.convertToZNRecord(resultOriginal, \"TestDB\", \"MASTER\", \"SLAVE\");\n\n    Map<String, Object> result1 =\n        RebalanceUtil.buildInternalIdealState(new IdealState(idealState1));\n\n    List<String> instanceNames2 = new ArrayList<String>();\n    for (int i = 30; i < 35; i++) {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n\n    Map<String, Object> result2 =\n        DefaultIdealStateCalculator.calculateNextIdealState(instanceNames2, result1);\n\n    Verify(resultOriginal, partitions, replicas);\n    Verify(result2, partitions, replicas);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    double[] result = compareResult(resultOriginal, result2);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.49 < slaveKeepRatio && 0.51 > slaveKeepRatio);\n  }\n","date":"2017-11-08 08:48:26","endLine":124,"groupId":"10347","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRebalance2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/09/f1664311bb4836b35e17257d4b0f2104f13d3d.src","preCode":"  public void testRebalance2() {\n    int partitions = 1256, replicas = 3;\n    List<String> instanceNames = new ArrayList<String>();\n\n    for (int i = 0; i < 10; i++) {\n      instanceNames.add(\"localhost:123\" + i);\n    }\n\n    Map<String, Object> resultOriginal =\n        DefaultIdealStateCalculator.calculateInitialIdealState(instanceNames, partitions, replicas);\n\n    ZNRecord idealState1 =\n        DefaultIdealStateCalculator.convertToZNRecord(resultOriginal, \"TestDB\", \"MASTER\", \"SLAVE\");\n\n    Map<String, Object> result1 =\n        RebalanceUtil.buildInternalIdealState(new IdealState(idealState1));\n\n    List<String> instanceNames2 = new ArrayList<String>();\n    for (int i = 30; i < 35; i++) {\n      instanceNames2.add(\"localhost:123\" + i);\n    }\n\n    Map<String, Object> result2 =\n        DefaultIdealStateCalculator.calculateNextIdealState(instanceNames2, result1);\n\n    Verify(resultOriginal, partitions, replicas);\n    Verify(result2, partitions, replicas);\n    Double masterKeepRatio = 0.0, slaveKeepRatio = 0.0;\n    double[] result = compareResult(resultOriginal, result2);\n    masterKeepRatio = result[0];\n    slaveKeepRatio = result[1];\n    Assert.assertTrue(0.66 < masterKeepRatio && 0.67 > masterKeepRatio);\n    Assert.assertTrue(0.66 < slaveKeepRatio && 0.67 > slaveKeepRatio);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/TestEspressoStorageClusterIdealState.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"}]
