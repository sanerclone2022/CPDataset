[{"authorTime":"2020-02-12 05:58:57","codes":[{"authorDate":"2020-02-12 05:58:57","commitOrder":1,"curCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","date":"2020-02-12 05:58:57","endLine":1763,"groupId":"5680","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncGetData","params":"(finalStringpath@finalZkAsyncCallbacks.GetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/07c3f396ab2de6a22d4ce565a5cdea922faf61.src","preCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1753,"status":"B"},{"authorDate":"2020-02-12 05:58:57","commitOrder":1,"curCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","date":"2020-02-12 05:58:57","endLine":1775,"groupId":"5679","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExists","params":"(finalStringpath@finalZkAsyncCallbacks.ExistsCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/05/07c3f396ab2de6a22d4ce565a5cdea922faf61.src","preCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1765,"status":"B"}],"commitId":"b227b3b72b3ed0e347464f8d8e5279365a6e5acb","commitMessage":"@@@Add metrics-common.  zookeeper-api.  helix-common modules (#684)\n\nWe want to create a new module called zookeeper-api in order to decouple Helix's ZooKeeper APIs from helix-core. The goal is to enable non-Helix applications to use Helix's ZooKeeper APIs. This change also allows for better modularity and separation of concerns.","date":"2020-02-12 05:58:57","modifiedFileCount":"361","status":"B","submitter":"Hunter Lee"},{"authorTime":"2020-05-05 03:36:13","codes":[{"authorDate":"2020-05-05 03:36:13","commitOrder":2,"curCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n          new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n            @Override\n            protected void doRetry() {\n              asyncGetData(path, cb);\n            }\n          });\n      return null;\n    });\n  }\n","date":"2020-05-05 03:36:13","endLine":1812,"groupId":"3910","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncGetData","params":"(finalStringpath@finalZkAsyncCallbacks.GetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/f9e32b3672ad6145fe633624b53f678626f0d1.src","preCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1800,"status":"M"},{"authorDate":"2020-05-05 03:36:13","commitOrder":2,"curCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n          new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n            @Override\n            protected void doRetry() {\n              asyncExists(path, cb);\n            }\n          });\n      return null;\n    });\n  }\n","date":"2020-05-05 03:36:13","endLine":1826,"groupId":"7127","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExists","params":"(finalStringpath@finalZkAsyncCallbacks.ExistsCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/f9e32b3672ad6145fe633624b53f678626f0d1.src","preCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1814,"status":"M"}],"commitId":"96ebb27c23004a7a69dc4799b14586ff82d53c9e","commitMessage":"@@@Add async call retry to resolve the transient ZK connection issue. (#970)\n\nIf any exceptions happen during the async call.  the current design will fail the operation and may eventually return a partial result.\nThis change makes the ZkClient retry operation if the error is because of a temporary ZK connection issue (CONNECTIONLOSS.  SESSIONEXPIRED.  SESSIONMOVED).\nSo the async call has a larger chance to finish the operation. Note that if the exception is due to business logic.  the async call will still fail and the right return code will be sent to the callback handler.","date":"2020-05-05 03:36:13","modifiedFileCount":"3","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2020-05-05 04:02:13","codes":[{"authorDate":"2020-05-05 04:02:13","commitOrder":3,"curCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","date":"2020-05-05 05:28:58","endLine":1782,"groupId":"5680","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncGetData","params":"(finalStringpath@finalZkAsyncCallbacks.GetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/56/2143f92457df8ead75612f80bc07cad6478249.src","preCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n          new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n            @Override\n            protected void doRetry() {\n              asyncGetData(path, cb);\n            }\n          });\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1772,"status":"M"},{"authorDate":"2020-05-05 04:02:13","commitOrder":3,"curCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","date":"2020-05-05 05:28:58","endLine":1794,"groupId":"5679","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExists","params":"(finalStringpath@finalZkAsyncCallbacks.ExistsCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/56/2143f92457df8ead75612f80bc07cad6478249.src","preCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n          new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n            @Override\n            protected void doRetry() {\n              asyncExists(path, cb);\n            }\n          });\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1784,"status":"M"}],"commitId":"370e277966f75a7fba45f5b96f7608c127b2905c","commitMessage":"@@@Revert \"Add async call retry to resolve the transient ZK connection issue. (#970)\"\n\nThis reverts commit 96ebb27c23004a7a69dc4799b14586ff82d53c9e.\n","date":"2020-05-05 05:28:58","modifiedFileCount":"3","status":"M","submitter":"Junkai Xue"},{"authorTime":"2020-05-05 08:13:35","codes":[{"authorDate":"2020-05-05 08:13:35","commitOrder":4,"curCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n          new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n            @Override\n            protected void doRetry() {\n              asyncGetData(path, cb);\n            }\n          });\n      return null;\n    });\n  }\n","date":"2020-05-05 08:13:35","endLine":1812,"groupId":"3910","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncGetData","params":"(finalStringpath@finalZkAsyncCallbacks.GetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/f9e32b3672ad6145fe633624b53f678626f0d1.src","preCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1800,"status":"M"},{"authorDate":"2020-05-05 08:13:35","commitOrder":4,"curCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n          new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n            @Override\n            protected void doRetry() {\n              asyncExists(path, cb);\n            }\n          });\n      return null;\n    });\n  }\n","date":"2020-05-05 08:13:35","endLine":1826,"groupId":"7127","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExists","params":"(finalStringpath@finalZkAsyncCallbacks.ExistsCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/89/f9e32b3672ad6145fe633624b53f678626f0d1.src","preCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(new Callable<Object>() {\n      @Override\n      public Object call() throws Exception {\n        ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n            new ZkAsyncCallbacks.ZkAsyncCallContext(_monitor, startT, 0, true));\n        return null;\n      }\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":1814,"status":"M"}],"commitId":"eb4d99fe777e8928604695c1eedfeda4c01117e1","commitMessage":"@@@Revert \"Revert \"Add async call retry to resolve the transient ZK connection issue. (#970)\"\"\n\nThis reverts commit 370e277966f75a7fba45f5b96f7608c127b2905c.\n","date":"2020-05-05 08:13:35","modifiedFileCount":"3","status":"M","submitter":"Junkai Xue"},{"authorTime":"2021-03-20 07:11:56","codes":[{"authorDate":"2021-03-20 07:11:56","commitOrder":5,"curCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    try {\n      retryUntilConnected(() -> {\n        ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n              @Override\n              protected void doRetry() {\n                asyncGetData(path, cb);\n              }\n            });\n        return null;\n      });\n    } catch (RuntimeException e) {\n      \r\n      cb.processResult(ZkAsyncCallbacks.UNKNOWN_RET_CODE, path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, true), null, null);\n      throw e;\n    }\n  }\n","date":"2021-03-20 07:11:56","endLine":2028,"groupId":"3910","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncGetData","params":"(finalStringpath@finalZkAsyncCallbacks.GetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/26/8910b961460807fcb2afb6b3fc64f146bc035b.src","preCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n          new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n            @Override\n            protected void doRetry() {\n              asyncGetData(path, cb);\n            }\n          });\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":2009,"status":"M"},{"authorDate":"2021-03-20 07:11:56","commitOrder":5,"curCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    try {\n      retryUntilConnected(() -> {\n        ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n              @Override\n              protected void doRetry() {\n                asyncExists(path, cb);\n              }\n            });\n        return null;\n      });\n    } catch (RuntimeException e) {\n      \r\n      cb.processResult(ZkAsyncCallbacks.UNKNOWN_RET_CODE, path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, true), null);\n      throw e;\n    }\n  }\n","date":"2021-03-20 07:11:56","endLine":2049,"groupId":"7127","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncExists","params":"(finalStringpath@finalZkAsyncCallbacks.ExistsCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/26/8910b961460807fcb2afb6b3fc64f146bc035b.src","preCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    retryUntilConnected(() -> {\n      ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n          new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n            @Override\n            protected void doRetry() {\n              asyncExists(path, cb);\n            }\n          });\n      return null;\n    });\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":2030,"status":"M"}],"commitId":"72541eac1d49294ea1c126e4c359b1611c0dce71","commitMessage":"@@@Track failures for async read/write in ZkClient (#1663)\n\n* Defines separate metrics for async (batch) operations and tracks failure count by checking for operation return code in ZkAsyncCallbacks. Also.  cancels async get/exists/delete callbacks when an exception is thrown to be able to detect failure and record the metric. Finally.  in TestRawZkClient sync read metrics were used to check async reads.  which is fixed to reflect the separation of sync and async metrics.","date":"2021-03-20 07:11:56","modifiedFileCount":"7","status":"M","submitter":"Ramin Bashizade"},{"authorTime":"2021-06-03 07:13:22","codes":[{"authorDate":"2021-06-03 07:13:22","commitOrder":6,"curCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    try {\n      retryUntilConnected(() -> {\n        ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n              @Override\n              protected void doRetry() {\n                asyncGetData(path, cb);\n              }\n            });\n        return null;\n      });\n    } catch (RuntimeException e) {\n      \r\n      cb.processResult(KeeperException.Code.APIERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, true), null, null);\n      throw e;\n    }\n  }\n","date":"2021-06-03 07:13:22","endLine":2028,"groupId":"101022","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"asyncGetData","params":"(finalStringpath@finalZkAsyncCallbacks.GetDataCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cb/bdbbd584fad1cb6bd5a5dbf43026780d5dafeb.src","preCode":"  public void asyncGetData(final String path, final ZkAsyncCallbacks.GetDataCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    try {\n      retryUntilConnected(() -> {\n        ((ZkConnection) getConnection()).getZookeeper().getData(path, null, cb,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n              @Override\n              protected void doRetry() {\n                asyncGetData(path, cb);\n              }\n            });\n        return null;\n      });\n    } catch (RuntimeException e) {\n      \r\n      cb.processResult(ZkAsyncCallbacks.UNKNOWN_RET_CODE, path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, true), null, null);\n      throw e;\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":2009,"status":"M"},{"authorDate":"2021-06-03 07:13:22","commitOrder":6,"curCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    try {\n      retryUntilConnected(() -> {\n        ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n              @Override\n              protected void doRetry() {\n                asyncExists(path, cb);\n              }\n            });\n        return null;\n      });\n    } catch (RuntimeException e) {\n      \r\n      cb.processResult(KeeperException.Code.APIERROR.intValue(), path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, true), null);\n      throw e;\n    }\n  }\n","date":"2021-06-03 07:13:22","endLine":2049,"groupId":"101022","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"asyncExists","params":"(finalStringpath@finalZkAsyncCallbacks.ExistsCallbackHandlercb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/cb/bdbbd584fad1cb6bd5a5dbf43026780d5dafeb.src","preCode":"  public void asyncExists(final String path, final ZkAsyncCallbacks.ExistsCallbackHandler cb) {\n    final long startT = System.currentTimeMillis();\n    try {\n      retryUntilConnected(() -> {\n        ((ZkConnection) getConnection()).getZookeeper().exists(path, null, cb,\n            new ZkAsyncRetryCallContext(_asyncCallRetryThread, cb, _monitor, startT, 0, true) {\n              @Override\n              protected void doRetry() {\n                asyncExists(path, cb);\n              }\n            });\n        return null;\n      });\n    } catch (RuntimeException e) {\n      \r\n      cb.processResult(ZkAsyncCallbacks.UNKNOWN_RET_CODE, path,\n          new ZkAsyncCallMonitorContext(_monitor, startT, 0, true), null);\n      throw e;\n    }\n  }\n","realPath":"zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":2030,"status":"M"}],"commitId":"1a37d5c692c85db20d0c61e2f72659f3724e125e","commitMessage":"@@@Get rid of non-official ZK error code to avoid NPEs. (#1778)\n\nThis PR removes the non-official ZK error codes that are returned by the Helix ZkClient. The original design was made for differentiating the failure cases. However.  that design caused unexpected NPE when most of Helix's logic relies on the Zookeeper KeeperException.Code class to identify the error types.","date":"2021-06-03 07:13:22","modifiedFileCount":"4","status":"M","submitter":"Jiajun Wang"}]
