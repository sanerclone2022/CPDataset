[{"authorTime":"2013-12-13 03:25:45","codes":[{"authorDate":"2013-12-13 03:25:45","commitOrder":1,"curCode":"  public void testIdealStateValidity() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","date":"2013-12-13 06:03:10","endLine":84,"groupId":"2970","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdealStateValidity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/d7fd8e502209fe0330c59b7219f9eece484b38.src","preCode":"  public void testIdealStateValidity() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2013-12-13 03:25:45","commitOrder":1,"curCode":"  public void testMissingStateModel() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","date":"2013-12-13 06:03:10","endLine":144,"groupId":"2970","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingStateModel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/15/d7fd8e502209fe0330c59b7219f9eece484b38.src","preCode":"  public void testMissingStateModel() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"}],"commitId":"5937f3640a535193325aff6c3e291c8c0bef6777","commitMessage":"@@@[HELIX-344] Add app-specific ideal state validation.  rb=16199\n","date":"2013-12-13 06:03:10","modifiedFileCount":"4","status":"B","submitter":"Kanak Biscuitwala"},{"authorTime":"2017-01-07 08:31:38","codes":[{"authorDate":"2017-01-07 08:31:38","commitOrder":2,"curCode":"  public void testIdealStateValidity() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","date":"2017-10-03 10:06:26","endLine":84,"groupId":"2970","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdealStateValidity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9c/8637273bc212cf80f9a3055e467b3f8538ec35.src","preCode":"  public void testIdealStateValidity() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2017-01-07 08:31:38","commitOrder":2,"curCode":"  public void testMissingStateModel() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","date":"2017-10-03 10:06:26","endLine":144,"groupId":"2970","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingStateModel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/9c/8637273bc212cf80f9a3055e467b3f8538ec35.src","preCode":"  public void testMissingStateModel() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.toString());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"4e4871967db07cee191debb9d26bfcd53c401945","commitMessage":"@@@Add state transition throttling logic into intermediateStateCalcStage.\n","date":"2017-10-03 10:06:26","modifiedFileCount":"30","status":"M","submitter":"Lei Xia"},{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  public void testIdealStateValidity() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap =\n        event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap =\n        event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","date":"2017-11-08 08:48:26","endLine":86,"groupId":"2970","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdealStateValidity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/cc47818c2fc9b6d946099a708abfb5da6cb0ef.src","preCode":"  public void testIdealStateValidity() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2017-11-08 08:48:26","commitOrder":3,"curCode":"  public void testMissingStateModel() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","date":"2017-11-08 08:48:26","endLine":146,"groupId":"5756","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingStateModel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/57/cc47818c2fc9b6d946099a708abfb5da6cb0ef.src","preCode":"  public void testMissingStateModel() throws Exception {\n    Mocks.MockAccessor accessor = new Mocks.MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(\"testEvent\");\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(\"ClusterDataCache\", cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"M","submitter":"Junkai Xue"},{"authorTime":"2018-03-25 12:36:54","codes":[{"authorDate":"2018-03-25 12:36:54","commitOrder":4,"curCode":"  public void testIdealStateValidity() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n    accessor.setProperty(accessor.keyBuilder().clusterConfig(), new ClusterConfig(\"TestCluster\"));\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap =\n        event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap =\n        event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","date":"2018-03-26 05:43:42","endLine":88,"groupId":"2970","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdealStateValidity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/63/3472026ee88cf1f5b2385f68dbffa25af3d8d6.src","preCode":"  public void testIdealStateValidity() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap =\n        event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap =\n        event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2018-03-25 12:36:54","commitOrder":4,"curCode":"  public void testMissingStateModel() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n    accessor.setProperty(accessor.keyBuilder().clusterConfig(), new ClusterConfig(\"TestCluster\"));\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","date":"2018-03-26 05:43:42","endLine":149,"groupId":"5756","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingStateModel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/63/3472026ee88cf1f5b2385f68dbffa25af3d8d6.src","preCode":"  public void testMissingStateModel() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"db949d0f64c5a4ac9923bc7bdf3736dd0e7a8640","commitMessage":"@@@Avoid redundant calculation for disabled instances\n\nFor Pinot reported issue that BestPossibleStage takes 100s for initial resource calculation.  the part of delay caused by recalculating disabled instances for partition.\nImprove this with calculate it once when refresh data.\nTODO: once we can do major refactor that can identify the ClusterConfig change in cache.  we can optimize it with recalculating it only when instance config and cluster config changes.\n","date":"2018-03-26 05:43:42","modifiedFileCount":"6","status":"M","submitter":"Junkai Xue"},{"authorTime":"2019-02-26 09:36:00","codes":[{"authorDate":"2019-02-26 09:36:00","commitOrder":5,"curCode":"  public void testIdealStateValidity() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n    accessor.setProperty(accessor.keyBuilder().clusterConfig(), new ClusterConfig(\"TestCluster\"));\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap =\n        event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap =\n        event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","date":"2019-02-26 09:36:00","endLine":87,"groupId":"10286","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdealStateValidity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/49/5dd6689334fb77560a4e196cb1233466a47846.src","preCode":"  public void testIdealStateValidity() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n    accessor.setProperty(accessor.keyBuilder().clusterConfig(), new ClusterConfig(\"TestCluster\"));\n\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String onlineOfflineFullAutoResource = \"onlineOfflineFullAutoResource\";\n    String masterSlaveSemiAutoInvalidResource = \"masterSlaveSemiAutoInvalidResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, onlineOfflineFullAutoResource, \"OnlineOffline\", RebalanceMode.FULL_AUTO);\n    createIS(accessor, masterSlaveSemiAutoInvalidResource, \"MasterSlave\", RebalanceMode.SEMI_AUTO);\n\n    \r\n    createISSpec(accessor, masterSlaveCustomResource + \"_spec\", \"MasterSlave\",\n        RebalanceMode.CUSTOMIZED);\n    createISSpec(accessor, onlineOfflineFullAutoResource + \"_spec\", \"OnlineOffline\",\n        RebalanceMode.FULL_AUTO);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap =\n        event.getAttribute(AttributeName.RESOURCES_TO_REBALANCE.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap =\n        event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(finalResourceMap.containsKey(onlineOfflineFullAutoResource));\n    Assert.assertFalse(finalResourceMap.containsKey(masterSlaveSemiAutoInvalidResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-02-26 09:36:00","commitOrder":5,"curCode":"  public void testMissingStateModel() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n    accessor.setProperty(accessor.keyBuilder().clusterConfig(), new ClusterConfig(\"TestCluster\"));\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ResourceControllerDataProvider cache = new ResourceControllerDataProvider();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ControllerDataProvider.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","date":"2019-02-26 09:36:00","endLine":148,"groupId":"10286","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingStateModel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/49/5dd6689334fb77560a4e196cb1233466a47846.src","preCode":"  public void testMissingStateModel() throws Exception {\n    MockAccessor accessor = new MockAccessor();\n    accessor.setProperty(accessor.keyBuilder().clusterConfig(), new ClusterConfig(\"TestCluster\"));\n    \r\n    String masterSlaveCustomResource = \"masterSlaveCustomResource\";\n    String leaderStandbyCustomResource = \"leaderStandbyCustomResource\";\n    createIS(accessor, masterSlaveCustomResource, \"MasterSlave\", RebalanceMode.CUSTOMIZED);\n    createIS(accessor, leaderStandbyCustomResource, \"LeaderStandby\", RebalanceMode.CUSTOMIZED);\n\n    \r\n    addStateModels(accessor);\n\n    \r\n    ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n    ClusterDataCache cache = new ClusterDataCache();\n    cache.refresh(accessor);\n    event.addAttribute(AttributeName.ClusterDataCache.name(), cache);\n\n    \r\n    new ResourceComputationStage().process(event);\n    Map<String, Resource> resourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(resourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertTrue(resourceMap.containsKey(leaderStandbyCustomResource));\n\n    \r\n    new ResourceValidationStage().process(event);\n    Map<String, Resource> finalResourceMap = event.getAttribute(AttributeName.RESOURCES.name());\n    Assert.assertTrue(finalResourceMap.containsKey(masterSlaveCustomResource));\n    Assert.assertFalse(finalResourceMap.containsKey(leaderStandbyCustomResource));\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"fbb679c5f4804652ea730bf5cd4ee6bf1329efc3","commitMessage":"@@@split data cache\n","date":"2019-02-26 09:36:00","modifiedFileCount":"95","status":"M","submitter":"Harry Zhang"}]
