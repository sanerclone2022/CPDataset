[{"authorTime":"2019-03-30 08:28:07","codes":[{"authorDate":"2019-03-30 08:28:07","commitOrder":1,"curCode":"  public void TestSiblingNodesActiveReplicaCheck_success() {\n    String resource = \"resource\";\n    Mock mock = new Mock();\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)));\n    ExternalView externalView = mock(ExternalView.class);\n    when(externalView.getMinActiveReplicas()).thenReturn(2);\n    when(externalView.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    when(externalView.getPartitionSet()).thenReturn(ImmutableSet.of(\"db0\"));\n    when(externalView.getStateMap(\"db0\")).thenReturn(ImmutableMap.of(\n        TEST_INSTANCE, \"Master\",\n        \"instance1\", \"Slave\",\n        \"instance2\", \"Slave\",\n        \"instance3\", \"Slave\"));\n    doReturn(externalView).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    StateModelDefinition stateModelDefinition = mock(StateModelDefinition.class);\n    when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\");\n    doReturn(stateModelDefinition).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)));\n\n    boolean result = InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor, TEST_INSTANCE);\n\n    Assert.assertTrue(result);\n  }\n","date":"2019-05-25 09:19:20","endLine":49,"groupId":"5653","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"TestSiblingNodesActiveReplicaCheck_success","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f2/6d2bbffc2c228a2a9419679487c12f585c677c.src","preCode":"  public void TestSiblingNodesActiveReplicaCheck_success() {\n    String resource = \"resource\";\n    Mock mock = new Mock();\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)));\n    ExternalView externalView = mock(ExternalView.class);\n    when(externalView.getMinActiveReplicas()).thenReturn(2);\n    when(externalView.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    when(externalView.getPartitionSet()).thenReturn(ImmutableSet.of(\"db0\"));\n    when(externalView.getStateMap(\"db0\")).thenReturn(ImmutableMap.of(\n        TEST_INSTANCE, \"Master\",\n        \"instance1\", \"Slave\",\n        \"instance2\", \"Slave\",\n        \"instance3\", \"Slave\"));\n    doReturn(externalView).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    StateModelDefinition stateModelDefinition = mock(StateModelDefinition.class);\n    when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\");\n    doReturn(stateModelDefinition).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)));\n\n    boolean result = InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor, TEST_INSTANCE);\n\n    Assert.assertTrue(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/util/TestInstanceValidationUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"B"},{"authorDate":"2019-03-30 08:28:07","commitOrder":1,"curCode":"  public void TestSiblingNodesActiveReplicaCheck_fail() {\n    String resource = \"resource\";\n    Mock mock = new Mock();\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)));\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    ExternalView externalView = mock(ExternalView.class);\n    when(externalView.getMinActiveReplicas()).thenReturn(3);\n    when(externalView.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    when(externalView.getPartitionSet()).thenReturn(ImmutableSet.of(\"db0\"));\n    when(externalView.getStateMap(\"db0\")).thenReturn(ImmutableMap.of(\n        TEST_INSTANCE, \"Master\",\n        \"instance1\", \"Slave\",\n        \"instance2\", \"Slave\"));\n    doReturn(externalView).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    StateModelDefinition stateModelDefinition = mock(StateModelDefinition.class);\n    when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\");\n    doReturn(stateModelDefinition).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)));\n\n    boolean result = InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor, TEST_INSTANCE);\n\n    Assert.assertFalse(result);\n  }\n","date":"2019-05-25 09:19:20","endLine":73,"groupId":"5654","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"TestSiblingNodesActiveReplicaCheck_fail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f2/6d2bbffc2c228a2a9419679487c12f585c677c.src","preCode":"  public void TestSiblingNodesActiveReplicaCheck_fail() {\n    String resource = \"resource\";\n    Mock mock = new Mock();\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)));\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor).getChildNames(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    ExternalView externalView = mock(ExternalView.class);\n    when(externalView.getMinActiveReplicas()).thenReturn(3);\n    when(externalView.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    when(externalView.getPartitionSet()).thenReturn(ImmutableSet.of(\"db0\"));\n    when(externalView.getStateMap(\"db0\")).thenReturn(ImmutableMap.of(\n        TEST_INSTANCE, \"Master\",\n        \"instance1\", \"Slave\",\n        \"instance2\", \"Slave\"));\n    doReturn(externalView).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    StateModelDefinition stateModelDefinition = mock(StateModelDefinition.class);\n    when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\");\n    doReturn(stateModelDefinition).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)));\n\n    boolean result = InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor, TEST_INSTANCE);\n\n    Assert.assertFalse(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/util/TestInstanceValidationUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"5b972f1971d3ca959906ac31353787fb1f9bff32","commitMessage":"@@@Check sibling nodes to guarantee MIN_ACTIVE_REPLICAS satisfied\n\nRB=1614128\nG=helix-reviewers\nA=jxue. hulee\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:20","modifiedFileCount":"5","status":"B","submitter":"Yi Wang"},{"authorTime":"2019-05-04 07:03:37","codes":[{"authorDate":"2019-05-04 07:03:37","commitOrder":2,"curCode":"  public void TestSiblingNodesActiveReplicaCheck_success() {\n    String resource = \"resource\";\n    Mock mock = new Mock();\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor)\n        .getChildNames(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    \r\n    IdealState idealState = mock(IdealState.class);\n    when(idealState.isEnabled()).thenReturn(true);\n    when(idealState.isValid()).thenReturn(true);\n    when(idealState.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    doReturn(idealState).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)));\n\n    \r\n    ExternalView externalView = mock(ExternalView.class);\n    when(externalView.getMinActiveReplicas()).thenReturn(2);\n    when(externalView.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    when(externalView.getPartitionSet()).thenReturn(ImmutableSet.of(\"db0\"));\n    when(externalView.getStateMap(\"db0\")).thenReturn(ImmutableMap.of(TEST_INSTANCE, \"Master\",\n        \"instance1\", \"Slave\", \"instance2\", \"Slave\", \"instance3\", \"Slave\"));\n    doReturn(externalView).when(mock.dataAccessor)\n        .getProperty(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    StateModelDefinition stateModelDefinition = mock(StateModelDefinition.class);\n    when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\");\n    doReturn(stateModelDefinition).when(mock.dataAccessor)\n        .getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)));\n\n    boolean result =\n        InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor, TEST_INSTANCE);\n\n    Assert.assertTrue(result);\n  }\n","date":"2019-05-25 09:19:21","endLine":359,"groupId":"10189","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"TestSiblingNodesActiveReplicaCheck_success","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/b54f1187dafc3a49df3bcb5dda1b4b8c5699ef.src","preCode":"  public void TestSiblingNodesActiveReplicaCheck_success() {\n    String resource = \"resource\";\n    Mock mock = new Mock();\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor)\n        .getChildNames(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor)\n        .getChildNames(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)));\n    ExternalView externalView = mock(ExternalView.class);\n    when(externalView.getMinActiveReplicas()).thenReturn(2);\n    when(externalView.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    when(externalView.getPartitionSet()).thenReturn(ImmutableSet.of(\"db0\"));\n    when(externalView.getStateMap(\"db0\")).thenReturn(ImmutableMap.of(TEST_INSTANCE, \"Master\",\n        \"instance1\", \"Slave\", \"instance2\", \"Slave\", \"instance3\", \"Slave\"));\n    doReturn(externalView).when(mock.dataAccessor)\n        .getProperty(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    StateModelDefinition stateModelDefinition = mock(StateModelDefinition.class);\n    when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\");\n    doReturn(stateModelDefinition).when(mock.dataAccessor)\n        .getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)));\n\n    boolean result =\n        InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor, TEST_INSTANCE);\n\n    Assert.assertTrue(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/util/TestInstanceValidationUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"},{"authorDate":"2019-05-04 07:03:37","commitOrder":2,"curCode":"  public void TestSiblingNodesActiveReplicaCheck_fail() {\n    String resource = \"resource\";\n    Mock mock = new Mock();\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor)\n        .getChildNames(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)));\n    \r\n    IdealState idealState = mock(IdealState.class);\n    when(idealState.isEnabled()).thenReturn(true);\n    when(idealState.isValid()).thenReturn(true);\n    when(idealState.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    doReturn(idealState).when(mock.dataAccessor).getProperty(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)));\n\n    ExternalView externalView = mock(ExternalView.class);\n    when(externalView.getMinActiveReplicas()).thenReturn(3);\n    when(externalView.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    when(externalView.getPartitionSet()).thenReturn(ImmutableSet.of(\"db0\"));\n    when(externalView.getStateMap(\"db0\")).thenReturn(\n        ImmutableMap.of(TEST_INSTANCE, \"Master\", \"instance1\", \"Slave\", \"instance2\", \"Slave\"));\n    doReturn(externalView).when(mock.dataAccessor)\n        .getProperty(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    StateModelDefinition stateModelDefinition = mock(StateModelDefinition.class);\n    when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\");\n    doReturn(stateModelDefinition).when(mock.dataAccessor)\n        .getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)));\n\n    boolean result =\n        InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor, TEST_INSTANCE);\n\n    Assert.assertFalse(result);\n  }\n","date":"2019-05-25 09:19:21","endLine":391,"groupId":"10189","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"TestSiblingNodesActiveReplicaCheck_fail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/38/b54f1187dafc3a49df3bcb5dda1b4b8c5699ef.src","preCode":"  public void TestSiblingNodesActiveReplicaCheck_fail() {\n    String resource = \"resource\";\n    Mock mock = new Mock();\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor)\n        .getChildNames(argThat(new PropertyKeyArgument(PropertyType.IDEALSTATES)));\n    doReturn(ImmutableList.of(resource)).when(mock.dataAccessor)\n        .getChildNames(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    ExternalView externalView = mock(ExternalView.class);\n    when(externalView.getMinActiveReplicas()).thenReturn(3);\n    when(externalView.getStateModelDefRef()).thenReturn(\"MasterSlave\");\n    when(externalView.getPartitionSet()).thenReturn(ImmutableSet.of(\"db0\"));\n    when(externalView.getStateMap(\"db0\")).thenReturn(\n        ImmutableMap.of(TEST_INSTANCE, \"Master\", \"instance1\", \"Slave\", \"instance2\", \"Slave\"));\n    doReturn(externalView).when(mock.dataAccessor)\n        .getProperty(argThat(new PropertyKeyArgument(PropertyType.EXTERNALVIEW)));\n    StateModelDefinition stateModelDefinition = mock(StateModelDefinition.class);\n    when(stateModelDefinition.getInitialState()).thenReturn(\"OFFLINE\");\n    doReturn(stateModelDefinition).when(mock.dataAccessor)\n        .getProperty(argThat(new PropertyKeyArgument(PropertyType.STATEMODELDEFS)));\n\n    boolean result =\n        InstanceValidationUtil.siblingNodesActiveReplicaCheck(mock.dataAccessor, TEST_INSTANCE);\n\n    Assert.assertFalse(result);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/util/TestInstanceValidationUtil.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"M"}],"commitId":"745868b3f6fb35d1bdd7d39b62132eae85279783","commitMessage":"@@@Bug fix: reuse the stable logics to verfiy the difference between idealStates and externalViews\n\nRB=1654700\nG=helix-reviewers\nA=jxue\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"2","status":"M","submitter":"Yi Wang"}]
