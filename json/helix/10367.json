[{"authorTime":"2017-11-08 08:48:26","codes":[{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","date":"2017-11-08 08:48:26","endLine":94,"groupId":"504","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/81/7c2071bd85399b794f8429f2d3d396e0931315.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2017-11-08 08:48:26","commitOrder":1,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _setupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","date":"2017-11-08 08:48:26","endLine":74,"groupId":"4073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/7d/98f27d4d4767f84431f45f8ee8d999372a2aa9.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _setupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalanceWithRackaware.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"}],"commitId":"fe0b6e800e24c52d514c78d1fbab3d6b0800803f","commitMessage":"@@@Merge branch 'helixli/master'\n\nConflicts:\n\thelix-admin-webapp/helix-admin-webapp-0.6.10-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.6-SNAPSHOT.ivy\n\thelix-admin-webapp/helix-admin-webapp-0.6.9-SNAPSHOT.ivy\n\thelix-admin-webapp/pom.xml\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/JobResource.java\n\thelix-admin-webapp/src/main/java/org/apache/helix/webapp/resources/SchedulerTasksResource.java\n\thelix-admin-webapp/src/test/java/org/apache/helix/webapp/TestClusterManagementWebapp.java\n\thelix-agent/helix-agent-0.6.10-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.6-SNAPSHOT.ivy\n\thelix-agent/helix-agent-0.6.9-SNAPSHOT.ivy\n\thelix-agent/pom.xml\n\thelix-core/helix-core-0.6.10-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.6-SNAPSHOT.ivy\n\thelix-core/helix-core-0.6.9-SNAPSHOT.ivy\n\thelix-core/pom.xml\n\thelix-core/src/main/java/org/apache/helix/BaseDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\thelix-core/src/main/java/org/apache/helix/HelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/HelixConstants.java\n\thelix-core/src/main/java/org/apache/helix/HelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/NotificationContext.java\n\thelix-core/src/main/java/org/apache/helix/PropertyPathBuilder.java\n\thelix-core/src/main/java/org/apache/helix/ZNRecord.java\n\thelix-core/src/main/java/org/apache/helix/api/config/RebalanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionThrottleConfig.java\n\thelix-core/src/main/java/org/apache/helix/api/config/StateTransitionTimeoutConfig.java\n\thelix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\thelix-core/src/main/java/org/apache/helix/controller/common/PartitionStateMap.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/DelayedAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/SemiAutoRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/AutoRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/CrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/MultiRoundCrushRebalanceStrategy.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/strategy/crushMapping/CRUSHPlacementAlgorithm.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Node.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/topology/Topology.java\n\thelix-core/src/main/java/org/apache/helix/controller/rebalancer/util/RebalanceScheduler.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/BestPossibleStateOutput.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ClusterDataCache.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/CurrentStateComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ExternalViewComputeStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/IntermediateStateCalcStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/MessageSelectionStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/PersistAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ReadClusterDataStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/ResourceComputationStage.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/StateTransitionThrottleController.java\n\thelix-core/src/main/java/org/apache/helix/controller/stages/TaskAssignmentStage.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixDataAccessor.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZKUtil.java\n\thelix-core/src/main/java/org/apache/helix/manager/zk/ZkClient.java\n\thelix-core/src/main/java/org/apache/helix/messaging/DefaultMessagingService.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTask.java\n\thelix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\thelix-core/src/main/java/org/apache/helix/model/ClusterConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/IdealState.java\n\thelix-core/src/main/java/org/apache/helix/model/InstanceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/LeaderHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ParticipantHistory.java\n\thelix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\thelix-core/src/main/java/org/apache/helix/model/StateModelDefinition.java\n\thelix-core/src/main/java/org/apache/helix/model/builder/IdealStateBuilder.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/ParticipantStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ClusterStatusMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/InstanceMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/JobMonitor.java\n\thelix-core/src/main/java/org/apache/helix/monitoring/mbeans/ParticipantMessageMonitor.java\n\thelix-core/src/main/java/org/apache/helix/participant/statemachine/StateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/DeprecatedTaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/FixedTargetTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/GenericTaskAssignmentCalculator.java\n\thelix-core/src/main/java/org/apache/helix/task/JobConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/JobContext.java\n\thelix-core/src/main/java/org/apache/helix/task/JobRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskConstants.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskState.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModel.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskStateModelFactory.java\n\thelix-core/src/main/java/org/apache/helix/task/TaskUtil.java\n\thelix-core/src/main/java/org/apache/helix/task/Workflow.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowConfig.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowContext.java\n\thelix-core/src/main/java/org/apache/helix/task/WorkflowRebalancer.java\n\thelix-core/src/main/java/org/apache/helix/task/beans/JobBean.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterLiveNodesVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterStateVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/StrictMatchExternalViewVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\thelix-core/src/main/java/org/apache/helix/tools/IntegrationTestUtil.java\n\thelix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\thelix-core/src/test/java/org/apache/helix/Mocks.java\n\thelix-core/src/test/java/org/apache/helix/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/TestPropertyPathBuilder.java\n\thelix-core/src/test/java/org/apache/helix/ZkUnitTestBase.java\n\thelix-core/src/test/java/org/apache/helix/controller/rebalancer/TestAutoRebalanceStrategy.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleCalcStageCompatibility.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestBestPossibleStateCalcStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestCurrentStateComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestRebalancePipeline.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceComputationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/stages/TestResourceValidationStage.java\n\thelix-core/src/test/java/org/apache/helix/controller/strategy/TestTopology.java\n\thelix-core/src/test/java/org/apache/helix/integration/SinglePartitionLeaderStandByTest.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestAddNodeAfterControllerStart.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBatchMessageHandling.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestBucketizedResource.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestCarryOverBadCurState.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestClusterStartsup.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestDrop.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnableCompression.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestEnablePartitionDuringDisable.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestNullReplica.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPartitionMovementThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestPersistAssignmentStage.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestRebalancerPersistAssignments.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestResourceGroupEndtoEnd.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStartMultipleControllersWithSameName.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestStateTransitionCancellation.java\n\thelix-core/src/test/java/org/apache/helix/integration/TestSyncSessionToController.java\n\thelix-core/src/test/java/org/apache/helix/integration/ZkIntegrationTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/MockParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/manager/TestParticipantManager.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestBatchMessageWrapper.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestMessageThrottle.java\n\thelix-core/src/test/java/org/apache/helix/integration/messaging/TestSchedulerMessage.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoIsWithEmptyMap.java\n\thelix-core/src/test/java/org/apache/helix/integration/rebalancer/TestAutoRebalance.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/MockTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestBase.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TaskTestUtil.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestGenericTaskAssignmentCalculator.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestIndependentTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestJobQueueCleanUp.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRebalanceRunningTask.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRecurringJobQueue.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestRunJobsWithMissingTarget.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancer.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerParallel.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRebalancerStopResume.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskRetryDelay.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestTaskThrottling.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUnregisteredCommand.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestUserContentStore.java\n\thelix-core/src/test/java/org/apache/helix/integration/task/TestWorkflowJobDependency.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpMultiThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestWtCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZKUtil.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkBaseDataAccessor.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheAsyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkCacheSyncOpSingleThread.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkClient.java\n\thelix-core/src/test/java/org/apache/helix/manager/zk/TestZkHelixAdmin.java\n\thelix-core/src/test/java/org/apache/helix/messaging/TestDefaultMessagingService.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestConfigThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\thelix-core/src/test/java/org/apache/helix/messaging/handling/TestResourceThreadpoolSize.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/TestParticipantMonitor.java\n\thelix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestDisableResourceMbean.java\n\thelix-core/src/test/java/org/apache/helix/participant/TestDistControllerElection.java\n\thelix-core/src/test/java/org/apache/helix/task/TaskSynchronizedTestBase.java\n\thelix-core/src/test/java/org/apache/helix/task/TestCleanExpiredJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestScheduleDelayJobs.java\n\thelix-core/src/test/java/org/apache/helix/task/TestSemiAutoStateTransition.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\thelix-core/src/test/java/org/apache/helix/tools/TestClusterVerifier.java\n\tpom.xml\n\trecipes/distributed-lock-manager/pom.xml\n\trecipes/pom.xml\n\trecipes/rabbitmq-consumer-group/pom.xml\n\trecipes/rsync-replicated-file-system/pom.xml\n\trecipes/service-discovery/pom.xml\n\trecipes/task-execution/pom.xml\n","date":"2017-11-08 08:48:26","modifiedFileCount":"275","status":"B","submitter":"Junkai Xue"},{"authorTime":"2018-03-09 06:04:42","codes":[{"authorDate":"2018-03-09 06:04:42","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","date":"2018-03-20 07:43:31","endLine":94,"groupId":"504","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/76/f64b22bb0f1fb5eed75ef6fe69e1fca8140c9e.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2018-03-09 06:04:42","commitOrder":2,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _setupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","date":"2018-03-20 07:43:31","endLine":74,"groupId":"4073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/11/6a756d96e249e28dcc0f25d4edda110b22f4fe.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursive(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _setupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalanceWithRackaware.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"0e849035379a04b079ac1274bb8aaab473df1572","commitMessage":"@@@[HELIX-679] consolidate semantics of recursively delete path in ZkClient\n","date":"2018-03-20 07:43:31","modifiedFileCount":"57","status":"M","submitter":"hrzhang"},{"authorTime":"2018-06-08 08:15:54","codes":[{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","date":"2018-07-14 02:20:49","endLine":87,"groupId":"504","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/92/da126b08d47b5b3b7a142861393882fb98df7d.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2018-06-08 08:15:54","commitOrder":3,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _gSetupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","date":"2018-07-14 02:20:49","endLine":69,"groupId":"4073","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/2c/096f5ffa458519869c83ba1c932fdf84a6883c.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    String namespace = \"/\" + CLUSTER_NAME;\n    if (_gZkClient.exists(namespace)) {\n      _gZkClient.deleteRecursively(namespace);\n    }\n    _setupTool = new ClusterSetup(_gZkClient);\n    _setupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _setupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _setupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalanceWithRackaware.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"c0d5792b745c67b6fee56ba79df02be89d1f049e","commitMessage":"@@@Properly remove clusters after each test.  and clean up duplicated codes in tests and move them into base test classes.\n","date":"2018-07-14 02:20:49","modifiedFileCount":"139","status":"M","submitter":"Lei Xia"},{"authorTime":"2019-10-02 03:08:56","codes":[{"authorDate":"2019-10-02 03:08:56","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = getClusterVerifier();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","date":"2020-02-08 04:24:22","endLine":89,"groupId":"504","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/45/3b661219e2e8545e9e5756a6471dae91bff569.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2019-10-02 03:08:56","commitOrder":4,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _gSetupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = getClusterVerifier();\n  }\n","date":"2020-02-08 04:24:22","endLine":63,"groupId":"4073","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/49/dab439c5f0a539eb97bb08cd8ed3e8d9ca46e6.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _gSetupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalanceWithRackaware.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"71948ec8fdb97c2b62fd41b0d944b653b46ae01c","commitMessage":"@@@Add delayed rebalance and user-defined preference list features to the WAGED rebalancer. (#456)\n\n- Add delayed rebalance and user-defined preference list features to the WAGED rebalancer.\n- Refine the delayed rebalance usage in the waged rebalancer.\n- Add the delayed rebalance scheduling logic.\n- Add the necessary tests. And fix TestMixedModeAutoRebalance and all delayed rebalance tests.","date":"2020-02-08 04:24:22","modifiedFileCount":"13","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2019-11-08 03:29:30","codes":[{"authorDate":"2019-11-08 03:29:30","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","date":"2020-02-08 04:24:22","endLine":90,"groupId":"504","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/af/cabdfd6394e40d6d3e4f9dc83bdde8c25f75e2.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = getClusterVerifier();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2019-11-08 03:29:30","commitOrder":5,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _gSetupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","date":"2020-02-08 04:24:22","endLine":64,"groupId":"4073","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d8/840f0d01d7930c89508d7b04728079de005fda.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _gSetupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier = getClusterVerifier();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalanceWithRackaware.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"0b1b337a32ffbcee76e1f73f20e42b9325e2dce7","commitMessage":"@@@Introduce Dry-run Waged Rebalancer for the verifiers and tests. (#573)\n\nUse a dry-run rebalancer to avoid updating the persisted rebalancer status in the verifiers or tests.\nAlso.  refine several rebalancer related interfaces so as to simplify the dry-run rebalancer implementation.\nConvert the test cases back to use the BestPossibleExternalViewVerifier.\n\nAdditional fixing:\n- Updating the rebalancer preference for every rebalancer.compute calls. Since the preference might be updated at runtime.\n- Fix one minor metric domain name bug in the WagedRebalancerMetricCollector.\n- Minor test case fix to make them more stable after the change.","date":"2020-02-08 04:24:22","modifiedFileCount":"22","status":"M","submitter":"Jiajun Wang"},{"authorTime":"2019-11-08 03:29:30","codes":[{"authorDate":"2020-08-06 10:47:55","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","date":"2020-08-06 10:47:55","endLine":90,"groupId":"504","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/02/61bd5c493d4ac0eeab31985a23d73dc385c718.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2019-11-08 03:29:30","commitOrder":6,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _gSetupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","date":"2020-02-08 04:24:22","endLine":64,"groupId":"4073","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/d8/840f0d01d7930c89508d7b04728079de005fda.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _gSetupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalanceWithRackaware.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"}],"commitId":"56cf1259add5d00bb13fefb018a5de9679a1c6a7","commitMessage":"@@@Fix ZkHelixClusterVerifier related resource leakage (#1185)\n\nZkHelixClusterVerifier and its subclass built with ZK addres would\ncreate an internal ZkClient. Without properly closing the ZkClient\nor using global ZkClient in the test base. There would be four\nthreads and one ZooKeeper client object leaked. The leaked threads\nwould be in thousands and thus be one of the main contributor\npreventing the unit test from finishing. This pull request addresses\nthis issue.\n\nCo-authored-by: Kai Sun <ksun@ksun-mn1.linkedin.biz>","date":"2020-08-06 10:47:55","modifiedFileCount":"30","status":"M","submitter":"kaisun2000"},{"authorTime":"2020-10-08 07:58:42","codes":[{"authorDate":"2020-10-08 07:58:42","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","date":"2020-10-08 07:58:42","endLine":93,"groupId":"10367","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/95/8f27c83dedfbb371c691caa1fd31b89f415a17.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalance.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-10-08 07:58:42","commitOrder":7,"curCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _gSetupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient)\n            .setWaitTillVerify(TestHelper.DEFAULT_REBALANCE_PROCESSING_WAIT_TIME)\n            .build();  }\n","date":"2020-10-08 07:58:42","endLine":66,"groupId":"10367","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/99/20e027b36d3de139cf2ad7f251bec500642720.src","preCode":"  public void beforeClass() throws Exception {\n    System.out.println(\"START \" + CLASS_NAME + \" at \" + new Date(System.currentTimeMillis()));\n\n    _gSetupTool.addCluster(CLUSTER_NAME, true);\n\n    for (int i = 0; i < NUM_NODE; i++) {\n      String storageNodeName = PARTICIPANT_PREFIX + \"_\" + (START_PORT + i);\n      _gSetupTool.addInstanceToCluster(CLUSTER_NAME, storageNodeName);\n      String zone = \"zone-\" + i % 3;\n      _gSetupTool.getClusterManagementTool().setInstanceZoneId(CLUSTER_NAME, storageNodeName, zone);\n\n      \r\n      MockParticipantManager participant =\n          new MockParticipantManager(ZK_ADDR, CLUSTER_NAME, storageNodeName);\n      participant.syncStart();\n      _participants.add(participant);\n    }\n\n    enableTopologyAwareRebalance(_gZkClient, CLUSTER_NAME, true);\n    enablePersistBestPossibleAssignment(_gZkClient, CLUSTER_NAME, true);\n\n    \r\n    String controllerName = CONTROLLER_PREFIX + \"_0\";\n    _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n    _controller.syncStart();\n\n    _clusterVerifier =\n        new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/rebalancer/DelayedAutoRebalancer/TestDelayedAutoRebalanceWithRackaware.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"02e16baf3f559f62657a1c713e1cdcd5b029045e","commitMessage":"@@@HelixClusterVerifier verify() with default waitTillVerify time -- part one (#1449)\n\nHelixClusterVerifier verify() and related method may return\nprematurely. The reason is that verify the converging stable\ncondition too early before the controller has a chance to make\na change. Basically.  the previous stable state is mistaken as the\nexpected next stable state.\nThis commit fixes this issue by adding waitTillVerify() timeout in\nthe construction time of the verifier.","date":"2020-10-08 07:58:42","modifiedFileCount":"45","status":"M","submitter":"kaisun2000"}]
