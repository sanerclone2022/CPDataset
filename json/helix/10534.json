[{"authorTime":"2018-07-14 05:45:41","codes":[{"authorDate":"2018-07-14 05:45:41","commitOrder":1,"curCode":"  public void testMultipleJobAssignment() throws InterruptedException {\n    _runCounts.clear();\n    failTask = false;\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n\n    for (int i = 0; i < 20; i++) {\n      List<TaskConfig> taskConfigs = Lists.newArrayListWithCapacity(1);\n      taskConfigs.add(new TaskConfig(\"TaskOne\", new HashMap<String, String>()));\n      JobConfig.Builder jobBuilder = new JobConfig.Builder().setCommand(\"DummyCommand\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(_jobCommandMap);\n      workflowBuilder.addJob(\"JOB\" + i, jobBuilder);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    Assert.assertEquals(_runCounts.size(), 5);\n  }\n","date":"2018-07-14 08:38:58","endLine":137,"groupId":"6191","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f0/2376f87f2e63830076ebb224e528beaafddf7f.src","preCode":"  public void testMultipleJobAssignment() throws InterruptedException {\n    _runCounts.clear();\n    failTask = false;\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n\n    for (int i = 0; i < 20; i++) {\n      List<TaskConfig> taskConfigs = Lists.newArrayListWithCapacity(1);\n      taskConfigs.add(new TaskConfig(\"TaskOne\", new HashMap<String, String>()));\n      JobConfig.Builder jobBuilder = new JobConfig.Builder().setCommand(\"DummyCommand\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(_jobCommandMap);\n      workflowBuilder.addJob(\"JOB\" + i, jobBuilder);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    Assert.assertEquals(_runCounts.size(), 5);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskAssignmentCalculator.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2018-07-14 05:45:41","commitOrder":1,"curCode":"  public void testMultipleJobAssignmentOverlapEnabled() throws InterruptedException {\n    _runCounts.clear();\n    failTask = false;\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 40; i++) {\n      List<TaskConfig> taskConfigs = Lists.newArrayListWithCapacity(1);\n      taskConfigs.add(new TaskConfig(\"TaskOne\", new HashMap<String, String>()));\n      JobConfig.Builder jobBuilder = new JobConfig.Builder().setCommand(\"DummyCommand\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(_jobCommandMap);\n      workflowBuilder.addJob(\"JOB\" + i, jobBuilder);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    Assert.assertEquals(_runCounts.size(), 5);\n  }\n","date":"2018-07-14 08:38:58","endLine":166,"groupId":"6191","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleJobAssignmentOverlapEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/f0/2376f87f2e63830076ebb224e528beaafddf7f.src","preCode":"  public void testMultipleJobAssignmentOverlapEnabled() throws InterruptedException {\n    _runCounts.clear();\n    failTask = false;\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 40; i++) {\n      List<TaskConfig> taskConfigs = Lists.newArrayListWithCapacity(1);\n      taskConfigs.add(new TaskConfig(\"TaskOne\", new HashMap<String, String>()));\n      JobConfig.Builder jobBuilder = new JobConfig.Builder().setCommand(\"DummyCommand\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(_jobCommandMap);\n      workflowBuilder.addJob(\"JOB\" + i, jobBuilder);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    Assert.assertEquals(_runCounts.size(), 5);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskAssignmentCalculator.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"}],"commitId":"4db61b56e473b64ec9956f694dd2ac6a8d328ed4","commitMessage":"@@@[HELIX-730] Add ThreadCountBasedAssignmentCalculator and integrate with Workflow/JobRebalancer and fix rebalancing logic\n\nFor quota-based scheduling of tasks.  we have added the TaskAssigner interface that takes into account AssignableInstances by way of AssignableInstanceManager. In order to use this in the currently-existing pipeline prior to Task Framework 2.0.  GenericTaskAssignmentCalculator was replaced with ThreadCountBasedAssignmentCalculator.  which is a wrapper around TaskAssigner. Necessary adjustments were made in Workflow/JobRebalancer for this replacement. Also the rebalance logic in Workflow/JobRebalancer was reviewed and fixed. Additionally.  TestQuotaBasedScheduling is added to test quota-based task scheduling. Note that quotas will apply to both generic and targeted jobs.\n\nA few bugs were uncovered during this process such as the faulty retry logic that never really got tasks to restart. For more details.  see the changelist below:\n\nChangelist:\n    1. Add ThreadCountBasedAssignmentCalculator.  a wrapper around ThreadCountBasedTaskAssigner\n    2. Make logic changes in JobRebalancer to enable the use of ThreadCountBasedAssignmentCalculator\n    3. Fix the failing test by using a thread-safe map and rename TestGenericTaskAssignmentCalculator to TestTaskAssignmentCalculator to better reflect what its tests are doing\n    4. Add retry logic that was previously absent for INIT and DROPPED tasks in JobRebalancer\n    5. Add TestQuotaBasedScheduling to test that jobs and tasks were being assigned and scheduled per quota config set in ClusterConfig\n    6. Add more log messages to aid with task-scheduling debugging in AssignableInstance\n    7. In AbstractTaskDispatcher.  for tasks that are STOPPED.  TIMED_OUT.  TASK_ERROR.  the retry logic was newly implemented so that they get re-started correctly\n    8. In AbstractTaskDispatcher.  when enforcing overlapAssign for jobs with isAllowOverlapAssignment().  a fix was implemented so that only jobs whose state is IN_PROGRESS are considered\n    9. In AbstractTaskDispatcher.  isWorkflowFinished() method was modified so that non-active jobs will have their tasks' resource freed from AssignableInstances to prevent resource leak\n   10. In markJobFailed() and markJobCompleted().  non-active jobs will have their tasks' resource freed from AssignableInstances to prevent resource leak\n   11. Fix the logic so that quotas do not apply to targeted jobs\n   12. Fix TestTaskRebalancer (assumes Consistent Hashing.  which is no longer used)\n   13. Fix TestIndependentTaskRebalancer (assumes Consistent Hashing.  no longer used)\n   14. Assignment logic was improved so that incomplete tasks whose assigned participants are no longer live will be re-assigned accordingly\n   15. Fix TestTaskRebalanceFailover (tasks on non-live instances will be re-assigned promptly)\n   16. Fix TestRebalanceRunningTask (targeted jobs will get tasks reassigned upon liveInstance and currentState change)\n   17. Fix a bug in FixedAssignmentCalculator and assignment logic for targeted jobs such that a task index will no longer be assigned multiple times\n   18. Fix TestJobFailureTaskNotStarted (tasks were not being assigned at all due to having reached maximum capacity for quota)\n   19. Add targetedTaskConfigMap field in JobConfig to cache TaskConfig objects for targeted tasks to reduce object creation and GC overload\n   20. Fix JobConfig so that it doesn't write quotaType to ZooKeeper when quotaType is null or not set\n   21. Fix deleteWorkflow() in TaskUtil so that the earliest delete failure will render the entire method as failed (and return prematurely to prevent breaking other ZNodes from incomplete deletion)\n   22. Fix TestDeleteWorkflow by adding another removeProperty() clause to lower failure rate\n","date":"2018-07-14 08:38:58","modifiedFileCount":"36","status":"B","submitter":"Hunter Lee"},{"authorTime":"2019-05-04 08:52:17","codes":[{"authorDate":"2019-05-04 08:52:17","commitOrder":2,"curCode":"  public void testMultipleJobAssignment() throws InterruptedException {\n    _runCounts.clear();\n    failTask = false;\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n\n    for (int i = 0; i < 20; i++) {\n      List<TaskConfig> taskConfigs = Lists.newArrayListWithCapacity(1);\n      taskConfigs.add(new TaskConfig(\"TaskOne\", new HashMap<>()));\n      JobConfig.Builder jobBuilder = new JobConfig.Builder().setCommand(\"DummyCommand\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(_jobCommandMap);\n      workflowBuilder.addJob(\"JOB\" + i, jobBuilder);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    Assert.assertEquals(_runCounts.size(), 5);\n  }\n","date":"2019-05-25 09:19:21","endLine":127,"groupId":"10534","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleJobAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ba/a8910e6a7f9636543237ee3b50bd042458ce56.src","preCode":"  public void testMultipleJobAssignment() throws InterruptedException {\n    _runCounts.clear();\n    failTask = false;\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n\n    for (int i = 0; i < 20; i++) {\n      List<TaskConfig> taskConfigs = Lists.newArrayListWithCapacity(1);\n      taskConfigs.add(new TaskConfig(\"TaskOne\", new HashMap<String, String>()));\n      JobConfig.Builder jobBuilder = new JobConfig.Builder().setCommand(\"DummyCommand\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(_jobCommandMap);\n      workflowBuilder.addJob(\"JOB\" + i, jobBuilder);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    Assert.assertEquals(_runCounts.size(), 5);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskAssignmentCalculator.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-05-04 08:52:17","commitOrder":2,"curCode":"  public void testMultipleJobAssignmentOverlapEnabled() throws InterruptedException {\n    _runCounts.clear();\n    failTask = false;\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 40; i++) {\n      List<TaskConfig> taskConfigs = Lists.newArrayListWithCapacity(1);\n      taskConfigs.add(new TaskConfig(\"TaskOne\", new HashMap<>()));\n      JobConfig.Builder jobBuilder = new JobConfig.Builder().setCommand(\"DummyCommand\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(_jobCommandMap);\n      workflowBuilder.addJob(\"JOB\" + i, jobBuilder);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    Assert.assertEquals(_runCounts.size(), 5);\n  }\n","date":"2019-05-25 09:19:21","endLine":156,"groupId":"10534","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleJobAssignmentOverlapEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-helix-10-0.7/blobInfo/CC_OUT/blobs/ba/a8910e6a7f9636543237ee3b50bd042458ce56.src","preCode":"  public void testMultipleJobAssignmentOverlapEnabled() throws InterruptedException {\n    _runCounts.clear();\n    failTask = false;\n    String workflowName = TestHelper.getTestMethodName();\n    Workflow.Builder workflowBuilder = new Workflow.Builder(workflowName);\n    WorkflowConfig.Builder configBuilder = new WorkflowConfig.Builder(workflowName);\n    configBuilder.setAllowOverlapJobAssignment(true);\n    workflowBuilder.setWorkflowConfig(configBuilder.build());\n\n    for (int i = 0; i < 40; i++) {\n      List<TaskConfig> taskConfigs = Lists.newArrayListWithCapacity(1);\n      taskConfigs.add(new TaskConfig(\"TaskOne\", new HashMap<String, String>()));\n      JobConfig.Builder jobBuilder = new JobConfig.Builder().setCommand(\"DummyCommand\")\n          .addTaskConfigs(taskConfigs).setJobCommandConfigMap(_jobCommandMap);\n      workflowBuilder.addJob(\"JOB\" + i, jobBuilder);\n    }\n\n    _driver.start(workflowBuilder.build());\n    _driver.pollForWorkflowState(workflowName, TaskState.COMPLETED);\n\n    Assert.assertEquals(_runCounts.size(), 5);\n  }\n","realPath":"helix-core/src/test/java/org/apache/helix/integration/task/TestTaskAssignmentCalculator.java","repoName":"helix","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"5ce3934c5b4655e90021061720adbb3a42b1bb6b","commitMessage":"@@@TEST: Groom and refactor Helix integration tests\n\nIt was observed that there was a lot of technical debt (improper and buggy cleanup) in Helix's unit and integration tests. There were also mock controller and participant threads that were never shut down properly. This was preventing mvn test suite from completing over a remote machine (TMC).  and even on local environments.  mvn test was not passing. This diff refactors tests and makes sure that ZK is cleaned up after tests.\n\nChangelist:\n1. Inspect and correct mock threads (controller.  participant.  spectator.  etc)\n2. Ensure there are no leftover garbage clusters from tests\n3. Java 8 syntax\n4. Style fixes in old tests using Helix open source style file (helix-style.xml)\n\nRB=1654905\nG=helix-reviewers\nA=jxue. eblumena\n\nSigned-off-by: Hunter Lee <hulee@linkedin.com>\n","date":"2019-05-25 09:19:21","modifiedFileCount":"122","status":"M","submitter":"Hunter Lee"}]
