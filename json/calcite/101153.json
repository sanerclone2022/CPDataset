[{"authorTime":"2015-03-26 02:29:27","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":2,"curCode":"  @Test public void testArithmeticExpressionsWithStrings() {\n    \r\n    checkExp(\"1 + null\");\n    checkExp(\"1 - null\");\n    checkExp(\"1 / null\");\n    checkExp(\"1 * null\");\n    checkExp(\"MOD(1, null)\");\n\n    sql(\"select 1+'2', 2-'3', 2*'3', 2/'3', MOD(4,'3') \"\n        + \"from (values (true, true, true, true, true))\")\n        .type(\"RecordType(INTEGER NOT NULL EXPR$0, \"\n            + \"INTEGER NOT NULL EXPR$1, \"\n            + \"INTEGER NOT NULL EXPR$2, \"\n            + \"INTEGER NOT NULL EXPR$3, \"\n            + \"DECIMAL(19, 19) \"\n            + \"NOT NULL EXPR$4) NOT NULL\");\n    checkExp(\"select abs(t1_varchar20) from t1\");\n    checkExp(\"select sum(t1_varchar20) from t1\");\n    checkExp(\"select avg(t1_varchar20) from t1\");\n    tester.setFor(SqlStdOperatorTable.STDDEV_POP);\n    tester.setFor(SqlStdOperatorTable.STDDEV_SAMP);\n    checkExp(\"select STDDEV_POP(t1_varchar20) from t1\");\n    checkExp(\"select STDDEV_SAMP(t1_varchar20) from t1\");\n    checkExp(\"select -(t1_varchar20) from t1\");\n    checkExp(\"select +(t1_varchar20) from t1\");\n    tester.setFor(SqlStdOperatorTable.VAR_POP);\n    tester.setFor(SqlStdOperatorTable.VAR_SAMP);\n    checkExp(\"select VAR_POP(t1_varchar20) from t1\");\n    checkExp(\"select VAR_SAMP(t1_varchar20) from t1\");\n    \r\n    checkExpType(\"'12.3'/5\", \"INTEGER NOT NULL\");\n    checkExpType(\"'12.3'/cast(5 as bigint)\", \"BIGINT NOT NULL\");\n    checkExpType(\"'12.3'/cast(5 as float)\", \"FLOAT NOT NULL\");\n    checkExpType(\"'12.3'/cast(5 as double)\", \"DOUBLE NOT NULL\");\n    checkExpType(\"'12.3'/5.1\", \"DECIMAL(19, 18) NOT NULL\");\n    checkExpType(\"12.3/'5.1'\", \"DECIMAL(19, 0) NOT NULL\");\n    \r\n    checkExpType(\"'12.3' + '5'\", \"DECIMAL(19, 19) NOT NULL\");\n    checkExpType(\"'12.3' - '5'\", \"DECIMAL(19, 19) NOT NULL\");\n    checkExpType(\"'12.3' * '5'\", \"DECIMAL(19, 19) NOT NULL\");\n    checkExpType(\"'12.3' / '5'\", \"DECIMAL(19, 0) NOT NULL\");\n  }\n","date":"2019-08-29 17:01:46","endLine":535,"groupId":"4640","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testArithmeticExpressionsWithStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/46/b72bdf23d7967941d2294d91fce640ee73097d.src","preCode":"  @Test public void testArithmeticExpressionsWithStrings() {\n    \r\n    checkExp(\"1 + null\");\n    checkExp(\"1 - null\");\n    checkExp(\"1 / null\");\n    checkExp(\"1 * null\");\n    checkExp(\"MOD(1, null)\");\n\n    sql(\"select 1+'2', 2-'3', 2*'3', 2/'3', MOD(4,'3') \"\n        + \"from (values (true, true, true, true, true))\")\n        .type(\"RecordType(INTEGER NOT NULL EXPR$0, \"\n            + \"INTEGER NOT NULL EXPR$1, \"\n            + \"INTEGER NOT NULL EXPR$2, \"\n            + \"INTEGER NOT NULL EXPR$3, \"\n            + \"DECIMAL(19, 19) \"\n            + \"NOT NULL EXPR$4) NOT NULL\");\n    checkExp(\"select abs(t1_varchar20) from t1\");\n    checkExp(\"select sum(t1_varchar20) from t1\");\n    checkExp(\"select avg(t1_varchar20) from t1\");\n    tester.setFor(SqlStdOperatorTable.STDDEV_POP);\n    tester.setFor(SqlStdOperatorTable.STDDEV_SAMP);\n    checkExp(\"select STDDEV_POP(t1_varchar20) from t1\");\n    checkExp(\"select STDDEV_SAMP(t1_varchar20) from t1\");\n    checkExp(\"select -(t1_varchar20) from t1\");\n    checkExp(\"select +(t1_varchar20) from t1\");\n    tester.setFor(SqlStdOperatorTable.VAR_POP);\n    tester.setFor(SqlStdOperatorTable.VAR_SAMP);\n    checkExp(\"select VAR_POP(t1_varchar20) from t1\");\n    checkExp(\"select VAR_SAMP(t1_varchar20) from t1\");\n    \r\n    checkExpType(\"'12.3'/5\", \"INTEGER NOT NULL\");\n    checkExpType(\"'12.3'/cast(5 as bigint)\", \"BIGINT NOT NULL\");\n    checkExpType(\"'12.3'/cast(5 as float)\", \"FLOAT NOT NULL\");\n    checkExpType(\"'12.3'/cast(5 as double)\", \"DOUBLE NOT NULL\");\n    checkExpType(\"'12.3'/5.1\", \"DECIMAL(19, 18) NOT NULL\");\n    checkExpType(\"12.3/'5.1'\", \"DECIMAL(19, 0) NOT NULL\");\n    \r\n    checkExpType(\"'12.3' + '5'\", \"DECIMAL(19, 19) NOT NULL\");\n    checkExpType(\"'12.3' - '5'\", \"DECIMAL(19, 19) NOT NULL\");\n    checkExpType(\"'12.3' * '5'\", \"DECIMAL(19, 19) NOT NULL\");\n    checkExpType(\"'12.3' / '5'\", \"DECIMAL(19, 0) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/TypeCoercionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":494,"status":"B"},{"authorDate":"2015-03-26 02:29:27","commitOrder":2,"curCode":"  @Test public void testDateCompare() {\n    \r\n    \r\n    checkExpType(\"date '2015-03-17' < '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' > '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' = '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"'2015-03-17' < date '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between '2015-03-16' and '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between '2015-03-16' and '2015-03'||'-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"'2015-03-17' between date '2015-03-16' and date '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between date '2015-03-16' and '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between '2015-03-16' and date '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"time '12:34:56' < '12:34:57'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"timestamp '2015-03-17 12:34:56' < '2015-03-17 12:34:57'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"interval '2' hour < '2:30'\", \"BOOLEAN NOT NULL\");\n\n    \r\n    checkExpType(\"123 > '72'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"12.3 > '7.2'\", \"BOOLEAN NOT NULL\");\n\n    \r\n    checkExpType(\"true = 'true'\", \"BOOLEAN NOT NULL\");\n    checkExpFails(\"^true and 'true'^\",\n        \"Cannot apply 'AND' to arguments of type '<BOOLEAN> AND <CHAR\\\\(4\\\\)>'\\\\..*\");\n  }\n","date":"2015-04-03 16:10:06","endLine":6219,"groupId":"4640","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateCompare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ec/3fed1c9cc2f6ff42b4f8439dc2a581604fe788.src","preCode":"  @Test public void testDateCompare() {\n    \r\n    \r\n    checkExpType(\"date '2015-03-17' < '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' > '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' = '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"'2015-03-17' < date '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between '2015-03-16' and '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between '2015-03-16' and '2015-03'||'-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"'2015-03-17' between date '2015-03-16' and date '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between date '2015-03-16' and '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between '2015-03-16' and date '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"time '12:34:56' < '12:34:57'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"timestamp '2015-03-17 12:34:56' < '2015-03-17 12:34:57'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"interval '2' hour < '2:30'\", \"BOOLEAN NOT NULL\");\n\n    \r\n    checkExpType(\"123 > '72'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"12.3 > '7.2'\", \"BOOLEAN NOT NULL\");\n\n    \r\n    checkExpType(\"true = 'true'\", \"BOOLEAN NOT NULL\");\n    checkExpFails(\"^true and 'true'^\",\n        \"Cannot apply 'AND' to arguments of type '<BOOLEAN> AND <CHAR\\\\(4\\\\)>'\\\\..*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6189,"status":"NB"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testArithmeticExpressionsWithStrings() {\n    \r\n    expr(\"1 + null\").ok();\n    expr(\"1 - null\").ok();\n    expr(\"1 / null\").ok();\n    expr(\"1 * null\").ok();\n    expr(\"MOD(1, null)\").ok();\n\n    sql(\"select 1+'2', 2-'3', 2*'3', 2/'3', MOD(4,'3') \"\n        + \"from (values (true, true, true, true, true))\")\n        .type(\"RecordType(INTEGER NOT NULL EXPR$0, \"\n            + \"INTEGER NOT NULL EXPR$1, \"\n            + \"INTEGER NOT NULL EXPR$2, \"\n            + \"INTEGER NOT NULL EXPR$3, \"\n            + \"DECIMAL(19, 19) \"\n            + \"NOT NULL EXPR$4) NOT NULL\");\n    expr(\"select abs(t1_varchar20) from t1\").ok();\n    expr(\"select sum(t1_varchar20) from t1\").ok();\n    expr(\"select avg(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.STDDEV_POP);\n    tester.setFor(SqlStdOperatorTable.STDDEV_SAMP);\n    expr(\"select STDDEV_POP(t1_varchar20) from t1\").ok();\n    expr(\"select STDDEV_SAMP(t1_varchar20) from t1\").ok();\n    expr(\"select -(t1_varchar20) from t1\").ok();\n    expr(\"select +(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.VAR_POP);\n    tester.setFor(SqlStdOperatorTable.VAR_SAMP);\n    expr(\"select VAR_POP(t1_varchar20) from t1\").ok();\n    expr(\"select VAR_SAMP(t1_varchar20) from t1\").ok();\n    \r\n    expr(\"'12.3'/5\")\n        .columnType(\"INTEGER NOT NULL\");\n    expr(\"'12.3'/cast(5 as bigint)\")\n        .columnType(\"BIGINT NOT NULL\");\n    expr(\"'12.3'/cast(5 as float)\")\n        .columnType(\"FLOAT NOT NULL\");\n    expr(\"'12.3'/cast(5 as double)\")\n        .columnType(\"DOUBLE NOT NULL\");\n    expr(\"'12.3'/5.1\")\n        .columnType(\"DECIMAL(19, 18) NOT NULL\");\n    expr(\"12.3/'5.1'\")\n        .columnType(\"DECIMAL(19, 0) NOT NULL\");\n    \r\n    expr(\"'12.3' + '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' - '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' * '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' / '5'\")\n        .columnType(\"DECIMAL(19, 0) NOT NULL\");\n  }\n","date":"2019-09-24 02:59:18","endLine":545,"groupId":"13472","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testArithmeticExpressionsWithStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/162d6a33d4b71d1375c07c1d9f88949b96ef13.src","preCode":"  @Test public void testArithmeticExpressionsWithStrings() {\n    \r\n    checkExp(\"1 + null\");\n    checkExp(\"1 - null\");\n    checkExp(\"1 / null\");\n    checkExp(\"1 * null\");\n    checkExp(\"MOD(1, null)\");\n\n    sql(\"select 1+'2', 2-'3', 2*'3', 2/'3', MOD(4,'3') \"\n        + \"from (values (true, true, true, true, true))\")\n        .type(\"RecordType(INTEGER NOT NULL EXPR$0, \"\n            + \"INTEGER NOT NULL EXPR$1, \"\n            + \"INTEGER NOT NULL EXPR$2, \"\n            + \"INTEGER NOT NULL EXPR$3, \"\n            + \"DECIMAL(19, 19) \"\n            + \"NOT NULL EXPR$4) NOT NULL\");\n    checkExp(\"select abs(t1_varchar20) from t1\");\n    checkExp(\"select sum(t1_varchar20) from t1\");\n    checkExp(\"select avg(t1_varchar20) from t1\");\n    tester.setFor(SqlStdOperatorTable.STDDEV_POP);\n    tester.setFor(SqlStdOperatorTable.STDDEV_SAMP);\n    checkExp(\"select STDDEV_POP(t1_varchar20) from t1\");\n    checkExp(\"select STDDEV_SAMP(t1_varchar20) from t1\");\n    checkExp(\"select -(t1_varchar20) from t1\");\n    checkExp(\"select +(t1_varchar20) from t1\");\n    tester.setFor(SqlStdOperatorTable.VAR_POP);\n    tester.setFor(SqlStdOperatorTable.VAR_SAMP);\n    checkExp(\"select VAR_POP(t1_varchar20) from t1\");\n    checkExp(\"select VAR_SAMP(t1_varchar20) from t1\");\n    \r\n    checkExpType(\"'12.3'/5\", \"INTEGER NOT NULL\");\n    checkExpType(\"'12.3'/cast(5 as bigint)\", \"BIGINT NOT NULL\");\n    checkExpType(\"'12.3'/cast(5 as float)\", \"FLOAT NOT NULL\");\n    checkExpType(\"'12.3'/cast(5 as double)\", \"DOUBLE NOT NULL\");\n    checkExpType(\"'12.3'/5.1\", \"DECIMAL(19, 18) NOT NULL\");\n    checkExpType(\"12.3/'5.1'\", \"DECIMAL(19, 0) NOT NULL\");\n    \r\n    checkExpType(\"'12.3' + '5'\", \"DECIMAL(19, 19) NOT NULL\");\n    checkExpType(\"'12.3' - '5'\", \"DECIMAL(19, 19) NOT NULL\");\n    checkExpType(\"'12.3' * '5'\", \"DECIMAL(19, 19) NOT NULL\");\n    checkExpType(\"'12.3' / '5'\", \"DECIMAL(19, 0) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/TypeCoercionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":494,"status":"M"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testDateCompare() {\n    \r\n    \r\n    expr(\"date '2015-03-17' < '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' > '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' = '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' < date '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03'||'-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' between date '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between date '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"time '12:34:56' < '12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"timestamp '2015-03-17 12:34:56' < '2015-03-17 12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"interval '2' hour < '2:30'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"123 > '72'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"12.3 > '7.2'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"true = 'true'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"^true and 'true'^\")\n        .fails(\"Cannot apply 'AND' to arguments of type '<BOOLEAN> AND <CHAR\\\\(4\\\\)>'\\\\..*\");\n  }\n","date":"2019-09-24 02:59:18","endLine":7198,"groupId":"13472","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateCompare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testDateCompare() {\n    \r\n    \r\n    checkExpType(\"date '2015-03-17' < '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' > '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' = '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"'2015-03-17' < date '2015-03-18'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between '2015-03-16' and '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between '2015-03-16' and '2015-03'||'-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"'2015-03-17' between date '2015-03-16' and date '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between date '2015-03-16' and '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"date '2015-03-17' between '2015-03-16' and date '2015-03-19'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"time '12:34:56' < '12:34:57'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"timestamp '2015-03-17 12:34:56' < '2015-03-17 12:34:57'\",\n        \"BOOLEAN NOT NULL\");\n    checkExpType(\"interval '2' hour < '2:30'\", \"BOOLEAN NOT NULL\");\n\n    \r\n    checkExpType(\"123 > '72'\", \"BOOLEAN NOT NULL\");\n    checkExpType(\"12.3 > '7.2'\", \"BOOLEAN NOT NULL\");\n\n    \r\n    checkExpType(\"true = 'true'\", \"BOOLEAN NOT NULL\");\n    checkExpFails(\"^true and 'true'^\",\n        \"Cannot apply 'AND' to arguments of type '<BOOLEAN> AND <CHAR\\\\(4\\\\)>'\\\\..*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7159,"status":"M"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testArithmeticExpressionsWithStrings() {\n    \r\n    expr(\"1 + null\").ok();\n    expr(\"1 - null\").ok();\n    expr(\"1 / null\").ok();\n    expr(\"1 * null\").ok();\n    expr(\"MOD(1, null)\").ok();\n\n    sql(\"select 1+'2', 2-'3', 2*'3', 2/'3', MOD(4,'3') \"\n        + \"from (values (true, true, true, true, true))\")\n        .type(\"RecordType(INTEGER NOT NULL EXPR$0, \"\n            + \"INTEGER NOT NULL EXPR$1, \"\n            + \"INTEGER NOT NULL EXPR$2, \"\n            + \"INTEGER NOT NULL EXPR$3, \"\n            + \"DECIMAL(19, 19) \"\n            + \"NOT NULL EXPR$4) NOT NULL\");\n    expr(\"select abs(t1_varchar20) from t1\").ok();\n    expr(\"select sum(t1_varchar20) from t1\").ok();\n    expr(\"select avg(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.STDDEV_POP);\n    tester.setFor(SqlStdOperatorTable.STDDEV_SAMP);\n    expr(\"select STDDEV_POP(t1_varchar20) from t1\").ok();\n    expr(\"select STDDEV_SAMP(t1_varchar20) from t1\").ok();\n    expr(\"select -(t1_varchar20) from t1\").ok();\n    expr(\"select +(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.VAR_POP);\n    tester.setFor(SqlStdOperatorTable.VAR_SAMP);\n    expr(\"select VAR_POP(t1_varchar20) from t1\").ok();\n    expr(\"select VAR_SAMP(t1_varchar20) from t1\").ok();\n    \r\n    expr(\"'12.3'/5\")\n        .columnType(\"INTEGER NOT NULL\");\n    expr(\"'12.3'/cast(5 as bigint)\")\n        .columnType(\"BIGINT NOT NULL\");\n    expr(\"'12.3'/cast(5 as float)\")\n        .columnType(\"FLOAT NOT NULL\");\n    expr(\"'12.3'/cast(5 as double)\")\n        .columnType(\"DOUBLE NOT NULL\");\n    expr(\"'12.3'/5.1\")\n        .columnType(\"DECIMAL(19, 18) NOT NULL\");\n    expr(\"12.3/'5.1'\")\n        .columnType(\"DECIMAL(19, 0) NOT NULL\");\n    \r\n    expr(\"'12.3' + '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' - '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' * '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' / '5'\")\n        .columnType(\"DECIMAL(19, 0) NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":554,"groupId":"13472","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testArithmeticExpressionsWithStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/1c7f60b269e8e433f4d85ea179689c69d067c2.src","preCode":"  @Test public void testArithmeticExpressionsWithStrings() {\n    \r\n    expr(\"1 + null\").ok();\n    expr(\"1 - null\").ok();\n    expr(\"1 / null\").ok();\n    expr(\"1 * null\").ok();\n    expr(\"MOD(1, null)\").ok();\n\n    sql(\"select 1+'2', 2-'3', 2*'3', 2/'3', MOD(4,'3') \"\n        + \"from (values (true, true, true, true, true))\")\n        .type(\"RecordType(INTEGER NOT NULL EXPR$0, \"\n            + \"INTEGER NOT NULL EXPR$1, \"\n            + \"INTEGER NOT NULL EXPR$2, \"\n            + \"INTEGER NOT NULL EXPR$3, \"\n            + \"DECIMAL(19, 19) \"\n            + \"NOT NULL EXPR$4) NOT NULL\");\n    expr(\"select abs(t1_varchar20) from t1\").ok();\n    expr(\"select sum(t1_varchar20) from t1\").ok();\n    expr(\"select avg(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.STDDEV_POP);\n    tester.setFor(SqlStdOperatorTable.STDDEV_SAMP);\n    expr(\"select STDDEV_POP(t1_varchar20) from t1\").ok();\n    expr(\"select STDDEV_SAMP(t1_varchar20) from t1\").ok();\n    expr(\"select -(t1_varchar20) from t1\").ok();\n    expr(\"select +(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.VAR_POP);\n    tester.setFor(SqlStdOperatorTable.VAR_SAMP);\n    expr(\"select VAR_POP(t1_varchar20) from t1\").ok();\n    expr(\"select VAR_SAMP(t1_varchar20) from t1\").ok();\n    \r\n    expr(\"'12.3'/5\")\n        .columnType(\"INTEGER NOT NULL\");\n    expr(\"'12.3'/cast(5 as bigint)\")\n        .columnType(\"BIGINT NOT NULL\");\n    expr(\"'12.3'/cast(5 as float)\")\n        .columnType(\"FLOAT NOT NULL\");\n    expr(\"'12.3'/cast(5 as double)\")\n        .columnType(\"DOUBLE NOT NULL\");\n    expr(\"'12.3'/5.1\")\n        .columnType(\"DECIMAL(19, 18) NOT NULL\");\n    expr(\"12.3/'5.1'\")\n        .columnType(\"DECIMAL(19, 0) NOT NULL\");\n    \r\n    expr(\"'12.3' + '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' - '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' * '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' / '5'\")\n        .columnType(\"DECIMAL(19, 0) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/TypeCoercionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testDateCompare() {\n    \r\n    \r\n    expr(\"date '2015-03-17' < '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' > '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' = '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' < date '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03'||'-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' between date '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between date '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"time '12:34:56' < '12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"timestamp '2015-03-17 12:34:56' < '2015-03-17 12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"interval '2' hour < '2:30'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"123 > '72'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"12.3 > '7.2'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"true = 'true'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"^true and 'true'^\")\n        .fails(\"Cannot apply 'AND' to arguments of type '<BOOLEAN> AND <CHAR\\\\(4\\\\)>'\\\\..*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7278,"groupId":"13472","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateCompare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testDateCompare() {\n    \r\n    \r\n    expr(\"date '2015-03-17' < '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' > '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' = '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' < date '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03'||'-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' between date '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between date '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"time '12:34:56' < '12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"timestamp '2015-03-17 12:34:56' < '2015-03-17 12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"interval '2' hour < '2:30'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"123 > '72'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"12.3 > '7.2'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"true = 'true'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"^true and 'true'^\")\n        .fails(\"Cannot apply 'AND' to arguments of type '<BOOLEAN> AND <CHAR\\\\(4\\\\)>'\\\\..*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7239,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-09-21 11:07:54","commitOrder":5,"curCode":"  @Test void testArithmeticExpressionsWithStrings() {\n    \r\n    expr(\"1 + null\").ok();\n    expr(\"1 - null\").ok();\n    expr(\"1 / null\").ok();\n    expr(\"1 * null\").ok();\n    expr(\"MOD(1, null)\").ok();\n\n    sql(\"select 1+'2', 2-'3', 2*'3', 2/'3', MOD(4,'3') \"\n        + \"from (values (true, true, true, true, true))\")\n        .type(\"RecordType(INTEGER NOT NULL EXPR$0, \"\n            + \"INTEGER NOT NULL EXPR$1, \"\n            + \"INTEGER NOT NULL EXPR$2, \"\n            + \"INTEGER NOT NULL EXPR$3, \"\n            + \"DECIMAL(19, 9) \"\n            + \"NOT NULL EXPR$4) NOT NULL\");\n    expr(\"select abs(t1_varchar20) from t1\").ok();\n    expr(\"select sum(t1_varchar20) from t1\").ok();\n    expr(\"select avg(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.STDDEV_POP);\n    tester.setFor(SqlStdOperatorTable.STDDEV_SAMP);\n    expr(\"select STDDEV_POP(t1_varchar20) from t1\").ok();\n    expr(\"select STDDEV_SAMP(t1_varchar20) from t1\").ok();\n    expr(\"select -(t1_varchar20) from t1\").ok();\n    expr(\"select +(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.VAR_POP);\n    tester.setFor(SqlStdOperatorTable.VAR_SAMP);\n    expr(\"select VAR_POP(t1_varchar20) from t1\").ok();\n    expr(\"select VAR_SAMP(t1_varchar20) from t1\").ok();\n    \r\n    expr(\"'12.3'/5\")\n        .columnType(\"INTEGER NOT NULL\");\n    expr(\"'12.3'/cast(5 as bigint)\")\n        .columnType(\"BIGINT NOT NULL\");\n    expr(\"'12.3'/cast(5 as float)\")\n        .columnType(\"FLOAT NOT NULL\");\n    expr(\"'12.3'/cast(5 as double)\")\n        .columnType(\"DOUBLE NOT NULL\");\n    expr(\"'12.3'/5.1\")\n        .columnType(\"DECIMAL(19, 8) NOT NULL\");\n    expr(\"12.3/'5.1'\")\n        .columnType(\"DECIMAL(19, 8) NOT NULL\");\n    \r\n    expr(\"'12.3' + '5'\")\n        .columnType(\"DECIMAL(19, 9) NOT NULL\");\n    expr(\"'12.3' - '5'\")\n        .columnType(\"DECIMAL(19, 9) NOT NULL\");\n    expr(\"'12.3' * '5'\")\n        .columnType(\"DECIMAL(19, 18) NOT NULL\");\n    expr(\"'12.3' / '5'\")\n        .columnType(\"DECIMAL(19, 0) NOT NULL\");\n  }\n","date":"2020-10-14 18:19:27","endLine":560,"groupId":"101153","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testArithmeticExpressionsWithStrings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9f/ff8c976a91f7034412879358bebd2c1586fb01.src","preCode":"  @Test void testArithmeticExpressionsWithStrings() {\n    \r\n    expr(\"1 + null\").ok();\n    expr(\"1 - null\").ok();\n    expr(\"1 / null\").ok();\n    expr(\"1 * null\").ok();\n    expr(\"MOD(1, null)\").ok();\n\n    sql(\"select 1+'2', 2-'3', 2*'3', 2/'3', MOD(4,'3') \"\n        + \"from (values (true, true, true, true, true))\")\n        .type(\"RecordType(INTEGER NOT NULL EXPR$0, \"\n            + \"INTEGER NOT NULL EXPR$1, \"\n            + \"INTEGER NOT NULL EXPR$2, \"\n            + \"INTEGER NOT NULL EXPR$3, \"\n            + \"DECIMAL(19, 19) \"\n            + \"NOT NULL EXPR$4) NOT NULL\");\n    expr(\"select abs(t1_varchar20) from t1\").ok();\n    expr(\"select sum(t1_varchar20) from t1\").ok();\n    expr(\"select avg(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.STDDEV_POP);\n    tester.setFor(SqlStdOperatorTable.STDDEV_SAMP);\n    expr(\"select STDDEV_POP(t1_varchar20) from t1\").ok();\n    expr(\"select STDDEV_SAMP(t1_varchar20) from t1\").ok();\n    expr(\"select -(t1_varchar20) from t1\").ok();\n    expr(\"select +(t1_varchar20) from t1\").ok();\n    tester.setFor(SqlStdOperatorTable.VAR_POP);\n    tester.setFor(SqlStdOperatorTable.VAR_SAMP);\n    expr(\"select VAR_POP(t1_varchar20) from t1\").ok();\n    expr(\"select VAR_SAMP(t1_varchar20) from t1\").ok();\n    \r\n    expr(\"'12.3'/5\")\n        .columnType(\"INTEGER NOT NULL\");\n    expr(\"'12.3'/cast(5 as bigint)\")\n        .columnType(\"BIGINT NOT NULL\");\n    expr(\"'12.3'/cast(5 as float)\")\n        .columnType(\"FLOAT NOT NULL\");\n    expr(\"'12.3'/cast(5 as double)\")\n        .columnType(\"DOUBLE NOT NULL\");\n    expr(\"'12.3'/5.1\")\n        .columnType(\"DECIMAL(19, 18) NOT NULL\");\n    expr(\"12.3/'5.1'\")\n        .columnType(\"DECIMAL(19, 0) NOT NULL\");\n    \r\n    expr(\"'12.3' + '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' - '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' * '5'\")\n        .columnType(\"DECIMAL(19, 19) NOT NULL\");\n    expr(\"'12.3' / '5'\")\n        .columnType(\"DECIMAL(19, 0) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/TypeCoercionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testDateCompare() {\n    \r\n    \r\n    expr(\"date '2015-03-17' < '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' > '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' = '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' < date '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03'||'-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' between date '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between date '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"time '12:34:56' < '12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"timestamp '2015-03-17 12:34:56' < '2015-03-17 12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"interval '2' hour < '2:30'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"123 > '72'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"12.3 > '7.2'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"true = 'true'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"^true and 'true'^\")\n        .fails(\"Cannot apply 'AND' to arguments of type '<BOOLEAN> AND <CHAR\\\\(4\\\\)>'\\\\..*\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7278,"groupId":"101153","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateCompare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test void testDateCompare() {\n    \r\n    \r\n    expr(\"date '2015-03-17' < '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' > '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' = '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' < date '2015-03-18'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and '2015-03'||'-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"'2015-03-17' between date '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between date '2015-03-16' and '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"date '2015-03-17' between '2015-03-16' and date '2015-03-19'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"time '12:34:56' < '12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"timestamp '2015-03-17 12:34:56' < '2015-03-17 12:34:57'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"interval '2' hour < '2:30'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"123 > '72'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"12.3 > '7.2'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n\n    \r\n    expr(\"true = 'true'\")\n        .columnType(\"BOOLEAN NOT NULL\");\n    expr(\"^true and 'true'^\")\n        .fails(\"Cannot apply 'AND' to arguments of type '<BOOLEAN> AND <CHAR\\\\(4\\\\)>'\\\\..*\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7239,"status":"N"}],"commitId":"16b22b105dfcb3d95cc7af8eb54105f231d18cc9","commitMessage":"@@@[CALCITE-4240] SqlTypeUtil#getMaxPrecisionScaleDecimal returns a decimal that with same precision and scale (Jiatao Tao)\n\nThe SqlTypeUtil#getMaxPrecisionScaleDecimal now returns decimal type with max\nprecision and scale half of that.\n\nPreviously it returns DECIMAL(19.  19) which is invalid.\n\nclose apache/calcite#2161\n","date":"2020-10-14 18:19:27","modifiedFileCount":"7","status":"M","submitter":"Jiatao Tao"}]
