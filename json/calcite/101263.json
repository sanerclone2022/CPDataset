[{"authorTime":"2015-06-02 12:00:59","codes":[{"authorDate":"2015-06-02 12:00:59","commitOrder":1,"curCode":"  @Test public void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .intersect(false)\n            .build();\n    assertThat(RelOptUtil.toString(root),\n        is(\"LogicalIntersect(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-06-06 07:06:13","endLine":361,"groupId":"6491","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/351d522e14f5980ab6cf20f3de4f946e14e5b0.src","preCode":"  @Test public void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .intersect(false)\n            .build();\n    assertThat(RelOptUtil.toString(root),\n        is(\"LogicalIntersect(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"B"},{"authorDate":"2015-06-02 12:00:59","commitOrder":1,"curCode":"  @Test public void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .minus(false)\n            .build();\n    assertThat(RelOptUtil.toString(root),\n        is(\"LogicalMinus(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-06-06 07:06:13","endLine":388,"groupId":"6491","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/351d522e14f5980ab6cf20f3de4f946e14e5b0.src","preCode":"  @Test public void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .minus(false)\n            .build();\n    assertThat(RelOptUtil.toString(root),\n        is(\"LogicalMinus(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"B"}],"commitId":"6609cb1a30bf36b1223078e8ebaf7cc9f7289b7c","commitMessage":"@@@[CALCITE-748] Add RelBuilder.  builder for expressions in relational algebra\n\nDeprecate RelTraitSet argument to SortFactory.createSort.\n\nAdd RelProtoBuilder and use it in one planner rule.  FilterAggregateTransposeRule.\n","date":"2015-06-06 07:06:13","modifiedFileCount":"13","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-06-19 02:28:14","codes":[{"authorDate":"2015-06-19 02:28:14","commitOrder":2,"curCode":"  @Test public void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .intersect(false)\n            .build();\n    assertThat(str(root),\n        is(\"LogicalIntersect(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-06-19 02:28:14","endLine":367,"groupId":"6491","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0a/2b9900681179deddc7911542f2a928142c0185.src","preCode":"  @Test public void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .intersect(false)\n            .build();\n    assertThat(RelOptUtil.toString(root),\n        is(\"LogicalIntersect(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2015-06-19 02:28:14","commitOrder":2,"curCode":"  @Test public void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .minus(false)\n            .build();\n    assertThat(str(root),\n        is(\"LogicalMinus(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-06-19 02:28:14","endLine":394,"groupId":"6491","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0a/2b9900681179deddc7911542f2a928142c0185.src","preCode":"  @Test public void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .minus(false)\n            .build();\n    assertThat(RelOptUtil.toString(root),\n        is(\"LogicalMinus(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"}],"commitId":"02eddd18aa516b19022ceb85a775071a24b4e518","commitMessage":"@@@Fix Windows line-endings in RelBuilderTest\n","date":"2015-06-19 02:28:14","modifiedFileCount":"1","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-09-22 16:20:38","codes":[{"authorDate":"2015-09-22 16:20:38","commitOrder":3,"curCode":"  @Test public void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .intersect(false)\n            .build();\n    assertThat(str(root),\n        is(\"LogicalIntersect(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-09-28 11:22:49","endLine":559,"groupId":"7257","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/11fd1d574f791dd869cfb77876e386225d651f.src","preCode":"  @Test public void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .intersect(false)\n            .build();\n    assertThat(str(root),\n        is(\"LogicalIntersect(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"M"},{"authorDate":"2015-09-22 16:20:38","commitOrder":3,"curCode":"  @Test public void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .minus(false)\n            .build();\n    assertThat(str(root),\n        is(\"LogicalMinus(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-09-28 11:22:49","endLine":613,"groupId":"7257","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/11fd1d574f791dd869cfb77876e386225d651f.src","preCode":"  @Test public void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .minus(false)\n            .build();\n    assertThat(str(root),\n        is(\"LogicalMinus(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":588,"status":"M"}],"commitId":"815fa262b83d5a864b1eacdc3661df3b04704c20","commitMessage":"@@@[CALCITE-828] Use RelBuilder in rules rather than type-specific RelNode factories\n\nAll rules now have a RelBuilderFactory.  from which RelOptCall can\ncreate a RelBuilder. All built-in rules that took a relational\nexpression factory (for example ProjectFactory) now use the RelBuilder.\nWe have converted some.  but not all.  other implicit uses of a factory.\n\nWe now recommend that any rules that are generic have a\nRelBuilderFactory constructor parameter.  but we have not changed\nexisting rules to implement this policy. People will need to adapt\nrules and write tests to ensure the rules are generic.\n\nAdd various methods to RelBuilder.\n\nMostly we add new rule constructors and deprecate the old constructor.\nBut a few breaking changes:\n* Rename ProtoRelBuilder to RelBuilderFactory;\n* Rename DEFAULT_PROTO to LOGICAL_BUILDER;\n* Change signature of TableScan.project method;\n* Change signature of RelFieldTrimmer constructor;\n* Add filter argument to RelBuilder.aggregateCall method.\n\nAlso.  not an API change.  but a change in behavior: RelBuilder methods\nto create set operations (union.  except.  intersect) get their\nleft-to-right arguments by reading the oldest-to-newest stack elements.\n","date":"2015-09-28 11:22:49","modifiedFileCount":"49","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-03-01 10:10:35","codes":[{"authorDate":"2018-03-01 10:10:35","commitOrder":4,"curCode":"  @Test public void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .intersect(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalIntersect(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":1096,"groupId":"7257","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .intersect(false)\n            .build();\n    assertThat(str(root),\n        is(\"LogicalIntersect(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1070,"status":"M"},{"authorDate":"2018-03-01 10:10:35","commitOrder":4,"curCode":"  @Test public void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .minus(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalMinus(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":1152,"groupId":"7257","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .minus(false)\n            .build();\n    assertThat(str(root),\n        is(\"LogicalMinus(all=[false])\\n\"\n            + \"  LogicalProject(DEPTNO=[$0])\\n\"\n            + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n            + \"  LogicalProject(EMPNO=[$0])\\n\"\n            + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n            + \"      LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1126,"status":"M"}],"commitId":"fb8ebd31526cd2e203fa3526ca8de7a22ee0d139","commitMessage":"@@@[CALCITE-2197] Fix test failures on Windows due to line endings\n\nAdd several new matchers in Matchers: isLinux.  containsStringLinux. \nhasTree.  compose. Change tests that generate platform-specific strings\nto use them.\n","date":"2018-03-12 15:16:13","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .intersect(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalIntersect(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":1828,"groupId":"7257","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .intersect(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalIntersect(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1802,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .minus(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalMinus(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":1884,"groupId":"7257","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .minus(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalMinus(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1858,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2021-09-17 17:38:52","codes":[{"authorDate":"2021-09-17 17:38:52","commitOrder":6,"curCode":"  @Test void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.equals(builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .intersect(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalIntersect(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2021-09-18 03:08:56","endLine":2145,"groupId":"101263","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c0/95dbb7ba6f6c8e91ad0cde63c3b1b7581e906d.src","preCode":"  @Test void testIntersect() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .intersect(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalIntersect(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2120,"status":"M"},{"authorDate":"2021-09-17 17:38:52","commitOrder":6,"curCode":"  @Test void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.equals(builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .minus(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalMinus(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2021-09-18 03:08:56","endLine":2200,"groupId":"101263","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testExcept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c0/95dbb7ba6f6c8e91ad0cde63c3b1b7581e906d.src","preCode":"  @Test void testExcept() {\n    \r\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"DEPT\")\n            .project(builder.field(\"DEPTNO\"))\n            .scan(\"EMP\")\n            .filter(\n                builder.call(SqlStdOperatorTable.EQUALS,\n                    builder.field(\"DEPTNO\"),\n                    builder.literal(20)))\n            .project(builder.field(\"EMPNO\"))\n            .minus(false)\n            .build();\n    final String expected = \"\"\n        + \"LogicalMinus(all=[false])\\n\"\n        + \"  LogicalProject(DEPTNO=[$0])\\n\"\n        + \"    LogicalTableScan(table=[[scott, DEPT]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0])\\n\"\n        + \"    LogicalFilter(condition=[=($7, 20)])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2175,"status":"M"}],"commitId":"4d82c5346292b32a1301214376366c2e8c5a892e","commitMessage":"@@@Add RelBuilder.lessThan.  and use RelBuilder shorthands\n","date":"2021-09-18 03:08:56","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
