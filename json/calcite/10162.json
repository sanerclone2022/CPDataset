[{"authorTime":"2018-06-27 09:11:06","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","date":"2018-07-09 01:16:26","endLine":104,"groupId":"8263","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/bc0e88ed12851dfcc0509d888b926d80a5fe63.src","preCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","realPath":"mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"NB"},{"authorDate":"2018-06-27 09:11:06","commitOrder":4,"curCode":"  private static Function1<ElasticsearchSearchResult.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return new Function1<ElasticsearchSearchResult.SearchHit, Object[]>() {\n      public Object[] apply(ElasticsearchSearchResult.SearchHit hit) {\n        Object[] objects = new Object[fields.size()];\n        for (int i = 0; i < fields.size(); i++) {\n          final Map.Entry<String, Class> field = fields.get(i);\n          final String name = field.getKey();\n          final Class type = field.getValue();\n          objects[i] = convert(hit.value(name), type);\n        }\n        return objects;\n      }\n    };\n  }\n","date":"2018-07-10 00:16:24","endLine":76,"groupId":"8263","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/7de7e11ecf2ac37a565d2f2aa042e8e8ad9804.src","preCode":"  private static Function1<ElasticsearchSearchResult.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return new Function1<ElasticsearchSearchResult.SearchHit, Object[]>() {\n      public Object[] apply(ElasticsearchSearchResult.SearchHit hit) {\n        Object[] objects = new Object[fields.size()];\n        for (int i = 0; i < fields.size(); i++) {\n          final Map.Entry<String, Class> field = fields.get(i);\n          final String name = field.getKey();\n          final Class type = field.getValue();\n          objects[i] = convert(hit.value(name), type);\n        }\n        return objects;\n      }\n    };\n  }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"0204f2860c8c83915c62085a47d42a78a10aac46","commitMessage":"@@@[CALCITE-2376] Unify ES2 and ES5 adapters. Migrate to low-level ES rest client as main transport. (Andrei Sereda)\n\n== Major change to elastic search adapter(s)\n\n1. Combine ES2 and ES5 under single maven module (called elasticsearch). Move shared ES source from core to\nseparate elasticsearch module.\n\n2. Migrate transport layer to low-level rest client. There are no more heavy core server-side ES dependencies\n(like Lucene.  Netty etc.) in adapter.  just apache http client and apache codecs.\nNative Transport client will be removed by the vendor in the next release (ES7-8).\n\n3. Manually parse search results using jackson JSON library (this is already a transitive dependency from core)\n\n== Expected breaking changes for clients:\n1. Change class names of Schema and SchemaFactory. They don't contain ES major version number anymore (2.  5.  6 etc.):\n   - ElasticsearchSchemaFactory(new) vs Elasticsearch{2|5}SchemaFactory (old)\n   - ElasticsearchSchema(new) vs Elasticsearch{2|5}Schema (old)\n   - changed package name(s)\nThis affects existing configurations (especially JSON files)\n\n2. There is a single maven module elasticsearch. elasticsearch2 and elasticsearch5 are removed.\nClient will have to manually update their artifact dependencies.\n\nClose apache/calcite#744\n","date":"2018-07-10 00:16:24","modifiedFileCount":"0","status":"M","submitter":"Andrei Sereda"},{"authorTime":"2018-09-19 10:53:24","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":5,"curCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","date":"2018-07-09 01:16:26","endLine":104,"groupId":"8263","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/bc0e88ed12851dfcc0509d888b926d80a5fe63.src","preCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","realPath":"mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"},{"authorDate":"2018-09-19 10:53:24","commitOrder":5,"curCode":"  private static Function1<ElasticsearchJson.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return new Function1<ElasticsearchJson.SearchHit, Object[]>() {\n      public Object[] apply(ElasticsearchJson.SearchHit hit) {\n        Object[] objects = new Object[fields.size()];\n        for (int i = 0; i < fields.size(); i++) {\n          final Map.Entry<String, Class> field = fields.get(i);\n          final String name = field.getKey();\n          final Class type = field.getValue();\n          objects[i] = convert(hit.valueOrNull(name), type);\n        }\n        return objects;\n      }\n    };\n  }\n","date":"2018-09-19 10:53:24","endLine":76,"groupId":"8263","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/16/ac92db12c4e2b6afc42809f185bf531e4081ef.src","preCode":"  private static Function1<ElasticsearchSearchResult.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return new Function1<ElasticsearchSearchResult.SearchHit, Object[]>() {\n      public Object[] apply(ElasticsearchSearchResult.SearchHit hit) {\n        Object[] objects = new Object[fields.size()];\n        for (int i = 0; i < fields.size(); i++) {\n          final Map.Entry<String, Class> field = fields.get(i);\n          final String name = field.getKey();\n          final Class type = field.getValue();\n          objects[i] = convert(hit.value(name), type);\n        }\n        return objects;\n      }\n    };\n  }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"79af1c9ba735286653697deed3ff849b7c921fe4","commitMessage":"@@@[CALCITE-2528] Support Aggregates in ElasticSearch adapter (Andrei Sereda)\n\nAggregate functions (count/sum/min/max/avg) are pushed down to ES.\n\nAdd ElasticsearchAggregate relational expression to convert SQL into native Elastic aggregations (value_count.  min.  max etc.).\nEnhance ElasticsearchTable to prepare correct aggregate ES JSON query.\n\nCreate special classes to parse recursively elastic aggregation response or buckets (located in ElasticJson). They're inspired from existing Elastic high-level client source.\n\nFor tests.  make Json input more human friendly. Single quotes are accepted and fields can be unquoted (unless\nthey contain special characters). Also field with dots 'a.b.c' are automatically auto-expanded. This reduces JSON noise.\n\nFix single projections which previously returned map (see [CALCITE-2485])\n\nClose apache/calcite#801\nClose apache/calcite#822\n","date":"2018-09-19 10:53:24","modifiedFileCount":"20","status":"M","submitter":"Andrei Sereda"},{"authorTime":"2018-09-16 20:24:07","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":6,"curCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","date":"2018-07-09 01:16:26","endLine":104,"groupId":"8263","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/bc0e88ed12851dfcc0509d888b926d80a5fe63.src","preCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","realPath":"mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"},{"authorDate":"2018-09-16 20:24:07","commitOrder":6,"curCode":"  private static Function1<ElasticsearchJson.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return hit -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        final Class type = field.getValue();\n        objects[i] = convert(hit.valueOrNull(name), type);\n      }\n      return objects;\n    };\n  }\n","date":"2018-09-20 16:51:04","endLine":66,"groupId":"8263","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/3626934056a571eb30dd34913ee3ffe5964e20.src","preCode":"  private static Function1<ElasticsearchJson.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return new Function1<ElasticsearchJson.SearchHit, Object[]>() {\n      public Object[] apply(ElasticsearchJson.SearchHit hit) {\n        Object[] objects = new Object[fields.size()];\n        for (int i = 0; i < fields.size(); i++) {\n          final Map.Entry<String, Class> field = fields.get(i);\n          final String name = field.getKey();\n          final Class type = field.getValue();\n          objects[i] = convert(hit.valueOrNull(name), type);\n        }\n        return objects;\n      }\n    };\n  }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"295ab13e8338bdd0e0c29e051907371c9b2929aa","commitMessage":"@@@Apply small refactorings to Calcite codebase (Java 5.  Java 7.  Java 8)\n\nUse Objects.equals when possible\nReplace for with foreach in Mappings\nUse Java 7 diamond operator to reduce code verbosity\nCollapse identical catch blocks to multi-catch\nUse Double/Float/Long/Boolean hashCode from Java 8\nRemove unnecessary substring call arguments\nFix sqlTypeName -> SqlTypeName typo\nMake floorKey/ceilingKey non-static so their use in NameMap makes more sense\nNameMap uses COMPARATOR.floorKey(name) which is a bit weird when floorKey is static\nAdd @SafeVarargs to methods that are obviously safe\nReplace anonymous types with Java 8 lambdas\nUse Collection#removeIf when possible\nUse Integer.compare when possible\nSuppress AssertWithSideEffects warnings\nAdd missing check to Permutation#isValid\nPermutation#isValid had occurCount[target] != 0 check.  however the array was never updated.  so the check was useless.\nRemove duplicate keys from Strong#MAP\nReplace remove+add with set in ReduceExpressionsRule\nRemove redundant initializers\nMove dead code inside if (false) branch in org.apache.calcite.plan.volcano.RelSubset#add\nRevert removal of UtilTest#testHash\n\ncloses #834\n","date":"2018-09-20 16:51:04","modifiedFileCount":"130","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2018-12-25 02:56:59","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":7,"curCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","date":"2018-07-09 01:16:26","endLine":104,"groupId":"8263","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/bc0e88ed12851dfcc0509d888b926d80a5fe63.src","preCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","realPath":"mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"},{"authorDate":"2018-12-25 02:56:59","commitOrder":7,"curCode":"  private static Function1<ElasticsearchJson.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields, Map<String, String> mapping) {\n    return hit -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final Object value;\n\n        if (ElasticsearchConstants.ID.equals(mapping.get(field.getKey()))) {\n          \r\n          value = hit.id();\n        } else {\n          value = hit.valueOrNull(field.getKey());\n        }\n\n        final Class type = field.getValue();\n        objects[i] = convert(value, type);\n      }\n      return objects;\n    };\n  }\n","date":"2019-01-03 03:34:20","endLine":84,"groupId":"14725","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields@Map<String@String>mapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/be/2090a2da3d0f62a12c12403831d42c7578ec2b.src","preCode":"  private static Function1<ElasticsearchJson.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return hit -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        final Class type = field.getValue();\n        objects[i] = convert(hit.valueOrNull(name), type);\n      }\n      return objects;\n    };\n  }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"3dee82dd7825f4c09dca27a312f9f82a8d6b899d","commitMessage":"@@@[CALCITE-2755] Expose document _id field when querying ElasticSearch\n\nAllow user to query (project) [_id](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-id-field.html) field\nexplicitly.\n\nNote that (by default) meta fields are not available for `select *` type of queries and have to be explicitly listed in projection\nlike `select _MAP['_id'].  _MAP['a'] from elastic`.\n\nAdd additional mapping between calcite expression `EXPR$n` and item name `foo.bar` (as part of `_MAP['foo.bar']`).\nThis information is otherwise lost during query translation.\n\nCloses #982\n","date":"2019-01-03 03:34:20","modifiedFileCount":"10","status":"M","submitter":"Andrei Sereda"},{"authorTime":"2019-01-27 12:27:33","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":8,"curCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","date":"2018-07-09 01:16:26","endLine":104,"groupId":"10162","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/bc0e88ed12851dfcc0509d888b926d80a5fe63.src","preCode":"  static Function1<Document, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields) {\n    return a0 -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String name = field.getKey();\n        objects[i] = convert(a0.get(name), field.getValue());\n      }\n      return objects;\n    };\n  }\n","realPath":"mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"},{"authorDate":"2019-01-27 12:27:33","commitOrder":8,"curCode":"  private static Function1<ElasticsearchJson.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields, Map<String, String> mapping) {\n    return hit -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final String key;\n        if (hit.sourceOrFields().containsKey(field.getKey())) {\n          key = field.getKey();\n        } else {\n          key = mapping.getOrDefault(field.getKey(), field.getKey());\n        }\n\n        final Object value;\n        if (ElasticsearchConstants.ID.equals(key)\n            || ElasticsearchConstants.ID.equals(mapping.get(field.getKey()))\n            || ElasticsearchConstants.ID.equals(field.getKey())) {\n          \r\n          value = hit.id();\n        } else {\n          value = hit.valueOrNull(key);\n        }\n\n        final Class type = field.getValue();\n        objects[i] = convert(value, type);\n      }\n      return objects;\n    };\n  }\n","date":"2019-01-29 11:10:56","endLine":100,"groupId":"10162","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"listGetter","params":"(finalList<Map.Entry<String@Class>>fields@Map<String@String>mapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/05/4d85c2a7849087235ff3f06385b85adbdedc09.src","preCode":"  private static Function1<ElasticsearchJson.SearchHit, Object[]> listGetter(\n      final List<Map.Entry<String, Class>> fields, Map<String, String> mapping) {\n    return hit -> {\n      Object[] objects = new Object[fields.size()];\n      for (int i = 0; i < fields.size(); i++) {\n        final Map.Entry<String, Class> field = fields.get(i);\n        final Object value;\n\n        if (ElasticsearchConstants.ID.equals(mapping.get(field.getKey()))) {\n          \r\n          value = hit.id();\n        } else {\n          value = hit.valueOrNull(field.getKey());\n        }\n\n        final Class type = field.getValue();\n        objects[i] = convert(value, type);\n      }\n      return objects;\n    };\n  }\n","realPath":"elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"542c086749d504de5542c37f12f6a1329842f18d","commitMessage":"@@@[CALCITE-2814] ElasticSearch adapter. Fix \"group by\" when using raw item access (eg. _MAP['foo'])\n\nThe following queries were previsouly failing:\n\n```sql\nselect max(_MAP['a']).  _MAP['b'] from elastic group by _MAP['b']\n```\n","date":"2019-01-29 11:10:56","modifiedFileCount":"8","status":"M","submitter":"Andrei Sereda"}]
