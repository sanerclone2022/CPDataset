[{"authorTime":"2017-12-15 11:34:34","codes":[{"authorDate":"2017-12-15 11:34:34","commitOrder":5,"curCode":"  public static LogicalMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets, boolean allRows,\n      List<RexNode> partitionKeys, RelCollation orderKeys, RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet = cluster.traitSetOf(Convention.NONE);\n    return create(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","date":"2019-08-12 16:24:32","endLine":85,"groupId":"10884","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(RelNodeinput@RelDataTyperowType@RexNodepattern@booleanstrictStart@booleanstrictEnd@Map<String@RexNode>patternDefinitions@Map<String@RexNode>measures@RexNodeafter@Map<String@?extendsSortedSet<String>>subsets@booleanallRows@List<RexNode>partitionKeys@RelCollationorderKeys@RexNodeinterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/38/d8c2755194dc58045235637855e6f4a504064e.src","preCode":"  public static LogicalMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets, boolean allRows,\n      List<RexNode> partitionKeys, RelCollation orderKeys, RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet = cluster.traitSetOf(Convention.NONE);\n    return create(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"MB"},{"authorDate":"2017-12-15 11:34:34","commitOrder":5,"curCode":"  public static EnumerableMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets,\n      boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,\n      RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE);\n    return new EnumerableMatch(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","date":"2019-08-12 16:24:32","endLine":64,"groupId":"10842","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(RelNodeinput@RelDataTyperowType@RexNodepattern@booleanstrictStart@booleanstrictEnd@Map<String@RexNode>patternDefinitions@Map<String@RexNode>measures@RexNodeafter@Map<String@?extendsSortedSet<String>>subsets@booleanallRows@List<RexNode>partitionKeys@RelCollationorderKeys@RexNodeinterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1f/dc30dc254c21415348717186f1ba3d6974dc3c.src","preCode":"  public static EnumerableMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets,\n      boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,\n      RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE);\n    return new EnumerableMatch(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMatch.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"205fe17eee11b923356e6f297679e43366043043","commitMessage":"@@@[CALCITE-1935] Implement MATCH_RECOGNIZE.  part 1: add basic classes: LogicalMatch.  BindableMatch.  EnumerableMatch.  MatchRule (Zhiqiang-He)\n","date":"2019-08-12 16:24:32","modifiedFileCount":"11","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2019-08-12 16:20:03","codes":[{"authorDate":"2019-08-12 16:20:03","commitOrder":6,"curCode":"  public static LogicalMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets, boolean allRows,\n      ImmutableBitSet partitionKeys, RelCollation orderKeys, RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet = cluster.traitSetOf(Convention.NONE);\n    return create(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","date":"2019-08-12 16:33:58","endLine":86,"groupId":"10884","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(RelNodeinput@RelDataTyperowType@RexNodepattern@booleanstrictStart@booleanstrictEnd@Map<String@RexNode>patternDefinitions@Map<String@RexNode>measures@RexNodeafter@Map<String@?extendsSortedSet<String>>subsets@booleanallRows@ImmutableBitSetpartitionKeys@RelCollationorderKeys@RexNodeinterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/91ebdab7401b0e155a1672566bdd8c53cfaeac.src","preCode":"  public static LogicalMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets, boolean allRows,\n      List<RexNode> partitionKeys, RelCollation orderKeys, RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet = cluster.traitSetOf(Convention.NONE);\n    return create(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2019-08-12 16:20:03","commitOrder":6,"curCode":"  public static EnumerableMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets,\n      boolean allRows, ImmutableBitSet partitionKeys, RelCollation orderKeys,\n      RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE);\n    return new EnumerableMatch(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","date":"2019-08-12 16:33:58","endLine":86,"groupId":"10842","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(RelNodeinput@RelDataTyperowType@RexNodepattern@booleanstrictStart@booleanstrictEnd@Map<String@RexNode>patternDefinitions@Map<String@RexNode>measures@RexNodeafter@Map<String@?extendsSortedSet<String>>subsets@booleanallRows@ImmutableBitSetpartitionKeys@RelCollationorderKeys@RexNodeinterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/73f165f946cb75843079024903d43f4e7d21cb.src","preCode":"  public static EnumerableMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets,\n      boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,\n      RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE);\n    return new EnumerableMatch(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMatch.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"2a2de705f93c886cea0996e757348a2493eef737","commitMessage":"@@@[CALCITE-1935] Implement MATCH_RECOGNIZE.  part 2: add class Automaton\n\nIn ImmutableBitSet.  add buildAndReset().  to allow re-use;\nadd ImmutableBitSet.Builder.get.\n\nIn Pair.  add zipMutable.\n","date":"2019-08-12 16:33:58","modifiedFileCount":"25","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":7,"curCode":"  public static LogicalMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets, boolean allRows,\n      ImmutableBitSet partitionKeys, RelCollation orderKeys, @Nullable RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet = cluster.traitSetOf(Convention.NONE);\n    return create(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","date":"2020-11-30 06:45:33","endLine":88,"groupId":"101908","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"create","params":"(RelNodeinput@RelDataTyperowType@RexNodepattern@booleanstrictStart@booleanstrictEnd@Map<String@RexNode>patternDefinitions@Map<String@RexNode>measures@RexNodeafter@Map<String@?extendsSortedSet<String>>subsets@booleanallRows@ImmutableBitSetpartitionKeys@RelCollationorderKeys@@NullableRexNodeinterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/80/0a7bdee772083c8771de0c5a20c6d3362a3750.src","preCode":"  public static LogicalMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets, boolean allRows,\n      ImmutableBitSet partitionKeys, RelCollation orderKeys, RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet = cluster.traitSetOf(Convention.NONE);\n    return create(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":7,"curCode":"  public static EnumerableMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets,\n      boolean allRows, ImmutableBitSet partitionKeys, RelCollation orderKeys,\n      @Nullable RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE);\n    return new EnumerableMatch(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","date":"2020-11-30 06:45:33","endLine":101,"groupId":"101908","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(RelNodeinput@RelDataTyperowType@RexNodepattern@booleanstrictStart@booleanstrictEnd@Map<String@RexNode>patternDefinitions@Map<String@RexNode>measures@RexNodeafter@Map<String@?extendsSortedSet<String>>subsets@booleanallRows@ImmutableBitSetpartitionKeys@RelCollationorderKeys@@NullableRexNodeinterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/2942ef5a397ac54fcc999e88b6c5cb3d5a8fc3.src","preCode":"  public static EnumerableMatch create(RelNode input, RelDataType rowType,\n      RexNode pattern, boolean strictStart, boolean strictEnd,\n      Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,\n      RexNode after, Map<String, ? extends SortedSet<String>> subsets,\n      boolean allRows, ImmutableBitSet partitionKeys, RelCollation orderKeys,\n      RexNode interval) {\n    final RelOptCluster cluster = input.getCluster();\n    final RelTraitSet traitSet =\n        cluster.traitSetOf(EnumerableConvention.INSTANCE);\n    return new EnumerableMatch(cluster, traitSet, input, rowType, pattern,\n        strictStart, strictEnd, patternDefinitions, measures, after, subsets,\n        allRows, partitionKeys, orderKeys, interval);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMatch.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
