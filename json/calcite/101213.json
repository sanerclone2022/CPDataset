[{"authorTime":"2017-02-17 08:09:58","codes":[{"authorDate":"2016-03-10 10:49:01","commitOrder":4,"curCode":"  @Test public void testWindowFunctions() {\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" where ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ > 10\")\n        .fails(\"Windowed aggregate expression is illegal in WHERE clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" group by ename, ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ + 10\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in GROUP BY clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" join dept on emp.deptno = dept.deptno\\n\"\n        + \" and ^sum(sal) over (partition by emp.deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ = dept.deptno + 40\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in ON clause\");\n\n    \r\n    winSql(\n        \"select sal from emp order by sum(sal) over (partition by deptno order by deptno)\")\n        .ok();\n\n    \r\n\n    \r\n    \r\n    winExp(\"sum(sal)\").ok();\n  }\n","date":"2016-05-18 12:56:38","endLine":3973,"groupId":"11035","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/8c5e4cdc1c6126f0895db04ee5b71787e0b266.src","preCode":"  @Test public void testWindowFunctions() {\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" where ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ > 10\")\n        .fails(\"Windowed aggregate expression is illegal in WHERE clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" group by ename, ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ + 10\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in GROUP BY clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" join dept on emp.deptno = dept.deptno\\n\"\n        + \" and ^sum(sal) over (partition by emp.deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ = dept.deptno + 40\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in ON clause\");\n\n    \r\n    winSql(\n        \"select sal from emp order by sum(sal) over (partition by deptno order by deptno)\")\n        .ok();\n\n    \r\n\n    \r\n    \r\n    winExp(\"sum(sal)\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3932,"status":"NB"},{"authorDate":"2017-02-17 08:09:58","commitOrder":4,"curCode":"  @Test public void testStreamHop() {\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour) as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\").ok();\n    sql(\"select stream\\n\"\n        + \"  ^hop_start(rowtime, interval '1' hour, interval '2' hour)^,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\")\n        .fails(\"Call to auxiliary group function 'HOP_START' must have \"\n            + \"matching call to group function 'HOP' in GROUP BY clause\");\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56') as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56')\").ok();\n  }\n","date":"2017-02-28 08:32:40","endLine":8928,"groupId":"4433","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamHop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/0f268b8f17031f57e5ddbc1187ce5d0bf08336.src","preCode":"  @Test public void testStreamHop() {\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour) as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\").ok();\n    sql(\"select stream\\n\"\n        + \"  ^hop_start(rowtime, interval '1' hour, interval '2' hour)^,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\")\n        .fails(\"Call to auxiliary group function 'HOP_START' must have \"\n            + \"matching call to group function 'HOP' in GROUP BY clause\");\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56') as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56')\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8906,"status":"B"}],"commitId":"49888a6c581f6243a5b3f1a48ea2c9edd6aac9d5","commitMessage":"@@@[CALCITE-1615] Support HOP and SESSION in the GROUP BY clause (Julian Hyde and Haohui Mai)\n\nAdd documentation for grouped window functions (also known as group functions) and grouped auxiliary functions.\n\nClose apache/calcite#375\n","date":"2017-02-28 08:32:40","modifiedFileCount":"4","status":"M","submitter":"Haohui Mai"},{"authorTime":"2017-02-17 08:09:58","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":5,"curCode":"  @Test public void testWindowFunctions() {\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" where ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ > 10\")\n        .fails(\"Windowed aggregate expression is illegal in WHERE clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" group by ename, ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ + 10\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in GROUP BY clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" join dept on emp.deptno = dept.deptno\\n\"\n        + \" and ^sum(sal) over (partition by emp.deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ = dept.deptno + 40\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in ON clause\");\n\n    \r\n    winSql(\"select sal from emp\\n\"\n        + \"order by sum(sal) over (partition by deptno order by deptno)\")\n        .ok();\n\n    \r\n\n    \r\n    \r\n    winExp(\"sum(sal)\").ok();\n  }\n","date":"2019-09-24 02:59:18","endLine":4006,"groupId":"11035","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testWindowFunctions() {\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" where ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ > 10\")\n        .fails(\"Windowed aggregate expression is illegal in WHERE clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" group by ename, ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ + 10\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in GROUP BY clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" join dept on emp.deptno = dept.deptno\\n\"\n        + \" and ^sum(sal) over (partition by emp.deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ = dept.deptno + 40\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in ON clause\");\n\n    \r\n    winSql(\n        \"select sal from emp order by sum(sal) over (partition by deptno order by deptno)\")\n        .ok();\n\n    \r\n\n    \r\n    \r\n    winExp(\"sum(sal)\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3965,"status":"M"},{"authorDate":"2017-02-17 08:09:58","commitOrder":5,"curCode":"  @Test public void testStreamHop() {\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour) as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\").ok();\n    sql(\"select stream\\n\"\n        + \"  ^hop_start(rowtime, interval '1' hour, interval '2' hour)^,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\")\n        .fails(\"Call to auxiliary group function 'HOP_START' must have \"\n            + \"matching call to group function 'HOP' in GROUP BY clause\");\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56') as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56')\").ok();\n  }\n","date":"2017-02-28 08:32:40","endLine":8928,"groupId":"4433","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamHop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8c/0f268b8f17031f57e5ddbc1187ce5d0bf08336.src","preCode":"  @Test public void testStreamHop() {\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour) as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\").ok();\n    sql(\"select stream\\n\"\n        + \"  ^hop_start(rowtime, interval '1' hour, interval '2' hour)^,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\")\n        .fails(\"Call to auxiliary group function 'HOP_START' must have \"\n            + \"matching call to group function 'HOP' in GROUP BY clause\");\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56') as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56')\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8906,"status":"N"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testWindowFunctions() {\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" where ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ > 10\")\n        .fails(\"Windowed aggregate expression is illegal in WHERE clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" group by ename, ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ + 10\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in GROUP BY clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" join dept on emp.deptno = dept.deptno\\n\"\n        + \" and ^sum(sal) over (partition by emp.deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ = dept.deptno + 40\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in ON clause\");\n\n    \r\n    winSql(\"select sal from emp\\n\"\n        + \"order by sum(sal) over (partition by deptno order by deptno)\")\n        .ok();\n\n    \r\n\n    \r\n    \r\n    winExp(\"sum(sal)\").ok();\n  }\n","date":"2020-04-06 04:57:49","endLine":4040,"groupId":"11035","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testWindowFunctions() {\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" where ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ > 10\")\n        .fails(\"Windowed aggregate expression is illegal in WHERE clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" group by ename, ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ + 10\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in GROUP BY clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" join dept on emp.deptno = dept.deptno\\n\"\n        + \" and ^sum(sal) over (partition by emp.deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ = dept.deptno + 40\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in ON clause\");\n\n    \r\n    winSql(\"select sal from emp\\n\"\n        + \"order by sum(sal) over (partition by deptno order by deptno)\")\n        .ok();\n\n    \r\n\n    \r\n    \r\n    winExp(\"sum(sal)\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3999,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testStreamHop() {\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour) as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\").ok();\n    sql(\"select stream\\n\"\n        + \"  ^hop_start(rowtime, interval '1' hour, interval '2' hour)^,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\")\n        .fails(\"Call to auxiliary group function 'HOP_START' must have \"\n            + \"matching call to group function 'HOP' in GROUP BY clause\");\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56') as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56')\").ok();\n  }\n","date":"2020-04-06 04:57:49","endLine":10257,"groupId":"4433","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamHop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testStreamHop() {\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour) as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\").ok();\n    sql(\"select stream\\n\"\n        + \"  ^hop_start(rowtime, interval '1' hour, interval '2' hour)^,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\")\n        .fails(\"Call to auxiliary group function 'HOP_START' must have \"\n            + \"matching call to group function 'HOP' in GROUP BY clause\");\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56') as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56')\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":10235,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-12-24 15:48:25","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testWindowFunctions() {\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" where ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ > 10\")\n        .fails(\"Windowed aggregate expression is illegal in WHERE clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" group by ename, ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ + 10\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in GROUP BY clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" join dept on emp.deptno = dept.deptno\\n\"\n        + \" and ^sum(sal) over (partition by emp.deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ = dept.deptno + 40\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in ON clause\");\n\n    \r\n    winSql(\"select sal from emp\\n\"\n        + \"order by sum(sal) over (partition by deptno order by deptno)\")\n        .ok();\n\n    \r\n\n    \r\n    \r\n    winExp(\"sum(sal)\").ok();\n  }\n","date":"2020-04-06 04:57:49","endLine":4040,"groupId":"101213","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test void testWindowFunctions() {\n    \r\n\n    \r\n    \r\n    \r\n    \r\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" where ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ > 10\")\n        .fails(\"Windowed aggregate expression is illegal in WHERE clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" group by ename, ^sum(sal) over (partition by deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ + 10\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in GROUP BY clause\");\n\n    winSql(\"select *\\n\"\n        + \" from emp\\n\"\n        + \" join dept on emp.deptno = dept.deptno\\n\"\n        + \" and ^sum(sal) over (partition by emp.deptno\\n\"\n        + \"    order by empno\\n\"\n        + \"    rows 3 preceding)^ = dept.deptno + 40\\n\"\n        + \"order by deptno\")\n        .fails(\"Windowed aggregate expression is illegal in ON clause\");\n\n    \r\n    winSql(\"select sal from emp\\n\"\n        + \"order by sum(sal) over (partition by deptno order by deptno)\")\n        .ok();\n\n    \r\n\n    \r\n    \r\n    winExp(\"sum(sal)\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3999,"status":"N"},{"authorDate":"2019-12-24 15:48:25","commitOrder":7,"curCode":"  @Test void testStreamHop() {\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour) as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\").ok();\n    sql(\"select stream\\n\"\n        + \"  ^hop_start(rowtime, interval '1' hour, interval '2' hour)^,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\")\n        .fails(\"Call to auxiliary group function 'HOP_START' must have \"\n            + \"matching call to group function '\\\\$HOP' in GROUP BY clause\");\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56') as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56')\").ok();\n  }\n","date":"2020-05-09 20:23:46","endLine":10338,"groupId":"101213","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamHop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/24/1898e614ee7815d31284e118ed373e0f48ae4f.src","preCode":"  @Test void testStreamHop() {\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour) as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\").ok();\n    sql(\"select stream\\n\"\n        + \"  ^hop_start(rowtime, interval '1' hour, interval '2' hour)^,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour)\")\n        .fails(\"Call to auxiliary group function 'HOP_START' must have \"\n            + \"matching call to group function 'HOP' in GROUP BY clause\");\n    \r\n    sql(\"select stream\\n\"\n        + \"  hop_start(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56') as rowtime,\\n\"\n        + \"  count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by hop(rowtime, interval '1' hour, interval '3' hour,\\n\"\n        + \"    time '12:34:56')\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":10316,"status":"M"}],"commitId":"40e588de5f999034e5030b12cdbc90f4073808fe","commitMessage":"@@@[CALCITE-3737] HOP Table Function (Rui Wang)\n","date":"2020-05-09 20:23:46","modifiedFileCount":"8","status":"M","submitter":"amaliujia"}]
