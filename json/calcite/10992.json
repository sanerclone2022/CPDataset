[{"authorTime":"2018-05-31 23:27:29","codes":[{"authorDate":"2018-05-31 23:27:29","commitOrder":1,"curCode":"  @Test public void testIsNullPushDown() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (w) w_count\\n\"\n        + \"  from emp\\n\"\n        + \"  window w as (partition by deptno order by empno)\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2019-01-09 13:53:45","endLine":3293,"groupId":"16404","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsNullPushDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9d/ca7b163f65f912003c7e62d81581dbf9c629f9.src","preCode":"  @Test public void testIsNullPushDown() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (w) w_count\\n\"\n        + \"  from emp\\n\"\n        + \"  window w as (partition by deptno order by empno)\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3275,"status":"B"},{"authorDate":"2018-05-31 23:27:29","commitOrder":1,"curCode":"  @Test public void testIsNullPushDown2() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (ROWS BETWEEN 10 PRECEDING AND 1 PRECEDING) w_count\\n\"\n        + \"  from emp\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2019-01-09 13:53:45","endLine":3312,"groupId":"16404","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsNullPushDown2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9d/ca7b163f65f912003c7e62d81581dbf9c629f9.src","preCode":"  @Test public void testIsNullPushDown2() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (ROWS BETWEEN 10 PRECEDING AND 1 PRECEDING) w_count\\n\"\n        + \"  from emp\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3295,"status":"B"}],"commitId":"5ff57651c7bdbc61ecbc212293c21ae90d3d370f","commitMessage":"@@@[CALCITE-2344] Avoid inferring $0=null predicate from $0 IS NULL when $0 is not nullable\n\nfixes #714\n","date":"2019-01-09 13:53:45","modifiedFileCount":"3","status":"B","submitter":"Laurent Goujon"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testIsNullPushDown() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (w) w_count\\n\"\n        + \"  from emp\\n\"\n        + \"  window w as (partition by deptno order by empno)\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-04-06 04:57:49","endLine":4341,"groupId":"16404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsNullPushDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testIsNullPushDown() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (w) w_count\\n\"\n        + \"  from emp\\n\"\n        + \"  window w as (partition by deptno order by empno)\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4323,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testIsNullPushDown2() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (ROWS BETWEEN 10 PRECEDING AND 1 PRECEDING) w_count\\n\"\n        + \"  from emp\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-04-06 04:57:49","endLine":4360,"groupId":"16404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsNullPushDown2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/c56354833d8acfcc210ae25313c78e9332a2ba.src","preCode":"  @Test public void testIsNullPushDown2() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (ROWS BETWEEN 10 PRECEDING AND 1 PRECEDING) w_count\\n\"\n        + \"  from emp\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4343,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":3,"curCode":"  @Test void testIsNullPushDown() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(CoreRules.PROJECT_REDUCE_EXPRESSIONS);\n    builder.addRuleInstance(CoreRules.FILTER_REDUCE_EXPRESSIONS);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (w) w_count\\n\"\n        + \"  from emp\\n\"\n        + \"  window w as (partition by deptno order by empno)\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-07-12 06:58:28","endLine":4484,"groupId":"10992","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsNullPushDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testIsNullPushDown() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (w) w_count\\n\"\n        + \"  from emp\\n\"\n        + \"  window w as (partition by deptno order by empno)\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4466,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":3,"curCode":"  @Test void testIsNullPushDown2() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(CoreRules.PROJECT_TO_LOGICAL_PROJECT_AND_WINDOW);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(CoreRules.PROJECT_REDUCE_EXPRESSIONS);\n    builder.addRuleInstance(CoreRules.FILTER_REDUCE_EXPRESSIONS);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (ROWS BETWEEN 10 PRECEDING AND 1 PRECEDING) w_count\\n\"\n        + \"  from emp\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","date":"2020-07-12 06:58:28","endLine":4503,"groupId":"10992","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsNullPushDown2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/41/d77aee9e74f65d9e26a1ffa96400062e1eb119.src","preCode":"  @Test void testIsNullPushDown2() {\n    HepProgramBuilder preBuilder = new HepProgramBuilder();\n    preBuilder.addRuleInstance(ProjectToWindowRule.PROJECT);\n\n    HepProgramBuilder builder = new HepProgramBuilder();\n    builder.addRuleInstance(ReduceExpressionsRule.PROJECT_INSTANCE);\n    builder.addRuleInstance(ReduceExpressionsRule.FILTER_INSTANCE);\n    HepPlanner hepPlanner = new HepPlanner(builder.build());\n\n    final String sql = \"select empno, deptno, w_count from (\\n\"\n        + \"  select empno, deptno, count(empno) over (ROWS BETWEEN 10 PRECEDING AND 1 PRECEDING) w_count\\n\"\n        + \"  from emp\\n\"\n        + \") sub_query where w_count is null\";\n    sql(sql)\n        .withPre(preBuilder.build())\n        .with(hepPlanner)\n        .check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4486,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"}]
