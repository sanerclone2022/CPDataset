[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testValueSetInt() {\n    ArrayTable.BitSlicedPrimitiveArray representation;\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(int.class);\n    valueSet.add(0);\n    valueSet.add(1);\n    valueSet.add(10);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n\n    \r\n    assertEquals(4, representation.bitCount);\n    assertFalse(representation.signed);\n    assertEquals(0, representation.getInt(pair.dataSet, 0));\n    assertEquals(1, representation.getInt(pair.dataSet, 1));\n    assertEquals(10, representation.getInt(pair.dataSet, 2));\n    assertEquals(10, representation.getObject(pair.dataSet, 2));\n\n    \r\n    valueSet.add(-32);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n    assertEquals(6, representation.bitCount);\n    assertTrue(representation.signed);\n    assertEquals(10, representation.getInt(pair.dataSet, 2));\n    assertEquals(10, representation.getObject(pair.dataSet, 2));\n    assertEquals(-32, representation.getInt(pair.dataSet, 3));\n    assertEquals(-32, representation.getObject(pair.dataSet, 3));\n\n    \r\n    valueSet.add(63);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n    assertEquals(7, representation.bitCount);\n    assertTrue(representation.signed);\n\n    \r\n    valueSet.add(64);\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.PrimitiveArray);\n    ArrayTable.PrimitiveArray representation2 =\n        (ArrayTable.PrimitiveArray) pair.representation;\n    assertEquals(0, representation2.getInt(pair.dataSet, 0));\n    assertEquals(-32, representation2.getInt(pair.dataSet, 3));\n    assertEquals(-32, representation2.getObject(pair.dataSet, 3));\n    assertEquals(64, representation2.getInt(pair.dataSet, 5));\n    assertEquals(64, representation2.getObject(pair.dataSet, 5));\n  }\n","date":"2014-11-14 09:39:34","endLine":147,"groupId":"547","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueSetInt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/4e9c2bb58814b61ec3751609c01c9032d0bb76.src","preCode":"  @Test public void testValueSetInt() {\n    ArrayTable.BitSlicedPrimitiveArray representation;\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(int.class);\n    valueSet.add(0);\n    valueSet.add(1);\n    valueSet.add(10);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n\n    \r\n    assertEquals(4, representation.bitCount);\n    assertFalse(representation.signed);\n    assertEquals(0, representation.getInt(pair.dataSet, 0));\n    assertEquals(1, representation.getInt(pair.dataSet, 1));\n    assertEquals(10, representation.getInt(pair.dataSet, 2));\n    assertEquals(10, representation.getObject(pair.dataSet, 2));\n\n    \r\n    valueSet.add(-32);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n    assertEquals(6, representation.bitCount);\n    assertTrue(representation.signed);\n    assertEquals(10, representation.getInt(pair.dataSet, 2));\n    assertEquals(10, representation.getObject(pair.dataSet, 2));\n    assertEquals(-32, representation.getInt(pair.dataSet, 3));\n    assertEquals(-32, representation.getObject(pair.dataSet, 3));\n\n    \r\n    valueSet.add(63);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n    assertEquals(7, representation.bitCount);\n    assertTrue(representation.signed);\n\n    \r\n    valueSet.add(64);\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.PrimitiveArray);\n    ArrayTable.PrimitiveArray representation2 =\n        (ArrayTable.PrimitiveArray) pair.representation;\n    assertEquals(0, representation2.getInt(pair.dataSet, 0));\n    assertEquals(-32, representation2.getInt(pair.dataSet, 3));\n    assertEquals(-32, representation2.getObject(pair.dataSet, 3));\n    assertEquals(64, representation2.getInt(pair.dataSet, 5));\n    assertEquals(64, representation2.getObject(pair.dataSet, 5));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/clone/ArrayTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testValueSetBoolean() {\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(boolean.class);\n    valueSet.add(0);\n    valueSet.add(1);\n    valueSet.add(1);\n    valueSet.add(0);\n    final ArrayTable.Column pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    final ArrayTable.BitSlicedPrimitiveArray representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n\n    assertEquals(1, representation.bitCount);\n    assertEquals(0, representation.getInt(pair.dataSet, 0));\n    assertEquals(1, representation.getInt(pair.dataSet, 1));\n    assertEquals(1, representation.getInt(pair.dataSet, 2));\n    assertEquals(0, representation.getInt(pair.dataSet, 3));\n  }\n","date":"2014-11-14 09:39:34","endLine":167,"groupId":"7918","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueSetBoolean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/4e9c2bb58814b61ec3751609c01c9032d0bb76.src","preCode":"  @Test public void testValueSetBoolean() {\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(boolean.class);\n    valueSet.add(0);\n    valueSet.add(1);\n    valueSet.add(1);\n    valueSet.add(0);\n    final ArrayTable.Column pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    final ArrayTable.BitSlicedPrimitiveArray representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n\n    assertEquals(1, representation.bitCount);\n    assertEquals(0, representation.getInt(pair.dataSet, 0));\n    assertEquals(1, representation.getInt(pair.dataSet, 1));\n    assertEquals(1, representation.getInt(pair.dataSet, 2));\n    assertEquals(0, representation.getInt(pair.dataSet, 3));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/clone/ArrayTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testValueSetInt() {\n    ArrayTable.BitSlicedPrimitiveArray representation;\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(int.class);\n    valueSet.add(0);\n    valueSet.add(1);\n    valueSet.add(10);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n\n    \r\n    assertEquals(4, representation.bitCount);\n    assertFalse(representation.signed);\n    assertEquals(0, representation.getInt(pair.dataSet, 0));\n    assertEquals(1, representation.getInt(pair.dataSet, 1));\n    assertEquals(10, representation.getInt(pair.dataSet, 2));\n    assertEquals(10, representation.getObject(pair.dataSet, 2));\n\n    \r\n    valueSet.add(-32);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n    assertEquals(6, representation.bitCount);\n    assertTrue(representation.signed);\n    assertEquals(10, representation.getInt(pair.dataSet, 2));\n    assertEquals(10, representation.getObject(pair.dataSet, 2));\n    assertEquals(-32, representation.getInt(pair.dataSet, 3));\n    assertEquals(-32, representation.getObject(pair.dataSet, 3));\n\n    \r\n    valueSet.add(63);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n    assertEquals(7, representation.bitCount);\n    assertTrue(representation.signed);\n\n    \r\n    valueSet.add(64);\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.PrimitiveArray);\n    ArrayTable.PrimitiveArray representation2 =\n        (ArrayTable.PrimitiveArray) pair.representation;\n    assertEquals(0, representation2.getInt(pair.dataSet, 0));\n    assertEquals(-32, representation2.getInt(pair.dataSet, 3));\n    assertEquals(-32, representation2.getObject(pair.dataSet, 3));\n    assertEquals(64, representation2.getInt(pair.dataSet, 5));\n    assertEquals(64, representation2.getObject(pair.dataSet, 5));\n  }\n","date":"2020-04-06 04:57:49","endLine":148,"groupId":"101596","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testValueSetInt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/60ebbfb8d7dab7cd17c367a6c6b9bb41c7f07e.src","preCode":"  @Test public void testValueSetInt() {\n    ArrayTable.BitSlicedPrimitiveArray representation;\n    ArrayTable.Column pair;\n\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(int.class);\n    valueSet.add(0);\n    valueSet.add(1);\n    valueSet.add(10);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n\n    \r\n    assertEquals(4, representation.bitCount);\n    assertFalse(representation.signed);\n    assertEquals(0, representation.getInt(pair.dataSet, 0));\n    assertEquals(1, representation.getInt(pair.dataSet, 1));\n    assertEquals(10, representation.getInt(pair.dataSet, 2));\n    assertEquals(10, representation.getObject(pair.dataSet, 2));\n\n    \r\n    valueSet.add(-32);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n    assertEquals(6, representation.bitCount);\n    assertTrue(representation.signed);\n    assertEquals(10, representation.getInt(pair.dataSet, 2));\n    assertEquals(10, representation.getObject(pair.dataSet, 2));\n    assertEquals(-32, representation.getInt(pair.dataSet, 3));\n    assertEquals(-32, representation.getObject(pair.dataSet, 3));\n\n    \r\n    valueSet.add(63);\n    pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n    assertEquals(7, representation.bitCount);\n    assertTrue(representation.signed);\n\n    \r\n    valueSet.add(64);\n    pair = valueSet.freeze(0, null);\n    assertTrue(pair.representation instanceof ArrayTable.PrimitiveArray);\n    ArrayTable.PrimitiveArray representation2 =\n        (ArrayTable.PrimitiveArray) pair.representation;\n    assertEquals(0, representation2.getInt(pair.dataSet, 0));\n    assertEquals(-32, representation2.getInt(pair.dataSet, 3));\n    assertEquals(-32, representation2.getObject(pair.dataSet, 3));\n    assertEquals(64, representation2.getInt(pair.dataSet, 5));\n    assertEquals(64, representation2.getObject(pair.dataSet, 5));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/clone/ArrayTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testValueSetBoolean() {\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(boolean.class);\n    valueSet.add(0);\n    valueSet.add(1);\n    valueSet.add(1);\n    valueSet.add(0);\n    final ArrayTable.Column pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    final ArrayTable.BitSlicedPrimitiveArray representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n\n    assertEquals(1, representation.bitCount);\n    assertEquals(0, representation.getInt(pair.dataSet, 0));\n    assertEquals(1, representation.getInt(pair.dataSet, 1));\n    assertEquals(1, representation.getInt(pair.dataSet, 2));\n    assertEquals(0, representation.getInt(pair.dataSet, 3));\n  }\n","date":"2020-04-06 04:57:49","endLine":168,"groupId":"101596","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testValueSetBoolean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/60ebbfb8d7dab7cd17c367a6c6b9bb41c7f07e.src","preCode":"  @Test public void testValueSetBoolean() {\n    final ColumnLoader.ValueSet valueSet =\n        new ColumnLoader.ValueSet(boolean.class);\n    valueSet.add(0);\n    valueSet.add(1);\n    valueSet.add(1);\n    valueSet.add(0);\n    final ArrayTable.Column pair = valueSet.freeze(0, null);\n    assertTrue(\n        pair.representation instanceof ArrayTable.BitSlicedPrimitiveArray);\n    final ArrayTable.BitSlicedPrimitiveArray representation =\n        (ArrayTable.BitSlicedPrimitiveArray) pair.representation;\n\n    assertEquals(1, representation.bitCount);\n    assertEquals(0, representation.getInt(pair.dataSet, 0));\n    assertEquals(1, representation.getInt(pair.dataSet, 1));\n    assertEquals(1, representation.getInt(pair.dataSet, 2));\n    assertEquals(0, representation.getInt(pair.dataSet, 3));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/adapter/clone/ArrayTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
