[{"authorTime":"2017-07-14 22:30:10","codes":[{"authorDate":"2017-07-14 22:30:10","commitOrder":1,"curCode":"  @Test public void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name] FROM 2)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        .ok(expectedMssql);\n  }\n","date":"2017-07-27 07:33:04","endLine":808,"groupId":"8337","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/27/4f559b2a172fe85ed5bbdc6b9376142c76ca3c.src","preCode":"  @Test public void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name] FROM 2)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":788,"status":"B"},{"authorDate":"2017-07-14 22:30:10","commitOrder":1,"curCode":"  @Test public void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name] FROM 2 FOR 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        .ok(expectedMssql);\n  }\n","date":"2017-07-27 07:33:04","endLine":830,"groupId":"8337","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstringWithFor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/27/4f559b2a172fe85ed5bbdc6b9376142c76ca3c.src","preCode":"  @Test public void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name] FROM 2 FOR 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":810,"status":"B"}],"commitId":"bdaa33f9cac508c3802ad0fcced34f1bb37a63c0","commitMessage":"@@@[CALCITE-1841] Create handlers for JDBC dialect-specific generated SQL (Chris Baynes)\n\nAdd Oracle SUBSTR function.\n\nClose apache/calcite#501\n","date":"2017-07-27 07:33:04","modifiedFileCount":"6","status":"B","submitter":"Chris Baynes"},{"authorTime":"2017-07-28 16:38:12","codes":[{"authorDate":"2017-07-28 16:38:12","commitOrder":2,"curCode":"  @Test public void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","date":"2017-08-04 07:40:46","endLine":809,"groupId":"8333","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/fee32c3e14ddf1cfdff420f08dd6caa24f3d25.src","preCode":"  @Test public void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name] FROM 2)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":790,"status":"M"},{"authorDate":"2017-07-28 16:38:12","commitOrder":2,"curCode":"  @Test public void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        .ok(expectedMssql);\n  }\n","date":"2017-08-04 07:40:46","endLine":831,"groupId":"8337","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstringWithFor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/fee32c3e14ddf1cfdff420f08dd6caa24f3d25.src","preCode":"  @Test public void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name] FROM 2 FOR 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":811,"status":"M"}],"commitId":"84b49a9c1e0436bc61fba1c5d499492fddb31ebd","commitMessage":"@@@[CALCITE-1895] MSSQL's SUBSTRING operator has different syntax (Chris Baynes)\n\nClose apache/calcite#504\n","date":"2017-08-04 07:40:46","modifiedFileCount":"2","status":"M","submitter":"Chris Baynes"},{"authorTime":"2017-10-05 02:56:57","codes":[{"authorDate":"2017-10-05 02:56:57","commitOrder":3,"curCode":"  @Test public void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","date":"2017-10-06 07:52:02","endLine":910,"groupId":"3788","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/682f821bef9428b79c30a2dbaf5e6dae95d8ed.src","preCode":"  @Test public void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"M"},{"authorDate":"2017-10-05 02:56:57","commitOrder":3,"curCode":"  @Test public void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","date":"2017-10-06 07:52:02","endLine":932,"groupId":"15954","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstringWithFor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/682f821bef9428b79c30a2dbaf5e6dae95d8ed.src","preCode":"  @Test public void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .dialect(DatabaseProduct.ORACLE.getDialect())\n        .ok(expectedOracle)\n        .dialect(DatabaseProduct.POSTGRESQL.getDialect())\n        .ok(expectedPostgresql)\n        .dialect(DatabaseProduct.MYSQL.getDialect())\n        .ok(expectedMysql)\n        .dialect(DatabaseProduct.MSSQL.getDialect())\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":912,"status":"M"}],"commitId":"fb760a6f4e0cf8ccf92380dd676a72d00402d53e","commitMessage":"@@@[CALCITE-1996] In JDBC adapter.  generate correct VALUES syntax\n","date":"2017-10-06 07:52:02","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-05-14 15:18:21","codes":[{"authorDate":"2019-05-14 15:18:21","commitOrder":4,"curCode":"  @Test public void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","date":"2019-05-22 11:22:14","endLine":1885,"groupId":"3788","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/7dc6796fa14ef2f024783dc28281da684d632a.src","preCode":"  @Test public void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1860,"status":"M"},{"authorDate":"2019-05-14 15:18:21","commitOrder":4,"curCode":"  @Test public void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","date":"2019-05-22 11:22:14","endLine":1913,"groupId":"14695","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstringWithFor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/7dc6796fa14ef2f024783dc28281da684d632a.src","preCode":"  @Test public void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1887,"status":"M"}],"commitId":"170d5225fb65fd49df83d0234d8a69d11a9469c4","commitMessage":"@@@[CALCITE-3050] Integrate SqlDialect and SqlParser.Config\n\nAdd a method SqlDialect.configureParser(SqlParser.ConfigBuilder). \nwhich allows a dialect to pass on its settings to a SQL parser.\n\nAlso add SqlDialect methods getUnquotedCasing().  getQuotedCasing(). \ngetConformance().  isCaseSensitive().\n\nAdd Snowflake dialect.\n","date":"2019-05-22 11:22:14","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","date":"2020-04-06 04:57:49","endLine":3035,"groupId":"3788","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3010,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","date":"2020-04-06 04:57:49","endLine":3063,"groupId":"14695","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstringWithFor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3037,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-01-30 21:13:12","codes":[{"authorDate":"2018-01-30 21:13:12","commitOrder":6,"curCode":"  @Test void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withClickHouse()\n        .ok(expectedClickHouse)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","date":"2020-04-17 16:35:48","endLine":3116,"groupId":"3788","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9e/5307061dda10e557d113018d29b22ba600df5d.src","preCode":"  @Test void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3087,"status":"M"},{"authorDate":"2018-01-30 21:13:12","commitOrder":6,"curCode":"  @Test void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2, 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withClickHouse()\n        .ok(expectedClickHouse)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","date":"2020-04-17 16:35:48","endLine":3148,"groupId":"3787","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstringWithFor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9e/5307061dda10e557d113018d29b22ba600df5d.src","preCode":"  @Test void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3118,"status":"M"}],"commitId":"39e58566c1ac02824d99ae9260d3315539efd57e","commitMessage":"@@@[CALCITE-2157] ClickHouse dialect implementation (Chris Baynes)\n\nclose apache/calcite#618\n","date":"2020-04-17 16:35:48","modifiedFileCount":"3","status":"M","submitter":"Chris Baynes"},{"authorTime":"2020-01-30 14:49:20","codes":[{"authorDate":"2020-01-30 14:49:20","commitOrder":7,"curCode":"  @Test void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPresto = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withClickHouse()\n        .ok(expectedClickHouse)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withPresto()\n        .ok(expectedPresto)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","date":"2020-06-11 15:17:17","endLine":3207,"groupId":"3788","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/681dbcb1b9da8a56f6dc773d995c57e1d9626f.src","preCode":"  @Test void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withClickHouse()\n        .ok(expectedClickHouse)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3174,"status":"M"},{"authorDate":"2020-01-30 14:49:20","commitOrder":7,"curCode":"  @Test void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2, 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPresto = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withClickHouse()\n        .ok(expectedClickHouse)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withPresto()\n        .ok(expectedPresto)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","date":"2020-06-11 15:17:17","endLine":3243,"groupId":"10788","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstringWithFor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d8/681dbcb1b9da8a56f6dc773d995c57e1d9626f.src","preCode":"  @Test void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2, 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withClickHouse()\n        .ok(expectedClickHouse)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3209,"status":"M"}],"commitId":"f577b7e3d91191051cfdaade27e0a74f3603648a","commitMessage":"@@@[CALCITE-3724] Presto dialect implementation\n\nFixup (by Danny):\n- Add a new tool RelToSqlConverterUtil#specialOperatorByName and remove\nClickHouseSqlDialect.CLICKHOUSE_SUBSTRING\n- Remove the common code in PrestoSqlDialect and reuse codes from other\ndialect instances\n\nclose apache#calcite#1776\n","date":"2020-06-11 15:17:17","modifiedFileCount":"5","status":"M","submitter":"XuQianJin-Stars"},{"authorTime":"2021-08-12 14:23:53","codes":[{"authorDate":"2021-08-12 14:23:53","commitOrder":8,"curCode":"  @Test void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPresto = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withClickHouse().ok(expectedClickHouse)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\")\n        .withMysql().ok(expectedMysql)\n        .withOracle().ok(expectedOracle)\n        .withPostgresql().ok(expectedPostgresql)\n        .withPresto().ok(expectedPresto)\n        .withRedshift().ok(expectedRedshift)\n        .withSnowflake().ok(expectedSnowflake);\n  }\n","date":"2021-08-14 15:52:54","endLine":3635,"groupId":"101561","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/f75c93796391bbde612ea6420ab122a1868587.src","preCode":"  @Test void testSubstring() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPresto = \"SELECT SUBSTR(\\\"brand_name\\\", 2)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    sql(query)\n        .withClickHouse()\n        .ok(expectedClickHouse)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withPresto()\n        .ok(expectedPresto)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        \r\n        .throws_(\"MSSQL SUBSTRING requires FROM and FOR arguments\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3609,"status":"M"},{"authorDate":"2021-08-12 14:23:53","commitOrder":8,"curCode":"  @Test void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2, 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPresto = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withClickHouse().ok(expectedClickHouse)\n        .withMysql().ok(expectedMysql)\n        .withMssql().ok(expectedMssql)\n        .withOracle().ok(expectedOracle)\n        .withPostgresql().ok(expectedPostgresql)\n        .withPresto().ok(expectedPresto)\n        .withRedshift().ok(expectedRedshift)\n        .withSnowflake().ok(expectedSnowflake);\n  }\n","date":"2021-08-14 15:52:54","endLine":3663,"groupId":"101561","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstringWithFor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/f75c93796391bbde612ea6420ab122a1868587.src","preCode":"  @Test void testSubstringWithFor() {\n    final String query = \"select substring(\\\"brand_name\\\" from 2 for 3) \"\n        + \"from \\\"product\\\"\\n\";\n    final String expectedClickHouse = \"SELECT substring(`brand_name`, 2, 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedOracle = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPostgresql = \"SELECT SUBSTRING(\\\"brand_name\\\" FROM 2 FOR 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedPresto = \"SELECT SUBSTR(\\\"brand_name\\\", 2, 3)\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    final String expectedSnowflake = expectedPostgresql;\n    final String expectedRedshift = expectedPostgresql;\n    final String expectedMysql = \"SELECT SUBSTRING(`brand_name` FROM 2 FOR 3)\\n\"\n        + \"FROM `foodmart`.`product`\";\n    final String expectedMssql = \"SELECT SUBSTRING([brand_name], 2, 3)\\n\"\n        + \"FROM [foodmart].[product]\";\n    sql(query)\n        .withClickHouse()\n        .ok(expectedClickHouse)\n        .withOracle()\n        .ok(expectedOracle)\n        .withPostgresql()\n        .ok(expectedPostgresql)\n        .withPresto()\n        .ok(expectedPresto)\n        .withSnowflake()\n        .ok(expectedSnowflake)\n        .withRedshift()\n        .ok(expectedRedshift)\n        .withMysql()\n        .ok(expectedMysql)\n        .withMssql()\n        .ok(expectedMssql);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3637,"status":"M"}],"commitId":"dff28d1ce49871a451c7ff3e740259441da7c72a","commitMessage":"@@@Cosmetic\n\nIn RelToSqlConverterTest. \nmerge methods that test the same query in several dialects;\nmerge '.withXxx().ok(expectedXxx)' into one line. \nand sort such lines alphabetically;\nnormalize 'expectedPostgreSQL' and 'expectedPostgreSql' to\n'expectedPostgresql'.  and so forth.\n","date":"2021-08-14 15:52:54","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"}]
