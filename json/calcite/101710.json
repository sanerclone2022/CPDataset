[{"authorTime":"2017-09-15 08:33:17","codes":[{"authorDate":"2017-09-15 08:33:17","commitOrder":3,"curCode":"    @Override public ColumnStrategy generationStrategy(RelOptTable table,\n        int iColumn) {\n      final ModifiableViewTable viewTable =\n          table.unwrap(ModifiableViewTable.class);\n      assert iColumn < viewTable.columnMapping.size();\n\n      \r\n      \r\n      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);\n      final RexNode viewConstraint = projectMap.get(mappedOrdinal);\n      if (viewConstraint != null) {\n        return ColumnStrategy.DEFAULT;\n      }\n\n      \r\n      final Table schemaTable = viewTable.getTable();\n      if (schemaTable instanceof Wrapper) {\n        final InitializerExpressionFactory initializerExpressionFactory =\n            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);\n        if (initializerExpressionFactory != null) {\n          return initializerExpressionFactory.generationStrategy(table,\n              iColumn);\n        }\n      }\n      return super.generationStrategy(table, iColumn);\n    }\n","date":"2017-11-27 11:39:28","endLine":221,"groupId":"9174","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generationStrategy","params":"(RelOptTabletable@intiColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/12188060e7bb33953f476cb3e0111abef0e380.src","preCode":"    @Override public ColumnStrategy generationStrategy(RelOptTable table,\n        int iColumn) {\n      final ModifiableViewTable viewTable =\n          table.unwrap(ModifiableViewTable.class);\n      assert iColumn < viewTable.columnMapping.size();\n\n      \r\n      \r\n      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);\n      final RexNode viewConstraint = projectMap.get(mappedOrdinal);\n      if (viewConstraint != null) {\n        return ColumnStrategy.DEFAULT;\n      }\n\n      \r\n      final Table schemaTable = viewTable.getTable();\n      if (schemaTable instanceof Wrapper) {\n        final InitializerExpressionFactory initializerExpressionFactory =\n            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);\n        if (initializerExpressionFactory != null) {\n          return initializerExpressionFactory.generationStrategy(table,\n              iColumn);\n        }\n      }\n      return super.generationStrategy(table, iColumn);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"B"},{"authorDate":"2017-09-15 08:33:17","commitOrder":3,"curCode":"    @Override public RexNode newColumnDefaultValue(RelOptTable table,\n        int iColumn, InitializerContext context) {\n      final ModifiableViewTable viewTable = table.unwrap(ModifiableViewTable.class);\n      assert iColumn < viewTable.columnMapping.size();\n      final RexBuilder rexBuilder = context.getRexBuilder();\n      final RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();\n      final RelDataType viewType = viewTable.getRowType(typeFactory);\n      final RelDataType iType = viewType.getFieldList().get(iColumn).getType();\n\n      \r\n      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);\n      final RexNode viewConstraint = projectMap.get(mappedOrdinal);\n      if (viewConstraint != null) {\n        return rexBuilder.ensureType(iType, viewConstraint, true);\n      }\n\n      \r\n      final Table schemaTable = viewTable.getTable();\n      if (schemaTable instanceof Wrapper) {\n        final InitializerExpressionFactory initializerExpressionFactory =\n            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);\n        if (initializerExpressionFactory != null) {\n          final RexNode tableConstraint =\n              initializerExpressionFactory.newColumnDefaultValue(table, iColumn,\n                  context);\n          return rexBuilder.ensureType(iType, tableConstraint, true);\n        }\n      }\n\n      \r\n      return super.newColumnDefaultValue(table, iColumn, context);\n    }\n","date":"2017-11-27 11:39:28","endLine":254,"groupId":"9174","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newColumnDefaultValue","params":"(RelOptTabletable@intiColumn@InitializerContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/12188060e7bb33953f476cb3e0111abef0e380.src","preCode":"    @Override public RexNode newColumnDefaultValue(RelOptTable table,\n        int iColumn, InitializerContext context) {\n      final ModifiableViewTable viewTable = table.unwrap(ModifiableViewTable.class);\n      assert iColumn < viewTable.columnMapping.size();\n      final RexBuilder rexBuilder = context.getRexBuilder();\n      final RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();\n      final RelDataType viewType = viewTable.getRowType(typeFactory);\n      final RelDataType iType = viewType.getFieldList().get(iColumn).getType();\n\n      \r\n      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);\n      final RexNode viewConstraint = projectMap.get(mappedOrdinal);\n      if (viewConstraint != null) {\n        return rexBuilder.ensureType(iType, viewConstraint, true);\n      }\n\n      \r\n      final Table schemaTable = viewTable.getTable();\n      if (schemaTable instanceof Wrapper) {\n        final InitializerExpressionFactory initializerExpressionFactory =\n            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);\n        if (initializerExpressionFactory != null) {\n          final RexNode tableConstraint =\n              initializerExpressionFactory.newColumnDefaultValue(table, iColumn,\n                  context);\n          return rexBuilder.ensureType(iType, tableConstraint, true);\n        }\n      }\n\n      \r\n      return super.newColumnDefaultValue(table, iColumn, context);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"MB"}],"commitId":"238b3225a2309a1a72bd1383b57982feaa2068e8","commitMessage":"@@@[CALCITE-707] Add \"server\" module.  with built-in support for simple DDL statements\n\nThe default parser in core does not contain DDL. We do not want to\nimpose our DDL dialect on sub-projects.\n\nIn server module's parser.  add CREATE [FOREIGN] SCHEMA.  DROP SCHEMA. \nCREATE TABLE.  CREATE TABLE AS ....  DROP TABLE.  CREATE VIEW. \nCREATE MATERIALIZED VIEW.  DROP VIEW.\n\nCREATE TABLE supports STORED and VIRTUAL generated\ncolumns.  default column values.  and constraints.\n\nAdd Quidem test in server module; QuidemTest is now abstract.  and has\nsub-class CoreQuidemTest in core module.\n\nAdd class ColumnStrategy.  which describes how a column is populated.\n\nAll CREATE commands have IF NOT EXISTS (except CREATE VIEW.  which has\nOR REPLACE).  and all DROP commands have IF EXISTS.\n\nAdd SqlDdl as base class for SqlCreate and SqlDrop. Add SqlOperator as\nfirst argument to SqlCreate and SqlDrop constructors.  and deprecate\nprevious constructors.\n\nEnsure that collations deduced for Calc are sorted.\n\nAdd Static.cons as short-hand for ConsList.of.\n","date":"2017-11-27 11:39:28","modifiedFileCount":"48","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"    @Override public ColumnStrategy generationStrategy(RelOptTable table,\n        int iColumn) {\n      final ModifiableViewTable viewTable = requireNonNull(\n          table.unwrap(ModifiableViewTable.class),\n          () -> \"unable to unwrap ModifiableViewTable from \" + table);\n      assert iColumn < viewTable.columnMapping.size();\n\n      \r\n      \r\n      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);\n      final RexNode viewConstraint = projectMap.get(mappedOrdinal);\n      if (viewConstraint != null) {\n        return ColumnStrategy.DEFAULT;\n      }\n\n      \r\n      final Table schemaTable = viewTable.getTable();\n      if (schemaTable instanceof Wrapper) {\n        final InitializerExpressionFactory initializerExpressionFactory =\n            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);\n        if (initializerExpressionFactory != null) {\n          return initializerExpressionFactory.generationStrategy(table,\n              iColumn);\n        }\n      }\n      return super.generationStrategy(table, iColumn);\n    }\n","date":"2020-11-30 06:45:33","endLine":227,"groupId":"101710","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"generationStrategy","params":"(RelOptTabletable@intiColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/d7026aac1f5dff78f26055897a60c93cba1eeb.src","preCode":"    @Override public ColumnStrategy generationStrategy(RelOptTable table,\n        int iColumn) {\n      final ModifiableViewTable viewTable =\n          table.unwrap(ModifiableViewTable.class);\n      assert iColumn < viewTable.columnMapping.size();\n\n      \r\n      \r\n      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);\n      final RexNode viewConstraint = projectMap.get(mappedOrdinal);\n      if (viewConstraint != null) {\n        return ColumnStrategy.DEFAULT;\n      }\n\n      \r\n      final Table schemaTable = viewTable.getTable();\n      if (schemaTable instanceof Wrapper) {\n        final InitializerExpressionFactory initializerExpressionFactory =\n            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);\n        if (initializerExpressionFactory != null) {\n          return initializerExpressionFactory.generationStrategy(table,\n              iColumn);\n        }\n      }\n      return super.generationStrategy(table, iColumn);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":4,"curCode":"    @Override public RexNode newColumnDefaultValue(RelOptTable table,\n        int iColumn, InitializerContext context) {\n      final ModifiableViewTable viewTable = requireNonNull(\n          table.unwrap(ModifiableViewTable.class),\n          () -> \"unable to unwrap ModifiableViewTable from \" + table);\n      assert iColumn < viewTable.columnMapping.size();\n      final RexBuilder rexBuilder = context.getRexBuilder();\n      final RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();\n      final RelDataType viewType = viewTable.getRowType(typeFactory);\n      final RelDataType iType = viewType.getFieldList().get(iColumn).getType();\n\n      \r\n      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);\n      final RexNode viewConstraint = projectMap.get(mappedOrdinal);\n      if (viewConstraint != null) {\n        return rexBuilder.ensureType(iType, viewConstraint, true);\n      }\n\n      \r\n      final Table schemaTable = viewTable.getTable();\n      if (schemaTable instanceof Wrapper) {\n        final InitializerExpressionFactory initializerExpressionFactory =\n            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);\n        if (initializerExpressionFactory != null) {\n          final RexNode tableConstraint =\n              initializerExpressionFactory.newColumnDefaultValue(table, iColumn,\n                  context);\n          return rexBuilder.ensureType(iType, tableConstraint, true);\n        }\n      }\n\n      \r\n      return super.newColumnDefaultValue(table, iColumn, context);\n    }\n","date":"2020-11-30 06:45:33","endLine":262,"groupId":"101710","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"newColumnDefaultValue","params":"(RelOptTabletable@intiColumn@InitializerContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/d7026aac1f5dff78f26055897a60c93cba1eeb.src","preCode":"    @Override public RexNode newColumnDefaultValue(RelOptTable table,\n        int iColumn, InitializerContext context) {\n      final ModifiableViewTable viewTable = table.unwrap(ModifiableViewTable.class);\n      assert iColumn < viewTable.columnMapping.size();\n      final RexBuilder rexBuilder = context.getRexBuilder();\n      final RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();\n      final RelDataType viewType = viewTable.getRowType(typeFactory);\n      final RelDataType iType = viewType.getFieldList().get(iColumn).getType();\n\n      \r\n      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);\n      final RexNode viewConstraint = projectMap.get(mappedOrdinal);\n      if (viewConstraint != null) {\n        return rexBuilder.ensureType(iType, viewConstraint, true);\n      }\n\n      \r\n      final Table schemaTable = viewTable.getTable();\n      if (schemaTable instanceof Wrapper) {\n        final InitializerExpressionFactory initializerExpressionFactory =\n            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);\n        if (initializerExpressionFactory != null) {\n          final RexNode tableConstraint =\n              initializerExpressionFactory.newColumnDefaultValue(table, iColumn,\n                  context);\n          return rexBuilder.ensureType(iType, tableConstraint, true);\n        }\n      }\n\n      \r\n      return super.newColumnDefaultValue(table, iColumn, context);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
