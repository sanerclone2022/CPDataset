[{"authorTime":"2015-02-22 10:10:32","codes":[{"authorDate":"2015-03-24 08:06:47","commitOrder":2,"curCode":"  @Test public void testOrderGroupDistinct() {\n    \r\n    \r\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno) desc\");\n\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"ORDER BY deptno, ^sum(empno)^\",\n        \"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT\");\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMP`\\\\.`EMPNO`\\\\)' is not in the select clause\");\n    checkFails(\"SELECT DISTINCT deptno, min(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMP`\\\\.`EMPNO`\\\\)' is not in the select clause\");\n    check(\"SELECT DISTINCT deptno, sum(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, sum(empno)\");\n  }\n","date":"2015-03-24 08:06:47","endLine":5849,"groupId":"15171","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderGroupDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/18df4c15b3ce4cae928c8e83aa9b09360898a8.src","preCode":"  @Test public void testOrderGroupDistinct() {\n    \r\n    \r\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno) desc\");\n\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"ORDER BY deptno, ^sum(empno)^\",\n        \"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT\");\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMP`\\\\.`EMPNO`\\\\)' is not in the select clause\");\n    checkFails(\"SELECT DISTINCT deptno, min(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMP`\\\\.`EMPNO`\\\\)' is not in the select clause\");\n    check(\"SELECT DISTINCT deptno, sum(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, sum(empno)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5815,"status":"B"},{"authorDate":"2015-02-22 10:10:32","commitOrder":2,"curCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","date":"2015-03-08 07:33:21","endLine":7081,"groupId":"4429","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/04ff542137cae10283dd50afa3b557cd567fcf.src","preCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7057,"status":"NB"}],"commitId":"5e285a16108b725f826acf8b14e2edf3b26989ef","commitMessage":"@@@[CALCITE-634] Allow ORDER BY aggregate function in SELECT DISTINCT.  provided that it occurs in SELECT clause (Sean Hsuan-Yi Chu)\n","date":"2015-03-24 08:06:47","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-02-22 10:10:32","codes":[{"authorDate":"2016-03-10 10:49:01","commitOrder":3,"curCode":"  @Test public void testOrderGroupDistinct() {\n    \r\n    \r\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno) desc\");\n\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"ORDER BY deptno, ^sum(empno)^\",\n        \"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT\");\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    checkFails(\"SELECT DISTINCT deptno, min(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    check(\"SELECT DISTINCT deptno, sum(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, sum(empno)\");\n  }\n","date":"2016-05-18 12:56:38","endLine":6082,"groupId":"15171","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderGroupDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/8c5e4cdc1c6126f0895db04ee5b71787e0b266.src","preCode":"  @Test public void testOrderGroupDistinct() {\n    \r\n    \r\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno) desc\");\n\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"ORDER BY deptno, ^sum(empno)^\",\n        \"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT\");\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMP`\\\\.`EMPNO`\\\\)' is not in the select clause\");\n    checkFails(\"SELECT DISTINCT deptno, min(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMP`\\\\.`EMPNO`\\\\)' is not in the select clause\");\n    check(\"SELECT DISTINCT deptno, sum(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, sum(empno)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6048,"status":"M"},{"authorDate":"2015-02-22 10:10:32","commitOrder":3,"curCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","date":"2015-03-08 07:33:21","endLine":7081,"groupId":"4429","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/04ff542137cae10283dd50afa3b557cd567fcf.src","preCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7057,"status":"N"}],"commitId":"9bd7d7550cfe31b76e3970a532014a8186e1ff5a","commitMessage":"@@@[CALCITE-1150] Add dynamic record type and dynamic star for schema-on-read table\n\n * Add dynamic star column and dynamic record type. Use \"**\" as the dynamic star column name prefix. \n * RelOptTableImpl.toRel() will convert a dynamicRecordType to RelRecordType. This ensures an immutable record type in sql-to-rel. \n * Add RelDataType.isDynamicStruct().\n\nClose apache/calcite/#228\n","date":"2016-05-18 12:56:38","modifiedFileCount":"17","status":"M","submitter":"Jinfeng Ni"},{"authorTime":"2015-02-22 10:10:32","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":4,"curCode":"  @Test public void testOrderGroupDistinct() {\n    \r\n    \r\n    sql(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\").ok();\n\n    sql(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\").ok();\n\n    sql(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\").ok();\n\n    sql(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\").ok();\n\n    sql(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno) desc\").ok();\n\n    sql(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"ORDER BY deptno, ^sum(empno)^\")\n        .fails(\"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT\");\n    sql(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\")\n        .fails(\"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    sql(\"SELECT DISTINCT deptno, min(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\")\n        .fails(\"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    sql(\"SELECT DISTINCT deptno, sum(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, sum(empno)\").ok();\n  }\n","date":"2019-09-24 02:59:18","endLine":6642,"groupId":"15408","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderGroupDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testOrderGroupDistinct() {\n    \r\n    \r\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\");\n\n    check(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\");\n\n    check(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno) desc\");\n\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"ORDER BY deptno, ^sum(empno)^\",\n        \"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT\");\n    checkFails(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    checkFails(\"SELECT DISTINCT deptno, min(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\",\n        \"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    check(\"SELECT DISTINCT deptno, sum(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, sum(empno)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6608,"status":"M"},{"authorDate":"2015-02-22 10:10:32","commitOrder":4,"curCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","date":"2015-03-08 07:33:21","endLine":7081,"groupId":"4429","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/04ff542137cae10283dd50afa3b557cd567fcf.src","preCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7057,"status":"N"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testOrderGroupDistinct() {\n    \r\n    \r\n    sql(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\").ok();\n\n    sql(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\").ok();\n\n    sql(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\").ok();\n\n    sql(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\").ok();\n\n    sql(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno) desc\").ok();\n\n    sql(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"ORDER BY deptno, ^sum(empno)^\")\n        .fails(\"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT\");\n    sql(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\")\n        .fails(\"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    sql(\"SELECT DISTINCT deptno, min(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\")\n        .fails(\"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    sql(\"SELECT DISTINCT deptno, sum(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, sum(empno)\").ok();\n  }\n","date":"2020-04-06 04:57:49","endLine":6722,"groupId":"101207","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrderGroupDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testOrderGroupDistinct() {\n    \r\n    \r\n    sql(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\").ok();\n\n    sql(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by 1\").ok();\n\n    sql(\"select distinct count(empno) AS countEMPNO from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\").ok();\n\n    sql(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno)\").ok();\n\n    sql(\"select distinct count(empno) from emp\\n\"\n        + \"group by empno\\n\"\n        + \"order by count(empno) desc\").ok();\n\n    sql(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"ORDER BY deptno, ^sum(empno)^\")\n        .fails(\"Aggregate expression is illegal in ORDER BY clause of non-aggregating SELECT\");\n    sql(\"SELECT DISTINCT deptno from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\")\n        .fails(\"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    sql(\"SELECT DISTINCT deptno, min(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, ^sum(empno)^\")\n        .fails(\"Expression 'SUM\\\\(`EMPNO`\\\\)' is not in the select clause\");\n    sql(\"SELECT DISTINCT deptno, sum(empno) from emp\\n\"\n        + \"GROUP BY deptno ORDER BY deptno, sum(empno)\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6688,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","date":"2020-04-06 04:57:49","endLine":9981,"groupId":"101207","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9957,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
