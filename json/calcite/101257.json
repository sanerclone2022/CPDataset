[{"authorTime":"2017-03-23 03:33:46","codes":[{"authorDate":"2017-03-23 03:33:46","commitOrder":1,"curCode":"  @Test public void testAggregateGroupingWithDistinctFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, true, null,\n                      \"g\", builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"DISTINCT not allowed\"));\n    }\n  }\n","date":"2017-08-30 12:01:50","endLine":778,"groupId":"6471","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateGroupingWithDistinctFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/337cc07407816f66bf54436517ce3541cceae5.src","preCode":"  @Test public void testAggregateGroupingWithDistinctFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, true, null,\n                      \"g\", builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"DISTINCT not allowed\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":765,"status":"B"},{"authorDate":"2017-03-23 03:33:46","commitOrder":1,"curCode":"  @Test public void testAggregateGroupingWithFilterFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, false,\n                      builder.literal(true), \"g\", builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"FILTER not allowed\"));\n    }\n  }\n","date":"2017-08-30 12:01:50","endLine":793,"groupId":"11084","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateGroupingWithFilterFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/337cc07407816f66bf54436517ce3541cceae5.src","preCode":"  @Test public void testAggregateGroupingWithFilterFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, false,\n                      builder.literal(true), \"g\", builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"FILTER not allowed\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":780,"status":"B"}],"commitId":"1e7ae1c30a5e6f4335f2e4cc0059f2f2901e35fd","commitMessage":"@@@[CALCITE-1069] In Aggregate.  deprecate indicators.  and allow GROUPING to be used as an aggregate function\n\nDeprecate the Aggregate.indicator field (strongly encouraging people\nto set it to false) and to allow GROUPING (and its synonym.  GROUP_ID)\nto be used as an aggregate function. It will be handled at implement\ntime.\n\nWith indicator = false.  even queries with more than one grouping set\nwill just output the join keys and the aggregate functions. A join key\nwill be nullable if it doesn't appear in all grouping sets.\n\nThe output row type of Aggregate will be more consistent.  and this will\nhave benefits such as fewer bugs in rules.\n\nAdd RelBuilder.rename().\n\nRemove SqlValidatorNamespace.translate() and\nSqlQualified.suffixTranslated().\n\nMute deprecation warnings.\n\nRemove MutableAggregate.indicator.\n\nClose apache/calcite#470\n","date":"2017-08-30 12:01:50","modifiedFileCount":"49","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-11-07 08:03:13","codes":[{"authorDate":"2017-11-07 08:03:13","commitOrder":2,"curCode":"  @Test public void testAggregateGroupingWithDistinctFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, true,\n                      false, null, \"g\", builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"DISTINCT not allowed\"));\n    }\n  }\n","date":"2017-11-09 00:41:32","endLine":845,"groupId":"6471","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateGroupingWithDistinctFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/48/5884176169a212ca7517fa2b4e4ddc92f6471a.src","preCode":"  @Test public void testAggregateGroupingWithDistinctFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, true, null,\n                      \"g\", builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"DISTINCT not allowed\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":832,"status":"M"},{"authorDate":"2017-11-07 08:03:13","commitOrder":2,"curCode":"  @Test public void testAggregateGroupingWithFilterFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, false,\n                      false, builder.literal(true), \"g\",\n                      builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"FILTER not allowed\"));\n    }\n  }\n","date":"2017-11-09 00:41:32","endLine":861,"groupId":"6471","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateGroupingWithFilterFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/48/5884176169a212ca7517fa2b4e4ddc92f6471a.src","preCode":"  @Test public void testAggregateGroupingWithFilterFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, false,\n                      builder.literal(true), \"g\", builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"FILTER not allowed\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"M"}],"commitId":"fe3529d9a6d4d826c6e77fc4c0d7d18bd681bb85","commitMessage":"@@@[CALCITE-2035] Allow approximate aggregate functions.  and add APPROX_COUNT_DISTINCT\n\nThere are changes to RelBuilder and AggregateCall APIs.  but extensions\nto SQL grammar will not happen until [CALCITE-1588].\n\nIn Druid adapter.  HyperLogLog will be used if the call is to\nAPPROX_COUNT_DISTINCT or if approximateDistinctCount=true in connection\nproperties.\n","date":"2017-11-09 00:41:32","modifiedFileCount":"29","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-11-04 10:59:11","codes":[{"authorDate":"2018-11-04 10:59:11","commitOrder":3,"curCode":"  @Test public void testAggregateGroupingWithDistinctFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING,\n                      builder.field(\"DEPTNO\"))\n                      .distinct(true)\n                      .as(\"g\"))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"DISTINCT not allowed\"));\n    }\n  }\n","date":"2018-11-08 08:33:06","endLine":935,"groupId":"109","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateGroupingWithDistinctFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/d5b951cead50d73e08ebbff4f861e80628d72f.src","preCode":"  @Test public void testAggregateGroupingWithDistinctFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, true,\n                      false, null, \"g\", builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"DISTINCT not allowed\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":920,"status":"M"},{"authorDate":"2018-11-04 10:59:11","commitOrder":3,"curCode":"  @Test public void testAggregateGroupingWithFilterFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING,\n                      builder.field(\"DEPTNO\"))\n                      .filter(builder.literal(true))\n                      .as(\"g\"))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"FILTER not allowed\"));\n    }\n  }\n","date":"2018-11-08 08:33:06","endLine":952,"groupId":"15743","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateGroupingWithFilterFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/d5b951cead50d73e08ebbff4f861e80628d72f.src","preCode":"  @Test public void testAggregateGroupingWithFilterFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING, false,\n                      false, builder.literal(true), \"g\",\n                      builder.field(\"DEPTNO\")))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"FILTER not allowed\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":937,"status":"M"}],"commitId":"4cc46130f71d21e4f5b76f6e645380cd83d2c921","commitMessage":"@@@[CALCITE-2654] In RelBuilder.  add a fluent API for building complex aggregate calls\n\nTo interface AggCall in RelBuilder.  add methods distinct(boolean). \nfilter(RexNode).  approximate(boolean).  alias(String). And simplify the\nRelBuilder.aggregateCall method to just two arguments:\naggregateCall(op.  operands). Thus you only specify the arguments that\nare of interest. Similar changes to count.  countStar.  min.  max.  sum. \navg.\n","date":"2018-11-08 08:33:06","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testAggregateGroupingWithDistinctFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING,\n                      builder.field(\"DEPTNO\"))\n                      .distinct(true)\n                      .as(\"g\"))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"DISTINCT not allowed\"));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":1550,"groupId":"101257","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateGroupingWithDistinctFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testAggregateGroupingWithDistinctFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING,\n                      builder.field(\"DEPTNO\"))\n                      .distinct(true)\n                      .as(\"g\"))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"DISTINCT not allowed\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1535,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testAggregateGroupingWithFilterFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING,\n                      builder.field(\"DEPTNO\"))\n                      .filter(builder.literal(true))\n                      .as(\"g\"))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"FILTER not allowed\"));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":1567,"groupId":"101257","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateGroupingWithFilterFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testAggregateGroupingWithFilterFails() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    try {\n      RelNode root =\n          builder.scan(\"EMP\")\n              .aggregate(builder.groupKey(6, 7),\n                  builder.aggregateCall(SqlStdOperatorTable.GROUPING,\n                      builder.field(\"DEPTNO\"))\n                      .filter(builder.literal(true))\n                      .as(\"g\"))\n              .build();\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(), is(\"FILTER not allowed\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1552,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
