[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testLowerFunc() {\n    tester.setFor(SqlStdOperatorTable.LOWER);\n\n    \r\n    tester.checkString(\"lower('A')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('a')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('1')\", \"1\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('AA')\", \"aa\", \"CHAR(2) NOT NULL\");\n    tester.checkNull(\"lower(cast(null as varchar(1)))\");\n  }\n","date":"2014-11-14 09:39:34","endLine":3420,"groupId":"5753","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLowerFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLowerFunc() {\n    tester.setFor(SqlStdOperatorTable.LOWER);\n\n    \r\n    tester.checkString(\"lower('A')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('a')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('1')\", \"1\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('AA')\", \"aa\", \"CHAR(2) NOT NULL\");\n    tester.checkNull(\"lower(cast(null as varchar(1)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3411,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testTrimFunc() {\n    tester.setFor(SqlStdOperatorTable.TRIM);\n\n    \r\n    tester.checkString(\n        \"trim('a' from 'aAa')\",\n        \"A\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(both 'a' from 'aAa')\", \"A\", \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(leading 'a' from 'aAa')\",\n        \"Aa\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(trailing 'a' from 'aAa')\",\n        \"aA\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkNull(\"trim(cast(null as varchar(1)) from 'a')\");\n    tester.checkNull(\"trim('a' from cast(null as varchar(1)))\");\n\n    if (Bug.FNL3_FIXED) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      tester.checkFails(\n          \"trim('xy' from 'abcde')\",\n          \"could not calculate results for the following row:\\n\"\n          + \"\\\\[ 0 \\\\]\\n\"\n          + \"Messages:\\n\"\n          + \"\\\\[0\\\\]:PC=0 Code=22027 \",\n          true);\n      tester.checkFails(\n          \"trim('' from 'abcde')\",\n          \"could not calculate results for the following row:\\n\"\n          + \"\\\\[ 0 \\\\]\\n\"\n          + \"Messages:\\n\"\n          + \"\\\\[0\\\\]:PC=0 Code=22027 \",\n          true);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":3995,"groupId":"5014","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTrimFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testTrimFunc() {\n    tester.setFor(SqlStdOperatorTable.TRIM);\n\n    \r\n    tester.checkString(\n        \"trim('a' from 'aAa')\",\n        \"A\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(both 'a' from 'aAa')\", \"A\", \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(leading 'a' from 'aAa')\",\n        \"Aa\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(trailing 'a' from 'aAa')\",\n        \"aA\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkNull(\"trim(cast(null as varchar(1)) from 'a')\");\n    tester.checkNull(\"trim('a' from cast(null as varchar(1)))\");\n\n    if (Bug.FNL3_FIXED) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      tester.checkFails(\n          \"trim('xy' from 'abcde')\",\n          \"could not calculate results for the following row:\\n\"\n          + \"\\\\[ 0 \\\\]\\n\"\n          + \"Messages:\\n\"\n          + \"\\\\[0\\\\]:PC=0 Code=22027 \",\n          true);\n      tester.checkFails(\n          \"trim('' from 'abcde')\",\n          \"could not calculate results for the following row:\\n\"\n          + \"\\\\[ 0 \\\\]\\n\"\n          + \"Messages:\\n\"\n          + \"\\\\[0\\\\]:PC=0 Code=22027 \",\n          true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3951,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2018-09-20 00:21:04","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testLowerFunc() {\n    tester.setFor(SqlStdOperatorTable.LOWER);\n\n    \r\n    tester.checkString(\"lower('A')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('a')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('1')\", \"1\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('AA')\", \"aa\", \"CHAR(2) NOT NULL\");\n    tester.checkNull(\"lower(cast(null as varchar(1)))\");\n  }\n","date":"2014-11-14 09:39:34","endLine":3420,"groupId":"5753","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLowerFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLowerFunc() {\n    tester.setFor(SqlStdOperatorTable.LOWER);\n\n    \r\n    tester.checkString(\"lower('A')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('a')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('1')\", \"1\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('AA')\", \"aa\", \"CHAR(2) NOT NULL\");\n    tester.checkNull(\"lower(cast(null as varchar(1)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3411,"status":"N"},{"authorDate":"2018-09-20 00:21:04","commitOrder":2,"curCode":"  @Test public void testTrimFunc() {\n    tester.setFor(SqlStdOperatorTable.TRIM);\n\n    \r\n    tester.checkString(\n        \"trim('a' from 'aAa')\",\n        \"A\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(both 'a' from 'aAa')\", \"A\", \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(leading 'a' from 'aAa')\",\n        \"Aa\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(trailing 'a' from 'aAa')\",\n        \"aA\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkNull(\"trim(cast(null as varchar(1)) from 'a')\");\n    tester.checkNull(\"trim('a' from cast(null as varchar(1)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    tester.checkFails(\n        \"trim('xy' from 'abcde')\",\n        \"trim error: trim character must be exactly 1 character\",\n        true);\n    tester.checkFails(\n        \"trim('' from 'abcde')\",\n        \"trim error: trim character must be exactly 1 character\",\n        true);\n\n    final SqlTester tester1 = tester.withConformance(SqlConformanceEnum.MYSQL_5);\n    tester1.checkString(\n        \"trim(leading 'eh' from 'hehe__hehe')\", \"__hehe\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim(trailing 'eh' from 'hehe__hehe')\", \"hehe__\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim('eh' from 'hehe__hehe')\", \"__\", \"VARCHAR(10) NOT NULL\");\n  }\n","date":"2018-09-24 12:29:00","endLine":5327,"groupId":"16738","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTrimFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/44/84762a04b6a4bfbeb4a8583edb35684900f32d.src","preCode":"  @Test public void testTrimFunc() {\n    tester.setFor(SqlStdOperatorTable.TRIM);\n\n    \r\n    tester.checkString(\n        \"trim('a' from 'aAa')\",\n        \"A\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(both 'a' from 'aAa')\", \"A\", \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(leading 'a' from 'aAa')\",\n        \"Aa\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(trailing 'a' from 'aAa')\",\n        \"aA\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkNull(\"trim(cast(null as varchar(1)) from 'a')\");\n    tester.checkNull(\"trim('a' from cast(null as varchar(1)))\");\n\n    if (Bug.FNL3_FIXED) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      tester.checkFails(\n          \"trim('xy' from 'abcde')\",\n          \"could not calculate results for the following row:\\n\"\n              + \"\\\\[ 0 \\\\]\\n\"\n              + \"Messages:\\n\"\n              + \"\\\\[0\\\\]:PC=0 Code=22027 \",\n          true);\n      tester.checkFails(\n          \"trim('' from 'abcde')\",\n          \"could not calculate results for the following row:\\n\"\n              + \"\\\\[ 0 \\\\]\\n\"\n              + \"Messages:\\n\"\n              + \"\\\\[0\\\\]:PC=0 Code=22027 \",\n          true);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5283,"status":"M"}],"commitId":"8f14945461b3c20cba3f2d794a6ac950b7687da9","commitMessage":"@@@[CALCITE-2571] TRIM function now trims more than one character (Andrew Pilloud)\n\nIf strict SQL conformance.  still just trims one character.  per SQL standard.\n\nMake SQL conformance available to RexToLixTranslator (Julian Hyde).\n\nClose apache/calcite#840\n\nA previous PR: Close apache/calcite#820\n","date":"2018-09-24 12:29:00","modifiedFileCount":"25","status":"M","submitter":"Andrew Pilloud"},{"authorTime":"2018-11-10 00:39:20","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"  @Test public void testLowerFunc() {\n    tester.setFor(SqlStdOperatorTable.LOWER);\n\n    \r\n    tester.checkString(\"lower('A')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('a')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('1')\", \"1\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('AA')\", \"aa\", \"CHAR(2) NOT NULL\");\n    tester.checkNull(\"lower(cast(null as varchar(1)))\");\n  }\n","date":"2014-11-14 09:39:34","endLine":3420,"groupId":"5753","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLowerFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testLowerFunc() {\n    tester.setFor(SqlStdOperatorTable.LOWER);\n\n    \r\n    tester.checkString(\"lower('A')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('a')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('1')\", \"1\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('AA')\", \"aa\", \"CHAR(2) NOT NULL\");\n    tester.checkNull(\"lower(cast(null as varchar(1)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3411,"status":"N"},{"authorDate":"2018-11-10 00:39:20","commitOrder":3,"curCode":"  @Test public void testTrimFunc() {\n    tester.setFor(SqlStdOperatorTable.TRIM);\n\n    \r\n    tester.checkString(\n        \"trim('a' from 'aAa')\",\n        \"A\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(both 'a' from 'aAa')\", \"A\", \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(leading 'a' from 'aAa')\",\n        \"Aa\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(trailing 'a' from 'aAa')\",\n        \"aA\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkNull(\"trim(cast(null as varchar(1)) from 'a')\");\n    tester.checkNull(\"trim('a' from cast(null as varchar(1)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    tester.checkFails(\n        \"trim('xy' from 'abcde')\",\n        \"Trim error: trim character must be exactly 1 character\",\n        true);\n    tester.checkFails(\n        \"trim('' from 'abcde')\",\n        \"Trim error: trim character must be exactly 1 character\",\n        true);\n\n    final SqlTester tester1 = tester.withConformance(SqlConformanceEnum.MYSQL_5);\n    tester1.checkString(\n        \"trim(leading 'eh' from 'hehe__hehe')\", \"__hehe\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim(trailing 'eh' from 'hehe__hehe')\", \"hehe__\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim('eh' from 'hehe__hehe')\", \"__\", \"VARCHAR(10) NOT NULL\");\n  }\n","date":"2018-11-10 00:39:58","endLine":5630,"groupId":"16738","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTrimFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/cb0898c9a64835a69bee917990ca7df862e292.src","preCode":"  @Test public void testTrimFunc() {\n    tester.setFor(SqlStdOperatorTable.TRIM);\n\n    \r\n    tester.checkString(\n        \"trim('a' from 'aAa')\",\n        \"A\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(both 'a' from 'aAa')\", \"A\", \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(leading 'a' from 'aAa')\",\n        \"Aa\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(trailing 'a' from 'aAa')\",\n        \"aA\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkNull(\"trim(cast(null as varchar(1)) from 'a')\");\n    tester.checkNull(\"trim('a' from cast(null as varchar(1)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    tester.checkFails(\n        \"trim('xy' from 'abcde')\",\n        \"trim error: trim character must be exactly 1 character\",\n        true);\n    tester.checkFails(\n        \"trim('' from 'abcde')\",\n        \"trim error: trim character must be exactly 1 character\",\n        true);\n\n    final SqlTester tester1 = tester.withConformance(SqlConformanceEnum.MYSQL_5);\n    tester1.checkString(\n        \"trim(leading 'eh' from 'hehe__hehe')\", \"__hehe\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim(trailing 'eh' from 'hehe__hehe')\", \"hehe__\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim('eh' from 'hehe__hehe')\", \"__\", \"VARCHAR(10) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5586,"status":"M"}],"commitId":"8e557d26cffceaf7d7f98d8f8bafd9fbe3bc2447","commitMessage":"@@@[CALCITE-2266] Implement SQL:2016 JSON functions: JSON_EXISTS.  JSON_VALUE.  JSON_QUERY.  JSON_OBJECT.  JSON_OBJECTAGG.  JSON_ARRAY.  JSON_ARRAYAGG.  IS JSON predicate (Hongze Zhang)\n\nClose apache/calcite#785\n","date":"2018-11-10 00:39:58","modifiedFileCount":"18","status":"M","submitter":"Michael Mior"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testLowerFunc() {\n    tester.setFor(SqlStdOperatorTable.LOWER);\n\n    \r\n    tester.checkString(\"lower('A')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('a')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('1')\", \"1\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('AA')\", \"aa\", \"CHAR(2) NOT NULL\");\n    tester.checkNull(\"lower(cast(null as varchar(1)))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":5388,"groupId":"10779","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLowerFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testLowerFunc() {\n    tester.setFor(SqlStdOperatorTable.LOWER);\n\n    \r\n    tester.checkString(\"lower('A')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('a')\", \"a\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('1')\", \"1\", \"CHAR(1) NOT NULL\");\n    tester.checkString(\"lower('AA')\", \"aa\", \"CHAR(2) NOT NULL\");\n    tester.checkNull(\"lower(cast(null as varchar(1)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5379,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testTrimFunc() {\n    tester.setFor(SqlStdOperatorTable.TRIM);\n\n    \r\n    tester.checkString(\n        \"trim('a' from 'aAa')\",\n        \"A\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(both 'a' from 'aAa')\", \"A\", \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(leading 'a' from 'aAa')\",\n        \"Aa\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(trailing 'a' from 'aAa')\",\n        \"aA\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkNull(\"trim(cast(null as varchar(1)) from 'a')\");\n    tester.checkNull(\"trim('a' from cast(null as varchar(1)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    tester.checkFails(\n        \"trim('xy' from 'abcde')\",\n        \"Trim error: trim character must be exactly 1 character\",\n        true);\n    tester.checkFails(\n        \"trim('' from 'abcde')\",\n        \"Trim error: trim character must be exactly 1 character\",\n        true);\n\n    final SqlTester tester1 = tester.withConformance(SqlConformanceEnum.MYSQL_5);\n    tester1.checkString(\n        \"trim(leading 'eh' from 'hehe__hehe')\", \"__hehe\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim(trailing 'eh' from 'hehe__hehe')\", \"hehe__\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim('eh' from 'hehe__hehe')\", \"__\", \"VARCHAR(10) NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":6687,"groupId":"10779","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTrimFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testTrimFunc() {\n    tester.setFor(SqlStdOperatorTable.TRIM);\n\n    \r\n    tester.checkString(\n        \"trim('a' from 'aAa')\",\n        \"A\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(both 'a' from 'aAa')\", \"A\", \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(leading 'a' from 'aAa')\",\n        \"Aa\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkString(\n        \"trim(trailing 'a' from 'aAa')\",\n        \"aA\",\n        \"VARCHAR(3) NOT NULL\");\n    tester.checkNull(\"trim(cast(null as varchar(1)) from 'a')\");\n    tester.checkNull(\"trim('a' from cast(null as varchar(1)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    tester.checkFails(\n        \"trim('xy' from 'abcde')\",\n        \"Trim error: trim character must be exactly 1 character\",\n        true);\n    tester.checkFails(\n        \"trim('' from 'abcde')\",\n        \"Trim error: trim character must be exactly 1 character\",\n        true);\n\n    final SqlTester tester1 = tester.withConformance(SqlConformanceEnum.MYSQL_5);\n    tester1.checkString(\n        \"trim(leading 'eh' from 'hehe__hehe')\", \"__hehe\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim(trailing 'eh' from 'hehe__hehe')\", \"hehe__\", \"VARCHAR(10) NOT NULL\");\n    tester1.checkString(\n        \"trim('eh' from 'hehe__hehe')\", \"__\", \"VARCHAR(10) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6643,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
