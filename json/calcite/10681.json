[{"authorTime":"2020-01-07 01:06:39","codes":[{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testCnf2() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .add(\"z\", intType)\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode zRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 4);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n\n    checkCnf(\n        or(\n            and(eq(xRef, literal1),\n                eq(yRef, literal1),\n                eq(zRef, literal1)),\n            and(eq(xRef, literal2),\n                eq(yRef, literal2),\n                eq(aRef, literal2)),\n            and(eq(xRef, literal3),\n                eq(aRef, literal3),\n                eq(bRef, literal3))),\n        \"AND(\"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.b, 3)))\");\n  }\n","date":"2020-01-08 01:04:52","endLine":668,"groupId":"13467","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnf2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testCnf2() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .add(\"z\", intType)\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode zRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 4);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n\n    checkCnf(\n        or(\n            and(eq(xRef, literal1),\n                eq(yRef, literal1),\n                eq(zRef, literal1)),\n            and(eq(xRef, literal2),\n                eq(yRef, literal2),\n                eq(aRef, literal2)),\n            and(eq(xRef, literal3),\n                eq(aRef, literal3),\n                eq(bRef, literal3))),\n        \"AND(\"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.b, 3)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"B"},{"authorDate":"2020-01-07 01:06:39","commitOrder":1,"curCode":"  @Test public void testThresholdCnf() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n    final RexLiteral literal4 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(4));\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), and(eq(xRef, literal2), eq(yRef, literal3))),\n        8, \"AND(OR(=(?0.x, 1), =(?0.x, 2)), OR(=(?0.x, 1), =(?0.y, 3)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), eq(xRef, literal2),\n            and(eq(xRef, literal3), eq(yRef, literal4))),\n                8, \"OR(=(?0.x, 1), =(?0.x, 2), AND(=(?0.x, 3), =(?0.y, 4)))\");\n  }\n","date":"2020-01-08 01:04:52","endLine":712,"groupId":"16633","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testThresholdCnf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/a0c7274b2dc54806568765cd1d67427092fee2.src","preCode":"  @Test public void testThresholdCnf() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n    final RexLiteral literal4 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(4));\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), and(eq(xRef, literal2), eq(yRef, literal3))),\n        8, \"AND(OR(=(?0.x, 1), =(?0.x, 2)), OR(=(?0.x, 1), =(?0.y, 3)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), eq(xRef, literal2),\n            and(eq(xRef, literal3), eq(yRef, literal4))),\n                8, \"OR(=(?0.x, 1), =(?0.x, 2), AND(=(?0.x, 3), =(?0.y, 4)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":673,"status":"B"}],"commitId":"763ec429c951acd5fa251c5d4a2b7780fbf648d4","commitMessage":"@@@[CALCITE-3712] Optimize lossless casts in RexSimplify: CAST(CAST(intExpr as BIGINT) as INT) => intExpr\n","date":"2020-01-08 01:04:52","modifiedFileCount":"4","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testCnf2() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .add(\"z\", intType)\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode zRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 4);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n\n    checkCnf(\n        or(\n            and(eq(xRef, literal1),\n                eq(yRef, literal1),\n                eq(zRef, literal1)),\n            and(eq(xRef, literal2),\n                eq(yRef, literal2),\n                eq(aRef, literal2)),\n            and(eq(xRef, literal3),\n                eq(aRef, literal3),\n                eq(bRef, literal3))),\n        \"AND(\"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.b, 3)))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":668,"groupId":"13467","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnf2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testCnf2() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .add(\"z\", intType)\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode zRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 4);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n\n    checkCnf(\n        or(\n            and(eq(xRef, literal1),\n                eq(yRef, literal1),\n                eq(zRef, literal1)),\n            and(eq(xRef, literal2),\n                eq(yRef, literal2),\n                eq(aRef, literal2)),\n            and(eq(xRef, literal3),\n                eq(aRef, literal3),\n                eq(bRef, literal3))),\n        \"AND(\"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.b, 3)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testThresholdCnf() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n    final RexLiteral literal4 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(4));\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), and(eq(xRef, literal2), eq(yRef, literal3))),\n        8, \"AND(OR(=(?0.x, 1), =(?0.x, 2)), OR(=(?0.x, 1), =(?0.y, 3)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), eq(xRef, literal2),\n            and(eq(xRef, literal3), eq(yRef, literal4))),\n                8, \"OR(=(?0.x, 1), =(?0.x, 2), AND(=(?0.x, 3), =(?0.y, 4)))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":712,"groupId":"16633","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testThresholdCnf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/06/3f1aa635181978e2fc1c55ad6b750658b48cdc.src","preCode":"  @Test public void testThresholdCnf() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n    final RexLiteral literal4 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(4));\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), and(eq(xRef, literal2), eq(yRef, literal3))),\n        8, \"AND(OR(=(?0.x, 1), =(?0.x, 2)), OR(=(?0.x, 1), =(?0.y, 3)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), eq(xRef, literal2),\n            and(eq(xRef, literal3), eq(yRef, literal4))),\n                8, \"OR(=(?0.x, 1), =(?0.x, 2), AND(=(?0.x, 3), =(?0.y, 4)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":673,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-08-11 09:40:15","codes":[{"authorDate":"2020-08-11 09:40:15","commitOrder":3,"curCode":"  @Test void testCnf2() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .add(\"z\", intType)\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode zRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 4);\n\n    checkCnf(\n        or(\n            and(eq(xRef, literal(1)),\n                eq(yRef, literal(1)),\n                eq(zRef, literal(1))),\n            and(eq(xRef, literal(2)),\n                eq(yRef, literal(2)),\n                eq(aRef, literal(2))),\n            and(eq(xRef, literal(3)),\n                eq(aRef, literal(3)),\n                eq(bRef, literal(3)))),\n        \"AND(\"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.b, 3)))\");\n  }\n","date":"2020-08-21 04:50:33","endLine":656,"groupId":"10681","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCnf2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testCnf2() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .add(\"z\", intType)\n        .add(\"a\", intType)\n        .add(\"b\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n    final RexNode zRef = rexBuilder.makeFieldAccess(range, 2);\n    final RexNode aRef = rexBuilder.makeFieldAccess(range, 3);\n    final RexNode bRef = rexBuilder.makeFieldAccess(range, 4);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n\n    checkCnf(\n        or(\n            and(eq(xRef, literal1),\n                eq(yRef, literal1),\n                eq(zRef, literal1)),\n            and(eq(xRef, literal2),\n                eq(yRef, literal2),\n                eq(aRef, literal2)),\n            and(eq(xRef, literal3),\n                eq(aRef, literal3),\n                eq(bRef, literal3))),\n        \"AND(\"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.x, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.y, 1), =(?0.a, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.x, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.y, 2), =(?0.b, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.x, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.a, 3)), \"\n            + \"OR(=(?0.z, 1), =(?0.a, 2), =(?0.b, 3)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"M"},{"authorDate":"2020-08-11 09:40:15","commitOrder":3,"curCode":"  @Test void testThresholdCnf() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal(1)),\n            and(eq(xRef, literal(2)), eq(yRef, literal(3)))),\n        8, \"AND(OR(=(?0.x, 1), =(?0.x, 2)), OR(=(?0.x, 1), =(?0.y, 3)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal(1)), eq(xRef, literal(2)),\n            and(eq(xRef, literal(3)), eq(yRef, literal(4)))),\n                8, \"OR(=(?0.x, 1), =(?0.x, 2), AND(=(?0.x, 3), =(?0.y, 4)))\");\n  }\n","date":"2020-08-21 04:50:33","endLine":692,"groupId":"10681","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testThresholdCnf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/82007de9eb7b2a96e2e80ce45bab2a34a63707.src","preCode":"  @Test void testThresholdCnf() {\n    final RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n    final RelDataType rowType = typeFactory.builder()\n        .add(\"x\", intType)\n        .add(\"y\", intType)\n        .build();\n\n    final RexDynamicParam range = rexBuilder.makeDynamicParam(rowType, 0);\n    final RexNode xRef = rexBuilder.makeFieldAccess(range, 0);\n    final RexNode yRef = rexBuilder.makeFieldAccess(range, 1);\n\n    final RexLiteral literal1 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(1));\n    final RexLiteral literal2 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(2));\n    final RexLiteral literal3 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(3));\n    final RexLiteral literal4 =\n        rexBuilder.makeExactLiteral(BigDecimal.valueOf(4));\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), and(eq(xRef, literal2), eq(yRef, literal3))),\n        8, \"AND(OR(=(?0.x, 1), =(?0.x, 2)), OR(=(?0.x, 1), =(?0.y, 3)))\");\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    checkThresholdCnf(\n        or(eq(xRef, literal1), eq(xRef, literal2),\n            and(eq(xRef, literal3), eq(yRef, literal4))),\n                8, \"OR(=(?0.x, 1), =(?0.x, 2), AND(=(?0.x, 3), =(?0.y, 4)))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexProgramTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":661,"status":"M"}],"commitId":"dc7bcc550caa5232b51200640c208769fb22787c","commitMessage":"@@@Refactor\n\nIn RexProgramTest.  construct literals when needed.  rather than caching in variables.\n\nThe word 'comparison' is mis-spelled in a few places.\n\nDeprecate RelReferentialConstraint.getNumColumns().\n\nChange TableFunctionScanFactory argument from RexNode to RexCall.\n","date":"2020-08-21 04:50:33","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
