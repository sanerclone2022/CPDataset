[{"authorTime":"2017-11-10 00:36:06","codes":[{"authorDate":"2017-11-10 00:36:06","commitOrder":1,"curCode":"  @Test public void testProjectableFilterableNonCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=\"\n        + \"EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[1]]\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", \"beatles2\", table))\n        .query(\"select \\\"j\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"j=John\",\n            \"j=Paul\");\n    assertThat(buf.toString(), is(\"returnCount=4, projects=[1, 0]\"));\n  }\n","date":"2017-11-16 03:48:57","endLine":169,"groupId":"11238","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectableFilterableNonCooperative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/65f1ff83b6dc104f9856276038c19f62e5f167.src","preCode":"  @Test public void testProjectableFilterableNonCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=\"\n        + \"EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[1]]\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", \"beatles2\", table))\n        .query(\"select \\\"j\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"j=John\",\n            \"j=Paul\");\n    assertThat(buf.toString(), is(\"returnCount=4, projects=[1, 0]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ScannableTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"},{"authorDate":"2017-11-10 00:36:06","commitOrder":1,"curCode":"  @Test public void testPFTableRefusesFilterCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[2]])\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", \"beatles2\", table))\n        .query(\"select \\\"k\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"k=1940\",\n            \"k=1942\");\n    assertThat(buf.toString(),\n        is(\"returnCount=4, projects=[2, 0]\"));\n  }\n","date":"2017-11-16 03:48:57","endLine":226,"groupId":"5580","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPFTableRefusesFilterCooperative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/65f1ff83b6dc104f9856276038c19f62e5f167.src","preCode":"  @Test public void testPFTableRefusesFilterCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[2]])\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", \"beatles2\", table))\n        .query(\"select \\\"k\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"k=1940\",\n            \"k=1942\");\n    assertThat(buf.toString(),\n        is(\"returnCount=4, projects=[2, 0]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ScannableTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"B"}],"commitId":"a8505d2bd4b1560eb303e738d8137cf1840fa596","commitMessage":"@@@[CALCITE-2044] Tweak cost of BindableTableScan to make sure Project is pushed through Aggregate (Luis Fernando Kauer)\n\nModernize ScannableTableTest.\n\nClose apache/calcite#565\n","date":"2017-11-16 03:48:57","modifiedFileCount":"2","status":"B","submitter":"Luis Fernando Kauer"},{"authorTime":"2019-11-08 06:27:06","codes":[{"authorDate":"2019-11-08 06:27:06","commitOrder":2,"curCode":"  @Test public void testProjectableFilterableNonCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=\"\n        + \"EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[1]]\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", Pair.of(\"beatles2\", table)))\n        .query(\"select \\\"j\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"j=John\",\n            \"j=Paul\");\n    assertThat(buf.toString(), is(\"returnCount=4, projects=[1, 0]\"));\n  }\n","date":"2019-11-08 10:31:53","endLine":170,"groupId":"11238","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectableFilterableNonCooperative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fa/fa7a4cd070fd0ba3959fd20e08bbac7eddbf0c.src","preCode":"  @Test public void testProjectableFilterableNonCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=\"\n        + \"EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[1]]\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", \"beatles2\", table))\n        .query(\"select \\\"j\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"j=John\",\n            \"j=Paul\");\n    assertThat(buf.toString(), is(\"returnCount=4, projects=[1, 0]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ScannableTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2019-11-08 06:27:06","commitOrder":2,"curCode":"  @Test public void testPFTableRefusesFilterCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[2]])\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", Pair.of(\"beatles2\", table)))\n        .query(\"select \\\"k\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"k=1940\",\n            \"k=1942\");\n    assertThat(buf.toString(),\n        is(\"returnCount=4, projects=[2, 0]\"));\n  }\n","date":"2019-11-08 10:31:53","endLine":227,"groupId":"5580","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPFTableRefusesFilterCooperative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fa/fa7a4cd070fd0ba3959fd20e08bbac7eddbf0c.src","preCode":"  @Test public void testPFTableRefusesFilterCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[2]])\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", \"beatles2\", table))\n        .query(\"select \\\"k\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"k=1940\",\n            \"k=1942\");\n    assertThat(buf.toString(),\n        is(\"returnCount=4, projects=[2, 0]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ScannableTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"2ab44bff3a086acae7b38dcff264060544860147","commitMessage":"@@@[CALCITE-3479] Stack overflow error thrown when running join queryi (Xiening Dai)\n\nWith fix of CALCITE-2166.  we recalculate the RelNode cost within a subset when\nits best cost is increased.  in order to find the new best RelNode. But this\ncould lead to cyclic reference between best RelNodes and then fail to generate\na plan.\n\nIn this change.  we remove the recalcuation part to mitigate this problem.\n\nClose #1567\n","date":"2019-11-08 10:31:53","modifiedFileCount":"2","status":"M","submitter":"Xiening Dai"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testProjectableFilterableNonCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=\"\n        + \"EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[1]]\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", Pair.of(\"beatles2\", table)))\n        .query(\"select \\\"j\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"j=John\",\n            \"j=Paul\");\n    assertThat(buf.toString(), is(\"returnCount=4, projects=[1, 0]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":169,"groupId":"101096","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectableFilterableNonCooperative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/02/b17388416f226449223645dbd175560b7ea39a.src","preCode":"  @Test public void testProjectableFilterableNonCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=\"\n        + \"EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[1]]\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", Pair.of(\"beatles2\", table)))\n        .query(\"select \\\"j\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"j=John\",\n            \"j=Paul\");\n    assertThat(buf.toString(), is(\"returnCount=4, projects=[1, 0]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ScannableTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testPFTableRefusesFilterCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[2]])\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", Pair.of(\"beatles2\", table)))\n        .query(\"select \\\"k\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"k=1940\",\n            \"k=1942\");\n    assertThat(buf.toString(),\n        is(\"returnCount=4, projects=[2, 0]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":226,"groupId":"101096","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPFTableRefusesFilterCooperative","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/02/b17388416f226449223645dbd175560b7ea39a.src","preCode":"  @Test public void testPFTableRefusesFilterCooperative() throws Exception {\n    final StringBuilder buf = new StringBuilder();\n    final Table table = new BeatlesProjectableFilterableTable(buf, false);\n    final String explain = \"PLAN=EnumerableInterpreter\\n\"\n        + \"  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[2]])\";\n    CalciteAssert.that()\n        .with(newSchema(\"s\", Pair.of(\"beatles2\", table)))\n        .query(\"select \\\"k\\\" from \\\"s\\\".\\\"beatles2\\\" where \\\"i\\\" = 4\")\n        .explainContains(explain)\n        .returnsUnordered(\"k=1940\",\n            \"k=1942\");\n    assertThat(buf.toString(),\n        is(\"returnCount=4, projects=[2, 0]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ScannableTableTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
