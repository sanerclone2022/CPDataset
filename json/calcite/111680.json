[{"authorTime":"2018-09-20 01:57:55","codes":[{"authorDate":"2018-09-20 01:57:55","commitOrder":1,"curCode":"  public static String substring(String c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw new IllegalArgumentException(\"substring error: negative substring length not allowed\");\n    }\n    if (s > lc || e < 1) {\n      return \"\";\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","date":"2018-09-20 11:11:30","endLine":126,"groupId":"10962","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"substring","params":"(Stringc@ints@intl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/c38751f1a997b8dc9a70d74e8c7cc74321c6d2.src","preCode":"  public static String substring(String c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw new IllegalArgumentException(\"substring error: negative substring length not allowed\");\n    }\n    if (s > lc || e < 1) {\n      return \"\";\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2018-09-20 01:57:55","commitOrder":1,"curCode":"  public static ByteString substring(ByteString c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw new IllegalArgumentException(\"substring error: negative substring length not allowed\");\n    }\n    if (s > lc || e < 1) {\n      return ByteString.EMPTY;\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","date":"2018-09-20 11:11:30","endLine":149,"groupId":"3918","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"substring","params":"(ByteStringc@ints@intl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/c38751f1a997b8dc9a70d74e8c7cc74321c6d2.src","preCode":"  public static ByteString substring(ByteString c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw new IllegalArgumentException(\"substring error: negative substring length not allowed\");\n    }\n    if (s > lc || e < 1) {\n      return ByteString.EMPTY;\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"4f1b5eff9dbed20ecd8b327ada7c6db1bfd8d78d","commitMessage":"@@@[CALCITE-2572] SQL standard semantics for SUBSTRING function (Andrew Pilloud)\n\nClose apache/calcite#842\n","date":"2018-09-20 11:11:30","modifiedFileCount":"2","status":"B","submitter":"Andrew Pilloud"},{"authorTime":"2018-11-10 00:39:20","codes":[{"authorDate":"2018-11-10 00:39:20","commitOrder":2,"curCode":"  public static String substring(String c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw RESOURCE.illegalNegativeSubstringLength().ex();\n    }\n    if (s > lc || e < 1) {\n      return \"\";\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","date":"2018-11-10 00:39:58","endLine":155,"groupId":"15498","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"substring","params":"(Stringc@ints@intl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ad/da9d8b48e5fd2fd05cd589a15c93e3983bd939.src","preCode":"  public static String substring(String c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw new IllegalArgumentException(\"substring error: negative substring length not allowed\");\n    }\n    if (s > lc || e < 1) {\n      return \"\";\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2018-11-10 00:39:20","commitOrder":2,"curCode":"  public static ByteString substring(ByteString c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw RESOURCE.illegalNegativeSubstringLength().ex();\n    }\n    if (s > lc || e < 1) {\n      return ByteString.EMPTY;\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","date":"2018-11-10 00:39:58","endLine":178,"groupId":"4218","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"substring","params":"(ByteStringc@ints@intl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ad/da9d8b48e5fd2fd05cd589a15c93e3983bd939.src","preCode":"  public static ByteString substring(ByteString c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw new IllegalArgumentException(\"substring error: negative substring length not allowed\");\n    }\n    if (s > lc || e < 1) {\n      return ByteString.EMPTY;\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"8e557d26cffceaf7d7f98d8f8bafd9fbe3bc2447","commitMessage":"@@@[CALCITE-2266] Implement SQL:2016 JSON functions: JSON_EXISTS.  JSON_VALUE.  JSON_QUERY.  JSON_OBJECT.  JSON_OBJECTAGG.  JSON_ARRAY.  JSON_ARRAYAGG.  IS JSON predicate (Hongze Zhang)\n\nClose apache/calcite#785\n","date":"2018-11-10 00:39:58","modifiedFileCount":"18","status":"M","submitter":"Michael Mior"},{"authorTime":"2020-12-09 05:01:39","codes":[{"authorDate":"2020-12-09 05:01:39","commitOrder":3,"curCode":"  public static String substring(String c, int s, int l) {\n    int lc = c.length();\n    int e = s + l;\n    if (l < 0) {\n      throw RESOURCE.illegalNegativeSubstringLength().ex();\n    }\n    if (s > lc || e < 1) {\n      return \"\";\n    }\n    final int s0 = Math.max(s - 1, 0);\n    final int e0 = Math.min(e - 1, lc);\n    return c.substring(s0, e0);\n  }\n","date":"2020-12-10 07:05:35","endLine":285,"groupId":"111680","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"substring","params":"(Stringc@ints@intl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/16/32e1eb57864e7af0e89154f54b95ea5f4b50c8.src","preCode":"  public static String substring(String c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw RESOURCE.illegalNegativeSubstringLength().ex();\n    }\n    if (s > lc || e < 1) {\n      return \"\";\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2020-12-09 05:01:39","commitOrder":3,"curCode":"  public static ByteString substring(ByteString c, int s, int l) {\n    int lc = c.length();\n    int e = s + l;\n    if (l < 0) {\n      throw RESOURCE.illegalNegativeSubstringLength().ex();\n    }\n    if (s > lc || e < 1) {\n      return ByteString.EMPTY;\n    }\n    final int s0 = Math.max(s - 1, 0);\n    final int e0 = Math.min(e - 1, lc);\n    return c.substring(s0, e0);\n  }\n","date":"2020-12-10 07:05:35","endLine":312,"groupId":"111680","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"substring","params":"(ByteStringc@ints@intl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/16/32e1eb57864e7af0e89154f54b95ea5f4b50c8.src","preCode":"  public static ByteString substring(ByteString c, int s, int l) {\n    int lc = c.length();\n    if (s < 0) {\n      s += lc + 1;\n    }\n    int e = s + l;\n    if (e < s) {\n      throw RESOURCE.illegalNegativeSubstringLength().ex();\n    }\n    if (s > lc || e < 1) {\n      return ByteString.EMPTY;\n    }\n    int s1 = Math.max(s, 1);\n    int e1 = Math.min(e, lc + 1);\n    return c.substring(s1 - 1, e1 - 1);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"0ab1fe3118cc5adb8750a5c785e24fa4381afda1","commitMessage":"@@@[CALCITE-4427] Make SUBSTRING operator comply with ISO standard SQL\n\nIf you want the old behavior (which was consistent with\nBigQuery but not with ISO standard SQL).  set\nconformance=BIG_QUERY in your connection properties.\n\nIn SqlConformance.  add method semantics() that controls the\nsemantics of standard functions. The default is STANDARD. In\nBIG_QUERY semantics.  the SUBSTRING function treats negative\nstart values differently.\n\nAdd implementations of SUBSTR for BigQuery.  MySQL.  PostgreSQL\n(we already have Oracle). Each have slightly different\nbehavior.  consistent with their DBs of origin. PostgreSQL's\nSUBSTR is consistent with ISO standard SQL's SUBSTRING.\n\nUnlike SUBSTRING.  the behavior of your SUBSTR function\ndepends on which operator table you got it from. For example. \nif you specify fun=bigquery in your connection properties. \nyour SUBSTR function will be consistent with BigQuery.\n\nAdd function OCTET_LENGTH.  the BINARY equivalent of CHAR_LENGTH.\n","date":"2020-12-10 07:05:35","modifiedFileCount":"18","status":"M","submitter":"Julian Hyde"}]
