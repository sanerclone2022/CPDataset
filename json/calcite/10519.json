[{"authorTime":"2017-07-22 10:54:05","codes":[{"authorDate":"2017-07-22 10:54:05","commitOrder":1,"curCode":"  @Test public void testPsDistinct() {\n    sql(\"select distinct `user` from ps\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","date":"2017-07-28 07:03:52","endLine":142,"groupId":"10308","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPsDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/1adbb7f671fef833ab8d3131c44f7a15e5d3c9.src","preCode":"  @Test public void testPsDistinct() {\n    sql(\"select distinct `user` from ps\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"},{"authorDate":"2017-07-22 10:54:05","commitOrder":1,"curCode":"  @Test public void testGitCommits() {\n    sql(\"select count(*) from git_commits\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","date":"2017-07-28 07:03:52","endLine":159,"groupId":"10308","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGitCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/1adbb7f671fef833ab8d3131c44f7a15e5d3c9.src","preCode":"  @Test public void testGitCommits() {\n    sql(\"select count(*) from git_commits\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"}],"commitId":"d23e529515ce0eb6e0c150052fe3d2c5d90f1747","commitMessage":"@@@[CALCITE-1896] OS adapter and sqlsh\n\nContains tables du.  files.  git_commits.  ps.  stdin;\noption '-o FORMAT' (FORMAT can be mysql.  spaced.  headers.  json.  csv);\noption '--help'.\n\nTested on Ubuntu and macOS (the 'ps' and 'files' commands are\nimplemented fairly differently).\n\nAdded Hook.STANDARD_STREAMS to allow stdin.  stdout.  stderr to be\noverridden for the duration of a statement.  and for thread-safe\ntesting.\n","date":"2017-07-28 07:03:52","modifiedFileCount":"6","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-07-22 10:54:05","codes":[{"authorDate":"2017-08-10 07:27:49","commitOrder":2,"curCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    sql(\"select distinct `user` from ps\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","date":"2017-09-08 02:23:18","endLine":155,"groupId":"10308","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPsDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/cd78e759a9d6a3093b1f37486ee7626746d65a.src","preCode":"  @Test public void testPsDistinct() {\n    sql(\"select distinct `user` from ps\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2017-07-22 10:54:05","commitOrder":2,"curCode":"  @Test public void testGitCommits() {\n    sql(\"select count(*) from git_commits\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","date":"2017-07-28 07:03:52","endLine":159,"groupId":"10308","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGitCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/1adbb7f671fef833ab8d3131c44f7a15e5d3c9.src","preCode":"  @Test public void testGitCommits() {\n    sql(\"select count(*) from git_commits\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"}],"commitId":"310eaa0016a21155fa3d504ba6028c81c49d0d60","commitMessage":"@@@Various tweaks\n\nThey are:\n* Plug some resource leaks\n* Add tests for SELECT DISTINCT ... GROUP BY (they already work)\n* Fix OsAdapterTest on Windows; the 'files'.  'vmstat' and 'ps' tables do not work on Windows\n* In checkstyle.  LICENSE and NOTICE don't need header\n\nA pull request we forgot to close in CALCITE-1959:\n\nClose apache/calcite#529\n","date":"2017-09-08 02:23:18","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-12-02 10:03:30","codes":[{"authorDate":"2017-08-10 07:27:49","commitOrder":3,"curCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    sql(\"select distinct `user` from ps\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","date":"2017-09-08 02:23:18","endLine":155,"groupId":"10308","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPsDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/cd78e759a9d6a3093b1f37486ee7626746d65a.src","preCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    sql(\"select distinct `user` from ps\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2017-12-02 10:03:30","commitOrder":3,"curCode":"  @Test public void testGitCommits() {\n    Assume.assumeTrue(\"no git\", hasGit());\n    sql(\"select count(*) from git_commits\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","date":"2017-12-02 10:05:17","endLine":198,"groupId":"10308","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGitCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c8/2d470a9d4c770d2e4f81a8560c2871f6b4b155.src","preCode":"  @Test public void testGitCommits() {\n    sql(\"select count(*) from git_commits\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"d11664905f8b6875196aa6ab25d6b3b314492cbf","commitMessage":"@@@[CALCITE-2070] Git test fails when run from source distro\n","date":"2017-12-02 10:05:17","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-07-06 04:21:59","codes":[{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    sql(\"select distinct `user` from ps\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","date":"2018-07-09 01:16:26","endLine":160,"groupId":"1057","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPsDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a2/d7f78b3c792bb880e52377ee7a9f816c761c09.src","preCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    sql(\"select distinct `user` from ps\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2018-07-06 04:21:59","commitOrder":4,"curCode":"  @Test public void testGitCommits() {\n    Assume.assumeTrue(\"no git\", hasGit());\n    sql(\"select count(*) from git_commits\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","date":"2018-07-09 01:16:26","endLine":174,"groupId":"1057","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGitCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a2/d7f78b3c792bb880e52377ee7a9f816c761c09.src","preCode":"  @Test public void testGitCommits() {\n    Assume.assumeTrue(\"no git\", hasGit());\n    sql(\"select count(*) from git_commits\")\n        .returns(\n            new Function<ResultSet, Void>() {\n              public Void apply(ResultSet r) {\n                try {\n                  assertThat(r.next(), is(true));\n                  assertThat(r.getString(1), notNullValue());\n                  assertThat(r.wasNull(), is(false));\n                  return null;\n                } catch (SQLException e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"d59b639d27da704f00eff616324a2c04aa06f84c","commitMessage":"@@@[CALCITE-2259] Allow Java 8 syntax\n\nIn summary: use lambdas where possible.  switch from Guava function\ntypes to Java function types or lambdas.  but continue to use Guava\ncomponents (such as immutable collections and cache) that have no\nequivalent in the Java runtime.\n\n1. Change single-abstract-method (SAM) classes to lambdas. Preserve\nformatting wherever possible.\n\n2. Change AssertQuery.returns argument type from Guava Function to Java\nConsumer. If you are using a lambda and see 'returns is deprecated'. \nremove the 'return null;' line.  and the lambda will become a Consumer\n(whose return is void).\n\n3. Change RelOptRuleOperand and RelOptRule.operand methods to take Java\nPredicate rather than Guava Predicate.\n\n4. Change the argument of Hook.add and .addThread from Guava Function to\nJava Consumer.\n\n5. Change 'list.toArray(new T[list.size()])' to 'list.toArray(new T[0])'\nbecause the latter is simpler.  and just as efficient on recent Java\nversions.\n\n6. Resource references; change \"try (Closeable ignore = foo())\" to \"try\n  (foo())\".  especially uses of TryThreadLocal and Hook.Closeable.\n\n7. Convert linq4j Function1 to java Function.  Function2 to java BiFunction\n\n8. Fix occurrences of Intellij's \"Explicit type can be replaced with\n<>\" inspection. (Occurs for \"List<String> list = new\nArrayList<String>();\".)\n\n9. Change Guava Preconditions.checkNotNull to Java\nObjects.requireNonNull. (Kevin Risden)\n\n10. Break out anonymous classes and fix dependency problems.\n\n11. Use CacheLoader.of(Function) where possible.\n\n12. Replace sub-classes of ThreadLocal with ThreadLocal.withInitial().\n\n13. Replace Guava collection methods with calls to Java collection types. \nfor example replace Lists.newArrayList() with new ArrayList<>(). \nMaps.newHashSet() with new HashSet<>().  similarly Sets.\n\n14. Replace Guava Joiner with String.join.\n\n15. Replace Collections.emptyList() with ImmutableList.of() in a few\nplaces.\n\nFor backwards compatibility.  we preserved (and deprecated) the old\nmethods that used Guava types. In a few cases where new and old have\nthe same signature (after erasure).  we could not add a method with the\nsame name.  so we gave the new method a \"J\" suffix. Examples include\nHook.property and .propertyJ.  RelOptRule.operand and .operandJ.\n\nIn test code.  we have not slavishly ensured backwards compatibility.\n\nWe do not intend to remove uses of Guava's immutable collections.\n\nWe have ignored Intellij's \"Pseudo functional style code\" inspection\nmost of the time.  but in a few cases have converted Lists.transform(). \nIterables.transform().  and Iterables.filter() into Java streams. Use\nthe Util.toImmutableList() collector if the result is to be an\nimmutable list. Use Util.transform() rather than Lists.transform()\nif you have a Java function rather than a Guava function or lambda.\n\nNot covered in this change (might be done in future):\n* Convert Collections.sort(list) to list.sort.\n* Review uses of 'for (Map.Entry<K.  V> e : map.entrySet())' and see\n  whether it makes sense to convert to 'map.forEach((k.  v) ->\n  ...)'. Intellij inspection is called 'Replace with Map.forEach'.\n\nBreaking changes:\n* LatticeStatisticProvider.Factory.  result of RexUtil.notFun().  and\n  arguments to Mappings.target() are Function (was Guava.  now Java)\n* Argument to SqlSpecialOperator.TokenSequence.parser() is Predicate\n  (was Guava.  now Java)\n* AggregateNode.AccumulatorFactory extends Supplier (was Guava.  now Java)\n","date":"2018-07-09 01:16:26","modifiedFileCount":"514","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-07-06 04:21:59","codes":[{"authorDate":"2018-11-13 00:30:19","commitOrder":5,"curCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    assumeToolExists(\"ps\");\n    sql(\"select distinct `user` from ps\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","date":"2018-11-13 23:38:22","endLine":185,"groupId":"1057","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPsDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/54/2396420bec48ebd2952f4ebba590655643aee6.src","preCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    sql(\"select distinct `user` from ps\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2018-07-06 04:21:59","commitOrder":5,"curCode":"  @Test public void testGitCommits() {\n    Assume.assumeTrue(\"no git\", hasGit());\n    sql(\"select count(*) from git_commits\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","date":"2018-07-09 01:16:26","endLine":174,"groupId":"1057","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGitCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a2/d7f78b3c792bb880e52377ee7a9f816c761c09.src","preCode":"  @Test public void testGitCommits() {\n    Assume.assumeTrue(\"no git\", hasGit());\n    sql(\"select count(*) from git_commits\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"}],"commitId":"3f89e037cdcf99f416633a1915cbfc047e50f638","commitMessage":"@@@[CALCITE-2660] OsAdapterTest should check if required commands are available\n\nClose apache/calcite#914\n\nSigned-off-by: Kevin Risden <krisden@apache.org>\n","date":"2018-11-13 23:38:22","modifiedFileCount":"1","status":"M","submitter":"Kevin Risden"},{"authorTime":"2019-02-14 04:35:36","codes":[{"authorDate":"2019-02-14 04:35:36","commitOrder":6,"curCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    assumeToolExists(\"ps\");\n    sql(\"select distinct `user` from ps\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-02-27 15:04:26","endLine":186,"groupId":"1057","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testPsDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/6ffae125da628b31ab8da1a807c5a725a9fe3b.src","preCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    assumeToolExists(\"ps\");\n    sql(\"select distinct `user` from ps\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2019-02-14 04:35:36","commitOrder":6,"curCode":"  @Test public void testGitCommits() {\n    Assume.assumeTrue(\"no git\", hasGit());\n    sql(\"select count(*) from git_commits\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-02-27 15:04:26","endLine":200,"groupId":"1057","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testGitCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/6ffae125da628b31ab8da1a807c5a725a9fe3b.src","preCode":"  @Test public void testGitCommits() {\n    Assume.assumeTrue(\"no git\", hasGit());\n    sql(\"select count(*) from git_commits\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw new RuntimeException(e);\n          }\n        });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"ebafff1ede5921901b322872693bf1dbdf09fc8d","commitMessage":"@@@[CALCITE-2878] Avoid use of new RuntimeException(e) in tests\n\nnew RuntimeException(e) adds very little info in tests.  and it makes stacktraces harder to read.\nSo it makes sense to just sneaky-throw in those cases.  especially for test purposes.\n","date":"2019-02-27 15:04:26","modifiedFileCount":"38","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-12-03 21:06:19","codes":[{"authorDate":"2019-12-03 21:06:19","commitOrder":7,"curCode":"  @Test public void testPsDistinct() {\n    assumeFalse(isWindows(), \"Skip: the 'ps' table does not work on Windows\");\n    assumeToolExists(\"ps\");\n    sql(\"select distinct `user` from ps\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw rethrow(e);\n          }\n        });\n  }\n","date":"2019-12-04 03:17:33","endLine":185,"groupId":"1057","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testPsDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/b4df43790dfa4c71bdb4d0f0f4eb2669f37e9a.src","preCode":"  @Test public void testPsDistinct() {\n    Assume.assumeFalse(\"Skip: the 'ps' table does not work on Windows\",\n        isWindows());\n    assumeToolExists(\"ps\");\n    sql(\"select distinct `user` from ps\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2019-12-03 21:06:19","commitOrder":7,"curCode":"  @Test public void testGitCommits() {\n    assumeTrue(hasGit(), \"no git\");\n    sql(\"select count(*) from git_commits\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-12-04 03:17:33","endLine":199,"groupId":"1057","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testGitCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e3/b4df43790dfa4c71bdb4d0f0f4eb2669f37e9a.src","preCode":"  @Test public void testGitCommits() {\n    Assume.assumeTrue(\"no git\", hasGit());\n    sql(\"select count(*) from git_commits\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"e89784c270cab5eafeab839bfd3d4cbea816607f","commitMessage":"@@@[CALCITE-2457] JUnit 4 -> 5: migrate Assume -> Assumptions.  drop suites.  remove junit4 from core classpath\n","date":"2019-12-04 03:17:33","modifiedFileCount":"14","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":8,"curCode":"  @Test void testPsDistinct() {\n    assumeFalse(isWindows(), \"Skip: the 'ps' table does not work on Windows\");\n    assumeToolExists(\"ps\");\n    sql(\"select distinct `user` from ps\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw rethrow(e);\n          }\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":185,"groupId":"10519","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testPsDistinct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/e7458bfcc94f3c1dcecad2075e65212acd7f2b.src","preCode":"  @Test public void testPsDistinct() {\n    assumeFalse(isWindows(), \"Skip: the 'ps' table does not work on Windows\");\n    assumeToolExists(\"ps\");\n    sql(\"select distinct `user` from ps\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw rethrow(e);\n          }\n        });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":8,"curCode":"  @Test void testGitCommits() {\n    assumeTrue(hasGit(), \"no git\");\n    sql(\"select count(*) from git_commits\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":199,"groupId":"10519","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testGitCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/e7458bfcc94f3c1dcecad2075e65212acd7f2b.src","preCode":"  @Test public void testGitCommits() {\n    assumeTrue(hasGit(), \"no git\");\n    sql(\"select count(*) from git_commits\")\n        .returns(r -> {\n          try {\n            assertThat(r.next(), is(true));\n            assertThat(r.getString(1), notNullValue());\n            assertThat(r.wasNull(), is(false));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"plus/src/test/java/org/apache/calcite/adapter/os/OsAdapterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
