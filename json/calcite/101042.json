[{"authorTime":"2020-04-21 18:54:31","codes":[{"authorDate":"2020-05-12 21:04:32","commitOrder":5,"curCode":"  private RelNode canonicalize(RelNode rel) {\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n            .addRuleInstance(FilterMergeRule.INSTANCE)\n            .addRuleInstance(FilterJoinRule.FILTER_ON_JOIN)\n            .addRuleInstance(FilterJoinRule.JOIN)\n            .addRuleInstance(FilterAggregateTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectMergeRule.INSTANCE)\n            .addRuleInstance(ProjectRemoveRule.INSTANCE)\n            .addRuleInstance(ProjectJoinTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectSetOpTransposeRule.INSTANCE)\n            .addRuleInstance(FilterToCalcRule.INSTANCE)\n            .addRuleInstance(ProjectToCalcRule.INSTANCE)\n            .addRuleInstance(FilterCalcMergeRule.INSTANCE)\n            .addRuleInstance(ProjectCalcMergeRule.INSTANCE)\n            .addRuleInstance(CalcMergeRule.INSTANCE)\n            .build();\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(rel);\n    return hepPlanner.findBestExp();\n  }\n","date":"2020-05-25 05:07:12","endLine":1482,"groupId":"6789","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"canonicalize","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/05/3fefa890f70101fc117c2428c121c9c8eae1a0.src","preCode":"  private RelNode canonicalize(RelNode rel) {\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n            .addRuleInstance(FilterMergeRule.INSTANCE)\n            .addRuleInstance(FilterJoinRule.FILTER_ON_JOIN)\n            .addRuleInstance(FilterJoinRule.JOIN)\n            .addRuleInstance(FilterAggregateTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectMergeRule.INSTANCE)\n            .addRuleInstance(ProjectRemoveRule.INSTANCE)\n            .addRuleInstance(ProjectJoinTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectSetOpTransposeRule.INSTANCE)\n            .addRuleInstance(FilterToCalcRule.INSTANCE)\n            .addRuleInstance(ProjectToCalcRule.INSTANCE)\n            .addRuleInstance(FilterCalcMergeRule.INSTANCE)\n            .addRuleInstance(ProjectCalcMergeRule.INSTANCE)\n            .addRuleInstance(CalcMergeRule.INSTANCE)\n            .build();\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(rel);\n    return hepPlanner.findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializedViewSubstitutionVisitorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1461,"status":"B"},{"authorDate":"2020-04-21 18:54:31","commitOrder":5,"curCode":"  private static List<RelNode> substitute(\n      RelNode root, RelOptMaterialization materialization) {\n    \r\n    \r\n    if (materialization.starTable != null) {\n      RelNode newRoot = RelOptMaterialization.tryUseStar(root,\n          materialization.starRelOptTable);\n      if (newRoot != null) {\n        root = newRoot;\n      }\n    }\n\n    \r\n    RelNode target = materialization.queryRel;\n    \r\n    root = trimUnusedfields(root);\n    target = trimUnusedfields(target);\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n            .addRuleInstance(FilterMergeRule.INSTANCE)\n            .addRuleInstance(FilterJoinRule.FILTER_ON_JOIN)\n            .addRuleInstance(FilterJoinRule.JOIN)\n            .addRuleInstance(FilterAggregateTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectMergeRule.INSTANCE)\n            .addRuleInstance(ProjectRemoveRule.INSTANCE)\n            .addRuleInstance(ProjectJoinTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectSetOpTransposeRule.INSTANCE)\n            .addRuleInstance(FilterToCalcRule.INSTANCE)\n            .addRuleInstance(ProjectToCalcRule.INSTANCE)\n            .addRuleInstance(FilterCalcMergeRule.INSTANCE)\n            .addRuleInstance(ProjectCalcMergeRule.INSTANCE)\n            .addRuleInstance(CalcMergeRule.INSTANCE)\n            .build();\n\n    \r\n    \r\n    \r\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(target);\n    target = hepPlanner.findBestExp();\n\n    hepPlanner.setRoot(root);\n    root = hepPlanner.findBestExp();\n\n    return new SubstitutionVisitor(target, root).go(materialization.tableRel);\n  }\n","date":"2020-05-01 20:00:28","endLine":230,"groupId":"6789","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"substitute","params":"(RelNoderoot@RelOptMaterializationmaterialization)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d0/6ec2be0fb2c0389e3ea6377bb44d074db7fee6.src","preCode":"  private static List<RelNode> substitute(\n      RelNode root, RelOptMaterialization materialization) {\n    \r\n    \r\n    if (materialization.starTable != null) {\n      RelNode newRoot = RelOptMaterialization.tryUseStar(root,\n          materialization.starRelOptTable);\n      if (newRoot != null) {\n        root = newRoot;\n      }\n    }\n\n    \r\n    RelNode target = materialization.queryRel;\n    \r\n    root = trimUnusedfields(root);\n    target = trimUnusedfields(target);\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n            .addRuleInstance(FilterMergeRule.INSTANCE)\n            .addRuleInstance(FilterJoinRule.FILTER_ON_JOIN)\n            .addRuleInstance(FilterJoinRule.JOIN)\n            .addRuleInstance(FilterAggregateTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectMergeRule.INSTANCE)\n            .addRuleInstance(ProjectRemoveRule.INSTANCE)\n            .addRuleInstance(ProjectJoinTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectSetOpTransposeRule.INSTANCE)\n            .addRuleInstance(FilterToCalcRule.INSTANCE)\n            .addRuleInstance(ProjectToCalcRule.INSTANCE)\n            .addRuleInstance(FilterCalcMergeRule.INSTANCE)\n            .addRuleInstance(ProjectCalcMergeRule.INSTANCE)\n            .addRuleInstance(CalcMergeRule.INSTANCE)\n            .build();\n\n    \r\n    \r\n    \r\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(target);\n    target = hepPlanner.findBestExp();\n\n    hepPlanner.setRoot(root);\n    root = hepPlanner.findBestExp();\n\n    return new SubstitutionVisitor(target, root).go(materialization.tableRel);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"NB"}],"commitId":"4fbb930491283f2e68b91f69597958c2d33b2b18","commitMessage":"@@@[CALCITE-3478] Restructure tests for materialized views (Jin Xing)\n\nMotivation\n\nCurrently there are two strategies for materialized view matching:\nStrategy-1. Substitution based (SubstitutionVisitor.java) [1]\nStrategy-2. Plan structural information based (AbstractMaterializedViewRule.java) [2]\nThe two strategies are controlled by a single connection config of\n\"materializationsEnabled\". Calcite will apply strategy-1 firstly and then\nstrategy-2.\n\nThe two strategies are tested in a single integration test called\nMaterializationTest.java.  As a result we cannot run tests separately for a\nsingle strategy.  which leads to:\n\n1. When some new matching patterns are supported by strategy-1.  we might need to\nupdate the old result plan.  which was previously matched and generated by\nstragegy-2.  e.g. [3].  and corresponding testing pattern for stragegy-2 will be\nlost.\n2. Some test failures are even hidden.  e.g.\nMaterializationTest#testJoinMaterialization2 should but failed to be supported\nby stragegy-2. However strategy-1 lets the test passed.\n3. Hard to test internals for SubstutionVisitor.java.  e.g. [4] has to struggle\nand create a unit test Of course we can add more system config or connection\nconfig just for testing and circle around some of the dilemmas I mentioned\nabove. But it will make the code messy. Materialized view matching strategies\nare so important and worth a through unit test and to be kept clean.\n\nAdditionally.  this PR targets to clean the code of MaterializationTest.java. As\nmore and more fixes get applied.  this Java file tends to be messy:\n\n1. Helping methods and testing methods are mixed without good order.\n2. Lots of methods called checkMaterialize. We need to sort it out if there's\nneed to add more params.  e.g. [5]\n3. Some tests are not concise enough.  e.g. testJoinMaterialization9\n\nApproach\n\n1. Create unit test MaterializedViewSubstitutionVisitorTest to test strategy-1\n2. Create unit test MaterializedViewRelOptRulesTest to test strategy-2\n3. Move tests from MaterializationTest to unit tests correspondingly.  and keep\nMaterializationTest for integration tests.\n\n[1] https://calcite.apache.org/docs/materialized_views.html#substitution-via-rules-transformation\n[2] https://calcite.apache.org/docs/materialized_views.html#rewriting-using-plan-structural-information\n[3] https://github.com/apache/calcite/pull/1451/files#diff-d7e9e44fcb5fb1b98198415a3f78f167R1831\n[4] https://github.com/apache/calcite/pull/1555\n[5] https://github.com/apache/calcite/pull/1504\n\nClose #1560\n","date":"2020-05-25 05:07:12","modifiedFileCount":"1","status":"M","submitter":"jinxing64"},{"authorTime":"2020-07-09 04:45:12","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":6,"curCode":"  private RelNode canonicalize(RelNode rel) {\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(rel);\n    return hepPlanner.findBestExp();\n  }\n","date":"2020-07-12 06:58:28","endLine":1484,"groupId":"2282","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"canonicalize","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/b4dd8c1f73dac03133669b49bbce5a716e1060.src","preCode":"  private RelNode canonicalize(RelNode rel) {\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n            .addRuleInstance(FilterMergeRule.INSTANCE)\n            .addRuleInstance(FilterJoinRule.FILTER_ON_JOIN)\n            .addRuleInstance(FilterJoinRule.JOIN)\n            .addRuleInstance(FilterAggregateTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectMergeRule.INSTANCE)\n            .addRuleInstance(ProjectRemoveRule.INSTANCE)\n            .addRuleInstance(ProjectJoinTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectSetOpTransposeRule.INSTANCE)\n            .addRuleInstance(FilterToCalcRule.INSTANCE)\n            .addRuleInstance(ProjectToCalcRule.INSTANCE)\n            .addRuleInstance(FilterCalcMergeRule.INSTANCE)\n            .addRuleInstance(ProjectCalcMergeRule.INSTANCE)\n            .addRuleInstance(CalcMergeRule.INSTANCE)\n            .build();\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(rel);\n    return hepPlanner.findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializedViewSubstitutionVisitorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1463,"status":"M"},{"authorDate":"2020-07-09 04:45:12","commitOrder":6,"curCode":"  private static List<RelNode> substitute(\n      RelNode root, RelOptMaterialization materialization) {\n    \r\n    \r\n    if (materialization.starTable != null) {\n      RelNode newRoot = RelOptMaterialization.tryUseStar(root,\n          materialization.starRelOptTable);\n      if (newRoot != null) {\n        root = newRoot;\n      }\n    }\n\n    \r\n    RelNode target = materialization.queryRel;\n    \r\n    root = trimUnusedfields(root);\n    target = trimUnusedfields(target);\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n\n    \r\n    \r\n    \r\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(target);\n    target = hepPlanner.findBestExp();\n\n    hepPlanner.setRoot(root);\n    root = hepPlanner.findBestExp();\n\n    return new SubstitutionVisitor(target, root).go(materialization.tableRel);\n  }\n","date":"2020-07-12 06:58:28","endLine":218,"groupId":"2282","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"substitute","params":"(RelNoderoot@RelOptMaterializationmaterialization)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dc/953d3bbeca5ab16aeb9fd3d2711003e70016d8.src","preCode":"  private static List<RelNode> substitute(\n      RelNode root, RelOptMaterialization materialization) {\n    \r\n    \r\n    if (materialization.starTable != null) {\n      RelNode newRoot = RelOptMaterialization.tryUseStar(root,\n          materialization.starRelOptTable);\n      if (newRoot != null) {\n        root = newRoot;\n      }\n    }\n\n    \r\n    RelNode target = materialization.queryRel;\n    \r\n    root = trimUnusedfields(root);\n    target = trimUnusedfields(target);\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(FilterProjectTransposeRule.INSTANCE)\n            .addRuleInstance(FilterMergeRule.INSTANCE)\n            .addRuleInstance(FilterJoinRule.FILTER_ON_JOIN)\n            .addRuleInstance(FilterJoinRule.JOIN)\n            .addRuleInstance(FilterAggregateTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectMergeRule.INSTANCE)\n            .addRuleInstance(ProjectRemoveRule.INSTANCE)\n            .addRuleInstance(ProjectJoinTransposeRule.INSTANCE)\n            .addRuleInstance(ProjectSetOpTransposeRule.INSTANCE)\n            .addRuleInstance(FilterToCalcRule.INSTANCE)\n            .addRuleInstance(ProjectToCalcRule.INSTANCE)\n            .addRuleInstance(FilterCalcMergeRule.INSTANCE)\n            .addRuleInstance(ProjectCalcMergeRule.INSTANCE)\n            .addRuleInstance(CalcMergeRule.INSTANCE)\n            .build();\n\n    \r\n    \r\n    \r\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(target);\n    target = hepPlanner.findBestExp();\n\n    hepPlanner.setRoot(root);\n    root = hepPlanner.findBestExp();\n\n    return new SubstitutionVisitor(target, root).go(materialization.tableRel);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"23b26b6287315cc2cd236e705bb651077488fc5c","commitMessage":"@@@In preparation for [CALCITE-3923] and [CALCITE-4079].  deprecate fields and methods that will be removed between 1.24 and 1.25\n\nAlso.  in RelNode.  change some methods from 'to removed before 2.0'\nto 'to be removed before 1.25'. The methods are sDistinct(). \nisKey(ImmutableBitSet).  getQuery().  getRows().  getVariablesStopped(). \ncomputeSelfCost().  isValid(boolean).  getCollationList().  getChildExps().\n","date":"2020-07-12 06:58:28","modifiedFileCount":"137","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":7,"curCode":"  private RelNode canonicalize(RelNode rel) {\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(rel);\n    return hepPlanner.findBestExp();\n  }\n","date":"2020-07-12 06:58:28","endLine":1484,"groupId":"2282","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"canonicalize","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/b4dd8c1f73dac03133669b49bbce5a716e1060.src","preCode":"  private RelNode canonicalize(RelNode rel) {\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(rel);\n    return hepPlanner.findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializedViewSubstitutionVisitorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1463,"status":"N"},{"authorDate":"2020-05-29 00:04:40","commitOrder":7,"curCode":"  private static List<RelNode> substitute(\n      RelNode root, RelOptMaterialization materialization) {\n    \r\n    \r\n    if (materialization.starRelOptTable != null) {\n      RelNode newRoot = RelOptMaterialization.tryUseStar(root,\n          materialization.starRelOptTable);\n      if (newRoot != null) {\n        root = newRoot;\n      }\n    }\n\n    \r\n    RelNode target = materialization.queryRel;\n    \r\n    root = trimUnusedfields(root);\n    target = trimUnusedfields(target);\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n\n    \r\n    \r\n    \r\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(target);\n    target = hepPlanner.findBestExp();\n\n    hepPlanner.setRoot(root);\n    root = hepPlanner.findBestExp();\n\n    return new SubstitutionVisitor(target, root).go(materialization.tableRel);\n  }\n","date":"2020-11-30 06:45:33","endLine":218,"groupId":"2282","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"substitute","params":"(RelNoderoot@RelOptMaterializationmaterialization)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ab/e2fbda2da8d7bd30a4ce188d18f1db749e297a.src","preCode":"  private static List<RelNode> substitute(\n      RelNode root, RelOptMaterialization materialization) {\n    \r\n    \r\n    if (materialization.starTable != null) {\n      RelNode newRoot = RelOptMaterialization.tryUseStar(root,\n          materialization.starRelOptTable);\n      if (newRoot != null) {\n        root = newRoot;\n      }\n    }\n\n    \r\n    RelNode target = materialization.queryRel;\n    \r\n    root = trimUnusedfields(root);\n    target = trimUnusedfields(target);\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n\n    \r\n    \r\n    \r\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(target);\n    target = hepPlanner.findBestExp();\n\n    hepPlanner.setRoot(root);\n    root = hepPlanner.findBestExp();\n\n    return new SubstitutionVisitor(target, root).go(materialization.tableRel);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-08-03 23:04:55","codes":[{"authorDate":"2020-07-09 04:45:12","commitOrder":8,"curCode":"  private RelNode canonicalize(RelNode rel) {\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(rel);\n    return hepPlanner.findBestExp();\n  }\n","date":"2020-07-12 06:58:28","endLine":1484,"groupId":"101042","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"canonicalize","params":"(RelNoderel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/b4dd8c1f73dac03133669b49bbce5a716e1060.src","preCode":"  private RelNode canonicalize(RelNode rel) {\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(rel);\n    return hepPlanner.findBestExp();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/MaterializedViewSubstitutionVisitorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1463,"status":"N"},{"authorDate":"2020-08-03 23:04:55","commitOrder":8,"curCode":"  private static List<RelNode> substitute(\n      RelNode root, RelOptMaterialization materialization,\n      List<SubstitutionVisitor.UnifyRule> materializationRules) {\n    \r\n    \r\n    if (materialization.starRelOptTable != null) {\n      RelNode newRoot = RelOptMaterialization.tryUseStar(root,\n          materialization.starRelOptTable);\n      if (newRoot != null) {\n        root = newRoot;\n      }\n    }\n\n    \r\n    RelNode target = materialization.queryRel;\n    \r\n    root = trimUnusedfields(root);\n    target = trimUnusedfields(target);\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n\n    \r\n    \r\n    \r\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(target);\n    target = hepPlanner.findBestExp();\n\n    hepPlanner.setRoot(root);\n    root = hepPlanner.findBestExp();\n\n    return new SubstitutionVisitor(target, root, ImmutableList.\n        <SubstitutionVisitor.UnifyRule>builder()\n        .addAll(materializationRules)\n        .build()).go(materialization.tableRel);\n  }\n","date":"2021-09-24 23:59:53","endLine":239,"groupId":"101042","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"substitute","params":"(RelNoderoot@RelOptMaterializationmaterialization@List<SubstitutionVisitor.UnifyRule>materializationRules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/1f5603078bc2caa5d754f1a065e0703e7e2190.src","preCode":"  private static List<RelNode> substitute(\n      RelNode root, RelOptMaterialization materialization) {\n    \r\n    \r\n    if (materialization.starRelOptTable != null) {\n      RelNode newRoot = RelOptMaterialization.tryUseStar(root,\n          materialization.starRelOptTable);\n      if (newRoot != null) {\n        root = newRoot;\n      }\n    }\n\n    \r\n    RelNode target = materialization.queryRel;\n    \r\n    root = trimUnusedfields(root);\n    target = trimUnusedfields(target);\n    HepProgram program =\n        new HepProgramBuilder()\n            .addRuleInstance(CoreRules.FILTER_PROJECT_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_MERGE)\n            .addRuleInstance(CoreRules.FILTER_INTO_JOIN)\n            .addRuleInstance(CoreRules.JOIN_CONDITION_PUSH)\n            .addRuleInstance(CoreRules.FILTER_AGGREGATE_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_REMOVE)\n            .addRuleInstance(CoreRules.PROJECT_JOIN_TRANSPOSE)\n            .addRuleInstance(CoreRules.PROJECT_SET_OP_TRANSPOSE)\n            .addRuleInstance(CoreRules.FILTER_TO_CALC)\n            .addRuleInstance(CoreRules.PROJECT_TO_CALC)\n            .addRuleInstance(CoreRules.FILTER_CALC_MERGE)\n            .addRuleInstance(CoreRules.PROJECT_CALC_MERGE)\n            .addRuleInstance(CoreRules.CALC_MERGE)\n            .build();\n\n    \r\n    \r\n    \r\n    final HepPlanner hepPlanner = new HepPlanner(program);\n    hepPlanner.setRoot(target);\n    target = hepPlanner.findBestExp();\n\n    hepPlanner.setRoot(root);\n    root = hepPlanner.findBestExp();\n\n    return new SubstitutionVisitor(target, root).go(materialization.tableRel);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"56d5ddab9e54e15473df3b3dc41205103be11e6e","commitMessage":"@@@[CALCITE-3409] Add a method in RelOptMaterializations to allow registering UnifyRule (xzh)\n\nClose apache/calcite#2094\n","date":"2021-09-24 23:59:53","modifiedFileCount":"2","status":"M","submitter":"xzh"}]
