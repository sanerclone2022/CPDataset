[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testDifferentTypesSameFields() throws Exception {\n    Class.forName(\"net.hydromatic.optiq.jdbc.Driver\");\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    OptiqConnection optiqConnection =\n        connection.unwrap(OptiqConnection.class);\n    final SchemaPlus rootSchema = optiqConnection.getRootSchema();\n    rootSchema.add(\"TEST\", new ReflectiveSchema(new MySchema()));\n    Statement statement = optiqConnection.createStatement();\n    ResultSet resultSet =\n        statement.executeQuery(\"SELECT \\\"myvalue\\\" from TEST.\\\"mytable2\\\"\");\n    assertEquals(\"myvalue=2\\n\", OptiqAssert.toString(resultSet));\n    resultSet.close();\n    statement.close();\n    connection.close();\n  }\n","date":"2014-11-14 09:39:34","endLine":5337,"groupId":"6766","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDifferentTypesSameFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/07/a80a852c13070ba5bd528e6632fbe305eb1033.src","preCode":"  @Test public void testDifferentTypesSameFields() throws Exception {\n    Class.forName(\"net.hydromatic.optiq.jdbc.Driver\");\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    OptiqConnection optiqConnection =\n        connection.unwrap(OptiqConnection.class);\n    final SchemaPlus rootSchema = optiqConnection.getRootSchema();\n    rootSchema.add(\"TEST\", new ReflectiveSchema(new MySchema()));\n    Statement statement = optiqConnection.createStatement();\n    ResultSet resultSet =\n        statement.executeQuery(\"SELECT \\\"myvalue\\\" from TEST.\\\"mytable2\\\"\");\n    assertEquals(\"myvalue=2\\n\", OptiqAssert.toString(resultSet));\n    resultSet.close();\n    statement.close();\n    connection.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5323,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public void setUp() throws SQLException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    OptiqConnection optiqConnection = connection.unwrap(OptiqConnection.class);\n    SchemaPlus rootSchema = optiqConnection.getRootSchema();\n    rootSchema.add(\"test\", new ReflectiveSchema(new TestSchema()));\n    optiqConnection.setSchema(\"test\");\n    this.conn = optiqConnection;\n  }\n","date":"2014-11-14 09:39:34","endLine":80,"groupId":"6766","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ec/2f757121cc7c0e94c33bd5b4e4fe4b2a43e9e2.src","preCode":"  public void setUp() throws SQLException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    OptiqConnection optiqConnection = connection.unwrap(OptiqConnection.class);\n    SchemaPlus rootSchema = optiqConnection.getRootSchema();\n    rootSchema.add(\"test\", new ReflectiveSchema(new TestSchema()));\n    optiqConnection.setSchema(\"test\");\n    this.conn = optiqConnection;\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ExceptionMessageTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Test public void testDifferentTypesSameFields() throws Exception {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    rootSchema.add(\"TEST\", new ReflectiveSchema(new MySchema()));\n    Statement statement = calciteConnection.createStatement();\n    ResultSet resultSet =\n        statement.executeQuery(\"SELECT \\\"myvalue\\\" from TEST.\\\"mytable2\\\"\");\n    assertEquals(\"myvalue=2\\n\", CalciteAssert.toString(resultSet));\n    resultSet.close();\n    statement.close();\n    connection.close();\n  }\n","date":"2014-11-14 10:22:06","endLine":5178,"groupId":"6766","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDifferentTypesSameFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/29/1dff15ca3e8c94607d5cca33d7c97daddb9b8c.src","preCode":"  @Test public void testDifferentTypesSameFields() throws Exception {\n    Class.forName(\"net.hydromatic.optiq.jdbc.Driver\");\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    OptiqConnection optiqConnection =\n        connection.unwrap(OptiqConnection.class);\n    final SchemaPlus rootSchema = optiqConnection.getRootSchema();\n    rootSchema.add(\"TEST\", new ReflectiveSchema(new MySchema()));\n    Statement statement = optiqConnection.createStatement();\n    ResultSet resultSet =\n        statement.executeQuery(\"SELECT \\\"myvalue\\\" from TEST.\\\"mytable2\\\"\");\n    assertEquals(\"myvalue=2\\n\", OptiqAssert.toString(resultSet));\n    resultSet.close();\n    statement.close();\n    connection.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5165,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  public void setUp() throws SQLException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    rootSchema.add(\"test\", new ReflectiveSchema(new TestSchema()));\n    calciteConnection.setSchema(\"test\");\n    this.conn = calciteConnection;\n  }\n","date":"2014-11-14 10:22:06","endLine":83,"groupId":"6766","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/42963a8c9b7cd00c551ec55a50c1f981c994a7.src","preCode":"  public void setUp() throws SQLException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    OptiqConnection optiqConnection = connection.unwrap(OptiqConnection.class);\n    SchemaPlus rootSchema = optiqConnection.getRootSchema();\n    rootSchema.add(\"test\", new ReflectiveSchema(new TestSchema()));\n    optiqConnection.setSchema(\"test\");\n    this.conn = optiqConnection;\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ExceptionMessageTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testDifferentTypesSameFields() throws Exception {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    rootSchema.add(\"TEST\", new ReflectiveSchema(new MySchema()));\n    Statement statement = calciteConnection.createStatement();\n    ResultSet resultSet =\n        statement.executeQuery(\"SELECT \\\"myvalue\\\" from TEST.\\\"mytable2\\\"\");\n    assertEquals(\"myvalue=2\\n\", CalciteAssert.toString(resultSet));\n    resultSet.close();\n    statement.close();\n    connection.close();\n  }\n","date":"2020-04-06 04:57:49","endLine":5881,"groupId":"101301","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDifferentTypesSameFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/0b7f58f4442fcb05f8815355eeabe565385b9a.src","preCode":"  @Test public void testDifferentTypesSameFields() throws Exception {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    final SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    rootSchema.add(\"TEST\", new ReflectiveSchema(new MySchema()));\n    Statement statement = calciteConnection.createStatement();\n    ResultSet resultSet =\n        statement.executeQuery(\"SELECT \\\"myvalue\\\" from TEST.\\\"mytable2\\\"\");\n    assertEquals(\"myvalue=2\\n\", CalciteAssert.toString(resultSet));\n    resultSet.close();\n    statement.close();\n    connection.close();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/JdbcTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5868,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":3,"curCode":"  public void setUp() throws SQLException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    rootSchema.add(\"test\", new ReflectiveSchema(new TestSchema()));\n    calciteConnection.setSchema(\"test\");\n    this.conn = calciteConnection;\n  }\n","date":"2014-11-14 10:22:06","endLine":83,"groupId":"101301","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/42963a8c9b7cd00c551ec55a50c1f981c994a7.src","preCode":"  public void setUp() throws SQLException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    rootSchema.add(\"test\", new ReflectiveSchema(new TestSchema()));\n    calciteConnection.setSchema(\"test\");\n    this.conn = calciteConnection;\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/ExceptionMessageTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
