[{"authorTime":"2018-04-27 07:29:15","codes":[{"authorDate":"2018-04-27 07:29:15","commitOrder":2,"curCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final String druidExpression = DruidExpressions.toDruidExpression(\n        arg,\n        rowType,\n        query);\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return  DruidQuery.format(\"ceil(%s)\", druidExpression);\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final Granularity.Type type = DruidDateTimeUtils.toDruidGranularity(timeUnit);\n      if (type == null) {\n        \r\n        return null;\n      }\n      String isoPeriodFormat = DruidDateTimeUtils.toISOPeriodFormat(type);\n      if (isoPeriodFormat == null) {\n        return null;\n      }\n      final TimeZone tz;\n      if (arg.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n        tz = TimeZone.getTimeZone(query.getConnectionConfig().timeZone());\n      } else {\n        tz = DateTimeUtils.UTC_ZONE;\n      }\n      return DruidExpressions.applyTimestampCeil(\n          druidExpression, isoPeriodFormat, \"\", tz);\n    } else {\n      return null;\n    }\n  }\n","date":"2018-06-23 02:49:06","endLine":79,"groupId":"8837","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toDruidExpression","params":"(RexNoderexNode@RelDataTyperowType@DruidQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/30/c01e544be40094f98c2993ca7180293109c12b.src","preCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final String druidExpression = DruidExpressions.toDruidExpression(\n        arg,\n        rowType,\n        query);\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return  DruidQuery.format(\"ceil(%s)\", druidExpression);\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final Granularity.Type type = DruidDateTimeUtils.toDruidGranularity(timeUnit);\n      if (type == null) {\n        \r\n        return null;\n      }\n      String isoPeriodFormat = DruidDateTimeUtils.toISOPeriodFormat(type);\n      if (isoPeriodFormat == null) {\n        return null;\n      }\n      final TimeZone tz;\n      if (arg.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n        tz = TimeZone.getTimeZone(query.getConnectionConfig().timeZone());\n      } else {\n        tz = DateTimeUtils.UTC_ZONE;\n      }\n      return DruidExpressions.applyTimestampCeil(\n          druidExpression, isoPeriodFormat, \"\", tz);\n    } else {\n      return null;\n    }\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/CeilOperatorConversion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"MB"},{"authorDate":"2018-04-27 07:29:15","commitOrder":2,"curCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final String druidExpression = DruidExpressions.toDruidExpression(\n        arg,\n        rowType,\n        druidQuery);\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return  DruidQuery.format(\"floor(%s)\", druidExpression);\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final TimeZone tz;\n      if (arg.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n        tz = TimeZone.getTimeZone(druidQuery.getConnectionConfig().timeZone());\n      } else {\n        tz = DateTimeUtils.UTC_ZONE;\n      }\n      final Granularity granularity = DruidDateTimeUtils\n          .extractGranularity(call, tz.getID());\n      if (granularity == null) {\n        return null;\n      }\n      String isoPeriodFormat = DruidDateTimeUtils.toISOPeriodFormat(granularity.getType());\n      if (isoPeriodFormat == null) {\n        return null;\n      }\n      return DruidExpressions.applyTimestampFloor(\n          druidExpression,\n          isoPeriodFormat,\n          \"\",\n          tz);\n    } else {\n      return null;\n    }\n  }\n","date":"2018-06-23 02:49:06","endLine":79,"groupId":"8201","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toDruidExpression","params":"(RexNoderexNode@RelDataTyperowType@DruidQuerydruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/7fa66126a3479a22ec51a34888e59fcc99914d.src","preCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final String druidExpression = DruidExpressions.toDruidExpression(\n        arg,\n        rowType,\n        druidQuery);\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return  DruidQuery.format(\"floor(%s)\", druidExpression);\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final TimeZone tz;\n      if (arg.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n        tz = TimeZone.getTimeZone(druidQuery.getConnectionConfig().timeZone());\n      } else {\n        tz = DateTimeUtils.UTC_ZONE;\n      }\n      final Granularity granularity = DruidDateTimeUtils\n          .extractGranularity(call, tz.getID());\n      if (granularity == null) {\n        return null;\n      }\n      String isoPeriodFormat = DruidDateTimeUtils.toISOPeriodFormat(granularity.getType());\n      if (isoPeriodFormat == null) {\n        return null;\n      }\n      return DruidExpressions.applyTimestampFloor(\n          druidExpression,\n          isoPeriodFormat,\n          \"\",\n          tz);\n    } else {\n      return null;\n    }\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/FloorOperatorConversion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"MB"}],"commitId":"b29397d92e16f8aa77d5e84cf7a21744cd1b19a9","commitMessage":"@@@[CALCITE-2286] Support timestamp type for Druid adapter\n\nClose apache/calcite#681\n","date":"2018-06-23 02:49:06","modifiedFileCount":"13","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public @Nullable String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final String druidExpression = DruidExpressions.toDruidExpression(\n        arg,\n        rowType,\n        query);\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return  DruidQuery.format(\"ceil(%s)\", druidExpression);\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final Granularity.Type type = DruidDateTimeUtils.toDruidGranularity(timeUnit);\n      if (type == null) {\n        \r\n        return null;\n      }\n      String isoPeriodFormat = DruidDateTimeUtils.toISOPeriodFormat(type);\n      if (isoPeriodFormat == null) {\n        return null;\n      }\n      final TimeZone tz;\n      if (arg.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n        tz = TimeZone.getTimeZone(query.getConnectionConfig().timeZone());\n      } else {\n        tz = DateTimeUtils.UTC_ZONE;\n      }\n      return DruidExpressions.applyTimestampCeil(\n          druidExpression, isoPeriodFormat, \"\", tz);\n    } else {\n      return null;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":79,"groupId":"10472","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"toDruidExpression","params":"(RexNoderexNode@RelDataTyperowType@DruidQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b7/14bad14e53fd4e7e43d69e00142bec3a5151e9.src","preCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery query) {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final String druidExpression = DruidExpressions.toDruidExpression(\n        arg,\n        rowType,\n        query);\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return  DruidQuery.format(\"ceil(%s)\", druidExpression);\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final Granularity.Type type = DruidDateTimeUtils.toDruidGranularity(timeUnit);\n      if (type == null) {\n        \r\n        return null;\n      }\n      String isoPeriodFormat = DruidDateTimeUtils.toISOPeriodFormat(type);\n      if (isoPeriodFormat == null) {\n        return null;\n      }\n      final TimeZone tz;\n      if (arg.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n        tz = TimeZone.getTimeZone(query.getConnectionConfig().timeZone());\n      } else {\n        tz = DateTimeUtils.UTC_ZONE;\n      }\n      return DruidExpressions.applyTimestampCeil(\n          druidExpression, isoPeriodFormat, \"\", tz);\n    } else {\n      return null;\n    }\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/CeilOperatorConversion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public @Nullable String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final String druidExpression = DruidExpressions.toDruidExpression(\n        arg,\n        rowType,\n        druidQuery);\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return  DruidQuery.format(\"floor(%s)\", druidExpression);\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final TimeZone tz;\n      if (arg.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n        tz = TimeZone.getTimeZone(druidQuery.getConnectionConfig().timeZone());\n      } else {\n        tz = DateTimeUtils.UTC_ZONE;\n      }\n      final Granularity granularity = DruidDateTimeUtils\n          .extractGranularity(call, tz.getID());\n      if (granularity == null) {\n        return null;\n      }\n      String isoPeriodFormat = DruidDateTimeUtils.toISOPeriodFormat(granularity.getType());\n      if (isoPeriodFormat == null) {\n        return null;\n      }\n      return DruidExpressions.applyTimestampFloor(\n          druidExpression,\n          isoPeriodFormat,\n          \"\",\n          tz);\n    } else {\n      return null;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":78,"groupId":"10472","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"toDruidExpression","params":"(RexNoderexNode@RelDataTyperowType@DruidQuerydruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/2298f7765aae343ffee5e3b67ea878d5a9f8ff.src","preCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final String druidExpression = DruidExpressions.toDruidExpression(\n        arg,\n        rowType,\n        druidQuery);\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return  DruidQuery.format(\"floor(%s)\", druidExpression);\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final TimeZone tz;\n      if (arg.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {\n        tz = TimeZone.getTimeZone(druidQuery.getConnectionConfig().timeZone());\n      } else {\n        tz = DateTimeUtils.UTC_ZONE;\n      }\n      final Granularity granularity = DruidDateTimeUtils\n          .extractGranularity(call, tz.getID());\n      if (granularity == null) {\n        return null;\n      }\n      String isoPeriodFormat = DruidDateTimeUtils.toISOPeriodFormat(granularity.getType());\n      if (isoPeriodFormat == null) {\n        return null;\n      }\n      return DruidExpressions.applyTimestampFloor(\n          druidExpression,\n          isoPeriodFormat,\n          \"\",\n          tz);\n    } else {\n      return null;\n    }\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/FloorOperatorConversion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
