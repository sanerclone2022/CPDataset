[{"authorTime":"2018-08-07 16:03:49","codes":[{"authorDate":"2018-08-07 16:03:49","commitOrder":1,"curCode":"  public RexNode getBoolExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(6);\n    switch (v) {\n    case 0:\n      return getSimpleBool(r);\n    case 1:\n      return fuzzOperator(r, ANY_TO_BOOL, getExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, BOOL_TO_BOOL, getBoolExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getBoolExpression(r, depth - 1),\n          getBoolExpression(r, depth - 1));\n    case 4:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 5:\n      return fuzzOperator(r, BOOL_TO_BOOL_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getBoolExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","date":"2018-09-18 16:05:18","endLine":177,"groupId":"8829","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getBoolExpression","params":"(Randomr@intdepth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/78/51db2d4217a504ee6f6df6717f40817cb14f22.src","preCode":"  public RexNode getBoolExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(6);\n    switch (v) {\n    case 0:\n      return getSimpleBool(r);\n    case 1:\n      return fuzzOperator(r, ANY_TO_BOOL, getExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, BOOL_TO_BOOL, getBoolExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getBoolExpression(r, depth - 1),\n          getBoolExpression(r, depth - 1));\n    case 4:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 5:\n      return fuzzOperator(r, BOOL_TO_BOOL_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getBoolExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/fuzzer/RexFuzzer.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"},{"authorDate":"2018-08-07 16:03:49","commitOrder":1,"curCode":"  public RexNode getIntExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(4);\n    switch (v) {\n    case 0:\n      return getSimpleInt(r);\n    case 1:\n      return fuzzOperator(r, UNARY_NUMERIC, getIntExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, NUMERIC_TO_NUMERIC, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, ANY_SAME_TYPE_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getIntExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","date":"2018-09-18 16:05:18","endLine":212,"groupId":"8831","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getIntExpression","params":"(Randomr@intdepth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/78/51db2d4217a504ee6f6df6717f40817cb14f22.src","preCode":"  public RexNode getIntExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(4);\n    switch (v) {\n    case 0:\n      return getSimpleInt(r);\n    case 1:\n      return fuzzOperator(r, UNARY_NUMERIC, getIntExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, NUMERIC_TO_NUMERIC, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, ANY_SAME_TYPE_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getIntExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/fuzzer/RexFuzzer.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"B"}],"commitId":"865a71e700b7e0d50e62a6e575a0750bbacbc02f","commitMessage":"@@@[CALCITE-2504] Add randomized test for better code coverage of rex node create and simplification\n","date":"2018-09-18 16:05:18","modifiedFileCount":"1","status":"B","submitter":"Vladimir Sitnikov"},{"authorTime":"2018-09-22 05:32:10","codes":[{"authorDate":"2018-09-22 05:32:10","commitOrder":2,"curCode":"  public RexNode getBoolExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(7);\n    switch (v) {\n    case 0:\n      return getSimpleBool(r);\n    case 1:\n      return fuzzOperator(r, ANY_TO_BOOL, getExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, BOOL_TO_BOOL, getBoolExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getBoolExpression(r, depth - 1),\n          getBoolExpression(r, depth - 1));\n    case 4:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 5:\n      return fuzzOperator(r, BOOL_TO_BOOL_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getBoolExpression(x, depth - 1));\n    case 6:\n      return fuzzCase(r, depth - 1,\n          x -> getBoolExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","date":"2018-09-22 22:06:06","endLine":176,"groupId":"8829","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getBoolExpression","params":"(Randomr@intdepth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d1/80f02410b00b4eb74e52d08d0718319cf4665f.src","preCode":"  public RexNode getBoolExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(6);\n    switch (v) {\n    case 0:\n      return getSimpleBool(r);\n    case 1:\n      return fuzzOperator(r, ANY_TO_BOOL, getExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, BOOL_TO_BOOL, getBoolExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getBoolExpression(r, depth - 1),\n          getBoolExpression(r, depth - 1));\n    case 4:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 5:\n      return fuzzOperator(r, BOOL_TO_BOOL_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getBoolExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/fuzzer/RexFuzzer.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2018-09-22 05:32:10","commitOrder":2,"curCode":"  public RexNode getIntExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(5);\n    switch (v) {\n    case 0:\n      return getSimpleInt(r);\n    case 1:\n      return fuzzOperator(r, UNARY_NUMERIC, getIntExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, NUMERIC_TO_NUMERIC, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, ANY_SAME_TYPE_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getIntExpression(x, depth - 1));\n    case 4:\n      return fuzzCase(r, depth - 1,\n          x -> getIntExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","date":"2018-09-22 22:06:06","endLine":214,"groupId":"8831","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getIntExpression","params":"(Randomr@intdepth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d1/80f02410b00b4eb74e52d08d0718319cf4665f.src","preCode":"  public RexNode getIntExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(4);\n    switch (v) {\n    case 0:\n      return getSimpleInt(r);\n    case 1:\n      return fuzzOperator(r, UNARY_NUMERIC, getIntExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, NUMERIC_TO_NUMERIC, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, ANY_SAME_TYPE_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getIntExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/fuzzer/RexFuzzer.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"b98a8e7af6504dc813a4c31c601a7003c9716775","commitMessage":"@@@Implement fuzzy generator for CASE expressions\n","date":"2018-09-22 22:06:06","modifiedFileCount":"4","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2018-09-22 05:32:10","codes":[{"authorDate":"2020-12-20 15:08:19","commitOrder":3,"curCode":"  public RexNode getBoolExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(8);\n    switch (v) {\n    case 0:\n      return getSimpleBool(r);\n    case 1:\n      return fuzzOperator(r, ANY_TO_BOOL, getExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, BOOL_TO_BOOL, getBoolExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getBoolExpression(r, depth - 1),\n          getBoolExpression(r, depth - 1));\n    case 4:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 5:\n      return fuzzOperator(r, BOOL_TO_BOOL_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getBoolExpression(x, depth - 1));\n    case 6:\n      return fuzzCase(r, depth - 1,\n          x -> getBoolExpression(x, depth - 1));\n    case 7:\n      return fuzzSearch(r, getIntExpression(r, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","date":"2021-03-03 03:08:00","endLine":186,"groupId":"101375","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getBoolExpression","params":"(Randomr@intdepth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9b/8d1fc80ac4c62b00014223a6ba2b2cfb40e71f.src","preCode":"  public RexNode getBoolExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(7);\n    switch (v) {\n    case 0:\n      return getSimpleBool(r);\n    case 1:\n      return fuzzOperator(r, ANY_TO_BOOL, getExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, BOOL_TO_BOOL, getBoolExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getBoolExpression(r, depth - 1),\n          getBoolExpression(r, depth - 1));\n    case 4:\n      return fuzzOperator(r, COMPARABLE_TO_BOOL, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 5:\n      return fuzzOperator(r, BOOL_TO_BOOL_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getBoolExpression(x, depth - 1));\n    case 6:\n      return fuzzCase(r, depth - 1,\n          x -> getBoolExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/fuzzer/RexFuzzer.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2018-09-22 05:32:10","commitOrder":3,"curCode":"  public RexNode getIntExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(5);\n    switch (v) {\n    case 0:\n      return getSimpleInt(r);\n    case 1:\n      return fuzzOperator(r, UNARY_NUMERIC, getIntExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, NUMERIC_TO_NUMERIC, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, ANY_SAME_TYPE_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getIntExpression(x, depth - 1));\n    case 4:\n      return fuzzCase(r, depth - 1,\n          x -> getIntExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","date":"2018-09-22 22:06:06","endLine":214,"groupId":"101375","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getIntExpression","params":"(Randomr@intdepth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d1/80f02410b00b4eb74e52d08d0718319cf4665f.src","preCode":"  public RexNode getIntExpression(Random r, int depth) {\n    int v = depth <= 0 ? 0 : r.nextInt(5);\n    switch (v) {\n    case 0:\n      return getSimpleInt(r);\n    case 1:\n      return fuzzOperator(r, UNARY_NUMERIC, getIntExpression(r, depth - 1));\n    case 2:\n      return fuzzOperator(r, NUMERIC_TO_NUMERIC, getIntExpression(r, depth - 1),\n          getIntExpression(r, depth - 1));\n    case 3:\n      return fuzzOperator(r, ANY_SAME_TYPE_MULTI_ARG, r.nextInt(3) + 2,\n          x -> getIntExpression(x, depth - 1));\n    case 4:\n      return fuzzCase(r, depth - 1,\n          x -> getIntExpression(x, depth - 1));\n    }\n    throw new AssertionError(\"should not reach here\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/fuzzer/RexFuzzer.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"0c64a5857dc3f4319c083c64eb6d12027f9034a4","commitMessage":"@@@Fuzz testing for SEARCH operator.  and refactor RexSimplify\n\nAdd another test for [CALCITE-4449].\n","date":"2021-03-03 03:08:00","modifiedFileCount":"6","status":"M","submitter":"Julian Hyde"}]
