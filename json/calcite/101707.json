[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  private QueryableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      final Object table = method.invoke(o, arguments.toArray());\n      return (QueryableTable) table;\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()\n      ).ex(e);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      throw new RuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":135,"groupId":"9381","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(List<Object>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f2/5d9d299ace9140531a92e52c4658e6963f1f67.src","preCode":"  private QueryableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      final Object table = method.invoke(o, arguments.toArray());\n      return (QueryableTable) table;\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()\n      ).ex(e);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      throw new RuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public TranslatableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      return (TranslatableTable) method.invoke(o, arguments.toArray());\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      throw new RuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":91,"groupId":"10709","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(List<Object>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/47/282323abd982eb26b5e8fa0a61116446d43d35.src","preCode":"  public TranslatableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      return (TranslatableTable) method.invoke(o, arguments.toArray());\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      throw new RuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2015-10-11 23:44:26","commitOrder":2,"curCode":"  private Table apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      final Object table = method.invoke(o, arguments.toArray());\n      return (Table) table;\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()\n      ).ex(e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2015-10-14 01:17:59","endLine":161,"groupId":"9381","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(List<Object>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1e/f3dfd6f612ce1bf142e3a947aa5fc95e33a674.src","preCode":"  private QueryableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      final Object table = method.invoke(o, arguments.toArray());\n      return (QueryableTable) table;\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()\n      ).ex(e);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      throw new RuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public TranslatableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      return (TranslatableTable) method.invoke(o, arguments.toArray());\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      throw new RuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":91,"groupId":"10709","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(List<Object>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/47/282323abd982eb26b5e8fa0a61116446d43d35.src","preCode":"  public TranslatableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      return (TranslatableTable) method.invoke(o, arguments.toArray());\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      throw new RuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"5eb395c9ff5f60a409332b1a32536629d2d3f92e","commitMessage":"@@@[CALCITE-916] Support table function that implements ScannableTable\n\nAdd a new model.  example/function.  to contain examples of user-defined functions.\n\nAdd example table function \"MAZE\" that generates a maze.\n\nWhen defining table functions in a model file.  allow them to have a method name\nother than \"eval\".\n","date":"2015-10-14 01:17:59","modifiedFileCount":"6","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-01-25 03:49:40","codes":[{"authorDate":"2017-01-25 03:49:40","commitOrder":3,"curCode":"  private Table apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      \r\n      final Object table = method.invoke(o, arguments.toArray());\n      return (Table) table;\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()).ex(e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | InstantiationException | NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2017-01-26 03:21:36","endLine":163,"groupId":"4315","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(List<Object>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/e55ab82b4ab4251433cf1e5633fa326e8fccec.src","preCode":"  private Table apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      final Object table = method.invoke(o, arguments.toArray());\n      return (Table) table;\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()\n      ).ex(e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2017-01-25 03:49:40","commitOrder":3,"curCode":"  public TranslatableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      \r\n      return (TranslatableTable) method.invoke(o, arguments.toArray());\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | NoSuchMethodException | InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2017-01-26 03:21:36","endLine":93,"groupId":"6042","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(List<Object>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/01/7a457d5bccac8c483b2cc7c1dcc377ad5390fe.src","preCode":"  public TranslatableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        o = method.getDeclaringClass().newInstance();\n      }\n      \r\n      return (TranslatableTable) method.invoke(o, arguments.toArray());\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      throw new RuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"5181563f9f26d1533a7d98ecca8443077e7b7efa","commitMessage":"@@@[CALCITE-1602] Remove uses of deprecated APIs\n","date":"2017-01-26 03:21:36","modifiedFileCount":"69","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2017-01-25 03:49:40","commitOrder":4,"curCode":"  private Table apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      \r\n      final Object table = method.invoke(o, arguments.toArray());\n      return (Table) table;\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()).ex(e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | InstantiationException | NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2017-01-26 03:21:36","endLine":163,"groupId":"4315","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(List<Object>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7e/e55ab82b4ab4251433cf1e5633fa326e8fccec.src","preCode":"  private Table apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      \r\n      final Object table = method.invoke(o, arguments.toArray());\n      return (Table) table;\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()).ex(e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | InstantiationException | NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"},{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override public TranslatableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      \r\n      return (TranslatableTable) method.invoke(o, arguments.toArray());\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | NoSuchMethodException | InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-10-07 05:42:47","endLine":93,"groupId":"6042","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(List<Object>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/4eee0ab1239a1a6906acc9cde25368bc51b108.src","preCode":"  public TranslatableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      \r\n      return (TranslatableTable) method.invoke(o, arguments.toArray());\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | NoSuchMethodException | InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  private Table apply(List<? extends @Nullable Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      return (Table) requireNonNull(\n          method.invoke(o, arguments.toArray()),\n          () -> \"got null from \" + method + \" with arguments \" + arguments);\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()).ex(e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | InstantiationException | NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":167,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(List<?extends@NullableObject>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/36/d4edf17f3469a287498152f3a28b6260a0f65f.src","preCode":"  private Table apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      \r\n      final Object table = method.invoke(o, arguments.toArray());\n      return (Table) table;\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()).ex(e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | InstantiationException | NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override public TranslatableTable apply(List<? extends @Nullable Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      return (TranslatableTable) requireNonNull(\n          method.invoke(o, arguments.toArray()),\n          () -> \"got null from \" + method + \" with arguments \" + arguments);\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | NoSuchMethodException | InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":98,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"apply","params":"(List<?extends@NullableObject>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/67897a582b26f177f547f6d16227b929df6562.src","preCode":"  @Override public TranslatableTable apply(List<Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      \r\n      return (TranslatableTable) method.invoke(o, arguments.toArray());\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | NoSuchMethodException | InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2021-01-25 16:10:08","commitOrder":6,"curCode":"  private Table apply(List<? extends @Nullable Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      final Object table = method.invoke(o, arguments.toArray());\n      return (Table) requireNonNull(table,\n          () -> \"got null from \" + method + \" with arguments \" + arguments);\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()).ex(e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | InstantiationException | NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2021-03-13 15:05:43","endLine":167,"groupId":"101707","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"apply","params":"(List<?extends@NullableObject>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fa/4d699e9dcbc11e8117de097fa329198a2c848a.src","preCode":"  private Table apply(List<? extends @Nullable Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      return (Table) requireNonNull(\n          method.invoke(o, arguments.toArray()),\n          () -> \"got null from \" + method + \" with arguments \" + arguments);\n    } catch (IllegalArgumentException e) {\n      throw RESOURCE.illegalArgumentForTableFunctionCall(\n          method.toString(),\n          Arrays.toString(method.getParameterTypes()),\n          arguments.toString()).ex(e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | InstantiationException | NoSuchMethodException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  @Override public TranslatableTable apply(List<? extends @Nullable Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      return (TranslatableTable) requireNonNull(\n          method.invoke(o, arguments.toArray()),\n          () -> \"got null from \" + method + \" with arguments \" + arguments);\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | NoSuchMethodException | InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":98,"groupId":"101707","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"apply","params":"(List<?extends@NullableObject>arguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/67897a582b26f177f547f6d16227b929df6562.src","preCode":"  @Override public TranslatableTable apply(List<? extends @Nullable Object> arguments) {\n    try {\n      Object o = null;\n      if (!Modifier.isStatic(method.getModifiers())) {\n        final Constructor<?> constructor =\n            method.getDeclaringClass().getConstructor();\n        o = constructor.newInstance();\n      }\n      return (TranslatableTable) requireNonNull(\n          method.invoke(o, arguments.toArray()),\n          () -> \"got null from \" + method + \" with arguments \" + arguments);\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(\"Expected \"\n          + Arrays.toString(method.getParameterTypes()) + \" actual \"\n          + arguments,\n          e);\n    } catch (IllegalAccessException | InvocationTargetException\n        | NoSuchMethodException | InstantiationException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"}],"commitId":"084d608c6adbbb82bcbdc2778439dfbeb6d6afdd","commitMessage":"@@@[CALCITE-4477] In Interpreter.  support table-valued functions\n\nFix RexCallBinding.  so that we can access constant arguments\nto table function scans when created via RelBuilder.\n\nAdd Fibonacci table function.  as a test.\n","date":"2021-03-13 15:05:43","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
