[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n    if (ruleSet.contains(rule)) {\n      \r\n      return false;\n    }\n    final boolean added = ruleSet.add(rule);\n    assert added;\n\n    mapRuleDescription(rule);\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":547,"groupId":"1553","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/afff5d1f2bb3191c014f82e9f8f2a62c034b71.src","preCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n    if (ruleSet.contains(rule)) {\n      \r\n      return false;\n    }\n    final boolean added = ruleSet.add(rule);\n    assert added;\n\n    mapRuleDescription(rule);\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean removeRule(RelOptRule rule) {\n    if (!ruleSet.remove(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    unmapRuleDescription(rule);\n\n    \r\n    for (Iterator<RelOptRuleOperand> iter = classOperands.values().iterator();\n         iter.hasNext();) {\n      RelOptRuleOperand entry = iter.next();\n      if (entry.getRule().equals(rule)) {\n        iter.remove();\n      }\n    }\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":578,"groupId":"2729","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"removeRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/afff5d1f2bb3191c014f82e9f8f2a62c034b71.src","preCode":"  public boolean removeRule(RelOptRule rule) {\n    if (!ruleSet.remove(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    unmapRuleDescription(rule);\n\n    \r\n    for (Iterator<RelOptRuleOperand> iter = classOperands.values().iterator();\n         iter.hasNext();) {\n      RelOptRuleOperand entry = iter.next();\n      if (entry.getRule().equals(rule)) {\n        iter.remove();\n      }\n    }\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-23 16:10:04","commitOrder":2,"curCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n    if (ruleSet.contains(rule)) {\n      \r\n      return false;\n    }\n    final boolean added = ruleSet.add(rule);\n    assert added;\n\n    final String ruleName = rule.toString();\n    if (ruleNames.put(ruleName, rule.getClass())) {\n      Set<Class> x = ruleNames.get(ruleName);\n      if (x.size() > 1) {\n        throw new RuntimeException(\"Rule description '\" + ruleName\n            + \"' is not unique; classes: \" + x);\n      }\n    }\n\n    mapRuleDescription(rule);\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","date":"2014-11-23 17:04:42","endLine":617,"groupId":"1553","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/05a60208fd8491d4205f58a37d67d79f5685f5.src","preCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n    if (ruleSet.contains(rule)) {\n      \r\n      return false;\n    }\n    final boolean added = ruleSet.add(rule);\n    assert added;\n\n    mapRuleDescription(rule);\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":571,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public boolean removeRule(RelOptRule rule) {\n    if (!ruleSet.remove(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    unmapRuleDescription(rule);\n\n    \r\n    for (Iterator<RelOptRuleOperand> iter = classOperands.values().iterator();\n         iter.hasNext();) {\n      RelOptRuleOperand entry = iter.next();\n      if (entry.getRule().equals(rule)) {\n        iter.remove();\n      }\n    }\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":578,"groupId":"2729","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"removeRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/afff5d1f2bb3191c014f82e9f8f2a62c034b71.src","preCode":"  public boolean removeRule(RelOptRule rule) {\n    if (!ruleSet.remove(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    unmapRuleDescription(rule);\n\n    \r\n    for (Iterator<RelOptRuleOperand> iter = classOperands.values().iterator();\n         iter.hasNext();) {\n      RelOptRuleOperand entry = iter.next();\n      if (entry.getRule().equals(rule)) {\n        iter.remove();\n      }\n    }\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"N"}],"commitId":"7882a5b958663f417df3f4e5cfca6f79c298537f","commitMessage":"@@@[CALCITE-474] Clean up rule naming in order to support enabling/disabling rules\n","date":"2014-11-23 17:04:42","modifiedFileCount":"7","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-09-16 20:24:07","codes":[{"authorDate":"2014-11-23 16:10:04","commitOrder":3,"curCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n    if (ruleSet.contains(rule)) {\n      \r\n      return false;\n    }\n    final boolean added = ruleSet.add(rule);\n    assert added;\n\n    final String ruleName = rule.toString();\n    if (ruleNames.put(ruleName, rule.getClass())) {\n      Set<Class> x = ruleNames.get(ruleName);\n      if (x.size() > 1) {\n        throw new RuntimeException(\"Rule description '\" + ruleName\n            + \"' is not unique; classes: \" + x);\n      }\n    }\n\n    mapRuleDescription(rule);\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","date":"2014-11-23 17:04:42","endLine":617,"groupId":"1553","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/05a60208fd8491d4205f58a37d67d79f5685f5.src","preCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n    if (ruleSet.contains(rule)) {\n      \r\n      return false;\n    }\n    final boolean added = ruleSet.add(rule);\n    assert added;\n\n    final String ruleName = rule.toString();\n    if (ruleNames.put(ruleName, rule.getClass())) {\n      Set<Class> x = ruleNames.get(ruleName);\n      if (x.size() > 1) {\n        throw new RuntimeException(\"Rule description '\" + ruleName\n            + \"' is not unique; classes: \" + x);\n      }\n    }\n\n    mapRuleDescription(rule);\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":571,"status":"N"},{"authorDate":"2018-09-16 20:24:07","commitOrder":3,"curCode":"  public boolean removeRule(RelOptRule rule) {\n    if (!ruleSet.remove(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    unmapRuleDescription(rule);\n\n    \r\n    classOperands.values().removeIf(entry -> entry.getRule().equals(rule));\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","date":"2018-09-20 16:51:04","endLine":518,"groupId":"9025","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"removeRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/83/4fe5e99f7b4dbf447f00995c8ef8113844120d.src","preCode":"  public boolean removeRule(RelOptRule rule) {\n    if (!ruleSet.remove(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    unmapRuleDescription(rule);\n\n    \r\n    for (Iterator<RelOptRuleOperand> iter = classOperands.values().iterator();\n         iter.hasNext();) {\n      RelOptRuleOperand entry = iter.next();\n      if (entry.getRule().equals(rule)) {\n        iter.remove();\n      }\n    }\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"M"}],"commitId":"295ab13e8338bdd0e0c29e051907371c9b2929aa","commitMessage":"@@@Apply small refactorings to Calcite codebase (Java 5.  Java 7.  Java 8)\n\nUse Objects.equals when possible\nReplace for with foreach in Mappings\nUse Java 7 diamond operator to reduce code verbosity\nCollapse identical catch blocks to multi-catch\nUse Double/Float/Long/Boolean hashCode from Java 8\nRemove unnecessary substring call arguments\nFix sqlTypeName -> SqlTypeName typo\nMake floorKey/ceilingKey non-static so their use in NameMap makes more sense\nNameMap uses COMPARATOR.floorKey(name) which is a bit weird when floorKey is static\nAdd @SafeVarargs to methods that are obviously safe\nReplace anonymous types with Java 8 lambdas\nUse Collection#removeIf when possible\nUse Integer.compare when possible\nSuppress AssertWithSideEffects warnings\nAdd missing check to Permutation#isValid\nPermutation#isValid had occurCount[target] != 0 check.  however the array was never updated.  so the check was useless.\nRemove duplicate keys from Strong#MAP\nReplace remove+add with set in ReduceExpressionsRule\nRemove redundant initializers\nMove dead code inside if (false) branch in org.apache.calcite.plan.volcano.RelSubset#add\nRevert removal of UtilTest#testHash\n\ncloses #834\n","date":"2018-09-20 16:51:04","modifiedFileCount":"130","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-02-24 16:02:06","codes":[{"authorDate":"2020-02-24 16:02:06","commitOrder":4,"curCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n    if (ruleSet.contains(rule)) {\n      \r\n      return false;\n    }\n    final boolean added = ruleSet.add(rule);\n    assert added;\n\n    final String ruleName = rule.toString();\n    if (ruleNames.put(ruleName, rule) != null) {\n      throw new RuntimeException(\"Rule description '\" + ruleName\n          + \"' is not unique. \");\n    }\n\n    mapRuleDescription(rule);\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","date":"2020-03-05 12:57:25","endLine":483,"groupId":"1553","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/bb2ec04a53c65661697e936c3313e4c7df84c6.src","preCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n    if (ruleSet.contains(rule)) {\n      \r\n      return false;\n    }\n    final boolean added = ruleSet.add(rule);\n    assert added;\n\n    final String ruleName = rule.toString();\n    if (ruleNames.put(ruleName, rule.getClass())) {\n      Set<Class> x = ruleNames.get(ruleName);\n      if (x.size() > 1) {\n        throw new RuntimeException(\"Rule description '\" + ruleName\n            + \"' is not unique; classes: \" + x);\n      }\n    }\n\n    mapRuleDescription(rule);\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"},{"authorDate":"2020-02-24 16:02:06","commitOrder":4,"curCode":"  public boolean removeRule(RelOptRule rule) {\n    if (!ruleSet.remove(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    ruleNames.remove(rule.toString());\n\n    \r\n    unmapRuleDescription(rule);\n\n    \r\n    classOperands.values().removeIf(entry -> entry.getRule().equals(rule));\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","date":"2020-03-05 12:57:25","endLine":511,"groupId":"9025","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"removeRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/bb2ec04a53c65661697e936c3313e4c7df84c6.src","preCode":"  public boolean removeRule(RelOptRule rule) {\n    if (!ruleSet.remove(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    unmapRuleDescription(rule);\n\n    \r\n    classOperands.values().removeIf(entry -> entry.getRule().equals(rule));\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"M"}],"commitId":"aaf162a26943d3f42897f65a9e3fa8e7745bb1c2","commitMessage":"@@@[CALCITE-3817] VolcanoPlanner does not remove the entry in ruleNames when removing a rule\n","date":"2020-03-05 12:57:25","modifiedFileCount":"1","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2020-03-24 07:27:16","codes":[{"authorDate":"2020-03-24 07:27:16","commitOrder":5,"curCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n\n    if (!super.addRule(rule)) {\n      return false;\n    }\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","date":"2020-04-21 17:54:34","endLine":419,"groupId":"1553","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/c8a1397a3d01196a5ea9a9e7dfdb6236b22378.src","preCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n    if (ruleSet.contains(rule)) {\n      \r\n      return false;\n    }\n    final boolean added = ruleSet.add(rule);\n    assert added;\n\n    final String ruleName = rule.toString();\n    if (ruleNames.put(ruleName, rule) != null) {\n      throw new RuntimeException(\"Rule description '\" + ruleName\n          + \"' is not unique. \");\n    }\n\n    mapRuleDescription(rule);\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2020-03-24 07:27:16","commitOrder":5,"curCode":"  public boolean removeRule(RelOptRule rule) {\n    \r\n    if (!super.removeRule(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    classOperands.values().removeIf(entry -> entry.getRule().equals(rule));\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","date":"2020-04-21 17:54:34","endLine":442,"groupId":"9025","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"removeRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/c8a1397a3d01196a5ea9a9e7dfdb6236b22378.src","preCode":"  public boolean removeRule(RelOptRule rule) {\n    if (!ruleSet.remove(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    ruleNames.remove(rule.toString());\n\n    \r\n    unmapRuleDescription(rule);\n\n    \r\n    classOperands.values().removeIf(entry -> entry.getRule().equals(rule));\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"90f3e98bb7b2de44a7ac0e2bf1d16cfb09888be1","commitMessage":"@@@[CALCITE-3868] Remove redundant ruleSet and ruleNames in VolcanoPlanner\n","date":"2020-04-21 17:54:34","modifiedFileCount":"4","status":"M","submitter":"Haisheng Yuan"},{"authorTime":"2020-03-24 07:27:16","codes":[{"authorDate":"2020-05-14 03:18:07","commitOrder":6,"curCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n\n    if (!super.addRule(rule)) {\n      return false;\n    }\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        if (PhysicalNode.class.isAssignableFrom(subClass)\n            && rule instanceof TransformationRule) {\n          continue;\n        }\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","date":"2020-05-15 03:19:56","endLine":437,"groupId":"1553","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d0/adf485c62d9dd33488734ec2c8c148b11f788e.src","preCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n\n    if (!super.addRule(rule)) {\n      return false;\n    }\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"},{"authorDate":"2020-03-24 07:27:16","commitOrder":6,"curCode":"  public boolean removeRule(RelOptRule rule) {\n    \r\n    if (!super.removeRule(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    classOperands.values().removeIf(entry -> entry.getRule().equals(rule));\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","date":"2020-04-21 17:54:34","endLine":442,"groupId":"9025","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"removeRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0b/c8a1397a3d01196a5ea9a9e7dfdb6236b22378.src","preCode":"  public boolean removeRule(RelOptRule rule) {\n    \r\n    if (!super.removeRule(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    classOperands.values().removeIf(entry -> entry.getRule().equals(rule));\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"N"}],"commitId":"7be30db36d449e0a7fcc76b7d4647e141f4bc72d","commitMessage":"@@@[CALCITE-3997] Logical rules matched with physical operators but failed to handle traits\n\nLogical transformation rule.  only logical operator can be rule operand.  and\nonly generate logical alternatives. It is only visible to VolcanoPlanner. \nHepPlanner will ignore this interface. That means.  in HepPlanner.  the rule that\nimplements TransformationRule can still match with physical operator of\nPhysicalNode and generate physical alternatives.  But in VolcanoPlanner. \nTransformationRule doesn't match with physical operator that implements\nPhysicalNode. It is NOT allowed to generate physical operators in\nTransformationRule.  unless you are using it in HepPlanner.\n\nThis will also fix issue CALCITE-3968.\n\nClose #1976\n","date":"2020-05-15 03:19:56","modifiedFileCount":"89","status":"M","submitter":"Haisheng Yuan"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":7,"curCode":"  @Override public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n\n    if (!super.addRule(rule)) {\n      return false;\n    }\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        if (PhysicalNode.class.isAssignableFrom(subClass)\n            && rule instanceof TransformationRule) {\n          continue;\n        }\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","date":"2020-10-07 05:42:47","endLine":438,"groupId":"101885","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"addRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/ffe289f4ae183817b14497352d8006c96b3aa9.src","preCode":"  public boolean addRule(RelOptRule rule) {\n    if (locked) {\n      return false;\n    }\n\n    if (!super.addRule(rule)) {\n      return false;\n    }\n\n    \r\n    \r\n    \r\n    for (RelOptRuleOperand operand : rule.getOperands()) {\n      for (Class<? extends RelNode> subClass\n          : subClasses(operand.getMatchedClass())) {\n        if (PhysicalNode.class.isAssignableFrom(subClass)\n            && rule instanceof TransformationRule) {\n          continue;\n        }\n        classOperands.put(subClass, operand);\n      }\n    }\n\n    \r\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.registerConverterRule(this, converterRule);\n      }\n    }\n\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":7,"curCode":"  @Override public boolean removeRule(RelOptRule rule) {\n    \r\n    if (!super.removeRule(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    classOperands.values().removeIf(entry -> entry.getRule().equals(rule));\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","date":"2020-10-07 05:42:47","endLine":461,"groupId":"101885","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"removeRule","params":"(RelOptRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/ffe289f4ae183817b14497352d8006c96b3aa9.src","preCode":"  public boolean removeRule(RelOptRule rule) {\n    \r\n    if (!super.removeRule(rule)) {\n      \r\n      return false;\n    }\n\n    \r\n    classOperands.values().removeIf(entry -> entry.getRule().equals(rule));\n\n    \r\n    \r\n    if (rule instanceof ConverterRule) {\n      ConverterRule converterRule = (ConverterRule) rule;\n      final RelTrait ruleTrait = converterRule.getInTrait();\n      final RelTraitDef ruleTraitDef = ruleTrait.getTraitDef();\n      if (traitDefs.contains(ruleTraitDef)) {\n        ruleTraitDef.deregisterConverterRule(this, converterRule);\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
