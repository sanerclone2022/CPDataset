[{"authorTime":"2019-04-29 17:31:47","codes":[{"authorDate":"2016-09-07 04:42:50","commitOrder":2,"curCode":"  @Test public void testMergeSelectSource() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set name = t.name, deptno = t.deptno, salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `NAME` = `T`.`NAME`\\n\"\n        + \", `DEPTNO` = `T`.`DEPTNO`\\n\"\n        + \", `SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","date":"2016-09-07 06:10:22","endLine":3048,"groupId":"13057","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeSelectSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/59/0f0ee48d1030d665401195addbb3790acdb95a.src","preCode":"  @Test public void testMergeSelectSource() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set name = t.name, deptno = t.deptno, salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `NAME` = `T`.`NAME`\\n\"\n        + \", `DEPTNO` = `T`.`DEPTNO`\\n\"\n        + \", `SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3028,"status":"NB"},{"authorDate":"2019-04-29 17:31:47","commitOrder":2,"curCode":"  @Test public void testMergeSelectSource2() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set e.name = t.name, e.deptno = t.deptno, e.salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `E`.`NAME` = `T`.`NAME`\\n\"\n        + \", `E`.`DEPTNO` = `T`.`DEPTNO`\\n\"\n        + \", `E`.`SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","date":"2019-04-30 20:45:23","endLine":3815,"groupId":"13057","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeSelectSource2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/b8926d86c10e67321724ebaf4c40568fc30546.src","preCode":"  @Test public void testMergeSelectSource2() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set e.name = t.name, e.deptno = t.deptno, e.salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `E`.`NAME` = `T`.`NAME`\\n\"\n        + \", `E`.`DEPTNO` = `T`.`DEPTNO`\\n\"\n        + \", `E`.`SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3795,"status":"B"}],"commitId":"e3a69708df55cf05bbe38f8f1d5bd472cf8de81f","commitMessage":"@@@[CALCITE-3030] SqlParseException when using component identifier for setting in merge statements (Danny Chan)\n\nClose apache/calcite#1190\n","date":"2019-04-30 20:45:23","modifiedFileCount":"1","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-10-29 04:02:01","codes":[{"authorDate":"2019-10-29 04:02:01","commitOrder":3,"curCode":"  @Test public void testMergeSelectSource() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set name = t.name, deptno = t.deptno, salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `NAME` = `T`.`NAME`\"\n        + \", `DEPTNO` = `T`.`DEPTNO`\"\n        + \", `SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","date":"2020-01-05 14:48:39","endLine":3904,"groupId":"13190","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeSelectSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/26/9bcb2e8c04f30064c1ffd75031e8154e5e25f5.src","preCode":"  @Test public void testMergeSelectSource() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set name = t.name, deptno = t.deptno, salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `NAME` = `T`.`NAME`\\n\"\n        + \", `DEPTNO` = `T`.`DEPTNO`\\n\"\n        + \", `SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3884,"status":"M"},{"authorDate":"2019-10-29 04:02:01","commitOrder":3,"curCode":"  @Test public void testMergeSelectSource2() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set e.name = t.name, e.deptno = t.deptno, e.salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `E`.`NAME` = `T`.`NAME`\"\n        + \", `E`.`DEPTNO` = `T`.`DEPTNO`\"\n        + \", `E`.`SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","date":"2020-01-05 14:48:39","endLine":3927,"groupId":"13190","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeSelectSource2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/26/9bcb2e8c04f30064c1ffd75031e8154e5e25f5.src","preCode":"  @Test public void testMergeSelectSource2() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set e.name = t.name, e.deptno = t.deptno, e.salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `E`.`NAME` = `T`.`NAME`\\n\"\n        + \", `E`.`DEPTNO` = `T`.`DEPTNO`\\n\"\n        + \", `E`.`SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3907,"status":"M"}],"commitId":"c416c31fc376868bdd672afd84ec06dc75d56575","commitMessage":"@@@[CALCITE-3526] SqlPrettyWriter should have options to fold/chop long lines.  print leading commas\n\nMove SqlPrettyWriter.Config to top-level class SqlWriterConfig.  and\nmake it an interface implemented via ImmutableBeans; fixes\n  [CALCITE-1585] SqlPrettyWriter doesn't respect alwaysUseParentheses\nbecause config is now held in an immutable object rather than the\nSqlPrettyWriter.\n\nAdd option SqlWriterConfig.withLeadingComma.  to generate\n\n  SELECT x\n      .  y\n  FROM t\n\nrather than\n\n  SELECT x. \n      y\n  FROM t\n\nAdd option SqlWriterConfig.fromLength.  which controls when lines are\nconsidered long enough to chop or fold. Unlike lineLength().  which is\nabsolute.  it is relative to the current sub-query.\n\nRefactor: add SqlNodeList.SINGLETON_STAR.\n\nAdd lots of options including selectFolding().  fromFolding(). \nclauseEndsList().\n\nExtend SqlParserTest to test randomly-configured SqlPrettyWriter.\n","date":"2020-01-05 14:48:39","modifiedFileCount":"25","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testMergeSelectSource() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set name = t.name, deptno = t.deptno, salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `NAME` = `T`.`NAME`\"\n        + \", `DEPTNO` = `T`.`DEPTNO`\"\n        + \", `SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","date":"2020-04-06 04:57:49","endLine":3893,"groupId":"10852","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeSelectSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMergeSelectSource() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set name = t.name, deptno = t.deptno, salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `NAME` = `T`.`NAME`\"\n        + \", `DEPTNO` = `T`.`DEPTNO`\"\n        + \", `SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3873,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testMergeSelectSource2() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set e.name = t.name, e.deptno = t.deptno, e.salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `E`.`NAME` = `T`.`NAME`\"\n        + \", `E`.`DEPTNO` = `T`.`DEPTNO`\"\n        + \", `E`.`SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","date":"2020-04-06 04:57:49","endLine":3916,"groupId":"10852","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeSelectSource2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testMergeSelectSource2() {\n    final String sql = \"merge into emps e \"\n        + \"using (select * from tempemps where deptno is null) t \"\n        + \"on e.empno = t.empno \"\n        + \"when matched then update \"\n        + \"set e.name = t.name, e.deptno = t.deptno, e.salary = t.salary * .1 \"\n        + \"when not matched then insert (name, dept, salary) \"\n        + \"values(t.name, 10, t.salary * .15)\";\n    final String expected = \"MERGE INTO `EMPS` AS `E`\\n\"\n        + \"USING (SELECT *\\n\"\n        + \"FROM `TEMPEMPS`\\n\"\n        + \"WHERE (`DEPTNO` IS NULL)) AS `T`\\n\"\n        + \"ON (`E`.`EMPNO` = `T`.`EMPNO`)\\n\"\n        + \"WHEN MATCHED THEN UPDATE SET `E`.`NAME` = `T`.`NAME`\"\n        + \", `E`.`DEPTNO` = `T`.`DEPTNO`\"\n        + \", `E`.`SALARY` = (`T`.`SALARY` * 0.1)\\n\"\n        + \"WHEN NOT MATCHED THEN INSERT (`NAME`, `DEPT`, `SALARY`) \"\n        + \"(VALUES (ROW(`T`.`NAME`, 10, (`T`.`SALARY` * 0.15))))\";\n    sql(sql).ok(expected)\n        .node(not(isDdl()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3896,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
