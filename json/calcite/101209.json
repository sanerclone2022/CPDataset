[{"authorTime":"2015-02-22 10:10:32","codes":[{"authorDate":"2015-02-22 10:10:32","commitOrder":1,"curCode":"  @Test public void testStreamGroupBy() {\n    sql(\"select stream rowtime, productId, count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by productId, rowtime\").ok();\n    sql(\"select stream floor(rowtime to hour) as rowtime, productId,\\n\"\n        + \" count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by floor(rowtime to hour), productId\").ok();\n    sql(\"select stream productId, count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"^group by productId^\")\n        .fails(STR_AGG_REQUIRES_MONO);\n    sql(\"select stream ^count(*)^ as c\\n\"\n        + \"from orders\")\n        .fails(STR_AGG_REQUIRES_MONO);\n    sql(\"select stream count(*) as c\\n\"\n        + \"from orders ^group by ()^\")\n        .fails(STR_AGG_REQUIRES_MONO);\n  }\n","date":"2015-03-08 07:33:21","endLine":6989,"groupId":"8289","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/04ff542137cae10283dd50afa3b557cd567fcf.src","preCode":"  @Test public void testStreamGroupBy() {\n    sql(\"select stream rowtime, productId, count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by productId, rowtime\").ok();\n    sql(\"select stream floor(rowtime to hour) as rowtime, productId,\\n\"\n        + \" count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by floor(rowtime to hour), productId\").ok();\n    sql(\"select stream productId, count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"^group by productId^\")\n        .fails(STR_AGG_REQUIRES_MONO);\n    sql(\"select stream ^count(*)^ as c\\n\"\n        + \"from orders\")\n        .fails(STR_AGG_REQUIRES_MONO);\n    sql(\"select stream count(*) as c\\n\"\n        + \"from orders ^group by ()^\")\n        .fails(STR_AGG_REQUIRES_MONO);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6971,"status":"B"},{"authorDate":"2015-02-22 10:10:32","commitOrder":1,"curCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","date":"2015-03-08 07:33:21","endLine":7081,"groupId":"4429","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d3/04ff542137cae10283dd50afa3b557cd567fcf.src","preCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7057,"status":"B"}],"commitId":"0ecd8702ab95fd59b7ef2182720d12b2167ae968","commitMessage":"@@@[CALCITE-602] Streaming queries\n\nValidate and implement streaming queries: streaming scan.  project.  filter.  aggregate.  sort.\n\nImplement CEIL and FLOOR functions for date-time and numeric values.\n\nAdd CompositeSingleOperandTypeChecker.  and make CompositeOperandTypeChecker work for multiple operands.\n","date":"2015-03-08 07:33:21","modifiedFileCount":"46","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testStreamGroupBy() {\n    sql(\"select stream rowtime, productId, count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by productId, rowtime\").ok();\n    sql(\"select stream floor(rowtime to hour) as rowtime, productId,\\n\"\n        + \" count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by floor(rowtime to hour), productId\").ok();\n    sql(\"select stream productId, count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"^group by productId^\")\n        .fails(STR_AGG_REQUIRES_MONO);\n    sql(\"select stream ^count(*)^ as c\\n\"\n        + \"from orders\")\n        .fails(STR_AGG_REQUIRES_MONO);\n    sql(\"select stream count(*) as c\\n\"\n        + \"from orders ^group by ()^\")\n        .fails(STR_AGG_REQUIRES_MONO);\n  }\n","date":"2020-04-06 04:57:49","endLine":9804,"groupId":"101209","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testStreamGroupBy() {\n    sql(\"select stream rowtime, productId, count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by productId, rowtime\").ok();\n    sql(\"select stream floor(rowtime to hour) as rowtime, productId,\\n\"\n        + \" count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"group by floor(rowtime to hour), productId\").ok();\n    sql(\"select stream productId, count(*) as c\\n\"\n        + \"from orders\\n\"\n        + \"^group by productId^\")\n        .fails(STR_AGG_REQUIRES_MONO);\n    sql(\"select stream ^count(*)^ as c\\n\"\n        + \"from orders\")\n        .fails(STR_AGG_REQUIRES_MONO);\n    sql(\"select stream count(*) as c\\n\"\n        + \"from orders ^group by ()^\")\n        .fails(STR_AGG_REQUIRES_MONO);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9786,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","date":"2020-04-06 04:57:49","endLine":9981,"groupId":"101209","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamOrderBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testStreamOrderBy() {\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by rowtime\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour)\").ok();\n    sql(\"select stream floor(rowtime to minute), productId\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to minute), productId desc\").ok();\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^productId^, rowtime\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by ^rowtime desc^\")\n        .fails(STR_ORDER_REQUIRES_MONO);\n    sql(\"select stream *\\n\"\n        + \"from orders\\n\"\n        + \"order by floor(rowtime to hour), rowtime desc\").ok();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9957,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
