[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision) {\n    if (typeName.allowsScale()) {\n      return createSqlType(typeName, precision, typeName.getDefaultScale());\n    }\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    RelDataType newType = new BasicSqlType(typeSystem, typeName, precision);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","date":"2014-11-14 09:39:34","endLine":62,"groupId":"9076","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSqlType","params":"(SqlTypeNametypeName@intprecision)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/04/110b8241ff57adac3e3c6537441b6ad9297d47.src","preCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision) {\n    if (typeName.allowsScale()) {\n      return createSqlType(typeName, precision, typeName.getDefaultScale());\n    }\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    RelDataType newType = new BasicSqlType(typeSystem, typeName, precision);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision,\n      int scale) {\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    RelDataType newType =\n        new BasicSqlType(typeSystem, typeName, precision, scale);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","date":"2014-11-14 09:39:34","endLine":76,"groupId":"15421","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSqlType","params":"(SqlTypeNametypeName@intprecision@intscale)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/04/110b8241ff57adac3e3c6537441b6ad9297d47.src","preCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision,\n      int scale) {\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    RelDataType newType =\n        new BasicSqlType(typeSystem, typeName, precision, scale);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-05-02 12:53:12","codes":[{"authorDate":"2017-05-02 12:53:12","commitOrder":2,"curCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision) {\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    if (typeName.allowsScale()) {\n      return createSqlType(typeName, precision, typeName.getDefaultScale());\n    }\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    RelDataType newType = new BasicSqlType(typeSystem, typeName, precision);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","date":"2017-05-31 23:17:28","endLine":72,"groupId":"9076","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSqlType","params":"(SqlTypeNametypeName@intprecision)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9f/7dc51e5db453ef96202c3b8994601a25ef8df5.src","preCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision) {\n    if (typeName.allowsScale()) {\n      return createSqlType(typeName, precision, typeName.getDefaultScale());\n    }\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    RelDataType newType = new BasicSqlType(typeSystem, typeName, precision);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2017-05-02 12:53:12","commitOrder":2,"curCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision,\n      int scale) {\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    RelDataType newType =\n        new BasicSqlType(typeSystem, typeName, precision, scale);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","date":"2017-05-31 23:17:28","endLine":90,"groupId":"2116","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createSqlType","params":"(SqlTypeNametypeName@intprecision@intscale)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9f/7dc51e5db453ef96202c3b8994601a25ef8df5.src","preCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision,\n      int scale) {\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    RelDataType newType =\n        new BasicSqlType(typeSystem, typeName, precision, scale);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"205af8134857ba312415b9a5b4a48020fe0ce888","commitMessage":"@@@[CALCITE-1690] Calcite timestamp literals cannot express precision above millisecond.  TIMESTAMP(3)\n","date":"2017-05-31 23:17:28","modifiedFileCount":"34","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-05-02 12:53:12","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":3,"curCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision) {\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    if (typeName.allowsScale()) {\n      return createSqlType(typeName, precision, typeName.getDefaultScale());\n    }\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    \r\n    RelDataType newType = precision == RelDataType.PRECISION_NOT_SPECIFIED\n        ? new BasicSqlType(typeSystem, typeName)\n        : new BasicSqlType(typeSystem, typeName, precision);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","date":"2019-08-29 17:01:46","endLine":72,"groupId":"9076","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createSqlType","params":"(SqlTypeNametypeName@intprecision)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/8611abc33bbfd148cd337db1c2455299bcc0bc.src","preCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision) {\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    if (typeName.allowsScale()) {\n      return createSqlType(typeName, precision, typeName.getDefaultScale());\n    }\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    RelDataType newType = new BasicSqlType(typeSystem, typeName, precision);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2017-05-02 12:53:12","commitOrder":3,"curCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision,\n      int scale) {\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    RelDataType newType =\n        new BasicSqlType(typeSystem, typeName, precision, scale);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","date":"2017-05-31 23:17:28","endLine":90,"groupId":"2116","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createSqlType","params":"(SqlTypeNametypeName@intprecision@intscale)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9f/7dc51e5db453ef96202c3b8994601a25ef8df5.src","preCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision,\n      int scale) {\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    RelDataType newType =\n        new BasicSqlType(typeSystem, typeName, precision, scale);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision) {\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    if (typeName.allowsScale()) {\n      return createSqlType(typeName, precision, typeName.getDefaultScale());\n    }\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    \r\n    RelDataType newType = precision == RelDataType.PRECISION_NOT_SPECIFIED\n        ? new BasicSqlType(typeSystem, typeName)\n        : new BasicSqlType(typeSystem, typeName, precision);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","date":"2020-10-07 05:42:47","endLine":72,"groupId":"111821","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createSqlType","params":"(SqlTypeNametypeName@intprecision)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fe/cf939c9c072dc12f53b542a889d4657b69cae4.src","preCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision) {\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    if (typeName.allowsScale()) {\n      return createSqlType(typeName, precision, typeName.getDefaultScale());\n    }\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    \r\n    RelDataType newType = precision == RelDataType.PRECISION_NOT_SPECIFIED\n        ? new BasicSqlType(typeSystem, typeName)\n        : new BasicSqlType(typeSystem, typeName, precision);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision,\n      int scale) {\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    RelDataType newType =\n        new BasicSqlType(typeSystem, typeName, precision, scale);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","date":"2020-10-07 05:42:47","endLine":89,"groupId":"111821","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createSqlType","params":"(SqlTypeNametypeName@intprecision@intscale)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/fe/cf939c9c072dc12f53b542a889d4657b69cae4.src","preCode":"  public RelDataType createSqlType(\n      SqlTypeName typeName,\n      int precision,\n      int scale) {\n    assertBasic(typeName);\n    assert (precision >= 0)\n        || (precision == RelDataType.PRECISION_NOT_SPECIFIED);\n    final int maxPrecision = typeSystem.getMaxPrecision(typeName);\n    if (maxPrecision >= 0 && precision > maxPrecision) {\n      precision = maxPrecision;\n    }\n    RelDataType newType =\n        new BasicSqlType(typeSystem, typeName, precision, scale);\n    newType = SqlTypeUtil.addCharsetAndCollation(newType, this);\n    return canonize(newType);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
