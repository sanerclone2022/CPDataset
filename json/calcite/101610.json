[{"authorTime":"2020-03-12 21:16:18","codes":[{"authorDate":"2020-03-12 21:16:18","commitOrder":1,"curCode":"  @Test public void testSortExchangeFieldTrimmer() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"), builder.field(\"DEPTNO\"))\n            .sortExchange(RelDistributions.hash(Lists.newArrayList(1)), RelCollations.of(0))\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"))\n            .build();\n\n    RelFieldTrimmer fieldTrimmer = new RelFieldTrimmer(null, builder);\n    RelNode trimmed = fieldTrimmer.trim(root);\n\n    final String expected = \"\"\n        + \"LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0], ENAME=[$1])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(trimmed, hasTree(expected));\n  }\n","date":"2020-04-03 00:26:14","endLine":68,"groupId":"12247","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortExchangeFieldTrimmer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d6/024336a85ebf52b545fff0350fe3370899d8e7.src","preCode":"  @Test public void testSortExchangeFieldTrimmer() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"), builder.field(\"DEPTNO\"))\n            .sortExchange(RelDistributions.hash(Lists.newArrayList(1)), RelCollations.of(0))\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"))\n            .build();\n\n    RelFieldTrimmer fieldTrimmer = new RelFieldTrimmer(null, builder);\n    RelNode trimmed = fieldTrimmer.trim(root);\n\n    final String expected = \"\"\n        + \"LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0], ENAME=[$1])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(trimmed, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2020-03-12 21:16:18","commitOrder":1,"curCode":"  @Test public void testSortExchangeFieldTrimmerWhenProjectCannotBeMerged() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"), builder.field(\"DEPTNO\"))\n            .sortExchange(RelDistributions.hash(Lists.newArrayList(1)), RelCollations.of(0))\n            .project(builder.field(\"EMPNO\"))\n            .build();\n\n    RelFieldTrimmer fieldTrimmer = new RelFieldTrimmer(null, builder);\n    RelNode trimmed = fieldTrimmer.trim(root);\n\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\\n\"\n        + \"    LogicalProject(EMPNO=[$0], ENAME=[$1])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(trimmed, hasTree(expected));\n  }\n","date":"2020-04-03 00:26:14","endLine":88,"groupId":"6959","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSortExchangeFieldTrimmerWhenProjectCannotBeMerged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d6/024336a85ebf52b545fff0350fe3370899d8e7.src","preCode":"  @Test public void testSortExchangeFieldTrimmerWhenProjectCannotBeMerged() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"), builder.field(\"DEPTNO\"))\n            .sortExchange(RelDistributions.hash(Lists.newArrayList(1)), RelCollations.of(0))\n            .project(builder.field(\"EMPNO\"))\n            .build();\n\n    RelFieldTrimmer fieldTrimmer = new RelFieldTrimmer(null, builder);\n    RelNode trimmed = fieldTrimmer.trim(root);\n\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\\n\"\n        + \"    LogicalProject(EMPNO=[$0], ENAME=[$1])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(trimmed, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"8849b62e7baff84dcd4262f47809e87a38be7b10","commitMessage":"@@@[CALCITE-3880] Add SortExchange support to RelFieldTrimmer (Krisztian Kasa)\n\nClose #1879\n","date":"2020-04-03 00:26:14","modifiedFileCount":"2","status":"B","submitter":"kkasa"},{"authorTime":"2020-06-09 21:11:34","codes":[{"authorDate":"2020-06-09 21:11:34","commitOrder":2,"curCode":"  @Test void testSortExchangeFieldTrimmer() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"), builder.field(\"DEPTNO\"))\n            .sortExchange(RelDistributions.hash(Lists.newArrayList(1)), RelCollations.of(0))\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"))\n            .build();\n\n    RelFieldTrimmer fieldTrimmer = new RelFieldTrimmer(null, builder);\n    RelNode trimmed = fieldTrimmer.trim(root);\n\n    final String expected = \"\"\n        + \"LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0], ENAME=[$1])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(trimmed, hasTree(expected));\n  }\n","date":"2020-06-12 15:19:41","endLine":76,"groupId":"101610","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSortExchangeFieldTrimmer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/57f07e98b57e5c185aad5dacb986703dbb0d98.src","preCode":"  @Test public void testSortExchangeFieldTrimmer() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"), builder.field(\"DEPTNO\"))\n            .sortExchange(RelDistributions.hash(Lists.newArrayList(1)), RelCollations.of(0))\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"))\n            .build();\n\n    RelFieldTrimmer fieldTrimmer = new RelFieldTrimmer(null, builder);\n    RelNode trimmed = fieldTrimmer.trim(root);\n\n    final String expected = \"\"\n        + \"LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\\n\"\n        + \"  LogicalProject(EMPNO=[$0], ENAME=[$1])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(trimmed, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-06-09 21:11:34","commitOrder":2,"curCode":"  @Test void testSortExchangeFieldTrimmerWhenProjectCannotBeMerged() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"), builder.field(\"DEPTNO\"))\n            .sortExchange(RelDistributions.hash(Lists.newArrayList(1)), RelCollations.of(0))\n            .project(builder.field(\"EMPNO\"))\n            .build();\n\n    RelFieldTrimmer fieldTrimmer = new RelFieldTrimmer(null, builder);\n    RelNode trimmed = fieldTrimmer.trim(root);\n\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\\n\"\n        + \"    LogicalProject(EMPNO=[$0], ENAME=[$1])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(trimmed, hasTree(expected));\n  }\n","date":"2020-06-12 15:19:41","endLine":96,"groupId":"101610","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSortExchangeFieldTrimmerWhenProjectCannotBeMerged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/57f07e98b57e5c185aad5dacb986703dbb0d98.src","preCode":"  @Test public void testSortExchangeFieldTrimmerWhenProjectCannotBeMerged() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    final RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"EMPNO\"), builder.field(\"ENAME\"), builder.field(\"DEPTNO\"))\n            .sortExchange(RelDistributions.hash(Lists.newArrayList(1)), RelCollations.of(0))\n            .project(builder.field(\"EMPNO\"))\n            .build();\n\n    RelFieldTrimmer fieldTrimmer = new RelFieldTrimmer(null, builder);\n    RelNode trimmed = fieldTrimmer.trim(root);\n\n    final String expected = \"\"\n        + \"LogicalProject(EMPNO=[$0])\\n\"\n        + \"  LogicalSortExchange(distribution=[hash[1]], collation=[[0]])\\n\"\n        + \"    LogicalProject(EMPNO=[$0], ENAME=[$1])\\n\"\n        + \"      LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(trimmed, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql2rel/RelFieldTrimmerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"7c2f6772ee6bbfe4fefc2cf35152d6c71cc7a361","commitMessage":"@@@[CALCITE-4055] RelFieldTrimmer loses hints\n","date":"2020-06-12 15:19:41","modifiedFileCount":"3","status":"M","submitter":"rubenada"}]
