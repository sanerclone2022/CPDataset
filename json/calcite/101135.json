[{"authorTime":"2015-07-12 05:56:42","codes":[{"authorDate":"2015-07-12 05:56:42","commitOrder":1,"curCode":"  @Test public void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, CAST('1'):INTEGER NOT NULL), \"\n            + \"IS NULL($1), IS NULL($2)]\"));\n  }\n","date":"2016-01-10 16:51:25","endLine":1304,"groupId":"9785","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesOnConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/cd23b3aab9084129ca47bf4bd5480d0b3c35d4.src","preCode":"  @Test public void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, CAST('1'):INTEGER NOT NULL), \"\n            + \"IS NULL($1), IS NULL($2)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1293,"status":"B"},{"authorDate":"2015-07-12 05:56:42","commitOrder":1,"curCode":"  @Test public void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NOT DISTINCT FROM($0, CASE(=(1, 1), null, 1))]\"));\n  }\n","date":"2016-01-10 16:51:25","endLine":1316,"groupId":"9785","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPullUpPredicatesOnNullableConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/cd23b3aab9084129ca47bf4bd5480d0b3c35d4.src","preCode":"  @Test public void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NOT DISTINCT FROM($0, CASE(=(1, 1), null, 1))]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1306,"status":"B"}],"commitId":"cabdcf44e4aec4d4ceea7f97c8c6fd9e9dbd36b1","commitMessage":"@@@[CALCITE-794] Detect cycles when computing statistics\n\nMake RelMetadataQuery methods non-static. Each active call is\nregistered in the RelMetadataQuery instance; it throws\nCyclicMetadataException when it detects a cycle.  and the caller can\ncatch it to return a sensible default value for the particular kind of\nmetadata.\n\nChange signature of FlatLists.of(Object...) to\nFlatLists.copyOf(Comparable...).\n\nTemporarily disable all failing tests.\n\nAdd metadata for EnumerableLimit.\n","date":"2016-01-10 16:51:25","modifiedFileCount":"122","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-07-12 05:56:42","codes":[{"authorDate":"2016-10-10 07:21:47","commitOrder":2,"curCode":"  @Test public void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, 1), IS NULL($1), IS NULL($2)]\"));\n  }\n","date":"2016-10-19 01:20:28","endLine":1354,"groupId":"9785","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesOnConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/12335fe0b712e48115e543be344763f84b3acd.src","preCode":"  @Test public void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, CAST('1'):INTEGER NOT NULL), \"\n            + \"IS NULL($1), IS NULL($2)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1344,"status":"M"},{"authorDate":"2015-07-12 05:56:42","commitOrder":2,"curCode":"  @Test public void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NOT DISTINCT FROM($0, CASE(=(1, 1), null, 1))]\"));\n  }\n","date":"2016-01-10 16:51:25","endLine":1316,"groupId":"9785","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPullUpPredicatesOnNullableConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/cd23b3aab9084129ca47bf4bd5480d0b3c35d4.src","preCode":"  @Test public void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NOT DISTINCT FROM($0, CASE(=(1, 1), null, 1))]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1306,"status":"N"}],"commitId":"54556b82c0599012f2e7fefaae3a9868cb68f879","commitMessage":"@@@[CALCITE-1417] In RelBuilder.  simplify \"CAST(literal TO type)\" to a literal when possible\n\nThis allows us to simplify logic that the Druid adapter uses to push\ndown time ranges. For example.  CAST('2016-01-23' AS DATE) will already\nbe a DATE value.\n\nYou can turn off simplification (mainly for testing purposes) by\nsetting Hook.REL_BUILDER_SIMPLIFY. This the first time we have a\nallowed a Hook to act like a property.\n\nAdd a test case (disabled) for [CALCITE-1439].\n\nAllow QuidemTest to accept test script names as command-line\narguments.\n\nUse RexExecutor for constant reduction (although not necessarily the\nsame one that will be used later in planning).\n","date":"2016-10-19 01:20:28","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-10-11 22:41:20","codes":[{"authorDate":"2016-10-10 07:21:47","commitOrder":3,"curCode":"  @Test public void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, 1), IS NULL($1), IS NULL($2)]\"));\n  }\n","date":"2016-10-19 01:20:28","endLine":1354,"groupId":"9785","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesOnConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5a/12335fe0b712e48115e543be344763f84b3acd.src","preCode":"  @Test public void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, 1), IS NULL($1), IS NULL($2)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1344,"status":"N"},{"authorDate":"2018-10-11 22:41:20","commitOrder":3,"curCode":"  @Test public void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NULL($0)]\"));\n  }\n","date":"2018-10-18 04:30:17","endLine":1560,"groupId":"9785","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPullUpPredicatesOnNullableConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ec/94d94c4a9da2c79f65936dfb378840561beeee.src","preCode":"  @Test public void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NOT DISTINCT FROM($0, CASE(=(1, 1), null, 1))]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1550,"status":"M"}],"commitId":"b470a0cd4572c9f6c4c0e9b51926b97c5af58d3f","commitMessage":"@@@[CALCITE-1413] Enhance boolean case statement simplifications (Zoltan Haindrich)\n\nEnables the simplification of case branch conditionals and values.\nAdds a new case statement rewrite logic which could rewrite any case statement returning booleans\ninto and/or expressions.\n\nClose apache/calcite#886\n","date":"2018-10-18 04:30:17","modifiedFileCount":"4","status":"M","submitter":"Zoltan Haindrich"},{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2019-10-16 19:22:37","commitOrder":4,"curCode":"  @Test public void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, 1), IS NULL($1), IS NULL($2)]\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":1578,"groupId":"3034","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesOnConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, 1), IS NULL($1), IS NULL($2)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1568,"status":"M"},{"authorDate":"2019-10-16 19:22:37","commitOrder":4,"curCode":"  @Test public void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NULL($0)]\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":1590,"groupId":"3034","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPullUpPredicatesOnNullableConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NULL($0)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1580,"status":"M"}],"commitId":"ebc16afa935888578b5befc870c1997f307a6cb5","commitMessage":"@@@[CALCITE-3421] Reuse RelMetadataQuery in test suites\n\nClose #1513\n","date":"2019-10-18 06:51:31","modifiedFileCount":"5","status":"M","submitter":"dz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, 1), IS NULL($1), IS NULL($2)]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":1961,"groupId":"101135","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPullUpPredicatesOnConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testPullUpPredicatesOnConstant() {\n    final String sql = \"select deptno, mgr, x, 'y' as y, z from (\\n\"\n        + \"  select deptno, mgr, cast(null as integer) as x, cast('1' as int) as z\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10)\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[<($0, 10), =($3, 'y'), =($4, 1), IS NULL($1), IS NULL($2)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1951,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NULL($0)]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":1973,"groupId":"101135","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPullUpPredicatesOnNullableConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testPullUpPredicatesOnNullableConstant() {\n    final String sql = \"select nullif(1, 1) as c\\n\"\n        + \"  from emp\\n\"\n        + \"  where mgr is null and deptno < 10\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    RelOptPredicateList list = mq.getPulledUpPredicates(rel);\n    \r\n    assertThat(list.pulledUpPredicates,\n        sortsAs(\"[IS NULL($0)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1963,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
