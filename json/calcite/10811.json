[{"authorTime":"2016-03-30 08:41:18","codes":[{"authorDate":"2016-03-30 08:41:18","commitOrder":2,"curCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","date":"2016-06-05 12:35:29","endLine":4457,"groupId":"1330","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractIntervalYearMonth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/0e2f3893be66f7bf78ffd13248273eede1565b.src","preCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4381,"status":"B"},{"authorDate":"2016-03-30 08:41:18","commitOrder":2,"curCode":"  @Test public void testFloorFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"floor(interval '3:4:5' hour to second)\",\n        \"+3:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '5-1' year to month)\",\n        \"+5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-5-1' year to month)\",\n        \"-6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second to second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' minute to second to minute)\",\n        \"-7-0\",\n        \"INTERVAL MINUTE TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' hour to minute to hour)\",\n        \"7-0\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6 3' day to hour to day)\",\n        \"7 00\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to month)\",\n        \"102-07\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to quarter)\",\n        \"102-10\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-1' year to month to century)\",\n        \"201\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '1004-1' year to month to millennium)\",\n        \"2001-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"floor(cast(null as interval year))\");\n  }\n","date":"2016-06-05 12:35:29","endLine":5025,"groupId":"1330","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloorFuncInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/0e2f3893be66f7bf78ffd13248273eede1565b.src","preCode":"  @Test public void testFloorFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"floor(interval '3:4:5' hour to second)\",\n        \"+3:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '5-1' year to month)\",\n        \"+5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-5-1' year to month)\",\n        \"-6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second to second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' minute to second to minute)\",\n        \"-7-0\",\n        \"INTERVAL MINUTE TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' hour to minute to hour)\",\n        \"7-0\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6 3' day to hour to day)\",\n        \"7 00\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to month)\",\n        \"102-07\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to quarter)\",\n        \"102-10\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-1' year to month to century)\",\n        \"201\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '1004-1' year to month to millennium)\",\n        \"2001-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"floor(cast(null as interval year))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4971,"status":"MB"}],"commitId":"97945652197cbc80ce5c4ed05d3fc18ee0061e75","commitMessage":"@@@[CALCITE-1177] Extend list of supported time units in EXTRACT.  CEIL and FLOOR functions (Venki Korukanti)\n\nClose apache/calcite#232\n","date":"2016-06-05 12:35:29","modifiedFileCount":"3","status":"M","submitter":"vkorukanti"},{"authorTime":"2016-03-30 08:41:18","codes":[{"authorDate":"2018-05-28 17:23:39","commitOrder":3,"curCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(millisecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(microsecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(isodow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","date":"2018-06-29 10:13:12","endLine":5768,"groupId":"1330","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractIntervalYearMonth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7a/b856b8f823f2f204aa344a89ce905597f4f435.src","preCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":5680,"status":"M"},{"authorDate":"2016-03-30 08:41:18","commitOrder":3,"curCode":"  @Test public void testFloorFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"floor(interval '3:4:5' hour to second)\",\n        \"+3:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '5-1' year to month)\",\n        \"+5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-5-1' year to month)\",\n        \"-6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second to second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' minute to second to minute)\",\n        \"-7-0\",\n        \"INTERVAL MINUTE TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' hour to minute to hour)\",\n        \"7-0\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6 3' day to hour to day)\",\n        \"7 00\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to month)\",\n        \"102-07\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to quarter)\",\n        \"102-10\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-1' year to month to century)\",\n        \"201\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '1004-1' year to month to millennium)\",\n        \"2001-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"floor(cast(null as interval year))\");\n  }\n","date":"2016-06-05 12:35:29","endLine":5025,"groupId":"1330","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloorFuncInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/0e2f3893be66f7bf78ffd13248273eede1565b.src","preCode":"  @Test public void testFloorFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"floor(interval '3:4:5' hour to second)\",\n        \"+3:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '5-1' year to month)\",\n        \"+5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-5-1' year to month)\",\n        \"-6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second to second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' minute to second to minute)\",\n        \"-7-0\",\n        \"INTERVAL MINUTE TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' hour to minute to hour)\",\n        \"7-0\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6 3' day to hour to day)\",\n        \"7 00\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to month)\",\n        \"102-07\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to quarter)\",\n        \"102-10\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-1' year to month to century)\",\n        \"201\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '1004-1' year to month to millennium)\",\n        \"2001-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"floor(cast(null as interval year))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4971,"status":"N"}],"commitId":"03b7af4863359dd3bb0a4c84eb01d0e39f865cf6","commitMessage":"@@@[CALCITE-2303] In EXTRACT function.  support MICROSECONDS.  MILLISECONDS.  EPOCH.  ISODOW.  ISOYEAR and DECADE time units (Sergey Nuyanzin)\n\nClose apache/calcite#702\n","date":"2018-06-29 10:13:12","modifiedFileCount":"3","status":"M","submitter":"snuyanzin"},{"authorTime":"2016-03-30 08:41:18","codes":[{"authorDate":"2019-07-25 16:03:25","commitOrder":4,"curCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(millisecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(microsecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(nanosecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(isodow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","date":"2019-07-30 10:24:45","endLine":6822,"groupId":"1330","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractIntervalYearMonth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/3e9583a4fecec0682f9480c6b4ee1c6a752132.src","preCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(millisecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(microsecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(isodow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6729,"status":"M"},{"authorDate":"2016-03-30 08:41:18","commitOrder":4,"curCode":"  @Test public void testFloorFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"floor(interval '3:4:5' hour to second)\",\n        \"+3:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '5-1' year to month)\",\n        \"+5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-5-1' year to month)\",\n        \"-6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second to second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' minute to second to minute)\",\n        \"-7-0\",\n        \"INTERVAL MINUTE TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' hour to minute to hour)\",\n        \"7-0\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6 3' day to hour to day)\",\n        \"7 00\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to month)\",\n        \"102-07\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to quarter)\",\n        \"102-10\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-1' year to month to century)\",\n        \"201\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '1004-1' year to month to millennium)\",\n        \"2001-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"floor(cast(null as interval year))\");\n  }\n","date":"2016-06-05 12:35:29","endLine":5025,"groupId":"1330","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloorFuncInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/0e2f3893be66f7bf78ffd13248273eede1565b.src","preCode":"  @Test public void testFloorFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"floor(interval '3:4:5' hour to second)\",\n        \"+3:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '5-1' year to month)\",\n        \"+5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-5-1' year to month)\",\n        \"-6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second to second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' minute to second to minute)\",\n        \"-7-0\",\n        \"INTERVAL MINUTE TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' hour to minute to hour)\",\n        \"7-0\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6 3' day to hour to day)\",\n        \"7 00\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to month)\",\n        \"102-07\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to quarter)\",\n        \"102-10\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-1' year to month to century)\",\n        \"201\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '1004-1' year to month to millennium)\",\n        \"2001-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"floor(cast(null as interval year))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4971,"status":"N"}],"commitId":"ccad6f982fc0d6bd45424e602ec0432a1bcecda7","commitMessage":"@@@[CALCITE-2496] Return 0 in case of extract(milli/micro/nanosecond from datel) (Sergey Nuyanzin.  Chunwei Lei)\n","date":"2019-07-30 10:24:45","modifiedFileCount":"2","status":"M","submitter":"Chunwei Lei"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(millisecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(microsecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(nanosecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(isodow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":7328,"groupId":"10811","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtractIntervalYearMonth","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testExtractIntervalYearMonth() {\n    tester.setFor(\n        SqlStdOperatorTable.EXTRACT,\n        VM_FENNEL,\n        VM_JAVA);\n\n    if (TODO) {\n      \r\n      \r\n\n      tester.checkScalar(\n          \"extract(epoch from interval '4-2' year to month)\",\n          \r\n          \r\n          \"131328000\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(second from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(millisecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(microsecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(nanosecond from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(minute from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(hour from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n\n      tester.checkScalar(\n          \"extract(day from interval '4-2' year to month)\",\n          \"0\",\n          \"BIGINT NOT NULL\");\n    }\n\n    \r\n    \r\n    tester.checkFails(\"^extract(doy from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(dow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(week from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n    tester.checkFails(\"^extract(isodow from interval '4-2' year to month)^\",\n        INVALID_EXTRACT_UNIT_VALIDATION_ERROR, false);\n\n    tester.checkScalar(\n        \"extract(month from interval '4-2' year to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(quarter from interval '4-2' year to month)\",\n        \"1\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(year from interval '4-2' year to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(decade from interval '426-3' year(3) to month)\",\n        \"42\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(century from interval '426-3' year(3) to month)\",\n        \"4\",\n        \"BIGINT NOT NULL\");\n\n    tester.checkScalar(\n        \"extract(millennium from interval '2005-3' year(4) to month)\",\n        \"2\",\n        \"BIGINT NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":7235,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testFloorFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"floor(interval '3:4:5' hour to second)\",\n        \"+3:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '5-1' year to month)\",\n        \"+5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-5-1' year to month)\",\n        \"-6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second to second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' minute to second to minute)\",\n        \"-7-0\",\n        \"INTERVAL MINUTE TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' hour to minute to hour)\",\n        \"7-0\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6 3' day to hour to day)\",\n        \"7 00\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to month)\",\n        \"102-07\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to quarter)\",\n        \"102-10\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-1' year to month to century)\",\n        \"201\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '1004-1' year to month to millennium)\",\n        \"2001-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"floor(cast(null as interval year))\");\n  }\n","date":"2020-04-06 04:57:49","endLine":8132,"groupId":"10811","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloorFuncInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testFloorFuncInterval() {\n    if (!enable) {\n      return;\n    }\n    tester.checkScalar(\n        \"floor(interval '3:4:5' hour to second)\",\n        \"+3:00:00.000000\",\n        \"INTERVAL HOUR TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '5-1' year to month)\",\n        \"+5-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-5-1' year to month)\",\n        \"-6-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '-6.3' second to second)\",\n        \"-7.000000\",\n        \"INTERVAL SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' minute to second to minute)\",\n        \"-7-0\",\n        \"INTERVAL MINUTE TO SECOND NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6-3' hour to minute to hour)\",\n        \"7-0\",\n        \"INTERVAL HOUR TO MINUTE NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '6 3' day to hour to day)\",\n        \"7 00\",\n        \"INTERVAL DAY TO HOUR NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to month)\",\n        \"102-07\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-7' year to month to quarter)\",\n        \"102-10\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '102-1' year to month to century)\",\n        \"201\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkScalar(\n        \"floor(interval '1004-1' year to month to millennium)\",\n        \"2001-00\",\n        \"INTERVAL YEAR TO MONTH NOT NULL\");\n    tester.checkNull(\n        \"floor(cast(null as interval year))\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8078,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
