[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    WhileStatement that = (WhileStatement) o;\n\n    if (!body.equals(that.body)) {\n      return false;\n    }\n    if (!condition.equals(that.condition)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":70,"groupId":"13375","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bd/f772a4497e7e3fe37c046f5b786590096a157c.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    WhileStatement that = (WhileStatement) o;\n\n    if (!body.equals(that.body)) {\n      return false;\n    }\n    if (!condition.equals(that.condition)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    ConditionalStatement that = (ConditionalStatement) o;\n\n    if (!expressionList.equals(that.expressionList)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":91,"groupId":"13375","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4e/51e3e3de6939dd8404dff4cf7b64edecdc091e.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    ConditionalStatement that = (ConditionalStatement) o;\n\n    if (!expressionList.equals(that.expressionList)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    WhileStatement that = (WhileStatement) o;\n\n    if (!body.equals(that.body)) {\n      return false;\n    }\n    if (!condition.equals(that.condition)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 10:22:06","endLine":67,"groupId":"13375","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b2/b1eec98f9c1caa7e29a1e031d873d914f983f7.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    WhileStatement that = (WhileStatement) o;\n\n    if (!body.equals(that.body)) {\n      return false;\n    }\n    if (!condition.equals(that.condition)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    ConditionalStatement that = (ConditionalStatement) o;\n\n    if (!expressionList.equals(that.expressionList)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 10:22:06","endLine":88,"groupId":"13375","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c2/80dac6a6e8a73bbfe9eb61af77954543665d05.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    ConditionalStatement that = (ConditionalStatement) o;\n\n    if (!expressionList.equals(that.expressionList)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public boolean equals(@Nullable Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    WhileStatement that = (WhileStatement) o;\n\n    if (!body.equals(that.body)) {\n      return false;\n    }\n    if (!condition.equals(that.condition)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":75,"groupId":"10137","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"equals","params":"(@NullableObjecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0d/b9b14584c14eae8324fda87a4580321ac75a7c.src","preCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    WhileStatement that = (WhileStatement) o;\n\n    if (!body.equals(that.body)) {\n      return false;\n    }\n    if (!condition.equals(that.condition)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public boolean equals(@Nullable Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    ConditionalStatement that = (ConditionalStatement) o;\n\n    if (!expressionList.equals(that.expressionList)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":95,"groupId":"10137","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"equals","params":"(@NullableObjecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f8/3a3bbd42fc634156691146d18ca45a444024c8.src","preCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    if (!super.equals(o)) {\n      return false;\n    }\n\n    ConditionalStatement that = (ConditionalStatement) o;\n\n    if (!expressionList.equals(that.expressionList)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
