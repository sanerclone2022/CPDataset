[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public <R> void acceptCall(\n      SqlVisitor<R> visitor,\n      SqlCall call,\n      boolean onlyExpressions,\n      SqlBasicVisitor.ArgHandler<R> argHandler) {\n    if (onlyExpressions) {\n      for (Ord<SqlNode> operand : Ord.zip(call.getOperandList())) {\n        \r\n        \r\n        \r\n        if (operand == null) {\n          continue;\n        }\n        if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n          continue;\n        }\n        argHandler.visitChild(visitor, call, operand.i, operand.e);\n      }\n    } else {\n      super.acceptCall(visitor, call, onlyExpressions, argHandler);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":136,"groupId":"11557","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"acceptCall","params":"(SqlVisitor<R>visitor@SqlCallcall@booleanonlyExpressions@SqlBasicVisitor.ArgHandler<R>argHandler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/7030690d54547f803a32246f1db37e3ae14c42.src","preCode":"  public <R> void acceptCall(\n      SqlVisitor<R> visitor,\n      SqlCall call,\n      boolean onlyExpressions,\n      SqlBasicVisitor.ArgHandler<R> argHandler) {\n    if (onlyExpressions) {\n      for (Ord<SqlNode> operand : Ord.zip(call.getOperandList())) {\n        \r\n        \r\n        \r\n        if (operand == null) {\n          continue;\n        }\n        if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n          continue;\n        }\n        argHandler.visitChild(visitor, call, operand.i, operand.e);\n      }\n    } else {\n      super.acceptCall(visitor, call, onlyExpressions, argHandler);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"    public <R> void acceptCall(\n        SqlVisitor<R> visitor,\n        SqlCall call,\n        boolean onlyExpressions,\n        SqlBasicVisitor.ArgHandler<R> argHandler) {\n      if (onlyExpressions) {\n        final List<SqlNode> operandList = call.getOperandList();\n        for (Ord<SqlNode> operand : Ord.zip(operandList)) {\n          \r\n          \r\n          \r\n          if (operand.e == null) {\n            continue;\n          }\n          if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n            \r\n            continue;\n          }\n          argHandler.visitChild(visitor, call, operand.i, operand.e);\n        }\n      } else {\n        super.acceptCall(visitor, call, onlyExpressions, argHandler);\n      }\n    }\n","date":"2014-11-14 09:39:34","endLine":850,"groupId":"8300","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"acceptCall","params":"(SqlVisitor<R>visitor@SqlCallcall@booleanonlyExpressions@SqlBasicVisitor.ArgHandler<R>argHandler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/eab289cabd96c64fb8cfbdc4f950293cc2df3e.src","preCode":"    public <R> void acceptCall(\n        SqlVisitor<R> visitor,\n        SqlCall call,\n        boolean onlyExpressions,\n        SqlBasicVisitor.ArgHandler<R> argHandler) {\n      if (onlyExpressions) {\n        final List<SqlNode> operandList = call.getOperandList();\n        for (Ord<SqlNode> operand : Ord.zip(operandList)) {\n          \r\n          \r\n          \r\n          if (operand.e == null) {\n            continue;\n          }\n          if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n            \r\n            continue;\n          }\n          argHandler.visitChild(visitor, call, operand.i, operand.e);\n        }\n      } else {\n        super.acceptCall(visitor, call, onlyExpressions, argHandler);\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlWindow.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":827,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-12-14 15:49:02","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public <R> void acceptCall(\n      SqlVisitor<R> visitor,\n      SqlCall call,\n      boolean onlyExpressions,\n      SqlBasicVisitor.ArgHandler<R> argHandler) {\n    if (onlyExpressions) {\n      for (Ord<SqlNode> operand : Ord.zip(call.getOperandList())) {\n        \r\n        \r\n        \r\n        if (operand == null) {\n          continue;\n        }\n        if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n          continue;\n        }\n        argHandler.visitChild(visitor, call, operand.i, operand.e);\n      }\n    } else {\n      super.acceptCall(visitor, call, onlyExpressions, argHandler);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":136,"groupId":"11557","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"acceptCall","params":"(SqlVisitor<R>visitor@SqlCallcall@booleanonlyExpressions@SqlBasicVisitor.ArgHandler<R>argHandler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bc/7030690d54547f803a32246f1db37e3ae14c42.src","preCode":"  public <R> void acceptCall(\n      SqlVisitor<R> visitor,\n      SqlCall call,\n      boolean onlyExpressions,\n      SqlBasicVisitor.ArgHandler<R> argHandler) {\n    if (onlyExpressions) {\n      for (Ord<SqlNode> operand : Ord.zip(call.getOperandList())) {\n        \r\n        \r\n        \r\n        if (operand == null) {\n          continue;\n        }\n        if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n          continue;\n        }\n        argHandler.visitChild(visitor, call, operand.i, operand.e);\n      }\n    } else {\n      super.acceptCall(visitor, call, onlyExpressions, argHandler);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2014-12-14 15:49:02","commitOrder":2,"curCode":"    public <R> void acceptCall(\n        SqlVisitor<R> visitor,\n        SqlCall call,\n        boolean onlyExpressions,\n        SqlBasicVisitor.ArgHandler<R> argHandler) {\n      if (onlyExpressions) {\n        for (Ord<SqlNode> operand : Ord.zip(call.getOperandList())) {\n          \r\n          \r\n          \r\n          if (operand.e == null) {\n            continue;\n          }\n          if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n            \r\n            continue;\n          }\n          argHandler.visitChild(visitor, call, operand.i, operand.e);\n        }\n      } else {\n        super.acceptCall(visitor, call, onlyExpressions, argHandler);\n      }\n    }\n","date":"2015-02-08 16:45:51","endLine":855,"groupId":"8300","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"acceptCall","params":"(SqlVisitor<R>visitor@SqlCallcall@booleanonlyExpressions@SqlBasicVisitor.ArgHandler<R>argHandler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/c6b455bc9d49ffacd3a50be27a5fc2da7cda84.src","preCode":"    public <R> void acceptCall(\n        SqlVisitor<R> visitor,\n        SqlCall call,\n        boolean onlyExpressions,\n        SqlBasicVisitor.ArgHandler<R> argHandler) {\n      if (onlyExpressions) {\n        final List<SqlNode> operandList = call.getOperandList();\n        for (Ord<SqlNode> operand : Ord.zip(operandList)) {\n          \r\n          \r\n          \r\n          if (operand.e == null) {\n            continue;\n          }\n          if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n            \r\n            continue;\n          }\n          argHandler.visitChild(visitor, call, operand.i, operand.e);\n        }\n      } else {\n        super.acceptCall(visitor, call, onlyExpressions, argHandler);\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlWindow.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":833,"status":"M"}],"commitId":"2709896eb176c14605b1ddc4be57d916ebeb0fe8","commitMessage":"@@@[CALCITE-88] Add collation as a trait and a kind of RelNode metadata\n\n[CALCITE-526] Add EnumerableMergeJoin.  which exploits sorted inputs\n\n[CALCITE-71] Provide a way to declare that tables are sorted\n\n[CALCITE-576] Make RelCollation trait and AbstractRelNode.getCollationList consistent\n\n[CALCITE-581] Add LogicalSort relational expression.  and make Sort abstract\n\n[CALCITE-254] Propagate RelCollation on aliased columns in JoinRule\n\n[CALCITE-569] ArrayIndexOutOfBoundsException when deducing collation\n\nMore efficient algorithm to check for cycles in the tree of equivalence sets.\n\nFilterJoinRule now propagates traits.\n\nOrd.zip returns random-access list.\n\nReplace references to \"Bug#upgrade\" with \"Deprecated // to be removed before ...\"\n\nAdd composite traits (RelCompositeTrait); subsets only ever have a simple trait.  but other RelNodes can have multiple traits.  and appear in each subset that those traits. Each composite trait is canonized within its trait definition.  and each of the component traits.\n\nRename RelTraitSet.subsumes and RelTrait.subsumes to satisfies.\n","date":"2015-02-08 16:45:51","modifiedFileCount":"128","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public <R> void acceptCall(\n      SqlVisitor<R> visitor,\n      SqlCall call,\n      boolean onlyExpressions,\n      SqlBasicVisitor.ArgHandler<R> argHandler) {\n    if (onlyExpressions) {\n      for (Ord<SqlNode> operand : Ord.zip(call.getOperandList())) {\n        \r\n        \r\n        \r\n        if (operand == null) {\n          continue;\n        }\n        if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n          continue;\n        }\n        argHandler.visitChild(visitor, call, operand.i, operand.e);\n      }\n    } else {\n      super.acceptCall(visitor, call, onlyExpressions, argHandler);\n    }\n  }\n","date":"2020-10-07 05:42:47","endLine":146,"groupId":"101750","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"acceptCall","params":"(SqlVisitor<R>visitor@SqlCallcall@booleanonlyExpressions@SqlBasicVisitor.ArgHandler<R>argHandler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/68/f46eee02844fb05b494695baa55a4ccf351114.src","preCode":"  public <R> void acceptCall(\n      SqlVisitor<R> visitor,\n      SqlCall call,\n      boolean onlyExpressions,\n      SqlBasicVisitor.ArgHandler<R> argHandler) {\n    if (onlyExpressions) {\n      for (Ord<SqlNode> operand : Ord.zip(call.getOperandList())) {\n        \r\n        \r\n        \r\n        if (operand == null) {\n          continue;\n        }\n        if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n          continue;\n        }\n        argHandler.visitChild(visitor, call, operand.i, operand.e);\n      }\n    } else {\n      super.acceptCall(visitor, call, onlyExpressions, argHandler);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"    @Override public <R> void acceptCall(\n        SqlVisitor<R> visitor,\n        SqlCall call,\n        boolean onlyExpressions,\n        SqlBasicVisitor.ArgHandler<R> argHandler) {\n      if (onlyExpressions) {\n        for (Ord<SqlNode> operand : Ord.zip(call.getOperandList())) {\n          \r\n          \r\n          \r\n          if (operand.e == null) {\n            continue;\n          }\n          if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n            \r\n            continue;\n          }\n          argHandler.visitChild(visitor, call, operand.i, operand.e);\n        }\n      } else {\n        super.acceptCall(visitor, call, onlyExpressions, argHandler);\n      }\n    }\n","date":"2020-10-07 05:42:47","endLine":850,"groupId":"101750","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"acceptCall","params":"(SqlVisitor<R>visitor@SqlCallcall@booleanonlyExpressions@SqlBasicVisitor.ArgHandler<R>argHandler)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/88/223aaed5ffbb1333b688de585f6e9d48a795d0.src","preCode":"    public <R> void acceptCall(\n        SqlVisitor<R> visitor,\n        SqlCall call,\n        boolean onlyExpressions,\n        SqlBasicVisitor.ArgHandler<R> argHandler) {\n      if (onlyExpressions) {\n        for (Ord<SqlNode> operand : Ord.zip(call.getOperandList())) {\n          \r\n          \r\n          \r\n          if (operand.e == null) {\n            continue;\n          }\n          if (operand.i == 1 && operand.e instanceof SqlIdentifier) {\n            \r\n            continue;\n          }\n          argHandler.visitChild(visitor, call, operand.i, operand.e);\n        }\n      } else {\n        super.acceptCall(visitor, call, onlyExpressions, argHandler);\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlWindow.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":828,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
