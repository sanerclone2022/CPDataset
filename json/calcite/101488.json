[{"authorTime":"2020-06-07 17:00:39","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testCollationContains() {\n    final RelCollation collation21 =\n        RelCollations.of(\n            new RelFieldCollation(2, RelFieldCollation.Direction.ASCENDING),\n            new RelFieldCollation(1, RelFieldCollation.Direction.DESCENDING));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2)), is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(0)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 0)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 3)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList()),\n        is(true));\n\n    \r\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 2)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1, 2, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 2)),\n        is(true));\n\n    final RelCollation collation1 =\n        RelCollations.of(\n            new RelFieldCollation(1, RelFieldCollation.Direction.DESCENDING));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(1, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(2, 2)),\n        is(false));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(1, 2, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation1, Arrays.asList()),\n        is(true));\n  }\n","date":"2020-04-06 04:57:49","endLine":77,"groupId":"6558","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCollationContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/989099562342e71112e3c9961830a42e88b0fe.src","preCode":"  @Test void testCollationContains() {\n    final RelCollation collation21 =\n        RelCollations.of(\n            new RelFieldCollation(2, RelFieldCollation.Direction.ASCENDING),\n            new RelFieldCollation(1, RelFieldCollation.Direction.DESCENDING));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2)), is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(0)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 0)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 3)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList()),\n        is(true));\n\n    \r\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 2)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1, 2, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 2)),\n        is(true));\n\n    final RelCollation collation1 =\n        RelCollations.of(\n            new RelFieldCollation(1, RelFieldCollation.Direction.DESCENDING));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(1, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(2, 2)),\n        is(false));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(1, 2, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation1, Arrays.asList()),\n        is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/RelCollationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"NB"},{"authorDate":"2020-06-07 17:00:39","commitOrder":5,"curCode":"  @Test void testCollationsContainKeysOrderless() {\n    final List<RelCollation> collations = Lists.newArrayList(collation(2, 3, 1));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 2)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 3)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2, 1)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2, 1, 0)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 3, 0)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(1)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 1)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(0)), is(false));\n  }\n","date":"2020-09-01 16:13:36","endLine":117,"groupId":"16029","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCollationsContainKeysOrderless","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/3b2bd3817adfbc9a8cf7f0815ad8292ec2db23.src","preCode":"  @Test void testCollationsContainKeysOrderless() {\n    final List<RelCollation> collations = Lists.newArrayList(collation(2, 3, 1));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 2)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 3)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2, 1)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2, 1, 0)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 3, 0)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(1)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 1)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(0)), is(false));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/RelCollationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"88d18185e6177c9df587bdd23dd4049f59adc2e4","commitMessage":"@@@[CALCITE-4015] Pass through parent collation request on subset or superset of join keys for EnumerableMergeJoin.\n\nCollations can pass through even when required collations are subset or superset on join keys.\n\nFor subset case.  collations must be extended to make sure join keys are all sorted. Collations must be the prefix of sort keys.\n\nFor superset case.  collations must be either all defined on left join input.  or right join input. Collations must be prefix of join keys. All collations can be pushed down to the side on which collations are fully defiend. Only collations that are defined on join keys can be pushed down to another side.\n","date":"2020-09-01 16:13:36","modifiedFileCount":"5","status":"M","submitter":"amaliujia"},{"authorTime":"2020-06-07 17:00:39","codes":[{"authorDate":"2020-10-26 10:17:52","commitOrder":6,"curCode":"  @Test void testCollationContains() {\n    final RelCollation collation21 =\n        RelCollations.of(\n            new RelFieldCollation(2, ASCENDING),\n            new RelFieldCollation(1, DESCENDING));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2)), is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(0)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 0)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 3)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList()),\n        is(true));\n\n    \r\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 2)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1, 2, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 2)),\n        is(true));\n\n    final RelCollation collation1 =\n        RelCollations.of(\n            new RelFieldCollation(1, DESCENDING));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(1, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(2, 2)),\n        is(false));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(1, 2, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation1, Arrays.asList()),\n        is(true));\n  }\n","date":"2020-11-03 10:30:34","endLine":90,"groupId":"101488","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCollationContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/58/bf0b637466d6e0c20b813317d674cdf3b3380d.src","preCode":"  @Test void testCollationContains() {\n    final RelCollation collation21 =\n        RelCollations.of(\n            new RelFieldCollation(2, RelFieldCollation.Direction.ASCENDING),\n            new RelFieldCollation(1, RelFieldCollation.Direction.DESCENDING));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2)), is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(0)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 0)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 3)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList()),\n        is(true));\n\n    \r\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 2)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 1, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1, 2, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(1, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation21, Arrays.asList(2, 2)),\n        is(true));\n\n    final RelCollation collation1 =\n        RelCollations.of(\n            new RelFieldCollation(1, RelFieldCollation.Direction.DESCENDING));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(1, 1)),\n        is(true));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(2, 2)),\n        is(false));\n    assertThat(RelCollations.contains(collation1, Arrays.asList(1, 2, 1)),\n        is(false));\n    assertThat(RelCollations.contains(collation1, Arrays.asList()),\n        is(true));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/RelCollationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-06-07 17:00:39","commitOrder":6,"curCode":"  @Test void testCollationsContainKeysOrderless() {\n    final List<RelCollation> collations = Lists.newArrayList(collation(2, 3, 1));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 2)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 3)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2, 1)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2, 1, 0)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 3, 0)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(1)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 1)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(0)), is(false));\n  }\n","date":"2020-09-01 16:13:36","endLine":117,"groupId":"101488","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCollationsContainKeysOrderless","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/3b2bd3817adfbc9a8cf7f0815ad8292ec2db23.src","preCode":"  @Test void testCollationsContainKeysOrderless() {\n    final List<RelCollation> collations = Lists.newArrayList(collation(2, 3, 1));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 2)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 3)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2, 1)), is(true));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 2, 1, 0)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(2, 3, 0)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(1)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(3, 1)), is(false));\n    assertThat(\n        RelCollations.collationsContainKeysOrderless(\n        collations, Arrays.asList(0)), is(false));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/RelCollationTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"c19da85b32f17fd78ff2fb03298ef66675c1705c","commitMessage":"@@@[CALCITE-4350] The reverse operation of collation direction is overly relaxed (Liya Fan)\n","date":"2020-11-03 10:30:34","modifiedFileCount":"2","status":"M","submitter":"liyafan82"}]
