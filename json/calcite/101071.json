[{"authorTime":"2019-03-07 00:34:42","codes":[{"authorDate":"2019-03-05 18:35:24","commitOrder":2,"curCode":"  public void testJsonLength() {\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, null),\n        nullValue());\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, \"bar\"),\n        is(1));\n  }\n","date":"2019-03-28 10:55:53","endLine":515,"groupId":"3169","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonLength","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9d/b52eea707c366dcfb184de4773cbb3fe8f8587.src","preCode":"  public void testJsonLength() {\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, null),\n        nullValue());\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, \"bar\"),\n        is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":498,"status":"NB"},{"authorDate":"2019-03-07 00:34:42","commitOrder":2,"curCode":"  public void testJsonKeys() {\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, null),\n        is(\"null\"));\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, \"bar\"),\n        is(\"null\"));\n  }\n","date":"2019-04-03 10:08:57","endLine":534,"groupId":"3169","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/9ca4362589cd49cee203c96e23aff2e51af11e.src","preCode":"  public void testJsonKeys() {\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, null),\n        is(\"null\"));\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, \"bar\"),\n        is(\"null\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"B"}],"commitId":"80dc5bcb3efa9c72573c4cc5b02f512d34c20d13","commitMessage":"@@@[CALCITE-2892] Add the JSON_KEYS function (xuqianjin)\n\nClose apache/calcite#1086\n","date":"2019-04-03 10:08:57","modifiedFileCount":"15","status":"M","submitter":"XuQianJin-Stars"},{"authorTime":"2019-04-25 02:17:35","codes":[{"authorDate":"2019-04-25 02:17:35","commitOrder":3,"curCode":"  public void testJsonLength() {\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        nullValue());\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(1));\n  }\n","date":"2019-05-15 12:57:37","endLine":513,"groupId":"3169","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonLength","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/31/26ff137bebe0a007e9c1f5df38f44caf47e343.src","preCode":"  public void testJsonLength() {\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, null),\n        nullValue());\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, \"bar\"),\n        is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"M"},{"authorDate":"2019-04-25 02:17:35","commitOrder":3,"curCode":"  public void testJsonKeys() {\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(\"null\"));\n  }\n","date":"2019-05-15 12:57:37","endLine":532,"groupId":"3169","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/31/26ff137bebe0a007e9c1f5df38f44caf47e343.src","preCode":"  public void testJsonKeys() {\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, null),\n        is(\"null\"));\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        SqlFunctions.PathContext\n            .withReturned(SqlFunctions.PathMode.LAX, \"bar\"),\n        is(\"null\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"M"}],"commitId":"e98c779d1ec0bc87c81a72b974c89a41a7222a07","commitMessage":"@@@[CALCITE-3017] Improve null handling of JsonValueExpressionOperator\n\n* Remove SqlJsonApiCommonSyntaxOperator;\n* Move implementation methods of JSON functions from SqlFunctions to JsonFunctions;\n* Add new null policy NullPolicy.ARG0 (currently used by some JSON functions only);\n* Change return type to nullable for some operators of JSON functions;\n* In code generation.  perform regular null semantic check on operands of a call when NullAs.IS_NULL/IS_NOT_NULL is used.\n","date":"2019-05-15 12:57:37","modifiedFileCount":"18","status":"M","submitter":"Hongze Zhang"},{"authorTime":"2019-05-23 15:53:05","codes":[{"authorDate":"2019-05-23 15:53:05","commitOrder":4,"curCode":"  @Test public void testJsonLength() {\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        nullValue());\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(1));\n  }\n","date":"2019-05-23 17:09:22","endLine":501,"groupId":"3169","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonLength","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/15/1f069fcccc6b013f46147a64a3e44fd8b474b5.src","preCode":"  public void testJsonLength() {\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        nullValue());\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"M"},{"authorDate":"2019-05-23 15:53:05","commitOrder":4,"curCode":"  @Test public void testJsonKeys() {\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(\"null\"));\n  }\n","date":"2019-05-23 17:09:22","endLine":520,"groupId":"3169","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/15/1f069fcccc6b013f46147a64a3e44fd8b474b5.src","preCode":"  public void testJsonKeys() {\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(\"null\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"M"}],"commitId":"b42029fd46958ddf4d62a29182a2dbee66c1adef","commitMessage":"@@@[CALCITE-2985] Implement JSON_STORAGE_SIZE function (xuqianjin)\n\nAlso.  correct content about error handling of MySQL JSON functions in documentation.\n\nClose apache/calcite#1150\n","date":"2019-05-23 17:09:22","modifiedFileCount":"12","status":"M","submitter":"XuQianJin-Stars"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testJsonLength() {\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        nullValue());\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(1));\n  }\n","date":"2020-04-06 04:57:49","endLine":501,"groupId":"101071","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJsonLength","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/11d274e48c05e5ed98d0940821c2c1252f531d.src","preCode":"  @Test public void testJsonLength() {\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        nullValue());\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(1));\n    assertJsonLength(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(1));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testJsonKeys() {\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(\"null\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":520,"groupId":"101071","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/11d274e48c05e5ed98d0940821c2c1252f531d.src","preCode":"  @Test public void testJsonKeys() {\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, null),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.STRICT, Collections.singletonList(\"bar\")),\n        is(\"null\"));\n    assertJsonKeys(\n        JsonFunctions.JsonPathContext\n            .withJavaObj(JsonFunctions.PathMode.LAX, \"bar\"),\n        is(\"null\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
