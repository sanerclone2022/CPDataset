[{"authorTime":"2019-08-29 11:06:25","codes":[{"authorDate":"2019-08-29 11:06:25","commitOrder":1,"curCode":"  @Test public void testOverWithoutPartition() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(), ImmutableList.of(\"DEPTNO\"));\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER (ORDER BY $7 NULLS LAST ROWS\"\n        + \" BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2019-11-04 12:58:07","endLine":704,"groupId":"2819","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverWithoutPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c0/324fad78c1c600f97c11b717cf558a51d9e431.src","preCode":"  @Test public void testOverWithoutPartition() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(), ImmutableList.of(\"DEPTNO\"));\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER (ORDER BY $7 NULLS LAST ROWS\"\n        + \" BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":693,"status":"B"},{"authorDate":"2019-08-29 11:06:25","commitOrder":1,"curCode":"  @Test public void testOverWithoutOrderKey() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(\"DEPTNO\"), ImmutableList.of());\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER\"\n        + \" (PARTITION BY $7 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2019-11-04 12:58:07","endLine":717,"groupId":"7043","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverWithoutOrderKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c0/324fad78c1c600f97c11b717cf558a51d9e431.src","preCode":"  @Test public void testOverWithoutOrderKey() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(\"DEPTNO\"), ImmutableList.of());\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER\"\n        + \" (PARTITION BY $7 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"B"}],"commitId":"9dd4e124adb20b4d073afb6902ac4bb3bfc3ed09","commitMessage":"@@@[CALCITE-3254] Exception while deserializing with interval type or with empty partition/order key for RexOver (Wang Yanlin)\n\n Changes:\n  add check for INTERVAL_TYPES\n  add check for the empty case of partition key or order key when deserialize RexOver\n","date":"2019-11-04 12:58:07","modifiedFileCount":"2","status":"B","submitter":"yanzhi"},{"authorTime":"2020-03-26 09:32:45","codes":[{"authorDate":"2020-03-26 09:32:45","commitOrder":2,"curCode":"  @Test public void testOverWithoutPartition() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(), ImmutableList.of(\"DEPTNO\"));\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER (ORDER BY $7 NULLS LAST \"\n        + \"ROWS UNBOUNDED PRECEDING)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2020-04-06 04:53:38","endLine":739,"groupId":"2819","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverWithoutPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/2832fabe41ff6a42f08eeda4433ed9b0cfce81.src","preCode":"  @Test public void testOverWithoutPartition() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(), ImmutableList.of(\"DEPTNO\"));\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER (ORDER BY $7 NULLS LAST ROWS\"\n        + \" BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"},{"authorDate":"2020-03-26 09:32:45","commitOrder":2,"curCode":"  @Test public void testOverWithoutOrderKey() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(\"DEPTNO\"), ImmutableList.of());\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER (PARTITION BY $7)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2020-04-06 04:53:38","endLine":751,"groupId":"7043","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverWithoutOrderKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/2832fabe41ff6a42f08eeda4433ed9b0cfce81.src","preCode":"  @Test public void testOverWithoutOrderKey() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(\"DEPTNO\"), ImmutableList.of());\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER\"\n        + \" (PARTITION BY $7 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":741,"status":"M"}],"commitId":"ddda872b4922266c102f474042b4df27ba9a09be","commitMessage":"@@@[CALCITE-3877] In RexWindow.  make fields upperBound and lowerBound not-nullable\n\nWhere you would previously have supplied null to RexBuilder.makeOver. \nnow supply RexWindowBounds.UNBOUNDED_PRECEDING. \nRexWindowBounds.UNBOUNDED_FOLLOWING.  or RexWindowBounds.CURRENT_ROW.\n\nMove RexWindowBound.create into new class RexWindowBounds.  with methods\nand constants for the various types of bound.\n\nDon't keep SqlNode inside RexWindowBound objects.\n\nDuring validation.  don't mutate the lowerBound and upperBound fields in\nSqlWindow.\n\nNote that \"RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\" is not\nequivalent to \"ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\".\n\"RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\"\n(that is.  not bracket) is equivalent to\n\"ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\". \nbut we require RANGE.  to keep things canonical.\n\nClose apache/calcite#1896\n","date":"2020-04-06 04:53:38","modifiedFileCount":"22","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testOverWithoutPartition() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(), ImmutableList.of(\"DEPTNO\"));\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER (ORDER BY $7 NULLS LAST \"\n        + \"ROWS UNBOUNDED PRECEDING)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":739,"groupId":"101446","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverWithoutPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/9753fd8857c7f47fc20212946c9a27afb27294.src","preCode":"  @Test public void testOverWithoutPartition() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(), ImmutableList.of(\"DEPTNO\"));\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER (ORDER BY $7 NULLS LAST \"\n        + \"ROWS UNBOUNDED PRECEDING)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testOverWithoutOrderKey() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(\"DEPTNO\"), ImmutableList.of());\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER (PARTITION BY $7)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":751,"groupId":"101446","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverWithoutOrderKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/9753fd8857c7f47fc20212946c9a27afb27294.src","preCode":"  @Test public void testOverWithoutOrderKey() {\n    \r\n    final RelNode rel = mockCountOver(\"EMP\", ImmutableList.of(\"DEPTNO\"), ImmutableList.of());\n    String relJson = RelOptUtil.dumpPlan(\"\", rel, SqlExplainFormat.JSON,\n        SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n    String s = deserializeAndDumpToTextFormat(getSchema(rel), relJson);\n    final String expected = \"\"\n        + \"LogicalProject($f0=[COUNT() OVER (PARTITION BY $7)])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(s, isLinux(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/plan/RelWriterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":741,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
