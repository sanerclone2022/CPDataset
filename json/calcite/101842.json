[{"authorTime":"2020-07-26 11:16:14","codes":[{"authorDate":"2019-08-04 15:52:20","commitOrder":3,"curCode":"  public SqlCall createCall(\n      SqlLiteral functionQualifier,\n      SqlParserPos pos,\n      SqlNode... operands) {\n    assert functionQualifier == null;\n    return new SqlSelect(pos,\n        (SqlNodeList) operands[0],\n        (SqlNodeList) operands[1],\n        operands[2],\n        operands[3],\n        (SqlNodeList) operands[4],\n        operands[5],\n        (SqlNodeList) operands[6],\n        (SqlNodeList) operands[7],\n        operands[8],\n        operands[9],\n        (SqlNodeList) operands[10]);\n  }\n","date":"2019-11-12 10:21:39","endLine":76,"groupId":"11011","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(SqlLiteralfunctionQualifier@SqlParserPospos@SqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/6eeec4abf8b075673954768997262d827bead4.src","preCode":"  public SqlCall createCall(\n      SqlLiteral functionQualifier,\n      SqlParserPos pos,\n      SqlNode... operands) {\n    assert functionQualifier == null;\n    return new SqlSelect(pos,\n        (SqlNodeList) operands[0],\n        (SqlNodeList) operands[1],\n        operands[2],\n        operands[3],\n        (SqlNodeList) operands[4],\n        operands[5],\n        (SqlNodeList) operands[6],\n        (SqlNodeList) operands[7],\n        operands[8],\n        operands[9],\n        (SqlNodeList) operands[10]);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"NB"},{"authorDate":"2020-07-26 11:16:14","commitOrder":3,"curCode":"      new SqlSpecialOperator(\"INSERT\", SqlKind.INSERT) {\n        @Override public SqlCall createCall(SqlLiteral functionQualifier, SqlParserPos pos,\n            SqlNode... operands) {\n          return new SqlInsert(\n              pos,\n              (SqlNodeList) operands[0],\n              operands[1],\n              operands[2],\n              (SqlNodeList) operands[3]);\n        }\n      };\n","date":"2020-07-27 11:33:01","endLine":42,"groupId":"7086","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"OPERATOR","params":"(\"INSERT\"@SqlKind.INSERT)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/2d0ceb41fc6deff625f5bb5595ef565d23b111.src","preCode":"      new SqlSpecialOperator(\"INSERT\", SqlKind.INSERT) {\n        @Override public SqlCall createCall(SqlLiteral functionQualifier, SqlParserPos pos,\n            SqlNode... operands) {\n          return new SqlInsert(\n              pos,\n              (SqlNodeList) operands[0],\n              operands[1],\n              operands[2],\n              (SqlNodeList) operands[3]);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlInsert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"B"}],"commitId":"8a459d9b17a9403e4e1539ea1c3c8d8f39e30a12","commitMessage":"@@@[CALCITE-4022] Support unparse special syntax for INSERT (Xu Zhaohui)\n\nclose apache/calcite#2082\n","date":"2020-07-27 11:33:01","modifiedFileCount":"2","status":"M","submitter":"xzh"},{"authorTime":"2020-07-26 11:16:14","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override public SqlCall createCall(\n      SqlLiteral functionQualifier,\n      SqlParserPos pos,\n      SqlNode... operands) {\n    assert functionQualifier == null;\n    return new SqlSelect(pos,\n        (SqlNodeList) operands[0],\n        (SqlNodeList) operands[1],\n        operands[2],\n        operands[3],\n        (SqlNodeList) operands[4],\n        operands[5],\n        (SqlNodeList) operands[6],\n        (SqlNodeList) operands[7],\n        operands[8],\n        operands[9],\n        (SqlNodeList) operands[10]);\n  }\n","date":"2020-10-07 05:42:47","endLine":77,"groupId":"11011","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(SqlLiteralfunctionQualifier@SqlParserPospos@SqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/56/d7578406621d775efd2006c464d8571f93a068.src","preCode":"  public SqlCall createCall(\n      SqlLiteral functionQualifier,\n      SqlParserPos pos,\n      SqlNode... operands) {\n    assert functionQualifier == null;\n    return new SqlSelect(pos,\n        (SqlNodeList) operands[0],\n        (SqlNodeList) operands[1],\n        operands[2],\n        operands[3],\n        (SqlNodeList) operands[4],\n        operands[5],\n        (SqlNodeList) operands[6],\n        (SqlNodeList) operands[7],\n        operands[8],\n        operands[9],\n        (SqlNodeList) operands[10]);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-07-26 11:16:14","commitOrder":4,"curCode":"      new SqlSpecialOperator(\"INSERT\", SqlKind.INSERT) {\n        @Override public SqlCall createCall(SqlLiteral functionQualifier, SqlParserPos pos,\n            SqlNode... operands) {\n          return new SqlInsert(\n              pos,\n              (SqlNodeList) operands[0],\n              operands[1],\n              operands[2],\n              (SqlNodeList) operands[3]);\n        }\n      };\n","date":"2020-07-27 11:33:01","endLine":42,"groupId":"7086","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"OPERATOR","params":"(\"INSERT\"@SqlKind.INSERT)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/2d0ceb41fc6deff625f5bb5595ef565d23b111.src","preCode":"      new SqlSpecialOperator(\"INSERT\", SqlKind.INSERT) {\n        @Override public SqlCall createCall(SqlLiteral functionQualifier, SqlParserPos pos,\n            SqlNode... operands) {\n          return new SqlInsert(\n              pos,\n              (SqlNodeList) operands[0],\n              operands[1],\n              operands[2],\n              (SqlNodeList) operands[3]);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlInsert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"N"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override public SqlCall createCall(\n      @Nullable SqlLiteral functionQualifier,\n      SqlParserPos pos,\n      @Nullable SqlNode... operands) {\n    assert functionQualifier == null;\n    return new SqlSelect(pos,\n        (SqlNodeList) operands[0],\n        (SqlNodeList) operands[1],\n        operands[2],\n        operands[3],\n        (SqlNodeList) operands[4],\n        operands[5],\n        (SqlNodeList) operands[6],\n        (SqlNodeList) operands[7],\n        operands[8],\n        operands[9],\n        (SqlNodeList) operands[10]);\n  }\n","date":"2020-11-30 06:45:33","endLine":81,"groupId":"11011","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createCall","params":"(@NullableSqlLiteralfunctionQualifier@SqlParserPospos@@NullableSqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/4fe8515db2d9b0690d40be837f9e29dd61a90b.src","preCode":"  @Override public SqlCall createCall(\n      SqlLiteral functionQualifier,\n      SqlParserPos pos,\n      SqlNode... operands) {\n    assert functionQualifier == null;\n    return new SqlSelect(pos,\n        (SqlNodeList) operands[0],\n        (SqlNodeList) operands[1],\n        operands[2],\n        operands[3],\n        (SqlNodeList) operands[4],\n        operands[5],\n        (SqlNodeList) operands[6],\n        (SqlNodeList) operands[7],\n        operands[8],\n        operands[9],\n        (SqlNodeList) operands[10]);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"      new SqlSpecialOperator(\"INSERT\", SqlKind.INSERT) {\n        @SuppressWarnings(\"argument.type.incompatible\")\n        @Override public SqlCall createCall(@Nullable SqlLiteral functionQualifier,\n            SqlParserPos pos,\n            @Nullable SqlNode... operands) {\n          return new SqlInsert(\n              pos,\n              (SqlNodeList) operands[0],\n              operands[1],\n              operands[2],\n              (SqlNodeList) operands[3]);\n        }\n      };\n","date":"2020-11-30 06:45:33","endLine":47,"groupId":"7086","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"OPERATOR","params":"(\"INSERT\"@SqlKind.INSERT)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/69/9298b0ff777180de15fa4136fc73a535089f37.src","preCode":"      new SqlSpecialOperator(\"INSERT\", SqlKind.INSERT) {\n        @Override public SqlCall createCall(SqlLiteral functionQualifier, SqlParserPos pos,\n            SqlNode... operands) {\n          return new SqlInsert(\n              pos,\n              (SqlNodeList) operands[0],\n              operands[1],\n              operands[2],\n              (SqlNodeList) operands[3]);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlInsert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2021-03-06 01:37:57","commitOrder":6,"curCode":"  @Override public SqlCall createCall(\n      @Nullable SqlLiteral functionQualifier,\n      SqlParserPos pos,\n      @Nullable SqlNode... operands) {\n    assert functionQualifier == null;\n    return new SqlSelect(pos,\n        (SqlNodeList) operands[0],\n        requireNonNull((SqlNodeList) operands[1], \"selectList\"),\n        operands[2],\n        operands[3],\n        (SqlNodeList) operands[4],\n        operands[5],\n        (SqlNodeList) operands[6],\n        (SqlNodeList) operands[7],\n        operands[8],\n        operands[9],\n        (SqlNodeList) operands[10]);\n  }\n","date":"2021-03-13 15:05:43","endLine":83,"groupId":"101842","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"createCall","params":"(@NullableSqlLiteralfunctionQualifier@SqlParserPospos@@NullableSqlNode...operands)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/59/025647cbf5ff99707438dc7b4c68807699881f.src","preCode":"  @Override public SqlCall createCall(\n      @Nullable SqlLiteral functionQualifier,\n      SqlParserPos pos,\n      @Nullable SqlNode... operands) {\n    assert functionQualifier == null;\n    return new SqlSelect(pos,\n        (SqlNodeList) operands[0],\n        (SqlNodeList) operands[1],\n        operands[2],\n        operands[3],\n        (SqlNodeList) operands[4],\n        operands[5],\n        (SqlNodeList) operands[6],\n        (SqlNodeList) operands[7],\n        operands[8],\n        operands[9],\n        (SqlNodeList) operands[10]);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"      new SqlSpecialOperator(\"INSERT\", SqlKind.INSERT) {\n        @SuppressWarnings(\"argument.type.incompatible\")\n        @Override public SqlCall createCall(@Nullable SqlLiteral functionQualifier,\n            SqlParserPos pos,\n            @Nullable SqlNode... operands) {\n          return new SqlInsert(\n              pos,\n              (SqlNodeList) operands[0],\n              operands[1],\n              operands[2],\n              (SqlNodeList) operands[3]);\n        }\n      };\n","date":"2020-11-30 06:45:33","endLine":47,"groupId":"101842","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"OPERATOR","params":"(\"INSERT\"@SqlKind.INSERT)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/69/9298b0ff777180de15fa4136fc73a535089f37.src","preCode":"      new SqlSpecialOperator(\"INSERT\", SqlKind.INSERT) {\n        @SuppressWarnings(\"argument.type.incompatible\")\n        @Override public SqlCall createCall(@Nullable SqlLiteral functionQualifier,\n            SqlParserPos pos,\n            @Nullable SqlNode... operands) {\n          return new SqlInsert(\n              pos,\n              (SqlNodeList) operands[0],\n              operands[1],\n              operands[2],\n              (SqlNodeList) operands[3]);\n        }\n      };\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlInsert.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"N"}],"commitId":"93a2263f7af23be34171a6a1e4f5864a85691650","commitMessage":"@@@[CALCITE-4524] Make some fields non-nullable (SqlSelect.selectList.  DataContext.getTypeFactory)\n\nIn order to make SqlSelect.selectList non-nullable.  we had to\nchange the flow in RelToSqlConverter.  where selectList was\ninitially null; now we set it to SqlNodeList.SINGLETON_STAR.\n\nAdd class DataContexts.  with a few useful implementations of\ninterface DataContext. Phase out Schemas.createDataContext.\n\nResolve some other TODOs relating to nullability.\n","date":"2021-03-13 15:05:43","modifiedFileCount":"42","status":"M","submitter":"Julian Hyde"}]
