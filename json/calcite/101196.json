[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2017-02-04 06:48:02","commitOrder":3,"curCode":"  @Test public void testInsertBind() {\n    \r\n    final String sql0 = \"insert into empnullables (empno, ename, deptno)\\n\"\n        + \"values (?, ?, ?)\";\n    sql(sql0).ok()\n        .bindType(\"RecordType(INTEGER ?0, VARCHAR(20) ?1, INTEGER ?2)\");\n\n    \r\n    final String sql1 = \"insert into empnullables (empno, ename, deptno)\\n\"\n        + \"values (?, 'Pat', 1), (2, ?, ?), (3, 'Tod', ?), (4, 'Arthur', null)\";\n    sql(sql1).ok()\n        .bindType(\"RecordType(INTEGER ?0, VARCHAR(20) ?1, INTEGER ?2, INTEGER ?3)\");\n\n    \r\n    sql(\"insert into empnullables (ename, empno) values (?, ? + 1)\")\n        .ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    sql(\"insert into empnullables (ename, empno) select ?, ? from (values (1))\")\n        .ok().bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    final String sql3 = \"insert into empnullables (ename, empno)\\n\"\n        + \"with v as (values ('a'))\\n\"\n        + \"select ?, ? from (values (1))\";\n    sql(sql3).ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    final String sql2 = \"insert into empnullables (ename, empno)\\n\"\n        + \"select ?, ? from (values (1))\\n\"\n        + \"union all\\n\"\n        + \"select ?, ? from (values (time '1:2:3'))\";\n    final String expected2 = \"RecordType(VARCHAR(20) ?0, INTEGER ?1,\"\n        + \" VARCHAR(20) ?2, INTEGER ?3)\";\n    sql(sql2).ok().bindType(expected2);\n  }\n","date":"2017-02-05 05:51:19","endLine":8157,"groupId":"16462","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInsertBind","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/f4f528a41123d0d9c97485adfc73fcdad7c99d.src","preCode":"  @Test public void testInsertBind() {\n    \r\n    final String sql0 = \"insert into empnullables (empno, ename, deptno)\\n\"\n        + \"values (?, ?, ?)\";\n    sql(sql0).ok()\n        .bindType(\"RecordType(INTEGER ?0, VARCHAR(20) ?1, INTEGER ?2)\");\n\n    \r\n    final String sql1 = \"insert into empnullables (empno, ename, deptno)\\n\"\n        + \"values (?, 'Pat', 1), (2, ?, ?), (3, 'Tod', ?), (4, 'Arthur', null)\";\n    sql(sql1).ok()\n        .bindType(\"RecordType(INTEGER ?0, VARCHAR(20) ?1, INTEGER ?2, INTEGER ?3)\");\n\n    \r\n    sql(\"insert into empnullables (ename, empno) values (?, ? + 1)\")\n        .ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    sql(\"insert into empnullables (ename, empno) select ?, ? from (values (1))\")\n        .ok().bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    final String sql3 = \"insert into empnullables (ename, empno)\\n\"\n        + \"with v as (values ('a'))\\n\"\n        + \"select ?, ? from (values (1))\";\n    sql(sql3).ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    final String sql2 = \"insert into empnullables (ename, empno)\\n\"\n        + \"select ?, ? from (values (1))\\n\"\n        + \"union all\\n\"\n        + \"select ?, ? from (values (time '1:2:3'))\";\n    final String expected2 = \"RecordType(VARCHAR(20) ?0, INTEGER ?1,\"\n        + \" VARCHAR(20) ?2, INTEGER ?3)\";\n    sql(sql2).ok().bindType(expected2);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8120,"status":"NB"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testInsertBindWithCustomInitializerExpressionFactory() {\n    sql(\"insert into empdefaults (deptno) values (?)\").ok()\n        .bindType(\"RecordType(INTEGER ?0)\");\n    sql(\"insert into empdefaults (ename, empno) values (?, ?)\").ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n    sql(\"insert into empdefaults (ename, deptno) ^values (null, ?)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    sql(\"insert into ^empdefaults^ values (null, ?)\")\n        .fails(\"Number of INSERT target columns \\\\(9\\\\) does not equal \"\n            + \"number of source items \\\\(2\\\\)\");\n  }\n","date":"2019-09-24 02:59:18","endLine":9602,"groupId":"7917","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertBindWithCustomInitializerExpressionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testInsertBindWithCustomInitializerExpressionFactory() {\n    sql(\"insert into empdefaults (deptno) values (?)\").ok()\n        .bindType(\"RecordType(INTEGER ?0)\");\n    sql(\"insert into empdefaults (ename, empno) values (?, ?)\").ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n    sql(\"insert into empdefaults (ename, deptno) ^values (null, ?)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    sql(\"insert into ^empdefaults^ values (null, ?)\")\n        .fails(\"Number of INSERT target columns \\\\(9\\\\) does not equal \"\n            + \"number of source items \\\\(2\\\\)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9592,"status":"B"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testInsertBind() {\n    \r\n    final String sql0 = \"insert into empnullables (empno, ename, deptno)\\n\"\n        + \"values (?, ?, ?)\";\n    sql(sql0).ok()\n        .bindType(\"RecordType(INTEGER ?0, VARCHAR(20) ?1, INTEGER ?2)\");\n\n    \r\n    final String sql1 = \"insert into empnullables (empno, ename, deptno)\\n\"\n        + \"values (?, 'Pat', 1), (2, ?, ?), (3, 'Tod', ?), (4, 'Arthur', null)\";\n    sql(sql1).ok()\n        .bindType(\"RecordType(INTEGER ?0, VARCHAR(20) ?1, INTEGER ?2, INTEGER ?3)\");\n\n    \r\n    sql(\"insert into empnullables (ename, empno) values (?, ? + 1)\")\n        .ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    sql(\"insert into empnullables (ename, empno) select ?, ? from (values (1))\")\n        .ok().bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    final String sql3 = \"insert into empnullables (ename, empno)\\n\"\n        + \"with v as (values ('a'))\\n\"\n        + \"select ?, ? from (values (1))\";\n    sql(sql3).ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    final String sql2 = \"insert into empnullables (ename, empno)\\n\"\n        + \"select ?, ? from (values (1))\\n\"\n        + \"union all\\n\"\n        + \"select ?, ? from (values (time '1:2:3'))\";\n    final String expected2 = \"RecordType(VARCHAR(20) ?0, INTEGER ?1,\"\n        + \" VARCHAR(20) ?2, INTEGER ?3)\";\n    sql(sql2).ok().bindType(expected2);\n  }\n","date":"2020-04-06 04:57:49","endLine":9217,"groupId":"101196","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInsertBind","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testInsertBind() {\n    \r\n    final String sql0 = \"insert into empnullables (empno, ename, deptno)\\n\"\n        + \"values (?, ?, ?)\";\n    sql(sql0).ok()\n        .bindType(\"RecordType(INTEGER ?0, VARCHAR(20) ?1, INTEGER ?2)\");\n\n    \r\n    final String sql1 = \"insert into empnullables (empno, ename, deptno)\\n\"\n        + \"values (?, 'Pat', 1), (2, ?, ?), (3, 'Tod', ?), (4, 'Arthur', null)\";\n    sql(sql1).ok()\n        .bindType(\"RecordType(INTEGER ?0, VARCHAR(20) ?1, INTEGER ?2, INTEGER ?3)\");\n\n    \r\n    sql(\"insert into empnullables (ename, empno) values (?, ? + 1)\")\n        .ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    sql(\"insert into empnullables (ename, empno) select ?, ? from (values (1))\")\n        .ok().bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    final String sql3 = \"insert into empnullables (ename, empno)\\n\"\n        + \"with v as (values ('a'))\\n\"\n        + \"select ?, ? from (values (1))\";\n    sql(sql3).ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n\n    \r\n    final String sql2 = \"insert into empnullables (ename, empno)\\n\"\n        + \"select ?, ? from (values (1))\\n\"\n        + \"union all\\n\"\n        + \"select ?, ? from (values (time '1:2:3'))\";\n    final String expected2 = \"RecordType(VARCHAR(20) ?0, INTEGER ?1,\"\n        + \" VARCHAR(20) ?2, INTEGER ?3)\";\n    sql(sql2).ok().bindType(expected2);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9180,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testInsertBindWithCustomInitializerExpressionFactory() {\n    sql(\"insert into empdefaults (deptno) values (?)\").ok()\n        .bindType(\"RecordType(INTEGER ?0)\");\n    sql(\"insert into empdefaults (ename, empno) values (?, ?)\").ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n    sql(\"insert into empdefaults (ename, deptno) ^values (null, ?)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    sql(\"insert into ^empdefaults^ values (null, ?)\")\n        .fails(\"Number of INSERT target columns \\\\(9\\\\) does not equal \"\n            + \"number of source items \\\\(2\\\\)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":9703,"groupId":"101196","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertBindWithCustomInitializerExpressionFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testInsertBindWithCustomInitializerExpressionFactory() {\n    sql(\"insert into empdefaults (deptno) values (?)\").ok()\n        .bindType(\"RecordType(INTEGER ?0)\");\n    sql(\"insert into empdefaults (ename, empno) values (?, ?)\").ok()\n        .bindType(\"RecordType(VARCHAR(20) ?0, INTEGER ?1)\");\n    sql(\"insert into empdefaults (ename, deptno) ^values (null, ?)^\")\n        .fails(\"Column 'ENAME' has no default value and does not allow NULLs\");\n    sql(\"insert into ^empdefaults^ values (null, ?)\")\n        .fails(\"Number of INSERT target columns \\\\(9\\\\) does not equal \"\n            + \"number of source items \\\\(2\\\\)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":9693,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
