[{"authorTime":"2019-09-25 06:40:53","codes":[{"authorDate":"2019-09-25 06:40:53","commitOrder":1,"curCode":"  @Test public void testSelectOrderByAscNullsLast() {\n    final String query = \"select \\\"product_id\\\" from \\\"product\\\"\\n\"\n        + \"order by \\\"product_id\\\" nulls last\";\n    \r\n    final String expected = \"SELECT product_id\\n\"\n        + \"FROM foodmart.product\\n\"\n        + \"ORDER BY product_id IS NULL, product_id\";\n    final String mssqlExpected = \"SELECT [product_id]\\n\"\n        + \"FROM [foodmart].[product]\\n\"\n        + \"ORDER BY CASE WHEN [product_id] IS NULL THEN 1 ELSE 0 END, [product_id]\";\n    sql(query)\n        .dialect(HiveSqlDialect.DEFAULT).ok(expected)\n        .dialect(MssqlSqlDialect.DEFAULT).ok(mssqlExpected);\n  }\n","date":"2019-09-25 07:30:48","endLine":1062,"groupId":"3896","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectOrderByAscNullsLast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a4/185b222799c26658742d330d2b8c576f36ee0d.src","preCode":"  @Test public void testSelectOrderByAscNullsLast() {\n    final String query = \"select \\\"product_id\\\" from \\\"product\\\"\\n\"\n        + \"order by \\\"product_id\\\" nulls last\";\n    \r\n    final String expected = \"SELECT product_id\\n\"\n        + \"FROM foodmart.product\\n\"\n        + \"ORDER BY product_id IS NULL, product_id\";\n    final String mssqlExpected = \"SELECT [product_id]\\n\"\n        + \"FROM [foodmart].[product]\\n\"\n        + \"ORDER BY CASE WHEN [product_id] IS NULL THEN 1 ELSE 0 END, [product_id]\";\n    sql(query)\n        .dialect(HiveSqlDialect.DEFAULT).ok(expected)\n        .dialect(MssqlSqlDialect.DEFAULT).ok(mssqlExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1049,"status":"B"},{"authorDate":"2019-09-25 06:40:53","commitOrder":1,"curCode":"  @Test public void testSelectOrderByAscNullsFirst() {\n    final String query = \"select \\\"product_id\\\" from \\\"product\\\"\\n\"\n        + \"order by \\\"product_id\\\" nulls first\";\n    \r\n    \r\n    final String expected = \"SELECT product_id\\n\"\n        + \"FROM foodmart.product\\n\"\n        + \"ORDER BY product_id\";\n    final String mssqlExpected = \"SELECT [product_id]\\n\"\n        + \"FROM [foodmart].[product]\\n\"\n        + \"ORDER BY [product_id]\";\n    sql(query)\n        .dialect(HiveSqlDialect.DEFAULT).ok(expected)\n        .dialect(MssqlSqlDialect.DEFAULT).ok(mssqlExpected);\n  }\n","date":"2019-09-25 07:30:48","endLine":1078,"groupId":"3896","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectOrderByAscNullsFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a4/185b222799c26658742d330d2b8c576f36ee0d.src","preCode":"  @Test public void testSelectOrderByAscNullsFirst() {\n    final String query = \"select \\\"product_id\\\" from \\\"product\\\"\\n\"\n        + \"order by \\\"product_id\\\" nulls first\";\n    \r\n    \r\n    final String expected = \"SELECT product_id\\n\"\n        + \"FROM foodmart.product\\n\"\n        + \"ORDER BY product_id\";\n    final String mssqlExpected = \"SELECT [product_id]\\n\"\n        + \"FROM [foodmart].[product]\\n\"\n        + \"ORDER BY [product_id]\";\n    sql(query)\n        .dialect(HiveSqlDialect.DEFAULT).ok(expected)\n        .dialect(MssqlSqlDialect.DEFAULT).ok(mssqlExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1064,"status":"B"}],"commitId":"0c8cbacd0f30b5df15b7cb93c0ab2be5d0324372","commitMessage":"@@@[CALCITE-3370] In JDBC adapter for Microsoft SQL Server.  emulate NULLS FIRST using CASE expression (Justin Swett)\n\nAlso.  remove whitespace from README.md\n\nClose apache/calcite#1474\n","date":"2019-09-25 07:30:48","modifiedFileCount":"2","status":"B","submitter":"Justin Swett"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSelectOrderByAscNullsLast() {\n    final String query = \"select \\\"product_id\\\" from \\\"product\\\"\\n\"\n        + \"order by \\\"product_id\\\" nulls last\";\n    \r\n    final String expected = \"SELECT product_id\\n\"\n        + \"FROM foodmart.product\\n\"\n        + \"ORDER BY product_id IS NULL, product_id\";\n    final String mssqlExpected = \"SELECT [product_id]\\n\"\n        + \"FROM [foodmart].[product]\\n\"\n        + \"ORDER BY CASE WHEN [product_id] IS NULL THEN 1 ELSE 0 END, [product_id]\";\n    sql(query)\n        .dialect(HiveSqlDialect.DEFAULT).ok(expected)\n        .dialect(MssqlSqlDialect.DEFAULT).ok(mssqlExpected);\n  }\n","date":"2020-04-06 04:57:49","endLine":1549,"groupId":"101548","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectOrderByAscNullsLast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSelectOrderByAscNullsLast() {\n    final String query = \"select \\\"product_id\\\" from \\\"product\\\"\\n\"\n        + \"order by \\\"product_id\\\" nulls last\";\n    \r\n    final String expected = \"SELECT product_id\\n\"\n        + \"FROM foodmart.product\\n\"\n        + \"ORDER BY product_id IS NULL, product_id\";\n    final String mssqlExpected = \"SELECT [product_id]\\n\"\n        + \"FROM [foodmart].[product]\\n\"\n        + \"ORDER BY CASE WHEN [product_id] IS NULL THEN 1 ELSE 0 END, [product_id]\";\n    sql(query)\n        .dialect(HiveSqlDialect.DEFAULT).ok(expected)\n        .dialect(MssqlSqlDialect.DEFAULT).ok(mssqlExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1536,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testSelectOrderByAscNullsFirst() {\n    final String query = \"select \\\"product_id\\\" from \\\"product\\\"\\n\"\n        + \"order by \\\"product_id\\\" nulls first\";\n    \r\n    \r\n    final String expected = \"SELECT product_id\\n\"\n        + \"FROM foodmart.product\\n\"\n        + \"ORDER BY product_id\";\n    final String mssqlExpected = \"SELECT [product_id]\\n\"\n        + \"FROM [foodmart].[product]\\n\"\n        + \"ORDER BY [product_id]\";\n    sql(query)\n        .dialect(HiveSqlDialect.DEFAULT).ok(expected)\n        .dialect(MssqlSqlDialect.DEFAULT).ok(mssqlExpected);\n  }\n","date":"2020-04-06 04:57:49","endLine":1565,"groupId":"101548","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectOrderByAscNullsFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testSelectOrderByAscNullsFirst() {\n    final String query = \"select \\\"product_id\\\" from \\\"product\\\"\\n\"\n        + \"order by \\\"product_id\\\" nulls first\";\n    \r\n    \r\n    final String expected = \"SELECT product_id\\n\"\n        + \"FROM foodmart.product\\n\"\n        + \"ORDER BY product_id\";\n    final String mssqlExpected = \"SELECT [product_id]\\n\"\n        + \"FROM [foodmart].[product]\\n\"\n        + \"ORDER BY [product_id]\";\n    sql(query)\n        .dialect(HiveSqlDialect.DEFAULT).ok(expected)\n        .dialect(MssqlSqlDialect.DEFAULT).ok(mssqlExpected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1551,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
