[{"authorTime":"2017-09-15 08:33:17","codes":[{"authorDate":"2018-01-31 11:37:56","commitOrder":2,"curCode":"  @Test public void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","date":"2018-04-21 02:11:59","endLine":126,"groupId":"8279","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/83/5c19a91b835c792496ea034e24c40319c726bc.src","preCode":"  @Test public void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"},{"authorDate":"2017-09-15 08:33:17","commitOrder":2,"curCode":"  @Test public void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n    }\n  }\n","date":"2017-11-27 11:39:28","endLine":97,"groupId":"12512","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3a/974122f4b62f86d04042f272155c0cc075f229.src","preCode":"  @Test public void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"NB"}],"commitId":"570aca3d4fea34edcb04d0a5ec02f0fcf8925b0c","commitMessage":"@@@[CALCITE-2045] CREATE TYPE (Shuyi Chen)\n\nClose apache/calcite#638\n","date":"2018-04-21 02:11:59","modifiedFileCount":"31","status":"M","submitter":"Shuyi Chen"},{"authorTime":"2018-11-02 00:19:40","codes":[{"authorDate":"2018-01-31 11:37:56","commitOrder":3,"curCode":"  @Test public void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","date":"2018-04-21 02:11:59","endLine":126,"groupId":"8279","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/83/5c19a91b835c792496ea034e24c40319c726bc.src","preCode":"  @Test public void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2018-11-02 00:19:40","commitOrder":3,"curCode":"  @Test public void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n\n      \r\n      b = s.execute(\"create type mytype as (i int)\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table w (i int not null, j mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into w values (1, NULL)\");\n      assertThat(x, is(1));\n    }\n  }\n","date":"2019-02-23 00:45:56","endLine":151,"groupId":"12512","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2d/8b24176f587f3118c95ae802c40721c1e2e14d.src","preCode":"  @Test public void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"846494a0091b00357f3ccb67c8a4a7d9d226cd7d","commitMessage":"@@@[CALCITE-2464] Allow to set nullability for columns of structured types (Ruben Quesada Lopez)\n- Added nullability flag to struct types (previously they were always considered as non-nullable)\n- Struct types will be built as non-nullable by default to avoid regresssions.  but this\ncan be changed via RelDataTypeFactory#createTypeWithNullability\n- SqlCreateTable will generate nullable struct types.  unless they are defined as NOT NULL\n- New unit tests\n","date":"2019-02-23 00:45:56","modifiedFileCount":"7","status":"M","submitter":"rubenada"},{"authorTime":"2019-08-19 19:59:46","codes":[{"authorDate":"2018-01-31 11:37:56","commitOrder":4,"curCode":"  @Test public void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","date":"2018-04-21 02:11:59","endLine":126,"groupId":"8279","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/83/5c19a91b835c792496ea034e24c40319c726bc.src","preCode":"  @Test public void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2019-08-19 19:59:46","commitOrder":4,"curCode":"  @Test public void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n\n      \r\n      b = s.execute(\"create type mytype as (i int)\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table w (i int not null, j mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into w values (1, NULL)\");\n      assertThat(x, is(1));\n\n      \r\n      b = s.execute(\"create schema a\");\n      assertThat(b, is(false));\n      b = s.execute(\"create schema a.b\");\n      assertThat(b, is(false));\n      b = s.execute(\"create type a.b.mytype as (i varchar(5))\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table t2 (i int not null, j a.b.mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into t2 values (1, NULL)\");\n      assertThat(x, is(1));\n    }\n  }\n","date":"2019-08-20 18:07:10","endLine":167,"groupId":"12512","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/37/847e0f10f36391f43152897559db3cdecc3455.src","preCode":"  @Test public void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n\n      \r\n      b = s.execute(\"create type mytype as (i int)\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table w (i int not null, j mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into w values (1, NULL)\");\n      assertThat(x, is(1));\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"6b600e4bd13d130a4ea48ab9b8451d81ed095da0","commitMessage":"@@@[CALCITE-3267] Remove method SqlDataTypeSpec#deriveType(RelDataTypefactory)\n\nChanges:\n* Remove method SqlDataTypeSpec#deriveType(RelDataTypefactory);\n* Add a SqlValidator subType ContextSqlValidator used to derive type during DDL\nnodes execution;\n* Support create table with user defined type and add test case.\n","date":"2019-08-20 18:07:10","modifiedFileCount":"16","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":132,"groupId":"8279","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/1c68810b97ce4f4b6d473470bf13f83e7ad116.src","preCode":"  @Test public void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n\n      \r\n      b = s.execute(\"create type mytype as (i int)\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table w (i int not null, j mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into w values (1, NULL)\");\n      assertThat(x, is(1));\n\n      \r\n      b = s.execute(\"create schema a\");\n      assertThat(b, is(false));\n      b = s.execute(\"create schema a.b\");\n      assertThat(b, is(false));\n      b = s.execute(\"create type a.b.mytype as (i varchar(5))\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table t2 (i int not null, j a.b.mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into t2 values (1, NULL)\");\n      assertThat(x, is(1));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":173,"groupId":"12512","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/1c68810b97ce4f4b6d473470bf13f83e7ad116.src","preCode":"  @Test public void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n\n      \r\n      b = s.execute(\"create type mytype as (i int)\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table w (i int not null, j mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into w values (1, NULL)\");\n      assertThat(x, is(1));\n\n      \r\n      b = s.execute(\"create schema a\");\n      assertThat(b, is(false));\n      b = s.execute(\"create schema a.b\");\n      assertThat(b, is(false));\n      b = s.execute(\"create type a.b.mytype as (i varchar(5))\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table t2 (i int not null, j a.b.mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into t2 values (1, NULL)\");\n      assertThat(x, is(1));\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2021-03-12 23:50:31","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":132,"groupId":"10234","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f9/1c68810b97ce4f4b6d473470bf13f83e7ad116.src","preCode":"  @Test void testDropType() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create type mytype1 as BIGINT\");\n      assertThat(b, is(false));\n      b = s.execute(\"drop type mytype1\");\n      assertThat(b, is(false));\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"N"},{"authorDate":"2021-03-12 23:50:31","commitOrder":6,"curCode":"  @Test void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n\n      \r\n      b = s.execute(\"create type mytype as (i int)\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table w (i int not null, j mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into w values (1, NULL)\");\n      assertThat(x, is(1));\n\n      \r\n      b = s.execute(\"create schema a\");\n      assertThat(b, is(false));\n      b = s.execute(\"create schema a.b\");\n      assertThat(b, is(false));\n      b = s.execute(\"create type a.b.mytype as (i varchar(5))\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table t2 (i int not null, j a.b.mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into t2 values (1, NULL)\");\n      assertThat(x, is(1));\n\n      assertDoesNotThrow(() -> {\n        s.execute(\"create or replace table t2 (i int not null)\");\n        s.executeUpdate(\"insert into t2 values (1)\");\n      }, \"REPLACE must recreate the table, leaving only one column\");\n    }\n  }\n","date":"2021-03-13 02:13:42","endLine":223,"groupId":"10234","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/9e949e3d9b0eafbc661c35448799387c4b9a9e.src","preCode":"  @Test void testCreateTable() throws Exception {\n    try (Connection c = connect();\n         Statement s = c.createStatement()) {\n      boolean b = s.execute(\"create table t (i int not null)\");\n      assertThat(b, is(false));\n      int x = s.executeUpdate(\"insert into t values 1\");\n      assertThat(x, is(1));\n      x = s.executeUpdate(\"insert into t values 3\");\n      assertThat(x, is(1));\n      try (ResultSet r = s.executeQuery(\"select sum(i) from t\")) {\n        assertThat(r.next(), is(true));\n        assertThat(r.getInt(1), is(4));\n        assertThat(r.next(), is(false));\n      }\n\n      \r\n      b = s.execute(\"create type mytype as (i int)\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table w (i int not null, j mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into w values (1, NULL)\");\n      assertThat(x, is(1));\n\n      \r\n      b = s.execute(\"create schema a\");\n      assertThat(b, is(false));\n      b = s.execute(\"create schema a.b\");\n      assertThat(b, is(false));\n      b = s.execute(\"create type a.b.mytype as (i varchar(5))\");\n      assertThat(b, is(false));\n      b = s.execute(\"create table t2 (i int not null, j a.b.mytype)\");\n      assertThat(b, is(false));\n      x = s.executeUpdate(\"insert into t2 values (1, NULL)\");\n      assertThat(x, is(1));\n    }\n  }\n","realPath":"server/src/test/java/org/apache/calcite/test/ServerTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"008930a5a0a4310d642ae902365a883208d097cb","commitMessage":"@@@[CALCITE-4533] Fix handling of REPLACE and IF NOT EXISTS keywords for CREATE TABLE/SCHEMA commands (Vladimir Ozerov)\n","date":"2021-03-13 02:13:42","modifiedFileCount":"2","status":"M","submitter":"devozerov"}]
