[{"authorTime":"2017-07-28 06:52:51","codes":[{"authorDate":"2015-10-14 09:27:19","commitOrder":2,"curCode":"  public void checkMazeTableFunction(Boolean solution, String maze)\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final TableFunction table2 = TableFunctionImpl.create(SOLVE_METHOD);\n    schema.add(\"Solve\", table2);\n    final String sql;\n    if (solution) {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Solve\\\"(5, 3, 1)) as t(s)\";\n    } else {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1)) as t(s)\";\n    }\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final StringBuilder b = new StringBuilder();\n    while (resultSet.next()) {\n      b.append(resultSet.getString(1)).append(\"\\n\");\n    }\n    assertThat(b.toString(), is(maze));\n  }\n","date":"2015-10-14 09:27:19","endLine":102,"groupId":"1534","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkMazeTableFunction","params":"(Booleansolution@Stringmaze)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/2726c14a3797714ea68b1c555bdcae0c59f217.src","preCode":"  public void checkMazeTableFunction(Boolean solution, String maze)\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final TableFunction table2 = TableFunctionImpl.create(SOLVE_METHOD);\n    schema.add(\"Solve\", table2);\n    final String sql;\n    if (solution) {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Solve\\\"(5, 3, 1)) as t(s)\";\n    } else {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1)) as t(s)\";\n    }\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final StringBuilder b = new StringBuilder();\n    while (resultSet.next()) {\n      b.append(resultSet.getString(1)).append(\"\\n\");\n    }\n    assertThat(b.toString(), is(maze));\n  }\n","realPath":"example/function/src/test/java/org/apache/calcite/test/ExampleFunctionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"NB"},{"authorDate":"2017-07-28 06:52:51","commitOrder":2,"curCode":"  @Test public void testScannableTableFunction()\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(Smalls.MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final String sql = \"select *\\n\"\n        + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1))\";\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final String result = \"S=abcde\\n\"\n        + \"S=xyz\\n\"\n        + \"S=generate(w=5, h=3, s=1)\\n\";\n    assertThat(CalciteAssert.toString(resultSet), is(result));\n  }\n","date":"2017-07-28 07:02:54","endLine":126,"groupId":"5637","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScannableTableFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/392b374dcf3019da6967e5fffbb8e034dc8ce3.src","preCode":"  @Test public void testScannableTableFunction()\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(Smalls.MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final String sql = \"select *\\n\"\n        + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1))\";\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final String result = \"S=abcde\\n\"\n        + \"S=xyz\\n\"\n        + \"S=generate(w=5, h=3, s=1)\\n\";\n    assertThat(CalciteAssert.toString(resultSet), is(result));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/TableFunctionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"}],"commitId":"a473eca597300395ff89f949401505ec122a9774","commitMessage":"@@@[CALCITE-1907] Table function with 1 column gives ClassCastException\n\nCreate a new test class.  TableFunctionTest. Move some existing tests for\nuser-defined table functions from JdbcTest and UdfTest into\nTableFunctionTest.  and add some new ones.\n\nStdinTableFunction.  to be added in [CALCITE-1896].  also relies on this\nfix.\n","date":"2017-07-28 07:02:54","modifiedFileCount":"7","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2015-10-14 09:27:19","commitOrder":3,"curCode":"  public void checkMazeTableFunction(Boolean solution, String maze)\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final TableFunction table2 = TableFunctionImpl.create(SOLVE_METHOD);\n    schema.add(\"Solve\", table2);\n    final String sql;\n    if (solution) {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Solve\\\"(5, 3, 1)) as t(s)\";\n    } else {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1)) as t(s)\";\n    }\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final StringBuilder b = new StringBuilder();\n    while (resultSet.next()) {\n      b.append(resultSet.getString(1)).append(\"\\n\");\n    }\n    assertThat(b.toString(), is(maze));\n  }\n","date":"2015-10-14 09:27:19","endLine":102,"groupId":"1534","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkMazeTableFunction","params":"(Booleansolution@Stringmaze)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5d/2726c14a3797714ea68b1c555bdcae0c59f217.src","preCode":"  public void checkMazeTableFunction(Boolean solution, String maze)\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final TableFunction table2 = TableFunctionImpl.create(SOLVE_METHOD);\n    schema.add(\"Solve\", table2);\n    final String sql;\n    if (solution) {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Solve\\\"(5, 3, 1)) as t(s)\";\n    } else {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1)) as t(s)\";\n    }\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final StringBuilder b = new StringBuilder();\n    while (resultSet.next()) {\n      b.append(resultSet.getString(1)).append(\"\\n\");\n    }\n    assertThat(b.toString(), is(maze));\n  }\n","realPath":"example/function/src/test/java/org/apache/calcite/test/ExampleFunctionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testScannableTableFunction()\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(Smalls.MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final String sql = \"select *\\n\"\n        + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1))\";\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final String result = \"S=abcde\\n\"\n        + \"S=xyz\\n\"\n        + \"S=generate(w=5, h=3, s=1)\\n\";\n    assertThat(CalciteAssert.toString(resultSet), is(result));\n  }\n","date":"2020-04-06 04:57:49","endLine":164,"groupId":"5637","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScannableTableFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/35/08dd6202385e801c7692db39d7b44832ee7d04.src","preCode":"  @Test public void testScannableTableFunction()\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(Smalls.MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final String sql = \"select *\\n\"\n        + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1))\";\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final String result = \"S=abcde\\n\"\n        + \"S=xyz\\n\"\n        + \"S=generate(w=5, h=3, s=1)\\n\";\n    assertThat(CalciteAssert.toString(resultSet), is(result));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/TableFunctionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-06-19 05:10:50","codes":[{"authorDate":"2018-06-19 05:10:50","commitOrder":4,"curCode":"  public void checkMazeTableFunction(Boolean solution, String maze)\n      throws SQLException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final TableFunction table2 = TableFunctionImpl.create(SOLVE_METHOD);\n    schema.add(\"Solve\", table2);\n    final String sql;\n    if (solution) {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Solve\\\"(5, 3, 1)) as t(s)\";\n    } else {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1)) as t(s)\";\n    }\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final StringBuilder b = new StringBuilder();\n    while (resultSet.next()) {\n      b.append(resultSet.getString(1)).append(\"\\n\");\n    }\n    assertThat(b.toString(), is(maze));\n  }\n","date":"2020-07-29 03:09:43","endLine":102,"groupId":"10935","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"checkMazeTableFunction","params":"(Booleansolution@Stringmaze)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/cc0eaec6887254203e82a40af7be6be7b6cae4.src","preCode":"  public void checkMazeTableFunction(Boolean solution, String maze)\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final TableFunction table2 = TableFunctionImpl.create(SOLVE_METHOD);\n    schema.add(\"Solve\", table2);\n    final String sql;\n    if (solution) {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Solve\\\"(5, 3, 1)) as t(s)\";\n    } else {\n      sql = \"select *\\n\"\n          + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1)) as t(s)\";\n    }\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final StringBuilder b = new StringBuilder();\n    while (resultSet.next()) {\n      b.append(resultSet.getString(1)).append(\"\\n\");\n    }\n    assertThat(b.toString(), is(maze));\n  }\n","realPath":"example/function/src/test/java/org/apache/calcite/test/ExampleFunctionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2018-06-19 05:10:50","commitOrder":4,"curCode":"  @Test void testScannableTableFunction() throws SQLException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(Smalls.MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final String sql = \"select *\\n\"\n        + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1))\";\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final String result = \"S=abcde\\n\"\n        + \"S=xyz\\n\"\n        + \"S=generate(w=5, h=3, s=1)\\n\";\n    assertThat(CalciteAssert.toString(resultSet), is(result));\n  }\n","date":"2020-07-29 03:09:43","endLine":163,"groupId":"10935","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testScannableTableFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f0/f014863f3a9d37e83cf9a75d85009e1208b84f.src","preCode":"  @Test void testScannableTableFunction()\n      throws SQLException, ClassNotFoundException {\n    Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n    CalciteConnection calciteConnection =\n        connection.unwrap(CalciteConnection.class);\n    SchemaPlus rootSchema = calciteConnection.getRootSchema();\n    SchemaPlus schema = rootSchema.add(\"s\", new AbstractSchema());\n    final TableFunction table = TableFunctionImpl.create(Smalls.MAZE_METHOD);\n    schema.add(\"Maze\", table);\n    final String sql = \"select *\\n\"\n        + \"from table(\\\"s\\\".\\\"Maze\\\"(5, 3, 1))\";\n    ResultSet resultSet = connection.createStatement().executeQuery(sql);\n    final String result = \"S=abcde\\n\"\n        + \"S=xyz\\n\"\n        + \"S=generate(w=5, h=3, s=1)\\n\";\n    assertThat(CalciteAssert.toString(resultSet), is(result));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/TableFunctionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"19edf52c76c6a1507721f5bd37f2a33497aa0c4c","commitMessage":"@@@[CALCITE-2569] UDFs that are table functions must implement SqlTableFunction and have CURSOR as their return type\n\nValidate that table functions are not used in contexts that require\nscalar functions.  such as the SELECT clause.\n\nChange operand type ANY to mean 'scalar expression of any type (but\nnot a cursor)'.  and add operand type IGNORE to mean skip validation -\nfor an operand that is not an expression. TABLE is one of the few\noperators that accepts a CURSOR operand.\n\nAdd SqlKind.INTERVAL_QUALIFIER.\n","date":"2020-07-29 03:09:43","modifiedFileCount":"32","status":"M","submitter":"Julian Hyde"}]
