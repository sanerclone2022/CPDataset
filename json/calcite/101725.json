[{"authorTime":"2018-08-17 14:15:13","codes":[{"authorDate":"2018-08-17 14:15:13","commitOrder":4,"curCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2018-08-30 07:50:23","endLine":531,"groupId":"16209","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyIsNotNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f6/9ca9a3c6b0f7c29a85e597e2def52d48a9d868.src","preCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"MB"},{"authorDate":"2018-08-17 14:15:13","commitOrder":4,"curCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(false);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2018-08-30 07:50:23","endLine":560,"groupId":"16209","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyIsNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f6/9ca9a3c6b0f7c29a85e597e2def52d48a9d868.src","preCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(false);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"B"}],"commitId":"90f49be639b9a569e3dc4d8369c08e2db64ea301","commitMessage":"@@@[CALCITE-2469] RexSimplify should optimize '(NOT x) IS NULL' to 'x IS NULL' (pengzhiwei)\n\nPreviously it optimized '(NOT x) IS NULL' to 'x IS NOT NULL'.  which is\nwrong.\n\nGeneralize the above.  to simplify 'f(x) IS NULL' to 'x IS NULL' for any\noperator 'f' that is known to be strong. (Julian Hyde)\n\nClose apache/calcite#796\n","date":"2018-08-30 07:50:23","modifiedFileCount":"3","status":"M","submitter":"pengzhiwei"},{"authorTime":"2018-09-01 02:33:07","codes":[{"authorDate":"2018-08-17 14:15:13","commitOrder":5,"curCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2018-08-30 07:50:23","endLine":531,"groupId":"16209","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyIsNotNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f6/9ca9a3c6b0f7c29a85e597e2def52d48a9d868.src","preCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"N"},{"authorDate":"2018-09-01 02:33:07","commitOrder":5,"curCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(false);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2018-09-04 10:22:17","endLine":558,"groupId":"16209","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyIsNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/89/2b7ab1b0910e07921747089768a057c818626c.src","preCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(false);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"M"}],"commitId":"86993bdedea758916deefcabbfd38eaa1c14eca7","commitMessage":"@@@Following [CALCITE-2469] simplify \"f(x.  y) IS NULL\" to \"x IS NULL OR y IS NULL\" if \"f\" is strong\n\nPreviously we did not use OR.  which was wrong.\n","date":"2018-09-04 10:22:17","modifiedFileCount":"2","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-09-19 17:46:51","codes":[{"authorDate":"2018-08-17 14:15:13","commitOrder":6,"curCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2018-08-30 07:50:23","endLine":531,"groupId":"16209","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyIsNotNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f6/9ca9a3c6b0f7c29a85e597e2def52d48a9d868.src","preCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"N"},{"authorDate":"2018-09-19 17:46:51","commitOrder":6,"curCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2018-09-19 21:01:23","endLine":571,"groupId":"16209","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyIsNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9d/a8d4a4ed99f61c84bc98b1d100856af75420a7.src","preCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(false);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":543,"status":"M"}],"commitId":"1420e4da8240d44a6a0f80b42d37a9e6fd836af7","commitMessage":"@@@[CALCITE-2567] Simplify IS NULL(null) to true (pengzhiwei)\n\nfixes #835\n","date":"2018-09-19 21:01:23","modifiedFileCount":"2","status":"M","submitter":"pengzhiwei"},{"authorTime":"2018-09-19 17:46:51","codes":[{"authorDate":"2018-09-28 09:34:22","commitOrder":7,"curCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2018-10-08 04:34:53","endLine":619,"groupId":"16209","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyIsNotNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/41c65083f6cbb3f28168727007d40a5f23154c.src","preCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands, false);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"M"},{"authorDate":"2018-09-19 17:46:51","commitOrder":7,"curCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2018-09-19 21:01:23","endLine":571,"groupId":"16209","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyIsNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9d/a8d4a4ed99f61c84bc98b1d100856af75420a7.src","preCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":543,"status":"N"}],"commitId":"6b3844c0634792263a5073b8ea93565fb3415f41","commitMessage":"@@@[CALCITE-2604] When simplifying an expression.  say whether an UNKNOWN value will be interpreted as is.  or as TRUE or FALSE\n\nAdd class RexUnknownAs to describe policy.  and make it an argument to\ninternal methods; public methods such as RexSimplify.simplify(RexNode)\nand RexSimplify.simplifyAnds(Iterable) use UNKNOWN. (The RexSimplify\nconstructor that allows a different policy than UNKNOWN is deprecated. \nand even if you use the deprecated constructor.  that policy only\napplies to the top-level expression.  not arguments to it.)\n\nAdd RexSimplify.simplify(RexNode.  RexUnknownAs) (mainly for internal\nuse).  and RexSimplify.simplifyUnknownAsFalse(RexNode) (for public use).\n\nAdd variant of RexUtil.composeConjunction that never returns null. \nwith @Nonnull annotation.\n","date":"2018-10-08 04:34:53","modifiedFileCount":"28","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-03-18 16:56:07","codes":[{"authorDate":"2019-03-18 16:56:07","commitOrder":8,"curCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (a.getKind() == SqlKind.CAST) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2019-03-20 23:10:30","endLine":751,"groupId":"16209","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyIsNotNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/10/1bea73b351cd1698a6bb2fd36069cd94fedf5d.src","preCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":710,"status":"M"},{"authorDate":"2019-03-18 16:56:07","commitOrder":8,"curCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (a.getKind() == SqlKind.CAST) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2019-03-20 23:10:30","endLine":784,"groupId":"16209","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyIsNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/10/1bea73b351cd1698a6bb2fd36069cd94fedf5d.src","preCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable()) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"M"}],"commitId":"a648f9c12309cc253628930b0cab98591caa66ab","commitMessage":"@@@[CALCITE-2929] Simplification of IS NULL checks are incorrectly assuming that CAST-s are possible\n\n* for non-nullable types the cast was discarded in case of an IS NULL check; so it might resulted in missing errors\n  cast('invalid' as int) IS NULL\n* in case of non-nullable types; IS NULL have made the assumption that cast will not change its nullability (which is true); however it may raise an error - so it can't be removed.\n\nClose apache/calcite#1116\n\nSigned-off-by: Kevin Risden <krisden@apache.org>\n","date":"2019-03-20 23:10:30","modifiedFileCount":"3","status":"M","submitter":"Zoltan Haindrich"},{"authorTime":"2019-05-05 06:21:14","codes":[{"authorDate":"2019-05-05 06:21:14","commitOrder":9,"curCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (a.getKind() == SqlKind.CAST) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2019-05-07 00:34:13","endLine":757,"groupId":"16209","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyIsNotNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/7b926322ea7aaa456d02bbbb9878b8ede16a34.src","preCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (a.getKind() == SqlKind.CAST) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":710,"status":"M"},{"authorDate":"2019-05-05 06:21:14","commitOrder":9,"curCode":"  private RexNode simplifyIsNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (a.getKind() == SqlKind.CAST) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2019-05-07 00:34:13","endLine":796,"groupId":"16209","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyIsNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/7b926322ea7aaa456d02bbbb9878b8ede16a34.src","preCode":"  private RexNode simplifyIsNull(RexNode a) {\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (a.getKind() == SqlKind.CAST) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":759,"status":"M"}],"commitId":"247c7d4f76a3d7d862ae6f4148cc8e6556efa497","commitMessage":"@@@[CALCITE-3049] When simplifying \"IS NULL\" and \"IS NOT NULL\".  simplify the operand first\n\nWhen simplifying \"(x IS NULL) IS NOT NULL\".  remove redundant casts\nbefore simplifying the operand.\n\nJulian Hyde started work on this case.  simplifying before and after. \nand Danny Chan improved it by only simplifying before.\n\nClose apache/calcite#1198\n","date":"2019-05-07 00:34:13","modifiedFileCount":"2","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-10-30 21:26:16","codes":[{"authorDate":"2019-10-30 21:26:16","commitOrder":10,"curCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2019-11-04 10:41:08","endLine":785,"groupId":"16209","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyIsNotNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9c/6940b0acd4dff75fb8a0b755a9b3cdb9525c3f.src","preCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (a.getKind() == SqlKind.CAST) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":738,"status":"M"},{"authorDate":"2019-10-30 21:26:16","commitOrder":10,"curCode":"  private RexNode simplifyIsNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2019-11-04 10:41:08","endLine":824,"groupId":"16209","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyIsNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9c/6940b0acd4dff75fb8a0b755a9b3cdb9525c3f.src","preCode":"  private RexNode simplifyIsNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (a.getKind() == SqlKind.CAST) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":787,"status":"M"}],"commitId":"4c779b0b89219630869aaacd57716bd54faf71da","commitMessage":"@@@[CALCITE-3457] RexSimplify incorrectly simplifies IS NOT NULL operator with ITEM call\n\n* Skip IS NULL(IS NOT NULL) simplification for ITEM operator\n* Add strong policy validation for IS NULL(IS NOT NULL)\nsimplification.  so we fire the bug early for other operators\n\nclose apache/calcite#1551\n","date":"2019-11-04 10:41:08","modifiedFileCount":"3","status":"M","submitter":"Volodymyr Vysotskyi"},{"authorTime":"2020-06-30 23:21:33","codes":[{"authorDate":"2020-06-30 23:21:33","commitOrder":11,"curCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a)) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2020-07-09 17:04:21","endLine":797,"groupId":"16209","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyIsNotNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/af8f126ab85cf5e64e7edae2524d4f288e4b2d.src","preCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":750,"status":"M"},{"authorDate":"2020-06-30 23:21:33","commitOrder":11,"curCode":"  private RexNode simplifyIsNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a)) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2020-07-09 17:04:21","endLine":836,"groupId":"16209","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyIsNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/af8f126ab85cf5e64e7edae2524d4f288e4b2d.src","preCode":"  private RexNode simplifyIsNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a.getKind())) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":799,"status":"M"}],"commitId":"3fb68f6c22a7bcbc4cb1fff114bc911b1e31c4de","commitMessage":"@@@[CALCITE-4094] Allow SqlOperator of SqlKind#OTHER_FUNCTION to define a Strong.Policy\n","date":"2020-07-09 17:04:21","modifiedFileCount":"4","status":"M","submitter":"rubenada"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":12,"curCode":"  private @Nullable RexNode simplifyIsNotNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a)) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":848,"groupId":"101725","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"simplifyIsNotNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e2/e2bef4ca89741036c583e86f74c321ce4ba6f4.src","preCode":"  private RexNode simplifyIsNotNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (predicates.pulledUpPredicates.contains(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a)) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(true);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNotNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, operand));\n        } else if (simplified.isAlwaysFalse()) {\n          return rexBuilder.makeLiteral(false);\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeConjunction(rexBuilder, operands);\n    case CUSTOM:\n      switch (a.getKind()) {\n      case LITERAL:\n        return rexBuilder.makeLiteral(!((RexLiteral) a).isNull());\n      default:\n        throw new AssertionError(\"every CUSTOM policy needs a handler, \"\n            + a.getKind());\n      }\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":801,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":12,"curCode":"  private @Nullable RexNode simplifyIsNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a)) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":887,"groupId":"101725","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"simplifyIsNull","params":"(RexNodea)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e2/e2bef4ca89741036c583e86f74c321ce4ba6f4.src","preCode":"  private RexNode simplifyIsNull(RexNode a) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    a = simplify(a, UNKNOWN);\n    if (!a.getType().isNullable() && isSafeExpression(a)) {\n      return rexBuilder.makeLiteral(false);\n    }\n    if (RexUtil.isNull(a)) {\n      return rexBuilder.makeLiteral(true);\n    }\n    if (hasCustomNullabilityRules(a.getKind())) {\n      return null;\n    }\n    switch (Strong.policy(a)) {\n    case NOT_NULL:\n      return rexBuilder.makeLiteral(false);\n    case ANY:\n      \r\n      \r\n      final List<RexNode> operands = new ArrayList<>();\n      for (RexNode operand : ((RexCall) a).getOperands()) {\n        final RexNode simplified = simplifyIsNull(operand);\n        if (simplified == null) {\n          operands.add(\n              rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, operand));\n        } else {\n          operands.add(simplified);\n        }\n      }\n      return RexUtil.composeDisjunction(rexBuilder, operands, false);\n    case AS_IS:\n    default:\n      return null;\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rex/RexSimplify.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":850,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
