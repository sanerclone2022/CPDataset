[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw Util.newInternal(\n            \"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","date":"2014-11-14 09:39:34","endLine":86,"groupId":"10720","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/bbad0f9f45c64d1a8c5757e5565a4102841a75.src","preCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw Util.newInternal(\n            \"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw Util.newInternal(\n            \"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","date":"2014-11-14 09:39:34","endLine":86,"groupId":"10720","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6d/d591c3193442c763fa911115810f98ca32db32.src","preCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw Util.newInternal(\n            \"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-01-23 17:38:12","codes":[{"authorDate":"2017-01-23 17:38:12","commitOrder":2,"curCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","date":"2017-01-26 03:00:12","endLine":89,"groupId":"9437","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/4c/69252ea046b8244bcea1d8bfed62aa19c21af6.src","preCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw Util.newInternal(\n            \"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2017-01-23 17:38:12","commitOrder":2,"curCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","date":"2017-01-26 03:00:12","endLine":90,"groupId":"9437","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a2/8e727b30835312bd529019abe30961ea90f13b.src","preCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw Util.newInternal(\n            \"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"603648bc2466ab699fa6646ffc1ad717b8c11880","commitMessage":"@@@[CALCITE-1597] Obsolete Util.newInternal.  .pre.  .post.  .permAssert and Throwables.propagate\n\nReplace Util.newInternal with new AssertionError in some contexts. \nnew RuntimeException in others. Replace methods pre.  pos.  permAssert\nin Util with methods in Preconditions.\n\nRemove uses of Throwables.propagate and .propagateIfPossible because\nthey are deprecated as of Guava 20. Create method\nUtil.throwIfUnchecked because we can't use Guava's\nThrowables.throwIfUnchecked yet.\n","date":"2017-01-26 03:00:12","modifiedFileCount":"82","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-01-11 16:14:35","codes":[{"authorDate":"2019-01-11 16:14:35","commitOrder":3,"curCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    collation);\n      }\n    }\n    return type;\n  }\n","date":"2019-02-07 02:23:24","endLine":87,"groupId":"9437","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/64/d9099c71c13b85aa947ad025735d786383e4e0.src","preCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-01-11 16:14:35","commitOrder":3,"curCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    collation);\n      }\n    }\n    return type;\n  }\n","date":"2019-02-07 02:23:24","endLine":88,"groupId":"9437","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/60/5d52b723ebb1c7400ee20a01c4a0a7fd1abfa0.src","preCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    new SqlCollation(\n                        collation.getCollationName(),\n                        collation.getCoercibility()));\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"866d855bfb7f95d4e064531fceb0cbf27ed6edff","commitMessage":"@@@[CALCITE-2454] Avoid treating Project(x=1) and Project(x=1) equal in case the type of 1 is int in the first rel and long in the second one\n\nAdd type information to RexLiteral#digest.  ensure planner uses just RelNode#digest for identity\n\nfixes #1002\n","date":"2019-02-07 02:23:24","modifiedFileCount":"28","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    collation);\n      }\n    }\n    return type;\n  }\n","date":"2020-10-07 05:42:47","endLine":87,"groupId":"9437","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/5085ce0f8ae555c6c20e848311d5dc67fb03d5.src","preCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    collation);\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"  @Override protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    collation);\n      }\n    }\n    return type;\n  }\n","date":"2020-10-07 05:42:47","endLine":88,"groupId":"9437","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5c/0bfe7d98ba1a4dbebb8e8d6687e2519150df0a.src","preCode":"  protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    collation);\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    castNonNull(type.getCharset()),\n                    collation);\n      }\n    }\n    return type;\n  }\n","date":"2020-11-30 06:45:33","endLine":91,"groupId":"101845","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/e172a032b52cc2686832ca1102ca43ac552a44.src","preCode":"  @Override protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    collation);\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  @Override protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = getCollation(operandType);\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    getCharset(type),\n                    collation);\n      }\n    }\n    return type;\n  }\n","date":"2020-11-30 06:45:33","endLine":91,"groupId":"101845","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"adjustType","params":"(SqlValidatorvalidator@SqlCallcall@RelDataTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/e2a144b1cad17f5c2ed4630db4a08fafb3c726.src","preCode":"  @Override protected RelDataType adjustType(\n      SqlValidator validator,\n      SqlCall call,\n      RelDataType type) {\n    if (SqlTypeUtil.inCharFamily(type)) {\n      \r\n      \r\n      RelDataType operandType =\n          validator.getValidatedNodeType(call.operand(0));\n      if (null == operandType) {\n        throw new AssertionError(\"operand's type should have been derived\");\n      }\n      if (SqlTypeUtil.inCharFamily(operandType)) {\n        SqlCollation collation = operandType.getCollation();\n        assert null != collation\n            : \"An implicit or explicit collation should have been set\";\n        type =\n            validator.getTypeFactory()\n                .createTypeWithCharsetAndCollation(\n                    type,\n                    type.getCharset(),\n                    collation);\n      }\n    }\n    return type;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
