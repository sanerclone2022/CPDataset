[{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  public @Nullable Double getPopulationSize(Project rel, RelMetadataQuery mq,\n      ImmutableBitSet groupKey) {\n    ImmutableBitSet.Builder baseCols = ImmutableBitSet.builder();\n    ImmutableBitSet.Builder projCols = ImmutableBitSet.builder();\n    List<RexNode> projExprs = rel.getProjects();\n    RelMdUtil.splitCols(projExprs, groupKey, baseCols, projCols);\n\n    Double population =\n        mq.getPopulationSize(rel.getInput(), baseCols.build());\n    if (population == null) {\n      return null;\n    }\n\n    \r\n    \r\n    if (projCols.cardinality() == 0) {\n      return population;\n    }\n\n    for (int bit : projCols.build()) {\n      Double subRowCount =\n          RelMdUtil.cardOfProjExpr(mq, rel, projExprs.get(bit));\n      if (subRowCount == null) {\n        return null;\n      }\n      population *= subRowCount;\n    }\n\n    \r\n    \r\n    \r\n    return RelMdUtil.numDistinctVals(population, mq.getRowCount(rel));\n  }\n","date":"2020-11-30 06:45:33","endLine":140,"groupId":"13851","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getPopulationSize","params":"(Projectrel@RelMetadataQuerymq@ImmutableBitSetgroupKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ca/39cc869765e8adbe57ef869015d445a7c0f9b6.src","preCode":"  public @Nullable Double getPopulationSize(Project rel, RelMetadataQuery mq,\n      ImmutableBitSet groupKey) {\n    ImmutableBitSet.Builder baseCols = ImmutableBitSet.builder();\n    ImmutableBitSet.Builder projCols = ImmutableBitSet.builder();\n    List<RexNode> projExprs = rel.getProjects();\n    RelMdUtil.splitCols(projExprs, groupKey, baseCols, projCols);\n\n    Double population =\n        mq.getPopulationSize(rel.getInput(), baseCols.build());\n    if (population == null) {\n      return null;\n    }\n\n    \r\n    \r\n    if (projCols.cardinality() == 0) {\n      return population;\n    }\n\n    for (int bit : projCols.build()) {\n      Double subRowCount =\n          RelMdUtil.cardOfProjExpr(mq, rel, projExprs.get(bit));\n      if (subRowCount == null) {\n        return null;\n      }\n      population *= subRowCount;\n    }\n\n    \r\n    \r\n    \r\n    return RelMdUtil.numDistinctVals(population, mq.getRowCount(rel));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"MB"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"  public @Nullable Double getSelectivity(Project rel, RelMetadataQuery mq,\n      @Nullable RexNode predicate) {\n    final List<RexNode> notPushable = new ArrayList<>();\n    final List<RexNode> pushable = new ArrayList<>();\n    RelOptUtil.splitFilters(\n        ImmutableBitSet.range(rel.getRowType().getFieldCount()),\n        predicate,\n        pushable,\n        notPushable);\n    final RexBuilder rexBuilder = rel.getCluster().getRexBuilder();\n    RexNode childPred =\n        RexUtil.composeConjunction(rexBuilder, pushable, true);\n\n    RexNode modifiedPred;\n    if (childPred == null) {\n      modifiedPred = null;\n    } else {\n      modifiedPred = RelOptUtil.pushPastProject(childPred, rel);\n    }\n    Double selectivity = mq.getSelectivity(rel.getInput(), modifiedPred);\n    if (selectivity == null) {\n      return null;\n    } else {\n      RexNode pred =\n          RexUtil.composeConjunction(rexBuilder, notPushable, true);\n      return selectivity * RelMdUtil.guessSelectivity(pred);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":218,"groupId":"2741","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"getSelectivity","params":"(Projectrel@RelMetadataQuerymq@@NullableRexNodepredicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/60d357e7a9742d9a7ea54747657180ace8f1d2.src","preCode":"  public @Nullable Double getSelectivity(Project rel, RelMetadataQuery mq,\n      @Nullable RexNode predicate) {\n    final List<RexNode> notPushable = new ArrayList<>();\n    final List<RexNode> pushable = new ArrayList<>();\n    RelOptUtil.splitFilters(\n        ImmutableBitSet.range(rel.getRowType().getFieldCount()),\n        predicate,\n        pushable,\n        notPushable);\n    final RexBuilder rexBuilder = rel.getCluster().getRexBuilder();\n    RexNode childPred =\n        RexUtil.composeConjunction(rexBuilder, pushable, true);\n\n    RexNode modifiedPred;\n    if (childPred == null) {\n      modifiedPred = null;\n    } else {\n      modifiedPred = RelOptUtil.pushPastProject(childPred, rel);\n    }\n    Double selectivity = mq.getSelectivity(rel.getInput(), modifiedPred);\n    if (selectivity == null) {\n      return null;\n    } else {\n      RexNode pred =\n          RexUtil.composeConjunction(rexBuilder, notPushable, true);\n      return selectivity * RelMdUtil.guessSelectivity(pred);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdSelectivity.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2021-02-23 13:52:16","commitOrder":6,"curCode":"  public @Nullable Double getPopulationSize(Project rel, RelMetadataQuery mq,\n      ImmutableBitSet groupKey) {\n    \r\n    \r\n    ImmutableBitSet nonConstCols = RexUtil.getNonConstColumns(groupKey, rel.getProjects());\n    if (nonConstCols.cardinality() == 0) {\n      \r\n      return 1D;\n    }\n\n    if (nonConstCols.cardinality() < groupKey.cardinality()) {\n      \r\n      \r\n      return getPopulationSize(rel, mq, nonConstCols);\n    }\n\n    ImmutableBitSet.Builder baseCols = ImmutableBitSet.builder();\n    ImmutableBitSet.Builder projCols = ImmutableBitSet.builder();\n    List<RexNode> projExprs = rel.getProjects();\n    RelMdUtil.splitCols(projExprs, groupKey, baseCols, projCols);\n\n    Double population =\n        mq.getPopulationSize(rel.getInput(), baseCols.build());\n    if (population == null) {\n      return null;\n    }\n\n    \r\n    \r\n    if (projCols.cardinality() == 0) {\n      return population;\n    }\n\n    for (int bit : projCols.build()) {\n      Double subRowCount =\n          RelMdUtil.cardOfProjExpr(mq, rel, projExprs.get(bit));\n      if (subRowCount == null) {\n        return null;\n      }\n      population *= subRowCount;\n    }\n\n    \r\n    \r\n    \r\n    return RelMdUtil.numDistinctVals(population, mq.getRowCount(rel));\n  }\n","date":"2021-04-15 07:54:21","endLine":155,"groupId":"121910","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getPopulationSize","params":"(Projectrel@RelMetadataQuerymq@ImmutableBitSetgroupKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7c/34639f22571691079775b6273a15c56c2f6bb1.src","preCode":"  public @Nullable Double getPopulationSize(Project rel, RelMetadataQuery mq,\n      ImmutableBitSet groupKey) {\n    ImmutableBitSet.Builder baseCols = ImmutableBitSet.builder();\n    ImmutableBitSet.Builder projCols = ImmutableBitSet.builder();\n    List<RexNode> projExprs = rel.getProjects();\n    RelMdUtil.splitCols(projExprs, groupKey, baseCols, projCols);\n\n    Double population =\n        mq.getPopulationSize(rel.getInput(), baseCols.build());\n    if (population == null) {\n      return null;\n    }\n\n    \r\n    \r\n    if (projCols.cardinality() == 0) {\n      return population;\n    }\n\n    for (int bit : projCols.build()) {\n      Double subRowCount =\n          RelMdUtil.cardOfProjExpr(mq, rel, projExprs.get(bit));\n      if (subRowCount == null) {\n        return null;\n      }\n      population *= subRowCount;\n    }\n\n    \r\n    \r\n    \r\n    return RelMdUtil.numDistinctVals(population, mq.getRowCount(rel));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":6,"curCode":"  public @Nullable Double getSelectivity(Project rel, RelMetadataQuery mq,\n      @Nullable RexNode predicate) {\n    final List<RexNode> notPushable = new ArrayList<>();\n    final List<RexNode> pushable = new ArrayList<>();\n    RelOptUtil.splitFilters(\n        ImmutableBitSet.range(rel.getRowType().getFieldCount()),\n        predicate,\n        pushable,\n        notPushable);\n    final RexBuilder rexBuilder = rel.getCluster().getRexBuilder();\n    RexNode childPred =\n        RexUtil.composeConjunction(rexBuilder, pushable, true);\n\n    RexNode modifiedPred;\n    if (childPred == null) {\n      modifiedPred = null;\n    } else {\n      modifiedPred = RelOptUtil.pushPastProject(childPred, rel);\n    }\n    Double selectivity = mq.getSelectivity(rel.getInput(), modifiedPred);\n    if (selectivity == null) {\n      return null;\n    } else {\n      RexNode pred =\n          RexUtil.composeConjunction(rexBuilder, notPushable, true);\n      return selectivity * RelMdUtil.guessSelectivity(pred);\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":218,"groupId":"121910","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getSelectivity","params":"(Projectrel@RelMetadataQuerymq@@NullableRexNodepredicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/40/60d357e7a9742d9a7ea54747657180ace8f1d2.src","preCode":"  public @Nullable Double getSelectivity(Project rel, RelMetadataQuery mq,\n      @Nullable RexNode predicate) {\n    final List<RexNode> notPushable = new ArrayList<>();\n    final List<RexNode> pushable = new ArrayList<>();\n    RelOptUtil.splitFilters(\n        ImmutableBitSet.range(rel.getRowType().getFieldCount()),\n        predicate,\n        pushable,\n        notPushable);\n    final RexBuilder rexBuilder = rel.getCluster().getRexBuilder();\n    RexNode childPred =\n        RexUtil.composeConjunction(rexBuilder, pushable, true);\n\n    RexNode modifiedPred;\n    if (childPred == null) {\n      modifiedPred = null;\n    } else {\n      modifiedPred = RelOptUtil.pushPastProject(childPred, rel);\n    }\n    Double selectivity = mq.getSelectivity(rel.getInput(), modifiedPred);\n    if (selectivity == null) {\n      return null;\n    } else {\n      RexNode pred =\n          RexUtil.composeConjunction(rexBuilder, notPushable, true);\n      return selectivity * RelMdUtil.guessSelectivity(pred);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/metadata/RelMdSelectivity.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"}],"commitId":"70d59fedfdb9fc956f3b1d1764833cbded7ae44d","commitMessage":"@@@[CALCITE-4511] Distinct row count and population size for constant columns should be 1\n\nClose apache/calcite#2355\n","date":"2021-04-15 07:54:21","modifiedFileCount":"4","status":"M","submitter":"liyafan82"}]
