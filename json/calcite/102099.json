[{"authorTime":"2015-12-08 09:47:31","codes":[{"authorDate":"2015-12-01 16:05:55","commitOrder":2,"curCode":"  private void addSelect(\n      List<SqlNode> selectList, SqlNode node, RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (name.toLowerCase().startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(name.toLowerCase(), node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","date":"2015-12-10 05:35:29","endLine":452,"groupId":"1698","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/f9ab0f87716bf182f26ef6c66324dd1425f8fe.src","preCode":"  private void addSelect(\n      List<SqlNode> selectList, SqlNode node, RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (name.toLowerCase().startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(name.toLowerCase(), node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"NB"},{"authorDate":"2015-12-08 09:47:31","commitOrder":2,"curCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","date":"2015-12-10 05:40:24","endLine":196,"groupId":"6312","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dc/ae6b1c3867bbffdd407ef841e474f70f670dda.src","preCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"980d9f811af4e0ff32fc1487e469a51585db48a6","commitMessage":"@@@Move code from JdbcImplementor and JdbcRules to new class SqlImplementor\n","date":"2015-12-10 05:40:24","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-12-08 09:47:31","codes":[{"authorDate":"2015-12-08 11:06:26","commitOrder":3,"curCode":"  @Override public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (name.toLowerCase().startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(name.toLowerCase(), node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","date":"2015-12-10 05:58:00","endLine":290,"groupId":"1698","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9a/7f359d70d4e057f35dabf2b6f92fc07435412d.src","preCode":"  private void addSelect(\n      List<SqlNode> selectList, SqlNode node, RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (name.toLowerCase().startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(name.toLowerCase(), node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2015-12-08 09:47:31","commitOrder":3,"curCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","date":"2015-12-10 05:40:24","endLine":196,"groupId":"6312","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dc/ae6b1c3867bbffdd407ef841e474f70f670dda.src","preCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"47e0e7c952aed22dd237529bb459a59580034f91","commitMessage":"@@@Remove redundant code from RelToSqlConverter\n\nChange default of Context.ignoreCast to false.  otherwise\nJdbcTest.testVarcharEquals fails. Strip casts inside comparisons.\n\nUse dispatcher rather visitor pattern.\n\nJdbcRel.implement methods delegate to JdbcImplementor (using code\ninherited from RelToSqlConverter).\n","date":"2015-12-10 05:58:00","modifiedFileCount":"5","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-12-08 09:47:31","codes":[{"authorDate":"2017-03-03 16:05:23","commitOrder":4,"curCode":"  @Override public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    final String lowerName = name.toLowerCase(Locale.ROOT);\n    if (lowerName.startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(lowerName, node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","date":"2017-03-04 03:04:28","endLine":371,"groupId":"9636","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/cfac719e4c0527cbd9af3532e9306a28fa9411.src","preCode":"  @Override public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (name.toLowerCase().startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(name.toLowerCase(), node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"},{"authorDate":"2015-12-08 09:47:31","commitOrder":4,"curCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","date":"2015-12-10 05:40:24","endLine":196,"groupId":"6312","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dc/ae6b1c3867bbffdd407ef841e474f70f670dda.src","preCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"75152c5b7fd62f60c6cdfb86605af8b34a129898","commitMessage":"@@@[CALCITE-1667] Forbid calls to JDK APIs that use the default locale.  time zone or character set\n\nUse the \"forbidden-apis\" maven plugin to detect calls to such APIs.\nEliminate calls to such APIs.\n","date":"2017-03-04 03:04:28","modifiedFileCount":"79","status":"M","submitter":"Julian Hyde"},{"authorTime":"2015-12-08 09:47:31","codes":[{"authorDate":"2017-03-13 19:11:19","commitOrder":5,"curCode":"  @Override public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    final String lowerName = name.toLowerCase(Locale.ROOT);\n    if (lowerName.startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(lowerName, node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = as(node, name);\n    }\n    selectList.add(node);\n  }\n","date":"2017-04-02 11:43:28","endLine":422,"groupId":"9636","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ec/b75a01c78b91cd8e6228c667863ae0b375d5c3.src","preCode":"  @Override public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    final String lowerName = name.toLowerCase(Locale.ROOT);\n    if (lowerName.startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(lowerName, node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"M"},{"authorDate":"2015-12-08 09:47:31","commitOrder":5,"curCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","date":"2015-12-10 05:40:24","endLine":196,"groupId":"6312","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dc/ae6b1c3867bbffdd407ef841e474f70f670dda.src","preCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"4d20d62d4d752ce4de29a002ec313a758a7cee6e","commitMessage":"@@@[CALCITE-1642] Support MEASURES clause in MATCH_RECOGNIZE (Zhiqiang-He)\n\nClose apache/calcite#400\n","date":"2017-04-02 11:43:28","modifiedFileCount":"15","status":"M","submitter":"Zhiqiang-He"},{"authorTime":"2019-07-13 05:33:12","codes":[{"authorDate":"2017-03-13 19:11:19","commitOrder":6,"curCode":"  @Override public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    final String lowerName = name.toLowerCase(Locale.ROOT);\n    if (lowerName.startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(lowerName, node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = as(node, name);\n    }\n    selectList.add(node);\n  }\n","date":"2017-04-02 11:43:28","endLine":422,"groupId":"9636","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ec/b75a01c78b91cd8e6228c667863ae0b375d5c3.src","preCode":"  @Override public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    final String lowerName = name.toLowerCase(Locale.ROOT);\n    if (lowerName.startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(lowerName, node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = as(node, name);\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"N"},{"authorDate":"2019-07-13 05:33:12","commitOrder":6,"curCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = as(node, name);\n    }\n    selectList.add(node);\n  }\n","date":"2019-08-04 04:30:59","endLine":129,"groupId":"6312","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cc/a13f7fa89da1b5e91eae44cf4d9eb29133264e.src","preCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = SqlStdOperatorTable.AS.createCall(\n          POS, node, new SqlIdentifier(name, POS));\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"c3108bc1231b2aa4ba25227d225544fef4576508","commitMessage":"@@@[CALCITE-3191] In JDBC adapter for MySQL.  implement Values by generating SELECT without FROM\n\nRevisit SqlDialect methods supportsAliasedValues() and hasImplicitTableAlias();\nmake requiresAliasForFromItems() public (was protected). \nand add List<String> getSingleRowTableName().\n","date":"2019-08-04 04:30:59","modifiedFileCount":"7","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-07-13 05:33:12","codes":[{"authorDate":"2020-01-22 07:53:03","commitOrder":7,"curCode":"  @Override public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = as(node, name);\n    }\n    selectList.add(node);\n  }\n","date":"2020-01-30 07:35:36","endLine":921,"groupId":"102099","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/6d1df4440b27e3fe7456c7a14b01bca3314d4c.src","preCode":"  @Override public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    final String lowerName = name.toLowerCase(Locale.ROOT);\n    if (lowerName.startsWith(\"expr$\")) {\n      \r\n      ordinalMap.put(lowerName, node);\n    } else if (alias == null || !alias.equals(name)) {\n      node = as(node, name);\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":913,"status":"M"},{"authorDate":"2019-07-13 05:33:12","commitOrder":7,"curCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = as(node, name);\n    }\n    selectList.add(node);\n  }\n","date":"2019-08-04 04:30:59","endLine":129,"groupId":"102099","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"addSelect","params":"(List<SqlNode>selectList@SqlNodenode@RelDataTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cc/a13f7fa89da1b5e91eae44cf4d9eb29133264e.src","preCode":"  public void addSelect(List<SqlNode> selectList, SqlNode node,\n      RelDataType rowType) {\n    String name = rowType.getFieldNames().get(selectList.size());\n    String alias = SqlValidatorUtil.getAlias(node, -1);\n    if (alias == null || !alias.equals(name)) {\n      node = as(node, name);\n    }\n    selectList.add(node);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"3c9e156aea4a246318e1fa9ea299adfc9479e20e","commitMessage":"@@@[CALCITE-3751] JDBC adapter generates SQL with wrong aliases in GROUP BY ... ORDER BY query\n\nIn this particular query.  RelToSqlConverter would generate something like\n\n  SELECT x.  SUM(y) FROM (\n    SELECT x.  SUM(y)\n    FROM t\n    GROUP BY x)\n  ORDER BY 2\n\nNote that 'SUM(y)' in the outer query is invalid; we should have\ngenerated an alias for the 'SUM(y)' in the inner query.  and\nreferred to that.\n\nThe problem was a 'ordinalMap'.  that maps columns called\n'EXPR$n' to corresponding SqlNode. This map was global to the\nRelToSqlConverter.  so sometimes expressions would be used in\nthe wrong context.\n\nI removed 'ordinalMap' and added a flag 'anon' which says whether\na consumer (e.g. INSERT or UNION or an enclosing SELECT) cares\nabout column names. If not.  we remove trivial aliases like 'EXPR$0'. \nto make the SQL less noisy.\n","date":"2020-01-30 07:35:36","modifiedFileCount":"5","status":"M","submitter":"Julian Hyde"}]
