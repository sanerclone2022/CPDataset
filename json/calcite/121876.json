[{"authorTime":"2017-02-02 11:43:46","codes":[{"authorDate":"2017-02-02 11:43:46","commitOrder":1,"curCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      try {\n        counts.add(cache.get(column));\n      } catch (UncheckedExecutionException | ExecutionException e) {\n        Util.throwIfUnchecked(e.getCause());\n        throw new RuntimeException(e.getCause());\n      }\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","date":"2017-11-29 02:20:25","endLine":64,"groupId":"15910","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cardinality","params":"(List<Lattice.Column>columns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/21/c6fed012e88424d6269572d52a0df65692cd8f.src","preCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      try {\n        counts.add(cache.get(column));\n      } catch (UncheckedExecutionException | ExecutionException e) {\n        Util.throwIfUnchecked(e.getCause());\n        throw new RuntimeException(e.getCause());\n      }\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2017-02-02 11:43:46","commitOrder":1,"curCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      counts.add(cardinality(lattice, column));\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","date":"2017-11-29 02:20:25","endLine":63,"groupId":"89","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cardinality","params":"(List<Lattice.Column>columns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8e/5b19df499493a106b1256243ff2fd53dd58e03.src","preCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      counts.add(cardinality(lattice, column));\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"}],"commitId":"dad581868b815510389f61936b0c583be93d5dc5","commitMessage":"@@@[CALCITE-1616] Data profiler\n\nProfiler does not work on JDK 7.  because it relies on\ncom.yahoo.datasketches:sketches-core:0.9.0.  which needs JDK 8 or\nhigher. Therefore some tests are disabled on JDK 7.\n\nChange interface LatticeStatisticProvider to estimate joint rather\nthan singleton cardinality.\n\nBind LatticeStatisticProvider to a Lattice.  and create\nLatticeStatisticProvider.Factory to do the binding.\n\nKeep results only if they are sufficiently \"surprising\" (informative).\nThe \"surprise queue\" is FIFO and holds the top N accepted values. \nafter a warm-up period\n\nPartiallyOrderedSet: find \"hypothetical\" parents and children of\nelements not in the set.\n","date":"2017-11-29 02:20:25","modifiedFileCount":"14","status":"B","submitter":"Julian Hyde"},{"authorTime":"2017-02-02 11:43:46","codes":[{"authorDate":"2020-09-05 06:21:27","commitOrder":2,"curCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      try {\n        counts.add(cache.get(column));\n      } catch (UncheckedExecutionException | ExecutionException e) {\n        throw Util.throwAsRuntime(Util.causeOrSelf(e));\n      }\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","date":"2020-09-06 01:13:11","endLine":57,"groupId":"843","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cardinality","params":"(List<Lattice.Column>columns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/54/4cba28d3b255ca40b67d6fb8009f5a6ace43b0.src","preCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      try {\n        counts.add(cache.get(column));\n      } catch (UncheckedExecutionException | ExecutionException e) {\n        Util.throwIfUnchecked(e.getCause());\n        throw new RuntimeException(e.getCause());\n      }\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2017-02-02 11:43:46","commitOrder":2,"curCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      counts.add(cardinality(lattice, column));\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","date":"2017-11-29 02:20:25","endLine":63,"groupId":"89","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cardinality","params":"(List<Lattice.Column>columns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8e/5b19df499493a106b1256243ff2fd53dd58e03.src","preCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      counts.add(cardinality(lattice, column));\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"}],"commitId":"eaf0edfc38c095e733cb37614333dfb7415f331a","commitMessage":"@@@[CALCITE-4229] Add Util.throwAsRuntime and Util.causeOrSelf to simplify exception re-throwing\n","date":"2020-09-06 01:13:11","modifiedFileCount":"13","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      try {\n        counts.add(cache.get(column));\n      } catch (UncheckedExecutionException | ExecutionException e) {\n        throw Util.throwAsRuntime(Util.causeOrSelf(e));\n      }\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","date":"2020-10-07 05:42:47","endLine":57,"groupId":"121876","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"cardinality","params":"(List<Lattice.Column>columns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5b/20859537bad515bcd8e16cb0fbe32a7f5296bc.src","preCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      try {\n        counts.add(cache.get(column));\n      } catch (UncheckedExecutionException | ExecutionException e) {\n        throw Util.throwAsRuntime(Util.causeOrSelf(e));\n      }\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      counts.add(cardinality(lattice, column));\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","date":"2020-10-07 05:42:47","endLine":55,"groupId":"121876","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"cardinality","params":"(List<Lattice.Column>columns)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/21/802ad3828645f56ec88e54896255feeaed014d.src","preCode":"  public double cardinality(List<Lattice.Column> columns) {\n    final List<Double> counts = new ArrayList<>();\n    for (Lattice.Column column : columns) {\n      counts.add(cardinality(lattice, column));\n    }\n    return (int) Lattice.getRowCount(lattice.getFactRowCount(), counts);\n  }\n","realPath":"core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
