[{"authorTime":"2019-02-22 18:30:45","codes":[{"authorDate":"2019-07-26 18:41:29","commitOrder":8,"curCode":"  @Test public void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-07-26 18:41:29","endLine":156,"groupId":"5319","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetadataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/02/b3ad0d5008a0228c8f3ee8b0550059f0beed2c.src","preCode":"  @Test public void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"},{"authorDate":"2019-02-22 18:30:45","commitOrder":8,"curCode":"  @Test public void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP_WITH_LOCAL_TIME_ZONE(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2019-02-28 18:05:41","endLine":396,"groupId":"5319","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetadataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/bcaf66b5ffeb486685fa6de69c7fd9d137d6d9.src","preCode":"  @Test public void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP_WITH_LOCAL_TIME_ZONE(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"NB"}],"commitId":"689a5bbb14614d3f8eef4a4f7e832c6c02029b3c","commitMessage":"@@@Update stale tests in DruidAdapter\n\n1. Adapt plans based on the improvements in the simplifier and elsewhere.\n2. Rename DruidAdapterIT2 to DruidAdapterIT to be run in integration tests.\n","date":"2019-07-26 18:41:29","modifiedFileCount":"1","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":9,"curCode":"  @Test void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":146,"groupId":"5319","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetadataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/fa4337f27a4c651cca27b069aed6b60ee0e782.src","preCode":"  @Test public void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":9,"curCode":"  @Test void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP_WITH_LOCAL_TIME_ZONE(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2020-04-06 04:57:49","endLine":386,"groupId":"5319","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetadataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7a/4c255a8931d21fca61278e3f99936a6e0b3678.src","preCode":"  @Test public void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP_WITH_LOCAL_TIME_ZONE(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-02 20:03:04","codes":[{"authorDate":"2020-09-02 20:03:04","commitOrder":10,"curCode":"  @Test void testMetadataColumns() {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2020-09-10 06:10:51","endLine":131,"groupId":"10273","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetadataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/8519ef60db18fa1014ce4dd0edd2ba92fdac46.src","preCode":"  @Test void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapter2IT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-09-02 20:03:04","commitOrder":10,"curCode":"  @Test void testMetadataColumns() {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP_WITH_LOCAL_TIME_ZONE(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","date":"2020-09-10 06:10:51","endLine":373,"groupId":"10273","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetadataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/6b77d9b672809ecfc2e172114c945d84e25321.src","preCode":"  @Test void testMetadataColumns() throws Exception {\n    sql(\"values 1\")\n        .withConnection(c -> {\n          try {\n            final DatabaseMetaData metaData = c.getMetaData();\n            final ResultSet r =\n                metaData.getColumns(null, null, \"foodmart\", null);\n            Multimap<String, Boolean> map = ArrayListMultimap.create();\n            while (r.next()) {\n              map.put(r.getString(\"TYPE_NAME\"), true);\n            }\n            if (CalciteSystemProperty.DEBUG.value()) {\n              System.out.println(map);\n            }\n            \r\n            assertThat(map.keySet().size(), is(4));\n            assertThat(map.values().size(), is(92));\n            assertThat(map.get(\"TIMESTAMP_WITH_LOCAL_TIME_ZONE(0) NOT NULL\").size(), is(1));\n            assertThat(map.get(\"DOUBLE\").size(), is(2));\n            assertThat(map.get(\"BIGINT\").size(), is(1));\n            assertThat(map.get(VARCHAR_TYPE).size(), is(88));\n          } catch (SQLException e) {\n            throw TestUtil.rethrow(e);\n          }\n        });\n  }\n","realPath":"druid/src/test/java/org/apache/calcite/test/DruidAdapterIT.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"}],"commitId":"32ac7311cef3aa539538a069026d21b1a31f1d24","commitMessage":"@@@Minor refactoring of DruidAdapterIT and DruidAdapter2IT\n\n1. Remove unecessary escaping of \\'\n2. Methods always called with the same literals\n3. Remove exceptions never thrown from method signatures\n","date":"2020-09-10 06:10:51","modifiedFileCount":"2","status":"M","submitter":"Stamatis Zampetakis"}]
