[{"authorTime":"2014-12-30 09:40:39","codes":[{"authorDate":"2014-12-30 09:40:39","commitOrder":1,"curCode":"  static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setExtendedClass(Utilities.class);\n    cbe.setImplementedInterfaces(\n        fieldCount == 1\n            ? new Class[] {Bindable.class, Typed.class}\n            : new Class[] {ArrayBindable.class});\n    cbe.setParentClassLoader(EnumerableInterpretable.class.getClassLoader());\n    if (CalcitePrepareImpl.DEBUG) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Bindable) cbe.createInstance(new StringReader(s));\n  }\n","date":"2015-01-22 07:57:37","endLine":141,"groupId":"4414","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getBindable","params":"(ClassDeclarationexpr@Strings@intfieldCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/19/d5f2a1812e2c12babc85a97fa3afb81c27d2cf.src","preCode":"  static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setExtendedClass(Utilities.class);\n    cbe.setImplementedInterfaces(\n        fieldCount == 1\n            ? new Class[] {Bindable.class, Typed.class}\n            : new Class[] {ArrayBindable.class});\n    cbe.setParentClassLoader(EnumerableInterpretable.class.getClassLoader());\n    if (CalcitePrepareImpl.DEBUG) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Bindable) cbe.createInstance(new StringReader(s));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2014-12-30 09:40:39","commitOrder":1,"curCode":"  static Scalar getScalar(ClassDeclaration expr, String s)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setImplementedInterfaces(new Class[]{Scalar.class});\n    cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());\n    if (CalcitePrepareImpl.DEBUG) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Scalar) cbe.createInstance(new StringReader(s));\n  }\n","date":"2015-01-22 07:57:37","endLine":188,"groupId":"12236","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getScalar","params":"(ClassDeclarationexpr@Strings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/49/1efa95c1a4c768de87488aa38167e59cd8ebd3.src","preCode":"  static Scalar getScalar(ClassDeclaration expr, String s)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setImplementedInterfaces(new Class[]{Scalar.class});\n    cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());\n    if (CalcitePrepareImpl.DEBUG) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Scalar) cbe.createInstance(new StringReader(s));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"66cfb120fca58e4c809748e2bcef4d3d5a7c6b82","commitMessage":"@@@[CALCITE-544] Implement Union in Interpreter;\n[CALCITE-562] Implement inner JOIN in interpreter and improve handling of scalar expressions\n\nAlso.  progress towards [CALCITE-558] Add BINDABLE convention and make it the default convention for query root.  but currently ENUMERABLE is still the default. You can enable BINDABLE by setting CalcitePrepareImpl.ENABLE_BINDABLE; there are 184 test failures.\n\nNew interface ArrayBindable extends Bindable. Unlike Bindable the return is guaranteed to be an Object[]. Enumerable convention expects generated code to return a Bindable.  which might return custom classes or arrays.  and if there is a single column.  the array is optimized to the raw column value. Bindable convention assumes that relational expressions implement ArrayBindable and return arrays of column values; the arrays are not optimized if there is only one column.\n\nNew interface Scalar represents a compiled way to execute a scalar expression (or expressions) and is easily built from a RexNode or AggregateCall.\n\nClose apache/incubator-calcite#43\n","date":"2015-01-22 07:57:37","modifiedFileCount":"53","status":"B","submitter":"Julian Hyde"},{"authorTime":"2019-02-22 18:30:45","codes":[{"authorDate":"2019-02-22 18:30:45","commitOrder":2,"curCode":"  static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setExtendedClass(Utilities.class);\n    cbe.setImplementedInterfaces(\n        fieldCount == 1\n            ? new Class[] {Bindable.class, Typed.class}\n            : new Class[] {ArrayBindable.class});\n    cbe.setParentClassLoader(EnumerableInterpretable.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Bindable) cbe.createInstance(new StringReader(s));\n  }\n","date":"2019-02-28 18:05:41","endLine":141,"groupId":"4414","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getBindable","params":"(ClassDeclarationexpr@Strings@intfieldCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/be/afd4c118c32d49ab7613c3603c30128f3a254c.src","preCode":"  static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setExtendedClass(Utilities.class);\n    cbe.setImplementedInterfaces(\n        fieldCount == 1\n            ? new Class[] {Bindable.class, Typed.class}\n            : new Class[] {ArrayBindable.class});\n    cbe.setParentClassLoader(EnumerableInterpretable.class.getClassLoader());\n    if (CalcitePrepareImpl.DEBUG) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Bindable) cbe.createInstance(new StringReader(s));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2019-02-22 18:30:45","commitOrder":2,"curCode":"  static Scalar getScalar(ClassDeclaration expr, String s)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setImplementedInterfaces(new Class[]{Scalar.class});\n    cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Scalar) cbe.createInstance(new StringReader(s));\n  }\n","date":"2019-02-28 18:05:41","endLine":177,"groupId":"12236","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getScalar","params":"(ClassDeclarationexpr@Strings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/73f6b304cc7d1d466e2461652d09003ffad16d.src","preCode":"  static Scalar getScalar(ClassDeclaration expr, String s)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setImplementedInterfaces(new Class[]{Scalar.class});\n    cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());\n    if (CalcitePrepareImpl.DEBUG) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Scalar) cbe.createInstance(new StringReader(s));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"280642a02a4bcfd1fb9cbe8c5ab672d3619860e7","commitMessage":"@@@[CALCITE-2859] Centralize Calcite system properties\n\n1. Move all system properties with \"calcite\" namespace under a common class.\n2. Improve the documentation (javadoc) of existing properties.\n3. Add review comments regarding a few properties.\n4. Deprecate SaffronProperties and move them all under CalciteSystemProperty.\n","date":"2019-02-28 18:05:41","modifiedFileCount":"58","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2019-02-22 18:30:45","codes":[{"authorDate":"2018-12-01 00:26:26","commitOrder":3,"curCode":"  static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n      throws CompileException, IOException, ExecutionException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    final IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setExtendedClass(Utilities.class);\n    cbe.setImplementedInterfaces(\n        fieldCount == 1\n            ? new Class[] {Bindable.class, Typed.class}\n            : new Class[] {ArrayBindable.class});\n    cbe.setParentClassLoader(EnumerableInterpretable.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n\n    if (CalciteSystemProperty.BINDABLE_CACHE_MAX_SIZE.value() != 0) {\n      StaticFieldDetector detector = new StaticFieldDetector();\n      expr.accept(detector);\n      if (!detector.containsStaticField) {\n        return BINDABLE_CACHE.get(s, () -> (Bindable) cbe.createInstance(new StringReader(s)));\n      }\n    }\n    return (Bindable) cbe.createInstance(new StringReader(s));\n  }\n","date":"2019-02-28 23:58:55","endLine":162,"groupId":"4414","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getBindable","params":"(ClassDeclarationexpr@Strings@intfieldCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/86/ed35c4f2d021ae392cb048f58a2c61ba124b23.src","preCode":"  static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setExtendedClass(Utilities.class);\n    cbe.setImplementedInterfaces(\n        fieldCount == 1\n            ? new Class[] {Bindable.class, Typed.class}\n            : new Class[] {ArrayBindable.class});\n    cbe.setParentClassLoader(EnumerableInterpretable.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Bindable) cbe.createInstance(new StringReader(s));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2019-02-22 18:30:45","commitOrder":3,"curCode":"  static Scalar getScalar(ClassDeclaration expr, String s)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setImplementedInterfaces(new Class[]{Scalar.class});\n    cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Scalar) cbe.createInstance(new StringReader(s));\n  }\n","date":"2019-02-28 18:05:41","endLine":177,"groupId":"12236","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getScalar","params":"(ClassDeclarationexpr@Strings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/73f6b304cc7d1d466e2461652d09003ffad16d.src","preCode":"  static Scalar getScalar(ClassDeclaration expr, String s)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setImplementedInterfaces(new Class[]{Scalar.class});\n    cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Scalar) cbe.createInstance(new StringReader(s));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"N"}],"commitId":"e14cef28af2b4f0aac5c3876aa7023053e294ee1","commitMessage":"@@@[CALCITE-2703] Reduce code generation and class loading overhead when executing queries in the EnumerableConvention\n\n1. Add a configurable Guava cache in EnumerableInterpretable#getBindable to re-use Bindable instances.\n2. Avoid caching instances of classes with static fields.\n3. Add JMH benchmark for the expensive part of EnumerableInterpretable#getBindable method.\n4. Add utility method for obtaining integer runtime properties.\n5. NPE in VisitorImpl when visiting a FieldDeclaration without an initializer.\n","date":"2019-02-28 23:58:55","modifiedFileCount":"3","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2021-03-30 01:42:19","codes":[{"authorDate":"2018-12-01 00:26:26","commitOrder":4,"curCode":"  static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n      throws CompileException, IOException, ExecutionException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    final IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setExtendedClass(Utilities.class);\n    cbe.setImplementedInterfaces(\n        fieldCount == 1\n            ? new Class[] {Bindable.class, Typed.class}\n            : new Class[] {ArrayBindable.class});\n    cbe.setParentClassLoader(EnumerableInterpretable.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n\n    if (CalciteSystemProperty.BINDABLE_CACHE_MAX_SIZE.value() != 0) {\n      StaticFieldDetector detector = new StaticFieldDetector();\n      expr.accept(detector);\n      if (!detector.containsStaticField) {\n        return BINDABLE_CACHE.get(s, () -> (Bindable) cbe.createInstance(new StringReader(s)));\n      }\n    }\n    return (Bindable) cbe.createInstance(new StringReader(s));\n  }\n","date":"2019-02-28 23:58:55","endLine":162,"groupId":"102159","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getBindable","params":"(ClassDeclarationexpr@Strings@intfieldCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/86/ed35c4f2d021ae392cb048f58a2c61ba124b23.src","preCode":"  static Bindable getBindable(ClassDeclaration expr, String s, int fieldCount)\n      throws CompileException, IOException, ExecutionException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    final IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setExtendedClass(Utilities.class);\n    cbe.setImplementedInterfaces(\n        fieldCount == 1\n            ? new Class[] {Bindable.class, Typed.class}\n            : new Class[] {ArrayBindable.class});\n    cbe.setParentClassLoader(EnumerableInterpretable.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n\n    if (CalciteSystemProperty.BINDABLE_CACHE_MAX_SIZE.value() != 0) {\n      StaticFieldDetector detector = new StaticFieldDetector();\n      expr.accept(detector);\n      if (!detector.containsStaticField) {\n        return BINDABLE_CACHE.get(s, () -> (Bindable) cbe.createInstance(new StringReader(s)));\n      }\n    }\n    return (Bindable) cbe.createInstance(new StringReader(s));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"N"},{"authorDate":"2021-03-30 01:42:19","commitOrder":4,"curCode":"  static Scalar.Producer getScalar(ClassDeclaration expr, String s)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setImplementedInterfaces(new Class[] {Scalar.Producer.class});\n    cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Scalar.Producer) cbe.createInstance(new StringReader(s));\n  }\n","date":"2021-04-19 16:25:06","endLine":217,"groupId":"102159","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"getScalar","params":"(ClassDeclarationexpr@Strings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8f/244459bbc77389e9c8e1ab5734458636733965.src","preCode":"  static Scalar getScalar(ClassDeclaration expr, String s)\n      throws CompileException, IOException {\n    ICompilerFactory compilerFactory;\n    try {\n      compilerFactory = CompilerFactoryFactory.getDefaultCompilerFactory();\n    } catch (Exception e) {\n      throw new IllegalStateException(\n          \"Unable to instantiate java compiler\", e);\n    }\n    IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();\n    cbe.setClassName(expr.name);\n    cbe.setImplementedInterfaces(new Class[]{Scalar.class});\n    cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());\n    if (CalciteSystemProperty.DEBUG.value()) {\n      \r\n      cbe.setDebuggingInformation(true, true, true);\n    }\n    return (Scalar) cbe.createInstance(new StringReader(s));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"b2e9e6cba1e2ce28368d1281f527a9e53f4628ca","commitMessage":"@@@[CALCITE-4564] Initialization context for non-static user-defined functions (UDFs)\n\nWhen Interpreter or code generated by RexToLixTranslator calls\na UDF.  invoke its constructor only once. There will therefore\nbe one instance of the UDF for the whole execution.  and that\ninstance can be used to store state. Typical state will be\npreparation work (e.g. compiling a regular expression) to make\neach invocation faster.\n\nAdd 'interface FunctionContext' (marked as experimental). If\na UDF has a public constructor with FunctionContext as a\nparameter.  this will be called in preference to the default\nconstructor.\n\nIn InterpreterTest.  allow more than one query to be executed\nper test method.\n\nClose apache/calcite#2395\n","date":"2021-04-19 16:25:06","modifiedFileCount":"24","status":"M","submitter":"Julian Hyde"}]
