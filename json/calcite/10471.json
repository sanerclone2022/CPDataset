[{"authorTime":"2016-06-07 14:03:08","codes":[{"authorDate":"2016-03-04 10:39:39","commitOrder":2,"curCode":"  private void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n        \r\n    }\n  }\n","date":"2016-04-22 08:26:48","endLine":246,"groupId":"644","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"expectObjectField","params":"(JsonParserparser@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/462b6812ea4cbea3f8e6fc1f315d4f546f88f1.src","preCode":"  private void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n        \r\n    }\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"NB"},{"authorDate":"2016-06-07 14:03:08","commitOrder":2,"curCode":"  private InputStream traceResponse(InputStream in) {\n    if (CalcitePrepareImpl.DEBUG) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \" + new String(bytes));\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw Throwables.propagate(e);\n      }\n    }\n    return in;\n  }\n","date":"2016-06-09 08:35:03","endLine":373,"groupId":"3360","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"traceResponse","params":"(InputStreamin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dc/cda9f752ca679def65ef2914187c197519b53d.src","preCode":"  private InputStream traceResponse(InputStream in) {\n    if (CalcitePrepareImpl.DEBUG) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \" + new String(bytes));\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw Throwables.propagate(e);\n      }\n    }\n    return in;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"B"}],"commitId":"435e203028a872933c6d8bd6404ebc445552e599","commitMessage":"@@@[CALCITE-1276] In Druid adapter.  deduce tables and columns if not specified\n\nDeduce tables by calling /druid/coordinator/v1/metadata/datasources;\ncolumns by running a \"segmentMetadata\" query.\n","date":"2016-06-09 08:35:03","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-01-23 17:38:12","codes":[{"authorDate":"2016-03-04 10:39:39","commitOrder":3,"curCode":"  private void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n        \r\n    }\n  }\n","date":"2016-04-22 08:26:48","endLine":246,"groupId":"644","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"expectObjectField","params":"(JsonParserparser@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/462b6812ea4cbea3f8e6fc1f315d4f546f88f1.src","preCode":"  private void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n        \r\n    }\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"},{"authorDate":"2017-01-23 17:38:12","commitOrder":3,"curCode":"  private InputStream traceResponse(InputStream in) {\n    if (CalcitePrepareImpl.DEBUG) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \" + new String(bytes));\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return in;\n  }\n","date":"2017-01-26 03:00:12","endLine":524,"groupId":"3360","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"traceResponse","params":"(InputStreamin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/07/740c28c713a02fe4a9ae6306c0858458cb28c9.src","preCode":"  private InputStream traceResponse(InputStream in) {\n    if (CalcitePrepareImpl.DEBUG) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \" + new String(bytes));\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw Throwables.propagate(e);\n      }\n    }\n    return in;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"}],"commitId":"603648bc2466ab699fa6646ffc1ad717b8c11880","commitMessage":"@@@[CALCITE-1597] Obsolete Util.newInternal.  .pre.  .post.  .permAssert and Throwables.propagate\n\nReplace Util.newInternal with new AssertionError in some contexts. \nnew RuntimeException in others. Replace methods pre.  pos.  permAssert\nin Util with methods in Preconditions.\n\nRemove uses of Throwables.propagate and .propagateIfPossible because\nthey are deprecated as of Guava 20. Create method\nUtil.throwIfUnchecked because we can't use Guava's\nThrowables.throwIfUnchecked yet.\n","date":"2017-01-26 03:00:12","modifiedFileCount":"82","status":"M","submitter":"Julian Hyde"},{"authorTime":"2017-03-03 16:05:23","codes":[{"authorDate":"2016-03-04 10:39:39","commitOrder":4,"curCode":"  private void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n        \r\n    }\n  }\n","date":"2016-04-22 08:26:48","endLine":246,"groupId":"644","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"expectObjectField","params":"(JsonParserparser@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/462b6812ea4cbea3f8e6fc1f315d4f546f88f1.src","preCode":"  private void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n        \r\n    }\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"},{"authorDate":"2017-03-03 16:05:23","commitOrder":4,"curCode":"  private InputStream traceResponse(InputStream in) {\n    if (CalcitePrepareImpl.DEBUG) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \"\n            + new String(bytes, StandardCharsets.UTF_8));\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return in;\n  }\n","date":"2017-03-04 03:04:28","endLine":531,"groupId":"12534","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"traceResponse","params":"(InputStreamin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/03/6a2e1d5da03c44cbc0db16305d719754822ba4.src","preCode":"  private InputStream traceResponse(InputStream in) {\n    if (CalcitePrepareImpl.DEBUG) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \" + new String(bytes));\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return in;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"75152c5b7fd62f60c6cdfb86605af8b34a129898","commitMessage":"@@@[CALCITE-1667] Forbid calls to JDK APIs that use the default locale.  time zone or character set\n\nUse the \"forbidden-apis\" maven plugin to detect calls to such APIs.\nEliminate calls to such APIs.\n","date":"2017-03-04 03:04:28","modifiedFileCount":"79","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-02-22 18:30:45","codes":[{"authorDate":"2016-03-04 10:39:39","commitOrder":5,"curCode":"  private void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n        \r\n    }\n  }\n","date":"2016-04-22 08:26:48","endLine":246,"groupId":"644","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"expectObjectField","params":"(JsonParserparser@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/462b6812ea4cbea3f8e6fc1f315d4f546f88f1.src","preCode":"  private void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n        \r\n    }\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"},{"authorDate":"2019-02-22 18:30:45","commitOrder":5,"curCode":"  private InputStream traceResponse(InputStream in) {\n    if (CalciteSystemProperty.DEBUG.value()) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \"\n            + new String(bytes, StandardCharsets.UTF_8)); \r\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return in;\n  }\n","date":"2019-02-28 18:05:41","endLine":656,"groupId":"12534","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"traceResponse","params":"(InputStreamin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/09/d90f9930d4932a39f5427a9518b3b4384f84ce.src","preCode":"  private InputStream traceResponse(InputStream in) {\n    if (CalcitePrepareImpl.DEBUG) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \"\n            + new String(bytes, StandardCharsets.UTF_8)); \r\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return in;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"M"}],"commitId":"280642a02a4bcfd1fb9cbe8c5ab672d3619860e7","commitMessage":"@@@[CALCITE-2859] Centralize Calcite system properties\n\n1. Move all system properties with \"calcite\" namespace under a common class.\n2. Improve the documentation (javadoc) of existing properties.\n3. Add review comments regarding a few properties.\n4. Deprecate SaffronProperties and move them all under CalciteSystemProperty.\n","date":"2019-02-28 18:05:41","modifiedFileCount":"58","status":"M","submitter":"Stamatis Zampetakis"},{"authorTime":"2020-12-02 05:40:39","codes":[{"authorDate":"2020-12-02 05:40:39","commitOrder":6,"curCode":"  private static void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n      \r\n    }\n  }\n","date":"2020-12-08 15:07:23","endLine":499,"groupId":"10471","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"expectObjectField","params":"(JsonParserparser@Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/54860a5c7512bcccdd8f59592ff49c1fda4aef.src","preCode":"  private void expectObjectField(JsonParser parser, String name)\n      throws IOException {\n    expect(parser, JsonToken.FIELD_NAME);\n    if (!parser.getCurrentName().equals(name)) {\n      throw new RuntimeException(\"expected field \" + name + \", got \"\n          + parser.getCurrentName());\n    }\n    expect(parser, JsonToken.START_OBJECT);\n    while (parser.nextToken() != JsonToken.END_OBJECT) {\n      \r\n    }\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"M"},{"authorDate":"2020-12-02 05:40:39","commitOrder":6,"curCode":"  private static InputStream traceResponse(InputStream in) {\n    if (CalciteSystemProperty.DEBUG.value()) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \"\n            + new String(bytes, StandardCharsets.UTF_8)); \r\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return in;\n  }\n","date":"2020-12-08 15:07:23","endLine":668,"groupId":"10471","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"traceResponse","params":"(InputStreamin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/54860a5c7512bcccdd8f59592ff49c1fda4aef.src","preCode":"  private InputStream traceResponse(InputStream in) {\n    if (CalciteSystemProperty.DEBUG.value()) {\n      try {\n        final byte[] bytes = AvaticaUtils.readFullyToBytes(in);\n        in.close();\n        System.out.println(\"Response: \"\n            + new String(bytes, StandardCharsets.UTF_8)); \r\n        in = new ByteArrayInputStream(bytes);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return in;\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":655,"status":"M"}],"commitId":"404f968f6079360621896e6ee20ec12488a40bc2","commitMessage":"@@@[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne\n\nprivate and final methods can be made static.  so it is clear they do not access instance fields\n","date":"2020-12-08 15:07:23","modifiedFileCount":"169","status":"M","submitter":"Vladimir Sitnikov"}]
