[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testRtrim() {\n    assertEquals(\"\", rtrim(\"\"));\n    assertEquals(\"\", rtrim(\"    \"));\n    assertEquals(\"   x\", rtrim(\"   x  \"));\n    assertEquals(\"   x\", rtrim(\"   x \"));\n    assertEquals(\"   x y\", rtrim(\"   x y \"));\n    assertEquals(\"   x\", rtrim(\"   x\"));\n    assertEquals(\"x\", rtrim(\"x\"));\n  }\n","date":"2014-11-14 09:39:34","endLine":104,"groupId":"6694","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRtrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/94/73cc01b557640e542cff75229c6580176de2e6.src","preCode":"  @Test public void testRtrim() {\n    assertEquals(\"\", rtrim(\"\"));\n    assertEquals(\"\", rtrim(\"    \"));\n    assertEquals(\"   x\", rtrim(\"   x  \"));\n    assertEquals(\"   x\", rtrim(\"   x \"));\n    assertEquals(\"   x y\", rtrim(\"   x y \"));\n    assertEquals(\"   x\", rtrim(\"   x\"));\n    assertEquals(\"x\", rtrim(\"x\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testLtrim() {\n    assertEquals(\"\", ltrim(\"\"));\n    assertEquals(\"\", ltrim(\"    \"));\n    assertEquals(\"x  \", ltrim(\"   x  \"));\n    assertEquals(\"x \", ltrim(\"   x \"));\n    assertEquals(\"x y \", ltrim(\"x y \"));\n    assertEquals(\"x\", ltrim(\"   x\"));\n    assertEquals(\"x\", ltrim(\"x\"));\n  }\n","date":"2014-11-14 09:39:34","endLine":115,"groupId":"5843","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLtrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/94/73cc01b557640e542cff75229c6580176de2e6.src","preCode":"  @Test public void testLtrim() {\n    assertEquals(\"\", ltrim(\"\"));\n    assertEquals(\"\", ltrim(\"    \"));\n    assertEquals(\"x  \", ltrim(\"   x  \"));\n    assertEquals(\"x \", ltrim(\"   x \"));\n    assertEquals(\"x y \", ltrim(\"x y \"));\n    assertEquals(\"x\", ltrim(\"   x\"));\n    assertEquals(\"x\", ltrim(\"x\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2019-08-27 04:28:31","codes":[{"authorDate":"2019-08-27 04:28:31","commitOrder":2,"curCode":"  @Test public void testRtrim() {\n    assertThat(rtrim(\"\"), is(\"\"));\n    assertThat(rtrim(\"    \"), is(\"\"));\n    assertThat(rtrim(\"   x  \"), is(\"   x\"));\n    assertThat(rtrim(\"   x \"), is(\"   x\"));\n    assertThat(rtrim(\"   x y \"), is(\"   x y\"));\n    assertThat(rtrim(\"   x\"), is(\"   x\"));\n    assertThat(rtrim(\"x\"), is(\"x\"));\n  }\n","date":"2019-08-27 11:42:53","endLine":194,"groupId":"9053","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRtrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/69/c3963a80ec204303fc8a66ccea405ca1398a84.src","preCode":"  @Test public void testRtrim() {\n    assertEquals(\"\", rtrim(\"\"));\n    assertEquals(\"\", rtrim(\"    \"));\n    assertEquals(\"   x\", rtrim(\"   x  \"));\n    assertEquals(\"   x\", rtrim(\"   x \"));\n    assertEquals(\"   x y\", rtrim(\"   x y \"));\n    assertEquals(\"   x\", rtrim(\"   x\"));\n    assertEquals(\"x\", rtrim(\"x\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-08-27 04:28:31","commitOrder":2,"curCode":"  @Test public void testLtrim() {\n    assertThat(ltrim(\"\"), is(\"\"));\n    assertThat(ltrim(\"    \"), is(\"\"));\n    assertThat(ltrim(\"   x  \"), is(\"x  \"));\n    assertThat(ltrim(\"   x \"), is(\"x \"));\n    assertThat(ltrim(\"x y \"), is(\"x y \"));\n    assertThat(ltrim(\"   x\"), is(\"x\"));\n    assertThat(ltrim(\"x\"), is(\"x\"));\n  }\n","date":"2019-08-27 11:42:53","endLine":205,"groupId":"9052","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLtrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/69/c3963a80ec204303fc8a66ccea405ca1398a84.src","preCode":"  @Test public void testLtrim() {\n    assertEquals(\"\", ltrim(\"\"));\n    assertEquals(\"\", ltrim(\"    \"));\n    assertEquals(\"x  \", ltrim(\"   x  \"));\n    assertEquals(\"x \", ltrim(\"   x \"));\n    assertEquals(\"x y \", ltrim(\"x y \"));\n    assertEquals(\"x\", ltrim(\"   x\"));\n    assertEquals(\"x\", ltrim(\"x\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"8a3fde56e6931ca8c5a12d22489c6ce0eae4a8bc","commitMessage":"@@@In SqlFunctionsTest.  replace assertEquals and assertNull with assertThat\n","date":"2019-08-27 11:42:53","modifiedFileCount":"1","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testRtrim() {\n    assertThat(rtrim(\"\"), is(\"\"));\n    assertThat(rtrim(\"    \"), is(\"\"));\n    assertThat(rtrim(\"   x  \"), is(\"   x\"));\n    assertThat(rtrim(\"   x \"), is(\"   x\"));\n    assertThat(rtrim(\"   x y \"), is(\"   x y\"));\n    assertThat(rtrim(\"   x\"), is(\"   x\"));\n    assertThat(rtrim(\"x\"), is(\"x\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":261,"groupId":"101388","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRtrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/779b1e03c3474d16a7ae04eb78bfc01c01ecac.src","preCode":"  @Test public void testRtrim() {\n    assertThat(rtrim(\"\"), is(\"\"));\n    assertThat(rtrim(\"    \"), is(\"\"));\n    assertThat(rtrim(\"   x  \"), is(\"   x\"));\n    assertThat(rtrim(\"   x \"), is(\"   x\"));\n    assertThat(rtrim(\"   x y \"), is(\"   x y\"));\n    assertThat(rtrim(\"   x\"), is(\"   x\"));\n    assertThat(rtrim(\"x\"), is(\"x\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testLtrim() {\n    assertThat(ltrim(\"\"), is(\"\"));\n    assertThat(ltrim(\"    \"), is(\"\"));\n    assertThat(ltrim(\"   x  \"), is(\"x  \"));\n    assertThat(ltrim(\"   x \"), is(\"x \"));\n    assertThat(ltrim(\"x y \"), is(\"x y \"));\n    assertThat(ltrim(\"   x\"), is(\"x\"));\n    assertThat(ltrim(\"x\"), is(\"x\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":272,"groupId":"101388","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLtrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/779b1e03c3474d16a7ae04eb78bfc01c01ecac.src","preCode":"  @Test public void testLtrim() {\n    assertThat(ltrim(\"\"), is(\"\"));\n    assertThat(ltrim(\"    \"), is(\"\"));\n    assertThat(ltrim(\"   x  \"), is(\"x  \"));\n    assertThat(ltrim(\"   x \"), is(\"x \"));\n    assertThat(ltrim(\"x y \"), is(\"x y \"));\n    assertThat(ltrim(\"   x\"), is(\"x\"));\n    assertThat(ltrim(\"x\"), is(\"x\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlFunctionsTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
