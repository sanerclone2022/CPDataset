[{"authorTime":"2017-05-02 12:53:12","codes":[{"authorDate":"2017-05-02 12:53:12","commitOrder":1,"curCode":"  private void checkTime(RexNode node) {\n    assertThat(node.toString(), is(\"02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Integer, is(true));\n    assertThat(literal.getValue3() instanceof Integer, is(true));\n    assertThat((Integer) literal.getValue2(), is(MOON_TIME));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimeString.class), notNullValue());\n  }\n","date":"2017-05-31 23:17:28","endLine":256,"groupId":"3201","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkTime","params":"(RexNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/d99f807f46643f69eb23acfc7678e2e304f44a.src","preCode":"  private void checkTime(RexNode node) {\n    assertThat(node.toString(), is(\"02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Integer, is(true));\n    assertThat(literal.getValue3() instanceof Integer, is(true));\n    assertThat((Integer) literal.getValue2(), is(MOON_TIME));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimeString.class), notNullValue());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"B"},{"authorDate":"2017-05-02 12:53:12","commitOrder":1,"curCode":"  private void checkDate(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Integer, is(true));\n    assertThat(literal.getValue3() instanceof Integer, is(true));\n    assertThat((Integer) literal.getValue2(), is(MOON_DAY));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(DateString.class), notNullValue());\n  }\n","date":"2017-05-31 23:17:28","endLine":288,"groupId":"12392","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDate","params":"(RexNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/d99f807f46643f69eb23acfc7678e2e304f44a.src","preCode":"  private void checkDate(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Integer, is(true));\n    assertThat(literal.getValue3() instanceof Integer, is(true));\n    assertThat((Integer) literal.getValue2(), is(MOON_DAY));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(DateString.class), notNullValue());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"B"}],"commitId":"205af8134857ba312415b9a5b4a48020fe0ce888","commitMessage":"@@@[CALCITE-1690] Calcite timestamp literals cannot express precision above millisecond.  TIMESTAMP(3)\n","date":"2017-05-31 23:17:28","modifiedFileCount":"34","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-12-14 16:40:32","codes":[{"authorDate":"2020-12-14 16:40:32","commitOrder":2,"curCode":"  private void checkTime(RexLiteral literal) {\n    assertThat(literal.toString(), is(\"02:56:15\"));\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Integer, is(true));\n    assertThat(literal.getValue3() instanceof Integer, is(true));\n    assertThat((Integer) literal.getValue2(), is(MOON_TIME));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimeString.class), notNullValue());\n  }\n","date":"2020-12-19 05:09:44","endLine":369,"groupId":"10713","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkTime","params":"(RexLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/cf1a324752a26f2b8a1f0a41e0e7d0b314695b.src","preCode":"  private void checkTime(RexNode node) {\n    assertThat(node.toString(), is(\"02:56:15\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Integer, is(true));\n    assertThat(literal.getValue3() instanceof Integer, is(true));\n    assertThat((Integer) literal.getValue2(), is(MOON_TIME));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(TimeString.class), notNullValue());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"},{"authorDate":"2020-12-14 16:40:32","commitOrder":2,"curCode":"  private void checkDate(RexLiteral literal) {\n    assertThat(literal.toString(), is(\"1969-07-21\"));\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Integer, is(true));\n    assertThat(literal.getValue3() instanceof Integer, is(true));\n    assertThat((Integer) literal.getValue2(), is(MOON_DAY));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(DateString.class), notNullValue());\n  }\n","date":"2020-12-19 05:09:44","endLine":400,"groupId":"10713","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkDate","params":"(RexLiteralliteral)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/cf1a324752a26f2b8a1f0a41e0e7d0b314695b.src","preCode":"  private void checkDate(RexNode node) {\n    assertThat(node.toString(), is(\"1969-07-21\"));\n    RexLiteral literal = (RexLiteral) node;\n    assertThat(literal.getValue() instanceof Calendar, is(true));\n    assertThat(literal.getValue2() instanceof Integer, is(true));\n    assertThat(literal.getValue3() instanceof Integer, is(true));\n    assertThat((Integer) literal.getValue2(), is(MOON_DAY));\n    assertThat(literal.getValueAs(Calendar.class), notNullValue());\n    assertThat(literal.getValueAs(DateString.class), notNullValue());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"}],"commitId":"56a86a032ac05ed522846910eea6f884b31820e3","commitMessage":"@@@Refactor: Change return type of RelBuilder.literal from RexNode to RexLiteral\n","date":"2020-12-19 05:09:44","modifiedFileCount":"15","status":"M","submitter":"Julian Hyde"}]
