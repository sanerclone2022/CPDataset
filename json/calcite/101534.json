[{"authorTime":"2018-11-10 00:39:20","codes":[{"authorDate":"2019-10-03 02:01:43","commitOrder":2,"curCode":"  @Test public void testBigQueryCast() {\n    String query = \"select cast(cast(\\\"employee_id\\\" as varchar) as bigint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as varbinary), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as timestamp), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as double), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as decimal), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as date), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as time), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as boolean) \"\n            + \"from \\\"foodmart\\\".\\\"reserve_employee\\\" \";\n    final String expected = \"SELECT CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BYTES), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIMESTAMP), \"\n            + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS NUMERIC), \"\n            + \"CAST(CAST(employee_id AS STRING) AS DATE), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIME), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BOOL)\\n\"\n            + \"FROM foodmart.reserve_employee\";\n    sql(query).withBigQuery().ok(expected);\n  }\n","date":"2019-10-04 01:21:05","endLine":839,"groupId":"15747","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigQueryCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6a/137acb780386d36181cf4c04f3a4585f73e351.src","preCode":"  @Test public void testBigQueryCast() {\n    String query = \"select cast(cast(\\\"employee_id\\\" as varchar) as bigint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as varbinary), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as timestamp), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as double), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as decimal), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as date), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as time), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as boolean) \"\n            + \"from \\\"foodmart\\\".\\\"reserve_employee\\\" \";\n    final String expected = \"SELECT CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BYTES), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIMESTAMP), \"\n            + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS NUMERIC), \"\n            + \"CAST(CAST(employee_id AS STRING) AS DATE), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIME), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BOOL)\\n\"\n            + \"FROM foodmart.reserve_employee\";\n    sql(query).withBigQuery().ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"B"},{"authorDate":"2018-11-10 00:39:20","commitOrder":2,"curCode":"  @Test public void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","date":"2018-11-10 00:39:58","endLine":2905,"groupId":"15747","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonPredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/9c33f84f60a07794006fda39249415cf048bfc.src","preCode":"  @Test public void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2879,"status":"NB"}],"commitId":"30a0dd0a2edebdc08292b7d59988c60ccf754bed","commitMessage":"@@@[CALCITE-3381] When using BigQuery dialect.  Rel2SQL converter converts SQL types to BigQuery types (Rui Wang)\n\nVARCHAR -> STRING\nVARBINARY -> BYTES\nBIGINT -> INT64\nDECIMAL -> NUMERIC\nDOUBLE -> FLOAT64\nBOOLEAN -> BOOL\nDATE -> DATE\nTIME -> TIME\nTIMESTAMP -> TIMESTAMP\n\nClose #1482\n","date":"2019-10-04 01:21:05","modifiedFileCount":"2","status":"M","submitter":"amaliujia"},{"authorTime":"2018-11-10 00:39:20","codes":[{"authorDate":"2019-11-07 06:21:52","commitOrder":3,"curCode":"  @Test public void testBigQueryCast() {\n    String query = \"select cast(cast(\\\"employee_id\\\" as varchar) as bigint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as smallint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as tinyint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as integer), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as float), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as char), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as binary), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as varbinary), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as timestamp), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as double), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as decimal), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as date), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as time), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as boolean) \"\n            + \"from \\\"foodmart\\\".\\\"reserve_employee\\\" \";\n    final String expected = \"SELECT CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS STRING), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BYTES), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BYTES), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIMESTAMP), \"\n            + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS NUMERIC), \"\n            + \"CAST(CAST(employee_id AS STRING) AS DATE), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIME), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BOOL)\\n\"\n            + \"FROM foodmart.reserve_employee\";\n    sql(query).withBigQuery().ok(expected);\n  }\n","date":"2019-11-07 11:47:33","endLine":913,"groupId":"15747","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigQueryCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c8/65a1cafafdbeb10bc90279082bef9dac58670d.src","preCode":"  @Test public void testBigQueryCast() {\n    String query = \"select cast(cast(\\\"employee_id\\\" as varchar) as bigint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as varbinary), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as timestamp), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as double), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as decimal), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as date), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as time), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as boolean) \"\n            + \"from \\\"foodmart\\\".\\\"reserve_employee\\\" \";\n    final String expected = \"SELECT CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BYTES), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIMESTAMP), \"\n            + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS NUMERIC), \"\n            + \"CAST(CAST(employee_id AS STRING) AS DATE), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIME), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BOOL)\\n\"\n            + \"FROM foodmart.reserve_employee\";\n    sql(query).withBigQuery().ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":881,"status":"M"},{"authorDate":"2018-11-10 00:39:20","commitOrder":3,"curCode":"  @Test public void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","date":"2018-11-10 00:39:58","endLine":2905,"groupId":"15747","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonPredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/18/9c33f84f60a07794006fda39249415cf048bfc.src","preCode":"  @Test public void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2879,"status":"N"}],"commitId":"4e70e7f3e44832667c2e82e371d6539a68d029fa","commitMessage":"@@@[CALCITE-3381] When using BigQuery dialect.  Rel2SQL converter converts SQL types to BigQuery types (part2) (Rui Wang)\n\nTweak the BigQuery data type as following:\n* Integers(from TINYINT to BIGINT) -> INT64\n* Fractional(float.  double) -> FLOAT64\n* Characters(CHAR.  VARCHAR) -> STRING\n* Binarys(BINARY.  VARBINARY) -> BYTES\n\nclose apache/calcite#1561\n","date":"2019-11-07 11:47:33","modifiedFileCount":"2","status":"M","submitter":"amaliujia"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testBigQueryCast() {\n    String query = \"select cast(cast(\\\"employee_id\\\" as varchar) as bigint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as smallint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as tinyint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as integer), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as float), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as char), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as binary), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as varbinary), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as timestamp), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as double), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as decimal), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as date), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as time), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as boolean) \"\n            + \"from \\\"foodmart\\\".\\\"reserve_employee\\\" \";\n    final String expected = \"SELECT CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS STRING), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BYTES), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BYTES), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIMESTAMP), \"\n            + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS NUMERIC), \"\n            + \"CAST(CAST(employee_id AS STRING) AS DATE), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIME), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BOOL)\\n\"\n            + \"FROM foodmart.reserve_employee\";\n    sql(query).withBigQuery().ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":1160,"groupId":"101534","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBigQueryCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testBigQueryCast() {\n    String query = \"select cast(cast(\\\"employee_id\\\" as varchar) as bigint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as smallint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as tinyint), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as integer), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as float), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as char), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as binary), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as varbinary), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as timestamp), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as double), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as decimal), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as date), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as time), \"\n            + \"cast(cast(\\\"employee_id\\\" as varchar) as boolean) \"\n            + \"from \\\"foodmart\\\".\\\"reserve_employee\\\" \";\n    final String expected = \"SELECT CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS INT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS STRING), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BYTES), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BYTES), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIMESTAMP), \"\n            + \"CAST(CAST(employee_id AS STRING) AS FLOAT64), \"\n            + \"CAST(CAST(employee_id AS STRING) AS NUMERIC), \"\n            + \"CAST(CAST(employee_id AS STRING) AS DATE), \"\n            + \"CAST(CAST(employee_id AS STRING) AS TIME), \"\n            + \"CAST(CAST(employee_id AS STRING) AS BOOL)\\n\"\n            + \"FROM foodmart.reserve_employee\";\n    sql(query).withBigQuery().ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1128,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","date":"2020-04-06 04:57:49","endLine":4522,"groupId":"101534","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJsonPredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a7/568223fb7dbbd6fb8b19514d3893973975f662.src","preCode":"  @Test public void testJsonPredicate() {\n    String query = \"select \"\n        + \"\\\"product_name\\\" is json, \"\n        + \"\\\"product_name\\\" is json value, \"\n        + \"\\\"product_name\\\" is json object, \"\n        + \"\\\"product_name\\\" is json array, \"\n        + \"\\\"product_name\\\" is json scalar, \"\n        + \"\\\"product_name\\\" is not json, \"\n        + \"\\\"product_name\\\" is not json value, \"\n        + \"\\\"product_name\\\" is not json object, \"\n        + \"\\\"product_name\\\" is not json array, \"\n        + \"\\\"product_name\\\" is not json scalar \"\n        + \"from \\\"product\\\"\";\n    final String expected = \"SELECT \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON VALUE, \"\n        + \"\\\"product_name\\\" IS JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS JSON SCALAR, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON VALUE, \"\n        + \"\\\"product_name\\\" IS NOT JSON OBJECT, \"\n        + \"\\\"product_name\\\" IS NOT JSON ARRAY, \"\n        + \"\\\"product_name\\\" IS NOT JSON SCALAR\\n\"\n        + \"FROM \\\"foodmart\\\".\\\"product\\\"\";\n    sql(query).ok(expected);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4496,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
