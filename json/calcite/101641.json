[{"authorTime":"2020-01-07 13:38:09","codes":[{"authorDate":"2020-01-07 13:38:09","commitOrder":2,"curCode":"  public static String extractXml(String xml, String xpath, String namespace) {\n    if (xml == null || xpath == null) {\n      return null;\n    }\n    try {\n      XPath xPath = XPATH_FACTORY.get().newXPath();\n\n      if (namespace != null) {\n        xPath.setNamespaceContext(extractNamespaceContext(namespace));\n      }\n\n      XPathExpression xpathExpression = xPath.compile(xpath);\n\n      try {\n        List<String> result = new ArrayList<>();\n        NodeList nodes = (NodeList) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODESET);\n        for (int i = 0; i < nodes.getLength(); i++) {\n          result.add(convertNodeToString(nodes.item(i)));\n        }\n        return StringUtils.join(result, \"\");\n      } catch (XPathExpressionException e) {\n        Node node = (Node) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODE);\n        return convertNodeToString(node);\n      }\n    } catch (IllegalArgumentException | XPathExpressionException | TransformerException ex) {\n      throw RESOURCE.invalidInputForExtractXml(xpath, namespace).ex();\n    }\n  }\n","date":"2020-01-15 09:58:57","endLine":144,"groupId":"3764","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"extractXml","params":"(Stringxml@Stringxpath@Stringnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/783744a0e65d6c0e2c3a147484d09c51079a12.src","preCode":"  public static String extractXml(String xml, String xpath, String namespace) {\n    if (xml == null || xpath == null) {\n      return null;\n    }\n    try {\n      XPath xPath = XPATH_FACTORY.get().newXPath();\n\n      if (namespace != null) {\n        xPath.setNamespaceContext(extractNamespaceContext(namespace));\n      }\n\n      XPathExpression xpathExpression = xPath.compile(xpath);\n\n      try {\n        List<String> result = new ArrayList<>();\n        NodeList nodes = (NodeList) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODESET);\n        for (int i = 0; i < nodes.getLength(); i++) {\n          result.add(convertNodeToString(nodes.item(i)));\n        }\n        return StringUtils.join(result, \"\");\n      } catch (XPathExpressionException e) {\n        Node node = (Node) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODE);\n        return convertNodeToString(node);\n      }\n    } catch (IllegalArgumentException | XPathExpressionException | TransformerException ex) {\n      throw RESOURCE.invalidInputForExtractXml(xpath, namespace).ex();\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/XmlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"MB"},{"authorDate":"2020-01-07 13:38:09","commitOrder":2,"curCode":"  public static Integer existsNode(String xml, String xpath, String namespace) {\n    if (xml == null || xpath == null) {\n      return null;\n    }\n    try {\n      XPath xPath = XPATH_FACTORY.get().newXPath();\n      if (namespace != null) {\n        xPath.setNamespaceContext(extractNamespaceContext(namespace));\n      }\n\n      XPathExpression xpathExpression = xPath.compile(xpath);\n      try {\n        NodeList nodes = (NodeList) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODESET);\n        if (nodes != null && nodes.getLength() > 0) {\n          return 1;\n        }\n        return 0;\n      } catch (XPathExpressionException e) {\n        Node node = (Node) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODE);\n        if (node != null) {\n          return 1;\n        }\n        return 0;\n      }\n    } catch (IllegalArgumentException | XPathExpressionException ex) {\n      throw RESOURCE.invalidInputForExistsNode(xpath, namespace).ex();\n    }\n  }\n","date":"2020-01-15 09:58:57","endLine":179,"groupId":"14236","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"existsNode","params":"(Stringxml@Stringxpath@Stringnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/783744a0e65d6c0e2c3a147484d09c51079a12.src","preCode":"  public static Integer existsNode(String xml, String xpath, String namespace) {\n    if (xml == null || xpath == null) {\n      return null;\n    }\n    try {\n      XPath xPath = XPATH_FACTORY.get().newXPath();\n      if (namespace != null) {\n        xPath.setNamespaceContext(extractNamespaceContext(namespace));\n      }\n\n      XPathExpression xpathExpression = xPath.compile(xpath);\n      try {\n        NodeList nodes = (NodeList) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODESET);\n        if (nodes != null && nodes.getLength() > 0) {\n          return 1;\n        }\n        return 0;\n      } catch (XPathExpressionException e) {\n        Node node = (Node) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODE);\n        if (node != null) {\n          return 1;\n        }\n        return 0;\n      }\n    } catch (IllegalArgumentException | XPathExpressionException ex) {\n      throw RESOURCE.invalidInputForExistsNode(xpath, namespace).ex();\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/XmlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"990ed290ccde1344c9277cf88c82df3118a96217","commitMessage":"@@@[CALCITE-3640] Oracle EXISTSNODE Function Support (ritesh-kapoor)\n\nclose apache/calcite#1727\n","date":"2020-01-15 09:58:57","modifiedFileCount":"7","status":"M","submitter":"Ritesh Kapoor"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public static @Nullable String extractXml(@Nullable String xml, @Nullable String xpath,\n      @Nullable String namespace) {\n    if (xml == null || xpath == null) {\n      return null;\n    }\n    try {\n      XPath xPath = castNonNull(XPATH_FACTORY.get()).newXPath();\n\n      if (namespace != null) {\n        xPath.setNamespaceContext(extractNamespaceContext(namespace));\n      }\n\n      XPathExpression xpathExpression = xPath.compile(xpath);\n\n      try {\n        List<String> result = new ArrayList<>();\n        NodeList nodes = (NodeList) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODESET);\n        for (int i = 0; i < nodes.getLength(); i++) {\n          result.add(convertNodeToString(castNonNull(nodes.item(i))));\n        }\n        return StringUtils.join(result, \"\");\n      } catch (XPathExpressionException e) {\n        Node node = (Node) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODE);\n        return convertNodeToString(node);\n      }\n    } catch (IllegalArgumentException | XPathExpressionException | TransformerException ex) {\n      throw RESOURCE.invalidInputForExtractXml(xpath, namespace).ex();\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":153,"groupId":"101641","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"extractXml","params":"(@NullableStringxml@@NullableStringxpath@@NullableStringnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/13/d270fe7be2944094d7f4a6137bbb395194df98.src","preCode":"  public static String extractXml(String xml, String xpath, String namespace) {\n    if (xml == null || xpath == null) {\n      return null;\n    }\n    try {\n      XPath xPath = XPATH_FACTORY.get().newXPath();\n\n      if (namespace != null) {\n        xPath.setNamespaceContext(extractNamespaceContext(namespace));\n      }\n\n      XPathExpression xpathExpression = xPath.compile(xpath);\n\n      try {\n        List<String> result = new ArrayList<>();\n        NodeList nodes = (NodeList) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODESET);\n        for (int i = 0; i < nodes.getLength(); i++) {\n          result.add(convertNodeToString(nodes.item(i)));\n        }\n        return StringUtils.join(result, \"\");\n      } catch (XPathExpressionException e) {\n        Node node = (Node) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODE);\n        return convertNodeToString(node);\n      }\n    } catch (IllegalArgumentException | XPathExpressionException | TransformerException ex) {\n      throw RESOURCE.invalidInputForExtractXml(xpath, namespace).ex();\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/XmlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public static @Nullable Integer existsNode(@Nullable String xml, @Nullable String xpath,\n      @Nullable String namespace) {\n    if (xml == null || xpath == null) {\n      return null;\n    }\n    try {\n      XPath xPath = castNonNull(XPATH_FACTORY.get()).newXPath();\n      if (namespace != null) {\n        xPath.setNamespaceContext(extractNamespaceContext(namespace));\n      }\n\n      XPathExpression xpathExpression = xPath.compile(xpath);\n      try {\n        NodeList nodes = (NodeList) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODESET);\n        if (nodes != null && nodes.getLength() > 0) {\n          return 1;\n        }\n        return 0;\n      } catch (XPathExpressionException e) {\n        Node node = (Node) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODE);\n        if (node != null) {\n          return 1;\n        }\n        return 0;\n      }\n    } catch (IllegalArgumentException | XPathExpressionException ex) {\n      throw RESOURCE.invalidInputForExistsNode(xpath, namespace).ex();\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":189,"groupId":"101641","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"existsNode","params":"(@NullableStringxml@@NullableStringxpath@@NullableStringnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/13/d270fe7be2944094d7f4a6137bbb395194df98.src","preCode":"  public static Integer existsNode(String xml, String xpath, String namespace) {\n    if (xml == null || xpath == null) {\n      return null;\n    }\n    try {\n      XPath xPath = XPATH_FACTORY.get().newXPath();\n      if (namespace != null) {\n        xPath.setNamespaceContext(extractNamespaceContext(namespace));\n      }\n\n      XPathExpression xpathExpression = xPath.compile(xpath);\n      try {\n        NodeList nodes = (NodeList) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODESET);\n        if (nodes != null && nodes.getLength() > 0) {\n          return 1;\n        }\n        return 0;\n      } catch (XPathExpressionException e) {\n        Node node = (Node) xpathExpression\n            .evaluate(new InputSource(new StringReader(xml)), XPathConstants.NODE);\n        if (node != null) {\n          return 1;\n        }\n        return 0;\n      }\n    } catch (IllegalArgumentException | XPathExpressionException ex) {\n      throw RESOURCE.invalidInputForExistsNode(xpath, namespace).ex();\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/XmlFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
