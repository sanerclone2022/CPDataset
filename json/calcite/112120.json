[{"authorTime":"2018-12-28 04:18:14","codes":[{"authorDate":"2016-01-06 07:15:51","commitOrder":4,"curCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n      final Method method = (aggregation == MIN\n          ? BuiltInMethod.LESSER\n          : BuiltInMethod.GREATER).method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","date":"2016-01-06 18:37:31","endLine":1054,"groupId":"14386","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"implementNotNullAdd","params":"(AggContextinfo@AggAddContextadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/872b64e4cac7d35b6b6413cb2603b4c0a61b2b.src","preCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n      final Method method = (aggregation == MIN\n          ? BuiltInMethod.LESSER\n          : BuiltInMethod.GREATER).method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"NB"},{"authorDate":"2018-12-28 04:18:14","commitOrder":4,"curCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n      final Method method = (aggregation == BIT_AND\n          ? BuiltInMethod.BIT_AND\n          : BuiltInMethod.BIT_OR).method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","date":"2019-02-01 09:29:52","endLine":1396,"groupId":"14386","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"implementNotNullAdd","params":"(AggContextinfo@AggAddContextadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/91/0bebececf4b0a336cf13c6630a9c40f91b7c0b.src","preCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n      final Method method = (aggregation == BIT_AND\n          ? BuiltInMethod.BIT_AND\n          : BuiltInMethod.BIT_OR).method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1382,"status":"B"}],"commitId":"4814943895d609813878763faf0d38adb624eac4","commitMessage":"@@@[CALCITE-2770] Add support for BIT_AND and BIT_OR aggregate functions\n","date":"2019-02-01 09:29:52","modifiedFileCount":"9","status":"M","submitter":"Haisheng Yuan"},{"authorTime":"2019-12-19 16:30:31","codes":[{"authorDate":"2016-01-06 07:15:51","commitOrder":5,"curCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n      final Method method = (aggregation == MIN\n          ? BuiltInMethod.LESSER\n          : BuiltInMethod.GREATER).method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","date":"2016-01-06 18:37:31","endLine":1054,"groupId":"14386","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"implementNotNullAdd","params":"(AggContextinfo@AggAddContextadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/20/872b64e4cac7d35b6b6413cb2603b4c0a61b2b.src","preCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n      final Method method = (aggregation == MIN\n          ? BuiltInMethod.LESSER\n          : BuiltInMethod.GREATER).method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"N"},{"authorDate":"2019-12-19 16:30:31","commitOrder":5,"curCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n\n      final BuiltInMethod builtInMethod;\n      switch (aggregation.kind) {\n      case BIT_AND:\n        builtInMethod = BuiltInMethod.BIT_AND;\n        break;\n      case BIT_OR:\n        builtInMethod = BuiltInMethod.BIT_OR;\n        break;\n      case BIT_XOR:\n        builtInMethod = BuiltInMethod.BIT_XOR;\n        break;\n      default:\n        throw new IllegalArgumentException(\"Unknown \" + aggregation.getName()\n            + \". Only support bit_and, bit_or and bit_xor for bit aggregation function\");\n      }\n      final Method method = builtInMethod.method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","date":"2019-12-27 14:08:03","endLine":1580,"groupId":"16592","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"implementNotNullAdd","params":"(AggContextinfo@AggAddContextadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/5b5cf02e23e72fb9095afd335873c48fda08db.src","preCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n      final Method method = (aggregation == BIT_AND\n          ? BuiltInMethod.BIT_AND\n          : BuiltInMethod.BIT_OR).method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1552,"status":"M"}],"commitId":"e7fc6977341d0166f110de4218313648de81b336","commitMessage":"@@@[CALCITE-3591] Add bit_xor aggregate operator (wangxlong)\n\nclose apache/calcite#1676\n","date":"2019-12-27 14:08:03","modifiedFileCount":"8","status":"M","submitter":"whlwanghailong"},{"authorTime":"2019-12-19 16:30:31","codes":[{"authorDate":"2019-12-26 19:00:11","commitOrder":6,"curCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      final boolean isMin = info.aggregation().kind == SqlKind.MIN;\n      final Method method = (isMin\n          ? BuiltInMethod.LESSER\n          : BuiltInMethod.GREATER).method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","date":"2020-10-16 09:22:08","endLine":1095,"groupId":"112120","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"implementNotNullAdd","params":"(AggContextinfo@AggAddContextadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/21425a5cda7f25bc7ff24b36eb3216dab50780.src","preCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n      final Method method = (aggregation == MIN\n          ? BuiltInMethod.LESSER\n          : BuiltInMethod.GREATER).method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1081,"status":"M"},{"authorDate":"2019-12-19 16:30:31","commitOrder":6,"curCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n\n      final BuiltInMethod builtInMethod;\n      switch (aggregation.kind) {\n      case BIT_AND:\n        builtInMethod = BuiltInMethod.BIT_AND;\n        break;\n      case BIT_OR:\n        builtInMethod = BuiltInMethod.BIT_OR;\n        break;\n      case BIT_XOR:\n        builtInMethod = BuiltInMethod.BIT_XOR;\n        break;\n      default:\n        throw new IllegalArgumentException(\"Unknown \" + aggregation.getName()\n            + \". Only support bit_and, bit_or and bit_xor for bit aggregation function\");\n      }\n      final Method method = builtInMethod.method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","date":"2019-12-27 14:08:03","endLine":1580,"groupId":"112120","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"implementNotNullAdd","params":"(AggContextinfo@AggAddContextadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6f/5b5cf02e23e72fb9095afd335873c48fda08db.src","preCode":"    @Override public void implementNotNullAdd(AggContext info,\n        AggAddContext add) {\n      Expression acc = add.accumulator().get(0);\n      Expression arg = add.arguments().get(0);\n      SqlAggFunction aggregation = info.aggregation();\n\n      final BuiltInMethod builtInMethod;\n      switch (aggregation.kind) {\n      case BIT_AND:\n        builtInMethod = BuiltInMethod.BIT_AND;\n        break;\n      case BIT_OR:\n        builtInMethod = BuiltInMethod.BIT_OR;\n        break;\n      case BIT_XOR:\n        builtInMethod = BuiltInMethod.BIT_XOR;\n        break;\n      default:\n        throw new IllegalArgumentException(\"Unknown \" + aggregation.getName()\n            + \". Only support bit_and, bit_or and bit_xor for bit aggregation function\");\n      }\n      final Method method = builtInMethod.method;\n      Expression next = Expressions.call(\n          method.getDeclaringClass(),\n          method.getName(),\n          acc,\n          Expressions.unbox(arg));\n      accAdvance(add, acc, next);\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1552,"status":"N"}],"commitId":"b598ff08cc8ba4f00ddef08fdaf77e4fbb8d972f","commitMessage":"@@@[CALCITE-2935] Support BOOL_AND.  BOOL_OR.  LOGICAL_AND.  LOGICAL_OR aggregate functions (ShuMingLi)\n\nBOOL_AND and BOOL_OR are in PostgreSQL and Redshift;\nLOGICAL_AND and LOGICAL_OR are in BigQuery;\nall are equivalent to EVERY and SOME. \nand in turn to MIN and MAX over BOOLEAN types.\n\nRework to use SqlMinMaxAggregateFunction.  and add\nLOGICAL_AND and LOGICAL_OR (Julian Hyde).\n\nClose apache/calcite#1694\n","date":"2020-10-16 09:22:08","modifiedFileCount":"8","status":"M","submitter":"ShuMingLi"}]
