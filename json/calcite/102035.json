[{"authorTime":"2019-09-10 06:04:05","codes":[{"authorDate":"2019-09-10 06:04:05","commitOrder":1,"curCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> viewToQueryTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newNode = node;\n    RelNode target = node;\n    if (unionRewritingPullProgram != null) {\n      final HepPlanner tmpPlanner = new HepPlanner(unionRewritingPullProgram);\n      tmpPlanner.setRoot(newNode);\n      newNode = tmpPlanner.findBestExp();\n      target = newNode.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (unionRewritingPullProgram != null) {\n      rewrittenPlan = newNode.copy(\n          newNode.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    if (topProject != null) {\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    return rewrittenPlan;\n  }\n","date":"2020-03-05 12:57:25","endLine":209,"groupId":"15084","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"rewriteQuery","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@RexSimplifysimplify@RelMetadataQuerymq@RexNodecompensationColumnsEquiPred@RexNodeotherCompensationPred@ProjecttopProject@RelNodenode@BiMap<RelTableRef@RelTableRef>viewToQueryTableMapping@EquivalenceClassesviewEC@EquivalenceClassesqueryEC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/7b/470fb93872624e49a03ce218a9c76f4d5a4b03.src","preCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> viewToQueryTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newNode = node;\n    RelNode target = node;\n    if (unionRewritingPullProgram != null) {\n      final HepPlanner tmpPlanner = new HepPlanner(unionRewritingPullProgram);\n      tmpPlanner.setRoot(newNode);\n      newNode = tmpPlanner.findBestExp();\n      target = newNode.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (unionRewritingPullProgram != null) {\n      rewrittenPlan = newNode.copy(\n          newNode.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    if (topProject != null) {\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    return rewrittenPlan;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewJoinRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"},{"authorDate":"2019-09-10 06:04:05","commitOrder":1,"curCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> queryToViewTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    Aggregate aggregate = (Aggregate) node;\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newAggregateInput = aggregate.getInput(0);\n    RelNode target = aggregate.getInput(0);\n    if (unionRewritingPullProgram != null) {\n      final HepPlanner tmpPlanner = new HepPlanner(unionRewritingPullProgram);\n      tmpPlanner.setRoot(newAggregateInput);\n      newAggregateInput = tmpPlanner.findBestExp();\n      target = newAggregateInput.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (unionRewritingPullProgram != null) {\n      return aggregate.copy(aggregate.getTraitSet(),\n          ImmutableList.of(\n              newAggregateInput.copy(newAggregateInput.getTraitSet(),\n                  ImmutableList.of(rewrittenPlan))));\n    }\n    return aggregate.copy(aggregate.getTraitSet(), ImmutableList.of(rewrittenPlan));\n  }\n","date":"2020-03-05 12:57:25","endLine":328,"groupId":"11407","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"rewriteQuery","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@RexSimplifysimplify@RelMetadataQuerymq@RexNodecompensationColumnsEquiPred@RexNodeotherCompensationPred@ProjecttopProject@RelNodenode@BiMap<RelTableRef@RelTableRef>queryToViewTableMapping@EquivalenceClassesviewEC@EquivalenceClassesqueryEC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/de/48ccd992fb9ad6757078e1bb987767a64e039f.src","preCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> queryToViewTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    Aggregate aggregate = (Aggregate) node;\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newAggregateInput = aggregate.getInput(0);\n    RelNode target = aggregate.getInput(0);\n    if (unionRewritingPullProgram != null) {\n      final HepPlanner tmpPlanner = new HepPlanner(unionRewritingPullProgram);\n      tmpPlanner.setRoot(newAggregateInput);\n      newAggregateInput = tmpPlanner.findBestExp();\n      target = newAggregateInput.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (unionRewritingPullProgram != null) {\n      return aggregate.copy(aggregate.getTraitSet(),\n          ImmutableList.of(\n              newAggregateInput.copy(newAggregateInput.getTraitSet(),\n                  ImmutableList.of(rewrittenPlan))));\n    }\n    return aggregate.copy(aggregate.getTraitSet(), ImmutableList.of(rewrittenPlan));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewAggregateRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"}],"commitId":"5dea67890a1916771e9a335e45969f2a4d4f7d3c","commitMessage":"@@@[CALCITE-3825] Split AbstractMaterializedViewRule into multiple classes\n\nClose apache/calcite#1831\n","date":"2020-03-05 12:57:25","modifiedFileCount":"2","status":"B","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2020-07-09 05:31:40","codes":[{"authorDate":"2020-07-09 05:31:40","commitOrder":2,"curCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> viewToQueryTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newNode = node;\n    RelNode target = node;\n    if (config.unionRewritingPullProgram() != null) {\n      final HepPlanner tmpPlanner =\n          new HepPlanner(config.unionRewritingPullProgram());\n      tmpPlanner.setRoot(newNode);\n      newNode = tmpPlanner.findBestExp();\n      target = newNode.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (config.unionRewritingPullProgram() != null) {\n      rewrittenPlan = newNode.copy(\n          newNode.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    if (topProject != null) {\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    return rewrittenPlan;\n  }\n","date":"2020-07-29 02:27:24","endLine":207,"groupId":"15084","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"rewriteQuery","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@RexSimplifysimplify@RelMetadataQuerymq@RexNodecompensationColumnsEquiPred@RexNodeotherCompensationPred@ProjecttopProject@RelNodenode@BiMap<RelTableRef@RelTableRef>viewToQueryTableMapping@EquivalenceClassesviewEC@EquivalenceClassesqueryEC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d6/4c39b12e9ba93fd9f5742085196b03b92c4704.src","preCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> viewToQueryTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newNode = node;\n    RelNode target = node;\n    if (unionRewritingPullProgram != null) {\n      final HepPlanner tmpPlanner = new HepPlanner(unionRewritingPullProgram);\n      tmpPlanner.setRoot(newNode);\n      newNode = tmpPlanner.findBestExp();\n      target = newNode.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (unionRewritingPullProgram != null) {\n      rewrittenPlan = newNode.copy(\n          newNode.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    if (topProject != null) {\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    return rewrittenPlan;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewJoinRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-07-09 05:31:40","commitOrder":2,"curCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> queryToViewTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    Aggregate aggregate = (Aggregate) node;\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newAggregateInput = aggregate.getInput(0);\n    RelNode target = aggregate.getInput(0);\n    if (config.unionRewritingPullProgram() != null) {\n      final HepPlanner tmpPlanner =\n          new HepPlanner(config.unionRewritingPullProgram());\n      tmpPlanner.setRoot(newAggregateInput);\n      newAggregateInput = tmpPlanner.findBestExp();\n      target = newAggregateInput.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (config.unionRewritingPullProgram() != null) {\n      return aggregate.copy(aggregate.getTraitSet(),\n          ImmutableList.of(\n              newAggregateInput.copy(newAggregateInput.getTraitSet(),\n                  ImmutableList.of(rewrittenPlan))));\n    }\n    return aggregate.copy(aggregate.getTraitSet(), ImmutableList.of(rewrittenPlan));\n  }\n","date":"2020-07-29 02:27:24","endLine":292,"groupId":"6595","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"rewriteQuery","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@RexSimplifysimplify@RelMetadataQuerymq@RexNodecompensationColumnsEquiPred@RexNodeotherCompensationPred@ProjecttopProject@RelNodenode@BiMap<RelTableRef@RelTableRef>queryToViewTableMapping@EquivalenceClassesviewEC@EquivalenceClassesqueryEC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e4/e2e432f4d7a9495627da40fdce7d59b64c3223.src","preCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> queryToViewTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    Aggregate aggregate = (Aggregate) node;\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newAggregateInput = aggregate.getInput(0);\n    RelNode target = aggregate.getInput(0);\n    if (unionRewritingPullProgram != null) {\n      final HepPlanner tmpPlanner = new HepPlanner(unionRewritingPullProgram);\n      tmpPlanner.setRoot(newAggregateInput);\n      newAggregateInput = tmpPlanner.findBestExp();\n      target = newAggregateInput.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (unionRewritingPullProgram != null) {\n      return aggregate.copy(aggregate.getTraitSet(),\n          ImmutableList.of(\n              newAggregateInput.copy(newAggregateInput.getTraitSet(),\n                  ImmutableList.of(rewrittenPlan))));\n    }\n    return aggregate.copy(aggregate.getTraitSet(), ImmutableList.of(rewrittenPlan));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewAggregateRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"998cd83ebe2fcd7ff3ee565299fed6e199269715","commitMessage":"@@@[CALCITE-3923] Refactor how planner rules are parameterized\n\nCreate operands using a builder interface.  OperandBuilder.  and\ndeprecate methods RelOptRule.operand etc.\n\nThe change is backwards compatible.  in the sense that\nexisting rule constructors are deprecated but still work.\nFrom now on.  to create rules.  call RelOptRule.Config.toRule()\n(which calls the rule's (Config) constructor).\n\nSub-classes of ConverterRule are a little different.  They\ndon't need their own sub-class of Config.  You just need to\ncall Config.withRuleFactory to specify the constructor of the\nsub-class of ConverterRule.\n\nMove rule instances into holder classes such as CoreRules. \nMaterializedViewRules. Deprecate existing rule INSTANCE fields\n(to be removed in 1.25). Deprecate previous rule constructors\n(to be removed in 2.0).\n\nDescribe how to write rules in howto and tutorial.\n\nRemove rule instances marked 'deprecated.  to be removed before\n1.25'.\n\nClose apache/calcite#2024\n","date":"2020-07-29 02:27:24","modifiedFileCount":"191","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override protected @Nullable RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      @Nullable Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> viewToQueryTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newNode = node;\n    RelNode target = node;\n    HepProgram unionRewritingPullProgram = config.unionRewritingPullProgram();\n    if (unionRewritingPullProgram != null) {\n      final HepPlanner tmpPlanner =\n          new HepPlanner(unionRewritingPullProgram);\n      tmpPlanner.setRoot(newNode);\n      newNode = tmpPlanner.findBestExp();\n      target = newNode.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n\n\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      RexNode newCompensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), queryEC, false,\n          compensationColumnsEquiPred);\n      if (newCompensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n      compensationColumnsEquiPred = newCompensationColumnsEquiPred;\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      RexNode newOtherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), viewEC, true,\n          otherCompensationPred);\n      if (newOtherCompensationPred == null) {\n        \r\n        return null;\n      }\n      otherCompensationPred = newOtherCompensationPred;\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (unionRewritingPullProgram != null) {\n      rewrittenPlan = newNode.copy(\n          newNode.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    if (topProject != null) {\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    return rewrittenPlan;\n  }\n","date":"2020-11-30 06:45:33","endLine":221,"groupId":"102035","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"rewriteQuery","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@RexSimplifysimplify@RelMetadataQuerymq@RexNodecompensationColumnsEquiPred@RexNodeotherCompensationPred@@NullableProjecttopProject@RelNodenode@BiMap<RelTableRef@RelTableRef>viewToQueryTableMapping@EquivalenceClassesviewEC@EquivalenceClassesqueryEC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b4/d83099adda16a787a173c83d1d010d8077f8ff.src","preCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> viewToQueryTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newNode = node;\n    RelNode target = node;\n    if (config.unionRewritingPullProgram() != null) {\n      final HepPlanner tmpPlanner =\n          new HepPlanner(config.unionRewritingPullProgram());\n      tmpPlanner.setRoot(newNode);\n      newNode = tmpPlanner.findBestExp();\n      target = newNode.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, viewToQueryTableMapping.inverse(), viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (config.unionRewritingPullProgram() != null) {\n      rewrittenPlan = newNode.copy(\n          newNode.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    if (topProject != null) {\n      return topProject.copy(topProject.getTraitSet(), ImmutableList.of(rewrittenPlan));\n    }\n    return rewrittenPlan;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewJoinRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override protected @Nullable RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      @Nullable Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> queryToViewTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    Aggregate aggregate = (Aggregate) node;\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newAggregateInput = aggregate.getInput(0);\n    RelNode target = aggregate.getInput(0);\n    HepProgram unionRewritingPullProgram = config.unionRewritingPullProgram();\n    if (unionRewritingPullProgram != null) {\n      final HepPlanner tmpPlanner = new HepPlanner(unionRewritingPullProgram);\n      tmpPlanner.setRoot(newAggregateInput);\n      newAggregateInput = tmpPlanner.findBestExp();\n      target = newAggregateInput.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      RexNode newCompensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, queryEC, false,\n          compensationColumnsEquiPred);\n      if (newCompensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n      compensationColumnsEquiPred = newCompensationColumnsEquiPred;\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      RexNode newOtherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, viewEC, true,\n          otherCompensationPred);\n      if (newOtherCompensationPred == null) {\n        \r\n        return null;\n      }\n      otherCompensationPred = newOtherCompensationPred;\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (config.unionRewritingPullProgram() != null) {\n      return aggregate.copy(aggregate.getTraitSet(),\n          ImmutableList.of(\n              newAggregateInput.copy(newAggregateInput.getTraitSet(),\n                  ImmutableList.of(rewrittenPlan))));\n    }\n    return aggregate.copy(aggregate.getTraitSet(), ImmutableList.of(rewrittenPlan));\n  }\n","date":"2020-11-30 06:45:33","endLine":308,"groupId":"102035","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"rewriteQuery","params":"(RelBuilderrelBuilder@RexBuilderrexBuilder@RexSimplifysimplify@RelMetadataQuerymq@RexNodecompensationColumnsEquiPred@RexNodeotherCompensationPred@@NullableProjecttopProject@RelNodenode@BiMap<RelTableRef@RelTableRef>queryToViewTableMapping@EquivalenceClassesviewEC@EquivalenceClassesqueryEC)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/34/ae63927160934747d90d9559c4fb0728d09f55.src","preCode":"  @Override protected RelNode rewriteQuery(\n      RelBuilder relBuilder,\n      RexBuilder rexBuilder,\n      RexSimplify simplify,\n      RelMetadataQuery mq,\n      RexNode compensationColumnsEquiPred,\n      RexNode otherCompensationPred,\n      Project topProject,\n      RelNode node,\n      BiMap<RelTableRef, RelTableRef> queryToViewTableMapping,\n      EquivalenceClasses viewEC, EquivalenceClasses queryEC) {\n    Aggregate aggregate = (Aggregate) node;\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    RelNode newAggregateInput = aggregate.getInput(0);\n    RelNode target = aggregate.getInput(0);\n    if (config.unionRewritingPullProgram() != null) {\n      final HepPlanner tmpPlanner =\n          new HepPlanner(config.unionRewritingPullProgram());\n      tmpPlanner.setRoot(newAggregateInput);\n      newAggregateInput = tmpPlanner.findBestExp();\n      target = newAggregateInput.getInput(0);\n    }\n\n    \r\n    \r\n    List<RexNode> queryExprs = extractReferences(rexBuilder, target);\n    if (!compensationColumnsEquiPred.isAlwaysTrue()) {\n      compensationColumnsEquiPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, queryEC, false,\n          compensationColumnsEquiPred);\n      if (compensationColumnsEquiPred == null) {\n        \r\n        return null;\n      }\n    }\n    \r\n    if (!otherCompensationPred.isAlwaysTrue()) {\n      otherCompensationPred = rewriteExpression(rexBuilder, mq,\n          target, target, queryExprs, queryToViewTableMapping, viewEC, true,\n          otherCompensationPred);\n      if (otherCompensationPred == null) {\n        \r\n        return null;\n      }\n    }\n    final RexNode queryCompensationPred = RexUtil.not(\n        RexUtil.composeConjunction(rexBuilder,\n            ImmutableList.of(compensationColumnsEquiPred,\n                otherCompensationPred)));\n\n    \r\n    RelNode rewrittenPlan = relBuilder\n        .push(target)\n        .filter(simplify.simplifyUnknownAsFalse(queryCompensationPred))\n        .build();\n    if (config.unionRewritingPullProgram() != null) {\n      return aggregate.copy(aggregate.getTraitSet(),\n          ImmutableList.of(\n              newAggregateInput.copy(newAggregateInput.getTraitSet(),\n                  ImmutableList.of(rewrittenPlan))));\n    }\n    return aggregate.copy(aggregate.getTraitSet(), ImmutableList.of(rewrittenPlan));\n  }\n","realPath":"core/src/main/java/org/apache/calcite/rel/rules/materialize/MaterializedViewAggregateRule.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
