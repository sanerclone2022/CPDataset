[{"authorTime":"2019-07-09 13:54:32","codes":[{"authorDate":"2019-07-09 13:54:32","commitOrder":1,"curCode":"  public void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(19, dataType.getPrecision());\n    Assert.assertEquals(2, dataType.getScale());\n  }\n","date":"2019-07-17 02:35:41","endLine":142,"groupId":"16356","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/09cc979fd55a60a783d69331d4c6e69d516696.src","preCode":"  public void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(19, dataType.getPrecision());\n    Assert.assertEquals(2, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2019-07-09 13:54:32","commitOrder":1,"curCode":"  public void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    Assert.assertEquals(28, dataType.getPrecision());\n    Assert.assertEquals(10, dataType.getScale());\n  }\n","date":"2019-07-17 02:35:41","endLine":200,"groupId":"16356","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/09cc979fd55a60a783d69331d4c6e69d516696.src","preCode":"  public void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    Assert.assertEquals(28, dataType.getPrecision());\n    Assert.assertEquals(10, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"f7c0b0a18ab72338e0b3afcdfd087aab3572fddb","commitMessage":"@@@CALCITE-3187: Make decimal type inference overridable (Praveen Kumar)\n\nDecimal return type inference for addition and modulus is hardcoded.\n\nAdd new methods to RelDataTypeSystem to allow implementers to override\nbehavior if needed. Deprecate existing methods for multiply and divide\nin RelDataTypeFactory and move them over to RelDataTypeSystem for\nconsistency.\n\nClose apache/calcite#1311\n","date":"2019-07-17 02:35:41","modifiedFileCount":"5","status":"B","submitter":"Praveen"},{"authorTime":"2019-07-09 13:54:32","codes":[{"authorDate":"2019-11-07 14:34:43","commitOrder":2,"curCode":"  public void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(11, dataType.getPrecision());\n    Assert.assertEquals(2, dataType.getScale());\n  }\n","date":"2019-11-08 09:35:25","endLine":142,"groupId":"16356","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0f/6a8997368f31ba0f84f6d7184d14d1dd7a80a8.src","preCode":"  public void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(19, dataType.getPrecision());\n    Assert.assertEquals(2, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2019-07-09 13:54:32","commitOrder":2,"curCode":"  public void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    Assert.assertEquals(28, dataType.getPrecision());\n    Assert.assertEquals(10, dataType.getScale());\n  }\n","date":"2019-07-17 02:35:41","endLine":200,"groupId":"16356","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2f/09cc979fd55a60a783d69331d4c6e69d516696.src","preCode":"  public void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    Assert.assertEquals(28, dataType.getPrecision());\n    Assert.assertEquals(10, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"}],"commitId":"be571b5ae723cf8699094558a3034e7c22ed9abb","commitMessage":"@@@[CALCITE-3435] Enable decimal modulus operation to allow numeric with non-zero scale (DonnyZone)\n\nDecimal modulus return type inference:\ne1[s1.  p1] % e2[s2.  p2]\n\ns = max(s1.  s2)\np = min(p1-s1.  p2-s2) + max(s1.  s2)\n\nFix up(by Danny):\n* Move the RelDataTypeSystemImpl#deriveDecimalModType impl to its parent interface as a\ndefault\n* Fix some typos\n\nclose apache/calcite#1563\n","date":"2019-11-08 09:35:25","modifiedFileCount":"4","status":"M","submitter":"wellfengzhu"},{"authorTime":"2019-12-03 04:09:18","codes":[{"authorDate":"2019-12-03 04:09:18","commitOrder":3,"curCode":"  public void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(11, dataType.getPrecision());\n    assertEquals(2, dataType.getScale());\n  }\n","date":"2019-12-04 03:17:33","endLine":143,"groupId":"16356","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/60e696de010f0ca7bd2697a64615d047875538.src","preCode":"  public void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(11, dataType.getPrecision());\n    Assert.assertEquals(2, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2019-12-03 04:09:18","commitOrder":3,"curCode":"  public void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    assertEquals(28, dataType.getPrecision());\n    assertEquals(10, dataType.getScale());\n  }\n","date":"2019-12-04 03:17:33","endLine":201,"groupId":"16356","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e8/60e696de010f0ca7bd2697a64615d047875538.src","preCode":"  public void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    Assert.assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    Assert.assertEquals(28, dataType.getPrecision());\n    Assert.assertEquals(10, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"60d27ee3162acead99f2510e36d7591add78e5a6","commitMessage":"@@@[CALCITE-2457] JUnit 4 -> 5: trivial renames\n","date":"2019-12-04 03:17:33","modifiedFileCount":"177","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2019-12-04 02:44:13","codes":[{"authorDate":"2019-12-04 02:44:13","commitOrder":4,"curCode":"  @Test public void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(11, dataType.getPrecision());\n    assertEquals(2, dataType.getScale());\n  }\n","date":"2019-12-14 23:57:27","endLine":141,"groupId":"16356","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/c200b598a43693511e6f543f53831aca7d889a.src","preCode":"  public void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(11, dataType.getPrecision());\n    assertEquals(2, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2019-12-04 02:44:13","commitOrder":4,"curCode":"  @Test public void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    assertEquals(28, dataType.getPrecision());\n    assertEquals(10, dataType.getScale());\n  }\n","date":"2019-12-14 23:57:27","endLine":194,"groupId":"16356","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/99/c200b598a43693511e6f543f53831aca7d889a.src","preCode":"  public void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    assertEquals(28, dataType.getPrecision());\n    assertEquals(10, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"571731b80a58eb095ebac7123285c375e7afff90","commitMessage":"@@@[CALCITE-3559] Update formatting: remove \"// End\" trailers.  move @Test from their own lines\n","date":"2019-12-14 23:57:27","modifiedFileCount":"1961","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(11, dataType.getPrecision());\n    assertEquals(2, dataType.getScale());\n  }\n","date":"2020-04-06 04:57:49","endLine":141,"groupId":"10836","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/62/550f9503062e7ff4ac0265fa2d682a47bf9deb.src","preCode":"  @Test public void testDecimalModReturnTypeInference() {\n    RelDataType operand1 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 10, 1);\n    RelDataType operand2 = TYPE_FACTORY.createSqlType(SqlTypeName.DECIMAL, 19, 2);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(TYPE_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(11, dataType.getPrecision());\n    assertEquals(2, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    assertEquals(28, dataType.getPrecision());\n    assertEquals(10, dataType.getScale());\n  }\n","date":"2020-04-06 04:57:49","endLine":194,"groupId":"10836","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomDecimalModReturnTypeInference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/62/550f9503062e7ff4ac0265fa2d682a47bf9deb.src","preCode":"  @Test public void testCustomDecimalModReturnTypeInference() {\n    RelDataType operand1 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 28, 10);\n    RelDataType operand2 = CUSTOM_FACTORY.createSqlType(SqlTypeName.DECIMAL, 38, 20);\n\n    RelDataType dataType = SqlStdOperatorTable.MOD.inferReturnType(CUSTOM_FACTORY, Lists\n            .newArrayList(operand1, operand2));\n    assertEquals(SqlTypeName.DECIMAL, dataType.getSqlTypeName());\n    assertEquals(28, dataType.getPrecision());\n    assertEquals(10, dataType.getScale());\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/type/RelDataTypeSystemTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
