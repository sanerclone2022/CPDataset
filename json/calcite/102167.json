[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public RexNode convertMultiset(\n      SqlRexContext cx,\n      SqlMultisetValueConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubqueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(originalType, SqlStdOperatorTable.SLICE,\n              ImmutableList.of(expr));\n    }\n    return expr;\n  }\n","date":"2014-11-14 09:39:34","endLine":295,"groupId":"11342","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convertMultiset","params":"(SqlRexContextcx@SqlMultisetValueConstructorop@SqlCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/59/b48d78a36fc824ba8a2f1d28af1b2dc119a52f.src","preCode":"  public RexNode convertMultiset(\n      SqlRexContext cx,\n      SqlMultisetValueConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubqueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(originalType, SqlStdOperatorTable.SLICE,\n              ImmutableList.of(expr));\n    }\n    return expr;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public RexNode convertMultisetQuery(\n      SqlRexContext cx,\n      SqlMultisetQueryConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubqueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(SqlStdOperatorTable.SLICE, expr);\n    }\n    return expr;\n  }\n","date":"2014-11-14 09:39:34","endLine":336,"groupId":"11342","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMultisetQuery","params":"(SqlRexContextcx@SqlMultisetQueryConstructorop@SqlCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/59/b48d78a36fc824ba8a2f1d28af1b2dc119a52f.src","preCode":"  public RexNode convertMultisetQuery(\n      SqlRexContext cx,\n      SqlMultisetQueryConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubqueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(SqlStdOperatorTable.SLICE, expr);\n    }\n    return expr;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2016-11-04 11:52:08","codes":[{"authorDate":"2016-11-04 11:52:08","commitOrder":2,"curCode":"  public RexNode convertMultiset(\n      SqlRexContext cx,\n      SqlMultisetValueConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubQueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(originalType, SqlStdOperatorTable.SLICE,\n              ImmutableList.of(expr));\n    }\n    return expr;\n  }\n","date":"2016-11-21 04:59:20","endLine":418,"groupId":"11342","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convertMultiset","params":"(SqlRexContextcx@SqlMultisetValueConstructorop@SqlCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/2829649f1b33016c49a557ef2fd0702dca60ce.src","preCode":"  public RexNode convertMultiset(\n      SqlRexContext cx,\n      SqlMultisetValueConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubqueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(originalType, SqlStdOperatorTable.SLICE,\n              ImmutableList.of(expr));\n    }\n    return expr;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"},{"authorDate":"2016-11-04 11:52:08","commitOrder":2,"curCode":"  public RexNode convertMultisetQuery(\n      SqlRexContext cx,\n      SqlMultisetQueryConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubQueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(SqlStdOperatorTable.SLICE, expr);\n    }\n    return expr;\n  }\n","date":"2016-11-21 04:59:20","endLine":459,"groupId":"11342","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMultisetQuery","params":"(SqlRexContextcx@SqlMultisetQueryConstructorop@SqlCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/da/2829649f1b33016c49a557ef2fd0702dca60ce.src","preCode":"  public RexNode convertMultisetQuery(\n      SqlRexContext cx,\n      SqlMultisetQueryConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubqueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(SqlStdOperatorTable.SLICE, expr);\n    }\n    return expr;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"}],"commitId":"3ccfb9c0622c0b12f7b74403dabb80badd2b3bfb","commitMessage":"@@@Cosmetic changes.  and deprecate some methods\n","date":"2016-11-21 04:59:20","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public RexNode convertMultiset(\n      SqlRexContext cx,\n      SqlMultisetValueConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubQueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType() != null && msType.getComponentType().isStruct()\n        : \"componentType of \" + msType + \" must be struct\";\n    assert originalType.getComponentType() != null\n        : \"componentType of \" + originalType + \" must be struct\";\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(originalType, SqlStdOperatorTable.SLICE,\n              ImmutableList.of(expr));\n    }\n    return expr;\n  }\n","date":"2020-11-30 06:45:33","endLine":463,"groupId":"102167","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"convertMultiset","params":"(SqlRexContextcx@SqlMultisetValueConstructorop@SqlCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/ed8943d9f748185ef2ee89c6ec241d2494247b.src","preCode":"  public RexNode convertMultiset(\n      SqlRexContext cx,\n      SqlMultisetValueConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubQueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(originalType, SqlStdOperatorTable.SLICE,\n              ImmutableList.of(expr));\n    }\n    return expr;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public RexNode convertMultisetQuery(\n      SqlRexContext cx,\n      SqlMultisetQueryConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubQueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType() != null && msType.getComponentType().isStruct()\n        : \"componentType of \" + msType + \" must be struct\";\n    assert originalType.getComponentType() != null\n        : \"componentType of \" + originalType + \" must be struct\";\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(SqlStdOperatorTable.SLICE, expr);\n    }\n    return expr;\n  }\n","date":"2020-11-30 06:45:33","endLine":507,"groupId":"102167","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"convertMultisetQuery","params":"(SqlRexContextcx@SqlMultisetQueryConstructorop@SqlCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/ed8943d9f748185ef2ee89c6ec241d2494247b.src","preCode":"  public RexNode convertMultisetQuery(\n      SqlRexContext cx,\n      SqlMultisetQueryConstructor op,\n      SqlCall call) {\n    final RelDataType originalType =\n        cx.getValidator().getValidatedNodeType(call);\n    RexRangeRef rr = cx.getSubQueryExpr(call);\n    assert rr != null;\n    RelDataType msType = rr.getType().getFieldList().get(0).getType();\n    RexNode expr =\n        cx.getRexBuilder().makeInputRef(\n            msType,\n            rr.getOffset());\n    assert msType.getComponentType().isStruct();\n    if (!originalType.getComponentType().isStruct()) {\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      expr =\n          cx.getRexBuilder().makeCall(SqlStdOperatorTable.SLICE, expr);\n    }\n    return expr;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
