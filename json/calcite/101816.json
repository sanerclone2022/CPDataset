[{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":3,"curCode":"  public boolean checkOperandTypes(\n      SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          false)) {\n        \r\n        boolean coerced = false;\n        if (callBinding.getValidator().isTypeCoercionEnabled()) {\n          TypeCoercion typeCoercion = callBinding.getValidator().getTypeCoercion();\n          ImmutableList.Builder<RelDataType> builder = ImmutableList.builder();\n          for (int i = 0; i < callBinding.getOperandCount(); i++) {\n            builder.add(callBinding.getOperandType(i));\n          }\n          ImmutableList<RelDataType> dataTypes = builder.build();\n          coerced = typeCoercion.builtinFunctionCoercion(callBinding, dataTypes, families);\n        }\n        \r\n        for (Ord<SqlNode> op1 : Ord.zip(callBinding.operands())) {\n          if (!checkSingleOperandType(\n              callBinding,\n              op1.e,\n              op1.i,\n              throwOnFailure)) {\n            return false;\n          }\n        }\n        return coerced;\n      }\n    }\n    return true;\n  }\n","date":"2019-08-29 17:01:46","endLine":142,"groupId":"9500","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/28e288232751101ba80bfef03f51f7d9810530.src","preCode":"  public boolean checkOperandTypes(\n      SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          false)) {\n        \r\n        boolean coerced = false;\n        if (callBinding.getValidator().isTypeCoercionEnabled()) {\n          TypeCoercion typeCoercion = callBinding.getValidator().getTypeCoercion();\n          ImmutableList.Builder<RelDataType> builder = ImmutableList.builder();\n          for (int i = 0; i < callBinding.getOperandCount(); i++) {\n            builder.add(callBinding.getOperandType(i));\n          }\n          ImmutableList<RelDataType> dataTypes = builder.build();\n          coerced = typeCoercion.builtinFunctionCoercion(callBinding, dataTypes, families);\n        }\n        \r\n        for (Ord<SqlNode> op1 : Ord.zip(callBinding.operands())) {\n          if (!checkSingleOperandType(\n              callBinding,\n              op1.e,\n              op1.i,\n              throwOnFailure)) {\n            return false;\n          }\n        }\n        return coerced;\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"MB"},{"authorDate":"2018-05-30 12:16:57","commitOrder":3,"curCode":"  @Override public boolean checkOperandTypesWithoutTypeCoercion(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          throwOnFailure)) {\n        return false;\n      }\n    }\n    return true;\n  }\n","date":"2019-08-29 17:01:46","endLine":162,"groupId":"9500","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypesWithoutTypeCoercion","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/28e288232751101ba80bfef03f51f7d9810530.src","preCode":"  @Override public boolean checkOperandTypesWithoutTypeCoercion(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          throwOnFailure)) {\n        return false;\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2020-04-09 10:56:51","commitOrder":4,"curCode":"  public boolean checkOperandTypes(\n      SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          false)) {\n        \r\n        boolean coerced = false;\n        if (callBinding.isTypeCoercionEnabled()) {\n          TypeCoercion typeCoercion = callBinding.getValidator().getTypeCoercion();\n          ImmutableList.Builder<RelDataType> builder = ImmutableList.builder();\n          for (int i = 0; i < callBinding.getOperandCount(); i++) {\n            builder.add(callBinding.getOperandType(i));\n          }\n          ImmutableList<RelDataType> dataTypes = builder.build();\n          coerced = typeCoercion.builtinFunctionCoercion(callBinding, dataTypes, families);\n        }\n        \r\n        for (Ord<SqlNode> op1 : Ord.zip(callBinding.operands())) {\n          if (!checkSingleOperandType(\n              callBinding,\n              op1.e,\n              op1.i,\n              throwOnFailure)) {\n            return false;\n          }\n        }\n        return coerced;\n      }\n    }\n    return true;\n  }\n","date":"2020-04-10 10:56:43","endLine":142,"groupId":"12105","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/7848dbe8865a98e5e32e92fd1b3a453307ffc9.src","preCode":"  public boolean checkOperandTypes(\n      SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          false)) {\n        \r\n        boolean coerced = false;\n        if (callBinding.getValidator().isTypeCoercionEnabled()) {\n          TypeCoercion typeCoercion = callBinding.getValidator().getTypeCoercion();\n          ImmutableList.Builder<RelDataType> builder = ImmutableList.builder();\n          for (int i = 0; i < callBinding.getOperandCount(); i++) {\n            builder.add(callBinding.getOperandType(i));\n          }\n          ImmutableList<RelDataType> dataTypes = builder.build();\n          coerced = typeCoercion.builtinFunctionCoercion(callBinding, dataTypes, families);\n        }\n        \r\n        for (Ord<SqlNode> op1 : Ord.zip(callBinding.operands())) {\n          if (!checkSingleOperandType(\n              callBinding,\n              op1.e,\n              op1.i,\n              throwOnFailure)) {\n            return false;\n          }\n        }\n        return coerced;\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2018-05-30 12:16:57","commitOrder":4,"curCode":"  @Override public boolean checkOperandTypesWithoutTypeCoercion(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          throwOnFailure)) {\n        return false;\n      }\n    }\n    return true;\n  }\n","date":"2019-08-29 17:01:46","endLine":162,"groupId":"9500","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypesWithoutTypeCoercion","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/28e288232751101ba80bfef03f51f7d9810530.src","preCode":"  @Override public boolean checkOperandTypesWithoutTypeCoercion(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          throwOnFailure)) {\n        return false;\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"}],"commitId":"4e9870078fcaa7da9e475c94f43309cc3244fa22","commitMessage":"@@@[CALCITE-3900] Add Config for SqlValidator\n\nThe SqlValidator now has 7 setXXX methods for all kinds of control flags. \nwhich is hard for code evolving.\n\nThere is also no way to config these things through the FrameworkConfig.\n\nAdd a SqlValidator.Config to solve these problems.\n","date":"2020-04-10 10:56:43","modifiedFileCount":"33","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":5,"curCode":"  @Override public boolean checkOperandTypes(\n      SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          false)) {\n        \r\n        boolean coerced = false;\n        if (callBinding.isTypeCoercionEnabled()) {\n          TypeCoercion typeCoercion = callBinding.getValidator().getTypeCoercion();\n          ImmutableList.Builder<RelDataType> builder = ImmutableList.builder();\n          for (int i = 0; i < callBinding.getOperandCount(); i++) {\n            builder.add(callBinding.getOperandType(i));\n          }\n          ImmutableList<RelDataType> dataTypes = builder.build();\n          coerced = typeCoercion.builtinFunctionCoercion(callBinding, dataTypes, families);\n        }\n        \r\n        for (Ord<SqlNode> op1 : Ord.zip(callBinding.operands())) {\n          if (!checkSingleOperandType(\n              callBinding,\n              op1.e,\n              op1.i,\n              throwOnFailure)) {\n            return false;\n          }\n        }\n        return coerced;\n      }\n    }\n    return true;\n  }\n","date":"2020-10-07 05:42:47","endLine":152,"groupId":"101816","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkOperandTypes","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c8/fe147e29da0479e4bf2a1da0f820e4a7d9ba4d.src","preCode":"  public boolean checkOperandTypes(\n      SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          false)) {\n        \r\n        boolean coerced = false;\n        if (callBinding.isTypeCoercionEnabled()) {\n          TypeCoercion typeCoercion = callBinding.getValidator().getTypeCoercion();\n          ImmutableList.Builder<RelDataType> builder = ImmutableList.builder();\n          for (int i = 0; i < callBinding.getOperandCount(); i++) {\n            builder.add(callBinding.getOperandType(i));\n          }\n          ImmutableList<RelDataType> dataTypes = builder.build();\n          coerced = typeCoercion.builtinFunctionCoercion(callBinding, dataTypes, families);\n        }\n        \r\n        for (Ord<SqlNode> op1 : Ord.zip(callBinding.operands())) {\n          if (!checkSingleOperandType(\n              callBinding,\n              op1.e,\n              op1.i,\n              throwOnFailure)) {\n            return false;\n          }\n        }\n        return coerced;\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2018-05-30 12:16:57","commitOrder":5,"curCode":"  @Override public boolean checkOperandTypesWithoutTypeCoercion(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          throwOnFailure)) {\n        return false;\n      }\n    }\n    return true;\n  }\n","date":"2019-08-29 17:01:46","endLine":162,"groupId":"101816","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkOperandTypesWithoutTypeCoercion","params":"(SqlCallBindingcallBinding@booleanthrowOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b9/28e288232751101ba80bfef03f51f7d9810530.src","preCode":"  @Override public boolean checkOperandTypesWithoutTypeCoercion(SqlCallBinding callBinding,\n      boolean throwOnFailure) {\n    if (families.size() != callBinding.getOperandCount()) {\n      \r\n      \r\n      return false;\n    }\n\n    for (Ord<SqlNode> op : Ord.zip(callBinding.operands())) {\n      if (!checkSingleOperandType(\n          callBinding,\n          op.e,\n          op.i,\n          throwOnFailure)) {\n        return false;\n      }\n    }\n    return true;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
