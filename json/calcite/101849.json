[{"authorTime":"2018-05-30 12:16:57","codes":[{"authorDate":"2018-05-30 12:16:57","commitOrder":1,"curCode":"  public RelDataType getTightestCommonType(RelDataType type1, RelDataType type2) {\n    if (type1 == null || type2 == null) {\n      return null;\n    }\n    \r\n    if (type1.equals(type2)\n        || (type1.isNullable() != type2.isNullable()\n        && factory.createTypeWithNullability(type1, type2.isNullable()).equals(type2))) {\n      return factory.createTypeWithNullability(type1,\n          type1.isNullable() || type2.isNullable());\n    }\n    \r\n    if (SqlTypeUtil.isNull(type1)) {\n      return type2;\n    }\n    if (SqlTypeUtil.isNull(type2)) {\n      return type1;\n    }\n    RelDataType resultType = null;\n    if (SqlTypeUtil.isString(type1)\n        && SqlTypeUtil.isString(type2)) {\n      resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      \r\n      \r\n      if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n        resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n      }\n    }\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      resultType = type2;\n    }\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      resultType = type1;\n    }\n\n    if (type1.isStruct() && type2.isStruct()) {\n      if (SqlTypeUtil.equalAsStructSansNullability(factory, type1, type2,\n          validator.getCatalogReader().nameMatcher())) {\n        \r\n        \r\n        \r\n        List<RelDataType> fields = new ArrayList<>();\n        List<String> fieldNames = type1.getFieldNames();\n        for (Pair<RelDataTypeField, RelDataTypeField> pair\n            : Pair.zip(type1.getFieldList(), type2.getFieldList())) {\n          RelDataType leftType = pair.left.getType();\n          RelDataType rightType = pair.right.getType();\n          RelDataType dataType = getTightestCommonType(leftType, rightType);\n          boolean isNullable = leftType.isNullable() || rightType.isNullable();\n          fields.add(factory.createTypeWithNullability(dataType, isNullable));\n        }\n        return factory.createStructType(type1.getStructKind(), fields, fieldNames);\n      }\n    }\n\n    if (SqlTypeUtil.isArray(type1) && SqlTypeUtil.isArray(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        resultType = factory.createTypeWithNullability(type1,\n            type1.isNullable() || type2.isNullable());\n      }\n    }\n\n    if (SqlTypeUtil.isMap(type1) && SqlTypeUtil.isMap(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        RelDataType keyType = getTightestCommonType(type1.getKeyType(), type2.getKeyType());\n        RelDataType valType = getTightestCommonType(type1.getValueType(), type2.getValueType());\n        resultType = factory.createMapType(keyType, valType);\n      }\n    }\n\n    return resultType;\n  }\n","date":"2019-08-29 17:01:46","endLine":384,"groupId":"14200","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTightestCommonType","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/0f4ee77127921f87881574ad4ea00f289a61ea.src","preCode":"  public RelDataType getTightestCommonType(RelDataType type1, RelDataType type2) {\n    if (type1 == null || type2 == null) {\n      return null;\n    }\n    \r\n    if (type1.equals(type2)\n        || (type1.isNullable() != type2.isNullable()\n        && factory.createTypeWithNullability(type1, type2.isNullable()).equals(type2))) {\n      return factory.createTypeWithNullability(type1,\n          type1.isNullable() || type2.isNullable());\n    }\n    \r\n    if (SqlTypeUtil.isNull(type1)) {\n      return type2;\n    }\n    if (SqlTypeUtil.isNull(type2)) {\n      return type1;\n    }\n    RelDataType resultType = null;\n    if (SqlTypeUtil.isString(type1)\n        && SqlTypeUtil.isString(type2)) {\n      resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      \r\n      \r\n      if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n        resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n      }\n    }\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      resultType = type2;\n    }\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      resultType = type1;\n    }\n\n    if (type1.isStruct() && type2.isStruct()) {\n      if (SqlTypeUtil.equalAsStructSansNullability(factory, type1, type2,\n          validator.getCatalogReader().nameMatcher())) {\n        \r\n        \r\n        \r\n        List<RelDataType> fields = new ArrayList<>();\n        List<String> fieldNames = type1.getFieldNames();\n        for (Pair<RelDataTypeField, RelDataTypeField> pair\n            : Pair.zip(type1.getFieldList(), type2.getFieldList())) {\n          RelDataType leftType = pair.left.getType();\n          RelDataType rightType = pair.right.getType();\n          RelDataType dataType = getTightestCommonType(leftType, rightType);\n          boolean isNullable = leftType.isNullable() || rightType.isNullable();\n          fields.add(factory.createTypeWithNullability(dataType, isNullable));\n        }\n        return factory.createStructType(type1.getStructKind(), fields, fieldNames);\n      }\n    }\n\n    if (SqlTypeUtil.isArray(type1) && SqlTypeUtil.isArray(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        resultType = factory.createTypeWithNullability(type1,\n            type1.isNullable() || type2.isNullable());\n      }\n    }\n\n    if (SqlTypeUtil.isMap(type1) && SqlTypeUtil.isMap(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        RelDataType keyType = getTightestCommonType(type1.getKeyType(), type2.getKeyType());\n        RelDataType valType = getTightestCommonType(type1.getValueType(), type2.getValueType());\n        resultType = factory.createMapType(keyType, valType);\n      }\n    }\n\n    return resultType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"B"},{"authorDate":"2018-05-30 12:16:57","commitOrder":1,"curCode":"  public RelDataType getWiderTypeForDecimal(RelDataType type1, RelDataType type2) {\n    if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      return factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    return null;\n  }\n","date":"2019-08-29 17:01:46","endLine":534,"groupId":"15173","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getWiderTypeForDecimal","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/3e/0f4ee77127921f87881574ad4ea00f289a61ea.src","preCode":"  public RelDataType getWiderTypeForDecimal(RelDataType type1, RelDataType type2) {\n    if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      return factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"B"}],"commitId":"01477c42ded991aaa7b14cf72a6e4ea1a20edf5e","commitMessage":"@@@[CALCITE-2302] Implicit type cast support\n\nChanges:\n* Support full implicit type coercion for SQL contexts:\nSet operation.  binary arithmetic exprs.  binary equality\nexprs.  binary comparison exprs.  case when(COALESCE). \nIN operation.  builtin functions.  user defined function(UDF);\n* The SqlValidator now takes a component named `TypeCoercion`\nresponsible for the coercion work.  you can turn off the coercion with\n`SqlValidator#setEnableTypeCoercion(false)`;\n* We follow PostgreSQL and SQL-SERVER conversion style for two integers division. \ni.e. `'9'/2` returns INTEGER 4.\n","date":"2019-08-29 17:01:46","modifiedFileCount":"50","status":"B","submitter":"yuzhao.cyz"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  @Override public RelDataType getTightestCommonType(RelDataType type1, RelDataType type2) {\n    if (type1 == null || type2 == null) {\n      return null;\n    }\n    \r\n    if (type1.equals(type2)\n        || (type1.isNullable() != type2.isNullable()\n        && factory.createTypeWithNullability(type1, type2.isNullable()).equals(type2))) {\n      return factory.createTypeWithNullability(type1,\n          type1.isNullable() || type2.isNullable());\n    }\n    \r\n    if (SqlTypeUtil.isNull(type1)) {\n      return type2;\n    }\n    if (SqlTypeUtil.isNull(type2)) {\n      return type1;\n    }\n    RelDataType resultType = null;\n    if (SqlTypeUtil.isString(type1)\n        && SqlTypeUtil.isString(type2)) {\n      resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      \r\n      \r\n      if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n        resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n      }\n    }\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      resultType = type2;\n    }\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      resultType = type1;\n    }\n\n    if (type1.isStruct() && type2.isStruct()) {\n      if (SqlTypeUtil.equalAsStructSansNullability(factory, type1, type2,\n          validator.getCatalogReader().nameMatcher())) {\n        \r\n        \r\n        \r\n        List<RelDataType> fields = new ArrayList<>();\n        List<String> fieldNames = type1.getFieldNames();\n        for (Pair<RelDataTypeField, RelDataTypeField> pair\n            : Pair.zip(type1.getFieldList(), type2.getFieldList())) {\n          RelDataType leftType = pair.left.getType();\n          RelDataType rightType = pair.right.getType();\n          RelDataType dataType = getTightestCommonType(leftType, rightType);\n          boolean isNullable = leftType.isNullable() || rightType.isNullable();\n          fields.add(factory.createTypeWithNullability(dataType, isNullable));\n        }\n        return factory.createStructType(type1.getStructKind(), fields, fieldNames);\n      }\n    }\n\n    if (SqlTypeUtil.isArray(type1) && SqlTypeUtil.isArray(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        resultType = factory.createTypeWithNullability(type1,\n            type1.isNullable() || type2.isNullable());\n      }\n    }\n\n    if (SqlTypeUtil.isMap(type1) && SqlTypeUtil.isMap(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        RelDataType keyType = getTightestCommonType(type1.getKeyType(), type2.getKeyType());\n        RelDataType valType = getTightestCommonType(type1.getValueType(), type2.getValueType());\n        resultType = factory.createMapType(keyType, valType);\n      }\n    }\n\n    return resultType;\n  }\n","date":"2020-10-07 05:42:47","endLine":403,"groupId":"14200","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTightestCommonType","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/8bb3c50917ab9590d354c52584f5a167364848.src","preCode":"  public RelDataType getTightestCommonType(RelDataType type1, RelDataType type2) {\n    if (type1 == null || type2 == null) {\n      return null;\n    }\n    \r\n    if (type1.equals(type2)\n        || (type1.isNullable() != type2.isNullable()\n        && factory.createTypeWithNullability(type1, type2.isNullable()).equals(type2))) {\n      return factory.createTypeWithNullability(type1,\n          type1.isNullable() || type2.isNullable());\n    }\n    \r\n    if (SqlTypeUtil.isNull(type1)) {\n      return type2;\n    }\n    if (SqlTypeUtil.isNull(type2)) {\n      return type1;\n    }\n    RelDataType resultType = null;\n    if (SqlTypeUtil.isString(type1)\n        && SqlTypeUtil.isString(type2)) {\n      resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      \r\n      \r\n      if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n        resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n      }\n    }\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      resultType = type2;\n    }\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      resultType = type1;\n    }\n\n    if (type1.isStruct() && type2.isStruct()) {\n      if (SqlTypeUtil.equalAsStructSansNullability(factory, type1, type2,\n          validator.getCatalogReader().nameMatcher())) {\n        \r\n        \r\n        \r\n        List<RelDataType> fields = new ArrayList<>();\n        List<String> fieldNames = type1.getFieldNames();\n        for (Pair<RelDataTypeField, RelDataTypeField> pair\n            : Pair.zip(type1.getFieldList(), type2.getFieldList())) {\n          RelDataType leftType = pair.left.getType();\n          RelDataType rightType = pair.right.getType();\n          RelDataType dataType = getTightestCommonType(leftType, rightType);\n          boolean isNullable = leftType.isNullable() || rightType.isNullable();\n          fields.add(factory.createTypeWithNullability(dataType, isNullable));\n        }\n        return factory.createStructType(type1.getStructKind(), fields, fieldNames);\n      }\n    }\n\n    if (SqlTypeUtil.isArray(type1) && SqlTypeUtil.isArray(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        resultType = factory.createTypeWithNullability(type1,\n            type1.isNullable() || type2.isNullable());\n      }\n    }\n\n    if (SqlTypeUtil.isMap(type1) && SqlTypeUtil.isMap(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        RelDataType keyType = getTightestCommonType(type1.getKeyType(), type2.getKeyType());\n        RelDataType valType = getTightestCommonType(type1.getValueType(), type2.getValueType());\n        resultType = factory.createMapType(keyType, valType);\n      }\n    }\n\n    return resultType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":2,"curCode":"  @Override public RelDataType getWiderTypeForDecimal(RelDataType type1, RelDataType type2) {\n    if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      return factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    return null;\n  }\n","date":"2020-10-07 05:42:47","endLine":557,"groupId":"15173","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getWiderTypeForDecimal","params":"(RelDataTypetype1@RelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/85/8bb3c50917ab9590d354c52584f5a167364848.src","preCode":"  public RelDataType getWiderTypeForDecimal(RelDataType type1, RelDataType type2) {\n    if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      return factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public @Nullable RelDataType getTightestCommonType(\n      @Nullable RelDataType type1, @Nullable RelDataType type2) {\n    if (type1 == null || type2 == null) {\n      return null;\n    }\n    \r\n    if (type1.equals(type2)\n        || (type1.isNullable() != type2.isNullable()\n        && factory.createTypeWithNullability(type1, type2.isNullable()).equals(type2))) {\n      return factory.createTypeWithNullability(type1,\n          type1.isNullable() || type2.isNullable());\n    }\n    \r\n    if (SqlTypeUtil.isNull(type1)) {\n      return type2;\n    }\n    if (SqlTypeUtil.isNull(type2)) {\n      return type1;\n    }\n    RelDataType resultType = null;\n    if (SqlTypeUtil.isString(type1)\n        && SqlTypeUtil.isString(type2)) {\n      resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      \r\n      \r\n      if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n        resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n      }\n    }\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      resultType = type2;\n    }\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      resultType = type1;\n    }\n\n    if (type1.isStruct() && type2.isStruct()) {\n      if (SqlTypeUtil.equalAsStructSansNullability(factory, type1, type2,\n          validator.getCatalogReader().nameMatcher())) {\n        \r\n        \r\n        \r\n        List<RelDataType> fields = new ArrayList<>();\n        List<String> fieldNames = type1.getFieldNames();\n        for (Pair<RelDataTypeField, RelDataTypeField> pair\n            : Pair.zip(type1.getFieldList(), type2.getFieldList())) {\n          RelDataType leftType = pair.left.getType();\n          RelDataType rightType = pair.right.getType();\n          RelDataType dataType = getTightestCommonTypeOrThrow(leftType, rightType);\n          boolean isNullable = leftType.isNullable() || rightType.isNullable();\n          fields.add(factory.createTypeWithNullability(dataType, isNullable));\n        }\n        return factory.createStructType(type1.getStructKind(), fields, fieldNames);\n      }\n    }\n\n    if (SqlTypeUtil.isArray(type1) && SqlTypeUtil.isArray(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        resultType = factory.createTypeWithNullability(type1,\n            type1.isNullable() || type2.isNullable());\n      }\n    }\n\n    if (SqlTypeUtil.isMap(type1) && SqlTypeUtil.isMap(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        RelDataType keyType =\n            getTightestCommonTypeOrThrow(type1.getKeyType(), type2.getKeyType());\n        RelDataType valType =\n            getTightestCommonTypeOrThrow(type1.getValueType(), type2.getValueType());\n        resultType = factory.createMapType(keyType, valType);\n      }\n    }\n\n    return resultType;\n  }\n","date":"2020-11-30 06:45:33","endLine":413,"groupId":"101849","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getTightestCommonType","params":"(@NullableRelDataTypetype1@@NullableRelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/60/1a9f1704fc15bc4c6d04583ce5fad6755142e4.src","preCode":"  @Override public RelDataType getTightestCommonType(RelDataType type1, RelDataType type2) {\n    if (type1 == null || type2 == null) {\n      return null;\n    }\n    \r\n    if (type1.equals(type2)\n        || (type1.isNullable() != type2.isNullable()\n        && factory.createTypeWithNullability(type1, type2.isNullable()).equals(type2))) {\n      return factory.createTypeWithNullability(type1,\n          type1.isNullable() || type2.isNullable());\n    }\n    \r\n    if (SqlTypeUtil.isNull(type1)) {\n      return type2;\n    }\n    if (SqlTypeUtil.isNull(type2)) {\n      return type1;\n    }\n    RelDataType resultType = null;\n    if (SqlTypeUtil.isString(type1)\n        && SqlTypeUtil.isString(type2)) {\n      resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      \r\n      \r\n      if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n        resultType = factory.leastRestrictive(ImmutableList.of(type1, type2));\n      }\n    }\n    \r\n    if (SqlTypeUtil.isDate(type1) && SqlTypeUtil.isTimestamp(type2)) {\n      resultType = type2;\n    }\n    if (SqlTypeUtil.isDate(type2) && SqlTypeUtil.isTimestamp(type1)) {\n      resultType = type1;\n    }\n\n    if (type1.isStruct() && type2.isStruct()) {\n      if (SqlTypeUtil.equalAsStructSansNullability(factory, type1, type2,\n          validator.getCatalogReader().nameMatcher())) {\n        \r\n        \r\n        \r\n        List<RelDataType> fields = new ArrayList<>();\n        List<String> fieldNames = type1.getFieldNames();\n        for (Pair<RelDataTypeField, RelDataTypeField> pair\n            : Pair.zip(type1.getFieldList(), type2.getFieldList())) {\n          RelDataType leftType = pair.left.getType();\n          RelDataType rightType = pair.right.getType();\n          RelDataType dataType = getTightestCommonType(leftType, rightType);\n          boolean isNullable = leftType.isNullable() || rightType.isNullable();\n          fields.add(factory.createTypeWithNullability(dataType, isNullable));\n        }\n        return factory.createStructType(type1.getStructKind(), fields, fieldNames);\n      }\n    }\n\n    if (SqlTypeUtil.isArray(type1) && SqlTypeUtil.isArray(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        resultType = factory.createTypeWithNullability(type1,\n            type1.isNullable() || type2.isNullable());\n      }\n    }\n\n    if (SqlTypeUtil.isMap(type1) && SqlTypeUtil.isMap(type2)) {\n      if (SqlTypeUtil.equalSansNullability(factory, type1, type2)) {\n        RelDataType keyType = getTightestCommonType(type1.getKeyType(), type2.getKeyType());\n        RelDataType valType = getTightestCommonType(type1.getValueType(), type2.getValueType());\n        resultType = factory.createMapType(keyType, valType);\n      }\n    }\n\n    return resultType;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public @Nullable RelDataType getWiderTypeForDecimal(\n      @Nullable RelDataType type1, @Nullable RelDataType type2) {\n    if (type1 == null || type2 == null) {\n      return null;\n    }\n    if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      return factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    return null;\n  }\n","date":"2020-11-30 06:45:33","endLine":589,"groupId":"101849","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getWiderTypeForDecimal","params":"(@NullableRelDataTypetype1@@NullableRelDataTypetype2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/60/1a9f1704fc15bc4c6d04583ce5fad6755142e4.src","preCode":"  @Override public RelDataType getWiderTypeForDecimal(RelDataType type1, RelDataType type2) {\n    if (!SqlTypeUtil.isDecimal(type1) && !SqlTypeUtil.isDecimal(type2)) {\n      return null;\n    }\n    \r\n    \r\n    \r\n    \r\n    if (SqlTypeUtil.isNumeric(type1) && SqlTypeUtil.isNumeric(type2)) {\n      return factory.leastRestrictive(ImmutableList.of(type1, type2));\n    }\n    return null;\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/validate/implicit/AbstractTypeCoercion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
