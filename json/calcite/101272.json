[{"authorTime":"2015-06-02 12:00:59","codes":[{"authorDate":"2015-06-02 12:00:59","commitOrder":1,"curCode":"  @Test public void testValuesBadNullFieldNames() {\n    try {\n      final RelBuilder builder = RelBuilder.create(config().build());\n      RelBuilder root = builder.values((String[]) null, \"a\", \"b\");\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Value count must be a positive multiple of field count\"));\n    }\n  }\n","date":"2015-06-06 07:06:13","endLine":483,"groupId":"9743","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValuesBadNullFieldNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/351d522e14f5980ab6cf20f3de4f946e14e5b0.src","preCode":"  @Test public void testValuesBadNullFieldNames() {\n    try {\n      final RelBuilder builder = RelBuilder.create(config().build());\n      RelBuilder root = builder.values((String[]) null, \"a\", \"b\");\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Value count must be a positive multiple of field count\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"B"},{"authorDate":"2015-06-02 12:00:59","commitOrder":1,"curCode":"  @Test public void testValuesBadNoValues() {\n    try {\n      final RelBuilder builder = RelBuilder.create(config().build());\n      RelBuilder root = builder.values(new String[]{\"a\", \"b\"});\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Value count must be a positive multiple of field count\"));\n    }\n  }\n","date":"2015-06-06 07:06:13","endLine":505,"groupId":"9743","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValuesBadNoValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/351d522e14f5980ab6cf20f3de4f946e14e5b0.src","preCode":"  @Test public void testValuesBadNoValues() {\n    try {\n      final RelBuilder builder = RelBuilder.create(config().build());\n      RelBuilder root = builder.values(new String[]{\"a\", \"b\"});\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Value count must be a positive multiple of field count\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"B"}],"commitId":"6609cb1a30bf36b1223078e8ebaf7cc9f7289b7c","commitMessage":"@@@[CALCITE-748] Add RelBuilder.  builder for expressions in relational algebra\n\nDeprecate RelTraitSet argument to SortFactory.createSort.\n\nAdd RelProtoBuilder and use it in one planner rule.  FilterAggregateTransposeRule.\n","date":"2015-06-06 07:06:13","modifiedFileCount":"13","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testValuesBadNullFieldNames() {\n    try {\n      final RelBuilder builder = RelBuilder.create(config().build());\n      RelBuilder root = builder.values((String[]) null, \"a\", \"b\");\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Value count must be a positive multiple of field count\"));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":2651,"groupId":"101272","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValuesBadNullFieldNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testValuesBadNullFieldNames() {\n    try {\n      final RelBuilder builder = RelBuilder.create(config().build());\n      RelBuilder root = builder.values((String[]) null, \"a\", \"b\");\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Value count must be a positive multiple of field count\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2642,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testValuesBadNoValues() {\n    try {\n      final RelBuilder builder = RelBuilder.create(config().build());\n      RelBuilder root = builder.values(new String[]{\"a\", \"b\"});\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Value count must be a positive multiple of field count\"));\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":2673,"groupId":"101272","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testValuesBadNoValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testValuesBadNoValues() {\n    try {\n      final RelBuilder builder = RelBuilder.create(config().build());\n      RelBuilder root = builder.values(new String[]{\"a\", \"b\"});\n      fail(\"expected error, got \" + root);\n    } catch (IllegalArgumentException e) {\n      assertThat(e.getMessage(),\n          is(\"Value count must be a positive multiple of field count\"));\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2664,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
