[{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2019-10-28 08:41:07","commitOrder":3,"curCode":"  @Test public void testTableReferenceForMinus() {\n    final String sql = \"select emp.deptno, emp.sal from emp\\n\"\n        + \"except all select emp.deptno, emp.sal from emp where empno = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, [CATALOG, SALES, EMP].#1]\"));\n  }\n","date":"2019-11-25 09:52:44","endLine":2463,"groupId":"16655","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableReferenceForMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/4e0edf63c765707dd1750866c63b2130d82861.src","preCode":"  @Test public void testTableReferenceForMinus() {\n    final String sql = \"select emp.deptno, emp.sal from emp\\n\"\n        + \"except all select emp.deptno, emp.sal from emp where empno = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, [CATALOG, SALES, EMP].#1]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2455,"status":"B"},{"authorDate":"2019-10-16 19:22:37","commitOrder":3,"curCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","date":"2019-10-18 06:51:31","endLine":2141,"groupId":"16655","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesUnionMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2124,"status":"NB"}],"commitId":"a3c8a1b3c70f3aee0fbfe7de0997743d997877bd","commitMessage":"@@@[CALCITE-3454] Support Exchange.  SetOp and TableModify for builtin\nmetadata query (xy2953396112)\n\nclose apache/calcite#1552\n","date":"2019-11-25 09:52:44","modifiedFileCount":"18","status":"M","submitter":"dz"},{"authorTime":"2019-12-29 18:33:23","codes":[{"authorDate":"2019-10-28 08:41:07","commitOrder":4,"curCode":"  @Test public void testTableReferenceForMinus() {\n    final String sql = \"select emp.deptno, emp.sal from emp\\n\"\n        + \"except all select emp.deptno, emp.sal from emp where empno = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, [CATALOG, SALES, EMP].#1]\"));\n  }\n","date":"2019-11-25 09:52:44","endLine":2463,"groupId":"16655","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableReferenceForMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/4e0edf63c765707dd1750866c63b2130d82861.src","preCode":"  @Test public void testTableReferenceForMinus() {\n    final String sql = \"select emp.deptno, emp.sal from emp\\n\"\n        + \"except all select emp.deptno, emp.sal from emp where empno = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, [CATALOG, SALES, EMP].#1]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2455,"status":"N"},{"authorDate":"2019-12-29 18:33:23","commitOrder":4,"curCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences,\n        sortsAs(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates,\n        sortsAs(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","date":"2020-01-10 14:59:48","endLine":2629,"groupId":"16655","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesUnionMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/0075a5ccdb198373d8c0f15d0ca54f5c8e566e.src","preCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates.toString(),\n        equalTo(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2612,"status":"M"}],"commitId":"3acb30875525e029be96726a357ee9950cce3310","commitMessage":"@@@[CALCITE-2450] Reorder RexCall predicates to a canonical form\n\n$0=$1 and $1=$0 have the same semantics.  so it is worth normalizing them\nto reduce the planning time.\n","date":"2020-01-10 14:59:48","modifiedFileCount":"17","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testTableReferenceForMinus() {\n    final String sql = \"select emp.deptno, emp.sal from emp\\n\"\n        + \"except all select emp.deptno, emp.sal from emp where empno = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, [CATALOG, SALES, EMP].#1]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":2586,"groupId":"101142","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableReferenceForMinus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testTableReferenceForMinus() {\n    final String sql = \"select emp.deptno, emp.sal from emp\\n\"\n        + \"except all select emp.deptno, emp.sal from emp where empno = 5\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences.toString(),\n        equalTo(\"[[CATALOG, SALES, EMP].#0, [CATALOG, SALES, EMP].#1]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2578,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences,\n        sortsAs(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates,\n        sortsAs(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","date":"2020-04-06 04:57:49","endLine":2638,"groupId":"101142","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllPredicatesUnionMultiTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testAllPredicatesUnionMultiTable() {\n    final String sql = \"select x.sal from\\n\"\n        + \"(select a.deptno, a.sal from (select * from emp) as a\\n\"\n        + \"union all select emp.deptno, emp.sal from emp\\n\"\n        + \"union all select emp.deptno, emp.sal from emp where empno = 5) as x\";\n    final RelNode rel = convertSql(sql);\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n    final Set<RelTableRef> tableReferences = Sets.newTreeSet(mq.getTableReferences(rel));\n    assertThat(tableReferences,\n        sortsAs(\"[[CATALOG, SALES, EMP].#0, \"\n            + \"[CATALOG, SALES, EMP].#1, \"\n            + \"[CATALOG, SALES, EMP].#2]\"));\n    \r\n    \r\n    final RelOptPredicateList inputSet = mq.getAllPredicates(rel);\n    assertThat(inputSet.pulledUpPredicates,\n        sortsAs(\"[=([CATALOG, SALES, EMP].#2.$0, 5)]\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2621,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
