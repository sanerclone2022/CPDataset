[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testMinFunc() {\n    tester.setFor(SqlStdOperatorTable.MIN, VM_EXPAND);\n    tester.checkFails(\n        \"min(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"min(1)\", \"INTEGER\");\n    tester.checkType(\"min(1.2)\", \"DECIMAL(2, 1)\");\n    tester.checkType(\"min(DISTINCT 1.5)\", \"DECIMAL(2, 1)\");\n    tester.checkFails(\n        \"^min()^\",\n        \"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^min(1, 2)^\",\n        \"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"min(x)\",\n        values,\n        \"0\",\n        0d);\n    tester.checkAgg(\n        \"min(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"min(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"min(DISTINCT x)\",\n        values,\n        \"0\",\n        0d);\n  }\n","date":"2014-11-14 09:39:34","endLine":4807,"groupId":"12903","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testMinFunc() {\n    tester.setFor(SqlStdOperatorTable.MIN, VM_EXPAND);\n    tester.checkFails(\n        \"min(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"min(1)\", \"INTEGER\");\n    tester.checkType(\"min(1.2)\", \"DECIMAL(2, 1)\");\n    tester.checkType(\"min(DISTINCT 1.5)\", \"DECIMAL(2, 1)\");\n    tester.checkFails(\n        \"^min()^\",\n        \"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^min(1, 2)^\",\n        \"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"min(x)\",\n        values,\n        \"0\",\n        0d);\n    tester.checkAgg(\n        \"min(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"min(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"min(DISTINCT x)\",\n        values,\n        \"0\",\n        0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4766,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testMaxFunc() {\n    tester.setFor(SqlStdOperatorTable.MAX, VM_EXPAND);\n    tester.checkFails(\n        \"max(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"max(1)\", \"INTEGER\");\n    tester.checkType(\"max(1.2)\", \"DECIMAL(2, 1)\");\n    tester.checkType(\"max(DISTINCT 1.5)\", \"DECIMAL(2, 1)\");\n    tester.checkFails(\n        \"^max()^\",\n        \"Invalid number of arguments to function 'MAX'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^max(1, 2)^\",\n        \"Invalid number of arguments to function 'MAX'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"max(x)\",\n        values,\n        \"2\",\n        0d);\n    tester.checkAgg(\n        \"max(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"max(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"max(DISTINCT x)\", values, \"2\", 0d);\n  }\n","date":"2014-11-14 09:39:34","endLine":4847,"groupId":"6935","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testMaxFunc() {\n    tester.setFor(SqlStdOperatorTable.MAX, VM_EXPAND);\n    tester.checkFails(\n        \"max(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"max(1)\", \"INTEGER\");\n    tester.checkType(\"max(1.2)\", \"DECIMAL(2, 1)\");\n    tester.checkType(\"max(DISTINCT 1.5)\", \"DECIMAL(2, 1)\");\n    tester.checkFails(\n        \"^max()^\",\n        \"Invalid number of arguments to function 'MAX'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^max(1, 2)^\",\n        \"Invalid number of arguments to function 'MAX'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"max(x)\",\n        values,\n        \"2\",\n        0d);\n    tester.checkAgg(\n        \"max(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"max(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"max(DISTINCT x)\", values, \"2\", 0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":4809,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testMinFunc() {\n    tester.setFor(SqlStdOperatorTable.MIN, VM_EXPAND);\n    tester.checkFails(\n        \"min(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"min(1)\", \"INTEGER\");\n    tester.checkType(\"min(1.2)\", \"DECIMAL(2, 1)\");\n    tester.checkType(\"min(DISTINCT 1.5)\", \"DECIMAL(2, 1)\");\n    tester.checkFails(\n        \"^min()^\",\n        \"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^min(1, 2)^\",\n        \"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"min(x)\",\n        values,\n        \"0\",\n        0d);\n    tester.checkAgg(\n        \"min(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"min(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"min(DISTINCT x)\",\n        values,\n        \"0\",\n        0d);\n  }\n","date":"2020-04-06 04:57:49","endLine":8876,"groupId":"10816","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testMinFunc() {\n    tester.setFor(SqlStdOperatorTable.MIN, VM_EXPAND);\n    tester.checkFails(\n        \"min(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"min(1)\", \"INTEGER\");\n    tester.checkType(\"min(1.2)\", \"DECIMAL(2, 1)\");\n    tester.checkType(\"min(DISTINCT 1.5)\", \"DECIMAL(2, 1)\");\n    tester.checkFails(\n        \"^min()^\",\n        \"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^min(1, 2)^\",\n        \"Invalid number of arguments to function 'MIN'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"min(x)\",\n        values,\n        \"0\",\n        0d);\n    tester.checkAgg(\n        \"min(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"min(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"min(DISTINCT x)\",\n        values,\n        \"0\",\n        0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8835,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testMaxFunc() {\n    tester.setFor(SqlStdOperatorTable.MAX, VM_EXPAND);\n    tester.checkFails(\n        \"max(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"max(1)\", \"INTEGER\");\n    tester.checkType(\"max(1.2)\", \"DECIMAL(2, 1)\");\n    tester.checkType(\"max(DISTINCT 1.5)\", \"DECIMAL(2, 1)\");\n    tester.checkFails(\n        \"^max()^\",\n        \"Invalid number of arguments to function 'MAX'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^max(1, 2)^\",\n        \"Invalid number of arguments to function 'MAX'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"max(x)\",\n        values,\n        \"2\",\n        0d);\n    tester.checkAgg(\n        \"max(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"max(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"max(DISTINCT x)\", values, \"2\", 0d);\n  }\n","date":"2020-04-06 04:57:49","endLine":8916,"groupId":"10816","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testMaxFunc() {\n    tester.setFor(SqlStdOperatorTable.MAX, VM_EXPAND);\n    tester.checkFails(\n        \"max(^*^)\",\n        \"Unknown identifier '\\\\*'\",\n        false);\n    tester.checkType(\"max(1)\", \"INTEGER\");\n    tester.checkType(\"max(1.2)\", \"DECIMAL(2, 1)\");\n    tester.checkType(\"max(DISTINCT 1.5)\", \"DECIMAL(2, 1)\");\n    tester.checkFails(\n        \"^max()^\",\n        \"Invalid number of arguments to function 'MAX'. Was expecting 1 arguments\",\n        false);\n    tester.checkFails(\n        \"^max(1, 2)^\",\n        \"Invalid number of arguments to function 'MAX'. Was expecting 1 arguments\",\n        false);\n    final String[] values = {\"0\", \"CAST(null AS INTEGER)\", \"2\", \"2\"};\n    if (!enable) {\n      return;\n    }\n    tester.checkAgg(\n        \"max(x)\",\n        values,\n        \"2\",\n        0d);\n    tester.checkAgg(\n        \"max(CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"max(DISTINCT CASE x WHEN 0 THEN NULL ELSE -1 END)\",\n        values,\n        \"-1\",\n        0d);\n    tester.checkAgg(\n        \"max(DISTINCT x)\", values, \"2\", 0d);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":8878,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
