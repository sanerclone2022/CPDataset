[{"authorTime":"2019-08-22 13:40:41","codes":[{"authorDate":"2019-08-19 15:18:59","commitOrder":2,"curCode":"  @Test public void testLambdaCallsBinaryOpDouble() {\n    \r\n    ParameterExpression paramExpr =\n        Expressions.parameter(Double.TYPE, \"arg\");\n\n    \r\n    \r\n    FunctionExpression lambdaExpr = Expressions.lambda(\n        Expressions.add(\n            paramExpr,\n            Expressions.constant(2d)),\n        Arrays.asList(paramExpr));\n\n    \r\n    String s = Expressions.toString(lambdaExpr);\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public double apply(double arg) {\\n\"\n            + \"    return arg + 2.0D;\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Double arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      arg.doubleValue());\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (Double) arg);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        s);\n\n    \r\n    \r\n    double n = (Double) lambdaExpr.compile().dynamicInvoke(1.5d);\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(3.5D, n, 0d);\n  }\n","date":"2019-08-21 09:34:16","endLine":233,"groupId":"9948","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLambdaCallsBinaryOpDouble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/67/c529ab61cc8fb7f0278fe96c90e3729ee50f75.src","preCode":"  @Test public void testLambdaCallsBinaryOpDouble() {\n    \r\n    ParameterExpression paramExpr =\n        Expressions.parameter(Double.TYPE, \"arg\");\n\n    \r\n    \r\n    FunctionExpression lambdaExpr = Expressions.lambda(\n        Expressions.add(\n            paramExpr,\n            Expressions.constant(2d)),\n        Arrays.asList(paramExpr));\n\n    \r\n    String s = Expressions.toString(lambdaExpr);\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public double apply(double arg) {\\n\"\n            + \"    return arg + 2.0D;\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Double arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      arg.doubleValue());\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (Double) arg);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        s);\n\n    \r\n    \r\n    double n = (Double) lambdaExpr.compile().dynamicInvoke(1.5d);\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(3.5D, n, 0d);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"NB"},{"authorDate":"2019-08-22 13:40:41","commitOrder":2,"curCode":"  @Test public void testLambdaCallsBinaryOpMixDoubleType() {\n    \r\n    ParameterExpression paramExpr =\n        Expressions.parameter(Double.TYPE, \"arg\");\n\n    \r\n    \r\n    FunctionExpression lambdaExpr = Expressions.lambda(\n        Expressions.add(\n            paramExpr,\n            Expressions.constant(10.1d)),\n        Arrays.asList(paramExpr));\n    \r\n    String s = Expressions.toString(lambdaExpr);\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public double apply(double arg) {\\n\"\n            + \"    return arg + 10.1D;\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Double arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      arg.doubleValue());\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (Double) arg);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        s);\n\n    \r\n    \r\n    double n = (Double) lambdaExpr.compile().dynamicInvoke(5.0f);\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(15.1d, n, 0d);\n  }\n","date":"2019-12-05 14:43:41","endLine":405,"groupId":"9948","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLambdaCallsBinaryOpMixDoubleType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f7/4a02f708951796bb46c5d7579f46e9e794d911.src","preCode":"  @Test public void testLambdaCallsBinaryOpMixDoubleType() {\n    \r\n    ParameterExpression paramExpr =\n        Expressions.parameter(Double.TYPE, \"arg\");\n\n    \r\n    \r\n    FunctionExpression lambdaExpr = Expressions.lambda(\n        Expressions.add(\n            paramExpr,\n            Expressions.constant(10.1d)),\n        Arrays.asList(paramExpr));\n    \r\n    String s = Expressions.toString(lambdaExpr);\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public double apply(double arg) {\\n\"\n            + \"    return arg + 10.1D;\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Double arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      arg.doubleValue());\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (Double) arg);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        s);\n\n    \r\n    \r\n    double n = (Double) lambdaExpr.compile().dynamicInvoke(5.0f);\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(15.1d, n, 0d);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"}],"commitId":"67ed322370472dc4403eed485d0b61fe5a40f84f","commitMessage":"@@@ [CALCITE-3281] Support mixed Primitive types for BinaryExpression evaluate method (Wang Yanlin)\n","date":"2019-12-05 14:43:41","modifiedFileCount":"2","status":"M","submitter":"yanzhi"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testLambdaCallsBinaryOpDouble() {\n    \r\n    ParameterExpression paramExpr =\n        Expressions.parameter(Double.TYPE, \"arg\");\n\n    \r\n    \r\n    FunctionExpression lambdaExpr = Expressions.lambda(\n        Expressions.add(\n            paramExpr,\n            Expressions.constant(2d)),\n        Arrays.asList(paramExpr));\n\n    \r\n    String s = Expressions.toString(lambdaExpr);\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public double apply(double arg) {\\n\"\n            + \"    return arg + 2.0D;\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Double arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      arg.doubleValue());\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (Double) arg);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        s);\n\n    \r\n    \r\n    double n = (Double) lambdaExpr.compile().dynamicInvoke(1.5d);\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(3.5D, n, 0d);\n  }\n","date":"2020-04-06 04:57:49","endLine":241,"groupId":"1093","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testLambdaCallsBinaryOpDouble","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/13/bc869ac710465a9aea6569422a3aee0ffba952.src","preCode":"  @Test public void testLambdaCallsBinaryOpDouble() {\n    \r\n    ParameterExpression paramExpr =\n        Expressions.parameter(Double.TYPE, \"arg\");\n\n    \r\n    \r\n    FunctionExpression lambdaExpr = Expressions.lambda(\n        Expressions.add(\n            paramExpr,\n            Expressions.constant(2d)),\n        Arrays.asList(paramExpr));\n\n    \r\n    String s = Expressions.toString(lambdaExpr);\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public double apply(double arg) {\\n\"\n            + \"    return arg + 2.0D;\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Double arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      arg.doubleValue());\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (Double) arg);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        s);\n\n    \r\n    \r\n    double n = (Double) lambdaExpr.compile().dynamicInvoke(1.5d);\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(3.5D, n, 0d);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testLambdaCallsBinaryOpMixDoubleType() {\n    \r\n    ParameterExpression paramExpr =\n        Expressions.parameter(Double.TYPE, \"arg\");\n\n    \r\n    \r\n    FunctionExpression lambdaExpr = Expressions.lambda(\n        Expressions.add(\n            paramExpr,\n            Expressions.constant(10.1d)),\n        Arrays.asList(paramExpr));\n    \r\n    String s = Expressions.toString(lambdaExpr);\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public double apply(double arg) {\\n\"\n            + \"    return arg + 10.1D;\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Double arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      arg.doubleValue());\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (Double) arg);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        s);\n\n    \r\n    \r\n    double n = (Double) lambdaExpr.compile().dynamicInvoke(5.0f);\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(15.1d, n, 0d);\n  }\n","date":"2020-04-06 04:57:49","endLine":405,"groupId":"1093","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testLambdaCallsBinaryOpMixDoubleType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/13/bc869ac710465a9aea6569422a3aee0ffba952.src","preCode":"  @Test public void testLambdaCallsBinaryOpMixDoubleType() {\n    \r\n    ParameterExpression paramExpr =\n        Expressions.parameter(Double.TYPE, \"arg\");\n\n    \r\n    \r\n    FunctionExpression lambdaExpr = Expressions.lambda(\n        Expressions.add(\n            paramExpr,\n            Expressions.constant(10.1d)),\n        Arrays.asList(paramExpr));\n    \r\n    String s = Expressions.toString(lambdaExpr);\n    assertEquals(\n        \"new org.apache.calcite.linq4j.function.Function1() {\\n\"\n            + \"  public double apply(double arg) {\\n\"\n            + \"    return arg + 10.1D;\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Double arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      arg.doubleValue());\\n\"\n            + \"  }\\n\"\n            + \"  public Object apply(Object arg) {\\n\"\n            + \"    return apply(\\n\"\n            + \"      (Double) arg);\\n\"\n            + \"  }\\n\"\n            + \"}\\n\",\n        s);\n\n    \r\n    \r\n    double n = (Double) lambdaExpr.compile().dynamicInvoke(5.0f);\n\n    \r\n    \r\n    \r\n    \r\n    assertEquals(15.1d, n, 0d);\n  }\n","realPath":"linq4j/src/test/java/org/apache/calcite/linq4j/test/ExpressionTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
