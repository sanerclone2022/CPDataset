[{"authorTime":"2018-01-11 02:10:44","codes":[{"authorDate":"2018-01-11 02:10:44","commitOrder":1,"curCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n    final RexCall call = (RexCall) rexNode;\n    final List<String> druidExpressions = DruidExpressions.toDruidExpressions(\n        druidQuery, rowType,\n        call.getOperands());\n    if (druidExpressions == null) {\n      return null;\n    }\n    return DruidExpressions.nAryOperatorCall(druidOperatorName, druidExpressions);\n  }\n","date":"2018-02-17 11:35:34","endLine":57,"groupId":"16273","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toDruidExpression","params":"(RexNoderexNode@RelDataTyperowType@DruidQuerydruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/1454b57ab7053466153adae1adf8dd5c1c612d.src","preCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n    final RexCall call = (RexCall) rexNode;\n    final List<String> druidExpressions = DruidExpressions.toDruidExpressions(\n        druidQuery, rowType,\n        call.getOperands());\n    if (druidExpressions == null) {\n      return null;\n    }\n    return DruidExpressions.nAryOperatorCall(druidOperatorName, druidExpressions);\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/NaryOperatorConverter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2018-01-11 02:10:44","commitOrder":1,"curCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n\n    final RexCall call = (RexCall) rexNode;\n\n    final List<String> druidExpressions = DruidExpressions.toDruidExpressions(\n        druidQuery, rowType,\n        call.getOperands());\n\n    if (druidExpressions == null) {\n      return null;\n    }\n\n    return DruidQuery\n        .format(\"(%s %s)\", druidOperator, Iterables.getOnlyElement(druidExpressions));\n  }\n","date":"2018-02-17 11:35:34","endLine":60,"groupId":"16273","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toDruidExpression","params":"(RexNoderexNode@RelDataTyperowType@DruidQuerydruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/e5da37165f867c4c8067d2196d8a20e41b28f4.src","preCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n\n    final RexCall call = (RexCall) rexNode;\n\n    final List<String> druidExpressions = DruidExpressions.toDruidExpressions(\n        druidQuery, rowType,\n        call.getOperands());\n\n    if (druidExpressions == null) {\n      return null;\n    }\n\n    return DruidQuery\n        .format(\"(%s %s)\", druidOperator, Iterables.getOnlyElement(druidExpressions));\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/UnaryPrefixOperatorConversion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"0e13a8a021b6bdfa64967b5640dc8b970c11883a","commitMessage":"@@@[CALCITE-2170] Use Druid Expressions capabilities to improve the amount of work that can be pushed to Druid\n\nClose apache/calcite#624\n","date":"2018-02-17 11:35:34","modifiedFileCount":"14","status":"B","submitter":"Slim"},{"authorTime":"2018-01-11 02:10:44","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":2,"curCode":"  @Override public @Nullable String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n    final RexCall call = (RexCall) rexNode;\n    final List<String> druidExpressions = DruidExpressions.toDruidExpressions(\n        druidQuery, rowType,\n        call.getOperands());\n    if (druidExpressions == null) {\n      return null;\n    }\n    return DruidExpressions.nAryOperatorCall(druidOperatorName, druidExpressions);\n  }\n","date":"2020-11-30 06:45:33","endLine":56,"groupId":"10479","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toDruidExpression","params":"(RexNoderexNode@RelDataTyperowType@DruidQuerydruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/97/c950d51d7c189483996d69b306a1ee0b753bed.src","preCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n    final RexCall call = (RexCall) rexNode;\n    final List<String> druidExpressions = DruidExpressions.toDruidExpressions(\n        druidQuery, rowType,\n        call.getOperands());\n    if (druidExpressions == null) {\n      return null;\n    }\n    return DruidExpressions.nAryOperatorCall(druidOperatorName, druidExpressions);\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/NaryOperatorConverter.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2018-01-11 02:10:44","commitOrder":2,"curCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n\n    final RexCall call = (RexCall) rexNode;\n\n    final List<String> druidExpressions = DruidExpressions.toDruidExpressions(\n        druidQuery, rowType,\n        call.getOperands());\n\n    if (druidExpressions == null) {\n      return null;\n    }\n\n    return DruidQuery\n        .format(\"(%s %s)\", druidOperator, Iterables.getOnlyElement(druidExpressions));\n  }\n","date":"2018-02-17 11:35:34","endLine":60,"groupId":"10479","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toDruidExpression","params":"(RexNoderexNode@RelDataTyperowType@DruidQuerydruidQuery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a8/e5da37165f867c4c8067d2196d8a20e41b28f4.src","preCode":"  @Override public String toDruidExpression(RexNode rexNode, RelDataType rowType,\n      DruidQuery druidQuery) {\n\n    final RexCall call = (RexCall) rexNode;\n\n    final List<String> druidExpressions = DruidExpressions.toDruidExpressions(\n        druidQuery, rowType,\n        call.getOperands());\n\n    if (druidExpressions == null) {\n      return null;\n    }\n\n    return DruidQuery\n        .format(\"(%s %s)\", druidOperator, Iterables.getOnlyElement(druidExpressions));\n  }\n","realPath":"druid/src/main/java/org/apache/calcite/adapter/druid/UnaryPrefixOperatorConversion.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
