[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2018-06-26 20:09:06","commitOrder":2,"curCode":"    public Expression implementResult(AggContext info,\n        AggResultContext result) {\n      WinAggResultContext winResult = (WinAggResultContext) result;\n\n      List<RexNode> rexArgs = winResult.rexArguments();\n\n      ParameterExpression res = Expressions.parameter(0, info.returnType(),\n          result.currentBlock().newName(\"nth\"));\n\n      RexToLixTranslator currentRowTranslator =\n          winResult.rowTranslator(\n              winResult.computeIndex(Expressions.constant(0), SeekType.START));\n\n      Expression dstIndex = winResult.computeIndex(\n          Expressions.subtract(\n              currentRowTranslator.translate(rexArgs.get(1), int.class),\n              Expressions.constant(1)), SeekType.START);\n\n      Expression rowInRange = winResult.rowInPartition(dstIndex);\n\n      BlockBuilder thenBlock = result.nestBlock();\n      Expression nthValue = winResult.rowTranslator(dstIndex)\n          .translate(rexArgs.get(0), res.type);\n      thenBlock.add(Expressions.statement(Expressions.assign(res, nthValue)));\n      result.exitBlock();\n      BlockStatement thenBranch = thenBlock.toBlock();\n\n      Expression defaultValue = getDefaultValue(res.type);\n\n      result.currentBlock().add(Expressions.declare(0, res, null));\n      result.currentBlock().add(\n          Expressions.ifThenElse(rowInRange, thenBranch,\n              Expressions.statement(Expressions.assign(res, defaultValue))));\n      return res;\n    }\n","date":"2018-07-09 13:46:20","endLine":1575,"groupId":"8916","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"implementResult","params":"(AggContextinfo@AggResultContextresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f8/06a11d20b77268e99c6fab07d7933b369ef9f2.src","preCode":"    public Expression implementResult(AggContext info,\n        AggResultContext result) {\n      WinAggResultContext winResult = (WinAggResultContext) result;\n\n      List<RexNode> rexArgs = winResult.rexArguments();\n\n      ParameterExpression res = Expressions.parameter(0, info.returnType(),\n          result.currentBlock().newName(\"nth\"));\n\n      RexToLixTranslator currentRowTranslator =\n          winResult.rowTranslator(\n              winResult.computeIndex(Expressions.constant(0), SeekType.START));\n\n      Expression dstIndex = winResult.computeIndex(\n          Expressions.subtract(\n              currentRowTranslator.translate(rexArgs.get(1), int.class),\n              Expressions.constant(1)), SeekType.START);\n\n      Expression rowInRange = winResult.rowInPartition(dstIndex);\n\n      BlockBuilder thenBlock = result.nestBlock();\n      Expression nthValue = winResult.rowTranslator(dstIndex)\n          .translate(rexArgs.get(0), res.type);\n      thenBlock.add(Expressions.statement(Expressions.assign(res, nthValue)));\n      result.exitBlock();\n      BlockStatement thenBranch = thenBlock.toBlock();\n\n      Expression defaultValue = getDefaultValue(res.type);\n\n      result.currentBlock().add(Expressions.declare(0, res, null));\n      result.currentBlock().add(\n          Expressions.ifThenElse(rowInRange, thenBranch,\n              Expressions.statement(Expressions.assign(res, defaultValue))));\n      return res;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1541,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"    public Expression implementResult(AggContext info,\n        AggResultContext result) {\n      WinAggResultContext winResult = (WinAggResultContext) result;\n\n      List<RexNode> rexArgs = winResult.rexArguments();\n\n      ParameterExpression res = Expressions.parameter(0, info.returnType(),\n          result.currentBlock().newName(isLead ? \"lead\" : \"lag\"));\n\n      Expression offset;\n      RexToLixTranslator currentRowTranslator =\n          winResult.rowTranslator(winResult.computeIndex(\n              Expressions.constant(0), SeekType.SET));\n      if (rexArgs.size() >= 2) {\n        \r\n        offset = currentRowTranslator.translate(\n            rexArgs.get(1), int.class);\n      } else {\n        offset = Expressions.constant(1);\n      }\n      if (!isLead) {\n        offset = Expressions.negate(offset);\n      }\n      Expression dstIndex = winResult.computeIndex(offset, SeekType.SET);\n\n      Expression rowInRange = winResult.rowInPartition(dstIndex);\n\n      BlockBuilder thenBlock = result.nestBlock();\n      Expression lagResult = winResult.rowTranslator(dstIndex).translate(\n          rexArgs.get(0), res.type);\n      thenBlock.add(Expressions.statement(Expressions.assign(res, lagResult)));\n      result.exitBlock();\n      BlockStatement thenBranch = thenBlock.toBlock();\n\n      Expression defaultValue = rexArgs.size() == 3\n          ? currentRowTranslator.translate(rexArgs.get(2), res.type)\n          : getDefaultValue(res.type);\n\n      result.currentBlock().add(Expressions.declare(0, res, null));\n      result.currentBlock().add(Expressions.ifThenElse(rowInRange, thenBranch,\n          Expressions.statement(Expressions.assign(res, defaultValue))));\n      return res;\n    }\n","date":"2014-11-14 09:39:34","endLine":1144,"groupId":"8916","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"implementResult","params":"(AggContextinfo@AggResultContextresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/b78c3bb6792fb45f7c847be5dfab79c526c594.src","preCode":"    public Expression implementResult(AggContext info,\n        AggResultContext result) {\n      WinAggResultContext winResult = (WinAggResultContext) result;\n\n      List<RexNode> rexArgs = winResult.rexArguments();\n\n      ParameterExpression res = Expressions.parameter(0, info.returnType(),\n          result.currentBlock().newName(isLead ? \"lead\" : \"lag\"));\n\n      Expression offset;\n      RexToLixTranslator currentRowTranslator =\n          winResult.rowTranslator(winResult.computeIndex(\n              Expressions.constant(0), SeekType.SET));\n      if (rexArgs.size() >= 2) {\n        \r\n        offset = currentRowTranslator.translate(\n            rexArgs.get(1), int.class);\n      } else {\n        offset = Expressions.constant(1);\n      }\n      if (!isLead) {\n        offset = Expressions.negate(offset);\n      }\n      Expression dstIndex = winResult.computeIndex(offset, SeekType.SET);\n\n      Expression rowInRange = winResult.rowInPartition(dstIndex);\n\n      BlockBuilder thenBlock = result.nestBlock();\n      Expression lagResult = winResult.rowTranslator(dstIndex).translate(\n          rexArgs.get(0), res.type);\n      thenBlock.add(Expressions.statement(Expressions.assign(res, lagResult)));\n      result.exitBlock();\n      BlockStatement thenBranch = thenBlock.toBlock();\n\n      Expression defaultValue = rexArgs.size() == 3\n          ? currentRowTranslator.translate(rexArgs.get(2), res.type)\n          : getDefaultValue(res.type);\n\n      result.currentBlock().add(Expressions.declare(0, res, null));\n      result.currentBlock().add(Expressions.ifThenElse(rowInRange, thenBranch,\n          Expressions.statement(Expressions.assign(res, defaultValue))));\n      return res;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1102,"status":"NB"}],"commitId":"df774b9efa97c0b11ed63036e829750aaa88b99d","commitMessage":"@@@[CALCITE-2383] NTH_VALUE window function (Sergey Nuyanzin)\n\nBreak SqlNthValueAggregateFunction out as a top-level class.  and add\ntests to SqlValidatorTest. (Julian Hyde)\n\nClose apache/calcite#742\n","date":"2018-07-09 13:46:20","modifiedFileCount":"5","status":"M","submitter":"snuyanzin"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"    @Override public Expression implementResult(AggContext info,\n        AggResultContext result) {\n      WinAggResultContext winResult = (WinAggResultContext) result;\n\n      List<RexNode> rexArgs = winResult.rexArguments();\n\n      ParameterExpression res = Expressions.parameter(0, info.returnType(),\n          result.currentBlock().newName(\"nth\"));\n\n      RexToLixTranslator currentRowTranslator =\n          winResult.rowTranslator(\n              winResult.computeIndex(Expressions.constant(0), SeekType.START));\n\n      Expression dstIndex = winResult.computeIndex(\n          Expressions.subtract(\n              currentRowTranslator.translate(rexArgs.get(1), int.class),\n              Expressions.constant(1)), SeekType.START);\n\n      Expression rowInRange = winResult.rowInPartition(dstIndex);\n\n      BlockBuilder thenBlock = result.nestBlock();\n      Expression nthValue = winResult.rowTranslator(dstIndex)\n          .translate(rexArgs.get(0), res.type);\n      thenBlock.add(Expressions.statement(Expressions.assign(res, nthValue)));\n      result.exitBlock();\n      BlockStatement thenBranch = thenBlock.toBlock();\n\n      Expression defaultValue = getDefaultValue(res.type);\n\n      result.currentBlock().add(Expressions.declare(0, res, null));\n      result.currentBlock().add(\n          Expressions.ifThenElse(rowInRange, thenBranch,\n              Expressions.statement(Expressions.assign(res, defaultValue))));\n      return res;\n    }\n","date":"2020-10-07 05:42:47","endLine":1550,"groupId":"112122","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"implementResult","params":"(AggContextinfo@AggResultContextresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/62/03bdb010ef905f4d3b2fc0215f3ec092a7f304.src","preCode":"    public Expression implementResult(AggContext info,\n        AggResultContext result) {\n      WinAggResultContext winResult = (WinAggResultContext) result;\n\n      List<RexNode> rexArgs = winResult.rexArguments();\n\n      ParameterExpression res = Expressions.parameter(0, info.returnType(),\n          result.currentBlock().newName(\"nth\"));\n\n      RexToLixTranslator currentRowTranslator =\n          winResult.rowTranslator(\n              winResult.computeIndex(Expressions.constant(0), SeekType.START));\n\n      Expression dstIndex = winResult.computeIndex(\n          Expressions.subtract(\n              currentRowTranslator.translate(rexArgs.get(1), int.class),\n              Expressions.constant(1)), SeekType.START);\n\n      Expression rowInRange = winResult.rowInPartition(dstIndex);\n\n      BlockBuilder thenBlock = result.nestBlock();\n      Expression nthValue = winResult.rowTranslator(dstIndex)\n          .translate(rexArgs.get(0), res.type);\n      thenBlock.add(Expressions.statement(Expressions.assign(res, nthValue)));\n      result.exitBlock();\n      BlockStatement thenBranch = thenBlock.toBlock();\n\n      Expression defaultValue = getDefaultValue(res.type);\n\n      result.currentBlock().add(Expressions.declare(0, res, null));\n      result.currentBlock().add(\n          Expressions.ifThenElse(rowInRange, thenBranch,\n              Expressions.statement(Expressions.assign(res, defaultValue))));\n      return res;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1516,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"    @Override public Expression implementResult(AggContext info,\n        AggResultContext result) {\n      WinAggResultContext winResult = (WinAggResultContext) result;\n\n      List<RexNode> rexArgs = winResult.rexArguments();\n\n      ParameterExpression res = Expressions.parameter(0, info.returnType(),\n          result.currentBlock().newName(isLead ? \"lead\" : \"lag\"));\n\n      Expression offset;\n      RexToLixTranslator currentRowTranslator =\n          winResult.rowTranslator(\n              winResult.computeIndex(Expressions.constant(0), SeekType.SET));\n      if (rexArgs.size() >= 2) {\n        \r\n        offset = currentRowTranslator.translate(\n            rexArgs.get(1), int.class);\n      } else {\n        offset = Expressions.constant(1);\n      }\n      if (!isLead) {\n        offset = Expressions.negate(offset);\n      }\n      Expression dstIndex = winResult.computeIndex(offset, SeekType.SET);\n\n      Expression rowInRange = winResult.rowInPartition(dstIndex);\n\n      BlockBuilder thenBlock = result.nestBlock();\n      Expression lagResult = winResult.rowTranslator(dstIndex).translate(\n          rexArgs.get(0), res.type);\n      thenBlock.add(Expressions.statement(Expressions.assign(res, lagResult)));\n      result.exitBlock();\n      BlockStatement thenBranch = thenBlock.toBlock();\n\n      Expression defaultValue = rexArgs.size() == 3\n          ? currentRowTranslator.translate(rexArgs.get(2), res.type)\n          : getDefaultValue(res.type);\n\n      result.currentBlock().add(Expressions.declare(0, res, null));\n      result.currentBlock().add(\n          Expressions.ifThenElse(rowInRange, thenBranch,\n              Expressions.statement(Expressions.assign(res, defaultValue))));\n      return res;\n    }\n","date":"2020-10-07 05:42:47","endLine":1621,"groupId":"112122","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"implementResult","params":"(AggContextinfo@AggResultContextresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/62/03bdb010ef905f4d3b2fc0215f3ec092a7f304.src","preCode":"    public Expression implementResult(AggContext info,\n        AggResultContext result) {\n      WinAggResultContext winResult = (WinAggResultContext) result;\n\n      List<RexNode> rexArgs = winResult.rexArguments();\n\n      ParameterExpression res = Expressions.parameter(0, info.returnType(),\n          result.currentBlock().newName(isLead ? \"lead\" : \"lag\"));\n\n      Expression offset;\n      RexToLixTranslator currentRowTranslator =\n          winResult.rowTranslator(\n              winResult.computeIndex(Expressions.constant(0), SeekType.SET));\n      if (rexArgs.size() >= 2) {\n        \r\n        offset = currentRowTranslator.translate(\n            rexArgs.get(1), int.class);\n      } else {\n        offset = Expressions.constant(1);\n      }\n      if (!isLead) {\n        offset = Expressions.negate(offset);\n      }\n      Expression dstIndex = winResult.computeIndex(offset, SeekType.SET);\n\n      Expression rowInRange = winResult.rowInPartition(dstIndex);\n\n      BlockBuilder thenBlock = result.nestBlock();\n      Expression lagResult = winResult.rowTranslator(dstIndex).translate(\n          rexArgs.get(0), res.type);\n      thenBlock.add(Expressions.statement(Expressions.assign(res, lagResult)));\n      result.exitBlock();\n      BlockStatement thenBranch = thenBlock.toBlock();\n\n      Expression defaultValue = rexArgs.size() == 3\n          ? currentRowTranslator.translate(rexArgs.get(2), res.type)\n          : getDefaultValue(res.type);\n\n      result.currentBlock().add(Expressions.declare(0, res, null));\n      result.currentBlock().add(\n          Expressions.ifThenElse(rowInRange, thenBranch,\n              Expressions.statement(Expressions.assign(res, defaultValue))));\n      return res;\n    }\n","realPath":"core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1578,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
