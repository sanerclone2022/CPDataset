[{"authorTime":"2021-06-16 22:05:51","codes":[{"authorDate":"2021-06-16 22:05:51","commitOrder":2,"curCode":"  private void checkJoinToMultiJoinDoesNotMatchSemiOrAntiJoin(JoinRelType type) {\n    final Function<RelBuilder, RelNode> relFn = b -> {\n      RelNode left = b.scan(\"EMP\").build();\n      RelNode right = b.scan(\"DEPT\").build();\n      RelNode semiRight = b.scan(\"BONUS\").build();\n      return b.push(left)\n          .push(right)\n          .join(JoinRelType.INNER,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"DEPTNO\"),\n                  b.field(2, 1, \"DEPTNO\")))\n          .push(semiRight)\n          .join(type,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"JOB\"),\n                  b.field(2, 1, \"JOB\")))\n          .build();\n    };\n    relFn(relFn).withRule(CoreRules.JOIN_TO_MULTI_JOIN).check();\n  }\n","date":"2021-07-07 18:49:11","endLine":608,"groupId":"10141","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkJoinToMultiJoinDoesNotMatchSemiOrAntiJoin","params":"(JoinRelTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/b53c1d888fcbdd6411c9637a562c922985393f.src","preCode":"  private void checkJoinToMultiJoinDoesNotMatchSemiOrAntiJoin(JoinRelType type) {\n    final Function<RelBuilder, RelNode> relFn = b -> {\n      RelNode left = b.scan(\"EMP\").build();\n      RelNode right = b.scan(\"DEPT\").build();\n      RelNode semiRight = b.scan(\"BONUS\").build();\n      return b.push(left)\n          .push(right)\n          .join(JoinRelType.INNER,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"DEPTNO\"),\n                  b.field(2, 1, \"DEPTNO\")))\n          .push(semiRight)\n          .join(type,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"JOB\"),\n                  b.field(2, 1, \"JOB\")))\n          .build();\n    };\n    relFn(relFn).withRule(CoreRules.JOIN_TO_MULTI_JOIN).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"B"},{"authorDate":"2021-06-16 22:05:51","commitOrder":2,"curCode":"  private void checkJoinAssociateRuleWithBottomAlwaysTrueCondition(boolean allowAlwaysTrue) {\n    final Function<RelBuilder, RelNode> relFn = b -> {\n      RelNode bottomLeft = b.scan(\"EMP\").build();\n      RelNode bottomRight = b.scan(\"DEPT\").build();\n      RelNode top = b.scan(\"BONUS\").build();\n\n      return b.push(bottomLeft)\n          .push(bottomRight)\n          .join(JoinRelType.INNER,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"DEPTNO\"),\n                  b.field(2, 1, \"DEPTNO\")))\n          .push(top)\n          .join(JoinRelType.INNER,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"JOB\"),\n                  b.field(2, 1, \"JOB\")))\n          .build();\n    };\n\n    JoinAssociateRule.Config ruleConfig = JoinAssociateRule.Config.DEFAULT;\n    if (!allowAlwaysTrue) {\n      ruleConfig = ruleConfig.withAllowAlwaysTrueCondition(false);\n    }\n\n    HepProgram program = new HepProgramBuilder()\n        .addMatchLimit(1)\n        .addMatchOrder(HepMatchOrder.TOP_DOWN)\n        .addRuleInstance(ruleConfig.toRule())\n        .build();\n    HepPlanner hepPlanner = new HepPlanner(program);\n\n    if (allowAlwaysTrue) {\n      relFn(relFn).with(hepPlanner).check();\n    } else {\n      relFn(relFn).with(hepPlanner).checkUnchanged();\n    }\n  }\n","date":"2021-07-07 18:49:11","endLine":6725,"groupId":"10181","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkJoinAssociateRuleWithBottomAlwaysTrueCondition","params":"(booleanallowAlwaysTrue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d2/b53c1d888fcbdd6411c9637a562c922985393f.src","preCode":"  private void checkJoinAssociateRuleWithBottomAlwaysTrueCondition(boolean allowAlwaysTrue) {\n    final Function<RelBuilder, RelNode> relFn = b -> {\n      RelNode bottomLeft = b.scan(\"EMP\").build();\n      RelNode bottomRight = b.scan(\"DEPT\").build();\n      RelNode top = b.scan(\"BONUS\").build();\n\n      return b.push(bottomLeft)\n          .push(bottomRight)\n          .join(JoinRelType.INNER,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"DEPTNO\"),\n                  b.field(2, 1, \"DEPTNO\")))\n          .push(top)\n          .join(JoinRelType.INNER,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"JOB\"),\n                  b.field(2, 1, \"JOB\")))\n          .build();\n    };\n\n    JoinAssociateRule.Config ruleConfig = JoinAssociateRule.Config.DEFAULT;\n    if (!allowAlwaysTrue) {\n      ruleConfig = ruleConfig.withAllowAlwaysTrueCondition(false);\n    }\n\n    HepProgram program = new HepProgramBuilder()\n        .addMatchLimit(1)\n        .addMatchOrder(HepMatchOrder.TOP_DOWN)\n        .addRuleInstance(ruleConfig.toRule())\n        .build();\n    HepPlanner hepPlanner = new HepPlanner(program);\n\n    if (allowAlwaysTrue) {\n      relFn(relFn).with(hepPlanner).check();\n    } else {\n      relFn(relFn).with(hepPlanner).checkUnchanged();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6688,"status":"MB"}],"commitId":"d46137a197a2840ea5ff9f3b38bb86d423c9af11","commitMessage":"@@@RelOptRulesTest improvements:\n- Provide relFn pattern mechanism to test a RelNode function instead of a sql string\n- Refactor several tests to use relFn\n- Refactor similar tests by using common auxiliary methods\n- Correct auxiliary methods names (use \"check\" prefix instead of \"test\" prefix)\n","date":"2021-07-07 18:49:11","modifiedFileCount":"3","status":"M","submitter":"rubenada"},{"authorTime":"2021-09-17 17:38:52","codes":[{"authorDate":"2021-09-17 17:38:52","commitOrder":3,"curCode":"  private void checkJoinToMultiJoinDoesNotMatchSemiOrAntiJoin(JoinRelType type) {\n    final Function<RelBuilder, RelNode> relFn = b -> {\n      RelNode left = b.scan(\"EMP\").build();\n      RelNode right = b.scan(\"DEPT\").build();\n      RelNode semiRight = b.scan(\"BONUS\").build();\n      return b.push(left)\n          .push(right)\n          .join(JoinRelType.INNER,\n              b.equals(b.field(2, 0, \"DEPTNO\"),\n                  b.field(2, 1, \"DEPTNO\")))\n          .push(semiRight)\n          .join(type,\n              b.equals(b.field(2, 0, \"JOB\"),\n                  b.field(2, 1, \"JOB\")))\n          .build();\n    };\n    relFn(relFn).withRule(CoreRules.JOIN_TO_MULTI_JOIN).check();\n  }\n","date":"2021-09-18 03:08:56","endLine":602,"groupId":"10996","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkJoinToMultiJoinDoesNotMatchSemiOrAntiJoin","params":"(JoinRelTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/4bbf9519c7915bdcfd82976b1d70873c510265.src","preCode":"  private void checkJoinToMultiJoinDoesNotMatchSemiOrAntiJoin(JoinRelType type) {\n    final Function<RelBuilder, RelNode> relFn = b -> {\n      RelNode left = b.scan(\"EMP\").build();\n      RelNode right = b.scan(\"DEPT\").build();\n      RelNode semiRight = b.scan(\"BONUS\").build();\n      return b.push(left)\n          .push(right)\n          .join(JoinRelType.INNER,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"DEPTNO\"),\n                  b.field(2, 1, \"DEPTNO\")))\n          .push(semiRight)\n          .join(type,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"JOB\"),\n                  b.field(2, 1, \"JOB\")))\n          .build();\n    };\n    relFn(relFn).withRule(CoreRules.JOIN_TO_MULTI_JOIN).check();\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":585,"status":"M"},{"authorDate":"2021-09-17 17:38:52","commitOrder":3,"curCode":"  private void checkJoinAssociateRuleWithBottomAlwaysTrueCondition(boolean allowAlwaysTrue) {\n    final Function<RelBuilder, RelNode> relFn = b -> {\n      RelNode bottomLeft = b.scan(\"EMP\").build();\n      RelNode bottomRight = b.scan(\"DEPT\").build();\n      RelNode top = b.scan(\"BONUS\").build();\n\n      return b.push(bottomLeft)\n          .push(bottomRight)\n          .join(JoinRelType.INNER,\n              b.equals(b.field(2, 0, \"DEPTNO\"),\n                  b.field(2, 1, \"DEPTNO\")))\n          .push(top)\n          .join(JoinRelType.INNER,\n              b.equals(b.field(2, 0, \"JOB\"),\n                  b.field(2, 1, \"JOB\")))\n          .build();\n    };\n\n    JoinAssociateRule.Config ruleConfig = JoinAssociateRule.Config.DEFAULT;\n    if (!allowAlwaysTrue) {\n      ruleConfig = ruleConfig.withAllowAlwaysTrueCondition(false);\n    }\n\n    HepProgram program = new HepProgramBuilder()\n        .addMatchLimit(1)\n        .addMatchOrder(HepMatchOrder.TOP_DOWN)\n        .addRuleInstance(ruleConfig.toRule())\n        .build();\n    HepPlanner hepPlanner = new HepPlanner(program);\n\n    if (allowAlwaysTrue) {\n      relFn(relFn).with(hepPlanner).check();\n    } else {\n      relFn(relFn).with(hepPlanner).checkUnchanged();\n    }\n  }\n","date":"2021-09-18 03:08:56","endLine":6812,"groupId":"10996","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkJoinAssociateRuleWithBottomAlwaysTrueCondition","params":"(booleanallowAlwaysTrue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f5/4bbf9519c7915bdcfd82976b1d70873c510265.src","preCode":"  private void checkJoinAssociateRuleWithBottomAlwaysTrueCondition(boolean allowAlwaysTrue) {\n    final Function<RelBuilder, RelNode> relFn = b -> {\n      RelNode bottomLeft = b.scan(\"EMP\").build();\n      RelNode bottomRight = b.scan(\"DEPT\").build();\n      RelNode top = b.scan(\"BONUS\").build();\n\n      return b.push(bottomLeft)\n          .push(bottomRight)\n          .join(JoinRelType.INNER,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"DEPTNO\"),\n                  b.field(2, 1, \"DEPTNO\")))\n          .push(top)\n          .join(JoinRelType.INNER,\n              b.call(SqlStdOperatorTable.EQUALS,\n                  b.field(2, 0, \"JOB\"),\n                  b.field(2, 1, \"JOB\")))\n          .build();\n    };\n\n    JoinAssociateRule.Config ruleConfig = JoinAssociateRule.Config.DEFAULT;\n    if (!allowAlwaysTrue) {\n      ruleConfig = ruleConfig.withAllowAlwaysTrueCondition(false);\n    }\n\n    HepProgram program = new HepProgramBuilder()\n        .addMatchLimit(1)\n        .addMatchOrder(HepMatchOrder.TOP_DOWN)\n        .addRuleInstance(ruleConfig.toRule())\n        .build();\n    HepPlanner hepPlanner = new HepPlanner(program);\n\n    if (allowAlwaysTrue) {\n      relFn(relFn).with(hepPlanner).check();\n    } else {\n      relFn(relFn).with(hepPlanner).checkUnchanged();\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelOptRulesTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":6777,"status":"M"}],"commitId":"4d82c5346292b32a1301214376366c2e8c5a892e","commitMessage":"@@@Add RelBuilder.lessThan.  and use RelBuilder shorthands\n","date":"2021-09-18 03:08:56","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"}]
