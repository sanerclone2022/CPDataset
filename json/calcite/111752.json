[{"authorTime":"2019-03-16 00:43:18","codes":[{"authorDate":"2019-03-16 00:43:18","commitOrder":2,"curCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && top.getAggregation().getKind() == SqlKind.SUM) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2019-04-06 06:22:54","endLine":208,"groupId":"367","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/457e26e45fb903af5e9ae43694b22ddbc143cf.src","preCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && top.getAggregation().getKind() == SqlKind.SUM) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"MB"},{"authorDate":"2019-03-16 00:43:18","commitOrder":2,"curCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2019-04-06 06:22:54","endLine":252,"groupId":"15477","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/457e26e45fb903af5e9ae43694b22ddbc143cf.src","preCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"MB"}],"commitId":"906183a35b6355b3f5e394ce838f5ea1dad09ad2","commitMessage":"@@@[CALCITE-2914] Add a new statistic provider.  to improve how LatticeSuggester deduces foreign keys\n\nStatistic provider now generates SQL statements to look at a join\ncondition and figure out whether either side is a unique key.  and\nwhether the other side is a foreign key (i.e. does an anti-join to\nverify referential integrity).\n\nCreate new package org.apache.calcite.statistic.  and move some\nexisting classes such as MapSqlStatisticProvider into it.\n\nIn JDBC adapter.  when generating SQL for JDBC tables.  use the foreign\ncatalog.  schema and table name.\n\nIn Frameworks.  use a query provider with a 30 minute.  1. 000 element\ncache.  rather than map provider as default provider.\n\nIn LatticeSuggesterTest we continue to use a MapSqlStatisticProvider. \nfor performance reasons.\n\nFix deprecated calls to AggregateCall.create added in [CALCITE-1172].\n\nClose apache/calcite#1141\n","date":"2019-04-06 06:22:54","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-03-16 00:43:18","codes":[{"authorDate":"2020-08-05 12:55:47","commitOrder":3,"curCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && (top.getAggregation().getKind() == SqlKind.SUM\n              || top.getAggregation().getKind() == SqlKind.SUM0)) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2020-08-08 06:49:00","endLine":210,"groupId":"15477","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/9e/213bd8a2fc764cd5acf0ea6664cfc58c8f36f0.src","preCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && top.getAggregation().getKind() == SqlKind.SUM) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-03-16 00:43:18","commitOrder":3,"curCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2019-04-06 06:22:54","endLine":252,"groupId":"15477","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/43/457e26e45fb903af5e9ae43694b22ddbc143cf.src","preCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"N"}],"commitId":"37b8cdbb381369e773229a81ae69ab5c1df34f3e","commitMessage":"@@@[CALCITE-3957] AggregateMergeRule should merge SUM0 into COUNT even if GROUP BY is empty\n\nClose apache/calcite#2097\n","date":"2020-08-08 06:49:00","modifiedFileCount":"4","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"    @Override public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && (top.getAggregation().getKind() == SqlKind.SUM\n              || top.getAggregation().getKind() == SqlKind.SUM0)) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2020-10-07 05:42:47","endLine":210,"groupId":"15477","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/c772f084f6c07604010b5adc2dd9652b6c302f.src","preCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && (top.getAggregation().getKind() == SqlKind.SUM\n              || top.getAggregation().getKind() == SqlKind.SUM0)) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":4,"curCode":"    @Override public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2020-10-07 05:42:47","endLine":254,"groupId":"15477","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5e/c772f084f6c07604010b5adc2dd9652b6c302f.src","preCode":"    public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"    @Override public @Nullable AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && (top.getAggregation().getKind() == SqlKind.SUM\n              || top.getAggregation().getKind() == SqlKind.SUM0)) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2020-11-30 06:45:33","endLine":213,"groupId":"15477","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/91/44fdc5d98f7b221c53379bb6500765ade969fe.src","preCode":"    @Override public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && (top.getAggregation().getKind() == SqlKind.SUM\n              || top.getAggregation().getKind() == SqlKind.SUM0)) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":5,"curCode":"    @Override public @Nullable AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2020-11-30 06:45:33","endLine":258,"groupId":"15477","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/91/44fdc5d98f7b221c53379bb6500765ade969fe.src","preCode":"    @Override public AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2018-11-14 11:27:42","codes":[{"authorDate":"2018-11-14 11:27:42","commitOrder":6,"curCode":"    @Override public @Nullable AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && (top.getAggregation().getKind() == SqlKind.SUM\n              || top.getAggregation().getKind() == SqlKind.SUM0)) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg,\n            bottom.distinctKeys, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2021-02-12 07:42:13","endLine":214,"groupId":"111752","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/a41f59dd7ed47fd9d53f5666ce426ffed82dc6.src","preCode":"    @Override public @Nullable AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (bottom.getAggregation().getKind() == SqlKind.COUNT\n          && (top.getAggregation().getKind() == SqlKind.SUM\n              || top.getAggregation().getKind() == SqlKind.SUM0)) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2018-11-14 11:27:42","commitOrder":6,"curCode":"    @Override public @Nullable AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg,\n            bottom.distinctKeys, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","date":"2021-02-12 07:42:13","endLine":259,"groupId":"111752","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"merge","params":"(AggregateCalltop@AggregateCallbottom)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/98/a41f59dd7ed47fd9d53f5666ce426ffed82dc6.src","preCode":"    @Override public @Nullable AggregateCall merge(AggregateCall top, AggregateCall bottom) {\n      if (top.getAggregation().getKind() == bottom.getAggregation().getKind()) {\n        return AggregateCall.create(bottom.getAggregation(),\n            bottom.isDistinct(), bottom.isApproximate(), false,\n            bottom.getArgList(), bottom.filterArg, bottom.getCollation(),\n            bottom.getType(), top.getName());\n      } else {\n        return null;\n      }\n    }\n","realPath":"core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"f1da65504e598928cf77aa6a7244552692ae2529","commitMessage":"@@@[CALCITE-4483] WITHIN DISTINCT clause for aggregate functions (experimental)\n\nThe WITHIN DISTINCT feature is experimental and subject to\nchange/removal without notice.\n\nTo represent WITHIN DISTINCT in relational algebra.  add\nmethod RelBuilder.AggCall.unique() and field\nAggregateCall.distinctKeys.\n\nTo represent WITHIN DISTINCT in the SQL AST.  add\nWITHIN_DISTINCT SQL operator.\n\nAdd a planner rule.  AggregateExpandWithinDistinctRule.  that\nimplements WITHIN DISTINCT by pre-aggregating the rows that\nwill go into each aggregate function.\n\nThere are two variants of the rule; one that throws a runtime\nerror if the operand is not functionally-dependent on the\nWITHIN DISTINCT key.  and one that takes the minimum. The former\nis enabled by default.\n\nThe rule handles DISTINCT aggregate calls by converting them\nto WITHIN DISTINCT (because the latter is a generalization of\nthe former).\n\nAdd an internal $THROW_UNLESS function (invoked when operands\nare not functionally dependent).\n\nFurther work is required to complete the feature:\n * support FILTER clause in combination with WITHIN DISTINCT;\n * support WITHIN DISTINCT clause in GROUPING SETS queries;\n * duplicate detection fails for aggregate functions that\n   respect nulls.\n\nRegarding nulls. Luckily most aggregate functions ignore\nnulls by default.  but exceptions include ARRAY_AGG. If the\ninput to ARRAY_AGG for a given WITHIN-DISTINCT-key value is\n[null.  1.  null].  MIN and MAX will both be 1.  so we cannot\ndetermine that all of the values were not the same.\n\nClose apache/calcite#2339\n","date":"2021-02-12 07:42:13","modifiedFileCount":"46","status":"M","submitter":"Julian Hyde"}]
