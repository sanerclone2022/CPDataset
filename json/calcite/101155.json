[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":1,"curCode":"  @Test public void testUpperLower() {\n    expr(\"upper(_UTF16'sadf')\").ok();\n    expr(\"lower(n'sadf')\").ok();\n    expr(\"lower('sadf')\")\n        .columnType(\"CHAR(4) NOT NULL\");\n    wholeExpr(\"upper(123)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'UPPER' to arguments of type 'UPPER.<INTEGER>.'.*\");\n    expr(\"upper(123)\")\n        .columnType(\"VARCHAR NOT NULL\");\n  }\n","date":"2019-09-24 02:59:18","endLine":814,"groupId":"11406","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpperLower","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testUpperLower() {\n    expr(\"upper(_UTF16'sadf')\").ok();\n    expr(\"lower(n'sadf')\").ok();\n    expr(\"lower('sadf')\")\n        .columnType(\"CHAR(4) NOT NULL\");\n    wholeExpr(\"upper(123)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'UPPER' to arguments of type 'UPPER.<INTEGER>.'.*\");\n    expr(\"upper(123)\")\n        .columnType(\"VARCHAR NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":804,"status":"B"},{"authorDate":"2019-09-07 07:51:19","commitOrder":1,"curCode":"  @Test public void testPosition() {\n    expr(\"position('mouse' in 'house')\").ok();\n    expr(\"position(x'11' in x'100110')\").ok();\n    expr(\"position(x'11' in x'100110' FROM 10)\").ok();\n    expr(\"position(x'abcd' in x'')\").ok();\n    expr(\"position('mouse' in 'house')\")\n        .columnType(\"INTEGER NOT NULL\");\n    wholeExpr(\"position(x'1234' in '110')\")\n        .fails(\"Parameters must be of the same type\");\n    wholeExpr(\"position(x'1234' in '110' from 3)\")\n        .fails(\"Parameters must be of the same type\");\n  }\n","date":"2019-09-24 02:59:18","endLine":827,"groupId":"15372","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPosition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testPosition() {\n    expr(\"position('mouse' in 'house')\").ok();\n    expr(\"position(x'11' in x'100110')\").ok();\n    expr(\"position(x'11' in x'100110' FROM 10)\").ok();\n    expr(\"position(x'abcd' in x'')\").ok();\n    expr(\"position('mouse' in 'house')\")\n        .columnType(\"INTEGER NOT NULL\");\n    wholeExpr(\"position(x'1234' in '110')\")\n        .fails(\"Parameters must be of the same type\");\n    wholeExpr(\"position(x'1234' in '110' from 3)\")\n        .fails(\"Parameters must be of the same type\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":816,"status":"B"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testUpperLower() {\n    expr(\"upper(_UTF16'sadf')\").ok();\n    expr(\"lower(n'sadf')\").ok();\n    expr(\"lower('sadf')\")\n        .columnType(\"CHAR(4) NOT NULL\");\n    wholeExpr(\"upper(123)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'UPPER' to arguments of type 'UPPER.<INTEGER>.'.*\");\n    expr(\"upper(123)\")\n        .columnType(\"VARCHAR NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":814,"groupId":"101155","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpperLower","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testUpperLower() {\n    expr(\"upper(_UTF16'sadf')\").ok();\n    expr(\"lower(n'sadf')\").ok();\n    expr(\"lower('sadf')\")\n        .columnType(\"CHAR(4) NOT NULL\");\n    wholeExpr(\"upper(123)\")\n        .withTypeCoercion(false)\n        .fails(\"(?s).*Cannot apply 'UPPER' to arguments of type 'UPPER.<INTEGER>.'.*\");\n    expr(\"upper(123)\")\n        .columnType(\"VARCHAR NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":804,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testPosition() {\n    expr(\"position('mouse' in 'house')\").ok();\n    expr(\"position(x'11' in x'100110')\").ok();\n    expr(\"position(x'11' in x'100110' FROM 10)\").ok();\n    expr(\"position(x'abcd' in x'')\").ok();\n    expr(\"position('mouse' in 'house')\")\n        .columnType(\"INTEGER NOT NULL\");\n    wholeExpr(\"position(x'1234' in '110')\")\n        .fails(\"Parameters must be of the same type\");\n    wholeExpr(\"position(x'1234' in '110' from 3)\")\n        .fails(\"Parameters must be of the same type\");\n  }\n","date":"2020-04-06 04:57:49","endLine":827,"groupId":"101155","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPosition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testPosition() {\n    expr(\"position('mouse' in 'house')\").ok();\n    expr(\"position(x'11' in x'100110')\").ok();\n    expr(\"position(x'11' in x'100110' FROM 10)\").ok();\n    expr(\"position(x'abcd' in x'')\").ok();\n    expr(\"position('mouse' in 'house')\")\n        .columnType(\"INTEGER NOT NULL\");\n    wholeExpr(\"position(x'1234' in '110')\")\n        .fails(\"Parameters must be of the same type\");\n    wholeExpr(\"position(x'1234' in '110' from 3)\")\n        .fails(\"Parameters must be of the same type\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":816,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
