[{"authorTime":"2020-07-20 08:23:08","codes":[{"authorDate":"2016-04-15 05:31:10","commitOrder":2,"curCode":"  public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n    PhysType physType =\n        PhysTypeImpl.of(\n            implementor.getTypeFactory(),\n            getRowType(),\n            pref.preferArray());\n\n    return implementor.result(\n        physType,\n        Blocks.toBlock(\n            Expressions.call(table.getExpression(FileTable.class), \"project\",\n                Expressions.constant(fields))));\n  }\n","date":"2017-02-23 13:09:47","endLine":91,"groupId":"4636","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"implement","params":"(EnumerableRelImplementorimplementor@Preferpref)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bd/d1d508b65ee5236fad0b1e526a90b9061a140b.src","preCode":"  public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n    PhysType physType =\n        PhysTypeImpl.of(\n            implementor.getTypeFactory(),\n            getRowType(),\n            pref.preferArray());\n\n    return implementor.result(\n        physType,\n        Blocks.toBlock(\n            Expressions.call(table.getExpression(FileTable.class), \"project\",\n                Expressions.constant(fields))));\n  }\n","realPath":"file/src/main/java/org/apache/calcite/adapter/file/FileTableScan.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"NB"},{"authorDate":"2020-07-20 08:23:08","commitOrder":2,"curCode":"  public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n    PhysType physType =\n        PhysTypeImpl.of(\n            implementor.getTypeFactory(),\n            getRowType(),\n            pref.preferArray());\n\n    if (table instanceof JsonTable) {\n      return implementor.result(\n          physType,\n          Blocks.toBlock(\n              Expressions.call(table.getExpression(JsonTable.class),\n                  \"enumerable\")));\n    }\n    return implementor.result(\n        physType,\n        Blocks.toBlock(\n            Expressions.call(table.getExpression(CsvTranslatableTable.class),\n                \"project\", implementor.getRootExpression(),\n                Expressions.constant(fields))));\n  }\n","date":"2020-07-29 03:09:43","endLine":120,"groupId":"8608","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"implement","params":"(EnumerableRelImplementorimplementor@Preferpref)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8d/6eb87c9d539c9bd1f8c08fe716f1314d25088c.src","preCode":"  public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n    PhysType physType =\n        PhysTypeImpl.of(\n            implementor.getTypeFactory(),\n            getRowType(),\n            pref.preferArray());\n\n    if (table instanceof JsonTable) {\n      return implementor.result(\n          physType,\n          Blocks.toBlock(\n              Expressions.call(table.getExpression(JsonTable.class),\n                  \"enumerable\")));\n    }\n    return implementor.result(\n        physType,\n        Blocks.toBlock(\n            Expressions.call(table.getExpression(CsvTranslatableTable.class),\n                \"project\", implementor.getRootExpression(),\n                Expressions.constant(fields))));\n  }\n","realPath":"file/src/main/java/org/apache/calcite/adapter/file/CsvTableScan.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"9b678f1d7ffe030711d86f475c3a9e9e95bacb8f","commitMessage":"@@@[CALCITE-4128] Remove dependency of File adapter on Example CSV adapter\n\nMove some classes from 'example/csv' to 'file'.  and make CSV adapter\ndepend on File adapter. Copy some other classes (so that we can keep the\n'example/csv' versions simple.  and add functionality to the 'file'\nadapter).\n\nRename SqlTest to FileAdapterTest.  factor utility methods into\nFileAdapterTests.  and copy in a bunch of tests from example/csv/.../CsvTest.\n","date":"2020-07-29 03:09:43","modifiedFileCount":"10","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n    PhysType physType =\n        PhysTypeImpl.of(\n            implementor.getTypeFactory(),\n            getRowType(),\n            pref.preferArray());\n\n    return implementor.result(\n        physType,\n        Blocks.toBlock(\n            Expressions.call(table.getExpression(FileTable.class), \"project\",\n                Expressions.constant(fields))));\n  }\n","date":"2020-10-07 05:42:47","endLine":93,"groupId":"10230","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"implement","params":"(EnumerableRelImplementorimplementor@Preferpref)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/00ed569a5d0cd4bdaff31351a2d50c069285f8.src","preCode":"  public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n    PhysType physType =\n        PhysTypeImpl.of(\n            implementor.getTypeFactory(),\n            getRowType(),\n            pref.preferArray());\n\n    return implementor.result(\n        physType,\n        Blocks.toBlock(\n            Expressions.call(table.getExpression(FileTable.class), \"project\",\n                Expressions.constant(fields))));\n  }\n","realPath":"file/src/main/java/org/apache/calcite/adapter/file/FileTableScan.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":3,"curCode":"  @Override public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n    PhysType physType =\n        PhysTypeImpl.of(\n            implementor.getTypeFactory(),\n            getRowType(),\n            pref.preferArray());\n\n    if (table instanceof JsonTable) {\n      return implementor.result(\n          physType,\n          Blocks.toBlock(\n              Expressions.call(table.getExpression(JsonTable.class),\n                  \"enumerable\")));\n    }\n    return implementor.result(\n        physType,\n        Blocks.toBlock(\n            Expressions.call(table.getExpression(CsvTranslatableTable.class),\n                \"project\", implementor.getRootExpression(),\n                Expressions.constant(fields))));\n  }\n","date":"2020-10-07 05:42:47","endLine":120,"groupId":"10230","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"implement","params":"(EnumerableRelImplementorimplementor@Preferpref)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/93/43e4089e82e0ac8f4aedcc405dda9d3955e470.src","preCode":"  public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n    PhysType physType =\n        PhysTypeImpl.of(\n            implementor.getTypeFactory(),\n            getRowType(),\n            pref.preferArray());\n\n    if (table instanceof JsonTable) {\n      return implementor.result(\n          physType,\n          Blocks.toBlock(\n              Expressions.call(table.getExpression(JsonTable.class),\n                  \"enumerable\")));\n    }\n    return implementor.result(\n        physType,\n        Blocks.toBlock(\n            Expressions.call(table.getExpression(CsvTranslatableTable.class),\n                \"project\", implementor.getRootExpression(),\n                Expressions.constant(fields))));\n  }\n","realPath":"file/src/main/java/org/apache/calcite/adapter/file/CsvTableScan.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"}]
