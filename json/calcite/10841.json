[{"authorTime":"2016-02-27 11:44:17","codes":[{"authorDate":"2016-02-27 11:44:17","commitOrder":1,"curCode":"  @Test public void testUniquifyNotCaseSensitive() {\n    List<String> nameList = Lists.newArrayList(\"col1\", \"COL1\", \"col_ABC\", \"col_abC\");\n    List<String> resultList = SqlValidatorUtil.uniquify(\n        nameList, SqlValidatorUtil.EXPR_SUGGESTER, false);\n    assertThat(resultList, not(nameList));\n    checkChangedFieldList(nameList, resultList, false);\n  }\n","date":"2016-06-15 09:02:59","endLine":77,"groupId":"7592","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniquifyNotCaseSensitive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/87/de5f509791464176137052e6344b8755710bf6.src","preCode":"  @Test public void testUniquifyNotCaseSensitive() {\n    List<String> nameList = Lists.newArrayList(\"col1\", \"COL1\", \"col_ABC\", \"col_abC\");\n    List<String> resultList = SqlValidatorUtil.uniquify(\n        nameList, SqlValidatorUtil.EXPR_SUGGESTER, false);\n    assertThat(resultList, not(nameList));\n    checkChangedFieldList(nameList, resultList, false);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/validate/SqlValidatorUtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2016-02-27 11:44:17","commitOrder":1,"curCode":"  @Test public void testUniquifyOrderingNotCaseSensitive() {\n    List<String> nameList = Lists.newArrayList(\"k68s\", \"def\", \"col1\", \"COL1\", \"abc\", \"123\");\n    List<String> resultList = SqlValidatorUtil.uniquify(\n        nameList, SqlValidatorUtil.EXPR_SUGGESTER, false);\n    assertThat(resultList, not(nameList));\n    checkChangedFieldList(nameList, resultList, false);\n  }\n","date":"2016-06-15 09:02:59","endLine":100,"groupId":"7592","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniquifyOrderingNotCaseSensitive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/87/de5f509791464176137052e6344b8755710bf6.src","preCode":"  @Test public void testUniquifyOrderingNotCaseSensitive() {\n    List<String> nameList = Lists.newArrayList(\"k68s\", \"def\", \"col1\", \"COL1\", \"abc\", \"123\");\n    List<String> resultList = SqlValidatorUtil.uniquify(\n        nameList, SqlValidatorUtil.EXPR_SUGGESTER, false);\n    assertThat(resultList, not(nameList));\n    checkChangedFieldList(nameList, resultList, false);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/validate/SqlValidatorUtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"acd27fdea5fb54375a999a9221b79a6df166660c","commitMessage":"@@@[CALCITE-528] When making field names unique.  follow type system's case-sensitivity policy (Jacques Nadeau.  Jinfeng Ni.  Minji Kim)\n\nEnsure that uniquify keeps the ordinal position of input names (Jinfeng Ni).\n\nAdd tests (Minji Kim).\n\nFix up (Julian Hyde).\n\nClose apache/calcite#245\n","date":"2016-06-15 09:02:59","modifiedFileCount":"23","status":"B","submitter":"Jacques Nadeau"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testUniquifyNotCaseSensitive() {\n    List<String> nameList = Lists.newArrayList(\"col1\", \"COL1\", \"col_ABC\", \"col_abC\");\n    List<String> resultList = SqlValidatorUtil.uniquify(\n        nameList, SqlValidatorUtil.EXPR_SUGGESTER, false);\n    assertThat(resultList, not(nameList));\n    checkChangedFieldList(nameList, resultList, false);\n  }\n","date":"2020-04-06 04:57:49","endLine":90,"groupId":"10841","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniquifyNotCaseSensitive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f3/d6fb61bccd6cd306e3d1c252dc8598bb0ffa1b.src","preCode":"  @Test public void testUniquifyNotCaseSensitive() {\n    List<String> nameList = Lists.newArrayList(\"col1\", \"COL1\", \"col_ABC\", \"col_abC\");\n    List<String> resultList = SqlValidatorUtil.uniquify(\n        nameList, SqlValidatorUtil.EXPR_SUGGESTER, false);\n    assertThat(resultList, not(nameList));\n    checkChangedFieldList(nameList, resultList, false);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/validate/SqlValidatorUtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":2,"curCode":"  @Test void testUniquifyOrderingNotCaseSensitive() {\n    List<String> nameList = Lists.newArrayList(\"k68s\", \"def\", \"col1\", \"COL1\", \"abc\", \"123\");\n    List<String> resultList = SqlValidatorUtil.uniquify(\n        nameList, SqlValidatorUtil.EXPR_SUGGESTER, false);\n    assertThat(resultList, not(nameList));\n    checkChangedFieldList(nameList, resultList, false);\n  }\n","date":"2020-04-06 04:57:49","endLine":113,"groupId":"10841","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniquifyOrderingNotCaseSensitive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f3/d6fb61bccd6cd306e3d1c252dc8598bb0ffa1b.src","preCode":"  @Test public void testUniquifyOrderingNotCaseSensitive() {\n    List<String> nameList = Lists.newArrayList(\"k68s\", \"def\", \"col1\", \"COL1\", \"abc\", \"123\");\n    List<String> resultList = SqlValidatorUtil.uniquify(\n        nameList, SqlValidatorUtil.EXPR_SUGGESTER, false);\n    assertThat(resultList, not(nameList));\n    checkChangedFieldList(nameList, resultList, false);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/validate/SqlValidatorUtilTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
