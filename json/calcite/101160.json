[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testTrim() {\n    checkExp(\"trim('mustache' FROM 'beard')\");\n    checkExp(\"trim(both 'mustache' FROM 'beard')\");\n    checkExp(\"trim(leading 'mustache' FROM 'beard')\");\n    checkExp(\"trim(trailing 'mustache' FROM 'beard')\");\n    checkExpType(\"trim('mustache' FROM 'beard')\", \"VARCHAR(5) NOT NULL\");\n    checkExpType(\"trim('beard  ')\", \"VARCHAR(7) NOT NULL\");\n    checkExpType(\n        \"trim('mustache' FROM cast(null as varchar(4)))\",\n        \"VARCHAR(4)\");\n\n    if (TODO) {\n      final SqlCollation.Coercibility expectedCoercibility = null;\n      checkCollation(\n          \"trim('mustache' FROM 'beard')\",\n          \"CHAR(5)\",\n          expectedCoercibility);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":729,"groupId":"16749","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/99443f0f8e3b70c5add71a8c451bf22a3a1e3b.src","preCode":"  @Test public void testTrim() {\n    checkExp(\"trim('mustache' FROM 'beard')\");\n    checkExp(\"trim(both 'mustache' FROM 'beard')\");\n    checkExp(\"trim(leading 'mustache' FROM 'beard')\");\n    checkExp(\"trim(trailing 'mustache' FROM 'beard')\");\n    checkExpType(\"trim('mustache' FROM 'beard')\", \"VARCHAR(5) NOT NULL\");\n    checkExpType(\"trim('beard  ')\", \"VARCHAR(7) NOT NULL\");\n    checkExpType(\n        \"trim('mustache' FROM cast(null as varchar(4)))\",\n        \"VARCHAR(4)\");\n\n    if (TODO) {\n      final SqlCollation.Coercibility expectedCoercibility = null;\n      checkCollation(\n          \"trim('mustache' FROM 'beard')\",\n          \"CHAR(5)\",\n          expectedCoercibility);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":711,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testSubstring() {\n    checkExp(\"substring('a' FROM 1)\");\n    checkExp(\"substring('a' FROM 1 FOR 3)\");\n    checkExp(\"substring('a' FROM 'reg' FOR '\\\\')\");\n    checkExp(\"substring(x'ff' FROM 1  FOR 2)\"); \r\n\n    checkExpType(\"substring('10' FROM 1  FOR 2)\", \"VARCHAR(2) NOT NULL\");\n    checkExpType(\"substring('1000' FROM 2)\", \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring('1000' FROM '1'  FOR 'w')\",\n        \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring(cast(' 100 ' as CHAR(99)) FROM '1'  FOR 'w')\",\n        \"VARCHAR(99) NOT NULL\");\n    checkExpType(\n        \"substring(x'10456b' FROM 1  FOR 2)\",\n        \"VARBINARY(3) NOT NULL\");\n\n    checkCharset(\n        \"substring('10' FROM 1  FOR 2)\",\n        Charset.forName(\"latin1\"));\n    checkCharset(\n        \"substring(_UTF16'10' FROM 1  FOR 2)\",\n        Charset.forName(\"UTF-16LE\"));\n  }\n","date":"2014-11-14 09:39:34","endLine":793,"groupId":"6550","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/99443f0f8e3b70c5add71a8c451bf22a3a1e3b.src","preCode":"  @Test public void testSubstring() {\n    checkExp(\"substring('a' FROM 1)\");\n    checkExp(\"substring('a' FROM 1 FOR 3)\");\n    checkExp(\"substring('a' FROM 'reg' FOR '\\\\')\");\n    checkExp(\"substring(x'ff' FROM 1  FOR 2)\"); \r\n\n    checkExpType(\"substring('10' FROM 1  FOR 2)\", \"VARCHAR(2) NOT NULL\");\n    checkExpType(\"substring('1000' FROM 2)\", \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring('1000' FROM '1'  FOR 'w')\",\n        \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring(cast(' 100 ' as CHAR(99)) FROM '1'  FOR 'w')\",\n        \"VARCHAR(99) NOT NULL\");\n    checkExpType(\n        \"substring(x'10456b' FROM 1  FOR 2)\",\n        \"VARBINARY(3) NOT NULL\");\n\n    checkCharset(\n        \"substring('10' FROM 1  FOR 2)\",\n        Charset.forName(\"latin1\"));\n    checkCharset(\n        \"substring(_UTF16'10' FROM 1  FOR 2)\",\n        Charset.forName(\"UTF-16LE\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":769,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2019-09-11 13:23:41","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testTrim() {\n    checkExp(\"trim('mustache' FROM 'beard')\");\n    checkExp(\"trim(both 'mustache' FROM 'beard')\");\n    checkExp(\"trim(leading 'mustache' FROM 'beard')\");\n    checkExp(\"trim(trailing 'mustache' FROM 'beard')\");\n    checkExpType(\"trim('mustache' FROM 'beard')\", \"VARCHAR(5) NOT NULL\");\n    checkExpType(\"trim('beard  ')\", \"VARCHAR(7) NOT NULL\");\n    checkExpType(\n        \"trim('mustache' FROM cast(null as varchar(4)))\",\n        \"VARCHAR(4)\");\n\n    if (TODO) {\n      final SqlCollation.Coercibility expectedCoercibility = null;\n      checkCollation(\n          \"trim('mustache' FROM 'beard')\",\n          \"CHAR(5)\",\n          expectedCoercibility);\n    }\n  }\n","date":"2014-11-14 09:39:34","endLine":729,"groupId":"16749","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/99443f0f8e3b70c5add71a8c451bf22a3a1e3b.src","preCode":"  @Test public void testTrim() {\n    checkExp(\"trim('mustache' FROM 'beard')\");\n    checkExp(\"trim(both 'mustache' FROM 'beard')\");\n    checkExp(\"trim(leading 'mustache' FROM 'beard')\");\n    checkExp(\"trim(trailing 'mustache' FROM 'beard')\");\n    checkExpType(\"trim('mustache' FROM 'beard')\", \"VARCHAR(5) NOT NULL\");\n    checkExpType(\"trim('beard  ')\", \"VARCHAR(7) NOT NULL\");\n    checkExpType(\n        \"trim('mustache' FROM cast(null as varchar(4)))\",\n        \"VARCHAR(4)\");\n\n    if (TODO) {\n      final SqlCollation.Coercibility expectedCoercibility = null;\n      checkCollation(\n          \"trim('mustache' FROM 'beard')\",\n          \"CHAR(5)\",\n          expectedCoercibility);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":711,"status":"N"},{"authorDate":"2019-09-11 13:23:41","commitOrder":2,"curCode":"  @Test public void testSubstring() {\n    checkExp(\"substring('a' FROM 1)\");\n    checkExp(\"substring('a' FROM 1 FOR 3)\");\n    checkExp(\"substring('a' FROM 'reg' FOR '\\\\')\");\n    checkExp(\"substring(x'ff' FROM 1  FOR 2)\"); \r\n\n    checkExpType(\"substring('10' FROM 1  FOR 2)\", \"VARCHAR(2) NOT NULL\");\n    checkExpType(\"substring('1000' FROM 2)\", \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring('1000' FROM '1'  FOR 'w')\",\n        \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring(cast(' 100 ' as CHAR(99)) FROM '1'  FOR 'w')\",\n        \"VARCHAR(99) NOT NULL\");\n    checkExpType(\n        \"substring(x'10456b' FROM 1  FOR 2)\",\n        \"VARBINARY(3) NOT NULL\");\n\n    checkCharset(\n        \"substring('10' FROM 1  FOR 2)\",\n        Charset.forName(\"latin1\"));\n    checkCharset(\n        \"substring(_UTF16'10' FROM 1  FOR 2)\",\n        Charset.forName(\"UTF-16LE\"));\n    checkExp(\"substring('a', 1)\");\n    checkExp(\"substring('a', 1, 3)\");\n    \r\n    checkExpType(\"substring(12345, '1')\", \"VARCHAR NOT NULL\");\n    checkExpType(\"substring('a', '1')\", \"VARCHAR(1) NOT NULL\");\n    checkExpType(\"substring('a', 1, '3')\", \"VARCHAR(1) NOT NULL\");\n  }\n","date":"2019-09-12 09:34:47","endLine":930,"groupId":"6550","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cd/31eaa93e95cfe945ab47bf64169d96eeeabd19.src","preCode":"  @Test public void testSubstring() {\n    checkExp(\"substring('a' FROM 1)\");\n    checkExp(\"substring('a' FROM 1 FOR 3)\");\n    checkExp(\"substring('a' FROM 'reg' FOR '\\\\')\");\n    checkExp(\"substring(x'ff' FROM 1  FOR 2)\"); \r\n\n    checkExpType(\"substring('10' FROM 1  FOR 2)\", \"VARCHAR(2) NOT NULL\");\n    checkExpType(\"substring('1000' FROM 2)\", \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring('1000' FROM '1'  FOR 'w')\",\n        \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring(cast(' 100 ' as CHAR(99)) FROM '1'  FOR 'w')\",\n        \"VARCHAR(99) NOT NULL\");\n    checkExpType(\n        \"substring(x'10456b' FROM 1  FOR 2)\",\n        \"VARBINARY(3) NOT NULL\");\n\n    checkCharset(\n        \"substring('10' FROM 1  FOR 2)\",\n        Charset.forName(\"latin1\"));\n    checkCharset(\n        \"substring(_UTF16'10' FROM 1  FOR 2)\",\n        Charset.forName(\"UTF-16LE\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":900,"status":"M"}],"commitId":"d3c718328d4c83fb24007c8349b31b420dddd187","commitMessage":"@@@[CALCITE-3331] Support implicit type cast for operators that use single operand family checker\n\n* Add doc to SqlSingleOperandTypeChecker#checkSingleOperandType to note\nthat we should not support implicit type coercion for it's\nimplementation;\n* Tweak the operands checking logic for SqlJsonRemoveFunction. \nSqlRegexpReplaceFunction and SqlSubstringFunction to support implicit\ntype coercion.  also add the test cases in SqlValidatorTest;\n* Some cosmetic comments fix.\n","date":"2019-09-12 09:34:47","modifiedFileCount":"10","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testTrim() {\n    expr(\"trim('mustache' FROM 'beard')\").ok();\n    expr(\"trim(both 'mustache' FROM 'beard')\").ok();\n    expr(\"trim(leading 'mustache' FROM 'beard')\").ok();\n    expr(\"trim(trailing 'mustache' FROM 'beard')\").ok();\n    expr(\"trim('mustache' FROM 'beard')\")\n        .columnType(\"VARCHAR(5) NOT NULL\");\n    expr(\"trim('beard  ')\")\n        .columnType(\"VARCHAR(7) NOT NULL\");\n    expr(\"trim('mustache' FROM cast(null as varchar(4)))\")\n        .columnType(\"VARCHAR(4)\");\n\n    if (TODO) {\n      final SqlCollation.Coercibility expectedCoercibility = null;\n      sql(\"trim('mustache' FROM 'beard')\")\n          .collation(\"CHAR(5)\", expectedCoercibility);\n    }\n  }\n","date":"2019-09-24 02:59:18","endLine":846,"groupId":"15372","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testTrim() {\n    checkExp(\"trim('mustache' FROM 'beard')\");\n    checkExp(\"trim(both 'mustache' FROM 'beard')\");\n    checkExp(\"trim(leading 'mustache' FROM 'beard')\");\n    checkExp(\"trim(trailing 'mustache' FROM 'beard')\");\n    checkExpType(\"trim('mustache' FROM 'beard')\", \"VARCHAR(5) NOT NULL\");\n    checkExpType(\"trim('beard  ')\", \"VARCHAR(7) NOT NULL\");\n    checkExpType(\n        \"trim('mustache' FROM cast(null as varchar(4)))\",\n        \"VARCHAR(4)\");\n\n    if (TODO) {\n      final SqlCollation.Coercibility expectedCoercibility = null;\n      checkCollation(\n          \"trim('mustache' FROM 'beard')\",\n          \"CHAR(5)\",\n          expectedCoercibility);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":829,"status":"M"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testSubstring() {\n    expr(\"substring('a' FROM 1)\").ok();\n    expr(\"substring('a' FROM 1 FOR 3)\").ok();\n    expr(\"substring('a' FROM 'reg' FOR '\\\\')\").ok();\n    \r\n    expr(\"substring(x'ff' FROM 1  FOR 2)\").ok();\n\n    expr(\"substring('10' FROM 1  FOR 2)\")\n        .columnType(\"VARCHAR(2) NOT NULL\");\n    expr(\"substring('1000' FROM 2)\")\n        .columnType(\"VARCHAR(4) NOT NULL\");\n    expr(\"substring('1000' FROM '1'  FOR 'w')\")\n        .columnType(\"VARCHAR(4) NOT NULL\");\n    expr(\"substring(cast(' 100 ' as CHAR(99)) FROM '1'  FOR 'w')\")\n        .columnType(\"VARCHAR(99) NOT NULL\");\n    expr(\"substring(x'10456b' FROM 1  FOR 2)\")\n        .columnType(\"VARBINARY(3) NOT NULL\");\n\n    sql(\"substring('10' FROM 1  FOR 2)\")\n        .charset(Charset.forName(\"latin1\"));\n    sql(\"substring(_UTF16'10' FROM 1  FOR 2)\")\n        .charset(Charset.forName(\"UTF-16LE\"));\n    expr(\"substring('a', 1)\").ok();\n    expr(\"substring('a', 1, 3)\").ok();\n    \r\n    expr(\"substring(12345, '1')\")\n        .columnType(\"VARCHAR NOT NULL\");\n    expr(\"substring('a', '1')\")\n        .columnType(\"VARCHAR(1) NOT NULL\");\n    expr(\"substring('a', 1, '3')\")\n        .columnType(\"VARCHAR(1) NOT NULL\");\n  }\n","date":"2019-09-24 02:59:18","endLine":951,"groupId":"15372","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a3/d33ba8e946a499cac312fa98a0e5b21a080452.src","preCode":"  @Test public void testSubstring() {\n    checkExp(\"substring('a' FROM 1)\");\n    checkExp(\"substring('a' FROM 1 FOR 3)\");\n    checkExp(\"substring('a' FROM 'reg' FOR '\\\\')\");\n    checkExp(\"substring(x'ff' FROM 1  FOR 2)\"); \r\n\n    checkExpType(\"substring('10' FROM 1  FOR 2)\", \"VARCHAR(2) NOT NULL\");\n    checkExpType(\"substring('1000' FROM 2)\", \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring('1000' FROM '1'  FOR 'w')\",\n        \"VARCHAR(4) NOT NULL\");\n    checkExpType(\n        \"substring(cast(' 100 ' as CHAR(99)) FROM '1'  FOR 'w')\",\n        \"VARCHAR(99) NOT NULL\");\n    checkExpType(\n        \"substring(x'10456b' FROM 1  FOR 2)\",\n        \"VARBINARY(3) NOT NULL\");\n\n    checkCharset(\n        \"substring('10' FROM 1  FOR 2)\",\n        Charset.forName(\"latin1\"));\n    checkCharset(\n        \"substring(_UTF16'10' FROM 1  FOR 2)\",\n        Charset.forName(\"UTF-16LE\"));\n    checkExp(\"substring('a', 1)\");\n    checkExp(\"substring('a', 1, 3)\");\n    \r\n    checkExpType(\"substring(12345, '1')\", \"VARCHAR NOT NULL\");\n    checkExpType(\"substring('a', '1')\", \"VARCHAR(1) NOT NULL\");\n    checkExpType(\"substring('a', 1, '3')\", \"VARCHAR(1) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":920,"status":"M"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testTrim() {\n    expr(\"trim('mustache' FROM 'beard')\").ok();\n    expr(\"trim(both 'mustache' FROM 'beard')\").ok();\n    expr(\"trim(leading 'mustache' FROM 'beard')\").ok();\n    expr(\"trim(trailing 'mustache' FROM 'beard')\").ok();\n    expr(\"trim('mustache' FROM 'beard')\")\n        .columnType(\"VARCHAR(5) NOT NULL\");\n    expr(\"trim('beard  ')\")\n        .columnType(\"VARCHAR(7) NOT NULL\");\n    expr(\"trim('mustache' FROM cast(null as varchar(4)))\")\n        .columnType(\"VARCHAR(4)\");\n\n    if (TODO) {\n      final SqlCollation.Coercibility expectedCoercibility = null;\n      sql(\"trim('mustache' FROM 'beard')\")\n          .collation(\"CHAR(5)\", expectedCoercibility);\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":846,"groupId":"101160","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testTrim() {\n    expr(\"trim('mustache' FROM 'beard')\").ok();\n    expr(\"trim(both 'mustache' FROM 'beard')\").ok();\n    expr(\"trim(leading 'mustache' FROM 'beard')\").ok();\n    expr(\"trim(trailing 'mustache' FROM 'beard')\").ok();\n    expr(\"trim('mustache' FROM 'beard')\")\n        .columnType(\"VARCHAR(5) NOT NULL\");\n    expr(\"trim('beard  ')\")\n        .columnType(\"VARCHAR(7) NOT NULL\");\n    expr(\"trim('mustache' FROM cast(null as varchar(4)))\")\n        .columnType(\"VARCHAR(4)\");\n\n    if (TODO) {\n      final SqlCollation.Coercibility expectedCoercibility = null;\n      sql(\"trim('mustache' FROM 'beard')\")\n          .collation(\"CHAR(5)\", expectedCoercibility);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":829,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testSubstring() {\n    expr(\"substring('a' FROM 1)\").ok();\n    expr(\"substring('a' FROM 1 FOR 3)\").ok();\n    expr(\"substring('a' FROM 'reg' FOR '\\\\')\").ok();\n    \r\n    expr(\"substring(x'ff' FROM 1  FOR 2)\").ok();\n\n    expr(\"substring('10' FROM 1  FOR 2)\")\n        .columnType(\"VARCHAR(2) NOT NULL\");\n    expr(\"substring('1000' FROM 2)\")\n        .columnType(\"VARCHAR(4) NOT NULL\");\n    expr(\"substring('1000' FROM '1'  FOR 'w')\")\n        .columnType(\"VARCHAR(4) NOT NULL\");\n    expr(\"substring(cast(' 100 ' as CHAR(99)) FROM '1'  FOR 'w')\")\n        .columnType(\"VARCHAR(99) NOT NULL\");\n    expr(\"substring(x'10456b' FROM 1  FOR 2)\")\n        .columnType(\"VARBINARY(3) NOT NULL\");\n\n    sql(\"substring('10' FROM 1  FOR 2)\")\n        .charset(Charset.forName(\"latin1\"));\n    sql(\"substring(_UTF16'10' FROM 1  FOR 2)\")\n        .charset(Charset.forName(\"UTF-16LE\"));\n    expr(\"substring('a', 1)\").ok();\n    expr(\"substring('a', 1, 3)\").ok();\n    \r\n    expr(\"substring(12345, '1')\")\n        .columnType(\"VARCHAR NOT NULL\");\n    expr(\"substring('a', '1')\")\n        .columnType(\"VARCHAR(1) NOT NULL\");\n    expr(\"substring('a', 1, '3')\")\n        .columnType(\"VARCHAR(1) NOT NULL\");\n  }\n","date":"2020-04-06 04:57:49","endLine":951,"groupId":"101160","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubstring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b6/f9115009e28a63267b183e3a0a9a5e7f343a61.src","preCode":"  @Test public void testSubstring() {\n    expr(\"substring('a' FROM 1)\").ok();\n    expr(\"substring('a' FROM 1 FOR 3)\").ok();\n    expr(\"substring('a' FROM 'reg' FOR '\\\\')\").ok();\n    \r\n    expr(\"substring(x'ff' FROM 1  FOR 2)\").ok();\n\n    expr(\"substring('10' FROM 1  FOR 2)\")\n        .columnType(\"VARCHAR(2) NOT NULL\");\n    expr(\"substring('1000' FROM 2)\")\n        .columnType(\"VARCHAR(4) NOT NULL\");\n    expr(\"substring('1000' FROM '1'  FOR 'w')\")\n        .columnType(\"VARCHAR(4) NOT NULL\");\n    expr(\"substring(cast(' 100 ' as CHAR(99)) FROM '1'  FOR 'w')\")\n        .columnType(\"VARCHAR(99) NOT NULL\");\n    expr(\"substring(x'10456b' FROM 1  FOR 2)\")\n        .columnType(\"VARBINARY(3) NOT NULL\");\n\n    sql(\"substring('10' FROM 1  FOR 2)\")\n        .charset(Charset.forName(\"latin1\"));\n    sql(\"substring(_UTF16'10' FROM 1  FOR 2)\")\n        .charset(Charset.forName(\"UTF-16LE\"));\n    expr(\"substring('a', 1)\").ok();\n    expr(\"substring('a', 1, 3)\").ok();\n    \r\n    expr(\"substring(12345, '1')\")\n        .columnType(\"VARCHAR NOT NULL\");\n    expr(\"substring('a', '1')\")\n        .columnType(\"VARCHAR(1) NOT NULL\");\n    expr(\"substring('a', 1, '3')\")\n        .columnType(\"VARCHAR(1) NOT NULL\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":920,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
