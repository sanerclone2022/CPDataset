[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","date":"2014-11-14 09:39:34","endLine":1021,"groupId":"689","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1004,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","date":"2014-11-14 09:39:34","endLine":1238,"groupId":"689","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastStringToDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1116,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2016-10-10 07:21:47","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","date":"2014-11-14 09:39:34","endLine":1021,"groupId":"689","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1004,"status":"N"},{"authorDate":"2016-10-10 07:21:47","commitOrder":2,"curCode":"  @Test public void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:34:5' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:3:45' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1:23:45' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-1-24 12:23:34.454' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast(' 1945-2-4 ' as DATE)\",\n        \"1945-02-04\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","date":"2016-10-19 01:20:28","endLine":1377,"groupId":"690","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastStringToDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0c/3acc604276705fd31d8ea3318bc881d0b976f7.src","preCode":"  @Test public void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1239,"status":"M"}],"commitId":"54556b82c0599012f2e7fefaae3a9868cb68f879","commitMessage":"@@@[CALCITE-1417] In RelBuilder.  simplify \"CAST(literal TO type)\" to a literal when possible\n\nThis allows us to simplify logic that the Druid adapter uses to push\ndown time ranges. For example.  CAST('2016-01-23' AS DATE) will already\nbe a DATE value.\n\nYou can turn off simplification (mainly for testing purposes) by\nsetting Hook.REL_BUILDER_SIMPLIFY. This the first time we have a\nallowed a Hook to act like a property.\n\nAdd a test case (disabled) for [CALCITE-1439].\n\nAllow QuidemTest to accept test script names as command-line\narguments.\n\nUse RexExecutor for constant reduction (although not necessarily the\nsame one that will be used later in planning).\n","date":"2016-10-19 01:20:28","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2018-01-08 02:52:51","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":3,"curCode":"  @Test public void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","date":"2014-11-14 09:39:34","endLine":1021,"groupId":"689","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1004,"status":"N"},{"authorDate":"2018-01-08 02:52:51","commitOrder":3,"curCode":"  @Test public void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:34:5' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:3:45' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1:23:45' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-12-31' as TIMESTAMP)\",\n        \"1945-12-31 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('2004-02-29' as TIMESTAMP)\",\n        \"2004-02-29 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-1-24 12:23:34.454' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast(' 1945-2-4 ' as DATE)\",\n        \"1945-02-04\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","date":"2018-01-09 05:34:48","endLine":1391,"groupId":"9750","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastStringToDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/19/c722da6ee67d2d54b405c8dd474036aa1ee6cb.src","preCode":"  @Test public void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:34:5' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:3:45' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1:23:45' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-1-24 12:23:34.454' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast(' 1945-2-4 ' as DATE)\",\n        \"1945-02-04\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1245,"status":"M"}],"commitId":"2918b8fe55c58e0bafd38accfface242f1847c54","commitMessage":"@@@[CALCITE-2122] In DateRangeRules.  make either TIMESTAMP or DATE literal.  according to target type (Nishant Bangarwa)\n\nClose apache/calcite#599\n","date":"2018-01-09 05:34:48","modifiedFileCount":"6","status":"M","submitter":"Nishant"},{"authorTime":"2018-09-12 20:34:34","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":4,"curCode":"  @Test public void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","date":"2014-11-14 09:39:34","endLine":1021,"groupId":"689","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1004,"status":"N"},{"authorDate":"2018-09-12 20:34:34","commitOrder":4,"curCode":"  @Test public void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    if (Bug.CALCITE_2539_FIXED) {\n      tester.checkFails(\n          \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('12:34:5' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('12:3:45' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1:23:45' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n    }\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-12-31' as TIMESTAMP)\",\n        \"1945-12-31 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('2004-02-29' as TIMESTAMP)\",\n        \"2004-02-29 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    if (Bug.CALCITE_2539_FIXED) {\n      tester.checkFails(\n          \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-1-24 12:23:34.454' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n    }\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast(' 1945-2-4 ' as DATE)\",\n        \"1945-02-04\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    if (Bug.CALCITE_2539_FIXED) {\n      tester.checkFails(\n          \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n          true);\n    }\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","date":"2018-09-18 00:39:31","endLine":1481,"groupId":"689","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastStringToDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/c111c141879acf8ba6e58f1fdfe8909ea49bde.src","preCode":"  @Test public void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:34:5' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('12:3:45' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1:23:45' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-12-31' as TIMESTAMP)\",\n        \"1945-12-31 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('2004-02-29' as TIMESTAMP)\",\n        \"2004-02-29 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-1-24 12:23:34.454' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast(' 1945-2-4 ' as DATE)\",\n        \"1945-02-04\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n    tester.checkFails(\n        \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1327,"status":"M"}],"commitId":"c69e1bcb13000adf9ae4bd433e2f8c75baba1501","commitMessage":"@@@[CALCITE-2535] Enable SqlTester.checkFails (previously it was a no-op) (Hongze Zhang)\n\nClose apache/calcite#823\n","date":"2018-09-18 00:39:31","modifiedFileCount":"9","status":"M","submitter":"hongzezhang"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1246,"groupId":"10742","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCastNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCastNull() {\n    tester.setFor(SqlStdOperatorTable.CAST);\n\n    \r\n    tester.checkNull(\"cast(null as integer)\");\n    if (DECIMAL) {\n      tester.checkNull(\"cast(null as decimal(4,3))\");\n    }\n    tester.checkNull(\"cast(null as double)\");\n    tester.checkNull(\"cast(null as varchar(10))\");\n    tester.checkNull(\"cast(null as char(10))\");\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as interval year to month)\");\n    tester.checkNull(\"cast(null as interval day to second(3))\");\n    tester.checkNull(\"cast(null as boolean)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1229,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":5,"curCode":"  @Test void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    if (Bug.CALCITE_2539_FIXED) {\n      tester.checkFails(\n          \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('12:34:5' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('12:3:45' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1:23:45' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n    }\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-12-31' as TIMESTAMP)\",\n        \"1945-12-31 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('2004-02-29' as TIMESTAMP)\",\n        \"2004-02-29 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    if (Bug.CALCITE_2539_FIXED) {\n      tester.checkFails(\n          \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-1-24 12:23:34.454' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n    }\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast(' 1945-2-4 ' as DATE)\",\n        \"1945-02-04\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    if (Bug.CALCITE_2539_FIXED) {\n      tester.checkFails(\n          \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n          true);\n    }\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","date":"2020-04-06 04:57:49","endLine":1507,"groupId":"10742","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCastStringToDateTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testCastStringToDateTime() {\n    tester.checkScalar(\n        \"cast('12:42:25' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:42:25' as TIME)\",\n        \"01:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1:2:25' as TIME)\",\n        \"01:02:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  12:42:25  ' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('12:42:25.34' as TIME)\",\n        \"12:42:25\",\n        \"TIME(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('12:42:25.34' as TIME(2))\",\n          \"12:42:25.34\",\n          \"TIME(2) NOT NULL\");\n    }\n\n    tester.checkFails(\n        \"cast('nottime' as TIME)\", BAD_DATETIME_MESSAGE,\n        true);\n    if (Bug.CALCITE_2539_FIXED) {\n      tester.checkFails(\n          \"cast('1241241' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('12:54:78' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('12:34:5' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('12:3:45' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1:23:45' as TIME)\", BAD_DATETIME_MESSAGE,\n          true);\n    }\n\n    \r\n    checkCastToString(\n        \"TIMESTAMP '1945-02-24 12:42:25'\",\n        null,\n        \"1945-02-24 12:42:25\");\n\n    if (TODO) {\n      \r\n      checkCastToString(\n          \"TIMESTAMP '1945-02-24 12:42:25.34'\",\n          null,\n          \"1945-02-24 12:42:25.34\");\n    }\n\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-2-2 12:2:5' as TIMESTAMP)\",\n        \"1945-02-02 12:02:05\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24 12:42:25  ' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-02-24 12:42:25.34' as TIMESTAMP)\",\n        \"1945-02-24 12:42:25\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('1945-12-31' as TIMESTAMP)\",\n        \"1945-12-31 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n    tester.checkScalar(\n        \"cast('2004-02-29' as TIMESTAMP)\",\n        \"2004-02-29 00:00:00\",\n        \"TIMESTAMP(0) NOT NULL\");\n\n    if (Bug.FRG282_FIXED) {\n      tester.checkScalar(\n          \"cast('1945-02-24 12:42:25.34' as TIMESTAMP(2))\",\n          \"1945-02-24 12:42:25.34\",\n          \"TIMESTAMP(2) NOT NULL\");\n    }\n    tester.checkFails(\n        \"cast('nottime' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    if (Bug.CALCITE_2539_FIXED) {\n      tester.checkFails(\n          \"cast('1241241' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-20-24 12:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-01-24 25:42:25.34' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-1-24 12:23:34.454' as TIMESTAMP)\", BAD_DATETIME_MESSAGE,\n          true);\n    }\n\n    \r\n    checkCastToString(\"DATE '1945-02-24'\", null, \"1945-02-24\");\n    checkCastToString(\"DATE '1945-2-24'\", null, \"1945-02-24\");\n\n    tester.checkScalar(\n        \"cast('1945-02-24' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast(' 1945-2-4 ' as DATE)\",\n        \"1945-02-04\",\n        \"DATE NOT NULL\");\n    tester.checkScalar(\n        \"cast('  1945-02-24  ' as DATE)\",\n        \"1945-02-24\",\n        \"DATE NOT NULL\");\n    tester.checkFails(\n        \"cast('notdate' as DATE)\", BAD_DATETIME_MESSAGE,\n        true);\n\n    if (Bug.CALCITE_2539_FIXED) {\n      tester.checkFails(\n          \"cast('52534253' as DATE)\", BAD_DATETIME_MESSAGE,\n          true);\n      tester.checkFails(\n          \"cast('1945-30-24' as DATE)\", BAD_DATETIME_MESSAGE,\n          true);\n    }\n\n    \r\n    tester.checkNull(\"cast(null as date)\");\n    tester.checkNull(\"cast(null as timestamp)\");\n    tester.checkNull(\"cast(null as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as time)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as date)\");\n    tester.checkNull(\"cast(cast(null as varchar(10)) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as date) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as time) as timestamp)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as date)\");\n    tester.checkNull(\"cast(cast(null as timestamp) as time)\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1353,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
