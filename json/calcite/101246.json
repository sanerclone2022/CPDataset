[{"authorTime":"2015-06-02 12:00:59","codes":[{"authorDate":"2015-06-02 12:00:59","commitOrder":1,"curCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    assertThat(RelOptUtil.toString(root),\n        is(\n            \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM3=[$6], C=[$6])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-06-06 07:06:13","endLine":214,"groupId":"15725","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/351d522e14f5980ab6cf20f3de4f946e14e5b0.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    assertThat(RelOptUtil.toString(root),\n        is(\n            \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM3=[$6], C=[$6])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"},{"authorDate":"2015-06-02 12:00:59","commitOrder":1,"curCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(false),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    assertThat(RelOptUtil.toString(root),\n        is(\"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n                + \" $f2=[OR(=($7, 20), AND(false, =($7, 10), IS NULL($6),\"\n                + \" NOT(IS NOT NULL($7))), =($7, 30))], n2=[IS NULL($2)],\"\n                + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM6=[$6], C=[$6])\\n\"\n                + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-06-06 07:06:13","endLine":247,"groupId":"13621","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/ed/351d522e14f5980ab6cf20f3de4f946e14e5b0.src","preCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(false),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    assertThat(RelOptUtil.toString(root),\n        is(\"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n                + \" $f2=[OR(=($7, 20), AND(false, =($7, 10), IS NULL($6),\"\n                + \" NOT(IS NOT NULL($7))), =($7, 30))], n2=[IS NULL($2)],\"\n                + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM6=[$6], C=[$6])\\n\"\n                + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"}],"commitId":"6609cb1a30bf36b1223078e8ebaf7cc9f7289b7c","commitMessage":"@@@[CALCITE-748] Add RelBuilder.  builder for expressions in relational algebra\n\nDeprecate RelTraitSet argument to SortFactory.createSort.\n\nAdd RelProtoBuilder and use it in one planner rule.  FilterAggregateTransposeRule.\n","date":"2015-06-06 07:06:13","modifiedFileCount":"13","status":"B","submitter":"Julian Hyde"},{"authorTime":"2015-06-19 02:28:14","codes":[{"authorDate":"2015-06-19 02:28:14","commitOrder":2,"curCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    assertThat(str(root),\n        is(\n            \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM3=[$6], C=[$6])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-06-19 02:28:14","endLine":220,"groupId":"15725","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0a/2b9900681179deddc7911542f2a928142c0185.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    assertThat(RelOptUtil.toString(root),\n        is(\n            \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM3=[$6], C=[$6])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2015-06-19 02:28:14","commitOrder":2,"curCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(false),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    assertThat(str(root),\n        is(\"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n                + \" $f2=[OR(=($7, 20), AND(false, =($7, 10), IS NULL($6),\"\n                + \" NOT(IS NOT NULL($7))), =($7, 30))], n2=[IS NULL($2)],\"\n                + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM6=[$6], C=[$6])\\n\"\n                + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-06-19 02:28:14","endLine":253,"groupId":"13621","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0a/2b9900681179deddc7911542f2a928142c0185.src","preCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(false),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    assertThat(RelOptUtil.toString(root),\n        is(\"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n                + \" $f2=[OR(=($7, 20), AND(false, =($7, 10), IS NULL($6),\"\n                + \" NOT(IS NOT NULL($7))), =($7, 30))], n2=[IS NULL($2)],\"\n                + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM6=[$6], C=[$6])\\n\"\n                + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"02eddd18aa516b19022ceb85a775071a24b4e518","commitMessage":"@@@Fix Windows line-endings in RelBuilderTest\n","date":"2015-06-19 02:28:14","modifiedFileCount":"1","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-01-14 08:07:01","codes":[{"authorDate":"2015-06-19 02:28:14","commitOrder":3,"curCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    assertThat(str(root),\n        is(\n            \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM3=[$6], C=[$6])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2015-06-19 02:28:14","endLine":220,"groupId":"15725","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/0a/2b9900681179deddc7911542f2a928142c0185.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    assertThat(str(root),\n        is(\n            \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM3=[$6], C=[$6])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"N"},{"authorDate":"2016-01-14 08:07:01","commitOrder":3,"curCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    assertThat(str(root),\n        is(\"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n                + \" $f2=[OR(=($7, 20), AND(null, =($7, 10), IS NULL($6),\"\n                + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n                + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM6=[$6], C=[$6])\\n\"\n                + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2016-01-22 07:03:41","endLine":362,"groupId":"11654","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/8a/164c55e473e0c1ef57bf6439ee5b293d68f2d8.src","preCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(false),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    assertThat(str(root),\n        is(\"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n                + \" $f2=[OR(=($7, 20), AND(false, =($7, 10), IS NULL($6),\"\n                + \" NOT(IS NOT NULL($7))), =($7, 30))], n2=[IS NULL($2)],\"\n                + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM6=[$6], C=[$6])\\n\"\n                + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"ee52f691b844d97919a8c0ca211a7c78b86165ef","commitMessage":"@@@[CALCITE-1056] In RelBuilder.  simplify predicates.  and optimize away WHERE FALSE\n","date":"2016-01-22 07:03:41","modifiedFileCount":"6","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-12-22 09:49:23","codes":[{"authorDate":"2016-12-22 09:49:23","commitOrder":4,"curCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    assertThat(str(root),\n        is(\n            \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2016-12-30 06:33:33","endLine":372,"groupId":"15725","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/3dad43c02787c3019dafd2ab6d1a5b5db8d7b6.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    assertThat(str(root),\n        is(\n            \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM3=[$6], C=[$6])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"},{"authorDate":"2016-12-22 09:49:23","commitOrder":4,"curCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    assertThat(str(root),\n        is(\"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n                + \" $f2=[OR(=($7, 20), AND(null, =($7, 10), IS NULL($6),\"\n                + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n                + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n                + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","date":"2016-12-30 06:33:33","endLine":405,"groupId":"11654","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/53/3dad43c02787c3019dafd2ab6d1a5b5db8d7b6.src","preCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    assertThat(str(root),\n        is(\"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n                + \" $f2=[OR(=($7, 20), AND(null, =($7, 10), IS NULL($6),\"\n                + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n                + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM6=[$6], C=[$6])\\n\"\n                + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"}],"commitId":"31d68f71b01f016625a1def800c283820c600840","commitMessage":"@@@[CALCITE-1551] Preserve alias in RelBuilder.project (Jess Balint)\n\nThis is accomplished by changing the structure of the Frame in\nRelBuilder to include alias and field information for all fields in the\nRelNode irrespective of their origin. Rel aliases also preserved on\ngroup keys through aggregate operations.\n\nIn PigRelBuilder.  we retain aggregate aliases.  because Pig Latin\nrelies upon them.\n\nClose apache/calcite#340\n","date":"2016-12-30 06:33:33","modifiedFileCount":"5","status":"M","submitter":"Jess Balint"},{"authorTime":"2018-03-01 10:10:35","codes":[{"authorDate":"2018-03-01 10:10:35","commitOrder":5,"curCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":386,"groupId":"15725","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    assertThat(str(root),\n        is(\n            \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"},{"authorDate":"2018-03-01 10:10:35","commitOrder":5,"curCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n        + \" $f2=[OR(=($7, 20), AND(null, =($7, 10), IS NULL($6),\"\n        + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n        + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":420,"groupId":"11654","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    assertThat(str(root),\n        is(\"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n                + \" $f2=[OR(=($7, 20), AND(null, =($7, 10), IS NULL($6),\"\n                + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n                + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n                + \"  LogicalTableScan(table=[[scott, EMP]])\\n\"));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"M"}],"commitId":"fb8ebd31526cd2e203fa3526ca8de7a22ee0d139","commitMessage":"@@@[CALCITE-2197] Fix test failures on Windows due to line endings\n\nAdd several new matchers in Matchers: isLinux.  containsStringLinux. \nhasTree.  compose. Change tests that generate platform-specific strings\nto use them.\n","date":"2018-03-12 15:16:13","modifiedFileCount":"13","status":"M","submitter":"Julian Hyde"},{"authorTime":"2019-01-11 16:14:35","codes":[{"authorDate":"2018-03-01 10:10:35","commitOrder":6,"curCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2018-03-12 15:16:13","endLine":386,"groupId":"15725","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/12/9019101c478fdb0d8c9c1f7978cbf45c487a35.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"N"},{"authorDate":"2019-01-11 16:14:35","commitOrder":6,"curCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n        + \" $f2=[OR(=($7, 20), AND(null:NULL, =($7, 10), IS NULL($6),\"\n        + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n        + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2019-02-07 02:23:24","endLine":500,"groupId":"11654","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/5c1d730dbd267277d9cdd70c7bbec4a0c9f9fc.src","preCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n        + \" $f2=[OR(=($7, 20), AND(null, =($7, 10), IS NULL($6),\"\n        + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n        + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":469,"status":"M"}],"commitId":"866d855bfb7f95d4e064531fceb0cbf27ed6edff","commitMessage":"@@@[CALCITE-2454] Avoid treating Project(x=1) and Project(x=1) equal in case the type of 1 is int in the first rel and long in the second one\n\nAdd type information to RexLiteral#digest.  ensure planner uses just RelNode#digest for identity\n\nfixes #1002\n","date":"2019-02-07 02:23:24","modifiedFileCount":"28","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":609,"groupId":"15725","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":7,"curCode":"  @Test void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n        + \" $f2=[OR(=($7, 20), AND(null:NULL, =($7, 10), IS NULL($6),\"\n        + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n        + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":643,"groupId":"11654","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n        + \" $f2=[OR(=($7, 20), AND(null:NULL, =($7, 10), IS NULL($6),\"\n        + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n        + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-08-13 15:59:15","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":8,"curCode":"  @Test void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":609,"groupId":"15725","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"N"},{"authorDate":"2020-08-13 15:59:15","commitOrder":8,"curCode":"  @Test void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], \"\n        + \"$f2=[OR(SEARCH($7, Sarg[20, 30]), AND(null:NULL, =($7, 10), \"\n        + \"IS NULL($6), IS NULL($7)))], n2=[IS NULL($2)], \"\n        + \"nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-09-05 00:58:49","endLine":646,"groupId":"11654","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/61/0905ee8912522413f64113d781b8795cc1920f.src","preCode":"  @Test void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL],\"\n        + \" $f2=[OR(=($7, 20), AND(null:NULL, =($7, 10), IS NULL($6),\"\n        + \" IS NULL($7)), =($7, 30))], n2=[IS NULL($2)],\"\n        + \" nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"M"}],"commitId":"850f0f4a04fc2399b8fd1c1fed532cd8e1e39514","commitMessage":"@@@[CALCITE-4173] Add internal SEARCH operator and Sarg literal that represents a set of values or ranges\n\nObsolete use of IN in RexCall; in Druid.  replace some uses\nwith DRUID_IN operator.\n\nCreate Sarg instances during RexSimplify of AND.  OR. Also\nduring simplify.  strengthen Sarg.containsNull from true to\nfalse if predicates prove that NULL values are impossible.\n\nIn JDBC adapter we handle SEARCH natively.  but in Geode. \nMongoDB and Spark adapters.  expand SEARCH before translating\nto target query language. Later.  it may be better to handle\nSEARCH explicitly. For instance.  it will be easier to recognize\nexpressions that can be translated to Geode's 'IN SET'\nconstruct.\n\nClose apache/calcite#2124\n","date":"2020-09-05 00:58:49","modifiedFileCount":"44","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-10-25 08:23:16","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":9,"curCode":"  @Test void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":609,"groupId":"15725","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"N"},{"authorDate":"2020-10-25 08:23:16","commitOrder":9,"curCode":"  @Test void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(5))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], \"\n        + \"$f2=[OR(SEARCH($7, Sarg[20, 30]), AND(null:NULL, =($7, 10), \"\n        + \"IS NULL($6), IS NULL($5)))], n2=[IS NULL($2)], \"\n        + \"nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-11-01 16:13:27","endLine":702,"groupId":"11654","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/be/5d67849728bc73e76bd785b0b4f894b5a2bb1a.src","preCode":"  @Test void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(7))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], \"\n        + \"$f2=[OR(SEARCH($7, Sarg[20, 30]), AND(null:NULL, =($7, 10), \"\n        + \"IS NULL($6), IS NULL($7)))], n2=[IS NULL($2)], \"\n        + \"nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"M"}],"commitId":"d03ce47536ddb2aaec6d445b3ea48464081a7ed0","commitMessage":"@@@[CALCITE-4352] RexSimplify incorrectly drops IS NULL and IS NOT NULL from SEARCH expressions\n\nImprove Sarg.toString() for IS NULL.  IS NOT NULL.  TRUE. \nFALSE.\n\nSimplify NOT SEARCH(x.  sarg) to SEARCH(x.  sarg2) where sarg2\nis the complement of sarg.\n\nImprove return type of SEARCH; result is NOT NULL if argument\nis NOT NULL of it Sarg allows IS NULL.\n\nClose apache/calcite#2233\n","date":"2020-11-01 16:13:27","modifiedFileCount":"9","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-12-24 05:32:41","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":10,"curCode":"  @Test void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":609,"groupId":"101246","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test void testProject() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    \r\n    \r\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], $f2=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"N"},{"authorDate":"2020-12-24 05:32:41","commitOrder":10,"curCode":"  @Test void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(\n                        builder.cast(builder.literal(null),\n                            SqlTypeName.BOOLEAN),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(5))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], \"\n        + \"$f2=[OR(SEARCH($7, Sarg[20, 30]), AND(null, =($7, 10), \"\n        + \"IS NULL($6), IS NULL($5)))], n2=[IS NULL($2)], \"\n        + \"nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","date":"2021-03-03 04:28:27","endLine":710,"groupId":"101246","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testProject2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/b0/833327ce76e4e06383d26e568527fc48911c44.src","preCode":"  @Test void testProject2() {\n    final RelBuilder builder = RelBuilder.create(config().build());\n    RelNode root =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"),\n                builder.cast(builder.field(6), SqlTypeName.SMALLINT),\n                builder.or(\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.and(builder.literal(null),\n                        builder.equals(builder.field(\"DEPTNO\"),\n                            builder.literal(10)),\n                        builder.and(builder.isNull(builder.field(6)),\n                            builder.not(builder.isNotNull(builder.field(5))))),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(20)),\n                    builder.equals(builder.field(\"DEPTNO\"),\n                        builder.literal(30))),\n                builder.alias(builder.isNull(builder.field(2)), \"n2\"),\n                builder.alias(builder.isNotNull(builder.field(3)), \"nn2\"),\n                builder.literal(20),\n                builder.field(6),\n                builder.alias(builder.field(6), \"C\"))\n            .build();\n    final String expected = \"\"\n        + \"LogicalProject(DEPTNO=[$7], COMM=[CAST($6):SMALLINT NOT NULL], \"\n        + \"$f2=[OR(SEARCH($7, Sarg[20, 30]), AND(null:NULL, =($7, 10), \"\n        + \"IS NULL($6), IS NULL($5)))], n2=[IS NULL($2)], \"\n        + \"nn2=[IS NOT NULL($3)], $f5=[20], COMM0=[$6], C=[$6])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(root, hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":677,"status":"M"}],"commitId":"00d1086c7003115a9ed9dcc874051f515b7b5aae","commitMessage":"@@@[CALCITE-4446] Implement three-valued logic for SEARCH operator\n\nClose apache/calcite#2357\n","date":"2021-03-03 04:28:27","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"}]
