[{"authorTime":"2015-07-12 05:56:42","codes":[{"authorDate":"2015-07-12 05:56:42","commitOrder":2,"curCode":"  private static <T extends Comparable> List<T> flatList_(T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return Collections.singletonList(t[0]);\n    case 2:\n      return new Flat2List<T>(t[0], t[1]);\n    case 3:\n      return new Flat3List<T>(t[0], t[1], t[2]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","date":"2016-01-10 16:51:25","endLine":135,"groupId":"6267","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"flatList_","params":"(T[]t@booleancopy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/64/ce699ed5c5804257b08fd7b29254119e465e95.src","preCode":"  private static <T extends Comparable> List<T> flatList_(T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return Collections.singletonList(t[0]);\n    case 2:\n      return new Flat2List<T>(t[0], t[1]);\n    case 3:\n      return new Flat3List<T>(t[0], t[1], t[2]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"MB"},{"authorDate":"2015-07-12 05:56:42","commitOrder":2,"curCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return Collections.singletonList(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","date":"2016-01-10 16:51:25","endLine":158,"groupId":"16570","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"flatListNotComparable","params":"(T[]t)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/64/ce699ed5c5804257b08fd7b29254119e465e95.src","preCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return Collections.singletonList(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"}],"commitId":"cabdcf44e4aec4d4ceea7f97c8c6fd9e9dbd36b1","commitMessage":"@@@[CALCITE-794] Detect cycles when computing statistics\n\nMake RelMetadataQuery methods non-static. Each active call is\nregistered in the RelMetadataQuery instance; it throws\nCyclicMetadataException when it detects a cycle.  and the caller can\ncatch it to return a sensible default value for the particular kind of\nmetadata.\n\nChange signature of FlatLists.of(Object...) to\nFlatLists.copyOf(Comparable...).\n\nTemporarily disable all failing tests.\n\nAdd metadata for EnumerableLimit.\n","date":"2016-01-10 16:51:25","modifiedFileCount":"122","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-01-22 04:58:12","codes":[{"authorDate":"2016-01-22 04:58:12","commitOrder":3,"curCode":"  private static <T extends Comparable> List<T> flatList_(T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return Collections.singletonList(t[0]);\n    case 2:\n      return new Flat2List<T>(t[0], t[1]);\n    case 3:\n      return new Flat3List<T>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<T>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<T>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<T>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","date":"2016-02-24 03:50:07","endLine":167,"groupId":"6744","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"flatList_","params":"(T[]t@booleancopy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/0c4f2cc60856143fc3a275a1643f56e28e938b.src","preCode":"  private static <T extends Comparable> List<T> flatList_(T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return Collections.singletonList(t[0]);\n    case 2:\n      return new Flat2List<T>(t[0], t[1]);\n    case 3:\n      return new Flat3List<T>(t[0], t[1], t[2]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2016-01-22 04:58:12","commitOrder":3,"curCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","date":"2016-02-24 03:50:07","endLine":196,"groupId":"16570","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"flatListNotComparable","params":"(T[]t)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/0c4f2cc60856143fc3a275a1643f56e28e938b.src","preCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return Collections.singletonList(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"8cba7fc421488cb27ce0756ecd2d422a71f72650","commitMessage":"@@@[CALCITE-1063] Flat lists for 4.  5.  6 elements\n","date":"2016-02-24 03:50:07","modifiedFileCount":"5","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-01-22 04:58:12","codes":[{"authorDate":"2016-05-05 06:25:00","commitOrder":4,"curCode":"  flatList_(T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","date":"2016-05-06 13:07:12","endLine":166,"groupId":"16570","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"flatList_","params":"(T[]t@booleancopy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/eb/a51b7c431ddbaacf0139262af2eaec2a2e3f97.src","preCode":"  private static <T extends Comparable> List<T> flatList_(T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return Collections.singletonList(t[0]);\n    case 2:\n      return new Flat2List<T>(t[0], t[1]);\n    case 3:\n      return new Flat3List<T>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<T>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<T>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<T>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2016-01-22 04:58:12","commitOrder":4,"curCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","date":"2016-02-24 03:50:07","endLine":196,"groupId":"16570","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"flatListNotComparable","params":"(T[]t)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/0c4f2cc60856143fc3a275a1643f56e28e938b.src","preCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"N"}],"commitId":"354e8240d49de42bd6972d985fea692e4785e8b0","commitMessage":"@@@[CALCITE-855] UNNEST with multiple arguments\n\nChange a few FlatList contructor methods to return ComparableList.\n","date":"2016-05-06 13:07:12","modifiedFileCount":"15","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-01-22 04:58:12","codes":[{"authorDate":"2017-08-24 09:14:13","commitOrder":5,"curCode":"  private static <T extends Object & Comparable> ComparableList<T> flatList_(\n      T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","date":"2017-08-24 09:14:41","endLine":171,"groupId":"16570","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"flatList_","params":"(T[]t@booleancopy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/13/c92ff34f4aec4fde075d4bdad583aca0be76ad.src","preCode":"  flatList_(T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2016-01-22 04:58:12","commitOrder":5,"curCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","date":"2016-02-24 03:50:07","endLine":196,"groupId":"16570","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"flatListNotComparable","params":"(T[]t)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/0c4f2cc60856143fc3a275a1643f56e28e938b.src","preCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"N"}],"commitId":"9ab47c0000732ec99c3162954e1eb74eaa30cddf","commitMessage":"@@@[CALCITE-1963] Upgrade checkstyle.  and fix code to comply\n\nUpgrade maven-checkstyle-plugin from 2.12.1 (checkstyle 5.7) to\n2.17 (checkstyle 6.11.2).\n\nEnsure compliance with the new version: lots of cosmetic changes. \nespecially whitespace.  no functionality changes.\n\nI would have liked to set Indentation.forceStrictCondition=true.  to\nensure that parameter and argument lists are indented correctly. But it\ngenerates lots of false-negatives in nested expressions.  so we can't\ndo it at this point.\n","date":"2017-08-24 09:14:41","modifiedFileCount":"240","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-01-22 04:58:12","codes":[{"authorDate":"2019-03-04 21:58:49","commitOrder":6,"curCode":"  private static <T extends Comparable> ComparableList<T> flatList_(\n      T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","date":"2019-03-06 05:50:07","endLine":171,"groupId":"101642","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"flatList_","params":"(T[]t@booleancopy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a2/418f0b652556285db079ed4204a857c5054463.src","preCode":"  private static <T extends Object & Comparable> ComparableList<T> flatList_(\n      T[] t, boolean copy) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      \r\n      \r\n      \r\n      if (copy) {\n        return new ComparableListImpl<>(Arrays.asList(t.clone()));\n      } else {\n        return new ComparableListImpl<>(Arrays.asList(t));\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2016-01-22 04:58:12","commitOrder":6,"curCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","date":"2016-02-24 03:50:07","endLine":196,"groupId":"101642","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"flatListNotComparable","params":"(T[]t)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bf/0c4f2cc60856143fc3a275a1643f56e28e938b.src","preCode":"  private static <T> List<T> flatListNotComparable(T[] t) {\n    switch (t.length) {\n    case 0:\n      \r\n      return COMPARABLE_EMPTY_LIST;\n    case 1:\n      return new Flat1List<>(t[0]);\n    case 2:\n      return new Flat2List<>(t[0], t[1]);\n    case 3:\n      return new Flat3List<>(t[0], t[1], t[2]);\n    case 4:\n      return new Flat4List<>(t[0], t[1], t[2], t[3]);\n    case 5:\n      return new Flat5List<>(t[0], t[1], t[2], t[3], t[4]);\n    case 6:\n      return new Flat6List<>(t[0], t[1], t[2], t[3], t[4], t[5]);\n    default:\n      return ImmutableNullableList.copyOf(t);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/FlatLists.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"N"}],"commitId":"36d373f0ff549eb079ed91c7cf2dda2475a0721a","commitMessage":"@@@[CALCITE-2886] Simplification of AND expressions should push negations earlier\n\nEarlier decomposition of AND operands into normal/negated terms preceeded recursion of simplification;\nwhich could have helped retaining negated terms.\nRemove duplicate invocation of simplification on negated and operands.\nAlso run full simplification on filter predicates.\n","date":"2019-03-06 05:50:07","modifiedFileCount":"4","status":"M","submitter":"Zoltan Haindrich"}]
