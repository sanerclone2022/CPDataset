[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testBetween() {\n    tester.setFor(\n        SqlStdOperatorTable.BETWEEN,\n        SqlTester.VmName.EXPAND);\n    tester.checkBoolean(\"2 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"2 between 3 and 2\", Boolean.FALSE);\n    tester.checkBoolean(\"2 between symmetric 3 and 2\", Boolean.TRUE);\n    tester.checkBoolean(\"3 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"4 between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between 4 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1 between 1 and 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5 between 1.6 and 1.7\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 between 1.1 and 1.3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5e0 between 2e0 and 3e0\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"1.5e1 between 1.6e1 and 1.7e1\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"x'' between x'' and x''\", Boolean.TRUE);\n    tester.checkNull(\"cast(null as integer) between -1 and 2\");\n    tester.checkNull(\"1 between -1 and cast(null as integer)\");\n    tester.checkNull(\n        \"1 between cast(null as integer) and cast(null as integer)\");\n    tester.checkNull(\"1 between cast(null as integer) and 1\");\n  }\n","date":"2014-11-14 09:39:34","endLine":298,"groupId":"2962","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testBetween() {\n    tester.setFor(\n        SqlStdOperatorTable.BETWEEN,\n        SqlTester.VmName.EXPAND);\n    tester.checkBoolean(\"2 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"2 between 3 and 2\", Boolean.FALSE);\n    tester.checkBoolean(\"2 between symmetric 3 and 2\", Boolean.TRUE);\n    tester.checkBoolean(\"3 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"4 between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between 4 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1 between 1 and 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5 between 1.6 and 1.7\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 between 1.1 and 1.3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5e0 between 2e0 and 3e0\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"1.5e1 between 1.6e1 and 1.7e1\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"x'' between x'' and x''\", Boolean.TRUE);\n    tester.checkNull(\"cast(null as integer) between -1 and 2\");\n    tester.checkNull(\"1 between -1 and cast(null as integer)\");\n    tester.checkNull(\n        \"1 between cast(null as integer) and cast(null as integer)\");\n    tester.checkNull(\"1 between cast(null as integer) and 1\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  @Test public void testIsDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is distinct from 1\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 1.0\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 2\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from 2\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from cast(null as integer)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 1.23\", Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 5.23\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"-23e0 is distinct from -2.3e1\",\n        Boolean.FALSE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,1)\",\n          true);\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,2)\",\n          false);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is distinct from interval '1' day\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"interval '10' hour is distinct from interval '10' hour\",\n        Boolean.FALSE);\n  }\n","date":"2014-11-14 09:39:34","endLine":2036,"groupId":"5975","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsDistinctFromOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testIsDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is distinct from 1\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 1.0\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 2\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from 2\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from cast(null as integer)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 1.23\", Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 5.23\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"-23e0 is distinct from -2.3e1\",\n        Boolean.FALSE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,1)\",\n          true);\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,2)\",\n          false);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is distinct from interval '1' day\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"interval '10' hour is distinct from interval '10' hour\",\n        Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2000,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2015-07-25 00:48:09","commitOrder":2,"curCode":"  @Test public void testBetween() {\n    tester.setFor(\n        SqlStdOperatorTable.BETWEEN,\n        SqlTester.VmName.EXPAND);\n    tester.checkBoolean(\"2 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"2 between 3 and 2\", Boolean.FALSE);\n    tester.checkBoolean(\"2 between symmetric 3 and 2\", Boolean.TRUE);\n    tester.checkBoolean(\"3 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"4 between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between 4 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1 between 1 and 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5 between 1.6 and 1.7\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 between 1.1 and 1.3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5e0 between 2e0 and 3e0\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"1.5e1 between 1.6e1 and 1.7e1\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"x'' between x'' and x''\", Boolean.TRUE);\n    tester.checkNull(\"cast(null as integer) between -1 and 2\");\n    tester.checkNull(\"1 between -1 and cast(null as integer)\");\n    tester.checkNull(\n        \"1 between cast(null as integer) and cast(null as integer)\");\n    tester.checkNull(\"1 between cast(null as integer) and 1\");\n    tester.checkBoolean(\"x'0A00015A' between x'0A000130' and x'0A0001B0'\", Boolean.TRUE);\n    tester.checkBoolean(\"x'0A00015A' between x'0A0001A0' and x'0A0001B0'\", Boolean.FALSE);\n  }\n","date":"2015-07-25 00:48:09","endLine":331,"groupId":"2962","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/041ccf13d47d60eed17ed20e4ae7a9c8a07a4b.src","preCode":"  @Test public void testBetween() {\n    tester.setFor(\n        SqlStdOperatorTable.BETWEEN,\n        SqlTester.VmName.EXPAND);\n    tester.checkBoolean(\"2 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"2 between 3 and 2\", Boolean.FALSE);\n    tester.checkBoolean(\"2 between symmetric 3 and 2\", Boolean.TRUE);\n    tester.checkBoolean(\"3 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"4 between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between 4 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1 between 1 and 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5 between 1.6 and 1.7\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 between 1.1 and 1.3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5e0 between 2e0 and 3e0\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"1.5e1 between 1.6e1 and 1.7e1\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"x'' between x'' and x''\", Boolean.TRUE);\n    tester.checkNull(\"cast(null as integer) between -1 and 2\");\n    tester.checkNull(\"1 between -1 and cast(null as integer)\");\n    tester.checkNull(\n        \"1 between cast(null as integer) and cast(null as integer)\");\n    tester.checkNull(\"1 between cast(null as integer) and 1\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  @Test public void testIsDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is distinct from 1\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 1.0\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 2\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from 2\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from cast(null as integer)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 1.23\", Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 5.23\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"-23e0 is distinct from -2.3e1\",\n        Boolean.FALSE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,1)\",\n          true);\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,2)\",\n          false);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is distinct from interval '1' day\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"interval '10' hour is distinct from interval '10' hour\",\n        Boolean.FALSE);\n  }\n","date":"2014-11-14 09:39:34","endLine":2036,"groupId":"5975","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsDistinctFromOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c1/ce9911d6cdbc46441ce964a9cf5f40a7143e6e.src","preCode":"  @Test public void testIsDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is distinct from 1\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 1.0\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 2\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from 2\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from cast(null as integer)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 1.23\", Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 5.23\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"-23e0 is distinct from -2.3e1\",\n        Boolean.FALSE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,1)\",\n          true);\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,2)\",\n          false);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is distinct from interval '1' day\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"interval '10' hour is distinct from interval '10' hour\",\n        Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2000,"status":"N"}],"commitId":"26a08774516c49eba39ccb7690295f87560a43fc","commitMessage":"@@@[CALCITE-717] Compare BINARY and VARBINARY on unsigned byte values (Low Chin Wei)\n","date":"2015-07-25 00:48:09","modifiedFileCount":"3","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testBetween() {\n    tester.setFor(\n        SqlStdOperatorTable.BETWEEN,\n        SqlTester.VmName.EXPAND);\n    tester.checkBoolean(\"2 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"2 between 3 and 2\", Boolean.FALSE);\n    tester.checkBoolean(\"2 between symmetric 3 and 2\", Boolean.TRUE);\n    tester.checkBoolean(\"3 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"4 between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between 4 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1 between 1 and 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5 between 1.6 and 1.7\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 between 1.1 and 1.3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5e0 between 2e0 and 3e0\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"1.5e1 between 1.6e1 and 1.7e1\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"x'' between x'' and x''\", Boolean.TRUE);\n    tester.checkNull(\"cast(null as integer) between -1 and 2\");\n    tester.checkNull(\"1 between -1 and cast(null as integer)\");\n    tester.checkNull(\n        \"1 between cast(null as integer) and cast(null as integer)\");\n    tester.checkNull(\"1 between cast(null as integer) and 1\");\n    tester.checkBoolean(\"x'0A00015A' between x'0A000130' and x'0A0001B0'\", Boolean.TRUE);\n    tester.checkBoolean(\"x'0A00015A' between x'0A0001A0' and x'0A0001B0'\", Boolean.FALSE);\n  }\n","date":"2020-04-06 04:57:49","endLine":424,"groupId":"10734","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testBetween() {\n    tester.setFor(\n        SqlStdOperatorTable.BETWEEN,\n        SqlTester.VmName.EXPAND);\n    tester.checkBoolean(\"2 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"2 between 3 and 2\", Boolean.FALSE);\n    tester.checkBoolean(\"2 between symmetric 3 and 2\", Boolean.TRUE);\n    tester.checkBoolean(\"3 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"4 between 1 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between 4 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and -3\", Boolean.FALSE);\n    tester.checkBoolean(\"1 between -1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1 between 1 and 1\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 1 and 3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.2 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5 between 1.6 and 1.7\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e1 between 1.1 and 1.3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.2e0 between 1.1 and 1.3\", Boolean.TRUE);\n    tester.checkBoolean(\"1.5e0 between 2 and 3\", Boolean.FALSE);\n    tester.checkBoolean(\"1.5e0 between 2e0 and 3e0\", Boolean.FALSE);\n    tester.checkBoolean(\n        \"1.5e1 between 1.6e1 and 1.7e1\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"x'' between x'' and x''\", Boolean.TRUE);\n    tester.checkNull(\"cast(null as integer) between -1 and 2\");\n    tester.checkNull(\"1 between -1 and cast(null as integer)\");\n    tester.checkNull(\n        \"1 between cast(null as integer) and cast(null as integer)\");\n    tester.checkNull(\"1 between cast(null as integer) and 1\");\n    tester.checkBoolean(\"x'0A00015A' between x'0A000130' and x'0A0001B0'\", Boolean.TRUE);\n    tester.checkBoolean(\"x'0A00015A' between x'0A0001A0' and x'0A0001B0'\", Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testIsDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is distinct from 1\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 1.0\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 2\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from 2\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from cast(null as integer)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 1.23\", Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 5.23\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"-23e0 is distinct from -2.3e1\",\n        Boolean.FALSE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,1)\",\n          true);\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,2)\",\n          false);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is distinct from interval '1' day\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"interval '10' hour is distinct from interval '10' hour\",\n        Boolean.FALSE);\n  }\n","date":"2020-04-06 04:57:49","endLine":2511,"groupId":"10734","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsDistinctFromOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/63/8682f250d7c070d5d126ca9e1e757179e57de4.src","preCode":"  @Test public void testIsDistinctFromOperator() {\n    tester.setFor(\n        SqlStdOperatorTable.IS_DISTINCT_FROM,\n        VM_EXPAND);\n    tester.checkBoolean(\"1 is distinct from 1\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 1.0\", Boolean.FALSE);\n    tester.checkBoolean(\"1 is distinct from 2\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from 2\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"cast(null as integer) is distinct from cast(null as integer)\",\n        Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 1.23\", Boolean.FALSE);\n    tester.checkBoolean(\"1.23 is distinct from 5.23\", Boolean.TRUE);\n    tester.checkBoolean(\n        \"-23e0 is distinct from -2.3e1\",\n        Boolean.FALSE);\n\n    \r\n    if (false) {\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,1)\",\n          true);\n      tester.checkBoolean(\n          \"row(1,1) is distinct from row(1,2)\",\n          false);\n    }\n\n    \r\n    tester.checkBoolean(\n        \"interval '2' day is distinct from interval '1' day\",\n        Boolean.TRUE);\n    tester.checkBoolean(\n        \"interval '10' hour is distinct from interval '10' hour\",\n        Boolean.FALSE);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2475,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
