[{"authorTime":"2019-04-25 02:17:35","codes":[{"authorDate":"2020-04-28 20:11:22","commitOrder":2,"curCode":"  public static Object jsonValue(JsonPathContext context,\n      SqlJsonValueEmptyOrErrorBehavior emptyBehavior,\n      Object defaultValueOnEmpty,\n      SqlJsonValueEmptyOrErrorBehavior errorBehavior,\n      Object defaultValueOnError) {\n    final Exception exc;\n    if (context.hasException()) {\n      exc = context.exc;\n    } else {\n      Object value = context.obj;\n      if (value == null || context.mode == PathMode.LAX\n          && !isScalarObject(value)) {\n        switch (emptyBehavior) {\n        case ERROR:\n          throw RESOURCE.emptyResultOfJsonValueFuncNotAllowed().ex();\n        case NULL:\n          return null;\n        case DEFAULT:\n          return defaultValueOnEmpty;\n        default:\n          throw RESOURCE.illegalEmptyBehaviorInJsonValueFunc(\n              emptyBehavior.toString()).ex();\n        }\n      } else if (context.mode == PathMode.STRICT\n          && !isScalarObject(value)) {\n        exc = RESOURCE.scalarValueRequiredInStrictModeOfJsonValueFunc(\n            value.toString()).ex();\n      } else {\n        return value;\n      }\n    }\n    switch (errorBehavior) {\n    case ERROR:\n      throw toUnchecked(exc);\n    case NULL:\n      return null;\n    case DEFAULT:\n      return defaultValueOnError;\n    default:\n      throw RESOURCE.illegalErrorBehaviorInJsonValueFunc(\n          errorBehavior.toString()).ex();\n    }\n  }\n","date":"2020-04-30 13:37:55","endLine":273,"groupId":"121","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"jsonValue","params":"(JsonPathContextcontext@SqlJsonValueEmptyOrErrorBehavioremptyBehavior@ObjectdefaultValueOnEmpty@SqlJsonValueEmptyOrErrorBehaviorerrorBehavior@ObjectdefaultValueOnError)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/cce8a4aedd05ea62cefae3a8d73fac821dfa44.src","preCode":"  public static Object jsonValue(JsonPathContext context,\n      SqlJsonValueEmptyOrErrorBehavior emptyBehavior,\n      Object defaultValueOnEmpty,\n      SqlJsonValueEmptyOrErrorBehavior errorBehavior,\n      Object defaultValueOnError) {\n    final Exception exc;\n    if (context.hasException()) {\n      exc = context.exc;\n    } else {\n      Object value = context.obj;\n      if (value == null || context.mode == PathMode.LAX\n          && !isScalarObject(value)) {\n        switch (emptyBehavior) {\n        case ERROR:\n          throw RESOURCE.emptyResultOfJsonValueFuncNotAllowed().ex();\n        case NULL:\n          return null;\n        case DEFAULT:\n          return defaultValueOnEmpty;\n        default:\n          throw RESOURCE.illegalEmptyBehaviorInJsonValueFunc(\n              emptyBehavior.toString()).ex();\n        }\n      } else if (context.mode == PathMode.STRICT\n          && !isScalarObject(value)) {\n        exc = RESOURCE.scalarValueRequiredInStrictModeOfJsonValueFunc(\n            value.toString()).ex();\n      } else {\n        return value;\n      }\n    }\n    switch (errorBehavior) {\n    case ERROR:\n      throw toUnchecked(exc);\n    case NULL:\n      return null;\n    case DEFAULT:\n      return defaultValueOnError;\n    default:\n      throw RESOURCE.illegalErrorBehaviorInJsonValueFunc(\n          errorBehavior.toString()).ex();\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/JsonFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"},{"authorDate":"2019-04-25 02:17:35","commitOrder":2,"curCode":"  public static String jsonQuery(JsonPathContext context,\n      SqlJsonQueryWrapperBehavior wrapperBehavior,\n      SqlJsonQueryEmptyOrErrorBehavior emptyBehavior,\n      SqlJsonQueryEmptyOrErrorBehavior errorBehavior) {\n    final Exception exc;\n    if (context.hasException()) {\n      exc = context.exc;\n    } else {\n      Object value;\n      if (context.obj == null) {\n        value = null;\n      } else {\n        switch (wrapperBehavior) {\n        case WITHOUT_ARRAY:\n          value = context.obj;\n          break;\n        case WITH_UNCONDITIONAL_ARRAY:\n          value = Collections.singletonList(context.obj);\n          break;\n        case WITH_CONDITIONAL_ARRAY:\n          if (context.obj instanceof Collection) {\n            value = context.obj;\n          } else {\n            value = Collections.singletonList(context.obj);\n          }\n          break;\n        default:\n          throw RESOURCE.illegalWrapperBehaviorInJsonQueryFunc(\n              wrapperBehavior.toString()).ex();\n        }\n      }\n      if (value == null || context.mode == PathMode.LAX\n          && isScalarObject(value)) {\n        switch (emptyBehavior) {\n        case ERROR:\n          throw RESOURCE.emptyResultOfJsonQueryFuncNotAllowed().ex();\n        case NULL:\n          return null;\n        case EMPTY_ARRAY:\n          return \"[]\";\n        case EMPTY_OBJECT:\n          return \"{}\";\n        default:\n          throw RESOURCE.illegalEmptyBehaviorInJsonQueryFunc(\n              emptyBehavior.toString()).ex();\n        }\n      } else if (context.mode == PathMode.STRICT && isScalarObject(value)) {\n        exc = RESOURCE.arrayOrObjectValueRequiredInStrictModeOfJsonQueryFunc(\n            value.toString()).ex();\n      } else {\n        try {\n          return jsonize(value);\n        } catch (Exception e) {\n          exc = e;\n        }\n      }\n    }\n    switch (errorBehavior) {\n    case ERROR:\n      throw toUnchecked(exc);\n    case NULL:\n      return null;\n    case EMPTY_ARRAY:\n      return \"[]\";\n    case EMPTY_OBJECT:\n      return \"{}\";\n    default:\n      throw RESOURCE.illegalErrorBehaviorInJsonQueryFunc(\n          errorBehavior.toString()).ex();\n    }\n  }\n","date":"2019-05-15 12:57:37","endLine":364,"groupId":"1834","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"jsonQuery","params":"(JsonPathContextcontext@SqlJsonQueryWrapperBehaviorwrapperBehavior@SqlJsonQueryEmptyOrErrorBehavioremptyBehavior@SqlJsonQueryEmptyOrErrorBehaviorerrorBehavior)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c2/68708dfcd04caa1a9b0f2479ed549836cc234c.src","preCode":"  public static String jsonQuery(JsonPathContext context,\n      SqlJsonQueryWrapperBehavior wrapperBehavior,\n      SqlJsonQueryEmptyOrErrorBehavior emptyBehavior,\n      SqlJsonQueryEmptyOrErrorBehavior errorBehavior) {\n    final Exception exc;\n    if (context.hasException()) {\n      exc = context.exc;\n    } else {\n      Object value;\n      if (context.obj == null) {\n        value = null;\n      } else {\n        switch (wrapperBehavior) {\n        case WITHOUT_ARRAY:\n          value = context.obj;\n          break;\n        case WITH_UNCONDITIONAL_ARRAY:\n          value = Collections.singletonList(context.obj);\n          break;\n        case WITH_CONDITIONAL_ARRAY:\n          if (context.obj instanceof Collection) {\n            value = context.obj;\n          } else {\n            value = Collections.singletonList(context.obj);\n          }\n          break;\n        default:\n          throw RESOURCE.illegalWrapperBehaviorInJsonQueryFunc(\n              wrapperBehavior.toString()).ex();\n        }\n      }\n      if (value == null || context.mode == PathMode.LAX\n          && isScalarObject(value)) {\n        switch (emptyBehavior) {\n        case ERROR:\n          throw RESOURCE.emptyResultOfJsonQueryFuncNotAllowed().ex();\n        case NULL:\n          return null;\n        case EMPTY_ARRAY:\n          return \"[]\";\n        case EMPTY_OBJECT:\n          return \"{}\";\n        default:\n          throw RESOURCE.illegalEmptyBehaviorInJsonQueryFunc(\n              emptyBehavior.toString()).ex();\n        }\n      } else if (context.mode == PathMode.STRICT && isScalarObject(value)) {\n        exc = RESOURCE.arrayOrObjectValueRequiredInStrictModeOfJsonQueryFunc(\n            value.toString()).ex();\n      } else {\n        try {\n          return jsonize(value);\n        } catch (Exception e) {\n          exc = e;\n        }\n      }\n    }\n    switch (errorBehavior) {\n    case ERROR:\n      throw toUnchecked(exc);\n    case NULL:\n      return null;\n    case EMPTY_ARRAY:\n      return \"[]\";\n    case EMPTY_OBJECT:\n      return \"{}\";\n    default:\n      throw RESOURCE.illegalErrorBehaviorInJsonQueryFunc(\n          errorBehavior.toString()).ex();\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/JsonFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"NB"}],"commitId":"f1c0756f33b79904ca3a429bbff79ebf0103ece9","commitMessage":"@@@[CALCITE-3962] Make JSON_VALUE operands varadic\n\nCurrent JSON_VALUE always has 7 operands after parsing.  the operands are\npatched with defaults when creating the call.\n\nThis has some drawbacks:\n- With a hard code operator there.  it is impossible for\ndownstream project to override this operator;\n- The operands are patched with defaults and JSON_VALUE is always\nwritten to JSON_VALUE_ANY after sql-to-rel conversion.  this makes\nthe RexCall and plan hard to understand.  the JDBC SQL was also affected;\n- The JSON_VALUE to JSON_VALUE_ANY re-written is problemic.  because it\nis hard to do a ANY type to other type conversion.  both for Calcite and\ndownstream project.\n\nMake these changes to solve the problems:\n- Keep the operands as it is during the whole planning phrase.  but only\ntransform the operands during runtime;\n- Do not make JSON_VALUE to JSON_VALUE_ANY re-written anymore.  the\nexplicit return type specification is used directly as the rex call\nreturn type.  remove JSON_VALUE_ANY because it is useless now;\n- Promote the JSON_VALUE and JSON_EXISTS function signature prompt.\n","date":"2020-04-30 13:37:55","modifiedFileCount":"19","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public static @Nullable Object jsonValue(JsonPathContext context,\n      SqlJsonValueEmptyOrErrorBehavior emptyBehavior,\n      Object defaultValueOnEmpty,\n      SqlJsonValueEmptyOrErrorBehavior errorBehavior,\n      Object defaultValueOnError) {\n    final Exception exc;\n    if (context.hasException()) {\n      exc = context.exc;\n    } else {\n      Object value = context.obj;\n      if (value == null || context.mode == PathMode.LAX\n          && !isScalarObject(value)) {\n        switch (emptyBehavior) {\n        case ERROR:\n          throw RESOURCE.emptyResultOfJsonValueFuncNotAllowed().ex();\n        case NULL:\n          return null;\n        case DEFAULT:\n          return defaultValueOnEmpty;\n        default:\n          throw RESOURCE.illegalEmptyBehaviorInJsonValueFunc(\n              emptyBehavior.toString()).ex();\n        }\n      } else if (context.mode == PathMode.STRICT\n          && !isScalarObject(value)) {\n        exc = RESOURCE.scalarValueRequiredInStrictModeOfJsonValueFunc(\n            value.toString()).ex();\n      } else {\n        return value;\n      }\n    }\n    switch (errorBehavior) {\n    case ERROR:\n      throw toUnchecked(exc);\n    case NULL:\n      return null;\n    case DEFAULT:\n      return defaultValueOnError;\n    default:\n      throw RESOURCE.illegalErrorBehaviorInJsonValueFunc(\n          errorBehavior.toString()).ex();\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":284,"groupId":"101678","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"jsonValue","params":"(JsonPathContextcontext@SqlJsonValueEmptyOrErrorBehavioremptyBehavior@ObjectdefaultValueOnEmpty@SqlJsonValueEmptyOrErrorBehaviorerrorBehavior@ObjectdefaultValueOnError)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/89/6ceb200984b180095e6e34ac5c698a457e07d5.src","preCode":"  public static Object jsonValue(JsonPathContext context,\n      SqlJsonValueEmptyOrErrorBehavior emptyBehavior,\n      Object defaultValueOnEmpty,\n      SqlJsonValueEmptyOrErrorBehavior errorBehavior,\n      Object defaultValueOnError) {\n    final Exception exc;\n    if (context.hasException()) {\n      exc = context.exc;\n    } else {\n      Object value = context.obj;\n      if (value == null || context.mode == PathMode.LAX\n          && !isScalarObject(value)) {\n        switch (emptyBehavior) {\n        case ERROR:\n          throw RESOURCE.emptyResultOfJsonValueFuncNotAllowed().ex();\n        case NULL:\n          return null;\n        case DEFAULT:\n          return defaultValueOnEmpty;\n        default:\n          throw RESOURCE.illegalEmptyBehaviorInJsonValueFunc(\n              emptyBehavior.toString()).ex();\n        }\n      } else if (context.mode == PathMode.STRICT\n          && !isScalarObject(value)) {\n        exc = RESOURCE.scalarValueRequiredInStrictModeOfJsonValueFunc(\n            value.toString()).ex();\n      } else {\n        return value;\n      }\n    }\n    switch (errorBehavior) {\n    case ERROR:\n      throw toUnchecked(exc);\n    case NULL:\n      return null;\n    case DEFAULT:\n      return defaultValueOnError;\n    default:\n      throw RESOURCE.illegalErrorBehaviorInJsonValueFunc(\n          errorBehavior.toString()).ex();\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/JsonFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  public static @Nullable String jsonQuery(JsonPathContext context,\n      SqlJsonQueryWrapperBehavior wrapperBehavior,\n      SqlJsonQueryEmptyOrErrorBehavior emptyBehavior,\n      SqlJsonQueryEmptyOrErrorBehavior errorBehavior) {\n    final Exception exc;\n    if (context.hasException()) {\n      exc = context.exc;\n    } else {\n      Object value;\n      if (context.obj == null) {\n        value = null;\n      } else {\n        switch (wrapperBehavior) {\n        case WITHOUT_ARRAY:\n          value = context.obj;\n          break;\n        case WITH_UNCONDITIONAL_ARRAY:\n          value = Collections.singletonList(context.obj);\n          break;\n        case WITH_CONDITIONAL_ARRAY:\n          if (context.obj instanceof Collection) {\n            value = context.obj;\n          } else {\n            value = Collections.singletonList(context.obj);\n          }\n          break;\n        default:\n          throw RESOURCE.illegalWrapperBehaviorInJsonQueryFunc(\n              wrapperBehavior.toString()).ex();\n        }\n      }\n      if (value == null || context.mode == PathMode.LAX\n          && isScalarObject(value)) {\n        switch (emptyBehavior) {\n        case ERROR:\n          throw RESOURCE.emptyResultOfJsonQueryFuncNotAllowed().ex();\n        case NULL:\n          return null;\n        case EMPTY_ARRAY:\n          return \"[]\";\n        case EMPTY_OBJECT:\n          return \"{}\";\n        default:\n          throw RESOURCE.illegalEmptyBehaviorInJsonQueryFunc(\n              emptyBehavior.toString()).ex();\n        }\n      } else if (context.mode == PathMode.STRICT && isScalarObject(value)) {\n        exc = RESOURCE.arrayOrObjectValueRequiredInStrictModeOfJsonQueryFunc(\n            value.toString()).ex();\n      } else {\n        try {\n          return jsonize(value);\n        } catch (Exception e) {\n          exc = e;\n        }\n      }\n    }\n    switch (errorBehavior) {\n    case ERROR:\n      throw toUnchecked(exc);\n    case NULL:\n      return null;\n    case EMPTY_ARRAY:\n      return \"[]\";\n    case EMPTY_OBJECT:\n      return \"{}\";\n    default:\n      throw RESOURCE.illegalErrorBehaviorInJsonQueryFunc(\n          errorBehavior.toString()).ex();\n    }\n  }\n","date":"2020-11-30 06:45:33","endLine":376,"groupId":"101678","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"jsonQuery","params":"(JsonPathContextcontext@SqlJsonQueryWrapperBehaviorwrapperBehavior@SqlJsonQueryEmptyOrErrorBehavioremptyBehavior@SqlJsonQueryEmptyOrErrorBehaviorerrorBehavior)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/89/6ceb200984b180095e6e34ac5c698a457e07d5.src","preCode":"  public static String jsonQuery(JsonPathContext context,\n      SqlJsonQueryWrapperBehavior wrapperBehavior,\n      SqlJsonQueryEmptyOrErrorBehavior emptyBehavior,\n      SqlJsonQueryEmptyOrErrorBehavior errorBehavior) {\n    final Exception exc;\n    if (context.hasException()) {\n      exc = context.exc;\n    } else {\n      Object value;\n      if (context.obj == null) {\n        value = null;\n      } else {\n        switch (wrapperBehavior) {\n        case WITHOUT_ARRAY:\n          value = context.obj;\n          break;\n        case WITH_UNCONDITIONAL_ARRAY:\n          value = Collections.singletonList(context.obj);\n          break;\n        case WITH_CONDITIONAL_ARRAY:\n          if (context.obj instanceof Collection) {\n            value = context.obj;\n          } else {\n            value = Collections.singletonList(context.obj);\n          }\n          break;\n        default:\n          throw RESOURCE.illegalWrapperBehaviorInJsonQueryFunc(\n              wrapperBehavior.toString()).ex();\n        }\n      }\n      if (value == null || context.mode == PathMode.LAX\n          && isScalarObject(value)) {\n        switch (emptyBehavior) {\n        case ERROR:\n          throw RESOURCE.emptyResultOfJsonQueryFuncNotAllowed().ex();\n        case NULL:\n          return null;\n        case EMPTY_ARRAY:\n          return \"[]\";\n        case EMPTY_OBJECT:\n          return \"{}\";\n        default:\n          throw RESOURCE.illegalEmptyBehaviorInJsonQueryFunc(\n              emptyBehavior.toString()).ex();\n        }\n      } else if (context.mode == PathMode.STRICT && isScalarObject(value)) {\n        exc = RESOURCE.arrayOrObjectValueRequiredInStrictModeOfJsonQueryFunc(\n            value.toString()).ex();\n      } else {\n        try {\n          return jsonize(value);\n        } catch (Exception e) {\n          exc = e;\n        }\n      }\n    }\n    switch (errorBehavior) {\n    case ERROR:\n      throw toUnchecked(exc);\n    case NULL:\n      return null;\n    case EMPTY_ARRAY:\n      return \"[]\";\n    case EMPTY_OBJECT:\n      return \"{}\";\n    default:\n      throw RESOURCE.illegalErrorBehaviorInJsonQueryFunc(\n          errorBehavior.toString()).ex();\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/runtime/JsonFunctions.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
