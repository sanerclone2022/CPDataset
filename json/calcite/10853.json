[{"authorTime":"2019-09-07 07:51:19","codes":[{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testContinuedLiteral() {\n    expr(\"'abba'\\n'abba'\")\n        .ok(\"'abba'\\n'abba'\");\n    expr(\"'abba'\\n'0001'\")\n        .ok(\"'abba'\\n'0001'\");\n    expr(\"N'yabba'\\n'dabba'\\n'doo'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'doo'\");\n    expr(\"_iso-8859-1'yabba'\\n'dabba'\\n'don''t'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'don''t'\");\n\n    expr(\"x'01aa'\\n'03ff'\")\n        .ok(\"X'01AA'\\n'03FF'\");\n\n    \r\n    sql(\"x'01aa'\\n^'vvvv'^\")\n        .fails(\"Binary literal string must contain only characters '0' - '9', 'A' - 'F'\");\n  }\n","date":"2019-09-24 02:59:18","endLine":2672,"groupId":"12394","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testContinuedLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testContinuedLiteral() {\n    expr(\"'abba'\\n'abba'\")\n        .ok(\"'abba'\\n'abba'\");\n    expr(\"'abba'\\n'0001'\")\n        .ok(\"'abba'\\n'0001'\");\n    expr(\"N'yabba'\\n'dabba'\\n'doo'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'doo'\");\n    expr(\"_iso-8859-1'yabba'\\n'dabba'\\n'don''t'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'don''t'\");\n\n    expr(\"x'01aa'\\n'03ff'\")\n        .ok(\"X'01AA'\\n'03FF'\");\n\n    \r\n    sql(\"x'01aa'\\n^'vvvv'^\")\n        .fails(\"Binary literal string must contain only characters '0' - '9', 'A' - 'F'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2656,"status":"B"},{"authorDate":"2019-09-07 07:51:19","commitOrder":3,"curCode":"  @Test public void testStringLiteral() {\n    expr(\"_latin1'hi'\")\n        .ok(\"_LATIN1'hi'\");\n    expr(\"N'is it a plane? no it''s superman!'\")\n        .ok(\"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    expr(\"n'lowercase n'\")\n        .ok(\"_ISO-8859-1'lowercase n'\");\n    expr(\"'boring string'\")\n        .ok(\"'boring string'\");\n    expr(\"_iSo-8859-1'bye'\")\n        .ok(\"_ISO-8859-1'bye'\");\n    expr(\"'three' \\n ' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"'three' -- comment \\n ' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"N'bye' \\t\\r\\f\\f\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_utf8'hi'\")\n        .ok(\"_UTF8'hi'\");\n\n    \r\n    expr(\"'foo\\rbar'\")\n        .ok(\"'foo\\rbar'\");\n    expr(\"'foo\\nbar'\")\n        .ok(\"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      expr(\"'foo\\r\\nbar'\")\n          .ok(\"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","date":"2019-09-24 02:59:18","endLine":3957,"groupId":"12394","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStringLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/18efc30e26712f7989a0e69015daabf5819bf3.src","preCode":"  @Test public void testStringLiteral() {\n    expr(\"_latin1'hi'\")\n        .ok(\"_LATIN1'hi'\");\n    expr(\"N'is it a plane? no it''s superman!'\")\n        .ok(\"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    expr(\"n'lowercase n'\")\n        .ok(\"_ISO-8859-1'lowercase n'\");\n    expr(\"'boring string'\")\n        .ok(\"'boring string'\");\n    expr(\"_iSo-8859-1'bye'\")\n        .ok(\"_ISO-8859-1'bye'\");\n    expr(\"'three' \\n ' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"'three' -- comment \\n ' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"N'bye' \\t\\r\\f\\f\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_iso-8859-1'bye' \\n\\n--\\n-- this is a comment\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_utf8'hi'\")\n        .ok(\"_UTF8'hi'\");\n\n    \r\n    expr(\"'foo\\rbar'\")\n        .ok(\"'foo\\rbar'\");\n    expr(\"'foo\\nbar'\")\n        .ok(\"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      expr(\"'foo\\r\\nbar'\")\n          .ok(\"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3920,"status":"MB"}],"commitId":"405614f87b75eb515e767b78a2c47481a0efc701","commitMessage":"@@@[CALCITE-3327] Simplify SqlValidatorTest and SqlParserTest by making test methods fluent\n\nReplace 'boolean typeCoercion' parameter with fluent method 'Sql.withTypeCoercion(boolean)'.\n\nDeprecate various checkXxx methods. For example. \ncheckExp(sql.  expected) becomes expr(sql).ok();\ncheckExpFails(sql.  e) becomes expr(s).fails(e).\n\nRename SqlParserTest.exp to expr.\n","date":"2019-09-24 02:59:18","modifiedFileCount":"16","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testContinuedLiteral() {\n    expr(\"'abba'\\n'abba'\")\n        .ok(\"'abba'\\n'abba'\");\n    expr(\"'abba'\\n'0001'\")\n        .ok(\"'abba'\\n'0001'\");\n    expr(\"N'yabba'\\n'dabba'\\n'doo'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'doo'\");\n    expr(\"_iso-8859-1'yabba'\\n'dabba'\\n'don''t'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'don''t'\");\n\n    expr(\"x'01aa'\\n'03ff'\")\n        .ok(\"X'01AA'\\n'03FF'\");\n\n    \r\n    sql(\"x'01aa'\\n^'vvvv'^\")\n        .fails(\"Binary literal string must contain only characters '0' - '9', 'A' - 'F'\");\n  }\n","date":"2020-04-06 04:57:49","endLine":2684,"groupId":"10853","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testContinuedLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testContinuedLiteral() {\n    expr(\"'abba'\\n'abba'\")\n        .ok(\"'abba'\\n'abba'\");\n    expr(\"'abba'\\n'0001'\")\n        .ok(\"'abba'\\n'0001'\");\n    expr(\"N'yabba'\\n'dabba'\\n'doo'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'doo'\");\n    expr(\"_iso-8859-1'yabba'\\n'dabba'\\n'don''t'\")\n        .ok(\"_ISO-8859-1'yabba'\\n'dabba'\\n'don''t'\");\n\n    expr(\"x'01aa'\\n'03ff'\")\n        .ok(\"X'01AA'\\n'03FF'\");\n\n    \r\n    sql(\"x'01aa'\\n^'vvvv'^\")\n        .fails(\"Binary literal string must contain only characters '0' - '9', 'A' - 'F'\");\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2668,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":4,"curCode":"  @Test void testStringLiteral() {\n    expr(\"_latin1'hi'\")\n        .ok(\"_LATIN1'hi'\");\n    expr(\"N'is it a plane? no it''s superman!'\")\n        .ok(\"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    expr(\"n'lowercase n'\")\n        .ok(\"_ISO-8859-1'lowercase n'\");\n    expr(\"'boring string'\")\n        .ok(\"'boring string'\");\n    expr(\"_iSo-8859-1'bye'\")\n        .ok(\"_ISO-8859-1'bye'\");\n    expr(\"'three'\\n' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"'three' -- comment\\n' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"N'bye' \\t\\r\\f\\f\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_iso-8859-1'bye'\\n\\n--\\n-- this is a comment\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_utf8'hi'\")\n        .ok(\"_UTF8'hi'\");\n\n    \r\n    expr(\"'foo\\rbar'\")\n        .ok(\"'foo\\rbar'\");\n    expr(\"'foo\\nbar'\")\n        .ok(\"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      expr(\"'foo\\r\\nbar'\")\n          .ok(\"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","date":"2020-04-06 04:57:49","endLine":4036,"groupId":"10853","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStringLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/6c18087114449f5c2ca4ff32ab24aa6a84eed3.src","preCode":"  @Test public void testStringLiteral() {\n    expr(\"_latin1'hi'\")\n        .ok(\"_LATIN1'hi'\");\n    expr(\"N'is it a plane? no it''s superman!'\")\n        .ok(\"_ISO-8859-1'is it a plane? no it''s superman!'\");\n    expr(\"n'lowercase n'\")\n        .ok(\"_ISO-8859-1'lowercase n'\");\n    expr(\"'boring string'\")\n        .ok(\"'boring string'\");\n    expr(\"_iSo-8859-1'bye'\")\n        .ok(\"_ISO-8859-1'bye'\");\n    expr(\"'three'\\n' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"'three' -- comment\\n' blind'\\n' mice'\")\n        .ok(\"'three'\\n' blind'\\n' mice'\");\n    expr(\"N'bye' \\t\\r\\f\\f\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_iso-8859-1'bye'\\n\\n--\\n-- this is a comment\\n' bye'\")\n        .ok(\"_ISO-8859-1'bye'\\n' bye'\");\n    expr(\"_utf8'hi'\")\n        .ok(\"_UTF8'hi'\");\n\n    \r\n    expr(\"'foo\\rbar'\")\n        .ok(\"'foo\\rbar'\");\n    expr(\"'foo\\nbar'\")\n        .ok(\"'foo\\nbar'\");\n\n    \r\n    boolean[] linuxify = LINUXIFY.get();\n    try {\n      linuxify[0] = false;\n      expr(\"'foo\\r\\nbar'\")\n          .ok(\"'foo\\r\\nbar'\");\n    } finally {\n      linuxify[0] = true;\n    }\n  }\n","realPath":"core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":3999,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
