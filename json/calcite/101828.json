[{"authorTime":"2018-01-30 21:13:12","codes":[{"authorDate":"2017-09-14 13:27:57","commitOrder":2,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    switch (call.getKind()) {\n    case FLOOR:\n      if (call.operandCount() != 2) {\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n        return;\n      }\n\n      unparseFloor(writer, call);\n      break;\n\n    default:\n      super.unparseCall(writer, call, leftPrec, rightPrec);\n    }\n  }\n","date":"2017-10-03 03:28:20","endLine":157,"groupId":"7067","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e9/ae47949f0034baa416b662e59e1fa5401309db.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    switch (call.getKind()) {\n    case FLOOR:\n      if (call.operandCount() != 2) {\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n        return;\n      }\n\n      unparseFloor(writer, call);\n      break;\n\n    default:\n      super.unparseCall(writer, call, leftPrec, rightPrec);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"NB"},{"authorDate":"2018-01-30 21:13:12","commitOrder":2,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      CLICKHOUSE_SUBSTRING.unparse(writer, call, 0, 0);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        unparseFloor(writer, call);\n        break;\n\n      case COUNT:\n        \r\n        \r\n        \r\n        if (call.getFunctionQuantifier() != null\n            && call.getFunctionQuantifier().toString().equals(\"DISTINCT\")) {\n          writer.print(\"assumeNotNull\");\n          SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          writer.endList(frame);\n        } else {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n        }\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2020-04-17 16:35:48","endLine":200,"groupId":"7067","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a0/5799dc150c9c7b77770f2711e589b886f32719.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      CLICKHOUSE_SUBSTRING.unparse(writer, call, 0, 0);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        unparseFloor(writer, call);\n        break;\n\n      case COUNT:\n        \r\n        \r\n        \r\n        if (call.getFunctionQuantifier() != null\n            && call.getFunctionQuantifier().toString().equals(\"DISTINCT\")) {\n          writer.print(\"assumeNotNull\");\n          SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          writer.endList(frame);\n        } else {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n        }\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/ClickHouseSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"}],"commitId":"39e58566c1ac02824d99ae9260d3315539efd57e","commitMessage":"@@@[CALCITE-2157] ClickHouse dialect implementation (Chris Baynes)\n\nclose apache/calcite#618\n","date":"2020-04-17 16:35:48","modifiedFileCount":"3","status":"M","submitter":"Chris Baynes"},{"authorTime":"2020-01-30 14:49:20","codes":[{"authorDate":"2017-09-14 13:27:57","commitOrder":3,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    switch (call.getKind()) {\n    case FLOOR:\n      if (call.operandCount() != 2) {\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n        return;\n      }\n\n      unparseFloor(writer, call);\n      break;\n\n    default:\n      super.unparseCall(writer, call, leftPrec, rightPrec);\n    }\n  }\n","date":"2017-10-03 03:28:20","endLine":157,"groupId":"101828","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/e9/ae47949f0034baa416b662e59e1fa5401309db.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    switch (call.getKind()) {\n    case FLOOR:\n      if (call.operandCount() != 2) {\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n        return;\n      }\n\n      unparseFloor(writer, call);\n      break;\n\n    default:\n      super.unparseCall(writer, call, leftPrec, rightPrec);\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"N"},{"authorDate":"2020-01-30 14:49:20","commitOrder":3,"curCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      RelToSqlConverterUtil.specialOperatorByName(\"substring\")\n          .unparse(writer, call, 0, 0);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        unparseFloor(writer, call);\n        break;\n\n      case COUNT:\n        \r\n        \r\n        \r\n        if (call.getFunctionQuantifier() != null\n            && call.getFunctionQuantifier().toString().equals(\"DISTINCT\")) {\n          writer.print(\"assumeNotNull\");\n          SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          writer.endList(frame);\n        } else {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n        }\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","date":"2020-06-11 15:17:17","endLine":182,"groupId":"101828","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unparseCall","params":"(SqlWriterwriter@SqlCallcall@intleftPrec@intrightPrec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c7/8662cea6fecd56f59250ed8a729ae487e7673c.src","preCode":"  @Override public void unparseCall(SqlWriter writer, SqlCall call,\n      int leftPrec, int rightPrec) {\n    if (call.getOperator() == SqlStdOperatorTable.SUBSTRING) {\n      CLICKHOUSE_SUBSTRING.unparse(writer, call, 0, 0);\n    } else {\n      switch (call.getKind()) {\n      case FLOOR:\n        if (call.operandCount() != 2) {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          return;\n        }\n\n        unparseFloor(writer, call);\n        break;\n\n      case COUNT:\n        \r\n        \r\n        \r\n        if (call.getFunctionQuantifier() != null\n            && call.getFunctionQuantifier().toString().equals(\"DISTINCT\")) {\n          writer.print(\"assumeNotNull\");\n          SqlWriter.Frame frame = writer.startList(\"(\", \")\");\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n          writer.endList(frame);\n        } else {\n          super.unparseCall(writer, call, leftPrec, rightPrec);\n        }\n        break;\n\n      default:\n        super.unparseCall(writer, call, leftPrec, rightPrec);\n      }\n    }\n  }\n","realPath":"core/src/main/java/org/apache/calcite/sql/dialect/ClickHouseSqlDialect.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"f577b7e3d91191051cfdaade27e0a74f3603648a","commitMessage":"@@@[CALCITE-3724] Presto dialect implementation\n\nFixup (by Danny):\n- Add a new tool RelToSqlConverterUtil#specialOperatorByName and remove\nClickHouseSqlDialect.CLICKHOUSE_SUBSTRING\n- Remove the common code in PrestoSqlDialect and reuse codes from other\ndialect instances\n\nclose apache#calcite#1776\n","date":"2020-06-11 15:17:17","modifiedFileCount":"5","status":"M","submitter":"XuQianJin-Stars"}]
