[{"authorTime":"2020-02-06 09:02:22","codes":[{"authorDate":"2020-02-06 09:02:22","commitOrder":1,"curCode":"  @Test public void testProjectBloat() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.alias(\n                    caseCall(b, b.field(\"DEPTNO\"),\n                        b.literal(0), b.literal(\"zero\"),\n                        b.literal(1), b.literal(\"one\"),\n                        b.literal(2), b.literal(\"two\"),\n                        b.literal(\"other\")),\n                    \"v\"))\n            .project(\n                b.call(SqlStdOperatorTable.PLUS, b.field(\"v\"), b.field(\"v\")))\n        .build();\n    \r\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[+\"\n        + \"(CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'),\"\n        + \" CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[+($0, $0)])\\n\"\n        + \"  LogicalProject(v=[CASE(=($7, 0), 'zero', =($7, 1), \"\n        + \"'one', =($7, 2), 'two', 'other')])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder(c -> c)), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","date":"2020-02-13 09:54:41","endLine":795,"groupId":"14823","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectBloat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/9e09dcd8f928823d26cccaeca198edb85265ef.src","preCode":"  @Test public void testProjectBloat() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.alias(\n                    caseCall(b, b.field(\"DEPTNO\"),\n                        b.literal(0), b.literal(\"zero\"),\n                        b.literal(1), b.literal(\"one\"),\n                        b.literal(2), b.literal(\"two\"),\n                        b.literal(\"other\")),\n                    \"v\"))\n            .project(\n                b.call(SqlStdOperatorTable.PLUS, b.field(\"v\"), b.field(\"v\")))\n        .build();\n    \r\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[+\"\n        + \"(CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'),\"\n        + \" CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[+($0, $0)])\\n\"\n        + \"  LogicalProject(v=[CASE(=($7, 0), 'zero', =($7, 1), \"\n        + \"'one', =($7, 2), 'two', 'other')])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder(c -> c)), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":761,"status":"B"},{"authorDate":"2020-02-06 09:02:22","commitOrder":1,"curCode":"  @Test public void testProjectBloat2() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.field(\"DEPTNO\"),\n                b.field(\"SAL\"),\n                b.alias(\n                    b.call(SqlStdOperatorTable.PLUS, b.field(\"DEPTNO\"),\n                        b.field(\"EMPNO\")), \"PLUS\"))\n            .project(\n                b.call(SqlStdOperatorTable.MULTIPLY, b.field(\"SAL\"),\n                    b.field(\"PLUS\")),\n                b.field(\"SAL\"))\n        .build();\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[*($5, +($7, $0))], SAL=[$5])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[*($1, $2)], SAL=[$1])\\n\"\n        + \"  LogicalProject(DEPTNO=[$7], SAL=[$5], PLUS=[+($7, $0)])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder(c -> c)), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","date":"2020-02-13 09:54:41","endLine":827,"groupId":"14824","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectBloat2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/aa/9e09dcd8f928823d26cccaeca198edb85265ef.src","preCode":"  @Test public void testProjectBloat2() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.field(\"DEPTNO\"),\n                b.field(\"SAL\"),\n                b.alias(\n                    b.call(SqlStdOperatorTable.PLUS, b.field(\"DEPTNO\"),\n                        b.field(\"EMPNO\")), \"PLUS\"))\n            .project(\n                b.call(SqlStdOperatorTable.MULTIPLY, b.field(\"SAL\"),\n                    b.field(\"PLUS\")),\n                b.field(\"SAL\"))\n        .build();\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[*($5, +($7, $0))], SAL=[$5])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[*($1, $2)], SAL=[$1])\\n\"\n        + \"  LogicalProject(DEPTNO=[$7], SAL=[$5], PLUS=[+($7, $0)])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder(c -> c)), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":797,"status":"B"}],"commitId":"555da953fe758a7d310aeb3aed463f3f2f3cdc3b","commitMessage":"@@@[CALCITE-3774] In RelBuilder and ProjectMergeRule.  prevent merges when it would increase expression complexity\n\nAdd an option RelBuilder.Config.bloat().  default 100.\nSet it.  using RelBuilder.Config.withBloat(int). \nto -1 to never merge. \n0 to merge only if complexity does not increase. \nb to merge if complexity increases by no more than b.\n\nDeprecate RelBuilder.shouldMergeProject().\n\nCache the nodeCount value in RexCall and RexWindow. Compute nodeCount\neach time for RexOver (a sub-class of RexCall with an extra window). \nbecause caching it would increase the complexity of RexCall's\nconstructor.\n","date":"2020-02-13 09:54:41","modifiedFileCount":"15","status":"B","submitter":"Julian Hyde"},{"authorTime":"2020-03-28 08:06:48","codes":[{"authorDate":"2020-03-28 08:06:48","commitOrder":2,"curCode":"  @Test public void testProjectBloat() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.alias(\n                    caseCall(b, b.field(\"DEPTNO\"),\n                        b.literal(0), b.literal(\"zero\"),\n                        b.literal(1), b.literal(\"one\"),\n                        b.literal(2), b.literal(\"two\"),\n                        b.literal(\"other\")),\n                    \"v\"))\n            .project(\n                b.call(SqlStdOperatorTable.PLUS, b.field(\"v\"), b.field(\"v\")))\n        .build();\n    \r\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[+\"\n        + \"(CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'),\"\n        + \" CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[+($0, $0)])\\n\"\n        + \"  LogicalProject(v=[CASE(=($7, 0), 'zero', =($7, 1), \"\n        + \"'one', =($7, 2), 'two', 'other')])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","date":"2020-04-06 04:53:37","endLine":802,"groupId":"14823","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectBloat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c6/57ccb2ff7f061fad98405d443263b63f995a33.src","preCode":"  @Test public void testProjectBloat() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.alias(\n                    caseCall(b, b.field(\"DEPTNO\"),\n                        b.literal(0), b.literal(\"zero\"),\n                        b.literal(1), b.literal(\"one\"),\n                        b.literal(2), b.literal(\"two\"),\n                        b.literal(\"other\")),\n                    \"v\"))\n            .project(\n                b.call(SqlStdOperatorTable.PLUS, b.field(\"v\"), b.field(\"v\")))\n        .build();\n    \r\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[+\"\n        + \"(CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'),\"\n        + \" CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[+($0, $0)])\\n\"\n        + \"  LogicalProject(v=[CASE(=($7, 0), 'zero', =($7, 1), \"\n        + \"'one', =($7, 2), 'two', 'other')])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder(c -> c)), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":768,"status":"M"},{"authorDate":"2020-03-28 08:06:48","commitOrder":2,"curCode":"  @Test public void testProjectBloat2() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.field(\"DEPTNO\"),\n                b.field(\"SAL\"),\n                b.alias(\n                    b.call(SqlStdOperatorTable.PLUS, b.field(\"DEPTNO\"),\n                        b.field(\"EMPNO\")), \"PLUS\"))\n            .project(\n                b.call(SqlStdOperatorTable.MULTIPLY, b.field(\"SAL\"),\n                    b.field(\"PLUS\")),\n                b.field(\"SAL\"))\n        .build();\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[*($5, +($7, $0))], SAL=[$5])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[*($1, $2)], SAL=[$1])\\n\"\n        + \"  LogicalProject(DEPTNO=[$7], SAL=[$5], PLUS=[+($7, $0)])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","date":"2020-04-06 04:53:37","endLine":834,"groupId":"14824","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectBloat2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c6/57ccb2ff7f061fad98405d443263b63f995a33.src","preCode":"  @Test public void testProjectBloat2() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.field(\"DEPTNO\"),\n                b.field(\"SAL\"),\n                b.alias(\n                    b.call(SqlStdOperatorTable.PLUS, b.field(\"DEPTNO\"),\n                        b.field(\"EMPNO\")), \"PLUS\"))\n            .project(\n                b.call(SqlStdOperatorTable.MULTIPLY, b.field(\"SAL\"),\n                    b.field(\"PLUS\")),\n                b.field(\"SAL\"))\n        .build();\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[*($5, +($7, $0))], SAL=[$5])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[*($1, $2)], SAL=[$1])\\n\"\n        + \"  LogicalProject(DEPTNO=[$7], SAL=[$5], PLUS=[+($7, $0)])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder(c -> c)), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":804,"status":"M"}],"commitId":"df3e3c652e3499ec03a224468fb2918752bae461","commitMessage":"@@@[CALCITE-3876] RelToSqlConverter should not merge a Project that contains a window function that references a window function in input Project\n\nMain fix is to RelToSqlConverter.  to force a new sub-query to be created.\n\nThe problem in this case was not with ProjectMergeRule or with\nRelBuilder.project.  but I fixed those also.\n","date":"2020-04-06 04:53:37","modifiedFileCount":"6","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testProjectBloat() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.alias(\n                    caseCall(b, b.field(\"DEPTNO\"),\n                        b.literal(0), b.literal(\"zero\"),\n                        b.literal(1), b.literal(\"one\"),\n                        b.literal(2), b.literal(\"two\"),\n                        b.literal(\"other\")),\n                    \"v\"))\n            .project(\n                b.call(SqlStdOperatorTable.PLUS, b.field(\"v\"), b.field(\"v\")))\n        .build();\n    \r\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[+\"\n        + \"(CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'),\"\n        + \" CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[+($0, $0)])\\n\"\n        + \"  LogicalProject(v=[CASE(=($7, 0), 'zero', =($7, 1), \"\n        + \"'one', =($7, 2), 'two', 'other')])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":802,"groupId":"101248","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectBloat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testProjectBloat() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.alias(\n                    caseCall(b, b.field(\"DEPTNO\"),\n                        b.literal(0), b.literal(\"zero\"),\n                        b.literal(1), b.literal(\"one\"),\n                        b.literal(2), b.literal(\"two\"),\n                        b.literal(\"other\")),\n                    \"v\"))\n            .project(\n                b.call(SqlStdOperatorTable.PLUS, b.field(\"v\"), b.field(\"v\")))\n        .build();\n    \r\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[+\"\n        + \"(CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'),\"\n        + \" CASE(=($7, 0), 'zero', =($7, 1), 'one', =($7, 2), 'two', 'other'))])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[+($0, $0)])\\n\"\n        + \"  LogicalProject(v=[CASE(=($7, 0), 'zero', =($7, 1), \"\n        + \"'one', =($7, 2), 'two', 'other')])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":768,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testProjectBloat2() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.field(\"DEPTNO\"),\n                b.field(\"SAL\"),\n                b.alias(\n                    b.call(SqlStdOperatorTable.PLUS, b.field(\"DEPTNO\"),\n                        b.field(\"EMPNO\")), \"PLUS\"))\n            .project(\n                b.call(SqlStdOperatorTable.MULTIPLY, b.field(\"SAL\"),\n                    b.field(\"PLUS\")),\n                b.field(\"SAL\"))\n        .build();\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[*($5, +($7, $0))], SAL=[$5])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[*($1, $2)], SAL=[$1])\\n\"\n        + \"  LogicalProject(DEPTNO=[$7], SAL=[$5], PLUS=[+($7, $0)])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","date":"2020-04-06 04:57:49","endLine":834,"groupId":"101248","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectBloat2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cb/daecb405cbec050a5895b3b551f3f9b9367c58.src","preCode":"  @Test public void testProjectBloat2() {\n    final Function<RelBuilder, RelNode> f = b ->\n        b.scan(\"EMP\")\n            .project(\n                b.field(\"DEPTNO\"),\n                b.field(\"SAL\"),\n                b.alias(\n                    b.call(SqlStdOperatorTable.PLUS, b.field(\"DEPTNO\"),\n                        b.field(\"EMPNO\")), \"PLUS\"))\n            .project(\n                b.call(SqlStdOperatorTable.MULTIPLY, b.field(\"SAL\"),\n                    b.field(\"PLUS\")),\n                b.field(\"SAL\"))\n        .build();\n    \r\n    \r\n    final String expected = \"LogicalProject($f0=[*($5, +($7, $0))], SAL=[$5])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    final String expectedNeg = \"LogicalProject($f0=[*($1, $2)], SAL=[$1])\\n\"\n        + \"  LogicalProject(DEPTNO=[$7], SAL=[$5], PLUS=[+($7, $0)])\\n\"\n        + \"    LogicalTableScan(table=[[scott, EMP]])\\n\";\n    assertThat(f.apply(createBuilder()), hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(0))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(-1))),\n        hasTree(expectedNeg));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(10))),\n        hasTree(expected));\n    assertThat(f.apply(createBuilder(c -> c.withBloat(20))),\n        hasTree(expected));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelBuilderTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":804,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
