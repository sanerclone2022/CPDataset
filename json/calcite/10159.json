[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ArrayLengthRecordField that = (ArrayLengthRecordField) o;\n\n    if (!clazz.equals(that.clazz)) {\n      return false;\n    }\n    if (!fieldName.equals(that.fieldName)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":79,"groupId":"14555","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/6b/ef32a8ad672504bd36894157125c42cc3e982d.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ArrayLengthRecordField that = (ArrayLengthRecordField) o;\n\n    if (!clazz.equals(that.clazz)) {\n      return false;\n    }\n    if (!fieldName.equals(that.fieldName)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/ArrayLengthRecordField.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":1,"curCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ReflectedPseudoField that = (ReflectedPseudoField) o;\n\n    if (!field.equals(that.field)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 09:39:34","endLine":69,"groupId":"14555","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/5f/0052adb794109e9c924f7ab220db69cd929082.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ReflectedPseudoField that = (ReflectedPseudoField) o;\n\n    if (!field.equals(that.field)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/ReflectedPseudoField.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"a611d645ad754844a39f3d98f5f814f13dbd9404","commitMessage":"@@@[CALCITE-296] Re-organize package structure;\n[CALCITE-419] Naming convention for planner rules\n\nThis change only renames files (and deletes some obsolete files). There are no content changes.\n","date":"2014-11-14 09:39:34","modifiedFileCount":"0","status":"B","submitter":"Julian Hyde"},{"authorTime":"2014-11-14 10:11:34","codes":[{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ArrayLengthRecordField that = (ArrayLengthRecordField) o;\n\n    if (!clazz.equals(that.clazz)) {\n      return false;\n    }\n    if (!fieldName.equals(that.fieldName)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 10:22:06","endLine":78,"groupId":"14555","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/26/cb55f77be003843eb6ffc064242011e0b12b34.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ArrayLengthRecordField that = (ArrayLengthRecordField) o;\n\n    if (!clazz.equals(that.clazz)) {\n      return false;\n    }\n    if (!fieldName.equals(that.fieldName)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/ArrayLengthRecordField.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2014-11-14 10:11:34","commitOrder":2,"curCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ReflectedPseudoField that = (ReflectedPseudoField) o;\n\n    if (!field.equals(that.field)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2014-11-14 10:22:06","endLine":68,"groupId":"14555","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/d0/8b06c3c8b394fbfef445d4455ca3217a559bbc.src","preCode":"  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ReflectedPseudoField that = (ReflectedPseudoField) o;\n\n    if (!field.equals(that.field)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/ReflectedPseudoField.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55","commitMessage":"@@@[CALCITE-306] Standardize code style for \"import package.*;\"\n\nRename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].\n\nMake many inner classes of EnumerableRules (e.g. EnumerableFilter.  EnumerableFilterRule) top-level classes.\n\nApply a consistent formatting convention for string literals split over multiple lines.\n\nRename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.\n\nChange occurrences of \"optiq\" and \"eigenbase\" in java code to \"calcite\".\n","date":"2014-11-14 10:22:06","modifiedFileCount":"1156","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public boolean equals(@Nullable Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ArrayLengthRecordField that = (ArrayLengthRecordField) o;\n\n    if (!clazz.equals(that.clazz)) {\n      return false;\n    }\n    if (!fieldName.equals(that.fieldName)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":83,"groupId":"10159","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(@NullableObjecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/dbb5681e653a29abc9bc8718279101296c5766.src","preCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ArrayLengthRecordField that = (ArrayLengthRecordField) o;\n\n    if (!clazz.equals(that.clazz)) {\n      return false;\n    }\n    if (!fieldName.equals(that.fieldName)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/ArrayLengthRecordField.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":3,"curCode":"  @Override public boolean equals(@Nullable Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ReflectedPseudoField that = (ReflectedPseudoField) o;\n\n    if (!field.equals(that.field)) {\n      return false;\n    }\n\n    return true;\n  }\n","date":"2020-11-30 06:45:33","endLine":71,"groupId":"10159","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"equals","params":"(@NullableObjecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/73/8420d5aa1213e93827d4a8954ad8beedac2083.src","preCode":"  @Override public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    ReflectedPseudoField that = (ReflectedPseudoField) o;\n\n    if (!field.equals(that.field)) {\n      return false;\n    }\n\n    return true;\n  }\n","realPath":"linq4j/src/main/java/org/apache/calcite/linq4j/tree/ReflectedPseudoField.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"}]
