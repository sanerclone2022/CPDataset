[{"authorTime":"2017-03-10 20:53:51","codes":[{"authorDate":"2017-03-10 20:53:51","commitOrder":1,"curCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2017-04-27 02:56:37","endLine":1541,"groupId":"1611","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/c230aa1837e272d15599363543c58e2d8b0a29.src","preCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1520,"status":"B"},{"authorDate":"2017-03-10 20:53:51","commitOrder":1,"curCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2017-04-27 02:56:37","endLine":1564,"groupId":"1611","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumnsSwapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/db/c230aa1837e272d15599363543c58e2d8b0a29.src","preCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1543,"status":"B"}],"commitId":"41b05d784fd2e0ae81b09d013ef8a746036ca446","commitMessage":"@@@[CALCITE-1682] New metadata providers for expression column origin and all predicates in plan\n\nIncludes:\n* RelNode type metadata provider\n* Ranges containment-based simplification in conjunctive predicates\n","date":"2017-04-27 02:56:37","modifiedFileCount":"16","status":"B","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2017-03-29 14:36:43","codes":[{"authorDate":"2017-03-29 14:36:43","commitOrder":2,"curCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertTrue(result1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertTrue(result2.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2017-04-27 02:56:37","endLine":1541,"groupId":"15185","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/25b30757dc28f5c50a8e650fb49838c96dc902.src","preCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertTrue(result1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertTrue(result2.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1520,"status":"MB"},{"authorDate":"2017-03-29 14:36:43","commitOrder":2,"curCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertTrue(result1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertTrue(result2.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2017-04-27 02:56:37","endLine":1564,"groupId":"15185","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumnsSwapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/af/25b30757dc28f5c50a8e650fb49838c96dc902.src","preCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertTrue(result1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertTrue(result2.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1543,"status":"MB"}],"commitId":"84b49f5b48842708e9f4d912b4f9564745d74bc6","commitMessage":"@@@[CALCITE-1731] Materialized view rewriting for join and aggregate operators\n","date":"2017-04-27 02:56:37","modifiedFileCount":"16","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2018-11-14 00:42:35","codes":[{"authorDate":"2018-11-14 00:42:35","commitOrder":3,"curCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertEquals(result1.getQualifiedName(), EMP_QNAME);\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertEquals(result2.getQualifiedName(), EMP_QNAME);\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2018-11-14 00:42:52","endLine":1644,"groupId":"2843","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1c/5140f4056c8213a8beb257c815ed81b3a52b1b.src","preCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertTrue(result1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertTrue(result2.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1623,"status":"M"},{"authorDate":"2018-11-14 00:42:35","commitOrder":3,"curCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertEquals(result1.getQualifiedName(), EMP_QNAME);\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertEquals(result2.getQualifiedName(), EMP_QNAME);\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2018-11-14 00:42:52","endLine":1667,"groupId":"2843","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumnsSwapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/1c/5140f4056c8213a8beb257c815ed81b3a52b1b.src","preCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertTrue(result1.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertTrue(result2.getQualifiedName().equals(EMP_QNAME));\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1646,"status":"M"}],"commitId":"81a9bd783e2cc8a34e7a175b09cfd0b77dbf334a","commitMessage":"@@@[CALCITE-2668] Support for left/right outer join in RelMdExpressionLineage\n","date":"2018-11-14 00:42:52","modifiedFileCount":"4","status":"M","submitter":"Jesus Camacho Rodriguez"},{"authorTime":"2019-10-16 19:22:37","codes":[{"authorDate":"2019-10-16 19:22:37","commitOrder":4,"curCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertEquals(result1.getQualifiedName(), EMP_QNAME);\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertEquals(result2.getQualifiedName(), EMP_QNAME);\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2019-10-18 06:51:31","endLine":1674,"groupId":"2843","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertEquals(result1.getQualifiedName(), EMP_QNAME);\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertEquals(result2.getQualifiedName(), EMP_QNAME);\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1653,"status":"M"},{"authorDate":"2019-10-16 19:22:37","commitOrder":4,"curCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertEquals(result1.getQualifiedName(), EMP_QNAME);\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertEquals(result2.getQualifiedName(), EMP_QNAME);\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2019-10-18 06:51:31","endLine":1697,"groupId":"2843","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumnsSwapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a5/546e7bd8ccd670f7df343a68ec43f14ff8ea11.src","preCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = RelMetadataQuery.instance();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertEquals(result1.getQualifiedName(), EMP_QNAME);\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertEquals(result2.getQualifiedName(), EMP_QNAME);\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1676,"status":"M"}],"commitId":"ebc16afa935888578b5befc870c1997f307a6cb5","commitMessage":"@@@[CALCITE-3421] Reuse RelMetadataQuery in test suites\n\nClose #1513\n","date":"2019-10-18 06:51:31","modifiedFileCount":"5","status":"M","submitter":"dz"},{"authorTime":"2019-10-25 22:40:36","codes":[{"authorDate":"2019-10-25 22:40:36","commitOrder":5,"curCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2019-10-30 10:10:44","endLine":1990,"groupId":"1611","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/d2de04e1f002bb086c95d3a32edb41ffb94f09.src","preCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertEquals(result1.getQualifiedName(), EMP_QNAME);\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertEquals(result2.getQualifiedName(), EMP_QNAME);\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1969,"status":"M"},{"authorDate":"2019-10-25 22:40:36","commitOrder":5,"curCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2019-10-30 10:10:44","endLine":2013,"groupId":"1611","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumnsSwapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/96/d2de04e1f002bb086c95d3a32edb41ffb94f09.src","preCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertEquals(result1.getQualifiedName(), EMP_QNAME);\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertEquals(result2.getQualifiedName(), EMP_QNAME);\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":1992,"status":"M"}],"commitId":"977ea0d96f1f8e4225b6e27f02d86d0ea5aebb9a","commitMessage":"@@@[CALCITE-3446] Make RelMetadataQuery extensible\n\n* Add interface RelOptCluster.setMetadataQuery to let user set the\ncustomized RelMetadataQuery instance\n* Add a base metadata query class named RelMetadataQueryBase.  it\nholds the common parts that a metadata query requires.  also add doc\nabout how to add a new RelMetadataQuery sub-class\n* In RelMetadataQuery.  make constructor RelMetadataQuery(boolean) and\nRelMetadataQuery(JaninoRelMetadataProvider.  RelMetadataQuery) private. \nadd a new constrcutor RelMetadataQuery() for sub-class\n* Add test cases in RelMetadataTest\n* Refactor out assertEquals within RelMetadataTest\n* Make RelMetadataQueryBase#THREAD_PROVIDERS default to be a empty\ninstance.  we always initialize it now in RelOptCluster\n","date":"2019-10-30 10:10:44","modifiedFileCount":"5","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2020-04-06 04:57:49","endLine":2141,"groupId":"101139","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testExpressionLineageTwoColumns() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select mgr, deptno from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(3));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(7));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2120,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":6,"curCode":"  @Test void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","date":"2020-04-06 04:57:49","endLine":2164,"groupId":"101139","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionLineageTwoColumnsSwapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/cf/1ece4728b283bdc8ffdff6174002f52f235fb8.src","preCode":"  @Test public void testExpressionLineageTwoColumnsSwapped() {\n    \r\n    \r\n    final RelNode rel = convertSql(\"select deptno, mgr from emp\");\n    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n\n    final RexNode ref1 = RexInputRef.of(0, rel.getRowType().getFieldList());\n    final Set<RexNode> r1 = mq.getExpressionLineage(rel, ref1);\n    assertThat(r1.size(), is(1));\n    final RexTableInputRef result1 = (RexTableInputRef) r1.iterator().next();\n    assertThat(result1.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result1.getIndex(), is(7));\n\n    final RexNode ref2 = RexInputRef.of(1, rel.getRowType().getFieldList());\n    final Set<RexNode> r2 = mq.getExpressionLineage(rel, ref2);\n    assertThat(r2.size(), is(1));\n    final RexTableInputRef result2 = (RexTableInputRef) r2.iterator().next();\n    assertThat(result2.getQualifiedName(), is(EMP_QNAME));\n    assertThat(result2.getIndex(), is(3));\n\n    assertThat(result1.getIdentifier(), is(result2.getIdentifier()));\n  }\n","realPath":"core/src/test/java/org/apache/calcite/test/RelMetadataTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":2143,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
