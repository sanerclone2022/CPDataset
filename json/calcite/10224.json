[{"authorTime":"2014-11-14 09:39:29","codes":[{"authorDate":"2016-05-29 11:54:33","commitOrder":2,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvStreamEnumerator<Object[]>(file,\n            null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","date":"2016-07-07 02:44:51","endLine":71,"groupId":"10265","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/75/2f8a7466efc4707c60fdbee3ec421a0aad6aba.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvStreamEnumerator<Object[]>(file,\n            null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2014-11-14 09:39:29","commitOrder":2,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<Object[]>(file,\n            null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));\n      }\n    };\n  }\n","date":"2014-11-14 09:39:34","endLine":53,"groupId":"10265","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/66/0270d8c86a7bdcd2dd95949ce5089fb461ea8d.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<Object[]>(file,\n            null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"NB"}],"commitId":"65c1cec22d93a83b73bbdb8c73d08d8642db46e1","commitMessage":"@@@[CALCITE-1227] Add streaming CSV table (Zhen Wang)\n\nClose apache/calcite#239\n","date":"2016-07-07 02:44:51","modifiedFileCount":"2","status":"M","submitter":"zhen wang"},{"authorTime":"2016-06-01 13:07:04","codes":[{"authorDate":"2016-06-01 13:07:04","commitOrder":3,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(file, cancelFlag, true, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","date":"2016-07-07 10:44:17","endLine":73,"groupId":"10618","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/72/af281cb2399f4d4b7819eb9a0890592bc1b013.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvStreamEnumerator<Object[]>(file,\n            null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2016-06-01 13:07:04","commitOrder":3,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(file, cancelFlag, false,\n            null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));\n      }\n    };\n  }\n","date":"2016-07-07 10:44:17","endLine":55,"groupId":"10618","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/50/78afe481c784057e5405b912b9d048c6eee38d.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<Object[]>(file,\n            null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"d9eb4383290e6ec7a5bca8d23fa3e03167c699fe","commitMessage":"@@@[CALCITE-30] Implement Statement.cancel\n\nResultSet.next() now throws an exception indicating that the statement\nhas been canceled.\n\nPropagate cancel into streaming CSV table (Zhen Wang).\n\nUse AtomicBoolean for cancel flag; deprecate\nRelOptPlanner.setCancelFlag.\n","date":"2016-07-07 10:44:17","modifiedFileCount":"17","status":"M","submitter":"Julian Hyde"},{"authorTime":"2016-04-18 14:51:14","codes":[{"authorDate":"2016-04-18 14:51:14","commitOrder":4,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","date":"2017-02-23 13:09:48","endLine":73,"groupId":"10618","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/df/8ba113b84b0a680bb872739ae6559876b88c9b.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(file, cancelFlag, true, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2016-04-18 14:51:14","commitOrder":4,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));\n      }\n    };\n  }\n","date":"2017-02-23 13:09:48","endLine":55,"groupId":"10618","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/55/5d917c78d6b19daf7094cd681486dfab4c766b.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(file, cancelFlag, false,\n            null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"24c25fc30315f308df13eb303177163e5a972949","commitMessage":"@@@Following [CALCITE-884] Add CSV.  JSON functionality to file adapter\n\nAdd interface Source.  as a common facade over File and URL;\nchange example CSV adapter to use Source rather than File.\n\nRelative paths in CSV and File adapter are now relative to the model. \nrather than relative to the current directory. This makes it easier to\nuse the same model.json file from tests and from sqlline.\n\nCreate table \"States_as_of\".  a snapshot the \"States\" wikipedia table\nat a particular date.  to ensure test stability.\n","date":"2017-02-23 13:09:48","modifiedFileCount":"21","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-03-02 14:54:29","codes":[{"authorDate":"2020-03-02 14:54:29","commitOrder":5,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","date":"2020-03-02 19:28:14","endLine":63,"groupId":"10618","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/c5/b94973fbbf354465e45ea05ec32c7ec864007e.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-03-02 14:54:29","commitOrder":5,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));\n      }\n    };\n  }\n","date":"2020-03-02 19:28:14","endLine":57,"groupId":"10618","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/23/7373deefc241845c1c4d7b5627b25a1e6dbc51.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"e96bf560c685b2bc8d916de42fe908906f43e2ee","commitMessage":"@@@Following CALCITE-3769: Add BindableTableScanRule into the default ruleset\n\n* Add BindableTableScanRule into the default ruleset.  so there are 2\ntable implementations.  the planner would choose the one with cheaper\ncost\n* Fix the cost estimation of BindableTableScan if there are no pushings\n* Allows the Scannable table to have the EnumerableTableScan as impl\n* For CsvTable and JsonTable in the example module.  decoupling the logic\nof runtime from Table#getRowType.  so that these tables can implement as\nENUMERABLE convention(when there are no pushings)\n\n(cherry picked from commit 2f1b4a911f15ce178374b605a2291a4336648dde)\n","date":"2020-03-02 19:28:14","modifiedFileCount":"16","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2020-07-20 08:23:08","codes":[{"authorDate":"2020-07-20 08:23:08","commitOrder":6,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","date":"2020-07-29 03:09:43","endLine":66,"groupId":"10618","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/82/8547362bf8f4e90f2940d4f33b3c1e2a91372e.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-07-20 08:23:08","commitOrder":6,"curCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, false));\n      }\n    };\n  }\n","date":"2020-07-29 03:09:43","endLine":60,"groupId":"10618","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/bd/c2af021590a586ed390e642671fa2bddcd99e7.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final int[] fields = CsvEnumerator.identityList(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"9b678f1d7ffe030711d86f475c3a9e9e95bacb8f","commitMessage":"@@@[CALCITE-4128] Remove dependency of File adapter on Example CSV adapter\n\nMove some classes from 'example/csv' to 'file'.  and make CSV adapter\ndepend on File adapter. Copy some other classes (so that we can keep the\n'example/csv' versions simple.  and add functionality to the 'file'\nadapter).\n\nRename SqlTest to FileAdapterTest.  factor utility methods into\nFileAdapterTests.  and copy in a bunch of tests from example/csv/.../CsvTest.\n","date":"2020-07-29 03:09:43","modifiedFileCount":"10","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-09-29 22:09:05","codes":[{"authorDate":"2020-09-29 22:09:05","commitOrder":7,"curCode":"  @Override public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      @Override public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","date":"2020-10-07 05:42:47","endLine":66,"groupId":"10618","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/28/54be93965b4666cef4f5e9d7fcae16d4892934.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-09-29 22:09:05","commitOrder":7,"curCode":"  @Override public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      @Override public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, false));\n      }\n    };\n  }\n","date":"2020-10-07 05:42:47","endLine":60,"groupId":"10618","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/00/827ebb29bfc7435743698c2975439b00a4e162.src","preCode":"  public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, false));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"66caa54c5e272f8287ca132ca012733898a38768","commitMessage":"@@@[CALCITE-4314] Add missing @Override annotations\n","date":"2020-10-07 05:42:47","modifiedFileCount":"745","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2020-05-29 00:04:40","codes":[{"authorDate":"2020-05-29 00:04:40","commitOrder":8,"curCode":"  @Override public Enumerable<@Nullable Object[]> scan(DataContext root) {\n    JavaTypeFactory typeFactory = requireNonNull(root.getTypeFactory(), \"root.getTypeFactory\");\n    final List<CsvFieldType> fieldTypes = getFieldTypes(typeFactory);\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<@Nullable Object[]>() {\n      @Override public Enumerator<@Nullable Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","date":"2020-11-30 06:45:33","endLine":72,"groupId":"421","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/a6/65daaf4cbf8e4689d28c7625a4f62884c676a3.src","preCode":"  @Override public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      @Override public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-05-29 00:04:40","commitOrder":8,"curCode":"  @Override public Enumerable<@Nullable Object[]> scan(DataContext root) {\n    JavaTypeFactory typeFactory = requireNonNull(root.getTypeFactory(), \"root.getTypeFactory\");\n    final List<CsvFieldType> fieldTypes = getFieldTypes(typeFactory);\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<@Nullable Object[]>() {\n      @Override public Enumerator<@Nullable Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, false));\n      }\n    };\n  }\n","date":"2020-11-30 06:45:33","endLine":66,"groupId":"421","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/95/a46600f62e54377a8d6016625a9af4c42e9f12.src","preCode":"  @Override public Enumerable<Object[]> scan(DataContext root) {\n    final List<CsvFieldType> fieldTypes = getFieldTypes(root.getTypeFactory());\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<Object[]>() {\n      @Override public Enumerator<Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, false));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"d9a81b88ad561e7e4cedae93e805e0d7a53a7f1a","commitMessage":"@@@[CALCITE-4199] Add nullability annotations\n\nThe commit includes javadoc updates and refactorings made by Julian Hyde in https://github.com/apache/calcite/pull/2278\n","date":"2020-11-30 06:45:33","modifiedFileCount":"1012","status":"M","submitter":"Vladimir Sitnikov"},{"authorTime":"2021-03-06 01:37:57","codes":[{"authorDate":"2021-03-06 01:37:57","commitOrder":9,"curCode":"  @Override public Enumerable<@Nullable Object[]> scan(DataContext root) {\n    JavaTypeFactory typeFactory = root.getTypeFactory();\n    final List<CsvFieldType> fieldTypes = getFieldTypes(typeFactory);\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<@Nullable Object[]>() {\n      @Override public Enumerator<@Nullable Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","date":"2021-03-13 15:05:43","endLine":70,"groupId":"10224","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/2c/01cd48f117f79f9f34d0b950e158b0f6cf4762.src","preCode":"  @Override public Enumerable<@Nullable Object[]> scan(DataContext root) {\n    JavaTypeFactory typeFactory = requireNonNull(root.getTypeFactory(), \"root.getTypeFactory\");\n    final List<CsvFieldType> fieldTypes = getFieldTypes(typeFactory);\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<@Nullable Object[]>() {\n      @Override public Enumerator<@Nullable Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, true, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, true));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-03-06 01:37:57","commitOrder":9,"curCode":"  @Override public Enumerable<@Nullable Object[]> scan(DataContext root) {\n    JavaTypeFactory typeFactory = root.getTypeFactory();\n    final List<CsvFieldType> fieldTypes = getFieldTypes(typeFactory);\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<@Nullable Object[]>() {\n      @Override public Enumerator<@Nullable Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, false));\n      }\n    };\n  }\n","date":"2021-03-13 15:05:43","endLine":64,"groupId":"10224","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"scan","params":"(DataContextroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/dd/24e210c2f49a2b54a5c1d1aa505a790e36d489.src","preCode":"  @Override public Enumerable<@Nullable Object[]> scan(DataContext root) {\n    JavaTypeFactory typeFactory = requireNonNull(root.getTypeFactory(), \"root.getTypeFactory\");\n    final List<CsvFieldType> fieldTypes = getFieldTypes(typeFactory);\n    final List<Integer> fields = ImmutableIntList.identity(fieldTypes.size());\n    final AtomicBoolean cancelFlag = DataContext.Variable.CANCEL_FLAG.get(root);\n    return new AbstractEnumerable<@Nullable Object[]>() {\n      @Override public Enumerator<@Nullable Object[]> enumerator() {\n        return new CsvEnumerator<>(source, cancelFlag, false, null,\n            CsvEnumerator.arrayConverter(fieldTypes, fields, false));\n      }\n    };\n  }\n","realPath":"example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"93a2263f7af23be34171a6a1e4f5864a85691650","commitMessage":"@@@[CALCITE-4524] Make some fields non-nullable (SqlSelect.selectList.  DataContext.getTypeFactory)\n\nIn order to make SqlSelect.selectList non-nullable.  we had to\nchange the flow in RelToSqlConverter.  where selectList was\ninitially null; now we set it to SqlNodeList.SINGLETON_STAR.\n\nAdd class DataContexts.  with a few useful implementations of\ninterface DataContext. Phase out Schemas.createDataContext.\n\nResolve some other TODOs relating to nullability.\n","date":"2021-03-13 15:05:43","modifiedFileCount":"42","status":"M","submitter":"Julian Hyde"}]
