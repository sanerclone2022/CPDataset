[{"authorTime":"2016-12-07 06:41:11","codes":[{"authorDate":"2016-12-07 06:41:11","commitOrder":1,"curCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"))\n            .build();\n    String expectedPhysial =\n        \"\"\n            + \"EnumerableProject(DEPTNO=[$7])\\n\"\n            + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical =\n        \"\"\n            + \"LogicalProject(DEPTNO=[$7])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysial, expectedLogical);\n  }\n","date":"2019-08-27 11:44:32","endLine":175,"groupId":"11391","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/c0b1fe178cf3d3e6f0a4dd7f727f1afb048ce6.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"))\n            .build();\n    String expectedPhysial =\n        \"\"\n            + \"EnumerableProject(DEPTNO=[$7])\\n\"\n            + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical =\n        \"\"\n            + \"LogicalProject(DEPTNO=[$7])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysial, expectedLogical);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/logical/ToLogicalConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"},{"authorDate":"2016-12-07 06:41:11","commitOrder":1,"curCode":"  @Test public void testSort() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .sort(builder.field(2))\n            .build();\n    String expectedPhysial =\n        \"\"\n            + \"EnumerableSort(sort0=[$2], dir0=[ASC])\\n\"\n            + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical =\n        \"\"\n            + \"LogicalSort(sort0=[$2], dir0=[ASC])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysial, expectedLogical);\n  }\n","date":"2019-08-27 11:44:32","endLine":220,"groupId":"11391","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/70/c0b1fe178cf3d3e6f0a4dd7f727f1afb048ce6.src","preCode":"  @Test public void testSort() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .sort(builder.field(2))\n            .build();\n    String expectedPhysial =\n        \"\"\n            + \"EnumerableSort(sort0=[$2], dir0=[ASC])\\n\"\n            + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical =\n        \"\"\n            + \"LogicalSort(sort0=[$2], dir0=[ASC])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysial, expectedLogical);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/logical/ToLogicalConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"e5ae1796e8016b0a5e943f458bf31a7e7e8aa75a","commitMessage":"@@@[CALCITE-3122] Convert Pig Latin scripts into Calcite relational algebra and Calcite SQL (Khai Tran)\n\nRemove SqlNode.toSqlString and replace it with SqlNode.unparse.\n\nMute pig parser log in piglet tests.\n\nRefactor DynamicTupleRecordType.\n\nRemove dependency on core/PigRelBuilder from LogicalPigRelBuilder and\nrename LogicalPigRelBuilder to PigRelBuilder.\n\nFix RAT report on Travis on unapproved license files.\n\nClose apache/calcite#1265\n","date":"2019-08-27 11:44:32","modifiedFileCount":"19","status":"B","submitter":"Khai Tran"},{"authorTime":"2020-01-23 04:53:15","codes":[{"authorDate":"2020-01-23 04:53:15","commitOrder":2,"curCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"))\n            .build();\n    String expectedPhysical = \"\"\n        + \"EnumerableProject(DEPTNO=[$7])\\n\"\n        + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical = \"\"\n        + \"LogicalProject(DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysical, expectedLogical);\n  }\n","date":"2020-01-30 07:35:36","endLine":175,"groupId":"11391","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/a647cd2e99e6f149f726162a1abdf956d925e2.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"))\n            .build();\n    String expectedPhysial =\n        \"\"\n            + \"EnumerableProject(DEPTNO=[$7])\\n\"\n            + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical =\n        \"\"\n            + \"LogicalProject(DEPTNO=[$7])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysial, expectedLogical);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/logical/ToLogicalConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2020-01-23 04:53:15","commitOrder":2,"curCode":"  @Test public void testSort() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .sort(builder.field(2))\n            .build();\n    String expectedPhysical = \"\"\n        + \"EnumerableSort(sort0=[$2], dir0=[ASC])\\n\"\n        + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical = \"\"\n        + \"LogicalSort(sort0=[$2], dir0=[ASC])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysical, expectedLogical);\n  }\n","date":"2020-01-30 07:35:36","endLine":216,"groupId":"11391","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/42/a647cd2e99e6f149f726162a1abdf956d925e2.src","preCode":"  @Test public void testSort() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .sort(builder.field(2))\n            .build();\n    String expectedPhysial =\n        \"\"\n            + \"EnumerableSort(sort0=[$2], dir0=[ASC])\\n\"\n            + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical =\n        \"\"\n            + \"LogicalSort(sort0=[$2], dir0=[ASC])\\n\"\n            + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysial, expectedLogical);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/logical/ToLogicalConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"3892bcd215724a697814426f26d7b8dcd77a4568","commitMessage":"@@@Trim trailing spaces in test SQL\n","date":"2020-01-30 07:35:36","modifiedFileCount":"22","status":"M","submitter":"Julian Hyde"},{"authorTime":"2020-04-02 10:39:10","codes":[{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testProject() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"))\n            .build();\n    String expectedPhysical = \"\"\n        + \"EnumerableProject(DEPTNO=[$7])\\n\"\n        + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical = \"\"\n        + \"LogicalProject(DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysical, expectedLogical);\n  }\n","date":"2020-04-06 04:57:49","endLine":174,"groupId":"101484","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProject","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/afd7374de8cf43c006c123c7cc2225199e33b1.src","preCode":"  @Test public void testProject() {\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .project(builder.field(\"DEPTNO\"))\n            .build();\n    String expectedPhysical = \"\"\n        + \"EnumerableProject(DEPTNO=[$7])\\n\"\n        + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical = \"\"\n        + \"LogicalProject(DEPTNO=[$7])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysical, expectedLogical);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/logical/ToLogicalConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-04-02 10:39:10","commitOrder":3,"curCode":"  @Test void testSort() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .sort(builder.field(2))\n            .build();\n    String expectedPhysical = \"\"\n        + \"EnumerableSort(sort0=[$2], dir0=[ASC])\\n\"\n        + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical = \"\"\n        + \"LogicalSort(sort0=[$2], dir0=[ASC])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysical, expectedLogical);\n  }\n","date":"2020-04-06 04:57:49","endLine":215,"groupId":"101484","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-calcite-10-0.7/blobInfo/CC_OUT/blobs/f4/afd7374de8cf43c006c123c7cc2225199e33b1.src","preCode":"  @Test public void testSort() {\n    \r\n    \r\n    \r\n    \r\n    final RelBuilder builder = builder();\n    final RelNode rel =\n        builder.scan(\"EMP\")\n            .sort(builder.field(2))\n            .build();\n    String expectedPhysical = \"\"\n        + \"EnumerableSort(sort0=[$2], dir0=[ASC])\\n\"\n        + \"  EnumerableTableScan(table=[[scott, EMP]])\\n\";\n    String expectedLogical = \"\"\n        + \"LogicalSort(sort0=[$2], dir0=[ASC])\\n\"\n        + \"  LogicalTableScan(table=[[scott, EMP]])\\n\";\n    verify(rel, expectedPhysical, expectedLogical);\n  }\n","realPath":"core/src/test/java/org/apache/calcite/rel/logical/ToLogicalConverterTest.java","repoName":"calcite","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"9492dd4146f63ddc028010d6c4e86f6a5cb29a8d","commitMessage":"@@@[CALCITE-3892] Make junit test classes and methods non-public where possible\n\nPrior to junit 5.  classes and methods had to be public. This is no\nlonger the case.\n\nSome classes need to remain public because they are referenced from\nelsewhere.  or if they use reflection somehow. The remaining 'public'\nkeyword will be informative to maintainers.\n","date":"2020-04-06 04:57:49","modifiedFileCount":"196","status":"M","submitter":"Julian Hyde"}]
